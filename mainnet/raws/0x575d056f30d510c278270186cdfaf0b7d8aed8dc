{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/nft/WhitehatHallOfFame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {ERC721} from \\\"../erc721/ERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC721Burnable} from \\\"../interfaces/IERC721/IERC721Burnable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC1967UUPSENSUpgradeable} from \\\"../proxy/ERC1967UUPSENSUpgradeable.sol\\\";\\n\\ncontract WhitehatHallOfFame is ERC1967UUPSENSUpgradeable, ERC721, IERC721Metadata, IERC721Burnable {\\n  constructor(string[] memory ensName) ERC1967UUPSENSUpgradeable(ensName) {\\n    _requireOwner();\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721, IERC165) onlyProxy returns (bool) {\\n    return\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Burnable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  string public constant override name = \\\"WhitehatHallOfFame\\\";\\n  string public constant override symbol = \\\"WHoF\\\";\\n  mapping(uint256 => string) public override tokenURI;\\n\\n  uint256 internal _nonce;\\n\\n  function _nextNonce() internal returns (uint256) {\\n    unchecked {\\n      return ++_nonce;\\n    }\\n  }\\n\\n  function mint(address recipient, string calldata uri) external onlyOwner {\\n    uint256 tokenId = _nextNonce();\\n    tokenURI[tokenId] = uri;\\n    _mint(recipient, tokenId);\\n  }\\n\\n  function safeMint(\\n    address recipient,\\n    string calldata uri,\\n    bytes calldata transferData\\n  ) external onlyOwner {\\n    uint256 tokenId = _nextNonce();\\n    tokenURI[tokenId] = uri;\\n    _safeMint(recipient, tokenId, transferData);\\n  }\\n\\n  function burn(uint256 tokenId) external override onlyApproved(tokenId) {\\n    _burn(tokenId);\\n    delete tokenURI[tokenId];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {SafeCall} from \\\"../lib/SafeCall.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721 {\\n  using SafeCall for address;\\n\\n  /// Mapping from token ID to owner address\\n  // We can't use the auto-generated getter because `ownerOf` must throw for\\n  // nonexistent tokens and tokens owned by the zero address\\n  mapping(uint256 => address) private _owners;\\n\\n  /// Mapping owner address to token count\\n  // We can't use the auto-generated getter because `balanceOf` must throw for\\n  // the zero address\\n  mapping(address => uint256) private _balances;\\n\\n  /// Mapping from token ID to approved address\\n  // We can't use the auto-generated getter because `getApproved` must throw\\n  // for nonexistent tokens and tokens owned by the zero address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  /// Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) public override isApprovedForAll;\\n\\n  /**\\n   * @dev Initializes the contract.\\n   */\\n  constructor() {\\n    assert(type(IERC721).interfaceId == 0x80ac58cd);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n    return interfaceId == type(IERC721).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view virtual override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: zero address\\\");\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view virtual override returns (address owner) {\\n    owner = _owners[tokenId];\\n    require(owner != address(0), \\\"ERC721: no token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    _requireOwnerOrApprovedForAll(tokenId, _msgSender());\\n    require(to != _owners[tokenId], \\\"ERC721: to owner\\\");\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view virtual override tokenExists(tokenId) returns (address) {\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    address msgSender = _msgSender();\\n    require(operator != msgSender, \\\"ERC721: to owner\\\");\\n    isApprovedForAll[msgSender][operator] = approved;\\n    emit ApprovalForAll(msgSender, operator, approved);\\n  }\\n\\n  function _requireApproved(uint256 tokenId, address account) internal view {\\n    require(_isApprovedOrOwner(account, tokenId), \\\"ERC721: not approved\\\");\\n  }\\n\\n  function _requireOwnerOrApprovedForAll(uint256 tokenId, address account) internal view {\\n    address owner = ownerOf(tokenId);\\n    require(account == owner || isApprovedForAll[owner][account], \\\"ERC721: not approved\\\");\\n  }\\n\\n  modifier onlyApproved(uint256 tokenId) {\\n    _requireApproved(tokenId, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override onlyApproved(tokenId) {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override onlyApproved(tokenId) {\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    _checkOnERC721Received(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return _owners[tokenId] != address(0);\\n  }\\n\\n  function _requireExists(uint256 tokenId) internal view {\\n    require(_exists(tokenId), \\\"ERC721: no token\\\");\\n  }\\n\\n  modifier tokenExists(uint256 tokenId) {\\n    _requireExists(tokenId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll[owner][spender]);\\n  }\\n\\n  /**\\n   * @dev Safely mints `tokenId` and transfers it to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _mint(to, tokenId);\\n    _checkOnERC721Received(address(0), to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Mints `tokenId` and transfers it to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token exists\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    unchecked {\\n      _balances[to]++;\\n    }\\n    _owners[tokenId] = to;\\n\\n    emit Transfer(address(0), to, tokenId);\\n\\n    _afterTokenTransfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId);\\n\\n    unchecked {\\n      _balances[owner]--;\\n    }\\n    delete _owners[tokenId];\\n\\n    emit Transfer(owner, address(0), tokenId);\\n\\n    _afterTokenTransfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {\\n    require(ownerOf(tokenId) == from, \\\"ERC721: not owner\\\");\\n    require(to != address(0), \\\"ERC721: zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    unchecked {\\n      _balances[from]--;\\n      _balances[to]++;\\n    }\\n    _owners[tokenId] = to;\\n\\n    emit Transfer(from, to, tokenId);\\n\\n    _afterTokenTransfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(address to, uint256 tokenId) internal virtual {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param data bytes optional data to send along with the call\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) private {\\n    // Much of this could be implemented in a more-obviously-safe way by using\\n    // the Address library from OZ. However, we elect not to in order to save on\\n    // contract size.\\n    if (to.code.length == 0) {\\n      return;\\n    }\\n    (bool success, bytes memory returnData) = to.safeCall(\\n      abi.encodeCall(IERC721Receiver(to).onERC721Received, (_msgSender(), from, tokenId, data))\\n    );\\n    if (!success) {\\n      if (returnData.length != 0) {\\n        assembly (\\\"memory-safe\\\") {\\n          revert(add(32, returnData), mload(returnData))\\n        }\\n      }\\n    } else if (abi.decode(returnData, (bytes4)) == IERC721Receiver.onERC721Received.selector) {\\n      return;\\n    }\\n    revert(\\\"ERC721: not ERC721Receiver\\\");\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721/IERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IERC721Burnable {\\n  function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/ERC1967UUPSENSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {ERC1967UUPSUpgradeable} from \\\"./ERC1967UUPSUpgradeable.sol\\\";\\n\\ninterface Resolver {\\n  function addr(bytes32 node) external view returns (address);\\n}\\n\\ninterface ENS {\\n  function resolver(bytes32 node) external view returns (Resolver);\\n}\\n\\ncontract ERC1967UUPSENSUpgradeable is ERC1967UUPSUpgradeable {\\n  ENS internal constant _ENS = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\\n  bytes32 internal immutable _OWNER_NAMEHASH;\\n\\n  constructor (string[] memory ensName) {\\n    bytes32 namehash;\\n    for (uint256 i; i < ensName.length; i++) {\\n      namehash = keccak256(bytes.concat(namehash, keccak256(bytes(ensName[i]))));\\n    }\\n    _OWNER_NAMEHASH = namehash;\\n  }\\n\\n  function _owner() internal view returns (address) {\\n    return _ENS.resolver(_OWNER_NAMEHASH).addr(_OWNER_NAMEHASH);\\n  }\\n\\n  function owner() public view onlyProxy returns (address) {\\n    return _owner();\\n  }\\n\\n  function _requireOwner() internal view {\\n    require(_msgSender() == _owner(), \\\"ERC1967UUPSENSUpgradeable: only owner\\\");\\n  }\\n\\n  modifier onlyOwner() {\\n    _requireProxy();\\n    _requireOwner();\\n    _;\\n  }\\n\\n  function initialize() public virtual override {\\n    _requireOwner();\\n    super.initialize();\\n  }\\n\\n  function upgrade(address newImplementation) public payable virtual override {\\n    _requireOwner();\\n    super.upgrade(newImplementation);\\n  }\\n\\n  function upgradeAndCall(address newImplementation, bytes calldata data) public payable virtual override {\\n    _requireOwner();\\n    super.upgradeAndCall(newImplementation, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {Address} from \\\"../external/Address.sol\\\";\\nimport {FullMath} from \\\"../external/uniswapv3/FullMath.sol\\\";\\n\\nlibrary SafeCall {\\n  using Address for address;\\n  using Address for address payable;\\n\\n  function safeCall(address target, bytes memory data) internal returns (bool, bytes memory) {\\n    return safeCall(payable(target), data, 0);\\n  }\\n\\n  function safeCall(\\n    address payable target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bool, bytes memory) {\\n    return safeCall(target, data, value, 0);\\n  }\\n\\n  function safeCall(\\n    address payable target,\\n    bytes memory data,\\n    uint256 value,\\n    uint256 depth\\n  ) internal returns (bool success, bytes memory returndata) {\\n    require(depth < 42, \\\"SafeCall: overflow\\\");\\n    if (value > 0 && (address(this).balance < value || !target.isContract())) {\\n      return (success, returndata);\\n    }\\n\\n    uint256 beforeGas;\\n    uint256 afterGas;\\n\\n    assembly (\\\"memory-safe\\\") {\\n      // As of the time this contract was written, `verbatim` doesn't work in\\n      // inline assembly. Due to how the Yul IR optimizer inlines and optimizes,\\n      // the amount of gas required to prepare the stack with arguments for call\\n      // is unpredictable. However, each these operations cost\\n      // gas. Additionally, `call` has an intrinsic gas cost, which is too\\n      // complicated for this comment but can be found in the Ethereum\\n      // yellowpaper, Berlin version fabef25, appendix H.2, page 37. Therefore,\\n      // `beforeGas` is always above the actual gas available before the\\n      // all-but-one-64th rule is applied. This makes the following checks too\\n      // conservative. We do not correct for any of this because the correction\\n      // would become outdated (possibly too permissive) if the opcodes are\\n      // repriced.\\n\\n      let offset := add(data, 0x20)\\n      let length := mload(data)\\n      beforeGas := gas()\\n      success := call(gas(), target, value, offset, length, 0, 0)\\n\\n      // Assignment of a value to a variable costs gas (although how much is\\n      // unpredictable because it depends on the optimizer), as does the `GAS`\\n      // opcode itself. Therefore, the `gas()` below returns less than the\\n      // actual amount of gas available for computation at the end of the\\n      // call. Again, that makes the check slightly too conservative. Again, we\\n      // do not attempt any correction.\\n      afterGas := gas()\\n    }\\n\\n    if (!success) {\\n      // The arithmetic here iterates the all-but-one-sixty-fourth rule to\\n      // ensure that the call that's `depth` contexts away received enough\\n      // gas. See: https://eips.ethereum.org/EIPS/eip-150\\n      unchecked {\\n        depth++;\\n        uint256 powerOf64 = 1 << (depth * 6);\\n        if (FullMath.mulDivCeil(beforeGas, powerOf64 - 63 ** depth, powerOf64) >= afterGas) {\\n          assembly (\\\"memory-safe\\\") {\\n            // The call probably failed due to out-of-gas. We deliberately\\n            // consume all remaining gas with `invalid` (instead of `revert`) to\\n            // make this failure distinguishable to our caller.\\n            invalid()\\n          }\\n        }\\n      }\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      switch returndatasize()\\n      case 0 {\\n        returndata := 0x60\\n        if iszero(value) {\\n          success := and(success, iszero(iszero(extcodesize(target))))\\n        }\\n      }\\n      default {\\n        returndata := mload(0x40)\\n        mstore(returndata, returndatasize())\\n        let offset := add(returndata, 0x20)\\n        returndatacopy(offset, 0, returndatasize())\\n        mstore(0x40, add(offset, returndatasize()))\\n      }\\n    }\\n  }\\n\\n  function safeStaticCall(address target, bytes memory data) internal view returns (bool, bytes memory) {\\n    return safeStaticCall(target, data, 0);\\n  }\\n\\n  function safeStaticCall(\\n    address target,\\n    bytes memory data,\\n    uint256 depth\\n  ) internal view returns (bool success, bytes memory returndata) {\\n    require(depth < 42, \\\"SafeCall: overflow\\\");\\n\\n    uint256 beforeGas;\\n    uint256 afterGas;\\n\\n    assembly (\\\"memory-safe\\\") {\\n      // As of the time this contract was written, `verbatim` doesn't work in\\n      // inline assembly. Due to how the Yul IR optimizer inlines and optimizes,\\n      // the amount of gas required to prepare the stack with arguments for call\\n      // is unpredictable. However, each these operations cost\\n      // gas. Additionally, `staticcall` has an intrinsic gas cost, which is too\\n      // complicated for this comment but can be found in the Ethereum\\n      // yellowpaper, Berlin version fabef25, appendix H.2, page 37. Therefore,\\n      // `beforeGas` is always above the actual gas available before the\\n      // all-but-one-64th rule is applied. This makes the following checks too\\n      // conservative. We do not correct for any of this because the correction\\n      // would become outdated (possibly too permissive) if the opcodes are\\n      // repriced.\\n\\n      let offset := add(data, 0x20)\\n      let length := mload(data)\\n      beforeGas := gas()\\n      success := staticcall(gas(), target, offset, length, 0, 0)\\n\\n      // Assignment of a value to a variable costs gas (although how much is\\n      // unpredictable because it depends on the optimizer), as does the `GAS`\\n      // opcode itself. Therefore, the `gas()` below returns less than the\\n      // actual amount of gas available for computation at the end of the\\n      // call. Again, that makes the check slightly too conservative. Again, we\\n      // do not attempt any correction.\\n      afterGas := gas()\\n    }\\n\\n    if (!success) {\\n      // The arithmetic here iterates the all-but-one-sixty-fourth rule to\\n      // ensure that the call that's `depth` contexts away received enough\\n      // gas. See: https://eips.ethereum.org/EIPS/eip-150\\n      unchecked {\\n        depth++;\\n        uint256 powerOf64 = 1 << (depth * 6);\\n        if (FullMath.mulDivCeil(beforeGas, powerOf64 - 63 ** depth, powerOf64) >= afterGas) {\\n          assembly (\\\"memory-safe\\\") {\\n            // The call probably failed due to out-of-gas. We deliberately\\n            // consume all remaining gas with `invalid` (instead of `revert`) to\\n            // make this failure distinguishable to our caller.\\n            invalid()\\n          }\\n        }\\n      }\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n      switch returndatasize()\\n      case 0 {\\n        returndata := 0x60\\n        success := and(success, iszero(iszero(extcodesize(target))))\\n      }\\n      default {\\n        returndata := mload(0x40)\\n        mstore(returndata, returndatasize())\\n        let offset := add(returndata, 0x20)\\n        returndatacopy(offset, 0, returndatasize())\\n        mstore(0x40, add(offset, returndatasize()))\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/ERC1967UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"../external/Address.sol\\\";\\nimport {IERC1967Proxy} from \\\"../interfaces/proxy/IERC1967Proxy.sol\\\";\\n\\nabstract contract ERC1967UUPSUpgradeable is Context, IERC1967Proxy {\\n  using Address for address;\\n\\n  address internal immutable _thisCopy;\\n\\n  uint256 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n  uint256 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  uint256 private constant _NO_ROLLBACK = 2;\\n  uint256 private constant _ROLLBACK_IN_PROGRESS = 3;\\n\\n  constructor() {\\n    _thisCopy = address(this);\\n    assert(_IMPLEMENTATION_SLOT == uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1);\\n    assert(_ROLLBACK_SLOT == uint256(keccak256(\\\"eip1967.proxy.rollback\\\")) - 1);\\n  }\\n\\n  function implementation() public view virtual override returns (address result) {\\n    assembly (\\\"memory-safe\\\") {\\n      result := sload(_IMPLEMENTATION_SLOT)\\n    }\\n  }\\n\\n  function _setImplementation(address newImplementation) private {\\n    assembly (\\\"memory-safe\\\") {\\n      sstore(_IMPLEMENTATION_SLOT, newImplementation)\\n    }\\n  }\\n\\n  function _isRollback() internal view returns (bool) {\\n    uint256 slotValue;\\n    assembly (\\\"memory-safe\\\") {\\n      slotValue := sload(_ROLLBACK_SLOT)\\n    }\\n    return slotValue == _ROLLBACK_IN_PROGRESS;\\n  }\\n\\n  function _setRollback(bool rollback) private {\\n    uint256 slotValue = rollback ? _ROLLBACK_IN_PROGRESS : _NO_ROLLBACK;\\n    assembly (\\\"memory-safe\\\") {\\n      sstore(_ROLLBACK_SLOT, slotValue)\\n    }\\n  }\\n\\n  function _requireProxy() internal view {\\n    require(implementation() == _thisCopy && address(this) != _thisCopy, \\\"ERC1967UUPSUpgradeable: only proxy\\\");\\n  }\\n\\n  modifier onlyProxy() {\\n    _requireProxy();\\n    _;\\n  }\\n\\n  function initialize() public virtual onlyProxy {\\n    _setRollback(false);\\n  }\\n\\n  function _encodeDelegateCall(bytes memory callData) internal view virtual returns (bytes memory) {\\n    return callData;\\n  }\\n\\n  function _checkImplementation(address newImplementation, bool rollback) internal virtual {\\n    require(implementation() == newImplementation, \\\"ERC1967UUPSUpgradeable: interfered with implementation\\\");\\n    require(rollback || !_isRollback(), \\\"ERC1967UUPSUpgradeable: interfered with rollback\\\");\\n  }\\n\\n  function _checkRollback(bool rollback) private {\\n    if (!rollback) {\\n      _setRollback(true);\\n      address newImplementation = implementation();\\n      newImplementation.functionDelegateCall(\\n        _encodeDelegateCall(abi.encodeCall(this.upgrade, (_thisCopy))),\\n        \\\"ERC1967UUPSUpgradeable: rollback upgrade failed\\\"\\n      );\\n      _setRollback(false);\\n      require(implementation() == _thisCopy, \\\"ERC1967UUPSUpgradeable: upgrade breaks further upgrades\\\");\\n      emit Upgraded(newImplementation);\\n      _setImplementation(newImplementation);\\n    }\\n  }\\n\\n  function upgrade(address newImplementation) public payable virtual override onlyProxy {\\n    bool rollback = _isRollback();\\n    _setImplementation(newImplementation);\\n    _checkImplementation(newImplementation, rollback);\\n    _checkRollback(rollback);\\n  }\\n\\n  function upgradeAndCall(address newImplementation, bytes calldata data) public payable virtual override onlyProxy {\\n    bool rollback = _isRollback();\\n    _setImplementation(newImplementation);\\n    newImplementation.functionDelegateCall(\\n      _encodeDelegateCall(data),\\n      \\\"ERC1967UUPSUpgradeable: initialization failed\\\"\\n    );\\n    _checkImplementation(newImplementation, rollback);\\n    _checkRollback(rollback);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/external/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly (\\\"memory-safe\\\") {\\n                    revert(add(32, returndata), mload(returndata))\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/uniswapv3/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return _mulDiv(a, b, denominator, true);\\n    }\\n\\n    function mulDivCeil(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return _mulDiv(a, b, denominator, false);\\n    }\\n\\n    /// @notice Calculates a\u00d7b\u00f7denominator with full precision then rounds accorrding to `roundDown`. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @param roundDown if true, round towards negative infinity; if false, round towards positive infinity\\n    /// @return The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function _mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator,\\n        bool roundDown\\n    ) private pure returns (uint256) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        uint256 remainder; // Remainder of full-precision division\\n        assembly (\\\"memory-safe\\\") {\\n            // Full-precision multiplication\\n            {\\n                let mm := mulmod(a, b, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            remainder := mulmod(a, b, denominator)\\n\\n            if and(sub(roundDown, 1), remainder) {\\n                // Make division exact by rounding [prod1 prod0] up to a\\n                // multiple of denominator\\n                let addend := sub(denominator, remainder)\\n                // Add 256 bit number to 512 bit number\\n                prod0 := add(prod0, addend)\\n                prod1 := add(prod1, lt(prod0, addend))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            if iszero(gt(denominator, prod1)) {\\n                // selector for `Panic(uint256)`\\n                mstore(0x00, 0x4e487b71)\\n                // 0x11 -> overflow; 0x12 -> division by zero\\n                mstore(0x20, add(0x11, iszero(denominator)))\\n                revert(0x1c, 0x24)\\n            }\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            uint256 result;\\n            assembly (\\\"memory-safe\\\") {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        uint256 inv;\\n        assembly (\\\"memory-safe\\\") {\\n            if roundDown {\\n                // Make division exact by rounding [prod1 prod0] down to a\\n                // multiple of denominator\\n                // Subtract 256 bit number from 512 bit number\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            {\\n                // Compute largest power of two divisor of denominator.\\n                // Always >= 1.\\n                let twos := and(sub(0, denominator), denominator)\\n\\n                // Divide denominator by power of two\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by the factors of two\\n                prod0 := div(prod0, twos)\\n                // Shift in bits from prod1 into prod0. For this we need\\n                // to flip `twos` such that it is 2**256 / twos.\\n                // If twos is zero, then it becomes one\\n                twos := add(div(sub(0, twos), twos), 1)\\n                prod0 := or(prod0, mul(prod1, twos))\\n            }\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            inv := xor(mul(3, denominator), 2)\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\\n        }\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        unchecked {\\n            return prod0 * inv;\\n        }\\n    }\\n\\n    struct uint512 {\\n      uint256 l;\\n      uint256 h;\\n    }\\n\\n    // Adapted from: https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n    function mulAdd(uint512 memory x, uint256 y, uint256 z) internal pure {\\n      unchecked {\\n        uint256 l = y * z;\\n        uint256 mm = mulmod(y, z, type(uint256).max);\\n        uint256 h = mm - l;\\n        x.l += l;\\n        if (l > x.l) h++;\\n        if (mm < l) h--;\\n        x.h += h;\\n      }\\n    }\\n\\n    function _msb(uint256 x) private pure returns (uint256 r) {\\n        unchecked {\\n            require (x > 0);\\n            if (x >= 2**128) {\\n                x >>= 128;\\n                r += 128;\\n            }\\n            if (x >= 2**64) {\\n                x >>= 64;\\n                r += 64;\\n            }\\n            if (x >= 2**32) {\\n                x >>= 32;\\n                r += 32;\\n            }\\n            if (x >= 2**16) {\\n                x >>= 16;\\n                r += 16;\\n            }\\n            if (x >= 2**8) {\\n                x >>= 8;\\n                r += 8;\\n            }\\n            if (x >= 2**4) {\\n                x >>= 4;\\n                r += 4;\\n            }\\n            if (x >= 2**2) {\\n                x >>= 2;\\n                r += 2;\\n            }\\n            if (x >= 2**1) {\\n                x >>= 1;\\n                r += 1;\\n            }\\n        }\\n    }\\n\\n    function div(uint512 memory x, uint256 y) internal pure returns (uint256 r) {\\n        uint256 l = x.l;\\n        uint256 h = x.h;\\n        require (h < y);\\n        unchecked {\\n            uint256 yShift = _msb(y);\\n            uint256 shiftedY = y;\\n            if (yShift <= 127) {\\n                yShift = 0;\\n            } else {\\n                yShift -= 127;\\n                shiftedY = (shiftedY - 1 >> yShift) + 1;\\n            }\\n            while (h > 0) {\\n                uint256 lShift = _msb(h) + 1;\\n                uint256 hShift = 256 - lShift;\\n                uint256 e = ((h << hShift) + (l >> lShift)) / shiftedY;\\n                if (lShift > yShift) {\\n                    e <<= (lShift - yShift);\\n                } else {\\n                    e >>= (yShift - lShift);\\n                }\\n                r += e;\\n\\n                uint256 tl;\\n                uint256 th;\\n                {\\n                    uint256 mm = mulmod(e, y, type(uint256).max);\\n                    tl = e * y;\\n                    th = mm - tl;\\n                    if (mm < tl) {\\n                        th -= 1;\\n                    }\\n                }\\n\\n                h -= th;\\n                if (tl > l) {\\n                    h -= 1;\\n                }\\n                l -= tl;\\n            }\\n            r += l / y;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/proxy/IERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IERC1967Proxy {\\n  event Upgraded(address indexed implementation);\\n\\n  function implementation() external view returns (address);\\n\\n  function upgrade(address newImplementation) external payable;\\n\\n  function upgradeAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"contracts/=contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"ensName\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "WhitehatHallOfFame", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000365746800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008696d6d756e656669000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}