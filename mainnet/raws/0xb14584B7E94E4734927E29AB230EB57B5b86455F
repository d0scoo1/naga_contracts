{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"tmp_contracts/PfpBg.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/// @title PfpBg\\r\\n/// @notice PfpBg\\r\\n/// @author CyberPnk <cyberpnk@pfpbg.cyberpnk.win>\\r\\n//        __________________________________________________________________________________________________________\\r\\n//       _____/\\\\/\\\\/\\\\/\\\\/\\\\______________/\\\\/\\\\________________________________/\\\\/\\\\/\\\\/\\\\/\\\\________________/\\\\/\\\\___________\\r\\n//      ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__________/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\_____ \\r\\n//     ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______  \\r\\n//    ___/\\\\/\\\\____________/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______   \\r\\n//   _____/\\\\/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\_____    \\r\\n//  __________________/\\\\/\\\\/\\\\/\\\\________________________________________________________________________________     \\r\\n// __________________________________________________________________________________________________________     \\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@cyberpnk/solidity-library/contracts/FeeLockable.sol\\\";\\r\\nimport \\\"@cyberpnk/solidity-library/contracts/DestroyLockable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./INftAdapter.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract PfpBg is Ownable, FeeLockable, DestroyLockable {\\r\\n\\r\\n    struct Background {\\r\\n        string color;\\r\\n        address nftBgContract;\\r\\n        uint256 nftBgTokenId;\\r\\n    }\\r\\n\\r\\n    mapping (address => address) public bgNftContractToBgAdapterContract;\\r\\n    mapping (address => Background) public addressToBackground;\\r\\n\\r\\n    event ChangeBackground(address indexed sender);\\r\\n\\r\\n    function setColor(string memory color) external {\\r\\n        require(bytes(color).length <= 6, \\\"Length\\\");\\r\\n        addressToBackground[msg.sender].color = color;\\r\\n        emit ChangeBackground(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setNft(address nftBgContract, uint256 nftBgTokenId) external payable {\\r\\n        require(msg.value == feeAmount, \\\"Value\\\");\\r\\n        require(nftBgContract == address(0) || IERC721(nftBgContract).ownerOf(nftBgTokenId) == msg.sender, \\\"Not yours\\\");\\r\\n        addressToBackground[msg.sender].nftBgContract = nftBgContract;\\r\\n        addressToBackground[msg.sender].nftBgTokenId = nftBgTokenId;\\r\\n        emit ChangeBackground(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setBackground(string memory color, address nftBgContract, uint256 nftBgTokenId) external payable {\\r\\n        require(msg.value == feeAmount, \\\"Value\\\");\\r\\n        require(nftBgContract == address(0) || IERC721(nftBgContract).ownerOf(nftBgTokenId) == msg.sender, \\\"Not yours\\\");\\r\\n        addressToBackground[msg.sender].color = color;\\r\\n        addressToBackground[msg.sender].nftBgContract = nftBgContract;\\r\\n        addressToBackground[msg.sender].nftBgTokenId = nftBgTokenId;\\r\\n        emit ChangeBackground(msg.sender);\\r\\n    }\\r\\n\\r\\n    function setBgAdapterContractForBgNftContract(address bgNftContract, address bgAdapterContract) onlyOwner external {\\r\\n        bgNftContractToBgAdapterContract[bgNftContract] = bgAdapterContract;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n\\r\\n    function getBgSvg(address pfpOwner) public view returns(string memory) {\\r\\n        Background memory background = addressToBackground[pfpOwner];\\r\\n        \\r\\n        bytes memory color = bytes(background.color).length > 0 ? abi.encodePacked('<rect y=\\\"0\\\" height=\\\"640\\\" x=\\\"0\\\" width=\\\"640\\\" fill=\\\"#', background.color, '\\\"/>') : bytes(\\\"\\\");\\r\\n        address bgAdapterContract = bgNftContractToBgAdapterContract[background.nftBgContract];\\r\\n        string memory nft = \\\"\\\";\\r\\n        if (bgAdapterContract != address(0)) {\\r\\n            INftAdapter bgAdapter = INftAdapter(bgAdapterContract);\\r\\n            if (bgAdapter.ownerOf(background.nftBgTokenId) == pfpOwner) {\\r\\n                nft = bgAdapter.getEmbeddableSvg(background.nftBgTokenId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(color, nft));\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        payable(feePayee).transfer(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@cyberpnk/solidity-library/contracts/FeeLockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/// @title FeeLockable\\r\\n/// @notice stores the fee payee and amount, letting the owner only change it, and alows to lock them for changes\\r\\n/// @author CyberPnk <cyberpnk@cyberpnk.win>\\r\\n//        __________________________________________________________________________________________________________\\r\\n//       _____/\\\\/\\\\/\\\\/\\\\/\\\\______________/\\\\/\\\\________________________________/\\\\/\\\\/\\\\/\\\\/\\\\________________/\\\\/\\\\___________\\r\\n//      ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__________/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\_____\\r\\n//     ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______\\r\\n//    ___/\\\\/\\\\____________/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______\\r\\n//   _____/\\\\/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\_____\\r\\n//  __________________/\\\\/\\\\/\\\\/\\\\________________________________________________________________________________\\r\\n// __________________________________________________________________________________________________________\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract FeeLockable is Ownable {\\r\\n    uint public feeAmount = 0;\\r\\n    address public feePayee;\\r\\n    bool public isChangeFeeAmountDisabled = false;\\r\\n    bool public isChangeFeePayeeDisabled = false;\\r\\n\\r\\n    // Irreversible.\\r\\n    function disableChangeFeeAmount() public onlyOwner {\\r\\n        isChangeFeeAmountDisabled = true;\\r\\n    }\\r\\n\\r\\n    // Irreversible.\\r\\n    function disableChangeFeePayee() public onlyOwner {\\r\\n        isChangeFeePayeeDisabled = true;\\r\\n    }\\r\\n\\r\\n    function setFeeAmount(uint _feeAmount) public onlyOwner {\\r\\n        require(!isChangeFeeAmountDisabled, \\\"Disabled\\\");\\r\\n        feeAmount = _feeAmount;\\r\\n    }\\r\\n\\r\\n    function setFeePayee(address _feePayee) public onlyOwner {\\r\\n        require(!isChangeFeePayeeDisabled, \\\"Disabled\\\");\\r\\n        feePayee = _feePayee;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cyberpnk/solidity-library/contracts/DestroyLockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/// @title DestroyLockable\\r\\n/// @notice Contract can be destroyed, but destroy can be disabled (but not re-enabled).\\r\\n/// @author CyberPnk <cyberpnk@cyberpnk.win>\\r\\n//        __________________________________________________________________________________________________________\\r\\n//       _____/\\\\/\\\\/\\\\/\\\\/\\\\______________/\\\\/\\\\________________________________/\\\\/\\\\/\\\\/\\\\/\\\\________________/\\\\/\\\\___________\\r\\n//      ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__________/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\_____\\r\\n//     ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______\\r\\n//    ___/\\\\/\\\\____________/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______\\r\\n//   _____/\\\\/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\_____\\r\\n//  __________________/\\\\/\\\\/\\\\/\\\\________________________________________________________________________________\\r\\n// __________________________________________________________________________________________________________\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract DestroyLockable is Ownable {\\r\\n    bool public isDestroyDisabled = false;\\r\\n\\r\\n    // Irreversible.\\r\\n    function disableDestroy() public onlyOwner {\\r\\n        isDestroyDisabled = true;\\r\\n    }\\r\\n\\r\\n    // In case there's a really bad mistake, but eventually disabled\\r\\n    function destroy() public onlyOwner {\\r\\n        require(!isDestroyDisabled, \\\"Disabled\\\");\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"tmp_contracts/INftAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/// @title INftAdapter\\r\\n/// @notice INftAdapter\\r\\n/// @author CyberPnk <cyberpnk@pfpbg.cyberpnk.win>\\r\\n//        __________________________________________________________________________________________________________\\r\\n//       _____/\\\\/\\\\/\\\\/\\\\/\\\\______________/\\\\/\\\\________________________________/\\\\/\\\\/\\\\/\\\\/\\\\________________/\\\\/\\\\___________\\r\\n//      ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__________/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\_____ \\r\\n//     ___/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______  \\r\\n//    ___/\\\\/\\\\____________/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\_______   \\r\\n//   _____/\\\\/\\\\/\\\\/\\\\/\\\\________/\\\\/\\\\__/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\__/\\\\/\\\\________/\\\\/\\\\__________/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\__/\\\\/\\\\_____    \\r\\n//  __________________/\\\\/\\\\/\\\\/\\\\________________________________________________________________________________     \\r\\n// __________________________________________________________________________________________________________     \\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface INftAdapter {\\r\\n    function getSvg(uint256 tokenId) external view returns(string memory);\\r\\n    function getDataUriSvg(uint256 tokenId) external view returns(string memory);\\r\\n    function getDataUriBase64(uint256 tokenId) external view returns(string memory);\\r\\n    function getEmbeddableSvg(uint256 tokenId) external view returns(string memory);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    function getTraitsJsonValue(uint256 tokenId) external view returns(string memory);\\r\\n    function name() external view returns(string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ChangeBackground\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBackground\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nftBgContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftBgTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bgNftContractToBgAdapterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeFeePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDestroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePayee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pfpOwner\",\"type\":\"address\"}],\"name\":\"getBgSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChangeFeeAmountDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isChangeFeePayeeDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDestroyDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nftBgContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftBgTokenId\",\"type\":\"uint256\"}],\"name\":\"setBackground\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bgNftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bgAdapterContract\",\"type\":\"address\"}],\"name\":\"setBgAdapterContractForBgNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"name\":\"setColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePayee\",\"type\":\"address\"}],\"name\":\"setFeePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftBgContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftBgTokenId\",\"type\":\"uint256\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PfpBg", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}