{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SlotieJrBreeding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Developed by KG Technologies (https://kgtechnologies.io)\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @notice Represents Slotie Smart Contract\\n */\\ncontract ISlotie {\\n    /** \\n     * @dev ERC-721 INTERFACE \\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\n\\n    /** \\n     * @dev CUSTOM INTERFACE \\n     */\\n    function mintTo(uint256 amount, address _to) external {}\\n}\\n\\ncontract ISlotieJr {\\n    /** \\n     * @dev ERC-721 INTERFACE \\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\n    function totalSupply() public view returns (uint256) {}\\n\\n    /** \\n     * @dev CUSTOM INTERFACE \\n     */\\n    function mintTo(uint256 amount, address _to) external {}\\n    function maxMintPerTransaction() public returns (uint256) {}\\n}\\n\\nabstract contract IWatts is IERC20 {\\n    function burn(address _from, uint256 _amount) external {}\\n    function seeClaimableBalanceOfUser(address user) external view returns(uint256) {}\\n    function seeClaimableTotalSupply() external view returns(uint256) {}\\n    function burnClaimable(address _from, uint256 _amount) public {}\\n    function transferOwnership(address newOwner) public {}\\n    function setSlotieNFT(address newSlotieNFT) external {}\\n    function setLockPeriod(uint256 newLockPeriod) external {}\\n    function setIsBlackListed(address _address, bool _isBlackListed) external {}\\n}\\n\\n/**\\n * @title SlotieJrBreeding.\\n *\\n * @author KG Technologies (https://kgtechnologies.io).\\n *\\n * @notice This Smart Contract can be used to breed Slotie NFTs.\\n *\\n * @dev The primary mode of verifying permissioned actions is through Merkle Proofs\\n * which are generated off-chain.\\n */\\ncontract SlotieJrBreeding is Ownable {\\n\\n    /** \\n     * @notice The Smart Contract of Slotie\\n     * @dev ERC-721 Smart Contract \\n     */\\n    ISlotie public immutable slotie;\\n\\n    /** \\n     * @notice The Smart Contract of Slotie Jr.\\n     * @dev ERC-721 Smart Contract \\n     */\\n    ISlotieJr public immutable slotiejr;\\n\\n    /** \\n     * @notice The Smart Contract of Watts.\\n     * @dev ERC-20 Smart Contract \\n     */\\n    IWatts public immutable watts;\\n    \\n    /** \\n     * @dev BREED DATA \\n     */\\n    uint256 public maxBreedableJuniors = 5000;\\n    bool public isBreedingStarted = false;\\n    uint256 public breedPrice = 1800 ether;    \\n    uint256 public breedCoolDown = 2 * 30 days;\\n    \\n    mapping(uint256 => uint256) public slotieToLastBreedTimeStamp;  \\n\\n    bytes32 public merkleRoot = 0x92b34b7175c93f0db8f32e6996287e5d3141e4364dcc5f03e3f3b0454d999605;\\n\\n    /**\\n     * @dev TRACKING DATA\\n     */\\n    uint256 public bornJuniors;\\n\\n    /**\\n     * @dev Events\\n     */\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\n    event Bred(address initiator, uint256 indexed father, uint256 indexed mother, uint256 indexed slotieJr);\\n    event setMerkleRootEvent(bytes32 indexed root);\\n    event setIsBreedingStartedEvent(bool indexed started);\\n    event setMaxBreedableJuniorsEvent(uint256 indexed maxMintable);\\n    event setBreedCoolDownEvent(uint256 indexed coolDown);\\n    event setBreedPriceEvent(uint256 indexed price);\\n    event WithdrawAllEvent(address indexed recipient, uint256 amount);\\n\\n    constructor(\\n        address slotieAddress,\\n        address slotieJrAddress,\\n        address wattsAddress\\n    ) Ownable() {\\n        slotie = ISlotie(slotieAddress);\\n        slotiejr = ISlotieJr(slotieJrAddress);\\n        watts = IWatts(wattsAddress);\\n    }\\n \\n    /**\\n     * @dev BREEDING\\n     */\\n\\n    function breed(\\n        uint256 father, \\n        uint256 mother, \\n        uint256 fatherStart, \\n        uint256 motherStart, \\n        bytes32[] calldata fatherProof, \\n        bytes32[] calldata motherProof\\n    ) external {\\n        require(isBreedingStarted, \\\"BREEDING NOT STARTED\\\");\\n        require(address(slotie) != address(0), \\\"SLOTIE NFT NOT SET\\\");\\n        require(address(slotiejr) != address(0), \\\"SLOTIE JR NFT NOT SET\\\");\\n        require(address(watts) != address(0), \\\"WATTS NOT SET\\\");\\n        require(bornJuniors < maxBreedableJuniors, \\\"MAX JUNIORS HAVE BEEN BRED\\\");\\n        require(father != mother, \\\"CANNOT BREED THE SAME SLOTIE\\\");\\n        require(slotie.ownerOf(father) == msg.sender, \\\"SENDER NOT OWNER OF FATHER\\\");    \\n        require(slotie.ownerOf(mother) == msg.sender, \\\"SENDER NOT OWNER OF MOTHER\\\");\\n\\n        uint256 fatherLastBred = slotieToLastBreedTimeStamp[father];\\n        uint256 motherLastBred = slotieToLastBreedTimeStamp[mother];\\n\\n        /**\\n         * @notice Check if father can breed based based on time logic\\n         *\\n         * @dev If father hasn't bred before we check the merkle proof to see\\n         * if it can breed already. If it has bred already we check if it's passed the\\n         * cooldown period.\\n         */ \\n        if (fatherLastBred != 0) {\\n            require(block.timestamp >= fatherLastBred + breedCoolDown, \\\"FATHER IS STILL IN COOLDOWN\\\");\\n        }\\n\\n        /// @dev see father.\\n        if (motherLastBred != 0) {\\n            require(block.timestamp >= motherLastBred + breedCoolDown, \\\"MOTHER IS STILL IN COOLDOWN\\\");\\n        }\\n\\n        if (fatherLastBred == 0 || motherLastBred == 0) {\\n            bytes32 leafFather = keccak256(abi.encodePacked(father, fatherStart, fatherLastBred));\\n            bytes32 leafMother = keccak256(abi.encodePacked(mother, motherStart, motherLastBred));\\n\\n            require(MerkleProof.verify(fatherProof, merkleRoot, leafFather), \\\"INVALID PROOF FOR FATHER\\\");\\n            require(MerkleProof.verify(motherProof, merkleRoot, leafMother), \\\"INVALID PROOF FOR MOTHER\\\"); \\n\\n            require(block.timestamp >= fatherStart || block.timestamp >= motherStart, \\\"SLOTIES CANNOT CANNOT BREED YET\\\");\\n        }\\n\\n        slotieToLastBreedTimeStamp[father] = block.timestamp;\\n        slotieToLastBreedTimeStamp[mother] = block.timestamp;\\n        bornJuniors++;\\n\\n        require(watts.balanceOf(msg.sender) >= breedPrice, \\\"SENDER DOES NOT HAVE ENOUGH WATTS\\\");\\n\\n        uint256 claimableBalance = watts.seeClaimableBalanceOfUser(msg.sender);\\n        uint256 burnFromClaimable = claimableBalance >= breedPrice ? breedPrice : claimableBalance;\\n        uint256 burnFromBalance = claimableBalance >= breedPrice ? 0 : breedPrice - claimableBalance;\\n\\n        if (claimableBalance > 0) {\\n            watts.burnClaimable(msg.sender, burnFromClaimable);\\n        }\\n        \\n        if (burnFromBalance > 0) {\\n            watts.burn(msg.sender, burnFromBalance);\\n        }\\n\\n        slotiejr.mintTo(1, msg.sender);\\n        emit Bred(msg.sender, father, mother, slotiejr.totalSupply());\\n    }  \\n\\n    /** \\n     * @dev OWNER ONLY \\n     */\\n\\n    /**\\n     * @notice function to set the merkle root for breeding.\\n     *\\n     * @param _merkleRoot. The new merkle root to set.\\n     */\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoot = _merkleRoot;\\n        emit setMerkleRootEvent(_merkleRoot);\\n    }\\n\\n    /**\\n     * @notice function to turn on/off breeding.\\n     *\\n     * @param _status. The new state of the breeding.\\n     */\\n    function setBreedingStatus(bool _status) external onlyOwner {\\n        isBreedingStarted = _status;\\n        emit setIsBreedingStartedEvent(_status);\\n    }    \\n\\n    /**\\n     * @notice function to set the maximum amount of juniors that can be bred.\\n     *\\n     * @param max. The new maximum.\\n     */\\n    function setMaxBreedableJuniors(uint256 max) external onlyOwner {\\n        maxBreedableJuniors = max;\\n        emit setMaxBreedableJuniorsEvent(max);\\n    }\\n\\n    /**\\n     * @notice function to set the cooldown period for breeding a slotie.\\n     *\\n     * @param coolDown. The new cooldown period.\\n     */\\n    function setBreedCoolDown(uint256 coolDown) external onlyOwner {\\n        breedCoolDown = coolDown;\\n        emit setBreedCoolDownEvent(coolDown);\\n    }\\n\\n    /**\\n     * @notice function to set the watts price for breeding two sloties.\\n     *\\n     * @param price. The new watts price.\\n     */\\n    function setBreedPice(uint256 price) external onlyOwner {\\n        breedPrice = price;\\n        emit setBreedPriceEvent(price);\\n    }\\n\\n    /**\\n     * @dev WATTS OWNER\\n     */\\n\\n    function WATTSOWNER_TransferOwnership(address newOwner) external onlyOwner {\\n        watts.transferOwnership(newOwner);\\n    }\\n\\n    function WATTSOWNER_SetSlotieNFT(address newSlotie) external onlyOwner {\\n        watts.setSlotieNFT(newSlotie);\\n    }\\n\\n    function WATTSOWNER_SetLockPeriod(uint256 newLockPeriod) external onlyOwner {\\n        watts.setLockPeriod(newLockPeriod);\\n    }\\n\\n    function WATTSOWNER_SetIsBlackListed(address _set, bool _is) external onlyOwner {\\n        watts.setIsBlackListed(_set, _is);\\n    }\\n\\n    function WATTSOWNER_seeClaimableBalanceOfUser(address user) external view onlyOwner returns (uint256) {\\n        return watts.seeClaimableBalanceOfUser(user);\\n    }\\n\\n    function WATTSOWNER_seeClaimableTotalSupply() external view onlyOwner returns (uint256) {\\n        return watts.seeClaimableTotalSupply();\\n    }\\n    \\n\\n    /**\\n     * @dev FINANCE\\n     */\\n\\n    /**\\n     * @notice Allows owner to withdraw funds generated from sale.\\n     *\\n     * @param _to. The address to send the funds to.\\n     */\\n    function withdrawAll(address _to) external onlyOwner {\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\n\\n        uint256 contractBalance = address(this).balance;\\n\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\n\\n        payable(_to).transfer(contractBalance);\\n\\n        emit WithdrawAllEvent(_to, contractBalance);\\n    }\\n\\n    /**\\n     * @dev Fallback function for receiving Ether\\n     */\\n    receive() external payable {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"slotieAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slotieJrAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wattsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotieJr\",\"type\":\"uint256\"}],\"name\":\"Bred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coolDown\",\"type\":\"uint256\"}],\"name\":\"setBreedCoolDownEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setBreedPriceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"name\":\"setIsBreedingStartedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxMintable\",\"type\":\"uint256\"}],\"name\":\"setMaxBreedableJuniorsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_set\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"WATTSOWNER_SetIsBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"WATTSOWNER_SetLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSlotie\",\"type\":\"address\"}],\"name\":\"WATTSOWNER_SetSlotieNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WATTSOWNER_TransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WATTSOWNER_seeClaimableBalanceOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WATTSOWNER_seeClaimableTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bornJuniors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherStart\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"fatherProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"motherProof\",\"type\":\"bytes32[]\"}],\"name\":\"breed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breedCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBreedingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBreedableJuniors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coolDown\",\"type\":\"uint256\"}],\"name\":\"setBreedCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setBreedPice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBreedingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxBreedableJuniors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotie\",\"outputs\":[{\"internalType\":\"contract ISlotie\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotieToLastBreedTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotiejr\",\"outputs\":[{\"internalType\":\"contract ISlotieJr\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watts\",\"outputs\":[{\"internalType\":\"contract IWatts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SlotieJrBreeding", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005fdb2b0c56afa73b8ca2228e6ab92be90325961d0000000000000000000000005dff0b226fde7085a850aff06e2ea62d1ad506f50000000000000000000000005058b77cbd029f56a11bd56326519e3ec0081cd0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}