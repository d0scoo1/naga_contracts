{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: CC-BY-ND-4.0\r\n\r\npragma solidity ^0.8.14;\r\n\r\ncontract protected {\r\n    mapping (address => bool) is_auth;\r\n    function authorized(address addy) public view returns(bool) {\r\n        return is_auth[addy];\r\n    }\r\n    function set_authorized(address addy, bool booly) public onlyAuth {\r\n        is_auth[addy] = booly;\r\n    }\r\n    modifier onlyAuth() {\r\n        require( is_auth[msg.sender] || msg.sender==owner, \"not owner\");\r\n        _;\r\n    }\r\n    address owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner, \"not owner\");\r\n        _;\r\n    }\r\n    bool locked;\r\n    modifier safe() {\r\n        require(!locked, \"reentrant\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n    function change_owner(address new_owner) public onlyAuth {\r\n        owner = new_owner;\r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}\r\n\r\ncontract MAGA_USERS is protected {\r\n\r\n    // Database prototype\r\n    struct USER {\r\n        string username;\r\n        bool is_associated;\r\n        string password;\r\n        uint lastlogin;\r\n    }\r\n\r\n    // Database object\r\n    mapping(address => USER) private user;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        is_auth[msg.sender] = true;\r\n    }\r\n\r\n    function set_auth(address addy, bool booly) public onlyAuth {\r\n        is_auth[addy] = booly;\r\n    }\r\n\r\n    function harakiri() public onlyAuth {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    /****************************************************************\r\n                                 SETTERS\r\n    ****************************************************************/\r\n\r\n    // Registering and bind together\r\n    function join(string memory signature, string memory username) public returns(bool success) {\r\n        bool exclusive_lock;\r\n        require(!exclusive_lock, \"Reentrant!\");\r\n        exclusive_lock = true;\r\n        bool _success = register(signature);\r\n        require(_success, \"Cannot register\");\r\n        _success = bind_username(msg.sender, signature, username);\r\n        require(_success, \"Cannot bind\");\r\n        exclusive_lock = false;\r\n        return true;\r\n    }\r\n\r\n    // Registering  \r\n    function register(string memory signature) public safe returns (bool){\r\n        require(bytes(user[msg.sender].password).length < 1, \"Password already set\");\r\n        user[msg.sender].password = signature;\r\n        return true;\r\n    }\r\n\r\n    // Binding an username to an address, if not taken and authenticated\r\n    function bind_username(address addy, string memory signature, string memory username)\r\n                            public safe returns(bool success) {\r\n        require(login(signature), \"403\");\r\n        require(!(user[addy].is_associated), \"Address already associated\");\r\n        user[addy].username = username;\r\n        user[addy].is_associated = true;\r\n        return true;\r\n    }\r\n\r\n    /****************************************************************\r\n                                GETTERS\r\n    ****************************************************************/\r\n\r\n    function get_association(address addy, string memory signature) \r\n                             public view returns(string memory username_){\r\n        // First check association\r\n        if(user[addy].is_associated) {\r\n            // Check signature value\r\n            bool logged = login(signature);\r\n            if(logged) {\r\n                // If is all ok, return the value\r\n                return(user[addy].username);\r\n            }\r\n        } else {\r\n            // None is the fallback value returned\r\n            return \"None\";\r\n        }\r\n    }\r\n\r\n    // Check registration\r\n    function is_registered() public view returns(bool status) {\r\n        return (bytes(user[msg.sender].password).length < 1);\r\n    }\r\n\r\n    function login(string memory password) public view returns(bool success){\r\n        bytes32 hashed = keccak256(abi.encodePacked(password));\r\n        bytes32 hashed_couterpart = keccak256(abi.encodePacked(user[msg.sender].password));\r\n        if(hashed==hashed_couterpart) {\r\n            return(true);\r\n        } else {\r\n            return(false);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"bind_username\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"get_association\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harakiri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_auth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_authorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAGA_USERS", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20cae14d4bb0db2f43395ba24cc53727bf3dff71e937f2b83ed74d8e6ba40496"}]}