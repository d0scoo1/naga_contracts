{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public ownerCandidate;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerCandidate() {\r\n        assert(msg.sender == ownerCandidate);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address candidate) external onlyOwner {\r\n        ownerCandidate = candidate;\r\n    }\r\n\r\n    function acceptOwnership() external onlyOwnerCandidate {\r\n        owner = ownerCandidate;\r\n        ownerCandidate = 0x0;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a / b;\r\n        assert(b == 0);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract VAAToken is SafeMath, owned {\r\n\r\n    string public name = \"VAAToken\";        //  token name\r\n    string public symbol = \"VAAT\";      //  token symbol\r\n    uint public decimals = 8;           //  token digit\r\n\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    uint public totalSupply = 0;\r\n\r\n\r\n    // \u56e2\u961f\u5730\u5740\r\n    address private addressTeam = 0x5b1FcBA12b4757549bf5d0550af253DE5E0F73c5;\r\n\r\n    // \u57fa\u91d1\u5730\u5740\r\n    address private addressFund = 0xA703356488F7335269e5860ca41f787dFF50b76C;\r\n\r\n    // \u63a8\u5e7f\u94b1\u5305\r\n    address private addressPopular = 0x1db0304A3f2a861e7Ab8B7305AF1dC1ee4c3e94d;\r\n\r\n    // \u79c1\u52df\u94b1\u5305\r\n    address private addressVip = 0x6e41aA4d64F9f4a190a9AF2292F815259BAef65c;\r\n\r\n    //\u6301\u4ed3\u603b\u91cf\r\n    uint constant valueTotal = 10 * 10000 * 10000 * 10 ** 8;  //\u603b\u91cf 10E\r\n    uint constant valueTeam = valueTotal / 100 * 20;   // \u56e2\u961f 20% 2E\r\n    uint constant valueFund = valueTotal / 100 * 30; //\u57fa\u91d1 30% 3E\r\n    uint constant valuePopular = valueTotal / 100 * 20; //\u5e73\u53f0\u65b0\u7528\u6237\u5956\u52b1\u53ca\u63a8\u5e7f\u8425\u95002E\r\n    uint constant valueSale = valueTotal / 100 * 20;  // ICO 20% 2E\r\n    uint constant valueVip = valueTotal / 100 * 10;   // \u79c1\u52df 10% 1E\r\n\r\n\r\n    // \u662f\u5426\u505c\u6b62\u9500\u552e\r\n    bool public saleStopped = false;\r\n\r\n    // \u9636\u6bb5\r\n    uint private constant BEFORE_SALE = 0;\r\n    uint private constant IN_SALE = 1;\r\n    uint private constant FINISHED = 2;\r\n\r\n    // ICO\u6700\u5c0f\u4ee5\u592a\u503c\r\n    uint public minEth = 0.1 ether;\r\n\r\n    // ICO\u6700\u5927\u4ee5\u592a\u503c\r\n    uint public maxEth = 1000 ether;\r\n\r\n    // \u5f00\u59cb\u65f6\u95f4 2018-03-29 00:00:00\r\n    uint public openTime = 1522252800;\r\n    // \u7ed3\u675f\u65f6\u95f4 2018-06-01 00:00:00\r\n    uint public closeTime = 1527782400;\r\n\r\n    // \u4ef7\u683c\r\n    uint public price = 3500;\r\n\r\n    // \u5df2\u5356\u51fa\u4ee3\u5e01\u6570\u91cf\r\n    uint public saleQuantity = 0;\r\n\r\n    // \u6536\u5165\u7684ETH\u6570\u91cf\r\n    uint public ethQuantity = 0;\r\n\r\n    // \u63d0\u73b0\u7684\u4ee3\u5e01\u6570\u91cf\r\n    uint public withdrawQuantity = 0;\r\n\r\n\r\n    modifier validAddress(address _address) {\r\n        assert(0x0 != _address);\r\n        _;\r\n    }\r\n\r\n    modifier validEth {\r\n        assert(msg.value >= minEth && msg.value <= maxEth);\r\n        _;\r\n    }\r\n\r\n    modifier validPeriod {\r\n        assert(now >= openTime && now < closeTime);\r\n        _;\r\n    }\r\n\r\n    modifier validQuantity {\r\n        assert(valueSale >= saleQuantity);\r\n        _;\r\n    }\r\n\r\n    modifier validStatue {\r\n        assert(saleStopped == false);\r\n        _;\r\n    }\r\n\r\n    function setOpenTime(uint newOpenTime) public onlyOwner {\r\n        openTime = newOpenTime;\r\n    }\r\n\r\n    function setCloseTime(uint newCloseTime) public onlyOwner {\r\n        closeTime = newCloseTime;\r\n    }\r\n\r\n    function VAAToken()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n        totalSupply = valueTotal;\r\n\r\n        // ICO\r\n        balanceOf[this] = valueSale;\r\n        Transfer(0x0, this, valueSale);\r\n\r\n        // Simu\r\n        balanceOf[addressVip] = valueVip;\r\n        Transfer(0x0, addressVip, valueVip);\r\n\r\n        // Found\r\n        balanceOf[addressFund] = valueFund;\r\n        Transfer(0x0, addressFund, valueFund);\r\n\r\n        // valuePopular\r\n        balanceOf[addressPopular] = valuePopular;\r\n        Transfer(0x0, addressPopular, valuePopular);\r\n\r\n        // \u56e2\u961f\r\n        balanceOf[addressTeam] = valueTeam;\r\n        Transfer(0x0, addressTeam, valueTeam);\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        validAddress(_to)\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(validTransfer(_value));\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferInner(address _to, uint _value)\r\n        private\r\n        returns (bool success)\r\n    {\r\n        balanceOf[this] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(this, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        require(validTransfer(_value));\r\n        balanceOf[_to] += _value;\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //\u6279\u91cf\u8f6c\u8d26\r\n    function batchtransfer(address[] _to, uint256[] _amount) public returns(bool success) {\r\n        for(uint i = 0; i < _to.length; i++){\r\n            require(transfer(_to[i], _amount[i]));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value)\r\n        public\r\n        validAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function validTransfer(uint _value)\r\n        pure private\r\n        returns (bool)\r\n    {\r\n        if (_value == 0)\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    function ()\r\n        public\r\n        payable\r\n    {\r\n        buy();\r\n    }\r\n\r\n    function buy()\r\n        public\r\n        payable\r\n        validEth        // \u4ee5\u592a\u662f\u5426\u5728\u5141\u8bb8\u8303\u56f4\r\n        validPeriod     // \u662f\u5426\u5728ICO\u671f\u95f4\r\n        validQuantity   // \u4ee3\u5e01\u662f\u5426\u5df2\u5356\u5b8c\r\n        validStatue     // \u552e\u5356\u662f\u5426\u5df2\u7ecf\u4e3b\u52a8\u7ed3\u675f\r\n    {\r\n        uint eth = msg.value;\r\n\r\n        // \u8ba1\u7b97\u4ee3\u5e01\u6570\u91cf\r\n        uint quantity = eth * price / 10 ** 10;\r\n\r\n        // \u662f\u5426\u8d85\u51fa\u5269\u4f59\u4ee3\u5e01\r\n        uint leftQuantity = safeSub(valueSale, saleQuantity);\r\n        if (quantity > leftQuantity) {\r\n            quantity = leftQuantity;\r\n        }\r\n\r\n        saleQuantity = safeAdd(saleQuantity, quantity);\r\n        ethQuantity = safeAdd(ethQuantity, eth);\r\n\r\n        // \u53d1\u9001\u4ee3\u5e01\r\n        require(transferInner(msg.sender, quantity));\r\n\r\n        // \u751f\u6210\u65e5\u5fd7\r\n        Buy(msg.sender, eth, quantity);\r\n\r\n    }\r\n\r\n    function stopSale()\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        assert(!saleStopped);\r\n        saleStopped = true;\r\n        StopSale();\r\n        return true;\r\n    }\r\n\r\n    function getPeriod()\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        if (saleStopped) {\r\n            return FINISHED;\r\n        }\r\n\r\n        if (now < openTime) {\r\n            return BEFORE_SALE;\r\n        }\r\n\r\n        if (valueSale == saleQuantity) {\r\n            return FINISHED;\r\n        }\r\n\r\n        if (now >= openTime && now < closeTime) {\r\n            return IN_SALE;\r\n        }\r\n\r\n        return FINISHED;\r\n    }\r\n\r\n    //\u4ece\u5408\u7ea6\u63d0Eth\r\n    function withdraw(uint amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint period = getPeriod();\r\n        require(period == FINISHED);\r\n\r\n        require(this.balance >= amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // \u4ece\u5408\u7ea6\u63d0token \u4e00\u5b9a\u8981\u516c\u52df\u7ed3\u675f\u624d\u53ef\u4ee5\u63d0\r\n    function withdrawToken(uint amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint period = getPeriod();\r\n        require(period == FINISHED);\r\n\r\n        withdrawQuantity += safeAdd(withdrawQuantity, amount);\r\n        require(transferInner(msg.sender, amount));\r\n    }\r\n\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Buy(address indexed sender, uint eth, uint token);\r\n    event StopSale();\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCloseTime\",\"type\":\"uint256\"}],\"name\":\"setCloseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batchtransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOpenTime\",\"type\":\"uint256\"}],\"name\":\"setOpenTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StopSale\",\"type\":\"event\"}]", "ContractName": "VAAToken", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://032887022eb53773ff44e7b03aa1e7b7d3a840468dc423127bb25da6f6822b48"}]}