{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MPHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0 <0.9.0;\\n\\nimport \\\"./PunksMarket.sol\\\";\\n\\n\\n/**\\n * @title MPHelper contract\\n * @author @FrankPoncelet\\n * \\n */\\n contract MPHelper{\\n    PunksMarket public mPContract;\\n\\n    constructor() {\\n        mPContract = PunksMarket(payable(0x759c6C1923910930C18ef490B3c3DbeFf24003cE));\\n        }\\n\\n    function getAllBids(uint256[] memory ids) external view returns (PunksMarket.Punk[] memory){\\n        uint tokens = 0;\\n        for (uint i=0; i<ids.length; i++) {\\n            PunksMarket.Punk memory punk = mPContract.getPunksDetails(ids[i]);\\n            if (punk.bid.hasBid && !isForSale(punk)){\\n                tokens+=1;\\n            }\\n        }\\n        PunksMarket.Punk[] memory punks = new PunksMarket.Punk[](tokens);\\n        uint index = 0;\\n        for (uint i=0; i<ids.length; i++) {\\n            PunksMarket.Punk memory punk = mPContract.getPunksDetails(ids[i]);\\n            if (punk.bid.hasBid && !isForSale(punk)){\\n                punks[index]=mPContract.getPunksDetails(ids[i]);\\n                index +=1;\\n            }\\n        }\\n\\n        return punks;\\n    }\\n\\n    function getAllForSale(uint256[] memory ids) external view returns (PunksMarket.Punk[] memory){\\n        uint tokens = 0;\\n        for (uint i=0; i<ids.length; i++) {\\n            PunksMarket.Punk memory punk = mPContract.getPunksDetails(ids[i]);\\n            if (isForSale(punk)){\\n                tokens+=1;\\n            }\\n        }\\n        PunksMarket.Punk[] memory punks = new PunksMarket.Punk[](tokens);\\n        uint index = 0;\\n        for (uint i=0; i<ids.length; i++) {\\n            PunksMarket.Punk memory punk = mPContract.getPunksDetails(ids[i]);\\n            if (isForSale(punk)){\\n                punks[index]=mPContract.getPunksDetails(ids[i]);\\n                index +=1;\\n            }\\n        }\\n        return punks;\\n    }\\n\\n    function getDetailsForIds(uint256[] memory ids) external view returns (PunksMarket.Punk[] memory){\\n        PunksMarket.Punk[] memory punks = new PunksMarket.Punk[](ids.length);\\n        for (uint i=0; i<ids.length; i++) {\\n            punks[i]=mPContract.getPunksDetails(ids[i]);\\n        }\\n        return punks;\\n    }\\n\\n    function isForSale(PunksMarket.Punk memory punk) public pure returns (bool){\\n        return punk.offer.isForSale && punk.owner==punk.offer.seller;\\n    }\\n\\n }\"\r\n    },\r\n    \"contracts/PunksMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0 <0.9.0;\\n\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/access/Ownable.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/security/Pausable.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./library/AdminControl.sol\\\";\\n\\n\\n\\n/**\\n * @title PunksMarket contract\\n * @author @FrankPoncelet\\n * \\n */\\ncontract PunksMarket is AdminControl, Pausable , ReentrancyGuard{\\n\\n    IERC721 public punksWrapperContract; // instance of the Cryptopunks contract\\n    ICryptoPunk public punkContract; // Instance of cryptopunk smart contract\\n\\n    struct Offer {\\n        bool isForSale;\\n        uint punkIndex;\\n        address seller;\\n        uint256 minValue;          // in WEI\\n        address onlySellTo;\\n    }\\n\\n    struct Bid {\\n        bool hasBid;\\n        uint punkIndex;\\n        address bidder;\\n        uint256 value;\\n    }\\n\\n    struct Punk {\\n        bool wrapped;\\n        address owner;\\n        Bid bid;\\n        Offer offer;\\n    }\\n\\n    // keep track of the totale volume processed by this contract.\\n    uint256 public totalVolume;\\n    uint constant public TOTAL_PUNKS = 10000;\\n\\n    // A record of punks that are offered for sale at a specific minimum value, and perhaps to a specific person\\n    mapping (uint => Offer) private punksOfferedForSale;\\n\\n    // A record of the highest punk bid\\n    mapping (uint => Bid) private punkBids;\\n\\n    event PunkOffered(uint indexed punkIndex, uint minValue, address indexed toAddress);\\n    event PunkBidEntered(uint indexed punkIndex, uint value, address indexed fromAddress);\\n    event PunkBidWithdrawn(uint indexed punkIndex, uint value, address indexed fromAddress);\\n    event PunkBought(uint indexed punkIndex, uint value, address indexed fromAddress, address indexed toAddress);\\n    event PunkNoLongerForSale(uint indexed punkIndex);\\n\\n    /* \\n    * Initializes contract with an instance of CryptoPunks Wrapper contract\\n    */\\n    constructor() {\\n        punksWrapperContract = IERC721(0x7898972F9708358ACb7Ea7d000EbDf28FCdF325C); // TODO change on deploy main net\\n        punkContract = ICryptoPunk(0x85252f525456D3fCe3654e56f6EAF034075e231C); // TODO change on deploy main net\\n    }\\n\\n    /* Allows the owner of the contract to set a new Cryptopunks WRAPPER contract address */\\n    function setPunksWrapperContract(address newpunksAddress) public onlyOwner {\\n      punksWrapperContract = IERC721(newpunksAddress);\\n    }\\n\\n    /* Allows the owner of a CryptoPunks to stop offering it for sale */\\n    function punkNoLongerForSale(uint punkIndex) public nonReentrant() {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        require(punksWrapperContract.ownerOf(punkIndex) == msg.sender,\\\"you are not the owner of this token\\\");\\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, msg.sender, 0, address(0x0));\\n        emit PunkNoLongerForSale(punkIndex);\\n    }\\n\\n    /* Allows a CryptoPunk owner to offer it for sale */\\n    function offerPunkForSale(uint punkIndex, uint minSalePriceInWei) public whenNotPaused nonReentrant()  {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        require(punksWrapperContract.ownerOf(punkIndex) == msg.sender,\\\"you are not the owner of this token\\\");\\n        punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, address(0x0));\\n        emit PunkOffered(punkIndex, minSalePriceInWei, address(0x0));\\n    }\\n\\n    /* Allows a Cryptopunk owner to offer it for sale to a specific address */\\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) public whenNotPaused nonReentrant() {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        require(punksWrapperContract.ownerOf(punkIndex) == msg.sender,\\\"you are not the owner of this token\\\");\\n        punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, toAddress);\\n        emit PunkOffered(punkIndex, minSalePriceInWei, toAddress);\\n    }\\n    \\n\\n    /* Allows users to buy a Cryptopunk offered for sale */\\n    function buyPunk(uint punkIndex) payable public whenNotPaused nonReentrant() {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        Offer memory offer = punksOfferedForSale[punkIndex];\\n        require (offer.isForSale,\\\"Punk is not for sale\\\"); // punk not actually for sale\\n        require (offer.onlySellTo == address(0x0) || offer.onlySellTo == msg.sender,\\\"Private sale.\\\") ;                \\n        require (msg.value >= offer.minValue,\\\"Not enough ether send\\\"); // Didn't send enough ETH\\n        address seller = offer.seller;\\n        require  (seller == punksWrapperContract.ownerOf(punkIndex),'seller no longer owner of punk'); // Seller no longer owner of punk\\n\\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, msg.sender, 0, address(0x0));\\n        _withdraw(seller,msg.value);\\n        totalVolume += msg.value;\\n        punksWrapperContract.safeTransferFrom(seller, msg.sender, punkIndex);\\n\\n        emit PunkBought(punkIndex, msg.value, seller, msg.sender);\\n\\n        // Check for the case where there is a bid from the new owner and refund it.\\n        // Any other bid can stay in place.\\n        Bid memory bid = punkBids[punkIndex];\\n        if (bid.bidder == msg.sender) {\\n            // Kill bid and refund value\\n            _withdraw(msg.sender,bid.value);\\n            punkBids[punkIndex] = Bid(false, punkIndex, address(0x0), 0);\\n        }\\n    }\\n    /* Allows users to enter bids for any Cryptopunk */\\n    function enterBidForPunk(uint punkIndex) payable public whenNotPaused nonReentrant() {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        require (punksWrapperContract.ownerOf(punkIndex) != msg.sender,\\\"You already own this punk\\\");\\n        require (msg.value > 0,\\\"Cannot enter bid of zero\\\");\\n        Bid memory existing = punkBids[punkIndex];\\n        require (msg.value > existing.value,\\\"your bid is too low\\\");\\n        if (existing.value > 0) {\\n            // Refund the failing bid\\n            _withdraw(existing.bidder,existing.value);\\n        }\\n        punkBids[punkIndex] = Bid(true, punkIndex, msg.sender, msg.value);\\n        emit PunkBidEntered(punkIndex, msg.value, msg.sender);\\n    }\\n\\n    /* Allows Cryptopunk owners to accept bids for their punks */\\n    function acceptBidForPunk(uint punkIndex, uint minPrice) public whenNotPaused nonReentrant() {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        require(punksWrapperContract.ownerOf(punkIndex) == msg.sender,'you are not the owner of this token');\\n        address seller = msg.sender;\\n        Bid memory bid = punkBids[punkIndex];\\n        require(bid.hasBid == true,\\\"Punk has no bid\\\"); \\n        require (bid.value >= minPrice,\\\"The bid is too low\\\");\\n\\n        address bidder = bid.bidder;\\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, bidder, 0, address(0x0));\\n        uint amount = bid.value;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0x0), 0);\\n\\n        _withdraw(seller,amount); \\n        totalVolume += amount;\\n        punksWrapperContract.safeTransferFrom(msg.sender, bidder, punkIndex);\\n\\n        emit PunkBought(punkIndex, bid.value, seller, bidder);\\n    }\\n\\n    /* Allows bidders to withdraw their bids */\\n    function withdrawBidForPunk(uint punkIndex) public nonReentrant() {\\n        require(punkIndex < 10000,\\\"token index not valid\\\");\\n        Bid memory bid = punkBids[punkIndex];\\n        require (bid.bidder == msg.sender,\\\"The bidder is not message sender\\\");\\n        emit PunkBidWithdrawn(punkIndex, bid.value, msg.sender);\\n        uint amount = bid.value;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0x0), 0);\\n        // Refund the bid money\\n        _withdraw(msg.sender,amount);\\n    }\\n\\n    ///////// Website only methods ////////////\\n    function getBid(uint punkIndex) external view returns (Bid memory){\\n        return punkBids[punkIndex];\\n    }\\n\\n    function getOffer(uint punkIndex) external view returns (Offer memory){\\n        return punksOfferedForSale[punkIndex];\\n    }\\n\\n    /**\\n    * Returns offer, bid and owner data for a specific punk.\\n    */\\n    function getPunksDetails(uint index) external view returns (Punk memory) {\\n            address owner = punkContract.punkIndexToAddress(index);\\n            bool wrapper = false;\\n            if (owner==address(punksWrapperContract)){\\n                owner = punksWrapperContract.ownerOf(index);\\n                wrapper = true;\\n            }\\n            Punk memory punks=Punk(wrapper,owner,punkBids[index],punksOfferedForSale[index]);\\n        return punks;\\n    }\\n\\n    /**\\n    * Returns the id's of all wrapped punks.\\n    */\\n    function getAllWrappedPunks() external view returns (int[] memory){\\n        int[] memory ids = new int[](TOTAL_PUNKS);\\n        for (uint i=0; i<TOTAL_PUNKS; i++) {\\n            ids[i]= 11111;\\n        }\\n        uint256 j =0;\\n        for (uint256 i=0; i<TOTAL_PUNKS; i++) {\\n            if ( punkContract.punkIndexToAddress(i) == address(punksWrapperContract)) {\\n                ids[j] = int(i);\\n                j++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n    * Returns the id's of the UNWRAPPED punks for an address\\n    */\\n    function getPunksForAddress(address user) external view returns(uint256[] memory) {\\n        uint256[] memory punks = new uint256[](punkContract.balanceOf(user));\\n        uint256 j =0;\\n        for (uint256 i=0; i<TOTAL_PUNKS; i++) {\\n            if ( punkContract.punkIndexToAddress(i) == user ) {\\n                punks[j] = i;\\n                j++;\\n            }\\n        }\\n        return punks;\\n    }\\n\\n    /**\\n    * Returns the id's of the WRAPPED punks for an address\\n    */\\n    function getWrappedPunksForAddress(address user) external view returns(uint256[] memory) {\\n        uint256[] memory punks = new uint256[](punksWrapperContract.balanceOf(user));\\n        uint256 j =0;\\n        for (uint256 i=0; i<TOTAL_PUNKS; i++) {\\n            try punksWrapperContract.ownerOf(i) returns (address owner){\\n                if ( owner == user ) {\\n                    punks[j] = i;\\n                    j++;\\n                }\\n            } catch {\\n                // ignore\\n            }\\n        }\\n        return punks;\\n    }\\n\\n    ////////// safe withdraw method //////////\\n    function _withdraw(address _address, uint256 _amount) private {\\n        (bool success, ) = _address.call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    ////////// Contract safety, emergency methods////////\\n    /**\\n    * Allow the CONTRACT owner/admin to return a bid. \\n    */\\n    function returnBid(uint punkIndex) public adminRequired {\\n        Bid memory bid = punkBids[punkIndex];\\n        uint amount = bid.value;\\n        address bidder = bid.bidder;\\n        punkBids[punkIndex] = Bid(false, punkIndex, address(0x0), 0);\\n        emit PunkBidWithdrawn(punkIndex, amount, bidder);\\n        _withdraw(bidder,amount);\\n    }\\n    /**\\n    * Allow the CONTRACT owner/admin to END an offer. \\n    */\\n    function revokeSale(uint punkIndex) public adminRequired {\\n        require(punkIndex < 10000,\\\"Token index not valid\\\");\\n        punksOfferedForSale[punkIndex] = Offer(false, punkIndex, address(0x0), 0, address(0x0));\\n        emit PunkNoLongerForSale(punkIndex);\\n    }\\n\\n    /////////// pause methods /////////////\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    ///////// contract can recieve Ether if needed//////\\n    fallback() external payable { }\\n    receive() external payable { }\\n\\n}\\n\\ninterface ICryptoPunk {\\n    function punkIndexToAddress(uint punkIndex) external view returns (address);\\n    function buyPunk(uint punkIndex) external payable;\\n    function transferPunk(address to, uint punkIndex) external;\\n    function balanceOf(address) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/library/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/**\\n * Based one AdminControl from manifold.xyz, but simplified.\\n * @author @frankPoncelet\\n */\\n\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/access/Ownable.sol\\\";\\n\\nabstract contract AdminControl is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    \\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.4.0/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getAllBids\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct PunksMarket.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"internalType\":\"struct PunksMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"internalType\":\"struct PunksMarket.Punk[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getAllForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct PunksMarket.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"internalType\":\"struct PunksMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"internalType\":\"struct PunksMarket.Punk[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getDetailsForIds\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct PunksMarket.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"internalType\":\"struct PunksMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"internalType\":\"struct PunksMarket.Punk[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct PunksMarket.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"internalType\":\"struct PunksMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"internalType\":\"struct PunksMarket.Punk\",\"name\":\"punk\",\"type\":\"tuple\"}],\"name\":\"isForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mPContract\",\"outputs\":[{\"internalType\":\"contract PunksMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MPHelper", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}