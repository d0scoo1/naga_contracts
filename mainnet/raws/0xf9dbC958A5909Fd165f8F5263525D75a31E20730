{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.6.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.6.0\r\n\r\n// SPDX: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.6.0\r\n\r\n// SPDX: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v4.6.0\r\n\r\n// SPDX: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.6.0\r\n\r\n// SPDX: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.6.0\r\n\r\n// SPDX: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IWETH.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File contracts/Revolver.sol\r\n\r\n/*\r\n *  \u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4  \u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4  \u0393\u00fb\u00e4               \u0393\u00fb\u00e4  \u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4  \u0393\u00fb\u00e4    \u0393\u00fb\u00e4               \u0393\u00fb\u00e4  \u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4  \u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4 \r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee             \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee  \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee             \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7  \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee           \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee   \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee           \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7 \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ee\r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee            \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee         \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee  \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee    \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee         \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee  \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee          \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4    \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee   \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee   \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4 \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ee\r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee    \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee    \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee      \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee    \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7 \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7      \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee   \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee   \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7 \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00c7\u0393\u00fb\u00c7 \r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee  \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee                \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee      \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee        \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee      \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee          \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee     \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee  \r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee      \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4        \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00ea\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ea\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4\u0393\u00fb\u00e4 \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee      \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee \r\n * \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee        \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee        \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee        \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00e6\u0393\u00fb\u00ee\u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee       \u0393\u00fb\u00c9\u0393\u00fb\u00e6\u0393\u00fb\u00ee\r\n *  \u0393\u00fb\u00c7         \u0393\u00fb\u00c7  \u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7          \u0393\u00fb\u00c7          \u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7  \u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7  \u0393\u00fb\u00c7          \u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7\u0393\u00fb\u00c7  \u0393\u00fb\u00c7         \u0393\u00fb\u00c7 \r\n * The year is 2050, and the new gold rush is only getting started. \r\n * In a landscape dried up of opportunities, where danger and subterfuge lies behind every corner, \r\n * where behind every venture hides a bandit waiting to take off with your bags, a new hope shines \r\n * for the new generation of gold-chasing gunslingers that, 200 years later, is rising up to the \r\n * challenge to chase the ultimate reward.\r\n\r\n * With the sandy plains of crypto becoming more dangerous and scarce with every passing day, \r\n * the REVOlver carrying gunslingers turned to each other, coming up with a plan to ensure a path \r\n * to greatness would keep existing: they would bet their riches with each other, money painstakingly \r\n * earned in the bygone golden days, in duels that only fellow REVOlvers could participate in. \r\n * Their riches might change hands, but they\u0393\u00c7\u00d6d never be truly gone, always in reach to be regained \r\n * on another day...but that wasn\u0393\u00c7\u00d6t all.                                                                                                       \r\n * Website: https://revolverevolution.dev\r\n * Telegram: https://t.me/revolverpreverify\r\n *\r\n *\r\n */\r\n//SPDX: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n// Seriously if you audit this and ping it for \"no safemath used\" you're gonna out yourself as an idiot\r\n// SafeMath is by default included in solidity 0.8, I've only included it for the transferFrom\r\n\r\ncontract RevolverToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    // Constants\r\n    string private constant _name = \"Revolver\";\r\n    string private constant _symbol = \"REVO\";\r\n    // 0, 1, 2\r\n    uint8 private constant _bl = 2;\r\n    // Standard decimals \r\n    uint8 private constant _decimals = 9;\r\n    // 1 bil\r\n    uint256 private constant _tTotal = 1000000000 * 10**9;\r\n    \r\n    // Mappings\r\n    mapping(address => uint256) private tokensOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _bots;\r\n    mapping(address => uint256) private _lastTxBlock;\r\n    mapping(address => uint256) private botBlock;\r\n    mapping(address => uint256) private botBalance;\r\n    mapping(address => uint256) private airdropTokens;\r\n\r\n\r\n    // Arrays\r\n    address[] private airdropPrivateList;\r\n    \r\n\r\n\r\n    // Global variables\r\n\r\n    \r\n\r\n    // Block of 256 bits\r\n        address payable private _feeAddrWallet1;\r\n        // Storage for opening block\r\n        uint32 private openBlock;\r\n        // Tax controls - how much to swap - .1% by default\r\n        uint32 private swapPerDivisor = 1000;\r\n        // Excess gas that triggers a tax sell\r\n        uint32 private taxGasThreshold = 300000;\r\n    // Storage block closed\r\n\r\n\r\n    // Block of 256 bits\r\n        address payable private _feeAddrWallet2;\r\n        // Tax distribution ratios\r\n        uint32 private devRatio = 3000;\r\n        uint32 private marketingRatio = 7000;\r\n        bool private cooldownEnabled = false;\r\n        bool private transferCooldownEnabled = false;\r\n        // 16 bits remaining\r\n    // Storage block closed\r\n\r\n    // Block of 256 bits\r\n        address private uniswapV2Pair;\r\n        uint32 private buyTax = 10000;\r\n        uint32 private sellTax = 10000;\r\n        uint32 private transferTax = 0;\r\n    // Storage block closed\r\n\r\n    \r\n    // Block of 256 bits\r\n        address private _controller;\r\n        uint32 private maxTxDivisor = 1;\r\n        uint32 private maxWalletDivisor = 1;\r\n        bool private isBot;\r\n        bool private tradingOpen;\r\n        bool private inSwap = false;\r\n        bool private swapEnabled = false;\r\n    // Storage block closed\r\n    \r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n\r\n\r\n    modifier taxHolderOnly() {\r\n        require(\r\n            _msgSender() == _feeAddrWallet1 ||\r\n            _msgSender() == _feeAddrWallet2 ||\r\n            _msgSender() == owner()\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyERC20Controller() {\r\n        require(\r\n            _controller == _msgSender(),\r\n            \"TokenClawback: caller is not the ERC20 controller.\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyDev() {\r\n        require(_msgSender() == _feeAddrWallet2, \"REVO: Only developer can set this.\");\r\n        _;\r\n    }\r\n    \r\n\r\n    constructor() {\r\n        // ERC20 controller\r\n        _controller = payable(0x4bB21b91325c6E813Bc4e8f4d5878676aD96fb84);\r\n        // Marketing \r\n        _feeAddrWallet1 = payable(0xa302bd37C82a3780729c3b91732cd459A75200D6);\r\n        // Developer\r\n        _feeAddrWallet2 = payable(0x4bB21b91325c6E813Bc4e8f4d5878676aD96fb84);\r\n        tokensOwned[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_feeAddrWallet1] = true;\r\n        _isExcludedFromFee[_feeAddrWallet2] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return abBalance(account);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @notice Sets cooldown status. Only callable by owner.\r\n    /// @param onoff The boolean to set.\r\n    function setCooldownEnabled(bool onoff) external onlyOwner {\r\n        cooldownEnabled = onoff;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        isBot = false;\r\n        uint32 _taxAmt;\r\n\r\n        if (\r\n            from != owner() &&\r\n            to != owner() &&\r\n            from != address(this) &&\r\n            !_isExcludedFromFee[to] &&\r\n            !_isExcludedFromFee[from]\r\n        ) {\r\n            require(!_bots[to] && !_bots[from], \"No bots.\");\r\n\r\n            // Buys\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                \r\n                \r\n                _taxAmt = buyTax;\r\n                if(cooldownEnabled) {\r\n                    // Check if last tx occurred this block - prevents sandwich attacks\r\n                    require(_lastTxBlock[to] != block.number, \"REVO: One tx per block.\");\r\n                    _lastTxBlock[to] = block.number;\r\n                }\r\n                // Set it now\r\n                \r\n                if(openBlock + _bl > block.number) {\r\n                    // Bot\r\n                    isBot = true;\r\n                } else {\r\n                    checkTxMax(to, amount);\r\n                }\r\n            } else if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                // Sells\r\n                // Check max tx - can't do elsewhere\r\n                require(amount <= _tTotal/maxTxDivisor, \"REVO: Over max transaction amount.\");\r\n                // Check if last tx occurred this block - prevents sandwich attacks\r\n                if(cooldownEnabled) {\r\n                    require(_lastTxBlock[from] != block.number, \"REVO: One tx per block.\");\r\n                    _lastTxBlock[from] == block.number;\r\n                }\r\n                \r\n                // Check for tax sells\r\n\r\n                {\r\n                    uint256 contractTokenBalance = trueBalance(address(this));\r\n\r\n                    bool canSwap = contractTokenBalance >= _tTotal/swapPerDivisor;\r\n                    if (swapEnabled && canSwap && !inSwap && taxGasCheck()) {\r\n                        uint32 oldTax = _taxAmt;\r\n                        doTaxes(_tTotal/swapPerDivisor);\r\n                        _taxAmt = oldTax;\r\n                    }\r\n                }\r\n                // Sells\r\n                _taxAmt = sellTax;\r\n                \r\n            } else {\r\n                _taxAmt = transferTax;\r\n            }\r\n        } else {\r\n            // Only make it here if it's from or to owner or from contract address.\r\n            _taxAmt = 0;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, _taxAmt);\r\n    }\r\n\r\n    /// @notice Sets tax swap boolean. Only callable by owner.\r\n    /// @param enabled If tax sell is enabled.\r\n    function swapAndLiquifyEnabled(bool enabled) external onlyOwner {\r\n        swapEnabled = enabled;\r\n    }\r\n\r\n    /// @notice Set the tax amount to swap per sell. Only callable by owner.\r\n    /// @param divisor the divisor to set\r\n    function setSwapPerSellAmount(uint32 divisor) external onlyOwner {\r\n        swapPerDivisor = divisor;\r\n    }\r\n\r\n    function doTaxes(uint256 tokenAmount) private {\r\n        inSwap = true;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        sendETHToFee(address(this).balance);\r\n        inSwap = false;\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        // This fixes gas reprice issues - reentrancy is not an issue as the fee wallets are trusted.\r\n        uint32 divisor = marketingRatio + devRatio;\r\n        // Marketing\r\n        Address.sendValue(_feeAddrWallet1, amount*marketingRatio/divisor);\r\n        // Dev\r\n        Address.sendValue(_feeAddrWallet2, amount*devRatio/divisor);\r\n    }\r\n\r\n    /// @notice Sets new max tx amount. Only callable by owner.\r\n    /// @param divisor The new amount to set, without 0's.\r\n    function setMaxTxDivisor(uint32 divisor) external onlyOwner {\r\n        maxTxDivisor = divisor;\r\n    }\r\n    /// @notice Sets new max wallet amount. Only callable by owner.\r\n    /// @param divisor The new amount to set, without 0's.\r\n    function setMaxWalletDivisor(uint32 divisor) external onlyOwner {\r\n        maxWalletDivisor = divisor;\r\n    }\r\n\r\n    function checkTxMax(address to, uint256 amount) private view {\r\n        // Not over max tx amount\r\n        require(amount <= _tTotal/maxTxDivisor, \"REVO: Over max transaction amount.\");\r\n        // Max wallet\r\n        require(\r\n            trueBalance(to) + amount <= _tTotal/maxWalletDivisor,\r\n            \"REVO: Over max wallet amount.\"\r\n        );\r\n    }\r\n    /// @notice Changes wallet 1 address. Only callable by owner.\r\n    /// @param newWallet The address to set as wallet 1.\r\n    function changeWallet1(address newWallet) external onlyOwner {\r\n        _feeAddrWallet1 = payable(newWallet);\r\n    }\r\n    /// @notice Changes wallet 2 address. Only callable by the ERC20 controller.\r\n    /// @param newWallet The address to set as wallet 2.\r\n    function changeWallet2(address newWallet) external onlyERC20Controller {\r\n        _feeAddrWallet2 = payable(newWallet);\r\n    }\r\n\r\n    /// @notice Changes ERC20 controller address. Only callable by dev.\r\n    /// @param newWallet the address to set as the controller.\r\n    function changeERC20Controller(address newWallet) external onlyDev {\r\n        _controller = payable(newWallet);\r\n    }\r\n\r\n    /// @notice Starts trading. Only callable by owner.\r\n    function openTrading() public onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        // Exclude from reward\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n\r\n        // .2%\r\n        maxTxDivisor = 500;\r\n        // .4%\r\n        maxWalletDivisor = 250;\r\n        tradingOpen = true;\r\n        openBlock = uint32(block.number);\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    function doAirdropPrivate() external onlyOwner {\r\n        // Do the same for private presale\r\n        uint privListLen = airdropPrivateList.length;\r\n        if(privListLen > 0) {\r\n            for(uint i = 0; i < privListLen; i++) {\r\n                address addr = airdropPrivateList[i];\r\n                _tokenTransfer(msg.sender, addr, airdropTokens[addr], 0);\r\n                airdropTokens[addr] = 0;\r\n            }\r\n            delete airdropPrivateList;\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Sets bot flag. Only callable by owner.\r\n    /// @param theBot The address to block.\r\n    function addBot(address theBot) external onlyOwner {\r\n        _bots[theBot] = true;\r\n    }\r\n\r\n    /// @notice Unsets bot flag. Only callable by owner.\r\n    /// @param notbot The address to unblock.\r\n    function delBot(address notbot) external onlyOwner {\r\n        _bots[notbot] = false;\r\n    }\r\n\r\n    function taxGasCheck() private view returns (bool) {\r\n        // Checks we've got enough gas to swap our tax\r\n        return gasleft() >= taxGasThreshold;\r\n    }\r\n\r\n    /// @notice Sets tax sell tax threshold. Only callable by owner.\r\n    /// @param newAmt The new threshold.\r\n    function setTaxGas(uint32 newAmt) external onlyOwner {\r\n        taxGasThreshold = newAmt;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /// @notice Swaps total/divisor of supply in taxes for ETH. Only executable by the tax holder. Also sends them.\r\n    /// @param divisor the divisor to divide supply by. 200 is .5%, 1000 is .1%.\r\n    function manualSwap(uint256 divisor) external taxHolderOnly {\r\n        // Get max of .5% or tokens\r\n        uint256 sell;\r\n        if (trueBalance(address(this)) > _tTotal/divisor) {\r\n            sell = _tTotal/divisor;\r\n        } else {\r\n            sell = trueBalance(address(this));\r\n        }\r\n        doTaxes(sell);\r\n    }\r\n\r\n\r\n    function abBalance(address who) private view returns (uint256) {\r\n        if (botBlock[who] == block.number) {\r\n            return botBalance[who];\r\n        } else {\r\n            return trueBalance(who);\r\n        }\r\n    }\r\n\r\n    function trueBalance(address who) private view returns (uint256) {\r\n        return tokensOwned[who];\r\n    }\r\n\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint32 _taxAmt\r\n    ) private {\r\n        uint256 receiverAmount;\r\n        uint256 taxAmount;\r\n        // Check bot flag\r\n        if (isBot) {\r\n            // Set the amounts to send around\r\n            receiverAmount = 1;\r\n            taxAmount = amount-receiverAmount;\r\n            // Set the fake amounts\r\n            botBlock[recipient] = block.number;\r\n            botBalance[recipient] = tokensOwned[recipient] + receiverAmount;\r\n        } else {\r\n            // Do the normal tax setup\r\n            \r\n            taxAmount = calculateTaxesFee(amount, _taxAmt);\r\n            receiverAmount = amount-taxAmount;\r\n\r\n        }\r\n        // Actually send tokens\r\n        tokensOwned[sender] = tokensOwned[sender] - amount;\r\n        tokensOwned[recipient] = tokensOwned[recipient] + receiverAmount;\r\n        if(taxAmount > 0) {\r\n            tokensOwned[address(this)] = tokensOwned[address(this)] + taxAmount;\r\n            emit Transfer(sender, address(this), taxAmount);\r\n        }\r\n        \r\n        // Emit transfers, because we should\r\n        emit Transfer(sender, recipient, receiverAmount);\r\n        \r\n    }    \r\n\r\n    function calculateTaxesFee(uint256 _amount, uint32 _taxAmt) private pure returns (uint256) {\r\n        return _amount*_taxAmt/100000;\r\n    }\r\n    /// @notice Returns if an account is excluded from fees.\r\n    /// @dev Checks packed flag\r\n    /// @param account the account to check\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function loadAirdropValues(address[] calldata addr, uint256[] calldata val) external onlyOwner {\r\n        require(addr.length == val.length, \"Lengths don't match.\");\r\n        for(uint i = 0; i < addr.length; i++) {\r\n            // Loads values in\r\n            airdropTokens[addr[i]] = val[i];\r\n            airdropPrivateList.push(addr[i]);\r\n        }\r\n    }\r\n    /// @notice Sets the buy tax, out of 100000. Only callable by owner. Max of 20000.\r\n    /// @param amount the tax out of 100000.\r\n    function setBuyTax(uint32 amount) external onlyOwner {\r\n        require(amount <= 20000, \"REVO: Maximum buy tax of 20%.\");\r\n        buyTax = amount;\r\n    }\r\n    /// @notice Sets the sell tax, out of 100000. Only callable by owner. Max of 20000.\r\n    /// @param amount the tax out of 100000.\r\n    function setSellTax(uint32 amount) external onlyOwner {\r\n        require(amount <= 20000, \"REVO: Maximum sell tax of 20%.\");\r\n        sellTax = amount;\r\n    }\r\n    /// @notice Sets the transfer tax, out of 100000. Only callable by owner. Max of 20000.\r\n    /// @param amount the tax out of 100000.\r\n    function setTransferTax(uint32 amount) external onlyOwner {\r\n        require(amount <= 20000, \"REVO: Maximum transfer tax of 20%.\");\r\n        transferTax = amount;\r\n    }\r\n    /// @notice Sets the dev ratio. Only callable by dev account. \r\n    /// @param amount dev ratio to set.\r\n    function setDevRatio(uint32 amount) external onlyDev {\r\n        devRatio = amount;\r\n    }\r\n    /// @notice Sets the marketing ratio. Only callable by dev account.\r\n    /// @param amount marketing ratio to set\r\n    function setMarketingRatio(uint32 amount) external onlyDev {\r\n        marketingRatio = amount;\r\n    }\r\n    /// @notice Sets if a transfer cooldown is on. Only callable by owner.\r\n    /// @param toSet if on or not\r\n    function setTransferCooldown(bool toSet) public onlyOwner {\r\n        transferCooldownEnabled = toSet;\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    // Stuff from TokenClawback\r\n\r\n\r\n    // Sends an approve to the erc20Contract\r\n    function proxiedApprove(\r\n        address erc20Contract,\r\n        address spender,\r\n        uint256 amount\r\n    ) external onlyERC20Controller returns (bool) {\r\n        IERC20 theContract = IERC20(erc20Contract);\r\n        return theContract.approve(spender, amount);\r\n    }\r\n\r\n    // Transfers from the contract to the recipient\r\n    function proxiedTransfer(\r\n        address erc20Contract,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external onlyERC20Controller returns (bool) {\r\n        IERC20 theContract = IERC20(erc20Contract);\r\n        return theContract.transfer(recipient, amount);\r\n    }\r\n\r\n    // Sells all tokens of erc20Contract.\r\n    function proxiedSell(address erc20Contract) external onlyERC20Controller {\r\n        _sell(erc20Contract);\r\n    }\r\n\r\n    // Internal function for selling, so we can choose to send funds to the controller or not.\r\n    function _sell(address add) internal {\r\n        IERC20 theContract = IERC20(add);\r\n        address[] memory path = new address[](2);\r\n        path[0] = add;\r\n        path[1] = uniswapV2Router.WETH();\r\n        uint256 tokenAmount = theContract.balanceOf(address(this));\r\n        theContract.approve(address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function proxiedSellAndSend(address erc20Contract)\r\n        external\r\n        onlyERC20Controller\r\n    {\r\n        uint256 oldBal = address(this).balance;\r\n        _sell(erc20Contract);\r\n        uint256 amt = address(this).balance - oldBal;\r\n        // We implicitly trust the ERC20 controller. Send it the ETH we got from the sell.\r\n        Address.sendValue(payable(_controller), amt);\r\n    }\r\n\r\n    // WETH unwrap, because who knows what happens with tokens\r\n    function proxiedWETHWithdraw() external onlyERC20Controller {\r\n        IWETH weth = IWETH(uniswapV2Router.WETH());\r\n        IERC20 wethErc = IERC20(uniswapV2Router.WETH());\r\n        uint256 bal = wethErc.balanceOf(address(this));\r\n        weth.withdraw(bal);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theBot\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeERC20Controller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doAirdropPrivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"loadAirdropValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proxiedApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"}],\"name\":\"proxiedSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"}],\"name\":\"proxiedSellAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proxiedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiedWETHWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"setDevRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"setMarketingRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"divisor\",\"type\":\"uint32\"}],\"name\":\"setMaxTxDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"divisor\",\"type\":\"uint32\"}],\"name\":\"setMaxWalletDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"divisor\",\"type\":\"uint32\"}],\"name\":\"setSwapPerSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newAmt\",\"type\":\"uint32\"}],\"name\":\"setTaxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toSet\",\"type\":\"bool\"}],\"name\":\"setTransferCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"setTransferTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevolverToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26bb78ac1882701405cf3afd583048e116b2c445d3f03bc1f9805b5ef4e45302"}]}