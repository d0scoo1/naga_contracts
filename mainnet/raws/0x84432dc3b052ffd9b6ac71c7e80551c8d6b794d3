{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n __          __                             _    _____                                  _             \r\n \\ \\        / /                            | |  / ____|                                (_)            \r\n  \\ \\  /\\  / / __ __ _ _ __  _ __   ___  __| | | |     ___  _ __ ___  _ __   __ _ _ __  _  ___  _ __  \r\n   \\ \\/  \\/ / '__/ _` | '_ \\| '_ \\ / _ \\/ _` | | |    / _ \\| '_ ` _ \\| '_ \\ / _` | '_ \\| |/ _ \\| '_ \\ \r\n    \\  /\\  /| | | (_| | |_) | |_) |  __/ (_| | | |___| (_) | | | | | | |_) | (_| | | | | | (_) | | | |\r\n     \\/  \\/ |_|  \\__,_| .__/| .__/ \\___|\\__,_|  \\_____\\___/|_| |_| |_| .__/ \\__,_|_| |_|_|\\___/|_| |_|\r\n                      | |   | |                                      | |                              \r\n  _____               |_| _ |_|          _____            _          |_|     _                        \r\n |  __ \\                 | | |          / ____|          | |                | |                       \r\n | |__) |___  _   _  __ _| | |_ _   _  | |     ___  _ __ | |_ _ __ __ _  ___| |_                      \r\n |  _  // _ \\| | | |/ _` | | __| | | | | |    / _ \\| '_ \\| __| '__/ _` |/ __| __|                     \r\n | | \\ \\ (_) | |_| | (_| | | |_| |_| | | |___| (_) | | | | |_| | | (_| | (__| |_                      \r\n |_|  \\_\\___/ \\__, |\\__,_|_|\\__|\\__, |  \\_____\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|                     \r\n               __/ |             __/ |                                                                \r\n              |___/             |___/                                                                \r\n/**\r\n - This is designed to handle the royalty distributions to holders\r\n  - Royalties are split 50/50 with treasury and holders by default. Fees are adjustable\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface wrappedcompanion{\r\n  function balanceOf(address owner) external view returns (uint256);\r\n}\r\ninterface wrapperdb {\r\n    function isHolder(address _address) external view returns(bool);\r\n    function getWrappedStatus(address _migrator) external view returns(bool);\r\n    function getNumHolders(uint _feed) external view returns(uint);\r\n    function getHolderAddress(uint _index) external view returns(address payable);\r\n    function setUserStatus(address _wrapper,uint _status,bool _haswrapped) external;\r\n    function manageHolderAddresses(bool status,address _holder) external;\r\n    \r\n}\r\n \r\n\r\n\r\ncontract wTCRoyalties is Context, Ownable {\r\n \r\n    address public wrappednft = 0x16e2220Bba4a2c5C71f628f4DB2D5D1e0D6ad6e0;\r\n    address public dbcontract = 0x131Bc921fDf520E62eca46c1011Fc885d6B29B9f;\r\n    address public Owner;\r\n    address payable public multisig = 0xCEcB4B16bF486a9B786A2a981a43de8647dCb1C0;\r\n    address payable public payee;\r\n    address payable public charity = 0x8B99F3660622e21f2910ECCA7fBe51d654a1517D;\r\n    uint public joiningfee = 10000000000000000; //0.01ETH A joining fee\r\n    bool public royaltydistribution; ///Enable/Disable Rewards\r\n    bool public anonrebalance; //USed to block anons from running a rebalance\r\n    bool public adjustforcontract;\r\n    uint public amounttoholders;\r\n    uint public fixedpayoutamount;\r\n    uint public lastrebalancetime; //This is the blocktime of the last split\r\n    uint public amounttotreasury;\r\n    uint public amounttocharity;\r\n    uint public totalpayouts;\r\n    uint public setfeed =2; //Default to array length\r\n    uint public totaltreasureypayouts;\r\n    uint public numberofclaims;\r\n    uint public numholders;\r\n    bool public holdersoverride; //Default to false\r\n    bool public masspayoutenabled = true; // A reflection for the users if needs be!\r\n    uint public defaultfee = 2; //the fee set for a user when the buy joining\r\n\r\n    //NB Addresses/////////\r\n    /////Mappings///////\r\n    mapping(address => uint) internal payouttime;\r\n    \r\n  using SafeMath for uint;\r\n  \r\n  \r\n  constructor () public {\r\n      Owner = msg.sender; //Owner of Contract\r\n      lastrebalancetime = block.timestamp; //Set the initial to deploy time\r\n            \r\n  }\r\n \r\n  ///Sets the fees\r\n  function setFeesAndNB(int option,uint _value) external onlyOwner\r\n  {\r\n      if (option==1)\r\n      {\r\n          joiningfee = _value;\r\n      }\r\n      if(option==2)\r\n      {\r\n          defaultfee = _value;\r\n      }\r\n      if(option==3)\r\n      {\r\n          setfeed = _value;\r\n      }\r\n      \r\n  }\r\n  function forceNumHolders(bool _onoroff,uint _numholders) external onlyOwner{\r\n      holdersoverride = _onoroff;\r\n      numholders = _numholders;\r\n  }\r\n    \r\n   ///Sets the contract address of the NFT itself//////\r\n  function setNFTAddress(address _nftaddress) external onlyOwner {\r\n    wrappednft = _nftaddress;\r\n  }\r\n\r\n   ///Sets the Multi-Sig address//////\r\n  function setMultiSig(address payable _multiaddress) external onlyOwner {\r\n    multisig = _multiaddress;\r\n  }\r\n\r\n  ///Sets the contract address of the DB //////\r\n  function setDBAddress(address _dbaddress) external onlyOwner {\r\n   dbcontract = _dbaddress;\r\n  }\r\n\r\n    ///Function to enable/disable the Royalty Payouts\r\n    function onoffRoyalties(bool _enabled) external onlyOwner{\r\n        royaltydistribution = _enabled;\r\n    }\r\n    //Function to enable mass payout of royalties\r\n    function enableMassPayout(bool _onoroff) external onlyOwner{\r\n        masspayoutenabled = _onoroff;\r\n    } \r\n    //Function to enable anon rebalance\r\n    function enableAnonRebalance(bool _onoroff) external onlyOwner{\r\n       anonrebalance = _onoroff;\r\n    } \r\n    //Function to enable anon rebalance\r\n    function enableAdjust(bool _onoroff) external onlyOwner{\r\n       adjustforcontract = _onoroff;\r\n    } \r\n\r\n   ///Function for user to check the amount of ETH roughly to be paid out\r\n    function rewardOf() external view returns(uint)\r\n   {\r\n       uint temp;\r\n       temp = fixedpayoutamount;\r\n       if (block.timestamp > lastrebalancetime + 24 hours )\r\n       {\r\n           temp = 9999999; ///A rebalance is due!\r\n       }\r\n    return temp;\r\n\r\n   }\r\n   \r\n   ////Function to handle the payout of royalties\r\n   function claim() external {\r\n       //Get the amounts of ETH required for reflection\r\n       uint ETHsplit;\r\n       bool iseligable;\r\n       uint lastpaid;\r\n       \r\n       if(msg.sender!=Owner)\r\n       {\r\n       require(royaltydistribution==true,\"Royalties not enabled!\");\r\n       lastpaid = payouttime[msg.sender];\r\n       iseligable = canClaim(msg.sender);\r\n       require(iseligable==true,\"You are not eligable to make a claim\");\r\n       require(block.timestamp > lastpaid + 24 hours,\"You are only able to claim once every 24 hours!\");\r\n       } \r\n       ///Determine if a rebalance is needed//\r\n       if (block.timestamp > lastrebalancetime + 24 hours )\r\n       {\r\n           lastrebalancetime = block.timestamp;\r\n           ETHsplit = address(this).balance;\r\n           ETHsplit = ETHsplit.div(100); //divides it into 1% parts\r\n           amounttoholders = ETHsplit.mul(50);\r\n           amounttotreasury = ETHsplit.mul(49); //Leave 1% in wallet as a buffer\r\n           ////send money to treasury////\r\n           multisig.transfer(amounttotreasury);\r\n           //Get the number of holders in the array to determine the payout///\r\n           if (holdersoverride==false) //This is a failsafe to ensure that if needs be the num holders is able to be a fixed amount\r\n           {\r\n           if(setfeed==1)\r\n           {\r\n           numholders = wrapperdb(dbcontract).getNumHolders(1); //returns number of holders based on wraps\r\n           }\r\n           if(setfeed==2)\r\n           {\r\n           numholders = wrapperdb(dbcontract).getNumHolders(2); //returns length of the array (Should be value -1 (-1 for the NFT contract itself)\r\n           }\r\n           ///This is to accomodate for the wTc contract being considered as a holder. Due to the nature of the wrapper, the numholders is  +1.\r\n           ///Having an extra holder adds a buffer of funds in the contract\r\n           if(adjustforcontract==true)\r\n           {\r\n               numholders = numholders - 1;\r\n           }\r\n\r\n           }\r\n           fixedpayoutamount = amounttoholders.div(numholders);\r\n\r\n       }\r\n\r\n       ///mass payout for holders if required\r\n       if (masspayoutenabled==true && msg.sender==Owner) //Only the owner is able to do this!\r\n       {\r\n        address payable tempaddress;\r\n        for (uint256 s = 0; s < numholders; s += 1)\r\n        {\r\n           tempaddress = wrapperdb(dbcontract).getHolderAddress(s);\r\n           //Are they eligable?//\r\n           iseligable = canClaim(tempaddress);\r\n           if (iseligable==true)\r\n           {\r\n           //first verify 24 hour period\r\n           lastpaid = payouttime[tempaddress];\r\n           if(block.timestamp > lastpaid + 24 hours)\r\n           {\r\n           \r\n           \r\n           tempaddress.transfer(fixedpayoutamount);\r\n           ///Mark the users time for claim\r\n            payouttime[tempaddress] = block.timestamp;\r\n           }\r\n           }\r\n       }\r\n       }\r\n       \r\n       if(msg.sender!=Owner)\r\n       {\r\n       msg.sender.transfer(fixedpayoutamount);\r\n       ///Mark the users time for claim\r\n       payouttime[msg.sender] = block.timestamp;\r\n       }\r\n       \r\n       \r\n       totalpayouts += fixedpayoutamount;\r\n       numberofclaims +=1;\r\n      \r\n       }\r\n    \r\n    ///Rebalance function which can be run manually,is able to be run \r\n    function forceRebalance() external {\r\n         if(msg.sender!=Owner)\r\n         {\r\n         require (block.timestamp > lastrebalancetime + 24 hours,\"Rebalance is not due!\");\r\n         }\r\n         if(anonrebalance==false)\r\n         {\r\n             require(msg.sender==Owner,\"Not Authorized\");\r\n         }\r\n           uint ETHsplit;\r\n           lastrebalancetime = block.timestamp;\r\n           ETHsplit = address(this).balance;\r\n           ETHsplit = ETHsplit.div(100); //divides it into 1% parts\r\n           amounttoholders = ETHsplit.mul(50);\r\n           amounttotreasury = ETHsplit.mul(49);\r\n           ////send money to treasury////\r\n           multisig.transfer(amounttotreasury);\r\n           //Get the number of holders in the array to determine the payout///\r\n           if (holdersoverride==false) //This is a failsafe to ensure that if needs be the num holders is able to be a fixed amount\r\n           {\r\n           numholders = wrapperdb(dbcontract).getNumHolders(2); //returns length of the array (Should be value -1 (-1 for the NFT contract itself)\r\n           }\r\n           fixedpayoutamount = amounttoholders.div(numholders);//\r\n    }\r\n       //returns stats from reflecting\r\n    function Stats(uint option) view external returns(uint)\r\n    {\r\n        uint temp;\r\n        if (option==1)\r\n        {\r\n         temp = totalpayouts;   \r\n        }\r\n        if (option==2)\r\n        {\r\n         temp = numberofclaims;      \r\n        }\r\n        if (option==3)\r\n        {\r\n         temp = totaltreasureypayouts;      \r\n        }\r\n        \r\n        return temp;\r\n    }\r\n    ///Verify that a user is eligable to claim\r\n    function canClaim(address _wallet) public view returns(bool)\r\n    {\r\n        bool temp; //defaults to false\r\n        uint numberofNFT;\r\n        //////First verify that the user has wrapped...\r\n        temp = wrapperdb(dbcontract).getWrappedStatus(_wallet);\r\n        /////Are they still holding?\r\n        numberofNFT = wrappedcompanion(wrappednft).balanceOf(_wallet);\r\n        if (temp==true && numberofNFT > 0)\r\n        {\r\n            temp = true;\r\n        }\r\n        return temp;\r\n    }\r\n    ///Allows buyers on OS to join fees...but only afer 24 hours!\r\n    function joinRoyalty() payable external{\r\n        uint numberofnft;\r\n        bool temp;\r\n        require(msg.value >= joiningfee,\"Joining fee not met!\");\r\n        numberofnft = wrappedcompanion(wrappednft).balanceOf(msg.sender);\r\n        require(numberofnft>0,\"You do not hold any wrapped NFTs\");\r\n        temp = canClaim(msg.sender);\r\n        require(temp==false,\"You are already eligable\");\r\n        wrapperdb(dbcontract).setUserStatus(msg.sender,defaultfee,true);\r\n        //add user to array!\r\n        wrapperdb(dbcontract).manageHolderAddresses(true,msg.sender);\r\n        payouttime[msg.sender] = block.timestamp;\r\n    }\r\n    ////To recieve ETH\r\n    function () external payable {\r\n    \r\n  }\r\n     \r\n  \r\n   \r\n  \r\n}///////////////////Contract END//////////////////////", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"amounttotreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numholders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"onoffRoyalties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multiaddress\",\"type\":\"address\"}],\"name\":\"setMultiSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onoroff\",\"type\":\"bool\"},{\"name\":\"_numholders\",\"type\":\"uint256\"}],\"name\":\"forceNumHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinRoyalty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberofclaims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adjustforcontract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amounttoholders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalpayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastrebalancetime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"Stats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dbcontract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"royaltydistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nftaddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totaltreasureypayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fixedpayoutamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amounttocharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersoverride\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masspayoutenabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceRebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onoroff\",\"type\":\"bool\"}],\"name\":\"enableAnonRebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joiningfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setfeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dbaddress\",\"type\":\"address\"}],\"name\":\"setDBAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"int256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFeesAndNB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anonrebalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onoroff\",\"type\":\"bool\"}],\"name\":\"enableMassPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onoroff\",\"type\":\"bool\"}],\"name\":\"enableAdjust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrappednft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "wTCRoyalties", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9fb7188e1c87ea550d7d5dbabeb71fdbd380f6bc273e4fb85dd4642635dd9647"}]}