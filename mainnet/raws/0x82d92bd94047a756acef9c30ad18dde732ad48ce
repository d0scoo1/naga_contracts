{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ninterface ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract FAMEX is ERC20 {\r\n    address private immutable FAME_Global;\r\n    string public constant name = 'famex';\r\n    string public constant symbol = 'FMX';\r\n    uint8 public constant decimals = 18;\r\n    uint256 public override totalSupply = 10**9 * 10**18;\r\n\r\n    mapping(address => uint256) public availableBalanceOf;\r\n    mapping(address => uint256) public lockedBalanceOf;\r\n    mapping(address => mapping(address => uint256)) public override allowance;\r\n\r\n    modifier onlyFAME() {\r\n        require(msg.sender == FAME_Global, \"famex: caller is not approved\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        FAME_Global = msg.sender;\r\n        availableBalanceOf[FAME_Global] += totalSupply;\r\n\r\n        emit Transfer(address(0), FAME_Global, totalSupply);\r\n    }\r\n    \r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return availableBalanceOf[account] + lockedBalanceOf[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 currentAllowance = allowance[sender][msg.sender];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, msg.sender, currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(msg.sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        uint256 senderBalance = availableBalanceOf[msg.sender];\r\n        require(senderBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            availableBalanceOf[msg.sender] = senderBalance - amount;\r\n        }\r\n        totalSupply -= amount;\r\n\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = availableBalanceOf[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            availableBalanceOf[sender] = senderBalance - amount;\r\n        }\r\n        availableBalanceOf[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    uint256 public dDay = 7956915742; // 2222-02-22T22:22:22Z\r\n    struct lock {\r\n        uint256 expiry;\r\n        uint256 amount;\r\n    }\r\n    mapping(address => mapping(uint256 => lock)) public locks; // address to lockId to Lock\r\n    mapping(address => uint256) public minLockId;\r\n    mapping(address => uint256) public maxLockId;\r\n    uint256 private month = 30 days;\r\n\r\n    function transferWithLock(address _to, uint256 _expiry, uint256 _amount) public {\r\n        require(dDay + _expiry > block.timestamp, \"famex: invalid expiration time\");\r\n        require(msg.sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(availableBalanceOf[msg.sender] >= _amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        unchecked {\r\n            availableBalanceOf[msg.sender] = availableBalanceOf[msg.sender] - _amount;\r\n        }\r\n        lockedBalanceOf[_to] += _amount;\r\n        // uint256 lockId = ++maxLockId[_to];\r\n        locks[_to][++maxLockId[_to]] = lock(_expiry, _amount);\r\n\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        \r\n    }\r\n    function lockPreset_Team_Advisor_Partner(address _to, uint256 _amount) external {\r\n        uint256 quarter = _amount / 4;\r\n        transferWithLock(_to, 18 * month, quarter);\r\n        transferWithLock(_to, 21 * month, quarter);\r\n        transferWithLock(_to, 24 * month, quarter);\r\n        transferWithLock(_to, 27 * month, quarter);\r\n    }\r\n    function lockPreset_PrivateInvestor(address _to, uint256 _amount) external {\r\n        uint256 deci = _amount / 10;\r\n        transferWithLock(_to, 0, deci * 2);\r\n        for (uint256 i = 1; i < 9; i++) {\r\n            transferWithLock(_to, i * month, deci);\r\n        }\r\n    }\r\n    function lockPreset_PublicInvestor(address _to, uint256 _amount) external {\r\n        transferWithLock(_to, 0, _amount / 2);\r\n        transferWithLock(_to, month, _amount / 4);\r\n        transferWithLock(_to, 2 * month, _amount / 4);\r\n    }\r\n    function lockPreset_Treasury(address _to, uint256 _amount) external {\r\n        uint256 deci = _amount / 10;\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            transferWithLock(_to, (24 + 3 * i) * month, deci);\r\n        }\r\n    }\r\n    \r\n    function unlockableBalanceOf(address _account) public view returns (uint256) {\r\n        uint256 balance = 0;\r\n        for (uint256 i = minLockId[_account]; i <= maxLockId[_account]; i++) {\r\n            if (dDay + locks[_account][i].expiry < block.timestamp) {\r\n                balance += locks[_account][i].amount;\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n    function unlock(address _account) public {\r\n        uint256 balance = 0;\r\n        for (uint256 i = minLockId[_account]; i <= maxLockId[_account]; i++) {\r\n            if (dDay + locks[_account][i].expiry < block.timestamp) {\r\n                balance += locks[_account][i].amount;\r\n                locks[_account][i].amount = 0;\r\n                if (minLockId[_account] == i) {\r\n                    minLockId[_account]++;\r\n                }\r\n            }\r\n        }\r\n\r\n        lockedBalanceOf[_account] -= balance;\r\n        availableBalanceOf[_account] += balance;\r\n    }\r\n    function unlockBatch(address[] memory _accounts) external {\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            unlock(_accounts[i]);\r\n        }\r\n    }\r\n\r\n    function setDDay(uint256 _dDay) external onlyFAME {\r\n        require(_dDay > block.timestamp, \"famex: D-Day must be in the future\");\r\n        dDay = _dDay;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockPreset_PrivateInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockPreset_PublicInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockPreset_Team_Advisor_Partner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockPreset_Treasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dDay\",\"type\":\"uint256\"}],\"name\":\"setDDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"unlockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unlockableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FAMEX", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca0720c40ec6164610824a763b026bd31cce51970f89d631c25e0df3ee99de1b"}]}