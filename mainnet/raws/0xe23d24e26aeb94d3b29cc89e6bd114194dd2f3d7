{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n*Submitted for verification at Etherscan.io on 2021-08-08\r\n*/\r\n\r\n/**\r\n*Submitted for verification at Etherscan.io on 2021-03-18\r\n*/\r\n\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0-rc.0/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0-rc.0/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n/**\r\n* @dev Returns the amount of tokens in existence.\r\n*/\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n/**\r\n* @dev Returns the amount of tokens owned by `account`.\r\n*/\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Returns the remaining number of tokens that `spender` will be\r\n* allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n* zero by default.\r\n*\r\n* This value changes when {approve} or {transferFrom} are called.\r\n*/\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n* that someone may use both the old and the new allowance by unfortunate\r\n* transaction ordering. One possible solution to mitigate this race\r\n* condition is to first reduce the spender's allowance to 0 and set the\r\n* desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n*\r\n* Emits an {Approval} event.\r\n*/\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n* allowance mechanism. `amount` is then deducted from the caller's\r\n* allowance.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n* another (`to`).\r\n*\r\n* Note that `value` may be zero.\r\n*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/**\r\n* @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n* a call to {approve}. `value` is the new allowance.\r\n*/\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0-rc.0/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n* @dev Implementation of the {IERC20} interface.\r\n*\r\n* This implementation is agnostic to the way tokens are created. This means\r\n* that a supply mechanism has to be added in a derived contract using {_mint}.\r\n* For a generic mechanism see {ERC20PresetMinterPauser}.\r\n*\r\n* TIP: For a detailed writeup see our guide\r\n* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n* to implement supply mechanisms].\r\n*\r\n* We have followed general OpenZeppelin guidelines: functions revert instead\r\n* of returning `false` on failure. This behavior is nonetheless conventional\r\n* and does not conflict with the expectations of ERC20 applications.\r\n*\r\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n* This allows applications to reconstruct the allowance for all accounts just\r\n* by listening to said events. Other implementations of the EIP may not emit\r\n* these events, as it isn't required by the specification.\r\n*\r\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n* functions have been added to mitigate the well-known issues around setting\r\n* allowances. See {IERC20-approve}.\r\n*/\r\ncontract ERC20 is Context, IERC20 {\r\nmapping (address => uint256) private _balances;\r\n\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nuint256 private _totalSupply;\r\n\r\nstring private _name;\r\nstring private _symbol;\r\n\r\n/**\r\n* @dev Sets the values for {name} and {symbol}.\r\n*\r\n* The defaut value of {decimals} is 18. To select a different value for\r\n* {decimals} you should overload it.\r\n*\r\n* All three of these values are immutable: they can only be set once during\r\n* construction.\r\n*/\r\nconstructor (string memory name_, string memory symbol_) {\r\n_name = name_;\r\n_symbol = symbol_;\r\n}\r\n\r\n/**\r\n* @dev Returns the name of the token.\r\n*/\r\nfunction name() public view virtual returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\n/**\r\n* @dev Returns the symbol of the token, usually a shorter version of the\r\n* name.\r\n*/\r\nfunction symbol() public view virtual returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\n/**\r\n* @dev Returns the number of decimals used to get its user representation.\r\n* For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n* be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n*\r\n* Tokens usually opt for a value of 18, imitating the relationship between\r\n* Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n* overloaded;\r\n*\r\n* NOTE: This information is only used for _display_ purposes: it in\r\n* no way affects any of the arithmetic of the contract, including\r\n* {IERC20-balanceOf} and {IERC20-transfer}.\r\n*/\r\nfunction decimals() public view virtual returns (uint8) {\r\nreturn 18;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-totalSupply}.\r\n*/\r\nfunction totalSupply() public view virtual override returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-balanceOf}.\r\n*/\r\nfunction balanceOf(address account) public view virtual override returns (uint256) {\r\nreturn _balances[account];\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-transfer}.\r\n*\r\n* Requirements:\r\n*\r\n* - `recipient` cannot be the zero address.\r\n* - the caller must have a balance of at least `amount`.\r\n*/\r\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-allowance}.\r\n*/\r\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-approve}.\r\n*\r\n* Requirements:\r\n*\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-transferFrom}.\r\n*\r\n* Emits an {Approval} event indicating the updated allowance. This is not\r\n* required by the EIP. See the note at the beginning of {ERC20}.\r\n*\r\n* Requirements:\r\n*\r\n* - `sender` and `recipient` cannot be the zero address.\r\n* - `sender` must have a balance of at least `amount`.\r\n* - the caller must have allowance for ``sender``'s tokens of at least\r\n* `amount`.\r\n*/\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n\r\nuint256 currentAllowance = _allowances[sender][_msgSender()];\r\nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n_approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Atomically increases the allowance granted to `spender` by the caller.\r\n*\r\n* This is an alternative to {approve} that can be used as a mitigation for\r\n* problems described in {IERC20-approve}.\r\n*\r\n* Emits an {Approval} event indicating the updated allowance.\r\n*\r\n* Requirements:\r\n*\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n*\r\n* This is an alternative to {approve} that can be used as a mitigation for\r\n* problems described in {IERC20-approve}.\r\n*\r\n* Emits an {Approval} event indicating the updated allowance.\r\n*\r\n* Requirements:\r\n*\r\n* - `spender` cannot be the zero address.\r\n* - `spender` must have allowance for the caller of at least\r\n* `subtractedValue`.\r\n*/\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\nuint256 currentAllowance = _allowances[_msgSender()][spender];\r\nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Moves tokens `amount` from `sender` to `recipient`.\r\n*\r\n* This is internal function is equivalent to {transfer}, and can be used to\r\n* e.g. implement automatic token fees, slashing mechanisms, etc.\r\n*\r\n* Emits a {Transfer} event.\r\n*\r\n* Requirements:\r\n*\r\n* - `sender` cannot be the zero address.\r\n* - `recipient` cannot be the zero address.\r\n* - `sender` must have a balance of at least `amount`.\r\n*/\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n_beforeTokenTransfer(sender, recipient, amount);\r\n\r\nuint256 senderBalance = _balances[sender];\r\nrequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n_balances[sender] = senderBalance - amount;\r\n_balances[recipient] += amount;\r\n\r\nemit Transfer(sender, recipient, amount);\r\n}\r\n\r\n/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n* the total supply.\r\n*\r\n* Emits a {Transfer} event with `from` set to the zero address.\r\n*\r\n* Requirements:\r\n*\r\n* - `to` cannot be the zero address.\r\n*/\r\nfunction _mint(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n_beforeTokenTransfer(address(0), account, amount);\r\n\r\n_totalSupply += amount;\r\n_balances[account] += amount;\r\nemit Transfer(address(0), account, amount);\r\n}\r\n\r\n/**\r\n* @dev Destroys `amount` tokens from `account`, reducing the\r\n* total supply.\r\n*\r\n* Emits a {Transfer} event with `to` set to the zero address.\r\n*\r\n* Requirements:\r\n*\r\n* - `account` cannot be the zero address.\r\n* - `account` must have at least `amount` tokens.\r\n*/\r\nfunction _burn(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n_beforeTokenTransfer(account, address(0), amount);\r\n\r\nuint256 accountBalance = _balances[account];\r\nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n_balances[account] = accountBalance - amount;\r\n_totalSupply -= amount;\r\n\r\nemit Transfer(account, address(0), amount);\r\n}\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n*\r\n* This internal function is equivalent to `approve`, and can be used to\r\n* e.g. set automatic allowances for certain subsystems, etc.\r\n*\r\n* Emits an {Approval} event.\r\n*\r\n* Requirements:\r\n*\r\n* - `owner` cannot be the zero address.\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\n/**\r\n* @dev Hook that is called before any transfer of tokens. This includes\r\n* minting and burning.\r\n*\r\n* Calling conditions:\r\n*\r\n* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n* will be to transferred to `to`.\r\n* - when `from` is zero, `amount` tokens will be minted for `to`.\r\n* - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n* - `from` and `to` are never both zero.\r\n*\r\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n*/\r\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0-rc.0/contracts/token/ERC20/extensions/ERC20Burnable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n* @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n* tokens and those that they have an allowance for, in a way that can be\r\n* recognized off-chain (via event analysis).\r\n*/\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n/**\r\n* @dev Destroys `amount` tokens from the caller.\r\n*\r\n* See {ERC20-_burn}.\r\n*/\r\nfunction burn(uint256 amount) public virtual {\r\n_burn(_msgSender(), amount);\r\n}\r\n\r\n/**\r\n* @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n* allowance.\r\n*\r\n* See {ERC20-_burn} and {ERC20-allowance}.\r\n*\r\n* Requirements:\r\n*\r\n* - the caller must have allowance for ``accounts``'s tokens of at least\r\n* `amount`.\r\n*/\r\nfunction burnFrom(address account, uint256 amount) public virtual {\r\nuint256 currentAllowance = allowance(account, _msgSender());\r\nrequire(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n_approve(account, _msgSender(), currentAllowance - amount);\r\n_burn(account, amount);\r\n}\r\n}\r\n\r\n// File: browser/FriendsWithBenefits.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n* @dev {ERC20} token, including:\r\n*\r\n* - Preminted initial supply\r\n* - Ability for holders to burn (destroy) their tokens\r\n* - No access control mechanism (for minting/pausing) and hence no governance\r\n*\r\n* This contract uses {ERC20Burnable} to include burn capabilities - head to\r\n* its documentation for details.\r\n*\r\n* _Available since v3.4._\r\n*/\r\ncontract LATechRuns is ERC20Burnable {\r\naddress public dao_admin;\r\n/**\r\n* @dev Mints `initialSupply` amount of token and transfers them to `owner`.\r\n*\r\n* See {ERC20-constructor}.\r\n*/\r\nconstructor(\r\nstring memory name,\r\nstring memory symbol,\r\nuint256 initialSupply,\r\naddress owner\r\n) ERC20(name, symbol) {\r\ndao_admin = owner;\r\n_mint(dao_admin, initialSupply);\r\n}\r\n\r\n// Added to support recovering any token sent to this address to the dao_admin address\r\nfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external{\r\nIERC20(tokenAddress).transfer(dao_admin, tokenAmount);\r\nemit Recovered(tokenAddress, tokenAmount);\r\n}\r\n\r\n/* ========== EVENTS ========== */\r\nevent Recovered(address token, uint256 amount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LATechRuns", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000006604e7a1075c2de632d713753e91884f68c302de000000000000000000000000000000000000000000000000000000000000000c4c4120546563682052756e73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c41545200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://abc2b573413db8a892d36a2e3c42015cd960c5955cc5f3c78520fa9caf9cd383"}]}