{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MXCGenesis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\n// @creator: METACOLLECTIVE aka MXC\\r\\n// @title: MXC : GENESIS\\r\\n// @author: @berkozdemir - berk aka PrincessCamel\\r\\n// @author: @devbhang - bhang\\r\\n// @author: @hazelrah_nft - hazelrah\\r\\n\\r\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n//                                                                                                                                                    //\\r\\n//                                        /\\\\    /\\\\      |@@@@@@@@ @@@@@@@@@     /\\\\                                                                    //\\r\\n//        /METAMETAMETA/    /METAX/      /@@\\\\  /@@\\\\     |@@         |%@|       /@@\\\\                                                                   //\\r\\n//       /METAMETAMETA/    /METAX/      /@@@&\\\\/@@@@\\\\    |@@@@@@@@   |%@|      /@@@@\\\\                                                                  //\\r\\n//              /META/    /METAX/      /@@%@*@/ \\\\@@@\\\\   |@@@@@@@@   |%@|     /@@  @@\\\\                                                                 //\\r\\n//             /META/    /METAX/      /@@@@/\\\\/   \\\\@@@\\\\  |@@         |%@|    /@@@@@@@@\\\\                                                                //\\r\\n//       /METAMETAMETAMETAMETAMET/   /@@@@/       \\\\@@@\\\\ |@@@@@@@@   |%@|   /@@/    \\\\@@\\\\                                                               //\\r\\n//      /META/METAMETAMETAMETAME/                                                                                                                     //\\r\\n//     /META//METAMETAMETAMETAM/        /@@@@@\\\\    /@@@@@@\\\\     |@@|      |@@|      |@@@@@@|   /@@@@@@\\\\   |@@@@@@@@|  |@@| \\\\@@\\\\    /@@/ |@@@@@@@|     //\\r\\n//         /META/    /META/            /@@/  @@\\\\  /@@/  \\\\@@\\\\   |@@|      |@@|      |@@|       /@@/  \\\\@@\\\\     |@@|           \\\\@@\\\\  /@@/  |@@|          //\\r\\n//        /META/    /META/            (@@@        @@      @@  |@@|      |@@|      |@@@@@|    |@@|            |@@|     |@@|   \\\\@@\\\\/@@/   |@@@@@|       //\\r\\n//       /META/    /METAMETAMETA/      \\\\@@\\\\ /@@/  \\\\@@\\\\  /@@/   |@@|      |@@|      |@@|       \\\\@@\\\\   /@@/    |@@|     |@@|    \\\\@@@@/    |@@|          //\\r\\n//      /META/    /METAMETAMETA/        \\\\@@@@@/    \\\\@@@@@@/     |@@@@@@|  |@@@@@@|  |@@@@@@|   \\\\@@@@@@@/     |@@|     |@@|     \\\\@@/     |@@@@@@@|     //\\r\\n//                                                                                                                                                    //\\r\\n//                                                                                                                                                    //\\r\\n//        @@@@@@@       @@@@@@@            /@@@@@\\\\       |@@@@@@@@@@\\\\   |@@@@@@@@@@@@| |@@@@|    /@@@@@@@@\\\\   |@@@@@@@@@@@@   /@@@@@@@@\\\\              //\\r\\n//      @@@@@/@@@@@   @@@@@@@@@@@         /@@@@@@@\\\\      |@@@@@@@@@@@\\\\  |@@@@@@@@@@@@| |@@@@|   /@@@@@@@@@@\\\\  |@@@@@@@@@@@@  /@@@@@@@@@@\\\\             //\\r\\n//      @@@@   @@@@  @@@@     @@@@       /@@@/ \\\\@@@\\\\     |@@@|    @@@@|     |@@@@|     |@@@@|   |@@@@@            |@@@@      |@@@@@                   //\\r\\n//       @@@@@@@@   @@@@       @@@@     /@@@/   \\\\@@@\\\\    |@@@@@@@@@@@/      |@@@@|     |@@@@|        @@@@@@\\\\      |@@@@           @@@@@@\\\\             //\\r\\n//     @@@@@   @@@@@ @@@@     @@@@     /@@@@@@@@@@@@@\\\\   |@@@@%@@@@|        |@@@@|     |@@@@|   /@/   |@@@@@\\\\     |@@@@      /@/   |@@@@@\\\\            //\\r\\n//      @@@@@@@@@@@   @@@@@@@@@@@     /@@@/       \\\\@@@\\\\  |@@@|  \\\\@@@@\\\\      |@@@@|     |@@@@|  |@@@@@@@@@@@@|     |@@@@     |@@@@@@@@@@@@|            //\\r\\n//        @@@@@@@       @@@@@@       /@@@/         \\\\@@@\\\\ |@@@|   \\\\@@@@\\\\     |@@@@|     |@@@@|   \\\\@@@@@@@@@/       |@@@@      \\\\@@@@@@@@@/              //\\r\\n//                                                                                                                                                    //\\r\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\ncontract MXCGenesis is ERC721AQueryable, Ownable, ERC2981 {\\r\\n\\r\\n\\tenum SaleStatus {\\r\\n\\t\\tNoSale,\\r\\n\\t\\tPrivateSale,\\r\\n\\t\\tPreSale,\\r\\n\\t\\tPublicSale,\\r\\n\\t\\tSaleFinished\\r\\n\\t}\\r\\n\\t\\r\\n\\tSaleStatus saleStatus = SaleStatus.NoSale;\\r\\n\\t\\r\\n\\tstring public baseURI;\\r\\n\\r\\n\\tuint256 public constant MAX_MINT_PRIVATE = 81;\\r\\n\\tuint256 public constant MAX_MINT_PRE = 41;\\r\\n\\tuint256 public constant MAX_MINT_PUBLIC = 21;\\r\\n\\t\\r\\n\\tuint256 public price = 0.05 ether;\\r\\n\\t\\r\\n\\tuint256 public maxSupply = 1601;\\r\\n\\t\\r\\n\\taddress public treasuryAddress;\\r\\n\\t\\r\\n\\tbytes32 private _merkleRoot;\\r\\n\\t\\r\\n\\tconstructor() ERC721A(\\\"MXC Genesis\\\", \\\"MXCGNS\\\") {}\\r\\n\\t\\r\\n\\tfunction addCreators(address[] calldata _creators) external onlyOwner {\\r\\n\\t\\trequire(creators.length + _creators.length < MAX_MINT_PRIVATE, \\\"TOO MANY CREATORS\\\");\\r\\n\\t\\t\\r\\n\\t\\tfor (uint i; i < _creators.length; i++) {\\r\\n\\t\\t\\tcreators.push(_creators[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setRoyalty(address _address, uint96 _royalty) external onlyOwner {\\r\\n\\t\\ttreasuryAddress = _address;\\r\\n\\t\\t_setDefaultRoyalty(_address, _royalty);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setPrice(uint _price) external onlyOwner {\\r\\n\\t\\tprice = _price;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction editMaxSupply(uint _maxSupply) external onlyOwner {\\r\\n\\t\\trequire(_maxSupply < maxSupply, \\\"MAX SUPPLY CAN'T EXCEED INITIAL SUPPLY\\\");\\r\\n\\t\\t\\r\\n\\t\\tmaxSupply = _maxSupply;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBaseURI(string calldata _newBaseURI) external onlyOwner {\\r\\n\\t\\tbaseURI = _newBaseURI;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\r\\n\\t\\treturn baseURI;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, ERC2981) returns (bool) {\\r\\n\\t\\treturn super.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n\\t\\r\\n\\t// SALE\\r\\n\\t\\r\\n\\tfunction getSaleStatus() public view returns (SaleStatus) {\\r\\n\\t\\treturn saleStatus;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setSaleStatus(uint256 _saleStatus, bytes32 _root) external onlyOwner {\\r\\n\\t\\tsaleStatus = SaleStatus(_saleStatus);\\r\\n\\t\\t_merkleRoot = _root;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _claimToken(uint _amount, uint _maxMint) internal virtual {\\r\\n\\t\\trequire(tx.origin == msg.sender, \\\"ONLY HUMANS ALLOWED\\\");\\r\\n\\t\\trequire(_amount < _maxMint, \\\"MAX MINT PER TX IS EXCEEDED\\\");\\r\\n\\t\\trequire(_numberMinted(msg.sender) + _amount < MAX_MINT_PRIVATE, \\\"MAX MINT PER WALLET IS EXCEEDED\\\");\\r\\n\\t\\trequire(totalSupply() + _amount < maxSupply, \\\"MAX SUPPLY IS EXCEEDED\\\");\\r\\n\\t\\trequire(msg.value >= price * _amount, \\\"NOT ENOUGH ETHERS SEND\\\");\\r\\n\\t\\t\\r\\n\\t\\t_mint(msg.sender, _amount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction claimTokenPrivate(uint _amount, bytes32[] calldata _merkleProof) external payable {\\r\\n\\t\\trequire(saleStatus == SaleStatus.PrivateSale || saleStatus == SaleStatus.PreSale, \\\"SALE IS NOT OPEN\\\");\\r\\n\\t\\trequire(MerkleProof.verify(_merkleProof, _merkleRoot, keccak256(abi.encodePacked(msg.sender))), \\\"ADDRESS NOT WHITELISTED\\\");\\r\\n\\t\\t\\r\\n\\t\\tuint _maxMint = saleStatus == SaleStatus.PrivateSale ? MAX_MINT_PRIVATE : MAX_MINT_PRE;\\r\\n\\t\\t\\r\\n\\t\\t_claimToken(_amount, _maxMint);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction claimTokenPublic(uint _amount) external payable {\\r\\n\\t\\trequire(saleStatus == SaleStatus.PublicSale, \\\"PUBLIC SALE IS NOT OPEN\\\");\\r\\n\\t\\t\\r\\n\\t\\t_claimToken(_amount, MAX_MINT_PUBLIC);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction mintAdmin(address[] calldata _to, uint _amount) public onlyOwner {\\r\\n\\t\\trequire(saleStatus == SaleStatus.SaleFinished, \\\"CAN'T MINT DURING SALE\\\");\\r\\n\\t\\trequire(totalSupply() + (_amount * _to.length) < maxSupply, \\\"MAX SUPPLY IS EXCEEDED\\\");\\r\\n\\t\\t\\r\\n\\t\\tfor (uint i; i < _to.length; i++) {\\r\\n\\t\\t\\t_mint(_to[i], _amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction withdraw() external onlyOwner {\\r\\n\\t\\trequire(saleStatus == SaleStatus.SaleFinished, \\\"CAN'T WITHDRAW DURING SALE\\\");\\r\\n\\t\\trequire(address(this).balance > 0, \\\"INSUFFICIENT FUNDS\\\");\\r\\n\\t\\t\\r\\n\\t\\tpayable(treasuryAddress).transfer(address(this).balance);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction burn(uint256 _tokenId) public {\\r\\n\\t\\trequire(saleStatus == SaleStatus.SaleFinished, \\\"CAN'T BURN DURING SALE\\\");\\r\\n\\t\\t\\r\\n\\t\\t_burn(_tokenId, true);\\r\\n\\t}\\r\\n\\t\\r\\n}\\r\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/ERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../ERC721A.sol';\\n\\nerror InvalidQueryRange();\\n\\n/**\\n * @title ERC721A Queryable\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *   - `addr` = `address(0)`\\n     *   - `startTimestamp` = `0`\\n     *   - `burned` = `false`\\n     *\\n     * If the `tokenId` is burned:\\n     *   - `addr` = `<Address of owner before token was burned>`\\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\\n     *   - `burned = `true`\\n     *\\n     * Otherwise:\\n     *   - `addr` = `<Address of owner>`\\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\\n     *   - `burned = `false`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _currentIndex) {\\n            return ownership;\\n        }\\n        ownership = _ownerships[tokenId];\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory) {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` < `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _currentIndex;\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, _currentIndex)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Creator: Chiru Labs\\r\\n// Edited by: @berkozdemir && @devbhang\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport '@openzeppelin/contracts/utils/Context.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\r\\n\\r\\nerror ApprovalCallerNotOwnerNorApproved();\\r\\nerror ApprovalQueryForNonexistentToken();\\r\\nerror ApproveToCaller();\\r\\nerror ApprovalToCurrentOwner();\\r\\nerror BalanceQueryForZeroAddress();\\r\\nerror MintToZeroAddress();\\r\\nerror MintZeroQuantity();\\r\\nerror OwnerQueryForNonexistentToken();\\r\\nerror TransferCallerNotOwnerNorApproved();\\r\\nerror TransferFromIncorrectOwner();\\r\\nerror TransferToNonERC721ReceiverImplementer();\\r\\nerror TransferToZeroAddress();\\r\\nerror URIQueryForNonexistentToken();\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\r\\n\\tusing Address for address;\\r\\n\\tusing Strings for uint256;\\r\\n\\t\\r\\n\\t// Compiler will pack this into a single 256bit word.\\r\\n\\tstruct TokenOwnership {\\r\\n\\t\\t// The address of the owner.\\r\\n\\t\\taddress addr;\\r\\n\\t\\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\\r\\n\\t\\tuint64 startTimestamp;\\r\\n\\t\\t// Whether the token has been burned.\\r\\n\\t\\tbool burned;\\r\\n\\t}\\r\\n\\t\\r\\n\\t// Compiler will pack this into a single 256bit word.\\r\\n\\tstruct AddressData {\\r\\n\\t\\t// Realistically, 2**64-1 is more than enough.\\r\\n\\t\\tuint64 balance;\\r\\n\\t\\t// Keeps track of mint count with minimal overhead for tokenomics.\\r\\n\\t\\tuint64 numberMinted;\\r\\n\\t\\t// Keeps track of burn count with minimal overhead for tokenomics.\\r\\n\\t\\tuint64 numberBurned;\\r\\n\\t\\t// For miscellaneous variable(s) pertaining to the address\\r\\n\\t\\t// (e.g. number of whitelist mint slots used).\\r\\n\\t\\t// If there are multiple variables, please pack them into a uint64.\\r\\n\\t\\tuint64 aux;\\r\\n\\t}\\r\\n\\t\\r\\n\\taddress[] public creators;\\r\\n\\t\\r\\n\\t// The tokenId of the next token to be minted.\\r\\n\\tuint256 internal _currentIndex;\\r\\n\\t\\r\\n\\t// The number of tokens burned.\\r\\n\\tuint256 internal _burnCounter;\\r\\n\\t\\r\\n\\t// Token name\\r\\n\\tstring private _name;\\r\\n\\t\\r\\n\\t// Token symbol\\r\\n\\tstring private _symbol;\\r\\n\\t\\r\\n\\t// Mapping from token ID to ownership details\\r\\n\\t// An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\r\\n\\tmapping(uint256 => TokenOwnership) internal _ownerships;\\r\\n\\t\\r\\n\\t// Mapping owner address to address data\\r\\n\\tmapping(address => AddressData) internal _addressData;\\r\\n\\t\\r\\n\\t// Mapping from token ID to approved address\\r\\n\\tmapping(uint256 => address) private _tokenApprovals;\\r\\n\\t\\r\\n\\t// Mapping from owner to operator approvals\\r\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\t\\r\\n\\tconstructor(string memory name_, string memory symbol_) {\\r\\n\\t\\t_name = name_;\\r\\n\\t\\t_symbol = symbol_;\\r\\n\\t\\t_currentIndex = _startTokenId();\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * To change the starting tokenId, please override this function.\\r\\n\\t */\\r\\n\\tfunction _startTokenId() internal view virtual returns (uint256) {\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\r\\n     */\\r\\n\\tfunction totalSupply() public view returns (uint256) {\\r\\n\\t\\t// Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n\\t\\t// more than _currentIndex - _startTokenId() times\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\treturn _currentIndex - _burnCounter - _startTokenId();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * Returns the total amount of tokens minted in the contract.\\r\\n\\t */\\r\\n\\tfunction _totalMinted() internal view returns (uint256) {\\r\\n\\t\\t// Counter underflow is impossible as _currentIndex does not decrement,\\r\\n\\t\\t// and it is initialized to _startTokenId()\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\treturn _currentIndex - _startTokenId();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n\\t\\treturn\\r\\n\\t\\tinterfaceId == type(IERC721).interfaceId ||\\r\\n\\t\\tinterfaceId == type(IERC721Metadata).interfaceId ||\\r\\n\\t\\tsuper.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n\\tfunction balanceOf(address owner) public view override returns (uint256) {\\r\\n\\t\\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n\\t\\treturn uint256(_addressData[owner].balance);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * Returns the number of tokens minted by `owner`.\\r\\n\\t */\\r\\n\\tfunction _numberMinted(address owner) internal view returns (uint256) {\\r\\n\\t\\treturn uint256(_addressData[owner].numberMinted);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n\\t */\\r\\n\\tfunction _numberBurned(address owner) internal view returns (uint256) {\\r\\n\\t\\treturn uint256(_addressData[owner].numberBurned);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n\\t */\\r\\n\\tfunction _getAux(address owner) internal view returns (uint64) {\\r\\n\\t\\treturn _addressData[owner].aux;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n\\t * If there are multiple variables, please pack them into a uint64.\\r\\n\\t */\\r\\n\\tfunction _setAux(address owner, uint64 aux) internal {\\r\\n\\t\\t_addressData[owner].aux = aux;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n\\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n\\t */\\r\\n\\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\r\\n\\t\\tuint256 curr = tokenId;\\r\\n\\t\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (_startTokenId() <= curr && curr < _currentIndex) {\\r\\n\\t\\t\\t\\tTokenOwnership memory ownership = _ownerships[curr];\\r\\n\\t\\t\\t\\tif (!ownership.burned) {\\r\\n\\t\\t\\t\\t\\tif (ownership.addr != address(0)) {\\r\\n\\t\\t\\t\\t\\t\\treturn ownership;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t// Invariant:\\r\\n\\t\\t\\t\\t\\t// There will always be an ownership that has an address and is not burned\\r\\n\\t\\t\\t\\t\\t// before an ownership that does not have an address and is not burned.\\r\\n\\t\\t\\t\\t\\t// Hence, curr will not underflow.\\r\\n\\t\\t\\t\\t\\twhile (true) {\\r\\n\\t\\t\\t\\t\\t\\tcurr--;\\r\\n\\t\\t\\t\\t\\t\\townership = _ownerships[curr];\\r\\n\\t\\t\\t\\t\\t\\tif (ownership.addr != address(0)) {\\r\\n\\t\\t\\t\\t\\t\\t\\treturn ownership;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\trevert OwnerQueryForNonexistentToken();\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n\\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n\\t\\treturn _ownershipOf(tokenId).addr;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n\\tfunction name() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _name;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n\\tfunction symbol() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _symbol;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n\\t\\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\t\\t\\r\\n\\t\\tstring memory baseURI = _baseURI();\\r\\n\\t\\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n\\tfunction _baseURI() internal view virtual returns (string memory) {\\r\\n\\t\\treturn '';\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-approve}.\\r\\n     */\\r\\n\\tfunction approve(address to, uint256 tokenId) public override {\\r\\n\\t\\taddress owner = ERC721A.ownerOf(tokenId);\\r\\n\\t\\tif (to == owner) revert ApprovalToCurrentOwner();\\r\\n\\t\\t\\r\\n\\t\\tif (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\r\\n\\t\\t\\trevert ApprovalCallerNotOwnerNorApproved();\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t_approve(to, tokenId, owner);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n\\tfunction getApproved(uint256 tokenId) public view override returns (address) {\\r\\n\\t\\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\t\\t\\r\\n\\t\\treturn _tokenApprovals[tokenId];\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n\\t\\tif (operator == _msgSender()) revert ApproveToCaller();\\r\\n\\t\\t\\r\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\r\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n\\t\\treturn _operatorApprovals[owner][operator];\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n\\tfunction transferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) public virtual override {\\r\\n\\t\\t_transfer(from, to, tokenId);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n\\tfunction safeTransferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) public virtual override {\\r\\n\\t\\tsafeTransferFrom(from, to, tokenId, '');\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n\\tfunction safeTransferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) public virtual override {\\r\\n\\t\\t_transfer(from, to, tokenId);\\r\\n\\t\\tif (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n\\tfunction _exists(uint256 tokenId) internal view returns (bool) {\\r\\n\\t\\treturn _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Edited to be used for MXC drops.\\r\\n     */\\r\\n\\tfunction _mint(address to, uint256 quantity) internal {\\r\\n\\t\\tuint256 startTokenId = _currentIndex;\\r\\n\\t\\tif (to == address(0)) revert MintToZeroAddress();\\r\\n\\t\\tif (quantity == 0) revert MintZeroQuantity();\\r\\n\\t\\t\\r\\n\\t\\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\t\\t\\r\\n\\t\\t// Overflows are incredibly unrealistic.\\r\\n\\t\\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\r\\n\\t\\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_addressData[to].balance += uint64(quantity);\\r\\n\\t\\t\\t_addressData[to].numberMinted += uint64(quantity);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t_ownerships[startTokenId].addr = to;\\r\\n\\t\\t\\t_ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\t\\t\\r\\n\\t\\t\\tuint256 updatedIndex = startTokenId;\\r\\n\\t\\t\\tuint256 end = updatedIndex + quantity;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tdo {\\r\\n\\t\\t\\t\\tuint256 creatorIndex = updatedIndex % creators.length;\\r\\n\\t\\t\\t\\taddress creator = creators[creatorIndex];\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tif (creator == to) {\\r\\n\\t\\t\\t\\t\\temit Transfer(address(0), creator, updatedIndex++);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\temit Transfer(address(0), creator, updatedIndex);\\r\\n\\t\\t\\t\\t\\temit Transfer(creator, to, updatedIndex++);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\twhile (updatedIndex != end);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t_currentIndex = updatedIndex;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) private {\\r\\n\\t\\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\r\\n\\t\\t\\r\\n\\t\\tif (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\r\\n\\t\\t\\r\\n\\t\\tbool isApprovedOrOwner = (_msgSender() == from ||\\r\\n\\t\\tisApprovedForAll(from, _msgSender()) ||\\r\\n\\t\\tgetApproved(tokenId) == _msgSender());\\r\\n\\t\\t\\r\\n\\t\\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n\\t\\tif (to == address(0)) revert TransferToZeroAddress();\\r\\n\\t\\t\\r\\n\\t\\t_beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\t\\t\\r\\n\\t\\t// Clear approvals from the previous owner\\r\\n\\t\\t_approve(address(0), tokenId, from);\\r\\n\\t\\t\\r\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\r\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\r\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_addressData[from].balance -= 1;\\r\\n\\t\\t\\t_addressData[to].balance += 1;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tTokenOwnership storage currSlot = _ownerships[tokenId];\\r\\n\\t\\t\\tcurrSlot.addr = to;\\r\\n\\t\\t\\tcurrSlot.startTimestamp = uint64(block.timestamp);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n\\t\\t\\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\r\\n\\t\\t\\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\\r\\n\\t\\t\\tif (nextSlot.addr == address(0)) {\\r\\n\\t\\t\\t\\t// This will suffice for checking _exists(nextTokenId),\\r\\n\\t\\t\\t\\t// as a burned slot cannot contain the zero address.\\r\\n\\t\\t\\t\\tif (nextTokenId != _currentIndex) {\\r\\n\\t\\t\\t\\t\\tnextSlot.addr = from;\\r\\n\\t\\t\\t\\t\\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\temit Transfer(from, to, tokenId);\\r\\n\\t\\t_afterTokenTransfers(from, to, tokenId, 1);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev This is equivalent to _burn(tokenId, false)\\r\\n     */\\r\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\r\\n\\t\\t_burn(tokenId, false);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n\\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n\\t\\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\r\\n\\t\\t\\r\\n\\t\\taddress from = prevOwnership.addr;\\r\\n\\t\\t\\r\\n\\t\\tif (approvalCheck) {\\r\\n\\t\\t\\tbool isApprovedOrOwner = (_msgSender() == from ||\\r\\n\\t\\t\\tisApprovedForAll(from, _msgSender()) ||\\r\\n\\t\\t\\tgetApproved(tokenId) == _msgSender());\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t_beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\t\\t\\r\\n\\t\\t// Clear approvals from the previous owner\\r\\n\\t\\t_approve(address(0), tokenId, from);\\r\\n\\t\\t\\r\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\r\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\r\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tAddressData storage addressData = _addressData[from];\\r\\n\\t\\t\\taddressData.balance -= 1;\\r\\n\\t\\t\\taddressData.numberBurned += 1;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// Keep track of who burned the token, and the timestamp of burning.\\r\\n\\t\\t\\tTokenOwnership storage currSlot = _ownerships[tokenId];\\r\\n\\t\\t\\tcurrSlot.addr = from;\\r\\n\\t\\t\\tcurrSlot.startTimestamp = uint64(block.timestamp);\\r\\n\\t\\t\\tcurrSlot.burned = true;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\r\\n\\t\\t\\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\r\\n\\t\\t\\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\\r\\n\\t\\t\\tif (nextSlot.addr == address(0)) {\\r\\n\\t\\t\\t\\t// This will suffice for checking _exists(nextTokenId),\\r\\n\\t\\t\\t\\t// as a burned slot cannot contain the zero address.\\r\\n\\t\\t\\t\\tif (nextTokenId != _currentIndex) {\\r\\n\\t\\t\\t\\t\\tnextSlot.addr = from;\\r\\n\\t\\t\\t\\t\\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\temit Transfer(from, address(0), tokenId);\\r\\n\\t\\t_afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\t\\t\\r\\n\\t\\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_burnCounter++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n\\tfunction _approve(\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\taddress owner\\r\\n\\t) private {\\r\\n\\t\\t_tokenApprovals[tokenId] = to;\\r\\n\\t\\temit Approval(owner, to, tokenId);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n\\tfunction _checkContractOnERC721Received(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) private returns (bool) {\\r\\n\\t\\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n\\t\\t} catch (bytes memory reason) {\\r\\n\\t\\t\\tif (reason.length == 0) {\\r\\n\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n\\tfunction _beforeTokenTransfers(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 startTokenId,\\r\\n\\t\\tuint256 quantity\\r\\n\\t) internal virtual {}\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n\\tfunction _afterTokenTransfers(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 startTokenId,\\r\\n\\t\\tuint256 quantity\\r\\n\\t) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT_PRE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT_PRIVATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_creators\",\"type\":\"address[]\"}],\"name\":\"addCreators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimTokenPrivate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimTokenPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"editMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleStatus\",\"outputs\":[{\"internalType\":\"enum MXCGenesis.SaleStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royalty\",\"type\":\"uint96\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStatus\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MXCGenesis", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}