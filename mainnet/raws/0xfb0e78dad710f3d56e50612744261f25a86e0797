{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/BytesLibrary.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary BytesLibrary {\r\n    function toString(bytes32 value) internal pure returns (string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        bytes memory str = new bytes(64);\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            str[i*2] = alphabet[uint8(value[i] >> 4)];\r\n            str[1+i*2] = alphabet[uint8(value[i] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        bytes32  fullMessage = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n         return ecrecover(fullMessage, v, r, s);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/IWETH.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IWETH{\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/QubeMarket.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OrderBook is Ownable {\r\n\tenum AssetType {\r\n\t\tERC20,\r\n\t\tERC721,\r\n\t\tERC1155\r\n\t}\r\n\r\n\tstruct Asset {\r\n\t\taddress token;\r\n\t\tuint256 tokenId;\r\n\t\tAssetType assetType;\r\n\t}\r\n\r\n\tstruct OrderKey {\r\n\t\t/* who signed the order */\r\n\t\taddress payable owner;\r\n\t\t/* what has owner */\r\n\t\tAsset sellAsset;\r\n\t\t/* what wants owner */\r\n\t\tAsset buyAsset;\r\n\t}\r\n\r\n\tstruct Order {\r\n\t\tOrderKey key;\r\n\t\t/* how much has owner (in wei, or UINT256_MAX if ERC-721) */\r\n\t\tuint256 selling;\r\n\t\t/* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\r\n\t\tuint256 buying;\r\n\t\t/* fee for selling  secoundary sale*/\r\n\t\tuint256 sellerFee;\r\n\t\t/* random numbers*/\r\n\t\tuint256 salt;\r\n\t\t/* expiry time for order*/\r\n\t\tuint256 expiryTime; // for bid auction auction time + bidexpiry\r\n\t\t/* order Type */\r\n\t\tuint256 orderType; // 1.sell , 2.buy, 3.bid\r\n\t}\r\n\r\n\t/* An ECDSA signature. */\r\n\tstruct Sig {\r\n\t\t/* v parameter */\r\n\t\tuint8 v;\r\n\t\t/* r parameter */\r\n\t\tbytes32 r;\r\n\t\t/* s parameter */\r\n\t\tbytes32 s;\r\n\t}\r\n}\r\n\r\n\r\ncontract OrderState is OrderBook {\r\n\tusing BytesLibrary for bytes32;\r\n\r\n\tmapping(bytes32 => bool) public completed; // 1.completed\r\n\r\n\tfunction getCompleted(OrderBook.Order calldata order)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn completed[getCompletedKey(order)];\r\n\t}\r\n\r\n\tfunction setCompleted(OrderBook.Order memory order, bool newCompleted)\r\n\t\tinternal\r\n\t{\r\n\t\tcompleted[getCompletedKey(order)] = newCompleted;\r\n\t}\r\n\r\n\tfunction setCompletedBidOrder(\r\n\t\tOrderBook.Order memory order,\r\n\t\tbool newCompleted,\r\n\t\taddress buyer,\r\n\t\tuint256 buyingAmount\r\n\t) internal {\r\n\t\tcompleted[\r\n\t\t\tgetBidOrderCompletedKey(order, buyer, buyingAmount)\r\n\t\t] = newCompleted;\r\n\t}\r\n\r\n\tfunction getCompletedKey(OrderBook.Order memory order)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn prepareOrderHash(order);\r\n\t}\r\n\r\n\tfunction getBidOrderCompletedKey(\r\n\t\tOrderBook.Order memory order,\r\n\t\taddress buyer,\r\n\t\tuint256 buyingAmount\r\n\t) public pure returns (bytes32) {\r\n\t\treturn prepareBidOrderHash(order, buyer, buyingAmount);\r\n\t}\r\n\r\n\tfunction validateOrderSignature(Order memory order, Sig memory sig)\r\n\t\tinternal\r\n\t\tview\r\n\t{\r\n\t\trequire(completed[getCompletedKey(order)] != true, \"Signature exist\");\r\n\t\tif (sig.v == 0 && sig.r == bytes32(0x0) && sig.s == bytes32(0x0)) {\r\n\t\t\trevert(\"incorrect signature\");\r\n\t\t} else {\r\n\t\t\trequire(\r\n\t\t\t\tprepareOrderHash(order).recover(sig.v, sig.r, sig.s) ==\r\n\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\"Incorrect signature\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateOrderSignatureView(Order memory order, Sig memory sig)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (address)\r\n\t{\r\n\t\trequire(completed[getCompletedKey(order)] != true, \"Signature exist\");\r\n\t\tif (sig.v == 0 && sig.r == bytes32(0x0) && sig.s == bytes32(0x0)) {\r\n\t\t\trevert(\"Incorrect signature\");\r\n\t\t} else {\r\n\t\t\treturn prepareOrderHash(order).recover(sig.v, sig.r, sig.s);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateBidOrderSignature(\r\n\t\tOrder memory order,\r\n\t\tSig memory sig,\r\n\t\taddress bidder,\r\n\t\tuint256 buyingAmount\r\n\t) internal view {\r\n\t\trequire(\r\n\t\t\tcompleted[getBidOrderCompletedKey(order, bidder, buyingAmount)] !=\r\n\t\t\t\ttrue,\r\n\t\t\t\"Signature exist\"\r\n\t\t);\r\n\t\tif (sig.v == 0 && sig.r == bytes32(0x0) && sig.s == bytes32(0x0)) {\r\n\t\t\trevert(\"Incorrect bid signature\");\r\n\t\t} else {\r\n\t\t\trequire(\r\n\t\t\t\tprepareBidOrderHash(order, bidder, buyingAmount).recover(\r\n\t\t\t\t\tsig.v,\r\n\t\t\t\t\tsig.r,\r\n\t\t\t\t\tsig.s\r\n\t\t\t\t) == bidder,\r\n\t\t\t\t\"Incorrect bid signature\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateBidOrderSignatureView(\r\n\t\tOrder memory order,\r\n\t\tSig memory sig,\r\n\t\taddress bidder,\r\n\t\tuint256 buyingAmount\r\n\t) public view returns (address) {\r\n\t\trequire(completed[getCompletedKey(order)] != true, \"Signature exist\");\r\n\t\tif (sig.v == 0 && sig.r == bytes32(0x0) && sig.s == bytes32(0x0)) {\r\n\t\t\trevert(\"Incorrect bid signature\");\r\n\t\t} else {\r\n\t\t\treturn\r\n\t\t\t\tprepareBidOrderHash(order, bidder, buyingAmount).recover(\r\n\t\t\t\t\tsig.v,\r\n\t\t\t\t\tsig.r,\r\n\t\t\t\t\tsig.s\r\n\t\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction prepareOrderHash(OrderBook.Order memory order)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\torder.key.sellAsset.token,\r\n\t\t\t\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\t\t\t\torder.key.sellAsset.assetType,\r\n\t\t\t\t\t\torder.key.buyAsset.token,\r\n\t\t\t\t\t\torder.key.buyAsset.tokenId,\r\n\t\t\t\t\t\torder.key.buyAsset.assetType\r\n\t\t\t\t\t),\r\n\t\t\t\t\torder.selling,\r\n\t\t\t\t\torder.buying,\r\n\t\t\t\t\torder.sellerFee,\r\n\t\t\t\t\torder.salt,\r\n\t\t\t\t\torder.expiryTime,\r\n\t\t\t\t\torder.orderType\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction prepareBidOrderHash(\r\n\t\tOrderBook.Order memory order,\r\n\t\taddress bidder,\r\n\t\tuint256 buyingAmount\r\n\t) public pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tbidder,\r\n\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\torder.key.buyAsset.token,\r\n\t\t\t\t\t\torder.key.buyAsset.tokenId,\r\n\t\t\t\t\t\torder.key.buyAsset.assetType,\r\n\t\t\t\t\t\torder.key.sellAsset.token,\r\n\t\t\t\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\t\t\t\torder.key.sellAsset.assetType\r\n\t\t\t\t\t),\r\n\t\t\t\t\tbuyingAmount,\r\n\t\t\t\t\torder.selling,\r\n\t\t\t\t\torder.sellerFee,\r\n\t\t\t\t\torder.salt,\r\n\t\t\t\t\torder.expiryTime,\r\n\t\t\t\t\torder.orderType\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction prepareBuyerFeeMessage(\r\n\t\tOrder memory order,\r\n\t\tuint256 fee,\r\n\t\taddress royaltyReceipt\r\n\t) public pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\tabi.encodePacked(\r\n\t\t\t\t\t\t\torder.key.sellAsset.token,\r\n\t\t\t\t\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\t\t\t\t\torder.key.buyAsset.token,\r\n\t\t\t\t\t\t\torder.key.buyAsset.tokenId\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\torder.selling,\r\n\t\t\t\t\t\torder.buying,\r\n\t\t\t\t\t\torder.sellerFee,\r\n\t\t\t\t\t\torder.salt,\r\n\t\t\t\t\t\torder.expiryTime,\r\n\t\t\t\t\t\torder.orderType\r\n\t\t\t\t\t),\r\n\t\t\t\t\tfee,\r\n\t\t\t\t\troyaltyReceipt\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\n\r\ninterface IQubeMintableStore {\r\n\tfunction mint(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 id,\r\n\t\tuint256 blockExpiry,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s,\r\n\t\tuint256 supply,\r\n\t\tstring memory uri\r\n\t) external returns (bool);\r\n}\r\n\r\n\r\ncontract TransferSafe {\r\n\tstruct mintParams {\r\n\t\tuint256 blockExpiry;\r\n\t\tuint8 v;\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t\tstring uri;\r\n\t}\r\n\r\n\tfunction erc721safeTransferFrom(\r\n\t\tIERC721 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal {\r\n\t\ttoken.safeTransferFrom(from, to, tokenId);\r\n\t}\r\n\r\n\tfunction erc1155safeTransferFrom(\r\n\t\tIERC1155 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 id,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\ttoken.safeTransferFrom(from, to, id, value, \"0x\");\r\n\t}\r\n\r\n\tfunction erc1155safeMintTransferFrom(\r\n\t\tIQubeMintableStore token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 id,\r\n\t\tuint256 value,\r\n\t\tuint256 blockExpiry,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s,\r\n\t\tstring memory uri\r\n\t) internal {\r\n\t\trequire(\r\n\t\t\ttoken.mint(from, to, id, blockExpiry, v, r, s, value, uri),\r\n\t\t\t\"TransferSafe:erc1155safeMintTransferFrom:: transaction Failed\"\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\ncontract QubeMarket is OrderState, TransferSafe {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress payable public beneficiaryAddress;\r\n\taddress public buyerFeeSigner;\r\n\tuint256 public beneficiaryFee; // platform fee\r\n\tuint256 public royaltyFeeLimit = 10; // 10%\r\n\tIQubeMintableStore private _QubeMintableStore;\r\n\taddress public weth;\r\n\r\n\t// auth token for exchange\r\n\tmapping(address => bool) public allowToken;\r\n\r\n\tevent MatchOrder(\r\n\t\taddress indexed sellToken,\r\n\t\tuint256 indexed sellTokenId,\r\n\t\tuint256 sellValue,\r\n\t\taddress owner,\r\n\t\taddress buyToken,\r\n\t\tuint256 buyTokenId,\r\n\t\tuint256 buyValue,\r\n\t\taddress buyer,\r\n\t\tuint256 orderType\r\n\t);\r\n\tevent Cancel(\r\n\t\taddress indexed sellToken,\r\n\t\tuint256 indexed sellTokenId,\r\n\t\taddress owner,\r\n\t\taddress buyToken,\r\n\t\tuint256 buyTokenId\r\n\t);\r\n\tevent Beneficiary(address newBeneficiary);\r\n\tevent BuyerFeeSigner(address newBuyerFeeSigner);\r\n\tevent BeneficiaryFee(uint256 newbeneficiaryfee);\r\n\tevent RoyaltyFeeLimit(uint256 newRoyaltyFeeLimit);\r\n\tevent AllowToken(address token, bool status);\r\n\tevent SetMintableStore(address newMintableStore);\r\n\r\n\tconstructor(\r\n\t\taddress payable beneficiary,\r\n\t\taddress buyerfeesigner,\r\n\t\tuint256 beneficiaryfee,\r\n\t\taddress wethAddr\r\n\t) public {\r\n\t\tbeneficiaryAddress = beneficiary;\r\n\t\tbuyerFeeSigner = buyerfeesigner;\r\n\t\tbeneficiaryFee = beneficiaryfee;\r\n\t\tweth = wethAddr;\r\n\t}\r\n\r\n\tfunction sell(\r\n\t\tOrder calldata order,\r\n\t\tSig calldata sig,\r\n\t\tSig calldata buyerFeeSig,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress payable royaltyReceipt,\r\n\t\tbool isStore,\r\n\t\tmintParams memory storeParams\r\n\t) external payable {\r\n\t\trequire((block.timestamp <= order.expiryTime), \"Signature expired\");\r\n\t\trequire(order.orderType == 1, \"Invalid order type\");\r\n\t\trequire(order.key.owner != msg.sender, \"Invalid owner\");\r\n\r\n\t\tvalidateOrderSignature(order, sig);\r\n\t\tvalidateBuyerFeeSig(order, royaltyFee, royaltyReceipt, buyerFeeSig);\r\n\r\n\t\ttransferSellFee(order, royaltyReceipt, royaltyFee, msg.sender);\r\n\t\tsetCompleted(order, true);\r\n\t\ttransferToken(order, msg.sender, isStore, storeParams);\r\n\t\temitMatchOrder(order, msg.sender);\r\n\t}\r\n\r\n\tfunction buy(\r\n\t\tOrder calldata order,\r\n\t\tSig calldata sig,\r\n\t\tSig calldata buyerFeeSig,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress payable royaltyReceipt,\r\n\t\tbool isStore,\r\n\t\tmintParams memory storeParams\r\n\t) external {\r\n\t\trequire((block.timestamp <= order.expiryTime), \"Signature expired\");\r\n\t\trequire(order.orderType == 2, \"Invalid order\");\r\n\t\trequire(order.key.owner != msg.sender, \"Invalid owner\");\r\n\r\n\t\tvalidateOrderSignature(order, sig);\r\n\t\tvalidateBuyerFeeSig(order, royaltyFee, royaltyReceipt, buyerFeeSig);\r\n\r\n\t\ttransferBuyFee(order, royaltyReceipt, royaltyFee, msg.sender);\r\n\t\tsetCompleted(order, true);\r\n\t\ttransferToken(order, msg.sender, isStore, storeParams);\r\n\t\temitMatchOrder(order, msg.sender);\r\n\t}\r\n\r\n\tfunction transferToken(\r\n\t\tOrder calldata order,\r\n\t\taddress buyer,\r\n\t\tbool isStore,\r\n\t\tmintParams memory storeParams\r\n\t) internal {\r\n\t\tif (\r\n\t\t\torder.key.sellAsset.assetType == AssetType.ERC721 ||\r\n\t\t\torder.key.buyAsset.assetType == AssetType.ERC721\r\n\t\t) {\r\n\t\t\tif (order.orderType == 1 || order.orderType == 3) {\r\n\t\t\t\tif (!isStore) {\r\n\t\t\t\t\terc721safeTransferFrom(\r\n\t\t\t\t\t\tIERC721(order.key.sellAsset.token),\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.sellAsset.tokenId\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequire(\r\n\t\t\t\t\t\torder.key.sellAsset.token == address(_QubeMintableStore),\r\n\t\t\t\t\t\t\"invalid sell asset\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\terc1155safeMintTransferFrom(\r\n\t\t\t\t\t\tIQubeMintableStore(order.key.sellAsset.token),\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\t\t\t\t1,\r\n\t\t\t\t\t\tstoreParams.blockExpiry,\r\n\t\t\t\t\t\tstoreParams.v,\r\n\t\t\t\t\t\tstoreParams.r,\r\n\t\t\t\t\t\tstoreParams.s,\r\n\t\t\t\t\t\tstoreParams.uri\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t} else if (order.orderType == 2) {\r\n\t\t\t\tif (!isStore) {\r\n\t\t\t\t\terc721safeTransferFrom(\r\n\t\t\t\t\t\tIERC721(order.key.buyAsset.token),\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\torder.key.buyAsset.tokenId\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequire(\r\n\t\t\t\t\t\torder.key.buyAsset.token == address(_QubeMintableStore),\r\n\t\t\t\t\t\t\"invalid buy asset\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\terc1155safeMintTransferFrom(\r\n\t\t\t\t\t\tIQubeMintableStore(order.key.buyAsset.token),\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\torder.key.buyAsset.tokenId,\r\n\t\t\t\t\t\t1,\r\n\t\t\t\t\t\tstoreParams.blockExpiry,\r\n\t\t\t\t\t\tstoreParams.v,\r\n\t\t\t\t\t\tstoreParams.r,\r\n\t\t\t\t\t\tstoreParams.s,\r\n\t\t\t\t\t\tstoreParams.uri\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\torder.key.sellAsset.assetType == AssetType.ERC1155 ||\r\n\t\t\torder.key.buyAsset.assetType == AssetType.ERC1155\r\n\t\t) {\r\n\t\t\tif (order.orderType == 1 || order.orderType == 3) {\r\n\t\t\t\tif (!isStore) {\r\n\t\t\t\t\terc1155safeTransferFrom(\r\n\t\t\t\t\t\tIERC1155(order.key.sellAsset.token),\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\t\t\t\torder.selling\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequire(\r\n\t\t\t\t\t\torder.key.sellAsset.token == address(_QubeMintableStore),\r\n\t\t\t\t\t\t\"invalid sell asset\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\terc1155safeMintTransferFrom(\r\n\t\t\t\t\t\tIQubeMintableStore(order.key.sellAsset.token),\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\t\t\t\torder.selling,\r\n\t\t\t\t\t\tstoreParams.blockExpiry,\r\n\t\t\t\t\t\tstoreParams.v,\r\n\t\t\t\t\t\tstoreParams.r,\r\n\t\t\t\t\t\tstoreParams.s,\r\n\t\t\t\t\t\tstoreParams.uri\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t} else if (order.orderType == 2) {\r\n\t\t\t\tif (!isStore) {\r\n\t\t\t\t\terc1155safeTransferFrom(\r\n\t\t\t\t\t\tIERC1155(order.key.buyAsset.token),\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\torder.key.buyAsset.tokenId,\r\n\t\t\t\t\t\torder.buying\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequire(\r\n\t\t\t\t\t\torder.key.buyAsset.token == address(_QubeMintableStore),\r\n\t\t\t\t\t\t\"invalid buy asset\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\terc1155safeMintTransferFrom(\r\n\t\t\t\t\t\tIQubeMintableStore(order.key.buyAsset.token),\r\n\t\t\t\t\t\tbuyer,\r\n\t\t\t\t\t\torder.key.owner,\r\n\t\t\t\t\t\torder.key.buyAsset.tokenId,\r\n\t\t\t\t\t\torder.buying,\r\n\t\t\t\t\t\tstoreParams.blockExpiry,\r\n\t\t\t\t\t\tstoreParams.v,\r\n\t\t\t\t\t\tstoreParams.r,\r\n\t\t\t\t\t\tstoreParams.s,\r\n\t\t\t\t\t\tstoreParams.uri\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trevert(\"invalid assest \");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction bid(\r\n\t\tOrder calldata order,\r\n\t\tSig calldata sig,\r\n\t\tSig calldata buyerSig,\r\n\t\tSig calldata buyerFeeSig,\r\n\t\taddress buyer,\r\n\t\tuint256 buyingAmount,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress payable royaltyReceipt,\r\n\t\tbool isStore,\r\n\t\tmintParams memory storeParams\r\n\t) external {\r\n\t\trequire((block.timestamp <= order.expiryTime), \"Signature expired\");\r\n\t\trequire(buyingAmount >= order.buying, \"BuyingAmount invalid\");\r\n\r\n\t\trequire(order.orderType == 3, \"Invalid order\");\r\n\t\trequire(order.key.owner == msg.sender, \"Not owner\");\r\n\r\n\t\tvalidateOrderSignature(order, sig);\r\n\t\tvalidateBidOrderSignature(order, buyerSig, buyer, buyingAmount);\r\n\t\tvalidateBuyerFeeSig(order, royaltyFee, royaltyReceipt, buyerFeeSig);\r\n\r\n\t\tsetCompleted(order, true);\r\n\t\tsetCompletedBidOrder(order, true, buyer, buyingAmount);\r\n\r\n\t\ttransferBidFee(\r\n\t\t\torder.key.buyAsset.token,\r\n\t\t\torder.key.owner,\r\n\t\t\tbuyingAmount,\r\n\t\t\troyaltyReceipt,\r\n\t\t\troyaltyFee,\r\n\t\t\tbuyer\r\n\t\t);\r\n\t\ttransferToken(order, buyer, isStore, storeParams);\r\n\t\temitMatchOrder(order, buyer);\r\n\t}\r\n\r\n\tfunction transferSellFee(\r\n\t\tOrder calldata order,\r\n\t\taddress payable royaltyReceipt,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress buyer\r\n\t) internal {\r\n\t\tif (order.key.buyAsset.token == address(0x00)) {\r\n\t\t\trequire(msg.value == order.buying, \"msg.value is invalid\");\r\n\t\t\ttransferEthFee(\r\n\t\t\t\torder.buying,\r\n\t\t\t\torder.key.owner,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t} else if (order.key.buyAsset.token == weth) {\r\n\t\t\ttransferWethFee(\r\n\t\t\t\torder.buying,\r\n\t\t\t\torder.key.owner,\r\n\t\t\t\tbuyer,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\ttransferErc20Fee(\r\n\t\t\t\torder.key.buyAsset.token,\r\n\t\t\t\torder.buying,\r\n\t\t\t\torder.key.owner,\r\n\t\t\t\tbuyer,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferBuyFee(\r\n\t\tOrder calldata order,\r\n\t\taddress payable royaltyReceipt,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress buyer\r\n\t) internal {\r\n\t\tif (order.key.sellAsset.token == weth) {\r\n\t\t\ttransferWethFee(\r\n\t\t\t\torder.selling,\r\n\t\t\t\tbuyer,\r\n\t\t\t\torder.key.owner,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\ttransferErc20Fee(\r\n\t\t\t\torder.key.sellAsset.token,\r\n\t\t\t\torder.selling,\r\n\t\t\t\tbuyer,\r\n\t\t\t\torder.key.owner,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferBidFee(\r\n\t\taddress assest,\r\n\t\taddress payable seller,\r\n\t\tuint256 buyingAmount,\r\n\t\taddress payable royaltyReceipt,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress buyer\r\n\t) internal {\r\n\t\tif (assest == weth) {\r\n\t\t\ttransferWethFee(\r\n\t\t\t\tbuyingAmount,\r\n\t\t\t\tseller,\r\n\t\t\t\tbuyer,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\ttransferErc20Fee(\r\n\t\t\t\tassest,\r\n\t\t\t\tbuyingAmount,\r\n\t\t\t\tseller,\r\n\t\t\t\tbuyer,\r\n\t\t\t\troyaltyFee,\r\n\t\t\t\troyaltyReceipt\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferEthFee(\r\n\t\tuint256 amount,\r\n\t\taddress payable _seller,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress payable royaltyReceipt\r\n\t) internal {\r\n\t\t(\r\n\t\t\tuint256 protocolfee,\r\n\t\t\tuint256 secoundaryFee,\r\n\t\t\tuint256 remaining\r\n\t\t) = transferFeeView(amount, royaltyFee);\r\n\t\tif (protocolfee > 0) {\r\n\t\t\t(beneficiaryAddress).transfer(protocolfee);\r\n\t\t}\r\n\t\tif ((secoundaryFee > 0) && (royaltyReceipt != address(0x00))) {\r\n\t\t\troyaltyReceipt.transfer(secoundaryFee);\r\n\t\t}\r\n\t\tif (remaining > 0) {\r\n\t\t\t_seller.transfer(remaining);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferWethFee(\r\n\t\tuint256 amount,\r\n\t\taddress _seller,\r\n\t\taddress buyer,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress royaltyReceipt\r\n\t) internal {\r\n\t\t(\r\n\t\t\tuint256 protocolfee,\r\n\t\t\tuint256 secoundaryFee,\r\n\t\t\tuint256 remaining\r\n\t\t) = transferFeeView(amount, royaltyFee);\r\n\t\tif (protocolfee > 0) {\r\n\t\t\trequire(\r\n\t\t\t\tIWETH(weth).transferFrom(\r\n\t\t\t\t\tbuyer,\r\n\t\t\t\t\tbeneficiaryAddress,\r\n\t\t\t\t\tprotocolfee\r\n\t\t\t\t),\r\n\t\t\t\t\"Failed protocol fee transfer\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tif ((secoundaryFee > 0) && (royaltyReceipt != address(0x00))) {\r\n\t\t\trequire(\r\n\t\t\t\tIWETH(weth).transferFrom(buyer, royaltyReceipt, secoundaryFee),\r\n\t\t\t\t\"Failed royalty fee transfer\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (remaining > 0) {\r\n\t\t\trequire(\r\n\t\t\t\tIWETH(weth).transferFrom(buyer, _seller, remaining),\r\n\t\t\t\t\"Failed transfer\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferErc20Fee(\r\n\t\taddress token,\r\n\t\tuint256 amount,\r\n\t\taddress _seller,\r\n\t\taddress buyer,\r\n\t\tuint256 royaltyFee,\r\n\t\taddress royaltyReceipt\r\n\t) internal {\r\n\t\trequire(allowToken[token], \"Not authorized token\");\r\n\r\n\t\t(\r\n\t\t\tuint256 protocolfee,\r\n\t\t\tuint256 secoundaryFee,\r\n\t\t\tuint256 remaining\r\n\t\t) = transferFeeView(amount, royaltyFee);\r\n\t\tif (protocolfee > 0) {\r\n\t\t\trequire(\r\n\t\t\t\tIERC20(token).transferFrom(\r\n\t\t\t\t\tbuyer,\r\n\t\t\t\t\tbeneficiaryAddress,\r\n\t\t\t\t\tprotocolfee\r\n\t\t\t\t),\r\n\t\t\t\t\"Failed protocol fee transfer\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tif ((secoundaryFee > 0) && (royaltyReceipt != address(0x00))) {\r\n\t\t\trequire(\r\n\t\t\t\tIERC20(token).transferFrom(\r\n\t\t\t\t\tbuyer,\r\n\t\t\t\t\troyaltyReceipt,\r\n\t\t\t\t\tsecoundaryFee\r\n\t\t\t\t),\r\n\t\t\t\t\"Failed royalty fee transfer\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (remaining > 0) {\r\n\t\t\trequire(\r\n\t\t\t\tIERC20(token).transferFrom(buyer, _seller, remaining),\r\n\t\t\t\t\"Failed transfer\"\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferFeeView(uint256 amount, uint256 royaltyPcent)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tuint256 protocolFee = (amount.mul(beneficiaryFee)).div(1000);\r\n\t\tuint256 secoundaryFee;\r\n\t\tif (royaltyPcent > royaltyFeeLimit) {\r\n\t\t\tsecoundaryFee = (amount.mul(royaltyFeeLimit)).div(1000);\r\n\t\t} else {\r\n\t\t\tsecoundaryFee = (amount.mul(royaltyPcent)).div(1000);\r\n\t\t}\r\n\r\n\t\tuint256 remaining = amount.sub(protocolFee.add(secoundaryFee));\r\n\r\n\t\treturn (protocolFee, secoundaryFee, remaining);\r\n\t}\r\n\r\n\tfunction emitMatchOrder(Order memory order, address buyer) internal {\r\n\t\temit MatchOrder(\r\n\t\t\torder.key.sellAsset.token,\r\n\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\torder.selling,\r\n\t\t\torder.key.owner,\r\n\t\t\torder.key.buyAsset.token,\r\n\t\t\torder.key.buyAsset.tokenId,\r\n\t\t\torder.buying,\r\n\t\t\tbuyer,\r\n\t\t\torder.orderType\r\n\t\t);\r\n\t}\r\n\r\n\tfunction cancel(Order calldata order) external {\r\n\t\trequire(order.key.owner == msg.sender, \"Not an owner\");\r\n\t\tsetCompleted(order, true);\r\n\t\temit Cancel(\r\n\t\t\torder.key.sellAsset.token,\r\n\t\t\torder.key.sellAsset.tokenId,\r\n\t\t\tmsg.sender,\r\n\t\t\torder.key.buyAsset.token,\r\n\t\t\torder.key.buyAsset.tokenId\r\n\t\t);\r\n\t}\r\n\r\n\tfunction validateBuyerFeeSig(\r\n\t\tOrder memory order,\r\n\t\tuint256 buyerFee,\r\n\t\taddress royaltyReceipt,\r\n\t\tSig memory sig\r\n\t) internal view {\r\n\t\trequire(\r\n\t\t\tprepareBuyerFeeMessage(order, buyerFee, royaltyReceipt).recover(\r\n\t\t\t\tsig.v,\r\n\t\t\t\tsig.r,\r\n\t\t\t\tsig.s\r\n\t\t\t) == buyerFeeSigner,\r\n\t\t\t\"Incorrect buyer fee signature\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction validateBuyerFeeSigView(\r\n\t\tOrder memory order,\r\n\t\tuint256 buyerFee,\r\n\t\taddress royaltyReceipt,\r\n\t\tSig memory sig\r\n\t) public pure returns (address) {\r\n\t\treturn\r\n\t\t\tprepareBuyerFeeMessage(order, buyerFee, royaltyReceipt).recover(\r\n\t\t\t\tsig.v,\r\n\t\t\t\tsig.r,\r\n\t\t\t\tsig.s\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction toEthSignedMessageHash(bytes32 hash, Sig memory sig)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns (address signer)\r\n\t{\r\n\t\tsigner = hash.recover(sig.v, sig.r, sig.s);\r\n\t}\r\n\r\n\tfunction setBeneficiary(address payable newBeneficiary) external onlyOwner {\r\n\t\trequire(newBeneficiary != address(0x00), \"Zero address\");\r\n\t\tbeneficiaryAddress = newBeneficiary;\r\n\t\temit Beneficiary(newBeneficiary);\r\n\t}\r\n\r\n\tfunction setBuyerFeeSigner(address newBuyerFeeSigner) external onlyOwner {\r\n\t\trequire(newBuyerFeeSigner != address(0x00), \"Zero address\");\r\n\t\tbuyerFeeSigner = newBuyerFeeSigner;\r\n\t\temit BuyerFeeSigner(newBuyerFeeSigner);\r\n\t}\r\n\r\n\tfunction setBeneficiaryFee(uint256 newbeneficiaryfee) external onlyOwner {\r\n\t\tbeneficiaryFee = newbeneficiaryfee;\r\n\t\temit BeneficiaryFee(newbeneficiaryfee);\r\n\t}\r\n\r\n\tfunction setRoyaltyFeeLimit(uint256 newRoyaltyFeeLimit) external onlyOwner {\r\n\t\troyaltyFeeLimit = newRoyaltyFeeLimit;\r\n\t\temit RoyaltyFeeLimit(newRoyaltyFeeLimit);\r\n\t}\r\n\r\n\tfunction setTokenStatus(address token, bool status) external onlyOwner {\r\n\t\trequire(token != address(0x00), \"Zero address\");\r\n\t\tallowToken[token] = status;\r\n\t\temit AllowToken(token, status);\r\n\t}\r\n\r\n\tfunction setMintableStore(address newMintableStore) external onlyOwner {\r\n\t\trequire(newMintableStore != address(0x00), \"Zero address\");\r\n\t\t_QubeMintableStore = IQubeMintableStore(newMintableStore);\r\n\t\temit SetMintableStore(newMintableStore);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Rescues random funds stuck that the contract can't handle.\r\n\t * @param _token address of the token to rescue.\r\n\t */\r\n\tfunction inCaseTokensGetStuck(address _token) external onlyOwner {\r\n\t\tif (_token != address(0x000)) {\r\n\t\t\tuint256 amount = IERC20(_token).balanceOf(address(this));\r\n\t\t\tIERC20(_token).transfer(msg.sender, amount);\r\n\t\t} else {\r\n\t\t\t(msg.sender).transfer(address(this).balance);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction QubeMintableStore() external view returns (address) {\r\n\t\treturn address(_QubeMintableStore);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyerfeesigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"beneficiaryfee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wethAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AllowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"Beneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newbeneficiaryfee\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBuyerFeeSigner\",\"type\":\"address\"}],\"name\":\"BuyerFeeSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"name\":\"MatchOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMintableStore\",\"type\":\"address\"}],\"name\":\"SetMintableStore\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"QubeMintableStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"buyerSig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"buyerFeeSig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"royaltyReceipt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStore\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct TransferSafe.mintParams\",\"name\":\"storeParams\",\"type\":\"tuple\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"buyerFeeSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"royaltyReceipt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStore\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct TransferSafe.mintParams\",\"name\":\"storeParams\",\"type\":\"tuple\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerFeeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyingAmount\",\"type\":\"uint256\"}],\"name\":\"getBidOrderCompletedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getCompletedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyingAmount\",\"type\":\"uint256\"}],\"name\":\"prepareBidOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyReceipt\",\"type\":\"address\"}],\"name\":\"prepareBuyerFeeMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"buyerFeeSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"royaltyReceipt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStore\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct TransferSafe.mintParams\",\"name\":\"storeParams\",\"type\":\"tuple\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newbeneficiaryfee\",\"type\":\"uint256\"}],\"name\":\"setBeneficiaryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyerFeeSigner\",\"type\":\"address\"}],\"name\":\"setBuyerFeeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMintableStore\",\"type\":\"address\"}],\"name\":\"setMintableStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRoyaltyFeeLimit\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFeeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"toEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPcent\",\"type\":\"uint256\"}],\"name\":\"transferFeeView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyingAmount\",\"type\":\"uint256\"}],\"name\":\"validateBidOrderSignatureView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyReceipt\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"validateBuyerFeeSigView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum OrderBook.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderBook.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct OrderBook.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderBook.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderBook.Sig\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"validateOrderSignatureView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "QubeMarket", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ac7a26260c3b264db4f609cf5053fc03fe92c93e0000000000000000000000007bfe009dccd48fb4d254d3ca892816d50117918b000000000000000000000000000000000000000000000000000000000000001900000000000000000000000023c50078507cc402a45cf0f76cfdec1ca1f5a317", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://873a24aabd5e0055b469d43b231a260f4092e698bda20afe96a2abe7b8899f59"}]}