{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ManagedIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"./interfaces/IManagedIndexFactory.sol\\\";\\n\\nimport \\\"./ManagedIndex.sol\\\";\\nimport \\\"./BaseIndexFactory.sol\\\";\\n\\n/// @title Managed index factory\\n/// @notice Contains logic for managed index creation\\ncontract ManagedIndexFactory is IManagedIndexFactory, BaseIndexFactory {\\n    using ERC165Checker for address;\\n\\n    constructor(\\n        address _registry,\\n        address _vTokenFactory,\\n        address _reweightingLogic,\\n        uint16 _defaultMintingFeeInBP,\\n        uint16 _defaultBurningFeeInBP,\\n        uint _defaultAUMScaledPerSecondsRate\\n    )\\n        BaseIndexFactory(\\n            _registry,\\n            _vTokenFactory,\\n            _reweightingLogic,\\n            _defaultMintingFeeInBP,\\n            _defaultBurningFeeInBP,\\n            _defaultAUMScaledPerSecondsRate\\n        )\\n    {\\n        require(\\n            _reweightingLogic.supportsInterface(type(IManagedIndexReweightingLogic).interfaceId),\\n            \\\"ManagedIndexFactory: INTERFACE\\\"\\n        );\\n    }\\n\\n    /// @inheritdoc IIndexFactory\\n    function setReweightingLogic(address _reweightingLogic) external override onlyRole(INDEX_MANAGER_ROLE) {\\n        require(\\n            _reweightingLogic.supportsInterface(type(IManagedIndexReweightingLogic).interfaceId),\\n            \\\"ManagedIndexFactory: INTERFACE\\\"\\n        );\\n\\n        reweightingLogic = _reweightingLogic;\\n    }\\n\\n    /// @inheritdoc IManagedIndexFactory\\n    function createIndex(\\n        address[] calldata _assets,\\n        uint8[] calldata _weights,\\n        NameDetails calldata _nameDetails\\n    ) external override onlyRole(INDEX_CREATOR_ROLE) returns (address index) {\\n        uint assetsCount = _assets.length;\\n        require(assetsCount > 1 && assetsCount == _weights.length, \\\"ManagedIndexFactory: LENGTH\\\");\\n        require(assetsCount <= IIndexRegistry(registry).maxComponents(), \\\"ManagedIndexFactory: COMPONENTS\\\");\\n\\n        uint _totalWeight;\\n\\n        for (uint i; i < assetsCount; ) {\\n            address asset = _assets[i];\\n            if (i != 0) {\\n                // makes sure that there are no duplicate assets\\n                require(_assets[i - 1] < asset, \\\"ManagedIndexFactory: SORT\\\");\\n            }\\n\\n            uint8 weight = _weights[i];\\n            require(weight != 0, \\\"ManagedIndexFactory: INVALID\\\");\\n\\n            require(IAccessControl(registry).hasRole(ASSET_ROLE, asset), \\\"ManagedIndexFactory: INVALID\\\");\\n\\n            _totalWeight += weight;\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        require(_totalWeight == IndexLibrary.MAX_WEIGHT, \\\"ManagedIndexFactory: MAX\\\");\\n\\n        bytes32 salt = keccak256(abi.encodePacked(_nameDetails.name, _nameDetails.symbol));\\n        index = Create2.computeAddress(salt, keccak256(type(ManagedIndex).creationCode));\\n        IIndexRegistry(registry).registerIndex(index, _nameDetails);\\n        Create2.deploy(0, salt, type(ManagedIndex).creationCode);\\n\\n        IFeePool.MintBurnInfo[] memory mintInfo = new IFeePool.MintBurnInfo[](1);\\n        mintInfo[0] = IFeePool.MintBurnInfo(index, BP.DECIMAL_FACTOR);\\n\\n        IFeePool(IIndexRegistry(registry).feePool()).initializeIndex(\\n            index,\\n            defaultMintingFeeInBP,\\n            defaultBurningFeeInBP,\\n            defaultAUMScaledPerSecondsRate,\\n            mintInfo\\n        );\\n\\n        ManagedIndex(index).initialize(_assets, _weights);\\n\\n        emit ManagedIndexCreated(index, _assets, _weights);\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IManagedIndexFactory).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagedIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexFactory.sol\\\";\\n\\n/// @title Managed index factory interface\\n/// @notice Provides method for index creation\\ninterface IManagedIndexFactory is IIndexFactory {\\n    event ManagedIndexCreated(address index, address[] _assets, uint8[] _weights);\\n\\n    /// @notice Create managed index with assets and their weights\\n    /// @param _assets Assets list for the index\\n    /// @param _weights List of assets corresponding weights. Assets total weight should be equal to 255\\n    /// @param _nameDetails Name details data (name and symbol) to use for the created index\\n    function createIndex(\\n        address[] calldata _assets,\\n        uint8[] calldata _weights,\\n        NameDetails calldata _nameDetails\\n    ) external returns (address index);\\n}\\n\"\r\n    },\r\n    \"contracts/ManagedIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IManagedIndex.sol\\\";\\nimport \\\"./interfaces/IManagedIndexFactory.sol\\\";\\nimport \\\"./interfaces/IManagedIndexReweightingLogic.sol\\\";\\n\\nimport \\\"./BaseIndex.sol\\\";\\n\\n/// @title Managed index\\n/// @notice Contains initialization and reweighting logic\\ncontract ManagedIndex is IManagedIndex, BaseIndex {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Role for index reweighting\\n    bytes32 internal immutable REWEIGH_INDEX_ROLE;\\n\\n    constructor() BaseIndex(msg.sender) {\\n        REWEIGH_INDEX_ROLE = keccak256(abi.encodePacked(\\\"REWEIGHT_PERMISSION\\\", address(this)));\\n    }\\n\\n    /// @notice Index initialization with assets and their weights\\n    /// @param _assets Assets list for the index\\n    /// @param _weights List of assets corresponding weights\\n    /// @dev Method is called by factory contract only\\n    function initialize(address[] calldata _assets, uint8[] calldata _weights) external {\\n        require(msg.sender == factory, \\\"ManagedIndex: FORBIDDEN\\\");\\n\\n        uint assetsCount = _assets.length;\\n        for (uint i; i < assetsCount; ) {\\n            address asset = _assets[i];\\n            uint8 weight = _weights[i];\\n\\n            weightOf[asset] = weight;\\n            assets.add(asset);\\n\\n            emit UpdateAnatomy(asset, weight);\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IManagedIndex\\n    /// @dev Assets total weight should be equal to 255\\n    function reweight(address[] calldata _updatedAssets, uint8[] calldata _updatedWeights) external override {\\n        require(\\n            IAccessControl(registry).hasRole(INDEX_MANAGER_ROLE, msg.sender) ||\\n                IAccessControl(registry).hasRole(REWEIGH_INDEX_ROLE, msg.sender),\\n            \\\"ManagedIndex: FORBIDDEN\\\"\\n        );\\n\\n        (bool success, bytes memory data) = IManagedIndexFactory(factory).reweightingLogic().delegatecall(\\n            abi.encodeWithSelector(IManagedIndexReweightingLogic.reweight.selector, _updatedAssets, _updatedWeights)\\n        );\\n        if (!success) {\\n            if (data.length == 0) {\\n                revert(\\\"ManagedIndex: REWEIGH_FAILED\\\");\\n            } else {\\n                assembly {\\n                    revert(add(32, data), mload(data))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IManagedIndex).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BaseIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"./libraries/BP.sol\\\";\\nimport \\\"./libraries/AUMCalculationLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IIndexFactory.sol\\\";\\nimport \\\"./interfaces/IIndexRegistry.sol\\\";\\nimport \\\"./interfaces/IvTokenFactory.sol\\\";\\n\\n/// @title Base index factory\\n/// @notice Contains logic for initial fee management for indexes which will be created by this factory\\n/// @dev Specified fee is minted to factory address and could be withdrawn through withdrawToFeePool method\\nabstract contract BaseIndexFactory is IIndexFactory, ERC165 {\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n\\n    /// @notice 10% in base point format\\n    uint public constant MAX_FEE_IN_BP = 1000;\\n\\n    /// @notice 10% in AUM Scaled units\\n    uint public constant MAX_AUM_FEE = 1000000003340960040392850629;\\n\\n    /// @notice Role allows configure index related data/components\\n    bytes32 internal immutable INDEX_MANAGER_ROLE;\\n    /// @notice Role allows configure fee related data/components\\n    bytes32 internal immutable FEE_MANAGER_ROLE;\\n    /// @notice Asset role\\n    bytes32 internal immutable ASSET_ROLE;\\n    /// @notice Role allows index creation\\n    bytes32 internal immutable INDEX_CREATOR_ROLE;\\n\\n    /// @inheritdoc IIndexFactory\\n    uint public override defaultAUMScaledPerSecondsRate;\\n    /// @inheritdoc IIndexFactory\\n    uint16 public override defaultMintingFeeInBP;\\n    /// @inheritdoc IIndexFactory\\n    uint16 public override defaultBurningFeeInBP;\\n\\n    /// @inheritdoc IIndexFactory\\n    address public override reweightingLogic;\\n    /// @inheritdoc IIndexFactory\\n    address public immutable override registry;\\n    /// @inheritdoc IIndexFactory\\n    address public immutable override vTokenFactory;\\n\\n    /// @notice Checks if provided value is lower than 10% in base point format\\n    modifier isValidFee(uint16 _value) {\\n        require(_value <= MAX_FEE_IN_BP, \\\"IndexFactory: INVALID\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if msg.sender has administrator's permissions\\n    modifier onlyRole(bytes32 _role) {\\n        require(IAccessControl(registry).hasRole(_role, msg.sender), \\\"IndexFactory: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _registry,\\n        address _vTokenFactory,\\n        address _reweightingLogic,\\n        uint16 _defaultMintingFeeInBP,\\n        uint16 _defaultBurningFeeInBP,\\n        uint _defaultAUMScaledPerSecondsRate\\n    ) {\\n        require(\\n            _defaultMintingFeeInBP <= MAX_FEE_IN_BP &&\\n                _defaultBurningFeeInBP <= MAX_FEE_IN_BP &&\\n                _defaultAUMScaledPerSecondsRate <= MAX_AUM_FEE &&\\n                _defaultAUMScaledPerSecondsRate >= AUMCalculationLibrary.RATE_SCALE_BASE,\\n            \\\"IndexFactory: INVALID\\\"\\n        );\\n\\n        bytes4[] memory interfaceIds = new bytes4[](2);\\n        interfaceIds[0] = type(IAccessControl).interfaceId;\\n        interfaceIds[1] = type(IIndexRegistry).interfaceId;\\n        require(\\n            _vTokenFactory.supportsInterface(type(IvTokenFactory).interfaceId) &&\\n                _registry.supportsAllInterfaces(interfaceIds),\\n            \\\"IndexFactory: INTERFACE\\\"\\n        );\\n\\n        INDEX_MANAGER_ROLE = keccak256(\\\"INDEX_MANAGER_ROLE\\\");\\n        FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n        ASSET_ROLE = keccak256(\\\"ASSET_ROLE\\\");\\n        INDEX_CREATOR_ROLE = keccak256(\\\"INDEX_CREATOR_ROLE\\\");\\n\\n        registry = _registry;\\n        vTokenFactory = _vTokenFactory;\\n        defaultMintingFeeInBP = _defaultMintingFeeInBP;\\n        defaultBurningFeeInBP = _defaultBurningFeeInBP;\\n        defaultAUMScaledPerSecondsRate = _defaultAUMScaledPerSecondsRate;\\n        reweightingLogic = _reweightingLogic;\\n\\n        emit SetVTokenFactory(_vTokenFactory);\\n    }\\n\\n    /// @inheritdoc IIndexFactory\\n    function setDefaultMintingFeeInBP(uint16 _mintingFeeInBP)\\n        external\\n        override\\n        onlyRole(FEE_MANAGER_ROLE)\\n        isValidFee(_mintingFeeInBP)\\n    {\\n        defaultMintingFeeInBP = _mintingFeeInBP;\\n        emit SetDefaultMintingFeeInBP(msg.sender, _mintingFeeInBP);\\n    }\\n\\n    /// @inheritdoc IIndexFactory\\n    function setDefaultBurningFeeInBP(uint16 _burningFeeInBP)\\n        external\\n        override\\n        onlyRole(FEE_MANAGER_ROLE)\\n        isValidFee(_burningFeeInBP)\\n    {\\n        defaultBurningFeeInBP = _burningFeeInBP;\\n        emit SetDefaultBurningFeeInBP(msg.sender, _burningFeeInBP);\\n    }\\n\\n    /// @inheritdoc IIndexFactory\\n    function setDefaultAUMScaledPerSecondsRate(uint _AUMScaledPerSecondsRate)\\n        external\\n        override\\n        onlyRole(FEE_MANAGER_ROLE)\\n    {\\n        require(\\n            _AUMScaledPerSecondsRate <= MAX_AUM_FEE &&\\n                _AUMScaledPerSecondsRate >= AUMCalculationLibrary.RATE_SCALE_BASE,\\n            \\\"IndexFactory: INVALID\\\"\\n        );\\n\\n        defaultAUMScaledPerSecondsRate = _AUMScaledPerSecondsRate;\\n        emit SetDefaultAUMScaledPerSecondsRate(msg.sender, _AUMScaledPerSecondsRate);\\n    }\\n\\n    /// @inheritdoc IIndexFactory\\n    function withdrawToFeePool(address _index) external override {\\n        require(msg.sender == IIndexRegistry(registry).feePool(), \\\"IndexFactory: FORBIDDEN\\\");\\n\\n        uint amount = IERC20(_index).balanceOf(address(this));\\n        if (amount != 0) {\\n            IERC20(_index).safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IIndexFactory).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index factory interface\\n/// @notice Contains logic for initial fee management for indexes which will be created by this factory\\ninterface IIndexFactory {\\n    struct NameDetails {\\n        string name;\\n        string symbol;\\n    }\\n\\n    event SetVTokenFactory(address vTokenFactory);\\n    event SetDefaultMintingFeeInBP(address indexed account, uint16 mintingFeeInBP);\\n    event SetDefaultBurningFeeInBP(address indexed account, uint16 burningFeeInBP);\\n    event SetDefaultAUMScaledPerSecondsRate(address indexed account, uint AUMScaledPerSecondsRate);\\n\\n    /// @notice Sets default index minting fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setDefaultMintingFeeInBP(uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets default index burning fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _burningFeeInBP New burning fee value\\n    function setDefaultBurningFeeInBP(uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets reweighting logic address\\n    /// @param _reweightingLogic Reweighting logic address\\n    function setReweightingLogic(address _reweightingLogic) external;\\n\\n    /// @notice Sets default AUM scaled per seconds rate that will be used for fee calculation\\n    /**\\n        @dev Will be set in FeePool on index creation.\\n        Effective management fee rate (annual, in percent, after dilution) is calculated by the given formula:\\n        fee = (rpow(scaledPerSecondRate, numberOfSeconds, 10*27) - 10**27) * totalSupply / 10**27, where:\\n\\n        totalSupply - total index supply;\\n        numberOfSeconds - delta time for calculation period;\\n        scaledPerSecondRate - scaled rate, calculated off chain by the given formula:\\n\\n        scaledPerSecondRate = ((1 + k) ** (1 / 365 days)) * AUMCalculationLibrary.RATE_SCALE_BASE, where:\\n        k = (aumFeeInBP / BP) / (1 - aumFeeInBP / BP);\\n\\n        Note: rpow and RATE_SCALE_BASE are provided by AUMCalculationLibrary\\n        More info: https://docs.enzyme.finance/fee-formulas/management-fee\\n\\n        After value calculated off chain, scaledPerSecondRate is set to setDefaultAUMScaledPerSecondsRate\\n    */\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setDefaultAUMScaledPerSecondsRate(uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraw fee balance to fee pool for a given index\\n    /// @param _index Index to withdraw fee balance from\\n    function withdrawToFeePool(address _index) external;\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Minting fee in base point (BP) format\\n    /// @return Returns minting fee in base point (BP) format\\n    function defaultMintingFeeInBP() external view returns (uint16);\\n\\n    /// @notice Burning fee in base point (BP) format\\n    /// @return Returns burning fee in base point (BP) format\\n    function defaultBurningFeeInBP() external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    ///         See setDefaultAUMScaledPerSecondsRate method description for more details.\\n    /// @return Returns AUM scaled per seconds rate\\n    function defaultAUMScaledPerSecondsRate() external view returns (uint);\\n\\n    /// @notice Reweighting logic address\\n    /// @return Returns reweighting logic address\\n    function reweightingLogic() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagedIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndex.sol\\\";\\n\\n/// @title Managed index interface\\n/// @notice Interface for dynamic indexes that could be updated with new anatomy data\\ninterface IManagedIndex is IIndex {\\n    /// @notice Updates index anatomy with corresponding weights and assets\\n    /// @param _assets List for new asset(s) for the index\\n    /// @param _weights List of new asset(s) corresponding weights\\n    function reweight(address[] calldata _assets, uint8[] calldata _weights) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagedIndexReweightingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IAnatomyUpdater.sol\\\";\\n\\n/// @title ManagedIndex reweighing logic interface\\n/// @notice Contains reweighing logic\\ninterface IManagedIndexReweightingLogic is IAnatomyUpdater {\\n    /// @notice Updates index anatomy with corresponding weights and assets\\n    /// @param _assets List for new asset(s) for the index\\n    /// @param _weights List of new asset(s) corresponding weights\\n    function reweight(address[] calldata _assets, uint8[] calldata _weights) external;\\n}\\n\"\r\n    },\r\n    \"contracts/BaseIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"./libraries/IndexLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IIndexLogic.sol\\\";\\nimport \\\"./interfaces/IIndexFactory.sol\\\";\\n\\nimport \\\"./PhutureIndex.sol\\\";\\n\\n/// @title Base index\\n/// @notice Contains common logic for all indices\\nabstract contract BaseIndex is PhutureIndex, ReentrancyGuard, IIndex {\\n    using ERC165Checker for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Role allows configure index related data/components\\n    bytes32 internal immutable INDEX_MANAGER_ROLE;\\n\\n    /// @notice Checks if msg.sender has the given role's permission\\n    modifier onlyRole(bytes32 role) {\\n        require(IAccessControl(registry).hasRole(role, msg.sender), \\\"Index: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory) {\\n        require(_factory.supportsInterface(type(IIndexFactory).interfaceId), \\\"Index: INTERFACE\\\");\\n\\n        INDEX_MANAGER_ROLE = keccak256(\\\"INDEX_MANAGER_ROLE\\\");\\n\\n        factory = _factory;\\n        lastTransferTime = uint96(block.timestamp);\\n        registry = IIndexFactory(_factory).registry();\\n        vTokenFactory = IIndexFactory(_factory).vTokenFactory();\\n    }\\n\\n    /// @inheritdoc IIndex\\n    function mint(address _recipient) external override nonReentrant {\\n        (bool success, bytes memory data) = IIndexRegistry(registry).indexLogic().delegatecall(\\n            abi.encodeWithSelector(IIndexLogic.mint.selector, _recipient)\\n        );\\n        if (!success) {\\n            if (data.length == 0) {\\n                revert(\\\"Index: MINT_FAILED\\\");\\n            } else {\\n                assembly {\\n                    revert(add(32, data), mload(data))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IIndex\\n    function burn(address _recipient) external override nonReentrant {\\n        (bool success, bytes memory data) = IIndexRegistry(registry).indexLogic().delegatecall(\\n            abi.encodeWithSelector(IIndexLogic.burn.selector, _recipient)\\n        );\\n        if (!success) {\\n            if (data.length == 0) {\\n                revert(\\\"Index: BURN_FAILED\\\");\\n            } else {\\n                assembly {\\n                    revert(add(32, data), mload(data))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IIndex\\n    function anatomy() external view override returns (address[] memory _assets, uint8[] memory _weights) {\\n        _assets = assets.values();\\n        uint assetsCount = _assets.length;\\n        _weights = new uint8[](assetsCount);\\n\\n        for (uint i; i < assetsCount; ) {\\n            _weights[i] = weightOf[_assets[i]];\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IIndex\\n    function inactiveAnatomy() external view override returns (address[] memory) {\\n        return inactiveAssets.values();\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IIndex).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexLayout.sol\\\";\\nimport \\\"./IAnatomyUpdater.sol\\\";\\n\\n/// @title Index interface\\n/// @notice Interface containing basic logic for indexes: mint, burn, anatomy info\\ninterface IIndex is IIndexLayout, IAnatomyUpdater {\\n    /// @notice Index minting\\n    /// @param _recipient Recipient address\\n    function mint(address _recipient) external;\\n\\n    /// @notice Index burning\\n    /// @param _recipient Recipient address\\n    function burn(address _recipient) external;\\n\\n    /// @notice Returns index assets weights information\\n    /// @return _assets Assets list\\n    /// @return _weights List of assets corresponding weights\\n    function anatomy() external view returns (address[] memory _assets, uint8[] memory _weights);\\n\\n    /// @notice Returns inactive assets\\n    /// @return Assets list\\n    function inactiveAnatomy() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexLayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index layout interface\\n/// @notice Contains storage layout of index\\ninterface IIndexLayout {\\n    /// @notice Index factory address\\n    /// @return Returns index factory address\\n    function factory() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Registry address\\n    /// @return Returns registry address\\n    function registry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnatomyUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Anatomy Updater interface\\n/// @notice Contains event for aatomy update\\ninterface IAnatomyUpdater {\\n    event UpdateAnatomy(address asset, uint8 weight);\\n    event AssetRemoved(address asset);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/IndexLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint112.sol\\\";\\n\\n/// @title Index library\\n/// @notice Provides various utilities for indexes\\nlibrary IndexLibrary {\\n    using FullMath for uint;\\n\\n    /// @notice Initial index quantity to mint\\n    uint constant INITIAL_QUANTITY = 10000;\\n\\n    /// @notice Total assets weight within an index\\n    uint8 constant MAX_WEIGHT = type(uint8).max;\\n\\n    /// @notice Returns amount of asset equivalent to the given parameters\\n    /// @param _assetPerBaseInUQ Asset per base price in UQ\\n    /// @param _weight Weight of the given asset\\n    /// @param _amountInBase Total assets amount in base\\n    /// @return Amount of asset\\n    function amountInAsset(\\n        uint _assetPerBaseInUQ,\\n        uint8 _weight,\\n        uint _amountInBase\\n    ) internal pure returns (uint) {\\n        require(_assetPerBaseInUQ != 0, \\\"IndexLibrary: ORACLE\\\");\\n\\n        return ((_amountInBase * _weight) / MAX_WEIGHT).mulDiv(_assetPerBaseInUQ, FixedPoint112.Q112);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index logic interface\\n/// @notice Contains mint and burn logic\\ninterface IIndexLogic {\\n    /// @notice Index minting\\n    /// @param _recipient Recipient address\\n    function mint(address _recipient) external;\\n\\n    /// @notice Index burning\\n    /// @param _recipient Recipient address\\n    function burn(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/PhutureIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./libraries/AUMCalculationLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/INameRegistry.sol\\\";\\nimport \\\"./interfaces/IIndexRegistry.sol\\\";\\n\\nimport \\\"./IndexLayout.sol\\\";\\n\\n/// @title Phuture index\\n/// @notice Contains AUM fee's logic, overrides name and symbol\\nabstract contract PhutureIndex is IndexLayout, ERC20Permit, ERC165 {\\n    constructor() ERC20Permit(\\\"PhutureIndex\\\") ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    /// @notice Index symbol\\n    /// @return Returns index symbol\\n    function symbol() public view override returns (string memory) {\\n        return INameRegistry(registry).symbolOfIndex(address(this));\\n    }\\n\\n    /// @notice Index name\\n    /// @return Returns index name\\n    function name() public view override returns (string memory) {\\n        return INameRegistry(registry).nameOfIndex(address(this));\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IIndexLayout).interfaceId ||\\n            _interfaceId == type(IERC20Permit).interfaceId ||\\n            _interfaceId == type(IERC20).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @dev Overrides _transfer to include AUM fee logic\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint _value\\n    ) internal override {\\n        _chargeAUMFee(IIndexRegistry(registry).feePool());\\n        super._transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Calculates and mints AUM fee\\n    /// @param _feePool Fee pool address\\n    function _chargeAUMFee(address _feePool) internal {\\n        uint timePassed = uint96(block.timestamp) - lastTransferTime;\\n        if (timePassed != 0) {\\n            address _factory = factory;\\n            uint fee = ((totalSupply() - balanceOf(_factory)) *\\n                (AUMCalculationLibrary.rpow(\\n                    IFeePool(_feePool).AUMScaledPerSecondsRateOf(address(this)),\\n                    timePassed,\\n                    AUMCalculationLibrary.RATE_SCALE_BASE\\n                ) - AUMCalculationLibrary.RATE_SCALE_BASE)) / AUMCalculationLibrary.RATE_SCALE_BASE;\\n\\n            if (fee != 0) {\\n                super._mint(_factory, fee);\\n                lastTransferTime = uint96(block.timestamp);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (~denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title FixedPoint112\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint112 {\\n    uint8 internal constant RESOLUTION = 112;\\n    /// @dev 2**112\\n    uint256 internal constant Q112 = 0x10000000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AUMCalculationLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title AUM fee calculation library\\n/// @notice More details https://github.com/enzymefinance/protocol/blob/b671b3dfea92596dd2e962c73b233dcdb22bf753/contracts/release/utils/MakerDaoMath.sol\\n/// @dev Taken from https://github.com/enzymefinance/protocol\\nlibrary AUMCalculationLibrary {\\n    /// @dev A constant used for AUM fee calculation to prevent underflow\\n    uint constant RATE_SCALE_BASE = 1e27;\\n\\n    /// @notice Power function for AUM fee calculation\\n    /// @param _x Base number\\n    /// @param _n Exponent number\\n    /// @param _base Base number multiplier\\n    /// @return z_ Returns value of `_x` raised to power of `_n`\\n    function rpow(\\n        uint _x,\\n        uint _n,\\n        uint _base\\n    ) internal pure returns (uint z_) {\\n        assembly {\\n            switch _x\\n            case 0 {\\n                switch _n\\n                case 0 {\\n                    z_ := _base\\n                }\\n                default {\\n                    z_ := 0\\n                }\\n            }\\n            default {\\n                switch mod(_n, 2)\\n                case 0 {\\n                    z_ := _base\\n                }\\n                default {\\n                    z_ := _x\\n                }\\n                let half := div(_base, 2)\\n                for {\\n                    _n := div(_n, 2)\\n                } _n {\\n                    _n := div(_n, 2)\\n                } {\\n                    let xx := mul(_x, _x)\\n                    if iszero(eq(div(xx, _x), _x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    _x := div(xxRound, _base)\\n                    if mod(_n, 2) {\\n                        let zx := mul(z_, _x)\\n                        if and(iszero(iszero(_x)), iszero(eq(div(zx, _x), z_))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z_ := div(zxRound, _base)\\n                    }\\n                }\\n            }\\n        }\\n\\n        return z_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Fee pool interface\\n/// @notice Provides methods for fee management\\ninterface IFeePool {\\n    struct MintBurnInfo {\\n        address recipient;\\n        uint share;\\n    }\\n\\n    event Mint(address indexed index, address indexed recipient, uint share);\\n    event Burn(address indexed index, address indexed recipient, uint share);\\n    event SetMintingFeeInBP(address indexed account, address indexed index, uint16 mintingFeeInBP);\\n    event SetBurningFeeInBP(address indexed account, address indexed index, uint16 burningFeeInPB);\\n    event SetAUMScaledPerSecondsRate(address indexed account, address indexed index, uint AUMScaledPerSecondsRate);\\n\\n    event Withdraw(address indexed index, address indexed recipient, uint amount);\\n\\n    /// @notice Initializes FeePool with the given params\\n    /// @param _registry Index registry address\\n    function initialize(address _registry) external;\\n\\n    /// @notice Initializes index with provided fees and makes initial mint\\n    /// @param _index Index to initialize\\n    /// @param _mintingFeeInBP Minting fee to initialize with\\n    /// @param _burningFeeInBP Burning fee to initialize with\\n    /// @param _AUMScaledPerSecondsRate Aum scaled per second rate to initialize with\\n    /// @param _mintInfo Mint info object array containing mint recipient and amount for initial mint\\n    function initializeIndex(\\n        address _index,\\n        uint16 _mintingFeeInBP,\\n        uint16 _burningFeeInBP,\\n        uint _AUMScaledPerSecondsRate,\\n        MintBurnInfo[] calldata _mintInfo\\n    ) external;\\n\\n    /// @notice Mints fee pool shares to the given recipient in specified amount\\n    /// @param _index Index to mint fee pool's shares for\\n    /// @param _mintInfo Mint info object containing mint recipient and amount\\n    function mint(address _index, MintBurnInfo calldata _mintInfo) external;\\n\\n    /// @notice Burns fee pool shares to the given recipient in specified amount\\n    /// @param _index Index to burn fee pool's shares for\\n    /// @param _burnInfo Burn info object containing burn recipient and amount\\n    function burn(address _index, MintBurnInfo calldata _burnInfo) external;\\n\\n    /// @notice Mints fee pool shares to the given recipients in specified amounts\\n    /// @param _index Index to mint fee pool's shares for\\n    /// @param _mintInfo Mint info object array containing mint recipients and amounts\\n    function mintMultiple(address _index, MintBurnInfo[] calldata _mintInfo) external;\\n\\n    /// @notice Burns fee pool shares to the given recipients in specified amounts\\n    /// @param _index Index to burn fee pool's shares for\\n    /// @param _burnInfo Burn info object array containing burn recipients and amounts\\n    function burnMultiple(address _index, MintBurnInfo[] calldata _burnInfo) external;\\n\\n    /// @notice Sets index minting fee in base point format\\n    /// @param _index Index to set minting fee for\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setMintingFeeInBP(address _index, uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets index burning fee in base point format\\n    /// @param _index Index to set burning fee for\\n    /// @param _burningFeeInBP New burning fee value\\n    function setBurningFeeInBP(address _index, uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets AUM scaled per seconds rate that will be used for fee calculation\\n    /// @param _index Index to set AUM scaled per seconds rate for\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setAUMScaledPerSecondsRate(address _index, uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraws sender fees from the given index\\n    /// @param _index Index to withdraw fees from\\n    function withdraw(address _index) external;\\n\\n    /// @notice Withdraws platform fees from the given index to specified address\\n    /// @param _index Index to withdraw fees from\\n    /// @param _recipient Recipient to send fees to\\n    function withdrawPlatformFeeOf(address _index, address _recipient) external;\\n\\n    /// @notice Total shares in the given index\\n    /// @return Returns total shares in the given index\\n    function totalSharesOf(address _index) external view returns (uint);\\n\\n    /// @notice Shares of specified recipient in the given index\\n    /// @return Returns shares of specified recipient in the given index\\n    function shareOf(address _index, address _account) external view returns (uint);\\n\\n    /// @notice Minting fee in base point format\\n    /// @return Returns minting fee in base point (BP) format\\n    function mintingFeeInBPOf(address _index) external view returns (uint16);\\n\\n    /// @notice Burning fee in base point format\\n    /// @return Returns burning fee in base point (BP) format\\n    function burningFeeInBPOf(address _index) external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    /// @return Returns AUM scaled per seconds rate\\n    function AUMScaledPerSecondsRateOf(address _index) external view returns (uint);\\n\\n    /// @notice Returns withdrawable amount for specified account from given index\\n    /// @param _index Index to check withdrawable amount\\n    /// @param _account Recipient to check withdrawable amount for\\n    function withdrawableAmountOf(address _index, address _account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INameRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Name registry interface\\n/// @notice Providing information about index names and symbols\\ninterface INameRegistry {\\n    event SetName(address index, string name);\\n    event SetSymbol(address index, string name);\\n\\n    /// @notice Sets name of the given index\\n    /// @param _index Index address\\n    /// @param _name New index name\\n    function setIndexName(address _index, string calldata _name) external;\\n\\n    /// @notice Sets symbol for the given index\\n    /// @param _index Index address\\n    /// @param _symbol New index symbol\\n    function setIndexSymbol(address _index, string calldata _symbol) external;\\n\\n    /// @notice Returns index address by name\\n    /// @param _name Index name to look for\\n    /// @return Index address\\n    function indexOfName(string calldata _name) external view returns (address);\\n\\n    /// @notice Returns index address by symbol\\n    /// @param _symbol Index symbol to look for\\n    /// @return Index address\\n    function indexOfSymbol(string calldata _symbol) external view returns (address);\\n\\n    /// @notice Returns name of the given index\\n    /// @param _index Index address\\n    /// @return Index name\\n    function nameOfIndex(address _index) external view returns (string memory);\\n\\n    /// @notice Returns symbol of the given index\\n    /// @param _index Index address\\n    /// @return Index symbol\\n    function symbolOfIndex(address _index) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexFactory.sol\\\";\\n\\n/// @title Index registry interface\\n/// @notice Contains core components, addresses and asset market capitalizations\\ninterface IIndexRegistry {\\n    event SetIndexLogic(address indexed account, address indexLogic);\\n    event SetMaxComponents(address indexed account, uint maxComponents);\\n    event UpdateAsset(address indexed asset, uint marketCap);\\n    event SetOrderer(address indexed account, address orderer);\\n    event SetFeePool(address indexed account, address feePool);\\n    event SetPriceOracle(address indexed account, address priceOracle);\\n\\n    /// @notice Initializes IndexRegistry with the given params\\n    /// @param _indexLogic Index logic address\\n    /// @param _maxComponents Maximum assets for an index\\n    function initialize(address _indexLogic, uint _maxComponents) external;\\n\\n    /// @notice Sets maximum assets for an index\\n    /// @param _maxComponents Maximum assets for an index\\n    function setMaxComponents(uint _maxComponents) external;\\n\\n    /// @notice Index logic address\\n    /// @return Returns index logic address\\n    function indexLogic() external returns (address);\\n\\n    /// @notice Sets index logic address\\n    /// @param _indexLogic Index logic address\\n    function setIndexLogic(address _indexLogic) external;\\n\\n    /// @notice Sets adminRole as role's admin role.\\n    /// @param _role Role\\n    /// @param _adminRole AdminRole of given role\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /// @notice Registers new index\\n    /// @param _index Index address\\n    /// @param _nameDetails Name details (name and symbol) for provided index\\n    function registerIndex(address _index, IIndexFactory.NameDetails calldata _nameDetails) external;\\n\\n    /// @notice Registers asset in the system, updates it's market capitalization and assigns required roles\\n    /// @param _asset Asset to register\\n    /// @param _marketCap It's current market capitalization\\n    function addAsset(address _asset, uint _marketCap) external;\\n\\n    /// @notice Removes assets from the system\\n    /// @param _asset Asset to remove\\n    function removeAsset(address _asset) external;\\n\\n    /// @notice Updates market capitalization for the given asset\\n    /// @param _asset Asset address to update market capitalization for\\n    /// @param _marketCap Market capitalization value\\n    function updateAssetMarketCap(address _asset, uint _marketCap) external;\\n\\n    /// @notice Sets price oracle address\\n    /// @param _priceOracle Price oracle address\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    /// @notice Sets orderer address\\n    /// @param _orderer Orderer address\\n    function setOrderer(address _orderer) external;\\n\\n    /// @notice Sets fee pool address\\n    /// @param _feePool Fee pool address\\n    function setFeePool(address _feePool) external;\\n\\n    /// @notice Maximum assets for an index\\n    /// @return Returns maximum assets for an index\\n    function maxComponents() external view returns (uint);\\n\\n    /// @notice Market capitalization of provided asset\\n    /// @return _asset Returns market capitalization of provided asset\\n    function marketCapOf(address _asset) external view returns (uint);\\n\\n    /// @notice Returns total market capitalization of the given assets\\n    /// @param _assets Assets array to calculate market capitalization of\\n    /// @return _marketCaps Corresponding capitalizations of the given asset\\n    /// @return _totalMarketCap Total market capitalization of the given assets\\n    function marketCapsOf(address[] calldata _assets)\\n        external\\n        view\\n        returns (uint[] memory _marketCaps, uint _totalMarketCap);\\n\\n    /// @notice Total market capitalization of all registered assets\\n    /// @return Returns total market capitalization of all registered assets\\n    function totalMarketCap() external view returns (uint);\\n\\n    /// @notice Price oracle address\\n    /// @return Returns price oracle address\\n    function priceOracle() external view returns (address);\\n\\n    /// @notice Orderer address\\n    /// @return Returns orderer address\\n    function orderer() external view returns (address);\\n\\n    /// @notice Fee pool address\\n    /// @return Returns fee pool address\\n    function feePool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/IndexLayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IIndexLayout.sol\\\";\\n\\n/// @title Index layout\\n/// @notice Contains storage layout of index\\nabstract contract IndexLayout is IIndexLayout {\\n    /// @inheritdoc IIndexLayout\\n    address public override factory;\\n    /// @inheritdoc IIndexLayout\\n    address public override vTokenFactory;\\n    /// @inheritdoc IIndexLayout\\n    address public override registry;\\n\\n    /// @notice Timestamp of last AUM fee charge\\n    uint96 internal lastTransferTime;\\n\\n    /// @notice Set with asset addresses\\n    EnumerableSet.AddressSet internal assets;\\n    /// @notice Set with previously used asset addresses\\n    EnumerableSet.AddressSet internal inactiveAssets;\\n    /// @notice Map of assets and their corresponding weights in index\\n    mapping(address => uint8) internal weightOf;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title Base point library\\n/// @notice Contains constant used to prevent underflow of math operations\\nlibrary BP {\\n    /// @notice Base point number\\n    /// @dev Used to prevent underflow of math operations\\n    uint16 constant DECIMAL_FACTOR = 10_000;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title vToken factory interface\\n/// @notice Contains vToken creation logic\\ninterface IvTokenFactory {\\n    event VTokenCreated(address vToken, address asset);\\n\\n    /// @notice Initialize vToken factory with the given params\\n    /// @param _registry Index registry address\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function initialize(address _registry, address _vTokenImpl) external;\\n\\n    /// @notice Upgrades beacon implementation\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function upgradeBeaconTo(address _vTokenImpl) external;\\n\\n    /// @notice Creates vToken for the given asset\\n    /// @param _asset Asset to create vToken for\\n    function createVToken(address _asset) external;\\n\\n    /// @notice Creates and returns or returns address of previously created vToken for the given asset\\n    /// @param _asset Asset to create or return vToken for\\n    function createdVTokenOf(address _asset) external returns (address);\\n\\n    /// @notice Returns beacon address\\n    /// @return Beacon address\\n    function beacon() external view returns (address);\\n\\n    /// @notice Returns vToken for the given asset\\n    /// @param _asset Asset to retrieve vToken for\\n    /// @return vToken for the given asset\\n    function vTokenOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reweightingLogic\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_defaultMintingFeeInBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_defaultBurningFeeInBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_defaultAUMScaledPerSecondsRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_weights\",\"type\":\"uint8[]\"}],\"name\":\"ManagedIndexCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AUMScaledPerSecondsRate\",\"type\":\"uint256\"}],\"name\":\"SetDefaultAUMScaledPerSecondsRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"burningFeeInBP\",\"type\":\"uint16\"}],\"name\":\"SetDefaultBurningFeeInBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"mintingFeeInBP\",\"type\":\"uint16\"}],\"name\":\"SetDefaultMintingFeeInBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vTokenFactory\",\"type\":\"address\"}],\"name\":\"SetVTokenFactory\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_AUM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_IN_BP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_weights\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct IIndexFactory.NameDetails\",\"name\":\"_nameDetails\",\"type\":\"tuple\"}],\"name\":\"createIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAUMScaledPerSecondsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBurningFeeInBP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMintingFeeInBP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reweightingLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_AUMScaledPerSecondsRate\",\"type\":\"uint256\"}],\"name\":\"setDefaultAUMScaledPerSecondsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_burningFeeInBP\",\"type\":\"uint16\"}],\"name\":\"setDefaultBurningFeeInBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_mintingFeeInBP\",\"type\":\"uint16\"}],\"name\":\"setDefaultMintingFeeInBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reweightingLogic\",\"type\":\"address\"}],\"name\":\"setReweightingLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_index\",\"type\":\"address\"}],\"name\":\"withdrawToFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManagedIndexFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f971223b4bd9649702f10d306e469e6dbe3e3e900000000000000000000000024ad48f31cab5e35d0e9cdfa9213b5451f22fb920000000000000000000000001cc2dcd98254db014efbcfb57a9478dfc64e32da000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000033b2e3ca43176a9d2dfd0a5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}