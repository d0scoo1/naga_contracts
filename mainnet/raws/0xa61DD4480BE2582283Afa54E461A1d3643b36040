{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"},\"IveSPA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IveSPA {\\n    function getLastUserSlope(address addr) external view returns (int128);\\n\\n    function getUserPointHistoryTS(address addr, uint256 idx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function userPointEpoch(address addr) external view returns (uint256);\\n\\n    function checkpoint() external;\\n\\n    function lockedEnd(address addr) external view returns (uint256);\\n\\n    function depositFor(address addr, uint128 value) external;\\n\\n    function createLock(\\n        uint128 value,\\n        uint256 unlockTime,\\n        bool autoCooldown\\n    ) external;\\n\\n    function increaseAmount(uint128 value) external;\\n\\n    function increaseUnlockTime(uint256 unlockTime) external;\\n\\n    function initiateCooldown() external;\\n\\n    function withdraw() external;\\n\\n    function balanceOf(address addr, uint256 ts)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply(uint256 ts) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"},\"RewardDistributor_v1.sol\":{\"content\":\"pragma solidity 0.8.7;\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//\\n//@@@@@@@@\\u0026    (@@@@@@@@@@@@@    /@@@@@@@@@//\\n//@@@@@@          /@@@@@@@          /@@@@@@//\\n//@@@@@            (@@@@@            (@@@@@//\\n//@@@@@(            @@@@@(           \\u0026@@@@@//\\n//@@@@@@@           \\u0026@@@@@@         @@@@@@@//\\n//@@@@@@@@@@@@@@%    /@@@@@@@@@@@@@@@@@@@@@//\\n//@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@//\\n//@@@@@@@@@@@@@@@@@@@@@      (\\u0026@@@@@@@@@@@@//\\n//@@@@@@#         @@@@@@#           @@@@@@@//\\n//@@@@@/           %@@@@@            %@@@@@//\\n//@@@@@            #@@@@@            %@@@@@//\\n//@@@@@@          #@@@@@@@/         #@@@@@@//\\n//@@@@@@@@@\\u0026/ (@@@@@@@@@@@@@@\\u0026/ (\\u0026@@@@@@@@@//\\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport {IveSPA} from \\\"./IveSPA.sol\\\";\\n\\ncontract RewardDistributor_v1 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    address public constant EMERGENCY_RETURN =\\n        0xCD1B1ce6ce877a9315E73E2E4Ba3137228068A59; //Arbi-one (SPA L2 Reserve): 0xb56e5620A79cfe59aF7c0FcaE95aADbEA8ac32A1; ETH (Staking): 0xCD1B1ce6ce877a9315E73E2E4Ba3137228068A59\\n    address public constant veSPA = 0xbF82a3212e13b2d407D10f5107b5C8404dE7F403; //Arbi-one: 0x2e2071180682Ce6C247B1eF93d382D509F5F6A17; ETH: 0xbF82a3212e13b2d407D10f5107b5C8404dE7F403\\n    address public constant SPA = 0xB4A3B0Faf0Ab53df58001804DdA5Bfc6a3D59008; // Arbi-one: 0x5575552988A3A80504bBaeB1311674fCFd40aD4B; ETH: 0xB4A3B0Faf0Ab53df58001804DdA5Bfc6a3D59008\\n    uint256 public constant WEEK = 7 days;\\n    uint256 public constant REWARD_CHECKPOINT_DEADLINE = 1 days;\\n\\n    uint256 public startTime; // Start time for reward distribution\\n    uint256 public lastRewardCheckpointTime; // Last time when reward was checkpointed\\n    uint256 public lastRewardBalance = 0; // Last reward balance of the contract\\n    uint256 public maxIterations = 50; // Max number of weeks a user can claim rewards in a transaction\\n\\n    mapping(uint256 =\\u003e uint256) public rewardsPerWeek; // Reward distributed per week\\n    mapping(address =\\u003e uint256) public timeCursorOf; // Timestamp of last user checkpoint\\n    mapping(uint256 =\\u003e uint256) public veSPASupply; // Store the veSPA supply per week\\n\\n    bool public canCheckpointReward; // Checkpoint reward flag\\n    bool public isKilled = false;\\n\\n    event Claimed(\\n        address indexed _recipient,\\n        bool _staked,\\n        uint256 _amount,\\n        uint256 _lastRewardClaimTime,\\n        uint256 _rewardClaimedTill\\n    );\\n    event RewardsCheckpointed(uint256 _amount);\\n    event CheckpointAllowed(bool _allowed);\\n    event Killed();\\n    event RecoveredERC20(address _token, uint256 _amount);\\n    event MaxIterationsUpdated(uint256 _oldNo, uint256 _newNo);\\n\\n    constructor(uint256 _startTime) public {\\n        uint256 t = (_startTime / WEEK) * WEEK;\\n        // All time initialization is rounded to the week\\n        startTime = t; // Decides the start time for reward distibution\\n        lastRewardCheckpointTime = t; //reward checkpoint timestamp\\n    }\\n\\n    /// @notice Function to add rewards in the contract for distribution\\n    /// @param value The amount of SPA to add\\n    /// @dev This function is only for sending in SPA.\\n    function addRewards(uint256 value) external nonReentrant {\\n        require(!isKilled);\\n        require(value \\u003e 0, \\\"Reward amount must be \\u003e 0\\\");\\n        IERC20(SPA).safeTransferFrom(_msgSender(), address(this), value);\\n        if (\\n            canCheckpointReward \\u0026\\u0026\\n            (block.timestamp \\u003e\\n                lastRewardCheckpointTime + REWARD_CHECKPOINT_DEADLINE)\\n        ) {\\n            _checkpointReward();\\n        }\\n    }\\n\\n    /// @notice Update the reward checkpoint\\n    /// @dev Calculates the total number of tokens to be distributed in a given week.\\n    ///     During setup for the initial distribution this function is only callable\\n    ///     by the contract owner. Beyond initial distro, it can be enabled for anyone\\n    ///     to call.\\n    function checkpointReward() external nonReentrant {\\n        require(\\n            _msgSender() == owner() ||\\n                (canCheckpointReward \\u0026\\u0026\\n                    block.timestamp \\u003e\\n                    (lastRewardCheckpointTime + REWARD_CHECKPOINT_DEADLINE)),\\n            \\\"Checkpointing not allowed\\\"\\n        );\\n        _checkpointReward();\\n    }\\n\\n    function claim(bool restake) external returns (uint256) {\\n        return claim(_msgSender(), restake);\\n    }\\n\\n    /// @notice Function to enable / disable checkpointing of tokens\\n    /// @dev To be called by the owner only\\n    function toggleAllowCheckpointReward() external onlyOwner {\\n        canCheckpointReward = !canCheckpointReward;\\n        emit CheckpointAllowed(canCheckpointReward);\\n    }\\n\\n    /*****************************\\n     *  Emergency Control\\n     ******************************/\\n\\n    /// @notice Function to update the maximum iterations for the claim function.\\n    /// @param newIterationNum  The new maximum iterations for the claim function.\\n    /// @dev To be called by the owner only.\\n    function updateMaxIterations(uint256 newIterationNum) external onlyOwner {\\n        require(newIterationNum \\u003e 0, \\\"Max iterations must be \\u003e 0\\\");\\n        uint256 oldIterationNum = maxIterations;\\n        maxIterations = newIterationNum;\\n        emit MaxIterationsUpdated(oldIterationNum, newIterationNum);\\n    }\\n\\n    /// @notice Function to kill the contract.\\n    /// @dev Killing transfers the entire SPA balance to the emergency return address\\n    ///      and blocks the ability to claim or addRewards.\\n    /// @dev The contract can\\u0027t be unkilled.\\n    function killMe() external onlyOwner {\\n        require(!isKilled);\\n        isKilled = true;\\n        IERC20(SPA).safeTransfer(\\n            EMERGENCY_RETURN,\\n            IERC20(SPA).balanceOf(address(this))\\n        );\\n        emit Killed();\\n    }\\n\\n    /// @notice Recover ERC20 tokens from this contract\\n    /// @dev Tokens are sent to the emergency return address\\n    /// @param _coin token address\\n    function recoverERC20(address _coin) external onlyOwner {\\n        // Only the owner address can ever receive the recovery withdrawal\\n        require(_coin != SPA, \\\"Can\\u0027t recover SPA tokens\\\");\\n        uint256 amount = IERC20(_coin).balanceOf(address(this));\\n        IERC20(_coin).safeTransfer(EMERGENCY_RETURN, amount);\\n        emit RecoveredERC20(_coin, amount);\\n    }\\n\\n    /// @notice Function to get the user earnings at a given timestamp.\\n    /// @param addr The address of the user\\n    /// @dev This function gets only for 50 days worth of rewards.\\n    /// @return total rewards earned by user, lastRewardCollectionTime, rewardsTill\\n    /// @dev lastRewardCollectionTime, rewardsTill are in terms of WEEK Cursor.\\n    function computeRewards(address addr)\\n        external\\n        view\\n        returns (\\n            uint256, // total rewards earned by user\\n            uint256, // lastRewardCollectionTime\\n            uint256 // rewardsTill\\n        )\\n    {\\n        uint256 _lastRewardCheckpointTime = lastRewardCheckpointTime;\\n        // Compute the rounded last token time\\n        _lastRewardCheckpointTime = (_lastRewardCheckpointTime / WEEK) * WEEK;\\n        (uint256 rewardsTill, uint256 totalRewards) = _computeRewards(\\n            addr,\\n            _lastRewardCheckpointTime\\n        );\\n        uint256 lastRewardCollectionTime = timeCursorOf[addr];\\n        if (lastRewardCollectionTime == 0) {\\n            lastRewardCollectionTime = startTime;\\n        }\\n        return (totalRewards, lastRewardCollectionTime, rewardsTill);\\n    }\\n\\n    /// @notice Claim fees for the address\\n    /// @param addr The address of the user\\n    /// @return The amount of tokens claimed\\n    function claim(address addr, bool restake)\\n        public\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(!isKilled);\\n        // Get the last token time\\n        uint256 _lastRewardCheckpointTime = lastRewardCheckpointTime;\\n        if (\\n            canCheckpointReward \\u0026\\u0026\\n            (block.timestamp \\u003e\\n                _lastRewardCheckpointTime + REWARD_CHECKPOINT_DEADLINE)\\n        ) {\\n            // Checkpoint the rewards till the current week\\n            _checkpointReward();\\n            _lastRewardCheckpointTime = block.timestamp;\\n        }\\n\\n        // Compute the rounded last token time\\n        _lastRewardCheckpointTime = (_lastRewardCheckpointTime / WEEK) * WEEK;\\n\\n        // Calculate the entitled reward amount for the user\\n        (uint256 weekCursor, uint256 amount) = _computeRewards(\\n            addr,\\n            _lastRewardCheckpointTime\\n        );\\n\\n        uint256 lastRewardCollectionTime = timeCursorOf[addr];\\n        if (lastRewardCollectionTime == 0) {\\n            lastRewardCollectionTime = startTime;\\n        }\\n        // update time cursor for the user\\n        timeCursorOf[addr] = weekCursor;\\n\\n        if (amount \\u003e 0) {\\n            lastRewardBalance -= amount;\\n            if (restake) {\\n                // If restake == True, add the rewards to user\\u0027s deposit\\n                IERC20(SPA).safeApprove(veSPA, amount);\\n                IveSPA(veSPA).depositFor(addr, uint128(amount));\\n            } else {\\n                IERC20(SPA).safeTransfer(addr, amount);\\n            }\\n        }\\n\\n        emit Claimed(\\n            addr,\\n            restake,\\n            amount,\\n            lastRewardCollectionTime,\\n            weekCursor\\n        );\\n\\n        return amount;\\n    }\\n\\n    /// @notice Checkpoint reward\\n    /// @dev Checkpoint rewards for at most 20 weeks at a time\\n    function _checkpointReward() internal {\\n        // Calculate the amount to distribute\\n        uint256 tokenBalance = IERC20(SPA).balanceOf(address(this));\\n        uint256 toDistribute = tokenBalance - lastRewardBalance;\\n        lastRewardBalance = tokenBalance;\\n\\n        uint256 t = lastRewardCheckpointTime;\\n        // Store the period of the last checkpoint\\n        uint256 sinceLast = block.timestamp - t;\\n        lastRewardCheckpointTime = block.timestamp;\\n        uint256 thisWeek = (t / WEEK) * WEEK;\\n        uint256 nextWeek = 0;\\n\\n        for (uint256 i = 0; i \\u003c 20; i++) {\\n            nextWeek = thisWeek + WEEK;\\n            veSPASupply[thisWeek] = IveSPA(veSPA).totalSupply(thisWeek);\\n            // Calculate share for the ongoing week\\n            if (block.timestamp \\u003c nextWeek) {\\n                if (sinceLast == 0) {\\n                    rewardsPerWeek[thisWeek] += toDistribute;\\n                } else {\\n                    // In case of a gap in time of the distribution\\n                    // Reward is divided across the remainder of the week\\n                    rewardsPerWeek[thisWeek] +=\\n                        (toDistribute * (block.timestamp - t)) /\\n                        sinceLast;\\n                }\\n                break;\\n                // Calculate share for all the past weeks\\n            } else {\\n                rewardsPerWeek[thisWeek] +=\\n                    (toDistribute * (nextWeek - t)) /\\n                    sinceLast;\\n            }\\n            t = nextWeek;\\n            thisWeek = nextWeek;\\n        }\\n\\n        emit RewardsCheckpointed(toDistribute);\\n    }\\n\\n    /// @notice Get the nearest user epoch for a given timestamp\\n    /// @param addr The address of the user\\n    /// @param ts The timestamp\\n    /// @param maxEpoch The maximum possible epoch for the user.\\n    function _findUserTimestampEpoch(\\n        address addr,\\n        uint256 ts,\\n        uint256 maxEpoch\\n    ) internal view returns (uint256) {\\n        uint256 min = 0;\\n        uint256 max = maxEpoch;\\n\\n        // Binary search\\n        for (uint256 i = 0; i \\u003c 128; i++) {\\n            if (min \\u003e= max) {\\n                break;\\n            }\\n            uint256 mid = (min + max + 1) / 2;\\n            if (IveSPA(veSPA).getUserPointHistoryTS(addr, mid) \\u003c= ts) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /// @notice Function to initialize user\\u0027s reward weekCursor\\n    /// @param addr The address of the user\\n    /// @return weekCursor The weekCursor of the user\\n    function _initializeUser(address addr)\\n        internal\\n        view\\n        returns (uint256 weekCursor)\\n    {\\n        uint256 userEpoch = 0;\\n        // Get the user\\u0027s max epoch\\n        uint256 maxUserEpoch = IveSPA(veSPA).userPointEpoch(addr);\\n\\n        require(maxUserEpoch \\u003e 0, \\\"User has no deposit\\\");\\n\\n        // Find the Timestamp curresponding to reward distribution start time\\n        userEpoch = _findUserTimestampEpoch(addr, startTime, maxUserEpoch);\\n\\n        // In case the User deposits after the startTime\\n        // binary search returns userEpoch as 0\\n        if (userEpoch == 0) {\\n            userEpoch = 1;\\n        }\\n        // Get the user deposit timestamp\\n        uint256 userPointTs = IveSPA(veSPA).getUserPointHistoryTS(\\n            addr,\\n            userEpoch\\n        );\\n        // Compute the initial week cursor for the user for claiming the reward.\\n        weekCursor = ((userPointTs + WEEK - 1) / WEEK) * WEEK;\\n        // If the week cursor is less than the reward start time\\n        // Update it to the reward start time.\\n        if (weekCursor \\u003c startTime) {\\n            weekCursor = startTime;\\n        }\\n        return weekCursor;\\n    }\\n\\n    /// @notice Function to get the total rewards for the user.\\n    /// @param addr The address of the user\\n    /// @param _lastRewardCheckpointTime The last reward checkpoint\\n    /// @return WeekCursor of User, TotalRewards\\n    function _computeRewards(address addr, uint256 _lastRewardCheckpointTime)\\n        internal\\n        view\\n        returns (\\n            uint256, // WeekCursor\\n            uint256 // TotalRewards\\n        )\\n    {\\n        uint256 toDistrbute = 0;\\n        // Get the user\\u0027s reward time cursor.\\n        uint256 weekCursor = timeCursorOf[addr];\\n\\n        if (weekCursor == 0) {\\n            weekCursor = _initializeUser(addr);\\n        }\\n\\n        // Iterate over the weeks\\n        for (uint256 i = 0; i \\u003c maxIterations; i++) {\\n            // Users can\\u0027t claim the reward for the ongoing week.\\n            if (weekCursor \\u003e= _lastRewardCheckpointTime) {\\n                break;\\n            }\\n\\n            // Get the week\\u0027s balance for the user\\n            uint256 balance = IveSPA(veSPA).balanceOf(addr, weekCursor);\\n            if (balance \\u003e 0) {\\n                // Compute the user\\u0027s share for the week.\\n                toDistrbute +=\\n                    (balance * rewardsPerWeek[weekCursor]) /\\n                    veSPASupply[weekCursor];\\n            }\\n\\n            weekCursor += WEEK;\\n        }\\n\\n        return (weekCursor, toDistrbute);\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"CheckpointAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_staked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastRewardClaimTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardClaimedTill\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Killed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newNo\",\"type\":\"uint256\"}],\"name\":\"MaxIterationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardsCheckpointed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMERGENCY_RETURN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CHECKPOINT_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCheckpointReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"restake\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"restake\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"computeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardCheckpointTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIterations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeCursorOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAllowCheckpointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIterationNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxIterations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veSPA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"veSPASupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RewardDistributor_v1", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000062563a16", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2077572ba7a3d2ab5bb629497ea83148a40c1dd00aad40be28939426610837ec"}]}