{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"Corny.sol\":{\"content\":\"//Website : cornyvalley.io\\r\\n//Telegram : t.me/cornyvalley\\r\\n\\r\\n//\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\\r\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\\r\\n//\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\\r\\n//\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\\r\\n//\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\r\\n//\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./IUniswapV2Factory.sol\\u0027;\\r\\nimport \\u0027./IUniswapV2Pair.sol\\u0027;\\r\\nimport \\u0027./IUniswapV2Router02.sol\\u0027;\\r\\n\\r\\ncontract Corny is Context, IERC20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  address payable public marketingAddress =\\r\\n    payable(0xf69f39506592c997c3E1Fa6f6cb73637EE92fd38); // Marketing Address\\r\\n    \\r\\n  address payable public maintenanceAddress =\\r\\n    payable(0x0917f17ECc8Bca9b720e7b46fB5472035A1849F4); // Project Maintenance\\r\\n    \\r\\n  address payable public treasuryAddress =\\r\\n    payable(0x53196Cc8ac0CA3D7f03a944299987C8310096E41); // Treasury\\r\\n    \\r\\n  address public immutable deadAddress =\\r\\n    0x000000000000000000000000000000000000dEaD;\\r\\n  mapping(address =\\u003e uint256) private _rOwned;\\r\\n  mapping(address =\\u003e uint256) private _tOwned;\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n  mapping(address =\\u003e bool) private _isSniper;\\r\\n  address[] private _confirmedSnipers;\\r\\n\\r\\n  mapping(address =\\u003e bool) private _isExcludedFromFee;\\r\\n  mapping(address =\\u003e bool) private _isExcluded;\\r\\n  address[] private _excluded;\\r\\n  \\r\\n  // limit\\r\\n   mapping (address =\\u003e bool) private _isExcludedFromMaxTxAmount;\\r\\n\\r\\n  uint256 private constant MAX = ~uint256(0);\\r\\n  uint256 private _tTotal = 1000000000* 10**18;\\r\\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n  uint256 private _tFeeTotal;\\r\\n\\r\\n  string private _name = \\u0027CornyValley\\u0027;\\r\\n  string private _symbol = \\u0027Corny\\u0027;\\r\\n  uint8 private _decimals = 18;\\r\\n\\r\\n  uint256 public _taxFee = 0;\\r\\n  uint256 private _previousTaxFee = _taxFee;\\r\\n\\r\\n  uint256 public _liquidityFee = 10;\\r\\n  uint256 private _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n  uint256 public _feeRate = 10;\\r\\n  uint256 launchTime;\\r\\n\\r\\n  // limit\\r\\n  uint256 public _maxTxAmount = 5000000 * 10**18;\\r\\n\\r\\n  IUniswapV2Router02 public uniswapV2Router;\\r\\n  address public uniswapV2Pair;\\r\\n\\r\\n  bool inSwapAndLiquify;\\r\\n\\r\\n  bool tradingOpen = false;\\r\\n\\r\\n  event SwapETHForTokens(uint256 amountIn, address[] path);\\r\\n\\r\\n  event SwapTokensForETH(uint256 amountIn, address[] path);\\r\\n\\r\\n  modifier lockTheSwap() {\\r\\n    inSwapAndLiquify = true;\\r\\n    _;\\r\\n    inSwapAndLiquify = false;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    _rOwned[_msgSender()] = _rTotal;\\r\\n    emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n  }\\r\\n\\r\\n  function initContract() external onlyOwner {\\r\\n    // PancakeSwap: 0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n    // Uniswap V2: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n    // Swapee: 0x600d0b65C2A25b64C9b517A43B7a44592448d285\\r\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n      0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n    );\\r\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\r\\n      address(this),\\r\\n      _uniswapV2Router.WETH()\\r\\n    );\\r\\n\\r\\n    uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n    _isExcludedFromFee[owner()] = true;\\r\\n    _isExcludedFromFee[address(this)] = true;\\r\\n  }\\r\\n\\r\\n  function openTrading() external onlyOwner {\\r\\n    _liquidityFee = _previousLiquidityFee;\\r\\n    _taxFee = _previousTaxFee;\\r\\n    tradingOpen = true;\\r\\n    launchTime = block.timestamp;\\r\\n  }\\r\\n\\r\\n  function toggleTrading() external onlyOwner {\\r\\n    tradingOpen = tradingOpen ? false : true;\\r\\n  }\\r\\n\\r\\n  function name() public view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() public view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() public view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return _tTotal;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n    if (_isExcluded[account]) return _tOwned[account];\\r\\n    return tokenFromReflection(_rOwned[account]);\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) public override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(\\r\\n      sender,\\r\\n      _msgSender(),\\r\\n      _allowances[sender][_msgSender()].sub(\\r\\n        amount,\\r\\n        \\u0027ERC20: transfer amount exceeds allowance\\u0027\\r\\n      )\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(\\r\\n      _msgSender(),\\r\\n      spender,\\r\\n      _allowances[_msgSender()][spender].add(addedValue)\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(\\r\\n      _msgSender(),\\r\\n      spender,\\r\\n      _allowances[_msgSender()][spender].sub(\\r\\n        subtractedValue,\\r\\n        \\u0027ERC20: decreased allowance below zero\\u0027\\r\\n      )\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function isExcludedFromReward(address account) external view returns (bool) {\\r\\n    return _isExcluded[account];\\r\\n  }\\r\\n\\r\\n  function totalFees() external view returns (uint256) {\\r\\n    return _tFeeTotal;\\r\\n  }\\r\\n\\r\\n  function deliver(uint256 tAmount) external {\\r\\n    address sender = _msgSender();\\r\\n    require(\\r\\n      !_isExcluded[sender],\\r\\n      \\u0027Excluded addresses cannot call this function\\u0027\\r\\n    );\\r\\n    (uint256 rAmount, , , , , ) = _getValues(tAmount);\\r\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n    _rTotal = _rTotal.sub(rAmount);\\r\\n    _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n  }\\r\\n\\r\\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(tAmount \\u003c= _tTotal, \\u0027Amount must be less than supply\\u0027);\\r\\n    if (!deductTransferFee) {\\r\\n      (uint256 rAmount, , , , , ) = _getValues(tAmount);\\r\\n      return rAmount;\\r\\n    } else {\\r\\n      (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\r\\n      return rTransferAmount;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\r\\n    require(rAmount \\u003c= _rTotal, \\u0027Amount must be less than total reflections\\u0027);\\r\\n    uint256 currentRate = _getRate();\\r\\n    return rAmount.div(currentRate);\\r\\n  }\\r\\n\\r\\n  function excludeFromReward(address account) public onlyOwner {\\r\\n    require(!_isExcluded[account], \\u0027Account is already excluded\\u0027);\\r\\n    if (_rOwned[account] \\u003e 0) {\\r\\n      _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n    _isExcluded[account] = true;\\r\\n    _excluded.push(account);\\r\\n  }\\r\\n\\r\\n  function includeInReward(address account) external onlyOwner {\\r\\n    require(_isExcluded[account], \\u0027Account is already excluded\\u0027);\\r\\n    for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n      if (_excluded[i] == account) {\\r\\n        _excluded[i] = _excluded[_excluded.length - 1];\\r\\n        _tOwned[account] = 0;\\r\\n        _isExcluded[account] = false;\\r\\n        _excluded.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) private {\\r\\n    require(owner != address(0), \\u0027ERC20: approve from the zero address\\u0027);\\r\\n    require(spender != address(0), \\u0027ERC20: approve to the zero address\\u0027);\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) private {\\r\\n    require(from != address(0), \\u0027ERC20: transfer from the zero address\\u0027);\\r\\n    require(to != address(0), \\u0027ERC20: transfer to the zero address\\u0027);\\r\\n    require(amount \\u003e 0, \\u0027Transfer amount must be greater than zero\\u0027);\\r\\n    require(!_isSniper[to], \\u0027You have no power here!\\u0027);\\r\\n    require(!_isSniper[msg.sender], \\u0027You have no power here!\\u0027);\\r\\n\\r\\n// limit\\r\\n    if(from != owner() \\u0026\\u0026 to != owner() \\u0026\\u0026 !_isExcludedFromMaxTxAmount[from]) {\\r\\n            require(amount \\u003c= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n        }\\r\\n\\r\\n    // buy\\r\\n    if (\\r\\n      from == uniswapV2Pair \\u0026\\u0026\\r\\n      to != address(uniswapV2Router) \\u0026\\u0026\\r\\n      !_isExcludedFromFee[to]\\r\\n    ) {\\r\\n      require(tradingOpen, \\u0027Trading not yet enabled.\\u0027);\\r\\n\\r\\n      //antibot\\r\\n      if (block.timestamp == launchTime) {\\r\\n        _isSniper[to] = true;\\r\\n        _confirmedSnipers.push(to);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n    // sell\\r\\n    if (!inSwapAndLiquify \\u0026\\u0026 tradingOpen \\u0026\\u0026 to == uniswapV2Pair) {\\r\\n      if (contractTokenBalance \\u003e 0) {\\r\\n        if (\\r\\n          contractTokenBalance \\u003e balanceOf(uniswapV2Pair).mul(_feeRate).div(100)\\r\\n        ) {\\r\\n          contractTokenBalance = balanceOf(uniswapV2Pair).mul(_feeRate).div(\\r\\n            100\\r\\n          );\\r\\n        }\\r\\n        swapTokens(contractTokenBalance);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    bool takeFee = false;\\r\\n\\r\\n    // take fee only on swaps\\r\\n    if (\\r\\n      (from == uniswapV2Pair || to == uniswapV2Pair) \\u0026\\u0026\\r\\n      !(_isExcludedFromFee[from] || _isExcludedFromFee[to])\\r\\n    ) {\\r\\n      require(tradingOpen, \\u0027Trading not yet enabled.\\u0027);\\r\\n      takeFee = true;\\r\\n    }\\r\\n\\r\\n    _tokenTransfer(from, to, amount, takeFee);\\r\\n  }\\r\\n\\r\\n  function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\\r\\n    swapTokensForEth(contractTokenBalance);\\r\\n\\r\\n    // distribution\\r\\n    uint256 contractETHBalance = address(this).balance;\\r\\n    uint256 transferredBalance = address(this).balance;\\r\\n    if (contractETHBalance \\u003e 0) {\\r\\n     transferToAddressETH(marketingAddress, transferredBalance.mul(25).div(100));\\r\\n     transferToAddressETH(treasuryAddress, transferredBalance.mul(42).div(100));\\r\\n     transferToAddressETH(maintenanceAddress, transferredBalance.mul(33).div(100));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) private {\\r\\n    // generate the uniswap pair path of token -\\u003e weth\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // make the swap\\r\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n      tokenAmount,\\r\\n      0, // accept any amount of ETH\\r\\n      path,\\r\\n      address(this), // The contract\\r\\n      block.timestamp\\r\\n    );\\r\\n\\r\\n    emit SwapTokensForETH(tokenAmount, path);\\r\\n  }\\r\\n\\r\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // add the liquidity\\r\\n    uniswapV2Router.addLiquidityETH{ value: ethAmount }(\\r\\n      address(this),\\r\\n      tokenAmount,\\r\\n      0, // slippage is unavoidable\\r\\n      0, // slippage is unavoidable\\r\\n      owner(),\\r\\n      block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _tokenTransfer(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount,\\r\\n    bool takeFee\\r\\n  ) private {\\r\\n    if (!takeFee) removeAllFee();\\r\\n\\r\\n    if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n      _transferFromExcluded(sender, recipient, amount);\\r\\n    } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n      _transferToExcluded(sender, recipient, amount);\\r\\n    } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n      _transferBothExcluded(sender, recipient, amount);\\r\\n    } else {\\r\\n      _transferStandard(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    if (!takeFee) restoreAllFee();\\r\\n  }\\r\\n\\r\\n  function _transferStandard(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 tAmount\\r\\n  ) private {\\r\\n    (\\r\\n      uint256 rAmount,\\r\\n      uint256 rTransferAmount,\\r\\n      uint256 rFee,\\r\\n      uint256 tTransferAmount,\\r\\n      uint256 tFee,\\r\\n      uint256 tLiquidity\\r\\n    ) = _getValues(tAmount);\\r\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n    _takeLiquidity(tLiquidity);\\r\\n    _reflectFee(rFee, tFee);\\r\\n    emit Transfer(sender, recipient, tTransferAmount);\\r\\n  }\\r\\n\\r\\n  function _transferToExcluded(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 tAmount\\r\\n  ) private {\\r\\n    (\\r\\n      uint256 rAmount,\\r\\n      uint256 rTransferAmount,\\r\\n      uint256 rFee,\\r\\n      uint256 tTransferAmount,\\r\\n      uint256 tFee,\\r\\n      uint256 tLiquidity\\r\\n    ) = _getValues(tAmount);\\r\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n    _takeLiquidity(tLiquidity);\\r\\n    _reflectFee(rFee, tFee);\\r\\n    emit Transfer(sender, recipient, tTransferAmount);\\r\\n  }\\r\\n\\r\\n  function _transferFromExcluded(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 tAmount\\r\\n  ) private {\\r\\n    (\\r\\n      uint256 rAmount,\\r\\n      uint256 rTransferAmount,\\r\\n      uint256 rFee,\\r\\n      uint256 tTransferAmount,\\r\\n      uint256 tFee,\\r\\n      uint256 tLiquidity\\r\\n    ) = _getValues(tAmount);\\r\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n    _takeLiquidity(tLiquidity);\\r\\n    _reflectFee(rFee, tFee);\\r\\n    emit Transfer(sender, recipient, tTransferAmount);\\r\\n  }\\r\\n\\r\\n  function _transferBothExcluded(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 tAmount\\r\\n  ) private {\\r\\n    (\\r\\n      uint256 rAmount,\\r\\n      uint256 rTransferAmount,\\r\\n      uint256 rFee,\\r\\n      uint256 tTransferAmount,\\r\\n      uint256 tFee,\\r\\n      uint256 tLiquidity\\r\\n    ) = _getValues(tAmount);\\r\\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n    _takeLiquidity(tLiquidity);\\r\\n    _reflectFee(rFee, tFee);\\r\\n    emit Transfer(sender, recipient, tTransferAmount);\\r\\n  }\\r\\n\\r\\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n    _rTotal = _rTotal.sub(rFee);\\r\\n    _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n  }\\r\\n\\r\\n  function _getValues(uint256 tAmount)\\r\\n    private\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(\\r\\n      tAmount\\r\\n    );\\r\\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n      tAmount,\\r\\n      tFee,\\r\\n      tLiquidity,\\r\\n      _getRate()\\r\\n    );\\r\\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\\r\\n  }\\r\\n\\r\\n  function _getTValues(uint256 tAmount)\\r\\n    private\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    uint256 tFee = calculateTaxFee(tAmount);\\r\\n    uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\r\\n    return (tTransferAmount, tFee, tLiquidity);\\r\\n  }\\r\\n\\r\\n  function _getRValues(\\r\\n    uint256 tAmount,\\r\\n    uint256 tFee,\\r\\n    uint256 tLiquidity,\\r\\n    uint256 currentRate\\r\\n  )\\r\\n    private\\r\\n    pure\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    uint256 rAmount = tAmount.mul(currentRate);\\r\\n    uint256 rFee = tFee.mul(currentRate);\\r\\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\r\\n    return (rAmount, rTransferAmount, rFee);\\r\\n  }\\r\\n\\r\\n  function _getRate() private view returns (uint256) {\\r\\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n    return rSupply.div(tSupply);\\r\\n  }\\r\\n\\r\\n  function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n    uint256 rSupply = _rTotal;\\r\\n    uint256 tSupply = _tTotal;\\r\\n    for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n      if (_rOwned[_excluded[i]] \\u003e rSupply || _tOwned[_excluded[i]] \\u003e tSupply)\\r\\n        return (_rTotal, _tTotal);\\r\\n      rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n      tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n    }\\r\\n    if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n    return (rSupply, tSupply);\\r\\n  }\\r\\n\\r\\n  function _takeLiquidity(uint256 tLiquidity) private {\\r\\n    uint256 currentRate = _getRate();\\r\\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n    _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n    if (_isExcluded[address(this)])\\r\\n      _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n  }\\r\\n\\r\\n  function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n    return _amount.mul(_taxFee).div(10**2);\\r\\n  }\\r\\n\\r\\n  function calculateLiquidityFee(uint256 _amount)\\r\\n    private\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _amount.mul(_liquidityFee).div(10**2);\\r\\n  }\\r\\n\\r\\n  function removeAllFee() private {\\r\\n    if (_taxFee == 0 \\u0026\\u0026 _liquidityFee == 0) return;\\r\\n\\r\\n    _previousTaxFee = _taxFee;\\r\\n    _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n    _taxFee = 0;\\r\\n    _liquidityFee = 0;\\r\\n  }\\r\\n\\r\\n  function restoreAllFee() private {\\r\\n    _taxFee = _previousTaxFee;\\r\\n    _liquidityFee = _previousLiquidityFee;\\r\\n  }\\r\\n\\r\\n// limit\\r\\n   function isExcludedFromMaxTxAmount(address account) public view returns(bool) {\\r\\n        return _isExcludedFromMaxTxAmount[account];\\r\\n    }\\r\\n\\r\\n  function isExcludedFromFee(address account) external view returns (bool) {\\r\\n    return _isExcludedFromFee[account];\\r\\n  }\\r\\n\\r\\n// limit\\r\\n    function excludeFromMaxTxAmount(address account) public onlyOwner {\\r\\n        _isExcludedFromMaxTxAmount[account] = true;\\r\\n    }\\r\\n\\r\\n  function excludeFromFee(address account) external onlyOwner {\\r\\n    _isExcludedFromFee[account] = true;\\r\\n  }\\r\\n\\r\\n  function includeInFee(address account) external onlyOwner {\\r\\n    _isExcludedFromFee[account] = false;\\r\\n  }\\r\\n\\r\\n// limit\\r\\n   function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\\r\\n        _maxTxAmount = maxTxAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n  function setTaxFeePercent(uint256 taxFee) external onlyOwner {\\r\\n    _taxFee = taxFee;\\r\\n  }\\r\\n\\r\\n  function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\\r\\n    _liquidityFee = liquidityFee;\\r\\n  }\\r\\n\\r\\n  function setMarketingAddress(address _marketingAddress) external onlyOwner {\\r\\n    marketingAddress = payable(_marketingAddress);\\r\\n  }\\r\\n  \\r\\n    function setMaintenanceAddress(address _maintenanceAddress) external onlyOwner {\\r\\n    maintenanceAddress = payable(_maintenanceAddress);\\r\\n  }\\r\\n  \\r\\n    function setTreasuryAddress(address _treasuryAddress) external onlyOwner {\\r\\n    treasuryAddress = payable(_treasuryAddress);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  function transferToAddressETH(address payable recipient, uint256 amount)\\r\\n    private\\r\\n  {\\r\\n    recipient.transfer(amount);\\r\\n  }\\r\\n\\r\\n  function isRemovedSniper(address account) external view returns (bool) {\\r\\n    return _isSniper[account];\\r\\n  }\\r\\n\\r\\n  function _removeSniper(address account) external onlyOwner {\\r\\n    require(\\r\\n      account != 0x10ED43C718714eb63d5aA57B78B54704E256024E,\\r\\n      \\u0027We can not blacklist Uniswap\\u0027\\r\\n    );\\r\\n    require(!_isSniper[account], \\u0027Account is already blacklisted\\u0027);\\r\\n    _isSniper[account] = true;\\r\\n    _confirmedSnipers.push(account);\\r\\n  }\\r\\n\\r\\n  function _amnestySniper(address account) external onlyOwner {\\r\\n    require(_isSniper[account], \\u0027Account is not blacklisted\\u0027);\\r\\n    for (uint256 i = 0; i \\u003c _confirmedSnipers.length; i++) {\\r\\n      if (_confirmedSnipers[i] == account) {\\r\\n        _confirmedSnipers[i] = _confirmedSnipers[_confirmedSnipers.length - 1];\\r\\n        _isSniper[account] = false;\\r\\n        _confirmedSnipers.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setFeeRate(uint256 rate) external onlyOwner {\\r\\n    _feeRate = rate;\\r\\n  }\\r\\n\\r\\n  //to recieve ETH from uniswapV2Router when swaping\\r\\n  receive() external payable {}\\r\\n\\r\\n  // Withdraw ETH that gets stuck in contract by accident\\r\\n  function emergencyWithdraw() external onlyOwner {\\r\\n    payable(owner()).transfer(address(this).balance);\\r\\n  }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"pragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"pragma solidity \\u003e=0.6.2;\\n\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_amnestySniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRemovedSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintenanceAddress\",\"type\":\"address\"}],\"name\":\"setMaintenanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Corny", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56c84174e06bd154241ce18869098b6b7607bb7fc2b531c46b6275acde52a983"}]}