{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ProposalPayload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.12;\\n\\nimport {IEcosystemReserveController} from \\\"./external/aave/IEcosystemReserveController.sol\\\";\\n\\n/// @title Renew AAVE Grants DAO\\n/// @author Austin Green @AustinGreen\\n/// @notice Renew AGD by transferring $3M AAVE and approving $3M USDC\\ncontract ProposalPayload {\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice AaveEcosystemReserveController address.\\n    IEcosystemReserveController private constant reserveController =\\n        IEcosystemReserveController(0x3d569673dAa0575c936c7c67c4E6AedA69CC630C);\\n\\n    /// @notice aUSDC token.\\n    address private constant aUsdc = 0xBcca60bB61934080951369a648Fb03DF4F96263C;\\n\\n    /// @notice AAVE token.\\n    address private constant aave = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n    /// @notice Aave Grants DAO multisig address.\\n    address private constant aaveGrantsDaoMultisig = 0x89C51828427F70D77875C6747759fB17Ba10Ceb0;\\n\\n    /// @notice Aave Ecosystem Reserve address.\\n    address private constant aaveEcosystemReserve = 0x25F2226B597E8F9514B3F68F00f494cF4f286491;\\n\\n    /// @notice Aave Collector V2 address.\\n    address private constant aaveCollector = 0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c;\\n\\n    // $3,000,000 / 134.28 (coingecko avg opening price from 5/4-5/10)\\n    uint256 private constant aaveAmount = 22341380000000000000000;\\n    uint256 private constant aUsdcAmount = 3000000000000;\\n\\n    /// @notice The AAVE governance executor calls this function to implement the proposal.\\n    function execute() external {\\n        reserveController.transfer(aaveEcosystemReserve, aave, aaveGrantsDaoMultisig, aaveAmount);\\n        reserveController.approve(aaveCollector, aUsdc, aaveGrantsDaoMultisig, aUsdcAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/external/aave/IEcosystemReserveController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IEcosystemReserveController {\\n    /**\\n     * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param token The asset address\\n     * @param recipient Allowance's recipient\\n     * @param amount Allowance to approve\\n     **/\\n    function approve(\\n        address collector,\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param token The asset address\\n     * @param recipient Transfer's recipient\\n     * @param amount Amount to transfer\\n     **/\\n    function transfer(\\n        address collector,\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ds/=lib/ds-test/src/\",\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"@std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProposalPayload", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}