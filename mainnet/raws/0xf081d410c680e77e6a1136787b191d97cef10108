{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IPoolFactory.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IPoolCallback.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IDebt.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/base/Multicall.sol\\\";\\n\\ncontract Router is IRouter, IPoolCallback, Multicall {\\n    fallback() external {}\\n    receive() payable external {}\\n\\n    using SafeERC20 for IERC20;\\n\\n    address public _factory;\\n    address public _wETH;\\n    address private _uniV3Factory;\\n    address private _uniV2Factory;\\n    address private _sushiFactory;\\n    uint32 private _tokenId = 0;\\n\\n    struct tokenDate {\\n        address user;\\n        address poolAddress;\\n        uint32 positionId;\\n    }\\n\\n    mapping(uint32 => tokenDate) public _tokenData;\\n\\n    constructor(address factory, address uniV3Factory, address uniV2Factory, address sushiFactory, address wETH) {\\n        _factory = factory;\\n        _uniV3Factory = uniV3Factory;\\n        _uniV2Factory = uniV2Factory;\\n        _sushiFactory = sushiFactory;\\n        _wETH = wETH;\\n    }\\n\\n    function poolV2Callback(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external override payable {\\n        IPoolFactory qilin = IPoolFactory(_factory);\\n        require(\\n            qilin.pools(poolToken, oraclePool, reverse) == msg.sender,\\n            \\\"poolV2Callback caller is not the pool contract\\\"\\n        );\\n\\n        if (poolToken == _wETH && address(this).balance >= amount) {\\n            IWETH wETH = IWETH(_wETH);\\n            wETH.deposit{value: amount}();\\n            wETH.transfer(msg.sender, amount);\\n        } else {\\n            IERC20(poolToken).safeTransferFrom(payer, msg.sender, amount);\\n        }\\n    }\\n\\n    function poolV2RemoveCallback(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external override {\\n        IPoolFactory qilin = IPoolFactory(_factory);\\n        require(\\n            qilin.pools(poolToken, oraclePool, reverse) == msg.sender,\\n            \\\"poolV2Callback caller is not the pool contract\\\"\\n        );\\n\\n        IERC20(msg.sender).safeTransferFrom(payer, msg.sender, amount);\\n    }\\n\\n    function poolV2BondsCallback(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external override {\\n        address pool = IPoolFactory(_factory).pools(poolToken, oraclePool, reverse);\\n        require(\\n             pool == msg.sender,\\n            \\\"poolV2BondsCallback caller is not the pool contract\\\"\\n        );\\n\\n        address debt = IPool(pool).debtToken();\\n\\n        IERC20(debt).safeTransferFrom(payer, debt, amount);\\n    }\\n\\n    function poolV2BondsCallbackFromDebt(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external override {\\n        address pool = IPoolFactory(_factory).pools(poolToken, oraclePool, reverse);\\n        address debt = IPool(pool).debtToken();\\n        require(\\n            debt == msg.sender,\\n            \\\"poolV2BondsCallbackFromDebt caller is not the debt contract\\\"\\n        );\\n\\n        IERC20(debt).safeTransferFrom(payer, debt, amount);\\n    }\\n\\n    function getPoolFromUni(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse\\n    ) public view returns (address) {\\n        address oraclePool;\\n\\n        if (fee == 0) {\\n            oraclePool = IUniswapV2Factory(_uniV2Factory).getPair(tradeToken, poolToken);\\n        } else {\\n            oraclePool = IUniswapV3Factory(_uniV3Factory).getPool(tradeToken, poolToken, fee);\\n        }\\n\\n        return IPoolFactory(_factory).pools(poolToken, oraclePool, reverse);\\n    }\\n\\n    function getPoolFromSushi(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse\\n    ) public view returns (address) {\\n        address oraclePool = IUniswapV2Factory(_sushiFactory).getPair(tradeToken, poolToken);\\n        return IPoolFactory(_factory).pools(poolToken, oraclePool, reverse);\\n    }\\n\\n    function createPoolFromUni(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse\\n    ) external override {\\n        IPoolFactory(_factory).createPoolFromUni(tradeToken, poolToken, fee, reverse);\\n    }\\n\\n    function createPoolFromSushi(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse\\n    ) external override {\\n        IPoolFactory(_factory).createPoolFromSushi(tradeToken, poolToken, reverse);\\n    }\\n\\n    function getLsBalance(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        address user\\n    ) external override view returns (uint256) {\\n        address pool = getPoolFromUni(tradeToken, poolToken, fee, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        return IERC20(pool).balanceOf(user);\\n    }\\n\\n    function getLsBalance2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        address user\\n    ) external override view returns (uint256) {\\n        address pool = getPoolFromSushi(tradeToken, poolToken, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        return IERC20(pool).balanceOf(user);\\n    }\\n\\n    function getLsPrice(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse\\n    ) external override view returns (uint256) {\\n        address pool = getPoolFromUni(tradeToken, poolToken, fee, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        return IPool(pool).lsTokenPrice();\\n    }\\n\\n    function getLsPrice2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse\\n    ) external override view returns (uint256) {\\n        address pool = getPoolFromSushi(tradeToken, poolToken, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        return IPool(pool).lsTokenPrice();\\n    }\\n\\n    function addLiquidity(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint256 amount\\n    ) external override payable {\\n        address pool = getPoolFromUni(tradeToken, poolToken, fee, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        IPool(pool).addLiquidity(msg.sender, amount);\\n    }\\n\\n    function addLiquidity2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint256 amount\\n    ) external override payable {\\n        address pool = getPoolFromSushi(tradeToken, poolToken, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        IPool(pool).addLiquidity(msg.sender, amount);\\n    }\\n\\n    function removeLiquidity(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint256 lsAmount,\\n        uint256 bondsAmount,\\n        address receipt\\n    ) external override {\\n        address pool = getPoolFromUni(tradeToken, poolToken, fee, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        IPool(pool).removeLiquidity(msg.sender, lsAmount, bondsAmount, receipt);\\n    }\\n\\n    function removeLiquidity2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint256 lsAmount,\\n        uint256 bondsAmount,\\n        address receipt\\n    ) external override {\\n        address pool = getPoolFromSushi(tradeToken, poolToken, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        IPool(pool).removeLiquidity(msg.sender, lsAmount, bondsAmount, receipt);\\n    }\\n\\n    function openPosition(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint8 direction,\\n        uint16 leverage,\\n        uint256 position\\n    ) external override payable {\\n        address pool = getPoolFromUni(tradeToken, poolToken, fee, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        _tokenId++;\\n        uint32 positionId = IPool(pool).openPosition(\\n            msg.sender,\\n            direction,\\n            leverage,\\n            position\\n        );\\n        tokenDate memory tempTokenDate = tokenDate(\\n            msg.sender,\\n            pool,\\n            positionId\\n        );\\n        _tokenData[_tokenId] = tempTokenDate;\\n        emit TokenCreate(_tokenId, address(pool), msg.sender, positionId);\\n    }\\n\\n    function openPosition2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint8 direction,\\n        uint16 leverage,\\n        uint256 position\\n    ) external override payable {\\n        address pool = getPoolFromSushi(tradeToken, poolToken, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        _tokenId++;\\n        uint32 positionId = IPool(pool).openPosition(\\n            msg.sender,\\n            direction,\\n            leverage,\\n            position\\n        );\\n        tokenDate memory tempTokenDate = tokenDate(\\n            msg.sender,\\n            pool,\\n            positionId\\n        );\\n        _tokenData[_tokenId] = tempTokenDate;\\n        emit TokenCreate(_tokenId, address(pool), msg.sender, positionId);\\n    }\\n\\n    function addMargin(uint32 tokenId, uint256 margin) external override payable {\\n        tokenDate memory tempTokenDate = _tokenData[tokenId];\\n        require(\\n            tempTokenDate.user == msg.sender,\\n            \\\"token owner not match msg.sender\\\"\\n        );\\n        IPool(tempTokenDate.poolAddress).addMargin(\\n            msg.sender,\\n            tempTokenDate.positionId,\\n            margin\\n        );\\n    }\\n\\n    function closePosition(uint32 tokenId, address receipt) external override {\\n        tokenDate memory tempTokenDate = _tokenData[tokenId];\\n        require(\\n            tempTokenDate.user == msg.sender,\\n            \\\"token owner not match msg.sender\\\"\\n        );\\n        IPool(tempTokenDate.poolAddress).closePosition(\\n            receipt,\\n            tempTokenDate.positionId\\n        );\\n    }\\n\\n    function liquidate(uint32 tokenId, address receipt) external override {\\n        tokenDate memory tempTokenDate = _tokenData[tokenId];\\n        require(tempTokenDate.user != address(0), \\\"tokenId does not exist\\\");\\n        IPool(tempTokenDate.poolAddress).liquidate(\\n            msg.sender,\\n            tempTokenDate.positionId,\\n            receipt\\n        );\\n    }\\n\\n    function liquidateByPool(address poolAddress, uint32 positionId, address receipt) external override {\\n        IPool(poolAddress).liquidate(msg.sender, positionId, receipt);\\n    }\\n\\n    function withdrawERC20(address poolToken) external override {\\n        IERC20 erc20 = IERC20(poolToken);\\n        uint256 balance = erc20.balanceOf(address(this));\\n        require(balance > 0, \\\"balance of router must > 0\\\");\\n        erc20.safeTransfer(msg.sender, balance);\\n    }\\n\\n    function withdrawETH() external override {\\n        uint256 balance = IERC20(_wETH).balanceOf(address(this));\\n        require(balance > 0, \\\"balance of router must > 0\\\");\\n        IWETH(_wETH).withdraw(balance);\\n        (bool success, ) = msg.sender.call{value: balance}(new bytes(0));\\n        require(success, \\\"ETH transfer failed\\\");\\n    }\\n\\n    function repayLoan(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint256 amount,\\n        address receipt\\n    ) external override payable {\\n        address pool = getPoolFromUni(tradeToken, poolToken, fee, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        address debtToken = IPool(pool).debtToken();\\n        IDebt(debtToken).repayLoan(msg.sender, receipt, amount);\\n    }\\n\\n    function repayLoan2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint256 amount,\\n        address receipt\\n    ) external override payable {\\n        address pool = getPoolFromSushi(tradeToken, poolToken, reverse);\\n        require(pool != address(0), \\\"non-exist pool\\\");\\n        address debtToken = IPool(pool).debtToken();\\n        IDebt(debtToken).repayLoan(msg.sender, receipt, amount);\\n    }\\n\\n    function exit(uint32 tokenId, address receipt) external override {\\n        tokenDate memory tempTokenDate = _tokenData[tokenId];\\n        require(\\n            tempTokenDate.user == msg.sender,\\n            \\\"token owner not match msg.sender\\\"\\n        );\\n        IPool(tempTokenDate.poolAddress).exit(\\n            receipt,\\n            tempTokenDate.positionId\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/base/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport '../interfaces/IMulticall.sol';\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IRouter {\\n    function createPoolFromUni(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse\\n    ) external;\\n\\n    function createPoolFromSushi(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse\\n    ) external;\\n\\n    function getLsBalance(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        address user\\n    ) external view returns (uint256);\\n\\n    function getLsBalance2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        address user\\n    ) external view returns (uint256);\\n\\n    function getLsPrice(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse\\n    ) external view returns (uint256);\\n\\n    function getLsPrice2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse\\n    ) external view returns (uint256);\\n\\n    function addLiquidity(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint256 amount\\n    ) external payable;\\n\\n    function addLiquidity2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint256 amount\\n    ) external payable;\\n\\n    function removeLiquidity(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint256 lsAmount,\\n        uint256 bondsAmount,\\n        address receipt\\n    ) external;\\n\\n    function removeLiquidity2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint256 lsAmount,\\n        uint256 bondsAmount,\\n        address receipt\\n    ) external;\\n\\n    function openPosition(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint8 direction,\\n        uint16 leverage,\\n        uint256 position\\n    ) external payable;\\n\\n    function openPosition2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint8 direction,\\n        uint16 leverage,\\n        uint256 position\\n    ) external payable;\\n\\n    function addMargin(uint32 tokenId, uint256 margin) external payable;\\n\\n    function closePosition(uint32 tokenId, address receipt) external;\\n\\n    function liquidate(uint32 tokenId, address receipt) external;\\n\\n    function liquidateByPool(address poolAddress, uint32 positionId, address receipt) external;\\n\\n    function withdrawERC20(address poolToken) external;\\n\\n    function withdrawETH() external;\\n\\n    function repayLoan(\\n        address tradeToken,\\n        address poolToken,\\n        uint24 fee,\\n        bool reverse,\\n        uint256 amount,\\n        address receipt\\n    ) external payable;\\n\\n    function repayLoan2(\\n        address tradeToken,\\n        address poolToken,\\n        bool reverse,\\n        uint256 amount,\\n        address receipt\\n    ) external payable;\\n\\n    function exit(uint32 tokenId, address receipt) external;\\n\\n    event TokenCreate(uint32 tokenId, address pool, address sender, uint32 positionId);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IPoolFactory {\\n    function createPoolFromUni(address tradeToken, address poolToken, uint24 fee, bool reverse) external;\\n\\n    function createPoolFromSushi(address tradeToken, address poolToken, bool reverse) external;\\n\\n    function pools(address poolToken, address oraclePool, bool reverse) external view returns (address pool);\\n\\n    event CreatePoolFromUni(\\n        address tradeToken,\\n        address poolToken,\\n        address uniPool,\\n        address pool,\\n        address debt,\\n        string tradePair,\\n        uint24 fee,\\n        bool reverse);\\n\\n    event CreatePoolFromSushi(\\n        address tradeToken,\\n        address poolToken,\\n        address sushiPool,\\n        address pool,\\n        address debt,\\n        string tradePair,\\n        bool reverse);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPoolCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IPoolCallback {\\n    function poolV2Callback(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external payable;\\n\\n    function poolV2RemoveCallback(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external;\\n\\n    function poolV2BondsCallback(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external;\\n\\n    function poolV2BondsCallbackFromDebt(\\n        uint256 amount,\\n        address poolToken,\\n        address oraclePool,\\n        address payer,\\n        bool reverse\\n    ) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IPool {\\n    struct Position {\\n        uint256 openPrice;\\n        uint256 openBlock;\\n        uint256 margin;\\n        uint256 size;\\n        uint256 openRebase;\\n        address account;\\n        uint8 direction;\\n    }\\n\\n    function _positions(uint32 positionId)\\n        external\\n        view\\n        returns (\\n            uint256 openPrice,\\n            uint256 openBlock,\\n            uint256 margin,\\n            uint256 size,\\n            uint256 openRebase,\\n            address account,\\n            uint8 direction\\n        );\\n\\n    function debtToken() external view returns (address);\\n\\n    function lsTokenPrice() external view returns (uint256);\\n\\n    function addLiquidity(address user, uint256 amount) external;\\n\\n    function removeLiquidity(address user, uint256 lsAmount, uint256 bondsAmount, address receipt) external;\\n\\n    function openPosition(\\n        address user,\\n        uint8 direction,\\n        uint16 leverage,\\n        uint256 position\\n    ) external returns (uint32);\\n\\n    function addMargin(\\n        address user,\\n        uint32 positionId,\\n        uint256 margin\\n    ) external;\\n\\n    function closePosition(\\n        address receipt,\\n        uint32 positionId\\n    ) external;\\n\\n    function liquidate(\\n        address user,\\n        uint32 positionId,\\n        address receipt\\n    ) external;\\n\\n    function exit(\\n        address receipt,\\n        uint32 positionId\\n    ) external;\\n\\n    event MintLiquidity(uint256 amount);\\n\\n    event AddLiquidity(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 lsAmount,\\n        uint256 bonds\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 lsAmount,\\n        uint256 bondsRequired\\n    );\\n\\n    event OpenPosition(\\n        address indexed sender,\\n        uint256 openPrice,\\n        uint256 openRebase,\\n        uint8 direction,\\n        uint16 level,\\n        uint256 margin,\\n        uint256 size,\\n        uint32 positionId\\n    );\\n\\n    event AddMargin(\\n        address indexed sender,\\n        uint256 margin,\\n        uint32 positionId\\n    );\\n\\n    event ClosePosition(\\n        address indexed receipt,\\n        uint256 closePrice,\\n        uint256 serviceFee,\\n        uint256 fundingFee,\\n        uint256 pnl,\\n        uint32  positionId,\\n        bool isProfit,\\n        int256 debtChange\\n    );\\n\\n    event Liquidate(\\n        address indexed sender,\\n        uint32 positionID,\\n        uint256 liqPrice,\\n        uint256 serviceFee,\\n        uint256 fundingFee,\\n        uint256 liqReward,\\n        uint256 pnl,\\n        bool isProfit,\\n        uint256 debtRepay\\n    );\\n\\n    event Rebase(uint256 rebaseAccumulatedLong, uint256 rebaseAccumulatedShort);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IDebt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IDebt {\\n\\n    function owner() external view returns (address);\\n\\n    function issueBonds(address recipient, uint256 amount) external;\\n\\n    function burnBonds(uint256 amount) external;\\n\\n    function repayLoan(address payer, address recipient, uint256 amount) external;\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function bondsLeft() external view returns (uint256);\\n\\n    event RepayLoan(\\n        address indexed receipt,\\n        uint256 bondsTokenAmount,\\n        uint256 poolTokenAmount\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniV3Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sushiFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"name\":\"TokenCreate\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"_tokenData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"createPoolFromSushi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"createPoolFromUni\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLsBalance2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"getLsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"getLsPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"getPoolFromSushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"getPoolFromUni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"liquidateByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"leverage\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"leverage\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"openPosition2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oraclePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"poolV2BondsCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oraclePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"poolV2BondsCallbackFromDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oraclePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"poolV2Callback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oraclePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"}],\"name\":\"poolV2RemoveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondsAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondsAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"removeLiquidity2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"name\":\"repayLoan2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Router", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "00000000000000000000000020ae7bf537c04918760ace7a681e564a60ffa49a0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f9840000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc90b63129b25b03cd934d9c392c543dc17c3074b1ce7ed398dea57dfd0449e4"}]}