{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n                                                                                           Etalon Token ERC20                                                                                           \r\n                                                                                         https://etalontoken.org                                                                                        \r\n                                                                                         https://t.me/etalontoken                                                                                       \r\n                                                                                      https://twitter.com/Etalontoken                                                                                   \r\n\r\n                                                                       *%##### *##%%%###   #%#     +%:      -*%##%#-    %%*    %*                                                                       \r\n                                                                       #@.        -@+     =@-@=    +@-     +@=    +@+   @#@=   @#                                                                       \r\n                                                                       #@.        -@+     @* *@    +@-    .@%      %@.  @+=@-  @#                                                                       \r\n                                                                       #@####:    -@+    +@. .@*   +@-    -@*      #@:  @* *@. @#                                                                       \r\n                                                                       #@.        -@+   .@%===%@:  +@-    .@%      %@.  @*  #% @#                                                                       \r\n                                                                       #@.        -@+   #@::::-@#  +@-     *@-    -@*   @*   %#%#                                                                       \r\n                                                                       #@#####.   -@+  -@+     +@- +@%####. =%%**%%=    @*   .@@#                                                                       \r\n                                                                                                               ..                                                                                       \r\n                                                                                                                                                                                                        \r\n                                                                                                                                                                                                        \r\n                                                                                                  .:-:                                                                                                  \r\n                                                                                                .:::===:                                                                                                \r\n                                                                                              .:::::=====:                                                                                              \r\n                                                                                            .-----::===++++-                                                                                            \r\n                                                                                          .--------:==+++++++-                                                                                          \r\n                                                                                        :-=---------+++++++****-                                                                                        \r\n                                                                                      :======-------++++++*******=                                                                                      \r\n                                                                                    :==========-----++++*******####=                                                                                    \r\n                                                                                  :=++===========---++*******########=                                                                                  \r\n                                                                                :+++++++============********######%%%%%+.                                                                               \r\n                                                                              .=++**#%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@%%%##*:                                                                              \r\n                                                                                        ..:::--==++++++==--:::..                                                                                        \r\n                                                                               ....:::---===+++***####****+++====----:::...                                                                             \r\n                                                                              :**####%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=                                                                              \r\n                                                                                -*###%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@=                                                                                \r\n                                                                                  -##%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@+                                                                                  \r\n                                                                                    -#%%%@@@@@@@@@@@@@@@@@@@@@@@@@@+                                                                                    \r\n                                                                                      =%%@@@@@@@@@@@@@@@@@@@@@@@@+                                                                                      \r\n                                                                                        =%@@@@@@@@@@@@@@@@@@@@@+.                                                                                       \r\n                                                                                          --=++**#%%%%##*++==-.                                                                                         \r\n                                                                                                                                                                                                        \r\n                                                                                               .:...-::-.                                                                                               \r\n                                                                                                :#@@@@%=                                                                                                \r\n                                                                                                  -%%-                                                                                                  \r\n                                                                                                                                                                                                        \r\n                                                                                                                                                                                                        \r\n*/\r\n\r\n\r\n\r\n\r\n// File: contracts/FastSellLimit.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract FastSellLimit {\r\n    mapping(address => uint256) public canSellTimes; // when accounts can sell tokens\r\n\r\n    function updateCanSellTime(\r\n        address account,\r\n        uint256 balance,\r\n        uint256 onePercent\r\n    ) internal {\r\n        canSellTimes[account] =\r\n            block.timestamp +\r\n            getTimeInterval(balance, onePercent);\r\n    }\r\n\r\n    function checkCanSellTime(address account) internal view {\r\n        require(block.timestamp >= canSellTimes[account], \"fast sell limit\");\r\n    }\r\n\r\n    function getTimeInterval(uint256 balance, uint256 onePercent)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (balance >= onePercent) return 24 hours; // if more 1% of total then 24 hours\r\n        return (24 hours * balance) / onePercent;\r\n    }\r\n\r\n    function getLapsedCanSellTime(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 canSellTime = canSellTimes[account];\r\n        if (block.timestamp >= canSellTime) return 0;\r\n        return canSellTime - block.timestamp;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\n// File: contracts/IUniswapV2Router02.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract ERC20 is IERC20 {\r\n    uint256 internal _totalSupply = 1e21;\r\n    string _name;\r\n    string _symbol;\r\n    uint8 constant _decimals = 9;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal constant INFINITY_ALLOWANCE = 2**256 - 1;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external virtual override view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount);\r\n        unchecked {\r\n            _balances[from] = senderBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount);\r\n        if (currentAllowance == INFINITY_ALLOWANCE) return true;\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0));\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount);\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}\r\n\r\n// File: contracts/MaxWalletDynamic.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract MaxWalletDynamic {\r\n    uint256 startMaxWallet;\r\n    uint256 startTime; // last increment time\r\n    uint256 constant maxBuyIncrementMinutesTimer = 2; // increment maxbuy minutes\r\n    uint256 constant maxBuyIncrementPercentil = 1; // increment maxbyu percentil 1000=100%\r\n    uint256 constant maxIncrements = 9; // maximum time incrementations\r\n    uint256 maxBuyIncrementValue; // value for increment maxBuy\r\n\r\n    function startMaxWalletDynamic(uint256 totalSupply) internal {\r\n        startTime = block.timestamp;\r\n        startMaxWallet = totalSupply / 1000;\r\n        maxBuyIncrementValue = (totalSupply * maxBuyIncrementPercentil) / 1000;\r\n    }\r\n\r\n    function checkMaxWallet(uint256 walletSize) internal view {\r\n        require(walletSize <= getMaxWallet(), \"max wallet limit\");\r\n    }\r\n\r\n    function getMaxWallet() public view returns (uint256) {\r\n        uint256 incrementCount = (block.timestamp - startTime) /\r\n            (maxBuyIncrementMinutesTimer * 1 minutes);\r\n        if (incrementCount >= maxIncrements) incrementCount = maxIncrements;\r\n        return startMaxWallet + maxBuyIncrementValue * incrementCount;\r\n    }\r\n}\r\n\r\n// File: contracts/RewardableErc20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\nabstract contract RewardableErc20 is ERC20, MaxWalletDynamic {\r\n    uint256 public constant rewardIntervalDays = 7; // reward interval time\r\n    uint256 public rewardInterval; // current reward interwal\r\n    uint256 public rewardIntervalStartRewards; // current reward interwal start rewards\r\n    uint256 public rewardIntervalLapsedRewards; // current reward interwal lapsed rewards\r\n    uint256 public rewardedTotal; // total rewarded\r\n    uint256 rewardIntervalStartTime; // time, when current reward interval starts\r\n    mapping(address => uint256) _lastClaimedReward; // reward interwals by account claims\r\n    uint256 startRewardsAccountsBalance; // all accounts balance on change reward interval\r\n\r\n    function tryNextRewardInterval() public {\r\n        if (rewardLapsedTime() > 0) return;\r\n        _nextRewardInterval();\r\n    }\r\n\r\n    function _startRewardIntervals() internal {\r\n        _nextRewardInterval();\r\n    }\r\n\r\n    function _nextRewardInterval() internal {\r\n        rewardIntervalStartRewards = _balances[address(this)];\r\n        rewardIntervalLapsedRewards = rewardIntervalStartRewards;\r\n        rewardIntervalStartTime = block.timestamp;\r\n        startRewardsAccountsBalance = getAccountsBalance();\r\n        ++rewardInterval;\r\n    }\r\n\r\n    function getRewardForBalanceThisRewardInterval(uint256 balance)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _getRewardForBalance(\r\n                balance,\r\n                rewardIntervalStartRewards,\r\n                startRewardsAccountsBalance\r\n            );\r\n    }\r\n\r\n    function getRewardForBalanceTotal(uint256 balance)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            _getRewardForBalance(\r\n                balance,\r\n                _balances[address(this)],\r\n                getAccountsBalance()\r\n            );\r\n    }\r\n\r\n    function _getRewardForBalance(\r\n        uint256 balance,\r\n        uint256 startRewardsCount,\r\n        uint256 startBalanceTotal\r\n    ) public view returns (uint256) {\r\n        // if has no rewards on pool\r\n        if (startBalanceTotal == 0) return 0;\r\n        // get reward\r\n        uint256 reward = (startRewardsCount * balance) /\r\n            startBalanceTotal;\r\n        // max wallet limitation\r\n        uint256 maxWallet = getMaxWallet();\r\n        if (balance + reward > maxWallet) reward = maxWallet - balance;\r\n        // return reward\r\n        return reward;\r\n    }\r\n\r\n    /// @dev current available reward for account\r\n    function getRewardCount(address account) external view returns (uint256) {\r\n        if (rewardLapsedTime() == 0)\r\n            return _getRewardForBalance(\r\n                _balances[account],\r\n                _balances[address(this)],\r\n                getAccountsBalance()\r\n            );\r\n        if (_lastClaimedReward[account] == rewardInterval) return 0;\r\n        return\r\n            _getRewardForBalance(\r\n                _balances[account],\r\n                rewardIntervalStartRewards,\r\n                startRewardsAccountsBalance\r\n            );\r\n    }\r\n\r\n    function canClaimReward(address account) external view returns (bool) {\r\n        return rewardLapsedTime() == 0 || _canClaimReward(account);\r\n    }\r\n\r\n    function _canClaimReward(address account) internal view returns (bool) {\r\n        return\r\n            _lastClaimedReward[account] < rewardInterval && rewardInterval != 1;\r\n    }\r\n\r\n    function _tryClaimReward(address account) internal {\r\n        tryNextRewardInterval();\r\n        if (!_canClaimReward(account)) return;\r\n        _claimReward(account);\r\n    }\r\n\r\n    function claimReward(address account) external {\r\n        tryNextRewardInterval();\r\n        require(_canClaimReward(account), \"can not claim reward now\");\r\n        _claimReward(account);\r\n    }\r\n\r\n    function _claimReward(address account) private {\r\n        _lastClaimedReward[account] = rewardInterval;\r\n        uint256 reward = _getRewardForBalance(\r\n            _balances[account],\r\n            rewardIntervalStartRewards,\r\n            startRewardsAccountsBalance\r\n        );\r\n        uint256 balance = _balances[account];\r\n\r\n        if (reward > rewardIntervalLapsedRewards) return;\r\n        _balances[address(this)] -= reward;\r\n        rewardIntervalLapsedRewards -= reward;\r\n        _balances[account] = balance + reward;\r\n        rewardedTotal += reward;\r\n        emit Transfer(address(this), account, reward);\r\n    }\r\n\r\n    function rewardLapsedTime() public view returns (uint256) {\r\n        uint256 nextIntervalTime = rewardIntervalStartTime +\r\n            rewardIntervalDays *\r\n            1 days;\r\n        if (block.timestamp >= nextIntervalTime) return 0;\r\n        return nextIntervalTime - block.timestamp;\r\n    }\r\n\r\n    function getAccountsBalance() public view virtual returns (uint256);\r\n}\r\n\r\n// File: contracts/TradableErc20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract TradableErc20 is RewardableErc20, FastSellLimit, Ownable {\r\n    IUniswapV2Router02 internal constant _uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public uniswapV2Pair;\r\n    bool public tradingEnable = false;\r\n    mapping(address => bool) _isExcludedFromFee;\r\n    address public constant BURN_ADDRESS =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    constructor(string memory name_, string memory symbol_)\r\n        ERC20(name_, symbol_)\r\n    {\r\n        _isExcludedFromFee[address(0)] = true;\r\n        _isExcludedFromFee[BURN_ADDRESS] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function makeLiquidity() public onlyOwner {\r\n        require(uniswapV2Pair == address(0));\r\n        _startRewardIntervals();\r\n        address pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        uint256 initialLiquidity = getSupplyForMakeLiquidity();\r\n        _balances[address(this)] = initialLiquidity;\r\n        emit Transfer(address(0), address(this), initialLiquidity);\r\n        _allowances[address(this)][\r\n            address(_uniswapV2Router)\r\n        ] = INFINITY_ALLOWANCE;\r\n        _isExcludedFromFee[pair] = true;\r\n        _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            initialLiquidity,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        uniswapV2Pair = pair;\r\n        startMaxWalletDynamic(initialLiquidity);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        // claim rewards\r\n        if (from != uniswapV2Pair && !_isExcludedFromFee[from])\r\n            _tryClaimReward(from);\r\n        if (to != uniswapV2Pair && !_isExcludedFromFee[to]) _tryClaimReward(to);\r\n\r\n        require(_balances[from] >= amount, \"not enough token for transfer\");\r\n        require(to != address(0), \"incorrect address\");\r\n\r\n        // buy\r\n        if (from == uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n            require(tradingEnable, \"trading disabled\");\r\n            // get taxes\r\n            amount = _getFeeBuy(from, to, amount);\r\n            // check max wallet\r\n            checkMaxWallet(_balances[to] + amount);\r\n        }\r\n        // sell\r\n        else if (\r\n            uniswapV2Pair != address(0) &&\r\n            to == uniswapV2Pair &&\r\n            !_isExcludedFromFee[from]\r\n        ) {\r\n            require(tradingEnable, \"trading disabled\");\r\n            // can sell timer\r\n            checkCanSellTime(from);\r\n            updateCanSellTime(from, _balances[from], _totalSupply / 100);\r\n            // fee\r\n            amount = _getFeeSell(from, amount);\r\n        }\r\n        // transfer from wallet to wallet\r\n        else {\r\n            if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                // can sell timer\r\n                checkCanSellTime(from);\r\n                updateCanSellTime(from, _balances[from], _totalSupply / 100);\r\n                // get taxes\r\n                amount = _getFeeTransfer(from, amount);\r\n                // check max wallet\r\n                checkMaxWallet(_balances[to] + amount);\r\n            }\r\n        }\r\n\r\n        // transfer\r\n        super._transfer(from, to, amount);\r\n        if (to == address(BURN_ADDRESS)) _totalSupply -= amount;\r\n    }\r\n\r\n    function getBFee(uint256 amount) public view returns (uint256) {\r\n        uint256 onePercent = _totalSupply / 100;\r\n        if (amount >= onePercent) return amount / 5; // if more 1% of total then fee 20%\r\n        return (amount * amount) / (5 * onePercent);\r\n    }\r\n\r\n    function getCFee(uint256 walletSize, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 onePercent = _totalSupply / 100;\r\n        if (walletSize >= onePercent) return amount / 10; // if more 1% of liquidity then fee 10%\r\n        return (amount * walletSize) / (10 * onePercent);\r\n    }\r\n\r\n    function getIFee(uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count = (_balances[uniswapV2Pair]) / 12; // 8.33% i.e. 30% fee is for 5% liquidity\r\n        if (amount >= count) return amount / 2; // if more 8.33% of liquidity then fee 50%\r\n        return (amount * amount) / (2 * count);\r\n    }\r\n\r\n    function getFeeBuy(address account, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 a = amount / 100;\r\n        uint256 b = getBFee(amount);\r\n        uint256 c = getCFee(_balances[account] + amount, amount);\r\n        return a + b + c;\r\n    }\r\n\r\n    function getFeeSell(address account, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 c = getCFee(_balances[account], amount);\r\n        uint256 i = getIFee(amount);\r\n        return c + i;\r\n    }\r\n\r\n    function getFeeTransfer(address account, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getCFee(_balances[account] + amount, amount);\r\n    }\r\n\r\n    function _getFeeBuy(address pair, address to, uint256 amount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return _arrangeFee(pair, amount, getFeeBuy(to, amount));\r\n    }\r\n\r\n    function _getFeeSell(address from, uint256 amount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return _arrangeFee(from, amount, getFeeSell(from, amount));\r\n    }\r\n\r\n    function _getFeeTransfer(address from, uint256 amount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        return _arrangeFee(from, amount, getFeeTransfer(from, amount));\r\n    }\r\n\r\n    function _arrangeFee(\r\n        address from,\r\n        uint256 amount,\r\n        uint256 fee\r\n    ) private returns (uint256) {\r\n        uint256 reward = fee / 2;\r\n        uint256 burn = fee - reward;\r\n        amount -= fee;\r\n        _balances[from] -= fee;\r\n        _balances[address(this)] += reward;\r\n        _balances[BURN_ADDRESS] += burn;\r\n        _totalSupply -= burn;\r\n        emit Transfer(from, address(this), reward);\r\n        emit Transfer(from, BURN_ADDRESS, burn);\r\n        return amount;\r\n    }\r\n\r\n    function setExcludeFromFee(address[] memory accounts, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            _isExcludedFromFee[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setTradingEnable(bool value) external onlyOwner {\r\n        tradingEnable = value;\r\n    }\r\n\r\n    function getSupplyForMakeLiquidity() internal virtual returns (uint256);\r\n}\r\n\r\n// File: contracts/ETALON.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ncontract ETALON is TradableErc20 {\r\n    constructor() TradableErc20(\"Etalon\", \"ETA\") {}\r\n\r\n    function getSupplyForMakeLiquidity()\r\n        internal\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getAccountsBalance() public view override returns (uint256) {\r\n        return\r\n            _totalSupply - _balances[uniswapV2Pair] - _balances[address(this)];\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (_isExcludedFromFee[account] || !this.canClaimReward(account))\r\n            return _balances[account];\r\n        return _balances[account] + this.getRewardCount(account);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startRewardsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBalanceTotal\",\"type\":\"uint256\"}],\"name\":\"_getRewardForBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canSellTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFeeTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getIFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLapsedCanSellTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getRewardForBalanceThisRewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getRewardForBalanceTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIntervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIntervalLapsedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIntervalStartRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLapsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryNextRewardInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETALON", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b078296eb8cac9d2c9807c96260d96f0c76c4e5aaa1e236a70cf3401054c865"}]}