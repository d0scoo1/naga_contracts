{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 no_of_tokens_to_create,\r\n        string calldata _uri\r\n    ) external;\r\n\r\n    function tokensOwned(address holder) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function contractSafeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IClubVirtualERC1155 {\r\n    function mint(\r\n        address _to,\r\n        uint256 no_of_tokens_to_create,\r\n        string calldata _uri\r\n    ) external returns (uint256);\r\n\r\n    function contractSafeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 tokenAmount\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amountoftoken\r\n    ) external;\r\n}\r\n\r\ncontract NFTAuction is Ownable, ReentrancyGuard {\r\n    bool runInitialize;\r\n\r\n    address public platformNormalNFT;\r\n    address public platformLazyNFT;\r\n    address public platformERC1155NFT;\r\n\r\n    event SaleCreated(\r\n        uint indexed tokenID,\r\n        address nftContract,\r\n        address seller,\r\n        uint256 buyNowPrice\r\n    );\r\n    event Sale1155(\r\n        uint indexed tokenID,\r\n        address nftContract,\r\n        address seller,\r\n        uint256 buyNowPrice\r\n    );\r\n    event CreateAuction(\r\n        uint indexed tokenID,\r\n        address nftContract,\r\n        address seller,\r\n        uint256 minPrice\r\n    );\r\n\r\n    mapping(address => mapping(uint256 => Auction)) public nftContractAuctions;\r\n    mapping(address => mapping(uint256 => Sale)) public nftContractSale;\r\n    mapping(address => mapping(uint256 => address)) public nftOwner;\r\n    mapping(address => mapping(uint256 => Royalty)) public nftRoyalty;\r\n    mapping(address => mapping(uint256 => Proposal)) public buyProposal;\r\n    mapping(address => mapping(uint256 => ERC1155Sale))\r\n        public nftContract1155Sale;\r\n\r\n    struct Auction {\r\n        //map token ID to\r\n        uint256 minPrice;\r\n        uint256 auctionBidPeriod; //Increments the length of time the auction is open in which a new bid can be made after each bid.\r\n        uint256 auctionEnd;\r\n        uint256 nftHighestBid;\r\n        uint256 auctionStartTime;\r\n        uint32 bidIncreasePercentage;\r\n        uint32 ownerPercentage;\r\n        uint32 platformPercentage;\r\n        address nftHighestBidder;\r\n        address nftSeller;\r\n        address ERC20Token; // The seller can specify an ERC20 token that can be used to bid or purchase the NFT\r\n    }\r\n\r\n    struct Sale {\r\n        address nftSeller;\r\n        address ERC20Token;\r\n        uint32 ownerPercentage;\r\n        uint32 platformPercentage;\r\n        uint256 buyNowPrice;\r\n    }\r\n\r\n    struct Royalty {\r\n        address royaltyOwner;\r\n        uint256 royaltyPercentage;\r\n        bool activated;\r\n    }\r\n\r\n    struct Proposal {\r\n        address buyer;\r\n        uint256 price;\r\n    }\r\n\r\n    struct ERC1155Sale {\r\n        address nftSeller;\r\n        address ERC20Token;\r\n        uint32 ownerPercentage;\r\n        uint32 platformPercentage;\r\n        uint256 tokenAmount;\r\n        uint256 buyNowPrice;\r\n    }\r\n\r\n    modifier minimumBidNotMade(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            !_isMinimumBidMade(_nftContractAddress, _tokenId),\r\n            \"Bid is present\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier auctionOngoing(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            _isAuctionOngoing(_nftContractAddress, _tokenId),\r\n            \"Auction has ended\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isAuctionOver(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            !_isAuctionOngoing(_nftContractAddress, _tokenId),\r\n            \"Auction not over\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier priceGreaterThanZero(uint256 _price) {\r\n        require(_price > 0, \"Price cannot be 0\");\r\n        _;\r\n    }\r\n\r\n    modifier paymentAccepted(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _tokenAmount\r\n    ) {\r\n        require(\r\n            _isPaymentAccepted(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                _erc20Token,\r\n                _tokenAmount\r\n            ),\r\n            \"Payment invalid\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0), \"Given zero address\");\r\n        _;\r\n    }\r\n\r\n    modifier notNftSeller(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            msg.sender !=\r\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\r\n            \"Owner cannot bid on own NFT\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyNftSeller(address _nftContractAddress, uint256 _tokenId) {\r\n        require(\r\n            msg.sender ==\r\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\r\n            \"Only Seller Function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // One time set NFT token contract\r\n    function initialize(\r\n        address _platformNormalNFT,\r\n        address _platformLazyNFT,\r\n        address _platformERC1155NFT\r\n    ) public onlyOwner {\r\n        require(runInitialize == false, \"NFT contract already set\");\r\n        platformNormalNFT = _platformNormalNFT;\r\n        platformLazyNFT = _platformLazyNFT;\r\n        platformERC1155NFT = _platformERC1155NFT;\r\n        runInitialize = true;\r\n    }\r\n\r\n    function _isPaymentAccepted(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _bidERC20Token,\r\n        uint256 _tokenAmount\r\n    ) internal view returns (bool) {\r\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ERC20Token;\r\n        if (_isERC20Auction(auctionERC20Token)) {\r\n            return\r\n                msg.value == 0 &&\r\n                auctionERC20Token == _bidERC20Token &&\r\n                _tokenAmount > 0;\r\n        } else {\r\n            return\r\n                msg.value != 0 &&\r\n                _bidERC20Token == address(0) &&\r\n                _tokenAmount == 0;\r\n        }\r\n    }\r\n\r\n    function _isERC20Auction(address _auctionERC20Token)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return _auctionERC20Token != address(0);\r\n    }\r\n\r\n    function _getBidIncreasePercentage(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId\r\n    ) internal view returns (uint256) {\r\n        uint256 bidIncreasePercentage = nftContractAuctions[\r\n            _nftContractAddress\r\n        ][_tokenId].bidIncreasePercentage;\r\n        return bidIncreasePercentage;\r\n    }\r\n\r\n    /*\r\n     * NFTs in a batch must contain between 2 and 100 NFTs\r\n     */\r\n    modifier batchWithinLimits(uint256 _batchTokenIdsLength) {\r\n        require(\r\n            _batchTokenIdsLength > 1 && _batchTokenIdsLength <= 10000,\r\n            \"Number of NFTs not applicable\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setRoyaltyData(\r\n        uint256 _tokenId,\r\n        uint256 _royaltyPercentage,\r\n        address _royaltyOwner\r\n    ) external {\r\n        require(msg.sender == platformLazyNFT, \"Only run on redeem\");\r\n        Royalty storage _royalty = nftRoyalty[platformLazyNFT][_tokenId];\r\n        _royalty.royaltyOwner = _royaltyOwner;\r\n        _royalty.royaltyPercentage = _royaltyPercentage;\r\n        _royalty.activated = true;\r\n    }\r\n\r\n    function _isAuctionOngoing(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 auctionEndTimestamp = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].auctionEnd;\r\n        //if the auctionEnd is set to 0, the auction is technically on-going, however\r\n        //the minimum bid price (minPrice) has not yet been met.\r\n        return (auctionEndTimestamp == 0 ||\r\n            block.timestamp < auctionEndTimestamp);\r\n    }\r\n\r\n    function createBatchNftAuction(\r\n        address _nftContractAddress,\r\n        uint256[] memory _batchTokenIds,\r\n        uint256[] memory _batchTokenPrices,\r\n        uint32[] memory _royaltyPercentage,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        address _erc20Token,\r\n        uint256 _auctionStartTime,\r\n        uint256 _auctionBidPeriod,\r\n        uint32 _bidIncreasePercentage,\r\n        string[] memory _uri\r\n    ) external batchWithinLimits(_batchTokenIds.length) {\r\n        require(\r\n            (_batchTokenIds.length == _batchTokenPrices.length) &&\r\n                (_batchTokenIds.length == _royaltyPercentage.length)\r\n        );\r\n        for (uint i = 0; i < _batchTokenIds.length; i++) {\r\n            createNewNFTAuction(\r\n                _nftContractAddress,\r\n                _batchTokenIds[i],\r\n                _erc20Token,\r\n                _batchTokenPrices[i],\r\n                _royaltyPercentage[i],\r\n                _ownerPercentage,\r\n                _platformPercentage,\r\n                _auctionBidPeriod,\r\n                _bidIncreasePercentage,\r\n                _auctionStartTime,\r\n                _uri[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function createNewNFTAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _minPrice,\r\n        uint32 _royaltyPercentage,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint256 _auctionBidPeriod,\r\n        uint32 _bidIncreasePercentage,\r\n        uint256 _auctionStartTime,\r\n        string memory _uri\r\n    ) public {\r\n        require(_auctionBidPeriod >= 600, \"Min auction period is 10 min\");\r\n        require(_minPrice > 0, \"Price can't be zero\");\r\n        require(_bidIncreasePercentage >= 0, \"Bid percentage less than 0\");\r\n\r\n        if (_nftContractAddress == address(0) && _tokenId == 0) {\r\n            IERC721(platformNormalNFT).mint(address(this), 1, _uri); // mint to this contract\r\n            uint[] memory tokens = IERC721(platformNormalNFT).tokensOwned(\r\n                address(this)\r\n            );\r\n            uint tokenId = tokens[tokens.length - 1];\r\n            Auction storage auction = nftContractAuctions[platformNormalNFT][\r\n                tokenId\r\n            ];\r\n            nftContractAuctions[platformNormalNFT][tokenId]\r\n                .auctionBidPeriod = _auctionBidPeriod;\r\n            auction.bidIncreasePercentage = _bidIncreasePercentage;\r\n            auction.ownerPercentage = _ownerPercentage;\r\n            auction.platformPercentage = _platformPercentage;\r\n            nftRoyalty[platformNormalNFT][tokenId].royaltyOwner = msg.sender;\r\n            nftRoyalty[platformNormalNFT][tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n\r\n            _setupAuction(\r\n                platformNormalNFT,\r\n                tokenId,\r\n                _erc20Token,\r\n                _minPrice,\r\n                _auctionStartTime\r\n            );\r\n            emit CreateAuction(\r\n                tokenId,\r\n                platformNormalNFT,\r\n                msg.sender,\r\n                _minPrice\r\n            );\r\n        } else {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .auctionBidPeriod = _auctionBidPeriod;\r\n\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .bidIncreasePercentage = _bidIncreasePercentage;\r\n\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .ownerPercentage = _ownerPercentage;\r\n\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .platformPercentage = _platformPercentage;\r\n\r\n            if (\r\n                nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner ==\r\n                address(0)\r\n            ) {\r\n                nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner = msg\r\n                    .sender;\r\n                nftRoyalty[_nftContractAddress][_tokenId]\r\n                    .royaltyPercentage = _royaltyPercentage;\r\n            }\r\n            _createNewNftAuction(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                _erc20Token,\r\n                _minPrice,\r\n                _auctionStartTime\r\n            );\r\n            emit CreateAuction(\r\n                _tokenId,\r\n                _nftContractAddress,\r\n                msg.sender,\r\n                _minPrice\r\n            );\r\n        }\r\n    }\r\n\r\n    function _setupAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _minPrice,\r\n        uint256 _auctionStartTime\r\n    ) internal {\r\n        if (_erc20Token != address(0)) {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .ERC20Token = _erc20Token;\r\n        }\r\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = _minPrice;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\r\n            .sender;\r\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd =\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .auctionBidPeriod +\r\n            (block.timestamp);\r\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionStartTime =\r\n            _auctionStartTime +\r\n            block.timestamp;\r\n    }\r\n\r\n    function _createNewNftAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _minPrice,\r\n        uint256 _auctionStartTime\r\n    ) internal {\r\n        if (\r\n            _nftContractAddress == platformNormalNFT ||\r\n            _nftContractAddress == platformLazyNFT\r\n        ) {\r\n            // Sending the NFT to this contract\r\n            IERC721(_nftContractAddress).contractSafeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenId\r\n            );\r\n        }\r\n        // If NFT not one of ours then it needs approval\r\n        else {\r\n            IERC721(_nftContractAddress).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenId\r\n            );\r\n        }\r\n        _setupAuction(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _minPrice,\r\n            _auctionStartTime\r\n        );\r\n    }\r\n\r\n    function _updateHighestBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _tokenAmount\r\n    ) internal {\r\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ERC20Token;\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftHighestBidder = msg.sender;\r\n\r\n        if (_isERC20Auction(auctionERC20Token)) {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .nftHighestBid = _tokenAmount;\r\n            IERC20(auctionERC20Token).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenAmount\r\n            );\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .nftHighestBid = _tokenAmount;\r\n        } else {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .nftHighestBid = msg.value;\r\n        }\r\n    }\r\n\r\n    function _reversePreviousBidAndUpdateHighestBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _tokenAmount\r\n    ) internal {\r\n        address prevNftHighestBidder = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBidder;\r\n\r\n        uint256 prevNftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n        _updateHighestBid(_nftContractAddress, _tokenId, _tokenAmount);\r\n\r\n        if (prevNftHighestBidder != address(0)) {\r\n            _payout(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                prevNftHighestBidder,\r\n                prevNftHighestBid\r\n            );\r\n        }\r\n    }\r\n\r\n    function _isMinimumBidMade(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 minPrice = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .minPrice;\r\n        return\r\n            minPrice > 0 &&\r\n            (nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid >=\r\n                minPrice);\r\n    }\r\n\r\n    function _setupSale(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint256 _buyNowPrice,\r\n        uint32 _royaltyPercentage\r\n    ) internal {\r\n        if (_erc20Token != address(0)) {\r\n            nftContractSale[_nftContractAddress][_tokenId]\r\n                .ERC20Token = _erc20Token;\r\n        }\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .buyNowPrice = _buyNowPrice;\r\n        nftContractSale[_nftContractAddress][_tokenId].nftSeller = msg.sender;\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .ownerPercentage = _ownerPercentage;\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .platformPercentage = _platformPercentage;\r\n\r\n        if (\r\n            nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner == address(0)\r\n        ) {\r\n            nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner = msg.sender;\r\n            nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n    }\r\n\r\n    function createResale(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint256 _buyNowPrice,\r\n        uint32 _royaltyPercentage\r\n    ) external priceGreaterThanZero(_buyNowPrice) {\r\n        // If it's our own platform NFT\r\n        if (\r\n            _nftContractAddress == platformNormalNFT ||\r\n            _nftContractAddress == platformLazyNFT\r\n        ) {\r\n            IERC721(_nftContractAddress).contractSafeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenId\r\n            );\r\n            _setupSale(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                _erc20Token,\r\n                _ownerPercentage,\r\n                _platformPercentage,\r\n                _buyNowPrice,\r\n                _royaltyPercentage\r\n            );\r\n        }\r\n        // if it's not our own platform NFT\r\n        else {\r\n            IERC721(_nftContractAddress).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenId\r\n            );\r\n            _setupSale(\r\n                _nftContractAddress,\r\n                _tokenId,\r\n                _erc20Token,\r\n                _ownerPercentage,\r\n                _platformPercentage,\r\n                _buyNowPrice,\r\n                _royaltyPercentage\r\n            );\r\n        }\r\n    }\r\n\r\n    function createBatchResale(\r\n        address _nftContractAddress,\r\n        address _erc20Token,\r\n        uint256[] memory _tokenId,\r\n        uint256[] memory _buyNowPrice,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint32 _royaltyPercentage\r\n    ) external batchWithinLimits(_tokenId.length) {\r\n        require(_tokenId.length == _buyNowPrice.length);\r\n        for (uint i = 0; i < _tokenId.length; i++) {\r\n            IERC721(_nftContractAddress).contractSafeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _tokenId[i]\r\n            );\r\n            _setupSale(\r\n                _nftContractAddress,\r\n                _tokenId[i],\r\n                _erc20Token,\r\n                _ownerPercentage,\r\n                _platformPercentage,\r\n                _buyNowPrice[i],\r\n                _royaltyPercentage\r\n            );\r\n        }\r\n    }\r\n\r\n    function createSale(\r\n        address _erc20Token,\r\n        uint256 _buyNowPrice,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint32 _royaltyPercentage,\r\n        string memory _uri\r\n    ) external priceGreaterThanZero(_buyNowPrice) returns (uint256) {\r\n        IERC721(platformNormalNFT).mint(address(this), 1, _uri); // mint to this contract\r\n        // last token minted\r\n        uint[] memory tokens = IERC721(platformNormalNFT).tokensOwned(\r\n            address(this)\r\n        );\r\n        uint _tokenId = tokens[tokens.length - 1];\r\n\r\n        _setupSale(\r\n            address(platformNormalNFT),\r\n            _tokenId,\r\n            _erc20Token,\r\n            _ownerPercentage,\r\n            _platformPercentage,\r\n            _buyNowPrice,\r\n            _royaltyPercentage\r\n        );\r\n\r\n        emit SaleCreated(_tokenId, platformNormalNFT, msg.sender, _buyNowPrice);\r\n        return _tokenId;\r\n    }\r\n\r\n    function createBatchSale(\r\n        uint256[] memory _batchTokenPrice,\r\n        address _erc20Token,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint32 _royaltyPercentage,\r\n        string[] memory _uri\r\n    ) external batchWithinLimits(_batchTokenPrice.length) {\r\n        for (uint i = 0; i < _batchTokenPrice.length; i++) {\r\n            require(_batchTokenPrice[i] > 0, \"price invalid\");\r\n            IERC721(platformNormalNFT).mint(address(this), 1, _uri[i]); // mint to this contract\r\n            // last token minted\r\n            uint[] memory tokens = IERC721(platformNormalNFT).tokensOwned(\r\n                address(this)\r\n            );\r\n            uint _tokenId = tokens[tokens.length - 1];\r\n\r\n            _setupSale(\r\n                address(platformNormalNFT),\r\n                _tokenId,\r\n                _erc20Token,\r\n                _ownerPercentage,\r\n                _platformPercentage,\r\n                _batchTokenPrice[i],\r\n                _royaltyPercentage\r\n            );\r\n        }\r\n    }\r\n\r\n    function createResaleERC1155(\r\n        uint256 _tokenId,\r\n        uint256 _amountOfTokens,\r\n        uint256 _price,\r\n        address _ERC20Token,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint32 _royaltyPercentage\r\n    ) external {\r\n        // checks\r\n        require(_price > 0, \"Price less than 0\");\r\n        // Transfer tokens to this contract\r\n        IClubVirtualERC1155(platformERC1155NFT).contractSafeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenId,\r\n            _amountOfTokens\r\n        );\r\n        // setup sale\r\n        ERC1155Sale storage erc1155Sale = nftContract1155Sale[\r\n            platformERC1155NFT\r\n        ][_tokenId];\r\n        erc1155Sale.tokenAmount = _amountOfTokens;\r\n        erc1155Sale.nftSeller = msg.sender;\r\n        erc1155Sale.buyNowPrice = _price;\r\n        erc1155Sale.ERC20Token = _ERC20Token;\r\n        erc1155Sale.ownerPercentage = _ownerPercentage;\r\n        erc1155Sale.platformPercentage = _platformPercentage;\r\n\r\n        if (\r\n            nftRoyalty[platformERC1155NFT][_tokenId].royaltyOwner == address(0)\r\n        ) {\r\n            nftRoyalty[platformERC1155NFT][_tokenId].royaltyOwner = msg.sender;\r\n            nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n    }\r\n\r\n    function createSaleERC1155(\r\n        uint256 _amountOfTokens,\r\n        uint256 _price,\r\n        address _ERC20Token,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint32 _royaltyPercentage,\r\n        string memory _uri\r\n    ) external returns (uint256) {\r\n        // checks\r\n        require(_price > 0, \"Price less than 0\");\r\n        // Transfer tokens to this contract\r\n        uint256 _tokenId = IClubVirtualERC1155(platformERC1155NFT).mint(\r\n            address(this),\r\n            _amountOfTokens,\r\n            _uri\r\n        );\r\n        // setup sale\r\n        ERC1155Sale storage erc1155Sale = nftContract1155Sale[\r\n            platformERC1155NFT\r\n        ][_tokenId];\r\n        erc1155Sale.tokenAmount = _amountOfTokens;\r\n        erc1155Sale.nftSeller = msg.sender;\r\n        erc1155Sale.buyNowPrice = _price;\r\n        erc1155Sale.ERC20Token = _ERC20Token;\r\n        erc1155Sale.ownerPercentage = _ownerPercentage;\r\n        erc1155Sale.platformPercentage = _platformPercentage;\r\n\r\n        if (\r\n            nftRoyalty[platformERC1155NFT][_tokenId].royaltyOwner == address(0)\r\n        ) {\r\n            nftRoyalty[platformERC1155NFT][_tokenId].royaltyOwner = msg.sender;\r\n            nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n        emit Sale1155(_tokenId, platformERC1155NFT, msg.sender, _price);\r\n        return _tokenId;\r\n    }\r\n\r\n    function buyERC1155NFT(uint256 _tokenId) public payable nonReentrant {\r\n        address seller = nftContract1155Sale[platformERC1155NFT][_tokenId]\r\n            .nftSeller;\r\n        require(msg.sender != seller, \"Seller cannot buy own NFT\");\r\n        uint256 buyNowPrice = nftContract1155Sale[platformERC1155NFT][_tokenId]\r\n            .buyNowPrice;\r\n        uint32 platformPercentage = nftContract1155Sale[platformERC1155NFT][\r\n            _tokenId\r\n        ].platformPercentage;\r\n        uint256 platformFees = (buyNowPrice * (platformPercentage)) / (10000);\r\n        uint256 totalPayable = buyNowPrice + platformFees;\r\n        uint royaltyAmount;\r\n        if (nftRoyalty[platformERC1155NFT][_tokenId].activated) {\r\n            uint _royaltyPercentage = nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage;\r\n            royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable += royaltyAmount;\r\n        }\r\n        require(msg.value >= totalPayable, \"Must be greater than NFT cost\");\r\n        // update the tokenAmount\r\n        uint _ownerPercentage = nftContract1155Sale[platformERC1155NFT][\r\n            _tokenId\r\n        ].ownerPercentage;\r\n        if (nftContract1155Sale[platformERC1155NFT][_tokenId].tokenAmount > 1) {\r\n            nftContract1155Sale[platformERC1155NFT][_tokenId].tokenAmount -= 1;\r\n        } else {\r\n            resetERC1155Sale(_tokenId);\r\n        }\r\n\r\n        // Pay and Transfer\r\n\r\n        // 1. Cut platform fees from the buyer\r\n        totalPayable -= platformFees;\r\n        // 2. Cut ownerAmount from Seller\r\n        uint256 ownerAmount = (buyNowPrice * (_ownerPercentage)) / (10000);\r\n        totalPayable -= ownerAmount;\r\n        // If there is royalty involved, pay the royalty owner\r\n        if (nftRoyalty[platformERC1155NFT][_tokenId].activated == true) {\r\n            address royaltyOwner = nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyOwner;\r\n            uint _royaltyPercentage = nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage;\r\n            // 3. Cut Royaltypercentage\r\n            royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable -= royaltyAmount;\r\n            payable(royaltyOwner).transfer(royaltyAmount);\r\n        } else {\r\n            nftRoyalty[platformERC1155NFT][_tokenId].activated = true;\r\n        }\r\n        address owner = owner();\r\n        uint256 adminFees = ownerAmount + platformFees;\r\n        payable(owner).transfer(adminFees);\r\n        (bool success, ) = payable(seller).call{value: totalPayable}(\"\");\r\n        if (!success) {\r\n            revert();\r\n        }\r\n        IClubVirtualERC1155(platformERC1155NFT).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId,\r\n            1\r\n        );\r\n    }\r\n\r\n    function resetERC1155Sale(uint256 _tokenId) internal {\r\n        delete nftContract1155Sale[platformERC1155NFT][_tokenId];\r\n    }\r\n\r\n    function buyNFT(address _nftContractAddress, uint256 _tokenId)\r\n        public\r\n        payable\r\n        nonReentrant\r\n    {\r\n        address seller = nftContractSale[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        require(msg.sender != seller, \"Seller cannot buy own NFT\");\r\n        uint256 buyNowPrice = nftContractSale[_nftContractAddress][_tokenId]\r\n            .buyNowPrice;\r\n        uint32 platformPercentage = nftContractSale[_nftContractAddress][\r\n            _tokenId\r\n        ].platformPercentage;\r\n        uint256 platformFees = (buyNowPrice * (platformPercentage)) / (10000);\r\n        uint256 totalPayable = buyNowPrice + platformFees;\r\n\r\n        if (nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n            uint _royaltyPercentage = nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage;\r\n            uint royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable += royaltyAmount;\r\n        }\r\n        address erc20Token = nftContractSale[_nftContractAddress][_tokenId]\r\n            .ERC20Token;\r\n        if (_isERC20Auction(erc20Token)) {\r\n            require(\r\n                IERC20(erc20Token).balanceOf(msg.sender) >= totalPayable,\r\n                \"Must be greater than NFT cost\"\r\n            );\r\n        } else {\r\n            require(msg.value >= totalPayable, \"Must be greater than NFT cost\");\r\n        }\r\n        _buyNFT(_nftContractAddress, _tokenId);\r\n    }\r\n\r\n    function _buyNFT(address _nftContractAddress, uint256 _tokenId) internal {\r\n        address seller = nftContractSale[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        address erc20Token = nftContractSale[_nftContractAddress][_tokenId]\r\n            .ERC20Token;\r\n\r\n        uint256 _ownerPercentage = nftContractSale[_nftContractAddress][\r\n            _tokenId\r\n        ].ownerPercentage;\r\n\r\n        uint256 platformPercentage = nftContractSale[_nftContractAddress][\r\n            _tokenId\r\n        ].platformPercentage;\r\n        if (_isERC20Auction(erc20Token)) {\r\n            // if sale is ERC20\r\n            uint totalAmount = nftContractSale[_nftContractAddress][_tokenId]\r\n                .buyNowPrice;\r\n            // 1. Cut platform fees from the buyer\r\n            uint256 platformFees = (totalAmount * (platformPercentage)) /\r\n                (10000);\r\n            // 2. Cut ownerAmount from Seller\r\n            uint256 ownerAmount = (totalAmount * (_ownerPercentage)) / (10000);\r\n            uint royaltyAmount;\r\n            // Reset Sale Data\r\n            _resetSale(_nftContractAddress, _tokenId);\r\n            if (nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n                address royaltyOwner = nftRoyalty[_nftContractAddress][_tokenId]\r\n                    .royaltyOwner;\r\n                uint _royaltyPercentage = nftRoyalty[_nftContractAddress][\r\n                    _tokenId\r\n                ].royaltyPercentage;\r\n                // 3. Cut Royaltypercentage\r\n                royaltyAmount = (totalAmount * (_royaltyPercentage)) / (10000);\r\n                totalAmount -= royaltyAmount;\r\n                IERC20(erc20Token).transferFrom(\r\n                    msg.sender,\r\n                    royaltyOwner,\r\n                    royaltyAmount\r\n                );\r\n            } else {\r\n                nftRoyalty[_nftContractAddress][_tokenId].activated = true;\r\n            }\r\n            totalAmount -= ownerAmount; // this is what seller gets\r\n            address owner = owner();\r\n            IERC20(erc20Token).transferFrom(msg.sender, owner, platformFees);\r\n            IERC20(erc20Token).transferFrom(msg.sender, owner, ownerAmount);\r\n            IERC20(erc20Token).transferFrom(msg.sender, seller, totalAmount);\r\n        } else {\r\n            uint totalAmount = msg.value;\r\n            uint buyNowPrice = nftContractSale[_nftContractAddress][_tokenId]\r\n                .buyNowPrice;\r\n            // 1. Cut platform fees from the buyer\r\n            uint256 platformFees = (buyNowPrice * (platformPercentage)) /\r\n                (10000);\r\n            totalAmount -= platformFees;\r\n            // 2. Cut ownerAmount from Seller\r\n            uint256 ownerAmount = (buyNowPrice * (_ownerPercentage)) / (10000);\r\n            totalAmount -= ownerAmount;\r\n            // Reset Sale Data\r\n            _resetSale(_nftContractAddress, _tokenId);\r\n            uint royaltyAmount;\r\n            if (nftRoyalty[_nftContractAddress][_tokenId].activated == true) {\r\n                address royaltyOwner = nftRoyalty[_nftContractAddress][_tokenId]\r\n                    .royaltyOwner;\r\n                uint _royaltyPercentage = nftRoyalty[_nftContractAddress][\r\n                    _tokenId\r\n                ].royaltyPercentage;\r\n                // 3. Cut Royaltypercentage\r\n                royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n                totalAmount -= royaltyAmount;\r\n                payable(royaltyOwner).transfer(royaltyAmount);\r\n            } else {\r\n                nftRoyalty[_nftContractAddress][_tokenId].activated = true;\r\n            }\r\n            address owner = owner();\r\n            uint256 adminFees = ownerAmount + platformFees;\r\n            payable(owner).transfer(adminFees);\r\n            (bool success, ) = payable(seller).call{value: totalAmount}(\"\");\r\n            if (!success) {\r\n                revert();\r\n            }\r\n        }\r\n        IERC721(_nftContractAddress).safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function acceptBuyProposal(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint256 _proposedPrice,\r\n        address _proposingBuyer\r\n    ) public {\r\n        require(\r\n            (msg.sender ==\r\n                nftContractSale[_nftContractAddress][_tokenId].nftSeller) ||\r\n                (msg.sender ==\r\n                    nftContract1155Sale[_nftContractAddress][_tokenId]\r\n                        .nftSeller),\r\n            \"Only Seller function\"\r\n        );\r\n        buyProposal[_nftContractAddress][_tokenId].buyer = _proposingBuyer;\r\n        buyProposal[_nftContractAddress][_tokenId].price = _proposedPrice;\r\n    }\r\n\r\n    function buyFromProposalERC1155(uint256 _tokenId)\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n        address seller = nftContract1155Sale[platformERC1155NFT][_tokenId]\r\n            .nftSeller;\r\n        require(\r\n            msg.sender == buyProposal[platformERC1155NFT][_tokenId].buyer,\r\n            \"Invalid Buyer\"\r\n        );\r\n        require(msg.sender != seller, \"Seller cannot buy own NFT\");\r\n        uint256 buyNowPrice = buyProposal[platformERC1155NFT][_tokenId].price;\r\n        uint32 platformPercentage = nftContract1155Sale[platformERC1155NFT][\r\n            _tokenId\r\n        ].platformPercentage;\r\n        uint256 platformFees = (buyNowPrice * (platformPercentage)) / (10000);\r\n        uint256 totalPayable = buyNowPrice + platformFees;\r\n        uint royaltyAmount;\r\n        if (nftRoyalty[platformERC1155NFT][_tokenId].activated) {\r\n            uint _royaltyPercentage = nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage;\r\n            royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable += royaltyAmount;\r\n        }\r\n        require(msg.value >= totalPayable, \"Must be greater than NFT cost\");\r\n        // update the tokenAmount\r\n        uint _ownerPercentage = nftContract1155Sale[platformERC1155NFT][\r\n            _tokenId\r\n        ].ownerPercentage;\r\n        if (nftContract1155Sale[platformERC1155NFT][_tokenId].tokenAmount > 1) {\r\n            nftContract1155Sale[platformERC1155NFT][_tokenId].tokenAmount -= 1;\r\n        } else {\r\n            resetERC1155Sale(_tokenId);\r\n        }\r\n        // Pay and Transfer\r\n\r\n        // 1. Cut platform fees from the buyer\r\n        totalPayable -= platformFees;\r\n        // 2. Cut ownerAmount from Seller\r\n        uint256 ownerAmount = (buyNowPrice * (_ownerPercentage)) / (10000);\r\n        totalPayable -= ownerAmount;\r\n        // If there is royalty involved, pay the royalty owner\r\n        if (nftRoyalty[platformERC1155NFT][_tokenId].activated == true) {\r\n            address royaltyOwner = nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyOwner;\r\n            uint _royaltyPercentage = nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage;\r\n            // 3. Cut Royaltypercentage\r\n            royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable -= royaltyAmount;\r\n            payable(royaltyOwner).transfer(royaltyAmount);\r\n        } else {\r\n            nftRoyalty[platformERC1155NFT][_tokenId].activated = true;\r\n        }\r\n        address owner = owner();\r\n        uint256 adminFees = ownerAmount + platformFees;\r\n        payable(owner).transfer(adminFees);\r\n        (bool success, ) = payable(seller).call{value: totalPayable}(\"\");\r\n        if (!success) {\r\n            revert();\r\n        }\r\n        IClubVirtualERC1155(platformERC1155NFT).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId,\r\n            1\r\n        );\r\n    }\r\n\r\n    function buyFromProposal(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n        address seller = nftContractSale[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        uint32 platformPercentage = nftContractSale[_nftContractAddress][\r\n            _tokenId\r\n        ].platformPercentage;\r\n\r\n        require(\r\n            msg.sender == buyProposal[_nftContractAddress][_tokenId].buyer,\r\n            \"Invalid Buyer\"\r\n        );\r\n        require(msg.sender != seller, \"Seller cannot buy own NFT\");\r\n        uint256 buyNowPrice = buyProposal[_nftContractAddress][_tokenId].price;\r\n        uint256 platformFees = (buyNowPrice * (platformPercentage)) / (10000);\r\n        uint256 totalPayable = buyNowPrice + platformFees;\r\n        uint royaltyAmount;\r\n        if (nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n            uint _royaltyPercentage = nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage;\r\n            royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable += royaltyAmount;\r\n        }\r\n        require(msg.value >= totalPayable, \"Must be greater than NFT cost\");\r\n        uint256 _ownerPercentage = nftContractSale[_nftContractAddress][\r\n            _tokenId\r\n        ].ownerPercentage;\r\n        totalPayable -= platformFees;\r\n        // 2. Cut ownerAmount from Seller\r\n        uint256 ownerAmount = (buyNowPrice * (_ownerPercentage)) / (10000);\r\n        totalPayable -= ownerAmount;\r\n        // Reset Sale Data\r\n        _resetSale(_nftContractAddress, _tokenId);\r\n        if (nftRoyalty[_nftContractAddress][_tokenId].activated == true) {\r\n            address royaltyOwner = nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyOwner;\r\n            uint _royaltyPercentage = nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage;\r\n            // 3. Cut Royaltypercentage\r\n            royaltyAmount = (buyNowPrice * (_royaltyPercentage)) / (10000);\r\n            totalPayable -= royaltyAmount;\r\n            payable(royaltyOwner).transfer(royaltyAmount);\r\n        } else {\r\n            nftRoyalty[_nftContractAddress][_tokenId].activated = true;\r\n        }\r\n        address owner = owner();\r\n        uint256 adminFees = ownerAmount + platformFees;\r\n        payable(owner).transfer(adminFees);\r\n        (bool success, ) = payable(seller).call{value: totalPayable}(\"\");\r\n        if (!success) {\r\n            revert();\r\n        }\r\n        IERC721(_nftContractAddress).safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function _resetSale(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n    {\r\n        delete nftContractSale[_nftContractAddress][_tokenId];\r\n    }\r\n\r\n    function _makeBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _tokenAmount\r\n    )\r\n        internal\r\n        notNftSeller(_nftContractAddress, _tokenId)\r\n        paymentAccepted(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _tokenAmount\r\n        )\r\n    {\r\n        uint256 bidIncreaseAmount = ((\r\n            nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid\r\n        ) * (100 + _getBidIncreasePercentage(_nftContractAddress, _tokenId))) /\r\n            100;\r\n        require(\r\n            msg.value >= bidIncreaseAmount || _tokenAmount >= bidIncreaseAmount,\r\n            \"Bid amount not enough\"\r\n        );\r\n        _reversePreviousBidAndUpdateHighestBid(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _tokenAmount\r\n        );\r\n    }\r\n\r\n    function makeBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _tokenAmount\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        auctionOngoing(_nftContractAddress, _tokenId)\r\n    {\r\n        // if the auction has started\r\n        require(\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .auctionStartTime < block.timestamp,\r\n            \"Auction hasn't begun yet\"\r\n        );\r\n        require(\r\n            nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd != 0,\r\n            \"Auction Invalid\"\r\n        );\r\n        uint256 minPrice = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .minPrice;\r\n        // bid more than minimum price\r\n        require(\r\n            (_tokenAmount >= minPrice) || (msg.value >= minPrice),\r\n            \"Must be greater than minimum amount\"\r\n        );\r\n        _makeBid(_nftContractAddress, _tokenId, _erc20Token, _tokenAmount);\r\n    }\r\n\r\n    /*\r\n     * Reset all auction related parameters for an NFT.\r\n     * This effectively removes an EFT as an item up for auction\r\n     */\r\n    function _resetAuction(address _nftContractAddress, uint256 _tokenId)\r\n        internal\r\n    {\r\n        delete nftContractAuctions[_nftContractAddress][_tokenId];\r\n    }\r\n\r\n    function _payout(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) internal {\r\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ERC20Token;\r\n        if (_isERC20Auction(auctionERC20Token)) {\r\n            // pay royalty owner\r\n            IERC20(auctionERC20Token).transfer(_recipient, _amount);\r\n        } else {\r\n            // attempt to send the funds to the recipient\r\n            (bool success, ) = payable(_recipient).call{value: _amount}(\"\");\r\n            if (!success) {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _purchaseAndTransfer(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _nftSeller,\r\n        uint256 _highestBid\r\n    ) internal {\r\n        address erc20Token = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .ERC20Token;\r\n        address _nftRecipient = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBidder;\r\n        uint256 _ownerPercentage = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].ownerPercentage;\r\n        uint256 platformPercentage = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].platformPercentage;\r\n\r\n        if (_isERC20Auction(erc20Token)) {\r\n            // if sale is ERC20\r\n            uint totalAmount = _highestBid;\r\n            // 1. Cut platform fees from the buyer\r\n            uint256 platformFees = (totalAmount * (platformPercentage)) /\r\n                (10000);\r\n            // // 2. Cut ownerAmount from Seller\r\n            uint256 ownerAmount = (totalAmount * (_ownerPercentage)) / (10000);\r\n            uint royaltyAmount;\r\n            // Reset Sale Data\r\n            _resetAuction(_nftContractAddress, _tokenId);\r\n            if (nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n                address royaltyOwner = nftRoyalty[_nftContractAddress][_tokenId]\r\n                    .royaltyOwner;\r\n                uint _royaltyPercentage = nftRoyalty[_nftContractAddress][\r\n                    _tokenId\r\n                ].royaltyPercentage;\r\n                // 3. Cut Royaltypercentage\r\n                royaltyAmount = (totalAmount * (_royaltyPercentage)) / (10000);\r\n                totalAmount -= royaltyAmount;\r\n                IERC20(erc20Token).transferFrom(\r\n                    msg.sender,\r\n                    royaltyOwner,\r\n                    royaltyAmount\r\n                );\r\n            } else {\r\n                nftRoyalty[_nftContractAddress][_tokenId].activated = true;\r\n            }\r\n            totalAmount -= ownerAmount;\r\n            address owner = owner();\r\n            IERC20(erc20Token).transferFrom(msg.sender, owner, platformFees);\r\n            IERC20(erc20Token).transferFrom(msg.sender, owner, ownerAmount);\r\n            IERC20(erc20Token).transferFrom(\r\n                msg.sender,\r\n                _nftSeller,\r\n                totalAmount\r\n            );\r\n        } else {\r\n            // uint totalAmount = _highestBid + msg.value;\r\n            uint totalAmount = _highestBid;\r\n            // 1. Cut platform fees from the buyer\r\n            uint256 platformFees = (_highestBid * (platformPercentage)) /\r\n                (10000);\r\n            totalAmount -= platformFees;\r\n            // 2. Cut ownerAmount from Seller\r\n            uint256 ownerAmount = (_highestBid * (_ownerPercentage)) / (10000);\r\n            totalAmount -= ownerAmount;\r\n            // Reset Sale Data\r\n            _resetAuction(_nftContractAddress, _tokenId);\r\n\r\n            uint royaltyAmount;\r\n            if (nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n                address royaltyOwner = nftRoyalty[_nftContractAddress][_tokenId]\r\n                    .royaltyOwner;\r\n                uint _royaltyPercentage = nftRoyalty[_nftContractAddress][\r\n                    _tokenId\r\n                ].royaltyPercentage;\r\n                // 3. Cut Royaltypercentage\r\n                royaltyAmount = (_highestBid * (_royaltyPercentage)) / (10000);\r\n                totalAmount -= royaltyAmount;\r\n                payable(royaltyOwner).transfer(royaltyAmount);\r\n            } else {\r\n                nftRoyalty[_nftContractAddress][_tokenId].activated = true;\r\n            }\r\n            address owner = owner();\r\n            uint256 adminFees = ownerAmount + platformFees;\r\n            payable(owner).transfer(adminFees);\r\n            (bool success, ) = payable(_nftSeller).call{value: totalAmount}(\"\");\r\n            if (!success) {\r\n                revert();\r\n            }\r\n        }\r\n        IERC721(_nftContractAddress).safeTransferFrom(\r\n            address(this),\r\n            _nftRecipient,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function settleAuction(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        // payable\r\n        nonReentrant\r\n        isAuctionOver(_nftContractAddress, _tokenId)\r\n    {\r\n        uint256 _nftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n        uint256 minPrice = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .minPrice;\r\n        address _nftSeller = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        require(_nftHighestBid >= minPrice, \"No bid has been made\");\r\n        _purchaseAndTransfer(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _nftSeller,\r\n            _nftHighestBid\r\n        );\r\n    }\r\n\r\n    function switchAuctionToSale(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint256 _buyNowPrice,\r\n        uint32 _royaltyPercentage\r\n    )\r\n        public\r\n        minimumBidNotMade(_nftContractAddress, _tokenId)\r\n        auctionOngoing(_nftContractAddress, _tokenId)\r\n        onlyNftSeller(_nftContractAddress, _tokenId)\r\n    {\r\n        // reset auction\r\n        _resetAuction(_nftContractAddress, _tokenId);\r\n        // setupResale\r\n        _setupSale(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _ownerPercentage,\r\n            _platformPercentage,\r\n            _buyNowPrice,\r\n            _royaltyPercentage\r\n        );\r\n    }\r\n\r\n    function switchSaleToAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _erc20Token,\r\n        uint256 _minPrice,\r\n        uint32 _royaltyPercentage,\r\n        uint32 _ownerPercentage,\r\n        uint32 _platformPercentage,\r\n        uint256 _auctionBidPeriod,\r\n        uint32 _bidIncreasePercentage,\r\n        uint256 _auctionStartTime\r\n    ) public {\r\n        address nftSeller = nftContractSale[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        require(msg.sender == nftSeller, \"Unauthorized seller\");\r\n        // Reset Sale\r\n        _resetSale(_nftContractAddress, _tokenId);\r\n        // Setup Auction\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .auctionBidPeriod = _auctionBidPeriod;\r\n\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .bidIncreasePercentage = _bidIncreasePercentage;\r\n\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .ownerPercentage = _ownerPercentage;\r\n\r\n        nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .platformPercentage = _platformPercentage;\r\n\r\n        if (\r\n            nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner == address(0)\r\n        ) {\r\n            nftRoyalty[_nftContractAddress][_tokenId].royaltyOwner = msg.sender;\r\n            nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n        _setupAuction(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _erc20Token,\r\n            _minPrice,\r\n            _auctionStartTime\r\n        );\r\n    }\r\n\r\n    function withdrawSale(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        nonReentrant\r\n    {\r\n        address nftSeller = nftContractSale[_nftContractAddress][_tokenId]\r\n            .nftSeller;\r\n        require(\r\n            nftSeller == msg.sender,\r\n            \"Only the owner can call this function\"\r\n        );\r\n        // reset sale\r\n        _resetSale(_nftContractAddress, _tokenId);\r\n        // transfer the NFT back to the Seller\r\n        IERC721(_nftContractAddress).safeTransferFrom(\r\n            address(this),\r\n            nftSeller,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function withdrawERC1155Sale(uint256 _tokenId) external {\r\n        address seller = nftContract1155Sale[platformERC1155NFT][_tokenId]\r\n            .nftSeller;\r\n        require(msg.sender == seller, \"Only seller function\");\r\n        uint256 tokenAmount = nftContract1155Sale[platformERC1155NFT][_tokenId]\r\n            .tokenAmount;\r\n        resetERC1155Sale(_tokenId);\r\n        IClubVirtualERC1155(platformERC1155NFT).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId,\r\n            tokenAmount\r\n        );\r\n    }\r\n\r\n    function withdrawAuction(address _nftContractAddress, uint256 _tokenId)\r\n        external\r\n        nonReentrant\r\n        onlyNftSeller(_nftContractAddress, _tokenId)\r\n    {\r\n        address _nftRecipient = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftSeller;\r\n\r\n        address prevNftHighestBidder = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBidder;\r\n        uint256 prevNftHighestBid = nftContractAuctions[_nftContractAddress][\r\n            _tokenId\r\n        ].nftHighestBid;\r\n\r\n        // Reset values of this Auction\r\n        _resetAuction(_nftContractAddress, _tokenId);\r\n        IERC721(_nftContractAddress).safeTransferFrom(\r\n            address(this),\r\n            _nftRecipient,\r\n            _tokenId\r\n        );\r\n\r\n        // Pay any bidder if present\r\n        if (prevNftHighestBidder != address(0)) {\r\n            (bool success, ) = payable(prevNftHighestBidder).call{value: prevNftHighestBid}(\"\");\r\n            require(success);\r\n        }\r\n    }\r\n\r\n    function changeSaleERC1155(\r\n        uint256 _tokenId,\r\n        uint _buyNowPrice,\r\n        uint _royaltyPercentage\r\n    ) public {\r\n        require(\r\n            msg.sender ==\r\n                nftContract1155Sale[platformERC1155NFT][_tokenId].nftSeller,\r\n            \"Only Seller allowed\"\r\n        );\r\n        nftContract1155Sale[platformERC1155NFT][_tokenId]\r\n            .buyNowPrice = _buyNowPrice;\r\n        if (!nftRoyalty[platformERC1155NFT][_tokenId].activated) {\r\n            nftRoyalty[platformERC1155NFT][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n    }\r\n\r\n    function changeAuction(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _minPrice,\r\n        int _duration,\r\n        uint _royaltyPercentage\r\n    ) public {\r\n        require(\r\n            msg.sender ==\r\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\r\n            \"Only Seller allowed\"\r\n        );\r\n        uint bid = nftContractAuctions[_nftContractAddress][_tokenId]\r\n            .nftHighestBid;\r\n        if (bid < _minPrice) {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .minPrice = _minPrice;\r\n        }\r\n        uint _newTime = uint(\r\n            int(nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd) +\r\n                _duration\r\n        );\r\n        if (_newTime > block.timestamp) {\r\n            nftContractAuctions[_nftContractAddress][_tokenId]\r\n                .auctionEnd = _newTime;\r\n        }\r\n        if (!nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n            nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n    }\r\n\r\n    function changeSale(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _buyNowPrice,\r\n        uint _royaltyPercentage\r\n    ) public {\r\n        require(\r\n            msg.sender ==\r\n                nftContractSale[_nftContractAddress][_tokenId].nftSeller,\r\n            \"Only Seller allowed\"\r\n        );\r\n        nftContractSale[_nftContractAddress][_tokenId]\r\n            .buyNowPrice = _buyNowPrice;\r\n        if (!nftRoyalty[_nftContractAddress][_tokenId].activated) {\r\n            nftRoyalty[_nftContractAddress][_tokenId]\r\n                .royaltyPercentage = _royaltyPercentage;\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"}],\"name\":\"Sale1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_proposingBuyer\",\"type\":\"address\"}],\"name\":\"acceptBuyProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyERC1155NFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyFromProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyFromProposalERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_duration\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"changeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"changeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"changeSaleERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"_uri\",\"type\":\"string[]\"}],\"name\":\"createBatchNftAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buyNowPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"}],\"name\":\"createBatchResale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_batchTokenPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"_uri\",\"type\":\"string[]\"}],\"name\":\"createBatchSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createNewNFTAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"}],\"name\":\"createResale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"}],\"name\":\"createResaleERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createSaleERC1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformNormalNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformLazyNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformERC1155NFT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContract1155Sale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftHighestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"royaltyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformERC1155NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformLazyNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformNormalNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyOwner\",\"type\":\"address\"}],\"name\":\"setRoyaltyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"}],\"name\":\"switchAuctionToSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_royaltyPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_ownerPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_platformPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"}],\"name\":\"switchSaleToAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTAuction", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f4478fdfe8e897ec9d7f0af21ae006df6317f5700a75b9e8825dc375ea6b396"}]}