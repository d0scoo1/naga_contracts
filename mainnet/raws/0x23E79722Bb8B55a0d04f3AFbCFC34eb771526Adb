{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dispenser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AstraDispenser {\\r\\n    function dispense(address payable[] memory recipients) external payable {\\r\\n        assembly {\\r\\n            let len := mload(recipients)\\r\\n            let amount_per := div(callvalue(), len)\\r\\n            \\r\\n            let data := add(recipients, 0x20)\\r\\n            for\\r\\n                { let end := add(data, mul(len, 0x20)) }\\r\\n                lt(data, end)\\r\\n                { data := add(data, 0x20) }\\r\\n            {\\r\\n                pop(call(\\r\\n                    21000,\\r\\n                    mload(data),\\r\\n                    amount_per,\\r\\n                    0,\\r\\n                    0,\\r\\n                    0,\\r\\n                    0\\r\\n                ))\\r\\n            }\\r\\n\\r\\n            // Check if there is any leftover funds\\r\\n            let leftover := selfbalance()\\r\\n            if eq(leftover, 0) {\\r\\n                return(0, 0)\\r\\n            }\\r\\n\\r\\n            pop(call(\\r\\n                21000,\\r\\n                caller(),\\r\\n                leftover,\\r\\n                0,\\r\\n                0,\\r\\n                0,\\r\\n                0\\r\\n            ))\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1337\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"dispense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "AstraDispenser", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1337", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}