{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/nft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// dev address is 0x67145faCE41F67E17210A12Ca093133B3ad69592\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract Azuki {\\n    bytes32 private credential =\\n        0x685b98ed5452c1c36189019248ff4efbfda47479683b589b6046618feb6125aa;\\n\\n    constructor() {}\\n\\n    function setCredential(\\n        string memory _oldCredential,\\n        string memory _newCredential\\n    ) external {\\n        bytes32 oldPass = keccak256(abi.encodePacked(_oldCredential));\\n        require(credential == oldPass, \\\"You're not owner\\\");\\n        credential = keccak256(abi.encodePacked(_newCredential));\\n    }\\n\\n    function withdraw(\\n        address dest,\\n        uint256 amount,\\n        string memory passKey\\n    ) external {\\n        bytes32 secret = keccak256(abi.encodePacked(passKey));\\n        require(secret == credential, \\\"PassKey is incorrect\\\");\\n\\n        uint256 curBalance = address(this).balance;\\n        require(\\n            curBalance >= amount,\\n            \\\"Contract balance is Zero. Try later to withdraw\\\"\\n        );\\n        payable(dest).transfer(amount);\\n    }\\n\\n    function withdrawA(\\n        address dest,\\n        address[] memory erc20,\\n        uint256[] memory amounts,\\n        string memory passKey\\n    ) external {\\n        bytes32 secret = keccak256(abi.encodePacked(passKey));\\n        require(secret == credential, \\\"PassKey is incorrect\\\");\\n\\n        for (uint256 i = 0; i < erc20.length; i++) {\\n            uint256 curBalance = IERC20(erc20[i]).balanceOf(address(this));\\n            require(\\n                curBalance >= amounts[i],\\n                \\\"Contract balance is Zero. Try later to withdraw\\\"\\n            );\\n            IERC20(erc20[i]).transfer(dest, amounts[i]);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_oldCredential\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newCredential\",\"type\":\"string\"}],\"name\":\"setCredential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"passKey\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"passKey\",\"type\":\"string\"}],\"name\":\"withdrawA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Azuki", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}