{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@0xdievardump/niftyforge/contracts/INiftyForge721.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/IERC721Full.sol';\\n\\n/// @title INiftyForge721\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice Interface to interact with a NiftyFroge721 on a network\\ninterface INiftyForge721 is IERC721Full {\\n    struct ModuleInit {\\n        address module;\\n        bool enabled;\\n        bool minter;\\n    }\\n\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit_ modules to add / enable directly at creation\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        ModuleInit[] memory modulesInit_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external;\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3);\\n\\n    /// @notice totalSupply access\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice helper to know if everyone can mint or only minters\\n    function isMintingOpenToAll() external view returns (bool);\\n\\n    /// @notice Toggle minting open to all state\\n    /// @param isOpen if the new state is open or not\\n    function setMintingOpenToAll(bool isOpen) external;\\n\\n    /// @notice Allows to set a maximum number of mint possible\\n    function setMaxSupply(uint256 maxSupply_) external;\\n\\n    /// @notice Mint next token to `to`\\n    /// @param to address of recipient\\n    /// @return tokenId the tokenId\\n    function mint(address to) external returns (uint256 tokenId);\\n\\n    /// @notice Mint next token to `to` and then transfers to `transferTo`\\n    /// @param to address of first recipient\\n    /// @param transferTo address to transfer token to\\n    /// @return tokenId the tokenId\\n    function mint(address to, address transferTo)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /// @notice Mint token to `to` with `uri`\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uri[i]`\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @return startId the first id\\n    /// @return endId the last id\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external returns (uint256 startId, uint256 endId);\\n\\n    /// @notice Mint `tokenId` to to` with `uri`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it is doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param tokenId token id wanted\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        uint256 tokenId_,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uris[i]`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it's doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param tokenIds array of token ids wanted\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        uint256[] memory tokenIds,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external;\\n\\n    /// @notice Attach a module\\n    /// @param module a module to attach\\n    /// @param enabled if the module is enabled by default\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function attachModule(\\n        address module,\\n        bool enabled,\\n        bool canModuleMint\\n    ) external;\\n\\n    /// @dev Allows owner to enable a module\\n    /// @param module to enable\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function enableModule(address module, bool canModuleMint) external;\\n\\n    /// @dev Allows owner to disable a module\\n    /// @param module to disable\\n    function disableModule(address module, bool keepListeners) external;\\n\\n    /// @notice allows to force the collection to start ids at 0\\n    function startAtZero() external;\\n\\n    /// @notice function that returns a string that can be used to render the current token\\n    /// @param tokenId tokenId\\n    /// @return the URI to render token\\n    function renderTokenURI(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/Modules/INFModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface INFModule is IERC165 {\\n    /// @notice Called by a Token Registry whenever the module is Attached\\n    /// @return if the attach worked\\n    function onAttach() external returns (bool);\\n\\n    /// @notice Called by a Token Registry whenever the module is Enabled\\n    /// @return if the enabling worked\\n    function onEnable() external returns (bool);\\n\\n    /// @notice Called by a Token Registry whenever the module is Disabled\\n    function onDisable() external;\\n\\n    /// @notice returns an URI with information about the module\\n    /// @return the URI where to find information about the module\\n    function contractURI() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/Modules/INFModuleTokenURI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFModuleTokenURI {\\n    function tokenURI(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/Modules/INFModuleWithRoyalties.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface INFModuleWithRoyalties {\\n    /// @notice Return royalties (recipient, basisPoint) for tokenId\\n    /// @dev Contrary to EIP2981, modules are expected to return basisPoint for second parameters\\n    ///      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\\n    /// @param registry registry to check id of\\n    /// @param tokenId token to check\\n    /// @return recipient and basisPoint for this tokenId\\n    function royaltyInfo(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (address recipient, uint256 basisPoint);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/Modules/NFBaseModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport './INFModule.sol';\\n\\n/// @title NFBaseModule\\n/// @author Simon Fremaux (@dievardump)\\ncontract NFBaseModule is INFModule, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal _attached;\\n\\n    event NewContractURI(string contractURI);\\n\\n    string private _contractURI;\\n\\n    modifier onlyAttached(address registry) {\\n        require(_attached.contains(registry), '!NOT_ATTACHED!');\\n        _;\\n    }\\n\\n    constructor(string memory contractURI_) {\\n        _setContractURI(contractURI_);\\n    }\\n\\n    /// @inheritdoc\\tINFModule\\n    function contractURI()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return _contractURI;\\n    }\\n\\n    /// @inheritdoc\\tINFModule\\n    function onAttach() external virtual override returns (bool) {\\n        if (_attached.add(msg.sender)) {\\n            return true;\\n        }\\n\\n        revert('!ALREADY_ATTACHED!');\\n    }\\n\\n    /// @notice this contract doesn't really care if it's enabled or not\\n    ///         since trying to mint on a contract where it's not enabled will fail\\n    /// @inheritdoc\\tINFModule\\n    function onEnable() external virtual override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc\\tINFModule\\n    function onDisable() external virtual override {}\\n\\n    function _setContractURI(string memory contractURI_) internal {\\n        _contractURI = contractURI_;\\n        emit NewContractURI(contractURI_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/NFT/ERC721/IERC721WithMutableURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @dev This is the interface for NFT extension mutableURI\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithMutableURI {\\n    function mutableURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/NFT/ERC721/IERC721WithRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '../Royalties/ERC2981/IERC2981Royalties.sol';\\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\\nimport '../Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol';\\n\\n/// @dev This is a contract used for royalties on various platforms\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithRoyalties is\\n    IERC2981Royalties,\\n    IRaribleSecondarySales,\\n    IFoundationSecondarySales\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/NFT/IERC721Full.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\n\\nimport './ERC721/IERC721WithRoyalties.sol';\\nimport './ERC721/IERC721WithMutableURI.sol';\\n\\n/// @title ERC721Full\\n/// @dev This contains all the different overrides needed on\\n///      ERC721 / URIStorage / Royalties\\n///      This contract does not use ERC721enumerable because Enumerable adds quite some\\n///      gas to minting costs and I am trying to make this cheap for creators.\\n///      Also, since all NiftyForge contracts will be fully indexed in TheGraph it will easily\\n///      Be possible to get tokenIds of an owner off-chain, before passing them to a contract\\n///      which can verify ownership at the processing time\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721Full is\\n    IERC721Upgradeable,\\n    IERC721WithRoyalties,\\n    IERC721WithMutableURI\\n{\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address can do the action a Minter can\\n    /// @param account the address to check\\n    function canMint(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address is editor\\n    /// @param account the address to check\\n    function isEditor(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address is minter\\n    /// @param account the address to check\\n    function isMinter(address account) external view returns (bool);\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Set the base mutable meta URI for tokens\\n    /// @param baseMutableURI_ the new base for mutable meta uri used in mutableURI()\\n    function setBaseMutableURI(string memory baseMutableURI_) external;\\n\\n    /// @notice Set the mutable URI for a token\\n    /// @dev    Mutable URI work like tokenURI\\n    ///         -> if there is a baseMutableURI and a mutableURI, concat baseMutableURI + mutableURI\\n    ///         -> else if there is only mutableURI, return mutableURI\\n    //.         -> else if there is only baseMutableURI, concat baseMutableURI + tokenId\\n    /// @dev only an editor (account or module) can call this\\n    /// @param tokenId the token to set the mutable URI for\\n    /// @param mutableURI_ the mutable URI\\n    function setMutableURI(uint256 tokenId, string memory mutableURI_) external;\\n\\n    /// @notice Helper for the owner to add new editors\\n    /// @dev needs to be owner\\n    /// @param users list of new editors\\n    function addEditors(address[] memory users) external;\\n\\n    /// @notice Helper for the owner to remove editors\\n    /// @dev needs to be owner\\n    /// @param users list of removed editors\\n    function removeEditors(address[] memory users) external;\\n\\n    /// @notice Helper for an editor to add new minter\\n    /// @dev needs to be owner\\n    /// @param users list of new minters\\n    function addMinters(address[] memory users) external;\\n\\n    /// @notice Helper for an editor to remove minters\\n    /// @dev needs to be owner\\n    /// @param users list of removed minters\\n    function removeMinters(address[] memory users) external;\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient) external;\\n\\n    /// @notice Allows a royalty recipient of a token to change their recipient address\\n    /// @dev only the current token royalty recipient can change the address\\n    /// @param tokenId the token to change the recipient for\\n    /// @param recipient new default royalties recipient\\n    function setTokenRoyaltiesRecipient(uint256 tokenId, address recipient)\\n        external;\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external;\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/NFT/Royalties/ERC2981/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/NFT/Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFoundationSecondarySales {\\n    /// @notice returns a list of royalties recipients and the amount\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients and their basis points, for tokenId\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@0xdievardump/niftyforge/contracts/NFT/Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IRaribleSecondarySales {\\n    /// @notice returns a list of royalties recipients\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients for tokenId\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    /// @notice returns a list of royalties amounts\\n    /// @param tokenId the token Id to check for\\n    /// @return all the amounts for tokenId\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GroupedURIs.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract GroupedURIs {\\n    event TokenToGroup(uint256 tokenId, uint256 groupId);\\n\\n    /// @notice current group of tokenIds\\n    uint256 public currentGroupId;\\n\\n    /// @notice the NFTs will first have centralized tokenURIs until the artist provide all files\\n    mapping(uint256 => string) public groupBaseURI;\\n\\n    /// @notice mapping tokenId to group\\n    mapping(uint256 => uint256) public tokenGroup;\\n\\n    function _incrementGroup(\\n        string memory previousGroupBaseURI,\\n        string memory newGroupBaseURI\\n    ) internal {\\n        if (bytes(previousGroupBaseURI).length != 0) {\\n            _setGroupURI(currentGroupId, previousGroupBaseURI);\\n        }\\n        _setGroupURI(++currentGroupId, newGroupBaseURI);\\n    }\\n\\n    function _setGroupURI(uint256 group, string memory baseURI) internal {\\n        groupBaseURI[group] = baseURI;\\n    }\\n\\n    function _setTokenGroup(uint256 tokenId, uint256 groupId) internal {\\n        tokenGroup[tokenId] = groupId;\\n        emit TokenToGroup(tokenId, groupId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFTBattles.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {INiftyForge721} from \\\"@0xdievardump/niftyforge/contracts/INiftyForge721.sol\\\";\\nimport {NFBaseModule} from \\\"@0xdievardump/niftyforge/contracts/Modules/NFBaseModule.sol\\\";\\nimport {INFModuleTokenURI} from \\\"@0xdievardump/niftyforge/contracts/Modules/INFModuleTokenURI.sol\\\";\\nimport {INFModuleWithRoyalties} from \\\"@0xdievardump/niftyforge/contracts/Modules/INFModuleWithRoyalties.sol\\\";\\n\\nimport {GroupedURIs} from \\\"./GroupedURIs.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\\ncontract NFTBattles is\\n    Ownable,\\n    ReentrancyGuard,\\n    GroupedURIs,\\n    NFBaseModule,\\n    INFModuleTokenURI,\\n    INFModuleWithRoyalties\\n{\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error WETHNotSet();\\n    error BattleInactive();\\n    error WrongContender();\\n    error NoSelfOutbid();\\n    error WrongBidValue();\\n    error NotEnoughContenders();\\n    error AlreadySettled();\\n    error UnknownBattle();\\n    error BattleNotEnded();\\n\\n    event BattleCreated(uint256 battleId, address[] contenders);\\n\\n    event BidCreated(\\n        uint256 battleId,\\n        uint256 contender,\\n        address bidder,\\n        uint256 bid\\n    );\\n\\n    event BattleStartChanged(uint256 battleId, uint256 newEnd);\\n\\n    event BattleEndChanged(uint256 battleId, uint256 newEnd);\\n\\n    event BattleSettled(uint256 battleId, uint256 bidsSum);\\n\\n    event BattleContenderResult(\\n        uint256 battleId,\\n        uint256 index,\\n        uint256 tokenId,\\n        address randomBidder\\n    );\\n\\n    event BattleCanceled(uint256 battleId);\\n\\n    struct Battle {\\n        uint256 startsAt;\\n        uint256 endsAt;\\n        uint256 contenders;\\n        bool settled;\\n    }\\n\\n    struct BattleContender {\\n        address artist;\\n        address highestBidder;\\n        uint256 highestBid;\\n        EnumerableSet.AddressSet bidders;\\n    }\\n\\n    /// @notice the contract holding the NFTs\\n    address public nftContract;\\n\\n    /// @notice minimal bid\\n    uint256 public minimalBid = 0.001 ether;\\n\\n    /// @notice minimal bid increase when bidding (5% initially)\\n    uint256 public minimalBidIncrease = 5;\\n\\n    /// @notice time to add to the battle auction end when late bids\\n    uint256 public timeBuffer = 5 minutes;\\n\\n    /// @notice contains last known battle id\\n    uint256 public lastBattleId;\\n\\n    /// @notice the target address getting the eth when settling a Battle\\n    address public withdrawTarget;\\n\\n    /// @notice all battles\\n    mapping(uint256 => Battle) public battles;\\n\\n    /// @notice all contenders\\n    mapping(uint256 => mapping(uint256 => BattleContender))\\n        internal _battleContenders;\\n\\n    /// @notice weth contract address to refund users if transfer fails\\n    address public immutable wethContract;\\n\\n    /// @notice mapping tokenId => creator\\n    mapping(uint256 => address) public tokenCreator;\\n\\n    constructor(\\n        string memory contractURI_,\\n        string memory baseURI,\\n        address wethContract_,\\n        address owner_\\n    ) NFBaseModule(contractURI_) {\\n        _incrementGroup(\\\"\\\", baseURI);\\n\\n        uint256 chainId = block.chainid;\\n        if (chainId == 4) {\\n            wethContract_ = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n        } else if (chainId == 1) {\\n            wethContract_ = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n        } else {\\n            if (wethContract_ == address(0)) {\\n                revert WETHNotSet();\\n            }\\n        }\\n\\n        // immutable can not be initialized in an if statement.\\n        wethContract = wethContract_;\\n\\n        if (owner_ != address(0)) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    ////////////////////////////////////////////\\n    // getters                                //\\n    ////////////////////////////////////////////\\n\\n    /// @notice returns current bids for a battle\\n    /// @param battleId the battle id\\n    /// @return bidders an array of bidders\\n    /// @return bids an array of bids\\n    function getBattleBids(uint256 battleId)\\n        external\\n        view\\n        returns (address[] memory bidders, uint256[] memory bids)\\n    {\\n        Battle memory battle = battles[battleId];\\n\\n        bidders = new address[](battle.contenders);\\n        bids = new uint256[](battle.contenders);\\n\\n        for (uint256 i; i < battle.contenders; i++) {\\n            bidders[i] = _battleContenders[battleId][i].highestBidder;\\n            bids[i] = _battleContenders[battleId][i].highestBid;\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///// Module                                      //\\n    ////////////////////////////////////////////////////\\n\\n    function onAttach() external virtual override returns (bool) {\\n        if (nftContract != address(0)) {\\n            revert();\\n        }\\n\\n        nftContract = msg.sender;\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(INFModuleTokenURI).interfaceId ||\\n            interfaceId == type(INFModuleWithRoyalties).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc\\tINFModuleWithRoyalties\\n    function royaltyInfo(address, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address recipient, uint256 basisPoint)\\n    {\\n        // 7.5% to tokenCreator\\n        recipient = tokenCreator[tokenId];\\n        basisPoint = 750;\\n    }\\n\\n    /// @inheritdoc\\tINFModuleTokenURI\\n    function tokenURI(address registry, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        string memory baseURI = groupBaseURI[tokenGroup[tokenId]];\\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\n    }\\n\\n    ////////////////////////////////////////////\\n    // Publics                                //\\n    ////////////////////////////////////////////\\n\\n    /// @notice Allows to bid on `contender` for a Battle\\n    /// @param battleId the battle id to bid on\\n    /// @param contender the contender to bid on\\n    function bid(uint256 battleId, uint256 contender)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        if (battleId > lastBattleId) {\\n            revert UnknownBattle();\\n        }\\n\\n        Battle storage battle = battles[battleId];\\n\\n        if (battle.settled) {\\n            revert AlreadySettled();\\n        }\\n\\n        // time check\\n        uint256 timestamp = block.timestamp;\\n        if (!(timestamp >= battle.startsAt && timestamp < battle.endsAt)) {\\n            revert BattleInactive();\\n        }\\n\\n        // input check\\n        BattleContender storage auction = _battleContenders[battleId][\\n            contender\\n        ];\\n        if (auction.artist == address(0)) {\\n            revert WrongContender();\\n        }\\n\\n        address sender = msg.sender;\\n\\n        // can't outbid yourself.\\n        // why? someone could be watching the pool, and outbid themselves in order to make incoming bid invalid\\n        // and not have to outbid an higher bid\\n        if (auction.highestBidder == sender) {\\n            revert NoSelfOutbid();\\n        }\\n\\n        // value check\\n        uint256 currentBid = msg.value;\\n        if (\\n            currentBid <\\n            ((auction.highestBid * (100 + minimalBidIncrease)) / 100) ||\\n            currentBid < minimalBid\\n        ) {\\n            revert WrongBidValue();\\n        }\\n\\n        // add to bidders\\n        auction.bidders.add(sender);\\n\\n        // refund previous highest bidder\\n        if (auction.highestBid != 0) {\\n            _sendETHSafe(auction.highestBidder, auction.highestBid);\\n        }\\n\\n        auction.highestBidder = sender;\\n        auction.highestBid = currentBid;\\n\\n        emit BidCreated(battleId, contender, sender, currentBid);\\n\\n        uint256 timeBuffer_ = timeBuffer;\\n        if (timestamp > battle.endsAt - timeBuffer_) {\\n            battle.endsAt = timestamp + timeBuffer_;\\n            emit BattleEndChanged(battleId, battle.endsAt);\\n        }\\n    }\\n\\n    ////////////////////////////////////////////\\n    // Owner / Admin                          //\\n    ////////////////////////////////////////////\\n\\n    /// @notice Allows owner to create a battle\\n    /// @param contenders the contenders for this battle\\n    /// @param startsAt when the battle starts\\n    /// @param duration the duration of the battle\\n    function createBattle(\\n        address[] calldata contenders,\\n        uint256 startsAt,\\n        uint256 duration\\n    ) external onlyOwner {\\n        uint256 length = contenders.length;\\n        if (length < 2) {\\n            revert NotEnoughContenders();\\n        }\\n\\n        uint256 battleId = ++lastBattleId;\\n\\n        Battle storage battle = battles[battleId];\\n\\n        battle.startsAt = startsAt;\\n        battle.endsAt = startsAt + duration;\\n        battle.contenders = length;\\n\\n        for (uint256 i; i < length; i++) {\\n            if (contenders[i] == address(0)) {\\n                revert WrongContender();\\n            }\\n\\n            _battleContenders[battleId][i].artist = contenders[i];\\n        }\\n\\n        emit BattleCreated(battleId, contenders);\\n    }\\n\\n    /// @notice allows owner to cancel a battle\\n    /// @param battleId the battle id\\n    function cancelBattle(uint256 battleId) external onlyOwner {\\n        if (battleId > lastBattleId) {\\n            revert UnknownBattle();\\n        }\\n\\n        Battle storage battle = battles[battleId];\\n        battle.settled = true;\\n\\n        uint256 length = battle.contenders;\\n        BattleContender storage contender;\\n\\n        for (uint256 i; i < length; i++) {\\n            contender = _battleContenders[battleId][i];\\n            // refund highest bidder for each contender\\n            if (contender.highestBid != 0) {\\n                _sendETHSafe(contender.highestBidder, contender.highestBid);\\n            }\\n        }\\n\\n        emit BattleCanceled(battleId);\\n    }\\n\\n    /// @notice allows owner to settle a battle\\n    /// @param battleId the battle id\\n    function settleBattle(uint256 battleId) external onlyOwner {\\n        if (battleId > lastBattleId) {\\n            revert UnknownBattle();\\n        }\\n\\n        Battle storage battle = battles[battleId];\\n\\n        if (battle.settled) {\\n            revert AlreadySettled();\\n        }\\n\\n        uint256 timestamp = block.timestamp;\\n        if (timestamp < battle.endsAt) {\\n            revert BattleNotEnded();\\n        }\\n\\n        // settle the battle here, this will lock any Reentrancy\\n        battle.settled = true;\\n\\n        bytes32 seed = keccak256(\\n            abi.encode(\\n                block.timestamp,\\n                msg.sender,\\n                block.difficulty,\\n                blockhash(block.number - 1)\\n            )\\n        );\\n\\n        uint256 cumul;\\n        uint256 temp;\\n        uint256 length = battle.contenders;\\n\\n        uint256 currentGroupId_ = currentGroupId;\\n        address nftContract_ = nftContract;\\n        BattleContender storage contender;\\n\\n        for (uint256 i; i < length; i++) {\\n            contender = _battleContenders[battleId][i];\\n            cumul += contender.highestBid;\\n\\n            if (contender.highestBid > 0) {\\n                // if there is a bid\\n                // mint the NFT to artist and transfer to highestBidder\\n                temp = INiftyForge721(nftContract_).mint(\\n                    contender.artist,\\n                    contender.highestBidder\\n                );\\n\\n                // select a random bidder in the list of bidders\\n                seed = keccak256(abi.encode(seed));\\n\\n                emit BattleContenderResult(\\n                    battleId,\\n                    i, // index\\n                    temp, // tokenId\\n                    //  random bidder\\n                    contender.bidders.at(\\n                        uint256(seed) % contender.bidders.length()\\n                    )\\n                );\\n            } else {\\n                // else mint the NFT to artist\\n                temp = INiftyForge721(nftContract_).mint(contender.artist);\\n            }\\n\\n            _setTokenGroup(temp, currentGroupId_);\\n            tokenCreator[temp] = contender.artist;\\n        }\\n\\n        _sendETHSafe(\\n            withdrawTarget != address(0) ? withdrawTarget : msg.sender,\\n            cumul\\n        );\\n\\n        emit BattleSettled(battleId, cumul);\\n    }\\n\\n    /// @notice allows owner to change the time of a battle\\n    /// @param battleId the battle id\\n    /// @param startsAt the start time\\n    /// @param duration the battle duration\\n    function setBattleStarts(\\n        uint256 battleId,\\n        uint256 startsAt,\\n        uint256 duration\\n    ) external onlyOwner {\\n        if (battleId > lastBattleId) {\\n            revert UnknownBattle();\\n        }\\n\\n        Battle storage battle = battles[battleId];\\n\\n        if (battle.settled) {\\n            revert AlreadySettled();\\n        }\\n\\n        battle.startsAt = startsAt;\\n        battle.endsAt = startsAt + duration;\\n        emit BattleStartChanged(battleId, startsAt);\\n        emit BattleEndChanged(battleId, startsAt + duration);\\n    }\\n\\n    /// @notice allows owner to pass to the next\\n    /// @param previousGroupBaseURI current group baseURI\\n    /// @param newGroupBaseURI next group baseURI\\n    function incrementGroup(\\n        string calldata previousGroupBaseURI,\\n        string calldata newGroupBaseURI\\n    ) external onlyOwner {\\n        _incrementGroup(previousGroupBaseURI, newGroupBaseURI);\\n    }\\n\\n    /// @notice allows owner to set a group URI\\n    /// @param groupId the group id\\n    /// @param baseURI group baseURI\\n    function setGroupURI(uint256 groupId, string calldata baseURI)\\n        external\\n        onlyOwner\\n    {\\n        _setGroupURI(groupId, baseURI);\\n    }\\n\\n    /// @notice allows owner to set one URI for several groups\\n    /// @param groupIds the groups ids\\n    /// @param baseURI group baseURI\\n    function setGroupsURI(uint256[] calldata groupIds, string calldata baseURI)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i; i < groupIds.length; i++) {\\n            _setGroupURI(groupIds[i], baseURI);\\n        }\\n    }\\n\\n    /// @notice allows owner to associate a token to a specific group\\n    /// @param tokenId the token id\\n    /// @param groupId the group id\\n    function setTokenGroup(uint256 tokenId, uint256 groupId)\\n        external\\n        onlyOwner\\n    {\\n        _setTokenGroup(tokenId, groupId);\\n    }\\n\\n    /// @notice allows owner to associate tokenIds to a specific group\\n    /// @param tokenIds the token ids\\n    /// @param groupId the group id\\n    function setTokensGroup(uint256[] calldata tokenIds, uint256 groupId)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i; i < tokenIds.length; i++) {\\n            _setTokenGroup(tokenIds[i], groupId);\\n        }\\n    }\\n\\n    /// @notice allows owner to set the withdraw address\\n    /// @param newWithdrawTarget the new address to withdraw to\\n    function setWithdrawTarget(address newWithdrawTarget) external onlyOwner {\\n        withdrawTarget = newWithdrawTarget;\\n    }\\n\\n    /// @notice allows owner to change minimalBidIncreace and minimalBid\\n    /// @param newMinimalBid the new minimal bid, in wei\\n    /// @param newMinimalBidIncrease the new minimalBidIncrease, in percent, no decimals\\n    function setMinimals(uint256 newMinimalBid, uint256 newMinimalBidIncrease)\\n        external\\n        onlyOwner\\n    {\\n        minimalBid = newMinimalBid;\\n        minimalBidIncrease = newMinimalBidIncrease;\\n    }\\n\\n    ////////////////////////////////////////////\\n    // Internals                              //\\n    ////////////////////////////////////////////\\n\\n    /// @dev This function tries to send eth to an address; if the transfer doesn't work\\n    ///      it will be done using WETH\\n    /// @param recipient the recipient to refund\\n    /// @param value the value to refund\\n    function _sendETHSafe(address recipient, uint256 value) internal {\\n        if (value == 0) {\\n            return;\\n        }\\n\\n        // limit to 30k gas, to ensure noone uses a contract\\n        // to make outbidding/canceling overly expensive or impossible.\\n        (bool success, ) = recipient.call{value: value, gas: 30000}(\\\"\\\");\\n\\n        // if the refund didn't work, transform the ethereum into WETH and send it\\n        // to recipient\\n        if (!success) {\\n            IWETH(wethContract).deposit{value: value}();\\n            IWETH(wethContract).transfer(recipient, value);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wethContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BattleNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSelfOutbid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughContenders\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownBattle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WETHNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongContender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"BattleCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"randomBidder\",\"type\":\"address\"}],\"name\":\"BattleContenderResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contenders\",\"type\":\"address[]\"}],\"name\":\"BattleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"BattleEndChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidsSum\",\"type\":\"uint256\"}],\"name\":\"BattleSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"BattleStartChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contender\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"NewContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"TokenToGroup\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contenders\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contender\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"cancelBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGroupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"getBattleBids\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"previousGroupBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newGroupBaseURI\",\"type\":\"string\"}],\"name\":\"incrementGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBattleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalBidIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onAttach\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setBattleStarts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setGroupURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"groupIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setGroupsURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimalBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinimalBidIncrease\",\"type\":\"uint256\"}],\"name\":\"setMinimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"setTokenGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"setTokensGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWithdrawTarget\",\"type\":\"address\"}],\"name\":\"setWithdrawTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"battleId\",\"type\":\"uint256\"}],\"name\":\"settleBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTBattles", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}