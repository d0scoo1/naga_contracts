{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/allocators/NFTXAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INFTXInventoryStaking.sol\\\";\\nimport \\\"../interfaces/INFTXLPStaking.sol\\\";\\n\\nimport \\\"../interfaces/allocators/IAllocator.sol\\\";\\n\\nimport \\\"../types/FloorAccessControlled.sol\\\";\\n\\n\\n/**\\n * Contract deploys reserves from treasury into NFTX vaults,\\n * earning interest and rewards.\\n */\\n\\ncontract NFTXAllocator is IAllocator, FloorAccessControlled {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice describes the token used for staking in NFTX.\\n     */\\n\\n    struct stakingTokenData {\\n        uint256 vaultId;\\n        address rewardToken;\\n        bool isLiquidityPool;\\n        bool exists;\\n    }\\n\\n    event TreasuryAssetDeployed(address token, uint256 amount, uint256 value);\\n    event TreasuryAssetReturned(address token, uint256 amount, uint256 value);\\n\\n    // NFTX Inventory Staking contract\\n    INFTXInventoryStaking internal immutable inventoryStaking;\\n\\n    // NFTX Liquidity Staking contract\\n    INFTXLPStaking internal immutable liquidityStaking;\\n\\n    // Floor Treasury contract\\n    ITreasury internal immutable treasury;\\n\\n    // Corresponding NFTX token vault data for tokens\\n    mapping (address => stakingTokenData) public stakingTokenInfo;\\n\\n    // Corresponding xTokens for tokens\\n    mapping (address => address) public dividendTokenMapping;\\n\\n\\n    /**\\n     * @notice initialises the construct with no additional logic.\\n     */\\n\\n    constructor (\\n        address _authority,\\n        address _inventoryStaking,\\n        address _liquidityStaking,\\n        address _treasury\\n    ) FloorAccessControlled(IFloorAuthority(_authority)) {\\n        inventoryStaking = INFTXInventoryStaking(_inventoryStaking);\\n        liquidityStaking = INFTXLPStaking(_liquidityStaking);\\n\\n        treasury = ITreasury(_treasury);\\n    }\\n\\n\\n    /**\\n     * Deprecated in favour of harvestAll(address _token).\\n     */\\n\\n    function harvest(address _token, uint256 _amount) external override {\\n        revert(\\\"Method is deprecated in favour of harvestAll(address _token)\\\");\\n    }\\n\\n\\n    /**\\n     * @notice claims rewards from the vault.\\n     */\\n\\n    function harvestAll(address _token) external override onlyGovernor {\\n        stakingTokenData memory stakingToken = stakingTokenInfo[_token];\\n\\n        // We only want to allow harvesting from a specified liquidity pool mapping\\n        require(stakingToken.exists, \\\"Unsupported token\\\");\\n        require(stakingToken.isLiquidityPool, \\\"Must be liquidity staking token\\\");\\n\\n        // Send a request to the treasury to claim rewards from the NFTX liquidity staking pool\\n        treasury.claimNFTXRewards(\\n            address(liquidityStaking),\\n            stakingToken.vaultId,\\n            stakingToken.rewardToken\\n        );\\n    }\\n\\n\\n    /**\\n     * @notice sends any ERC20 token in the contract to caller.\\n     */\\n\\n    function rescue(address _token) external override onlyGovernor {\\n        // If the token is known, then we shouldn't be able to rescue it\\n        require(!stakingTokenInfo[_token].exists, \\\"Known token cannot be rescued\\\");\\n\\n        // Get the amount of token held on contract\\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\\n\\n        // Confirm that we hold some of the specified token\\n        require(_amount > 0, \\\"Token not held in contract\\\");\\n\\n        // Send to Governor\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n\\n    /**\\n     * @notice There should be no rewards held in the allocator, but any dust has formed\\n     * then we can use this check to claim rewards to the allocator and transfer it\\n     * to the governor.\\n     * \\n     * @param _token address Address of the staking token\\n     */\\n\\n    function rescueRewards(address _token) external onlyGovernor {\\n        stakingTokenData memory stakingToken = stakingTokenInfo[_token];\\n\\n        // We only want to allow harvesting from a specified liquidity pool mapping\\n        require(stakingToken.exists, \\\"Unsupported token\\\");\\n        require(stakingToken.isLiquidityPool, \\\"Must be liquidity staking token\\\");\\n\\n        INFTXLPStaking(address(liquidityStaking)).claimRewards(stakingToken.vaultId);\\n\\n        uint256 rewardTokenBalance = IERC20(stakingToken.rewardToken).balanceOf(address(this));\\n        if (rewardTokenBalance > 0) {\\n            IERC20(stakingToken.rewardToken).safeTransfer(msg.sender, rewardTokenBalance);\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice withdraws asset from treasury, deposits asset into NFTX staking.\\n     */\\n\\n    function deposit(address _token, uint256 _amount) external override onlyGovernor {\\n        stakingTokenData memory stakingToken = stakingTokenInfo[_token];\\n        address dividendToken = dividendTokenMapping[_token];\\n\\n        require(stakingToken.exists, \\\"Unsupported staking token\\\");\\n        require(dividendToken != address(0), \\\"Unsupported dividend token\\\");\\n\\n        // Ensure that a calculator exists for the `dividendToken`\\n        require(treasury.bondCalculator(dividendToken) != address(0), \\\"Unsupported xToken calculator\\\");\\n\\n        // Retrieve amount of asset from treasury, decreasing total reserves\\n        treasury.allocatorManage(_token, _amount);\\n\\n        uint256 value = treasury.tokenValue(_token, _amount);\\n        emit TreasuryAssetDeployed(_token, _amount, value);\\n\\n        // Approve and deposit into inventory pool, returning xToken\\n        if (stakingToken.isLiquidityPool) {\\n            IERC20(_token).safeApprove(address(liquidityStaking), _amount);\\n            liquidityStaking.deposit(stakingToken.vaultId, _amount);\\n        } else {\\n            IERC20(_token).safeApprove(address(inventoryStaking), _amount);\\n            inventoryStaking.deposit(stakingToken.vaultId, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws from staking pool, and deposits asset into treasury.\\n     */\\n\\n    function withdraw(address _token, uint256 _amount) external override onlyGovernor {\\n        stakingTokenData memory stakingToken = stakingTokenInfo[_token];\\n        address dividendToken = dividendTokenMapping[_token];\\n\\n        require(stakingToken.exists, \\\"Unsupported staking token\\\");\\n        require(dividendToken != address(0), \\\"Unsupported dividend token\\\");\\n\\n        // Retrieve amount of asset from treasury, decreasing total reserves\\n        treasury.allocatorManage(dividendToken, _amount);\\n\\n        uint256 valueWithdrawn = treasury.tokenValue(dividendToken, _amount);\\n        emit TreasuryAssetDeployed(dividendToken, _amount, valueWithdrawn);\\n\\n        // Approve and withdraw from staking pool, returning asset and potentially reward tokens\\n        if (stakingToken.isLiquidityPool) {\\n            IERC20(dividendToken).safeApprove(address(liquidityStaking), _amount);\\n            liquidityStaking.withdraw(stakingToken.vaultId, _amount);\\n        } else {\\n            IERC20(dividendToken).safeApprove(address(inventoryStaking), _amount);\\n            inventoryStaking.withdraw(stakingToken.vaultId, _amount); \\n        }\\n\\n        // Get the balance of the returned vToken or vTokenWeth\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        uint256 value = treasury.tokenValue(_token, balance);\\n\\n        // Deposit the token back into the treasury, increasing total reserves and minting 0 FLOOR\\n        IERC20(_token).safeApprove(address(treasury), balance);\\n        treasury.deposit(balance, _token, value);\\n\\n        emit TreasuryAssetReturned(_token, balance, value);\\n    }\\n\\n    /**\\n     * @notice Staked positions return an xToken which should be regularly deposited\\n     * back into the Treasury to account for their value. This cannot be done\\n     * in the same transaction as `deposit()` because of a 2 second timelock in NFTX.\\n     */\\n\\n    function depositXTokenToTreasury(address _token) external onlyGovernor {\\n        stakingTokenData memory stakingToken = stakingTokenInfo[_token];\\n        address dividendToken = dividendTokenMapping[_token];\\n\\n        require(stakingToken.exists, \\\"Unsupported staking token\\\");\\n        require(dividendToken != address(0), \\\"Unsupported dividend token\\\");\\n\\n        // Get the balance of the xToken\\n        uint256 balance = IERC20(dividendToken).balanceOf(address(this));\\n        uint256 value = treasury.tokenValue(dividendToken, balance);\\n\\n        // Deposit the xToken back into the treasury, increasing total reserves and minting 0 FLOOR\\n        IERC20(dividendToken).safeApprove(address(treasury), balance);\\n        treasury.deposit(balance, dividendToken, value);\\n\\n        emit TreasuryAssetReturned(dividendToken, balance, value);\\n    }\\n\\n    /**\\n     * @notice adds asset and corresponding xToken to mapping\\n     */\\n\\n    function setDividendToken(address _token, address _xToken) external override onlyGovernor {\\n        require(_token != address(0), \\\"Token: Zero address\\\");\\n        require(_xToken != address(0), \\\"xToken: Zero address\\\");\\n\\n        dividendTokenMapping[_token] = _xToken;\\n    }\\n\\n\\n    /**\\n     * @notice remove xToken mapping\\n     */\\n\\n    function removeDividendToken(address _token) external override onlyGovernor {\\n        delete dividendTokenMapping[_token];\\n    }\\n\\n\\n    /**\\n     * @notice set vault mapping\\n     */\\n\\n    function setStakingToken(address _token, address _rewardToken, uint256 _vaultId, bool _isLiquidityPool) external override onlyGovernor {\\n        require(_token != address(0), \\\"Cannot set vault for NULL token\\\");\\n\\n        // Set up our vault mapping information\\n        stakingTokenInfo[_token] = stakingTokenData({\\n            vaultId: _vaultId,\\n            isLiquidityPool: _isLiquidityPool,\\n            rewardToken: _rewardToken,\\n            exists: true\\n        });\\n    }\\n\\n\\n    /**\\n     * @notice remove vault mapping\\n     */\\n\\n    function removeStakingToken(address _token) external override onlyGovernor {\\n        delete stakingTokenInfo[_token];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function bondCalculator(address _address) external view returns (address);\\n\\n    function deposit(uint256 _amount, address _token, uint256 _profit) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function depositERC721(address _token, uint256 _tokenId) external;\\n\\n    function withdrawERC721(address _token, uint256 _tokenId) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function allocatorManage(address _token, uint256 _amount) external;\\n\\n    function claimNFTXRewards(address _liquidityStaking, uint256 _vaultId, address _rewardToken) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n    \\n    function riskOffValuation(address _token) external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTXInventoryStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface INFTXInventoryStaking {\\n    function deposit(uint256 vaultId, uint256 _amount) external;\\n    function withdraw(uint256 vaultId, uint256 _share) external;\\n    function xTokenShareValue(uint256 vaultId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/INFTXLPStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface INFTXLPStaking {\\n    struct StakingPool {\\n      address stakingToken;\\n      address rewardToken;\\n    }\\n\\n    function deposit(uint256 vaultId, uint256 amount) external;\\n    function exit(uint256 vaultId, uint256 amount) external;\\n    function withdraw(uint256 vaultId, uint256 amount) external;\\n    function claimRewards(uint256 vaultId) external;\\n    function vaultStakingInfo(uint256 vaultId) external view returns (StakingPool memory stakingPool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/allocators/IAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IAllocator {\\n    function deposit(address _token, uint256 _amount) external;\\n    function withdraw(address _token, uint256 _amount) external;\\n\\n    // claims any claimable rewards for this token and sends back to Treasury\\n    function harvest(address _token, uint256 _amount) external;\\n\\n    // claims all available rewards for this token and sends back to Treasury\\n    function harvestAll(address _token) external;\\n\\n    // onlyGovernor sends any ERC20 token in the contract to treasury\\n    function rescue(address _token) external; \\n\\n    // NFTX Vault mapping utility\\n    function setStakingToken(address _token, address _rewardToken, uint256 vaultId, bool _isLiquidityPool) external;\\n    function removeStakingToken(address _token) external;\\n    function setDividendToken(address _token, address _xToken) external;\\n    function removeDividendToken(address _token) external;\\n}\"\r\n    },\r\n    \"contracts/types/FloorAccessControlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IFloorAuthority.sol\\\";\\n\\nabstract contract FloorAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IFloorAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IFloorAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IFloorAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IFloorAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFloorAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IFloorAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inventoryStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFloorAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TreasuryAssetDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TreasuryAssetReturned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IFloorAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"depositXTokenToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendTokenMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFloorAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"}],\"name\":\"setDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLiquidityPool\",\"type\":\"bool\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTXAllocator", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000618907e21898d0357f0a0bf0b112949b1530cbc10000000000000000000000003e135c3e981fae3383a5ae0d323860a34cfab893000000000000000000000000688c3e4658b5367da06fd629e41879beab538e3700000000000000000000000091e453f442d25523f42063e1695390e325076ca2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}