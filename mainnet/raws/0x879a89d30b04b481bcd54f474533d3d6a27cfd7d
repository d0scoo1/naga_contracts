{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n}\"},\"LibPropConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nlibrary LibPropConstants {\\n    \\n\\n    // Addresses\\n    address internal constant AAVE_GOVERNANCE = 0xEC568fffba86c094cf06b22134B23074DFE2252c;\\n    address internal constant ECOSYSTEM_RESERVE = 0x25F2226B597E8F9514B3F68F00f494cF4f286491;\\n    address internal constant ECOSYSTEM_RESERVE_CONTROLLER = 0x1E506cbb6721B83B1549fa1558332381Ffa61A93;\\n    address internal constant SHORT_EXECUTOR = 0xEE56e2B3D491590B5b31738cC34d5232F378a8D5;\\n    address internal constant AAVE_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    address internal constant USDC_TOKEN = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant AUSDC_TOKEN = 0xBcca60bB61934080951369a648Fb03DF4F96263C;\\n    address internal constant SABLIER = 0xCD18eAa163733Da39c232722cBC4E8940b1D8888;\\n    address internal constant POOL = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n    address internal constant CERTORA_BENEFICIARY = 0x0F11640BF66e2D9352d9c41434A5C6E597c5e4c8;\\n    address internal constant CERTORA_AAVE_MULTISIG = 0x5CC8438831D2DD88Cdedf0cB4Bc2D0381Ba3627E;\\n    address internal constant AAVE_USD_CHAINLINK_ORACLE = 0x547a514d5e3769680Ce22B2361c10Ea13619e8a9;\\n    // new impl\\n    address internal constant AAVE_COLLECTOR = 0x7AB1e5c406F36FE20Ce7eBa528E182903CA8bFC7;\\n    \\n    // Amounts\\n    uint256 internal constant USDC_VEST = 1_000_000 * 1e6;\\n    uint256 internal constant AAVE_VEST_USDC_WORTH = 700_000 * 1e6;\\n    uint256 internal constant AAVE_FUND_USDC_WORTH = 200_000 * 1e6;\\n}\\n\"},\"PayloadCertoraProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {LibPropConstants} from \\\"./LibPropConstants.sol\\\";\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\ninterface IControllerAaveEcosystemReserve {\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface ISablier {\\n    function createStream(\\n        address recipient, \\n        uint256 deposit, \\n        address tokenAddress, \\n        uint256 startTime, \\n        uint256 stopTime\\n    ) external returns (uint256);\\n\\n    function withdrawFromStream(uint256 streamId, uint256 amount) external returns (bool);\\n\\n    function balanceOf(uint256 streamId, address who) external view returns (uint256);\\n\\n    function nextStreamId() external view returns (uint256);\\n}\\n\\ninterface ICollector {\\n    function transfer(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface IPool {\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\\n\\ncontract PayloadCertoraProposal {\\n\\n    // Return the price of AAVE in USDC using the Oracle\\u0027s decimals, and the decimals used\\n    function getPriceOfAAVEinUSDC() public view returns (uint256,uint8) {\\n        AggregatorV3Interface oracle = AggregatorV3Interface(LibPropConstants.AAVE_USD_CHAINLINK_ORACLE);\\n        (, int256 aavePrice, uint startedAt, , ) = oracle.latestRoundData();\\n        uint freshTime = 3 /* days */ * 24 /* hours */ * 60 /* minutes */ * 60 /* seconds */; // using \\\"days\\\" leads to \\\"Expected primary expression\\\" error\\n        require (startedAt \\u003e block.timestamp - freshTime, \\\"price is not fresh\\\");\\n        require (aavePrice \\u003e 0, \\\"aave price must be positive\\\");\\n\\n        uint8 priceDecimals = oracle.decimals();\\n        return (uint256(aavePrice), priceDecimals);\\n    }\\n\\n    // formally verify me please :-)\\n    function convertUSDCAmountToAAVE(uint256 usdcAmount) public view returns (uint256) {\\n        uint8 usdcDecimals = IERC20(LibPropConstants.USDC_TOKEN).decimals();\\n        uint8 aaveDecimals = IERC20(LibPropConstants.AAVE_TOKEN).decimals();\\n\\n        (uint aavePrice, uint8 priceDecimals) = getPriceOfAAVEinUSDC();\\n        \\n        /**\\n            aave_amount = ((usdcAmount / 10**usdcDecimals) * 10**aaveDecimals )/  (aavePrice / 10**oracleDecimals )\\n         */\\n        uint256 aaveAmount = usdcAmount * 10**priceDecimals * 10**aaveDecimals \\n                                / (aavePrice * 10**usdcDecimals);\\n        return aaveAmount;\\n    }\\n\\n\\n    // LO: Consider using address(this) instead of SHORT_EXECUTOR - changed\\n    function execute() external {\\n        uint256 totalAaveAmount = convertUSDCAmountToAAVE(\\n                LibPropConstants.AAVE_VEST_USDC_WORTH + LibPropConstants.AAVE_FUND_USDC_WORTH\\n            );\\n        uint256 vestAaveAmount = convertUSDCAmountToAAVE(LibPropConstants.AAVE_VEST_USDC_WORTH);\\n        uint256 fundAaveAmount = convertUSDCAmountToAAVE(LibPropConstants.AAVE_FUND_USDC_WORTH);\\n        require (totalAaveAmount - 1 \\u003c= vestAaveAmount + fundAaveAmount \\u0026\\u0026 vestAaveAmount + fundAaveAmount \\u003c= totalAaveAmount + 1, \\\"not addditive\\\");\\n\\n        /**\\n            1. Transfer a total worth of $900,000 in AAVE tokens from the EcosystemReserve to the \\n            ShortExecutor using the Ecosystem Reserve Controller contract at 0x1E506cbb6721B83B1549fa1558332381Ffa61A93.\\n        */\\n        IControllerAaveEcosystemReserve(LibPropConstants.ECOSYSTEM_RESERVE_CONTROLLER).transfer(\\n            IERC20(LibPropConstants.AAVE_TOKEN),\\n            address(this),\\n            totalAaveAmount\\n        );\\n\\n        /**\\n            2. Approve $700,000 worth of AAVE tokens to Sablier.\\n         */\\n        require(IERC20(LibPropConstants.AAVE_TOKEN).allowance(address(this), LibPropConstants.SABLIER) == 0, \\\"Allowance to sablier is not zero\\\");\\n        IERC20(LibPropConstants.AAVE_TOKEN).approve(LibPropConstants.SABLIER, vestAaveAmount);\\n\\n        /**\\n            3. Create a Sablier stream with Certora as the beneficiary, to stream the $700,000 worth of Aave over 6 months.\\n         */\\n        uint currentTime = block.timestamp;\\n        uint sixMonthsDuration = 6 * 30 days;\\n        uint actualAmount = (vestAaveAmount / sixMonthsDuration) * sixMonthsDuration; // rounding\\n        //console.logUint(vestAaveAmount-actualAmount); // 15281152\\n        require(vestAaveAmount - actualAmount \\u003c 1e18, \\\"losing more than 1 AAVE due to rounding\\\");\\n        uint streamIdAaveVest = ISablier(LibPropConstants.SABLIER).createStream(\\n            LibPropConstants.CERTORA_BENEFICIARY,\\n            actualAmount,\\n            LibPropConstants.AAVE_TOKEN,\\n            currentTime,\\n            currentTime + sixMonthsDuration\\n        );\\n        require (streamIdAaveVest \\u003e 0, \\\"invalid stream id\\\");\\n\\n        /**\\n            4. Approve $200,000 worth of AAVE to a multisig co-controlled by the Certora team and Aave community members.\\n         */\\n        IERC20(LibPropConstants.AAVE_TOKEN).transfer(LibPropConstants.CERTORA_AAVE_MULTISIG, fundAaveAmount);\\n\\n        /**\\n            5. Transfer the USDC amount (USDC 1,000,000) from the Aave Collector to the ShortExecutor - \\n            uses new controller after proposal 61,\\n            first transferring aUSDC and then withdrawing it from the pool to the executor.\\n         */\\n        uint totalUSDCAmount = LibPropConstants.USDC_VEST;\\n        ICollector(LibPropConstants.AAVE_COLLECTOR /* new controller after proposal 61*/).transfer(\\n            IERC20(LibPropConstants.AUSDC_TOKEN),\\n            address(this),\\n            totalUSDCAmount\\n        );\\n\\n        IPool(LibPropConstants.POOL).withdraw(\\n            address(LibPropConstants.USDC_TOKEN),\\n            totalUSDCAmount,\\n            address(this)\\n        );\\n\\n        /**\\n            6. Approve full USDC amount to Sablier.\\n         */\\n        require(IERC20(LibPropConstants.USDC_TOKEN).allowance(address(this), LibPropConstants.SABLIER) == 0, \\\"Allowance to sablier is not zero\\\");\\n        IERC20(LibPropConstants.USDC_TOKEN).approve(LibPropConstants.SABLIER, totalUSDCAmount);\\n        \\n        /**\\n            7. Create a Sablier stream with Certora as the beneficiary, to stream the USDC amount over 6 months.\\n         */\\n        actualAmount = (totalUSDCAmount / sixMonthsDuration) * sixMonthsDuration; // rounding\\n        //console.logUint(totalUSDCAmount - actualAmount); // 6400000\\n        require(totalUSDCAmount - actualAmount \\u003c 10e6, \\\"losing more than 10 USDC due to rounding\\\");\\n        uint streamIdUSDCVest = ISablier(LibPropConstants.SABLIER).createStream(\\n            LibPropConstants.CERTORA_BENEFICIARY, \\n            actualAmount,\\n            LibPropConstants.USDC_TOKEN,\\n            currentTime, \\n            currentTime + sixMonthsDuration\\n        );\\n        require (streamIdUSDCVest \\u003e 0, \\\"invalid stream id\\\");\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"convertUSDCAmountToAAVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOfAAVEinUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PayloadCertoraProposal", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b5a4c0ee3c0a346d685eee6d87ed627cb3b241af94ed919678a15a1aa791b256"}]}