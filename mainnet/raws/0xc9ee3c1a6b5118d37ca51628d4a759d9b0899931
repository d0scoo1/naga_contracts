{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity =0.7.6;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract SHIBURAIVESTKEEPER is Context, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public shiburai; \r\n    uint256 public withdrawAmount;\r\n    uint256 public waitTime;\r\n    uint256 public maxHoldings;\r\n    bool public withdrawEnabled;\r\n    uint public contractShiburaiBalance;\r\n\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => uint256) private lastWithdraw;\r\n\r\n    constructor() {\r\n        IERC20 _shiburai = IERC20(0x275EB4F541b372EfF2244A444395685C32485368);\r\n        shiburai = _shiburai;\r\n        withdrawAmount = 100000000000;\r\n        waitTime = 1 days;\r\n        maxHoldings = 10000000000;\r\n        withdrawEnabled = true;\r\n    }\r\n\r\n    function setWithdrawParameters( uint256 _amount, uint256 _numOfDays, uint256 _threshold, bool _enabled) external onlyOwner {\r\n        withdrawAmount = _amount * 10**9;\r\n        waitTime = _numOfDays * 1 days;\r\n        withdrawEnabled = _enabled;\r\n        maxHoldings = _threshold * 10**9;\r\n    }\r\n\r\n    function remainingVestedBalance(address _address) external view returns(uint256) {\r\n        return balances[_address];\r\n    }\r\n\r\n    function lastWithdrawnAt(address _address) external view returns(uint256) {\r\n        return lastWithdraw[_address];\r\n    }\r\n\r\n    function deposit() external {\r\n        uint _amount = shiburai.balanceOf(msg.sender);\r\n        require(shiburai.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\"); \r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        contractShiburaiBalance = contractShiburaiBalance.add(_amount);\r\n    }\r\n\r\n    function withdraw() external {\r\n        uint _balance = shiburai.balanceOf(msg.sender);\r\n        require(_balance <= maxHoldings, \"Cannot accumulate\");\r\n        require(balances[msg.sender] >= withdrawAmount, \"Insuffecient Balance\");\r\n        require(lastWithdraw[msg.sender].add(waitTime) <= block.timestamp, \"Must wait more time\");\r\n        lastWithdraw[msg.sender] = block.timestamp;\r\n        shiburai.transfer(address(msg.sender), withdrawAmount);\r\n        balances[msg.sender] = balances[msg.sender].sub(withdrawAmount);\r\n        contractShiburaiBalance = contractShiburaiBalance.sub(withdrawAmount);\r\n    }   \r\n\r\n    //to withdraw any remaining tokens after vesting has finished\r\n    function claimRemainingBalanceAtEndOfVesting() external onlyOwner {\r\n        uint _amount = shiburai.balanceOf(address(this));\r\n        shiburai.transfer(msg.sender, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claimRemainingBalanceAtEndOfVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractShiburaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lastWithdrawnAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"remainingVestedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numOfDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setWithdrawParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shiburai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SHIBURAIVESTKEEPER", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4936eab53b83ef98440b340ae77a1014c900e6767af09136e01c79ebc64cd145"}]}