{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.4;\r\n\r\n/// @title  StaticMulticall based on UniswapV3 Multicall at 0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\r\n/// @author Aleph Retamal <github.com/alephao>\r\n/// @notice Modified (UniswapV3 Multicall).aggregate to be a `view` fn. \r\n///         Using staticcall instead of call and if it fails, return the error\r\ncontract StaticMulticall {  \r\n    error CallError(bytes err);\r\n\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        bytes returnData;\r\n    }\r\n\r\n    function aggregate(Call[] memory calls) external view returns (uint256 blockNumber, bytes[] memory returnData) {\r\n        blockNumber = block.number;\r\n        returnData = new bytes[](calls.length);\r\n        for(uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);\r\n            if (!success) {\r\n              revert CallError(ret);\r\n            }\r\n            returnData[i] = ret;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"CallError\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct StaticMulticall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StaticMulticall", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e355f9377949c6bf4641923c440139218ebdf5deac91027c2a7bb131283c5d41"}]}