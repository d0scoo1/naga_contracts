{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LendFlareVotingEscrowV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"./common/IBaseReward.sol\\\";\\n\\n// Reference @openzeppelin/contracts/token/ERC20/IERC20.sol\\ninterface ILendFlareVotingEscrow {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract LendFlareVotingEscrowV2 is Initializable, ReentrancyGuard, ILendFlareVotingEscrow {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 constant WEEK = 1 weeks; // all future times are rounded by week\\n    uint256 constant MAXTIME = 4 * 365 * 86400; // 4 years\\n    string constant NAME = \\\"Vote-escrowed LFT\\\";\\n    string constant SYMBOL = \\\"VeLFT\\\";\\n    uint8 constant DECIMALS = 18;\\n\\n    address public token;\\n    address public rewardManager;\\n\\n    uint256 public lockedSupply;\\n\\n    enum DepositTypes {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    struct Point {\\n        int256 bias;\\n        int256 slope; // dweight / dt\\n        uint256 timestamp; // timestamp\\n    }\\n\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 end;\\n    }\\n\\n    IBaseReward[] public rewardPools;\\n\\n    mapping(address => LockedBalance) public lockedBalances;\\n    mapping(address => mapping(uint256 => Point)) public userPointHistory; // user => ( user epoch => point )\\n    mapping(address => uint256) public userPointEpoch; // user => user epoch\\n\\n    bool public expired;\\n    uint256 public epoch;\\n\\n    mapping(uint256 => Point) public pointHistory; // epoch -> unsigned point.\\n    mapping(uint256 => int256) public slopeChanges; // time -> signed slope change\\n\\n    event Deposit(address indexed provider, uint256 value, uint256 indexed locktime, DepositTypes depositTypes, uint256 ts);\\n    event Withdraw(address indexed provider, uint256 value, uint256 timestamp);\\n    event TotalSupply(uint256 prevSupply, uint256 supply);\\n\\n    // @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() public initializer {}\\n\\n    function initialize(address _token, address _rewardManager) public initializer {\\n        token = _token;\\n        rewardManager = _rewardManager;\\n    }\\n\\n    modifier onlyRewardManager() {\\n        require(rewardManager == msg.sender, \\\"LendFlareVotingEscrow: caller is not the rewardManager\\\");\\n        _;\\n    }\\n\\n    function rewardPoolsLength() external view returns (uint256) {\\n        return rewardPools.length;\\n    }\\n\\n    function addRewardPool(address _v) external onlyRewardManager returns (bool) {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        rewardPools.push(IBaseReward(_v));\\n\\n        return true;\\n    }\\n\\n    function clearRewardPools() external onlyRewardManager {\\n        delete rewardPools;\\n    }\\n\\n    function updateTotalSupply(bytes memory data) public {\\n        bytes memory callData;\\n\\n        callData = abi.encodePacked(bytes4(keccak256(bytes(\\\"_updateTotalSupply(address[],bool)\\\"))), data);\\n\\n        (bool success, bytes memory returnData) = address(this).call(callData);\\n        require(success, string(returnData));\\n    }\\n\\n    function _updateTotalSupply(address[] calldata _senders, bool _expired) public {\\n        require(epoch == 0, \\\"!epoch\\\");\\n\\n        for (uint256 i = 0; i < _senders.length; i++) {\\n            LockedBalance storage newLocked = lockedBalances[_senders[i]];\\n\\n            _updateTotalSupply(_senders[i], newLocked);\\n        }\\n\\n        if (_expired) {\\n            require(!expired, \\\"!expired\\\");\\n\\n            expired = true;\\n        }\\n    }\\n\\n    function _updateTotalSupply(address _sender, LockedBalance storage _newLocked) internal {\\n        Point memory userOldPoint;\\n        Point memory userNewPoint;\\n\\n        int256 newSlope = 0;\\n\\n        if (_sender != address(0)) {\\n            if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n                userNewPoint.slope = int256(_newLocked.amount / MAXTIME);\\n                userNewPoint.bias = userNewPoint.slope * int256(_newLocked.end - block.timestamp);\\n            }\\n            newSlope = slopeChanges[_newLocked.end];\\n        }\\n\\n        Point memory lastPoint = Point({ bias: 0, slope: 0, timestamp: block.timestamp });\\n\\n        if (epoch > 0) {\\n            lastPoint = pointHistory[epoch];\\n        }\\n\\n        uint256 lastCheckpoint = lastPoint.timestamp;\\n        uint256 iterativeTime = _floorToWeek(lastCheckpoint);\\n\\n        for (uint256 i; i < 255; i++) {\\n            int256 slope = 0;\\n            iterativeTime += WEEK;\\n\\n            if (iterativeTime > block.timestamp) {\\n                iterativeTime = block.timestamp;\\n            } else {\\n                slope = slopeChanges[iterativeTime];\\n            }\\n\\n            lastPoint.bias -= lastPoint.slope * int256(iterativeTime - lastCheckpoint);\\n            lastPoint.slope += slope;\\n\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0; // This can happen\\n            }\\n\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0; // This cannot happen - just in case\\n            }\\n\\n            lastCheckpoint = iterativeTime;\\n            lastPoint.timestamp = iterativeTime;\\n\\n            epoch++;\\n\\n            if (iterativeTime == block.timestamp) {\\n                break;\\n            } else {\\n                pointHistory[epoch] = lastPoint;\\n            }\\n        }\\n\\n        if (_sender != address(0)) {\\n            lastPoint.slope += userNewPoint.slope - userOldPoint.slope;\\n            lastPoint.bias += userNewPoint.bias - userOldPoint.bias;\\n\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n        }\\n\\n        pointHistory[epoch] = lastPoint;\\n\\n        if (_sender != address(0)) {\\n            newSlope -= userNewPoint.slope; // old slope disappeared at this point\\n            slopeChanges[_newLocked.end] = newSlope;\\n        }\\n    }\\n\\n    function _checkpointV1(address _sender, LockedBalance storage _newLocked) internal {\\n        Point storage point = userPointHistory[_sender][++userPointEpoch[_sender]];\\n\\n        point.timestamp = block.timestamp;\\n\\n        if (_newLocked.end > block.timestamp) {\\n            point.slope = int256(_newLocked.amount / MAXTIME);\\n            point.bias = point.slope * int256(_newLocked.end - block.timestamp);\\n        }\\n    }\\n\\n    function _checkpoint(\\n        address _sender,\\n        LockedBalance memory _oldLocked,\\n        LockedBalance memory _newLocked\\n    ) internal {\\n        Point memory userOldPoint;\\n        Point memory userNewPoint;\\n\\n        int256 oldSlope = 0;\\n        int256 newSlope = 0;\\n\\n        if (_sender != address(0)) {\\n            if (_oldLocked.end > block.timestamp && _oldLocked.amount > 0) {\\n                userOldPoint.slope = int256(_oldLocked.amount / MAXTIME);\\n                userOldPoint.bias = userOldPoint.slope * int256(_oldLocked.end - block.timestamp);\\n            }\\n\\n            if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n                userNewPoint.slope = int256(_newLocked.amount / MAXTIME);\\n                userNewPoint.bias = userNewPoint.slope * int256(_newLocked.end - block.timestamp);\\n            }\\n\\n            oldSlope = slopeChanges[_oldLocked.end];\\n\\n            if (_newLocked.end != 0) {\\n                if (_newLocked.end == _oldLocked.end) {\\n                    newSlope = oldSlope;\\n                } else {\\n                    newSlope = slopeChanges[_newLocked.end];\\n                }\\n            }\\n        }\\n\\n        Point memory lastPoint = Point({ bias: 0, slope: 0, timestamp: block.timestamp });\\n\\n        if (epoch > 0) {\\n            lastPoint = pointHistory[epoch];\\n        }\\n\\n        uint256 lastCheckpoint = lastPoint.timestamp;\\n        uint256 iterativeTime = _floorToWeek(lastCheckpoint);\\n\\n        for (uint256 i; i < 255; i++) {\\n            int256 slope = 0;\\n\\n            iterativeTime += WEEK;\\n\\n            if (iterativeTime > block.timestamp) {\\n                iterativeTime = block.timestamp;\\n            } else {\\n                slope = slopeChanges[iterativeTime];\\n            }\\n\\n            lastPoint.bias -= lastPoint.slope * int256(iterativeTime - lastCheckpoint);\\n            lastPoint.slope += slope;\\n\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0; // This can happen\\n            }\\n\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0; // This cannot happen - just in case\\n            }\\n\\n            lastCheckpoint = iterativeTime;\\n            lastPoint.timestamp = iterativeTime;\\n\\n            epoch++;\\n\\n            if (iterativeTime == block.timestamp) {\\n                break;\\n            } else {\\n                pointHistory[epoch] = lastPoint;\\n            }\\n        }\\n\\n        if (_sender != address(0)) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            lastPoint.slope += userNewPoint.slope - userOldPoint.slope;\\n            lastPoint.bias += userNewPoint.bias - userOldPoint.bias;\\n\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n        }\\n\\n        pointHistory[epoch] = lastPoint;\\n\\n        if (_sender != address(0)) {\\n            if (_oldLocked.end > block.timestamp) {\\n                oldSlope += userOldPoint.slope;\\n\\n                if (_newLocked.end == _oldLocked.end) {\\n                    oldSlope -= userNewPoint.slope; // It was a new deposit, not extension\\n                }\\n\\n                slopeChanges[_oldLocked.end] = oldSlope;\\n            }\\n\\n            if (_newLocked.end > block.timestamp) {\\n                if (_newLocked.end > _oldLocked.end) {\\n                    newSlope -= userNewPoint.slope; // old slope disappeared at this point\\n                    slopeChanges[_newLocked.end] = newSlope;\\n                }\\n            }\\n\\n            uint256 userEpoch = userPointEpoch[_sender] + 1;\\n\\n            userPointEpoch[_sender] = userEpoch;\\n            userNewPoint.timestamp = block.timestamp;\\n            userPointHistory[_sender][userEpoch] = userNewPoint;\\n        }\\n    }\\n\\n    function _depositFor(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _unlockTime,\\n        LockedBalance storage _locked,\\n        DepositTypes _depositTypes\\n    ) internal {\\n        uint256 oldLockedSupply = lockedSupply;\\n\\n        if (_amount > 0) {\\n            IERC20(token).safeTransferFrom(_sender, address(this), _amount);\\n        }\\n\\n        LockedBalance memory oldLocked;\\n\\n        (oldLocked.amount, oldLocked.end) = (_locked.amount, _locked.end);\\n\\n        _locked.amount = _locked.amount + _amount;\\n        lockedSupply = lockedSupply + _amount;\\n\\n        if (_unlockTime > 0) {\\n            _locked.end = _unlockTime;\\n        }\\n\\n        for (uint256 i = 0; i < rewardPools.length; i++) {\\n            rewardPools[i].stake(_sender);\\n        }\\n\\n        if (expired) {\\n            _checkpoint(_sender, oldLocked, _locked);\\n        } else {\\n            _checkpointV1(_sender, _locked);\\n        }\\n\\n        emit Deposit(_sender, _amount, _locked.end, _depositTypes, block.timestamp);\\n        emit TotalSupply(oldLockedSupply, lockedSupply);\\n    }\\n\\n    function deposit(uint256 _amount) external nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n\\n        require(_amount > 0, \\\"need non-zero value\\\");\\n        require(locked.amount > 0, \\\"no existing lock found\\\");\\n        require(locked.end > block.timestamp, \\\"cannot add to expired lock. Withdraw\\\");\\n\\n        _depositFor(msg.sender, _amount, 0, locked, DepositTypes.DEPOSIT_FOR_TYPE);\\n    }\\n\\n    function createLock(uint256 _amount, uint256 _unlockTime) public nonReentrant {\\n        _unlockTime = _floorToWeek(_unlockTime);\\n\\n        require(_amount != 0, \\\"Must stake non zero amount\\\");\\n        require(_unlockTime > block.timestamp, \\\"Can only lock until time in the future\\\");\\n\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n\\n        require(locked.amount == 0, \\\"Withdraw old tokens first\\\");\\n\\n        uint256 roundedMin = _floorToWeek(block.timestamp) + WEEK;\\n        uint256 roundedMax = _floorToWeek(block.timestamp) + MAXTIME;\\n\\n        if (_unlockTime < roundedMin) {\\n            _unlockTime = roundedMin;\\n        } else if (_unlockTime > roundedMax) {\\n            _unlockTime = roundedMax;\\n        }\\n\\n        _depositFor(msg.sender, _amount, _unlockTime, locked, DepositTypes.CREATE_LOCK_TYPE);\\n    }\\n\\n    function increaseAmount(uint256 _amount) external nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n\\n        require(_amount != 0, \\\"Must stake non zero amount\\\");\\n        require(locked.amount != 0, \\\"No existing lock found\\\");\\n        require(locked.end >= block.timestamp, \\\"Can't add to expired lock. Withdraw old tokens first\\\");\\n\\n        _depositFor(msg.sender, _amount, 0, locked, DepositTypes.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n\\n        require(locked.amount != 0, \\\"No existing lock found\\\");\\n        require(locked.end >= block.timestamp, \\\"Lock expired. Withdraw old tokens first\\\");\\n\\n        uint256 maxUnlockTime = _floorToWeek(block.timestamp) + MAXTIME;\\n        require(locked.end != maxUnlockTime, \\\"Already locked for maximum time\\\");\\n\\n        _unlockTime = _floorToWeek(_unlockTime);\\n\\n        require(_unlockTime <= maxUnlockTime, \\\"Can't lock for more than max time\\\");\\n\\n        _depositFor(msg.sender, 0, _unlockTime, locked, DepositTypes.INCREASE_UNLOCK_TIME);\\n    }\\n\\n    function withdraw() public nonReentrant {\\n        LockedBalance storage locked = lockedBalances[msg.sender];\\n        LockedBalance memory oldLocked = locked;\\n\\n        require(block.timestamp >= locked.end, \\\"The lock didn't expire\\\");\\n\\n        uint256 oldLockedSupply = lockedSupply;\\n        uint256 lockedAmount = locked.amount;\\n\\n        lockedSupply = lockedSupply - lockedAmount;\\n\\n        locked.amount = 0;\\n        locked.end = 0;\\n\\n        if (expired) {\\n            _checkpoint(msg.sender, oldLocked, locked);\\n        } else {\\n            _checkpointV1(msg.sender, locked);\\n        }\\n\\n        IERC20(token).safeTransfer(msg.sender, lockedAmount);\\n\\n        for (uint256 i = 0; i < rewardPools.length; i++) {\\n            rewardPools[i].withdraw(msg.sender);\\n        }\\n\\n        emit Withdraw(msg.sender, lockedAmount, block.timestamp);\\n        emit TotalSupply(oldLockedSupply, lockedSupply);\\n    }\\n\\n    function _floorToWeek(uint256 _t) internal pure returns (uint256) {\\n        return (_t / WEEK) * WEEK;\\n    }\\n\\n    function balanceOf(address _sender) external view override returns (uint256) {\\n        uint256 t = block.timestamp;\\n        uint256 userEpoch = userPointEpoch[_sender];\\n\\n        if (userEpoch == 0) return 0;\\n\\n        Point storage point = userPointHistory[_sender][userEpoch];\\n\\n        int256 bias = point.slope * int256(t - point.timestamp);\\n\\n        if (bias > point.bias) return 0;\\n\\n        return uint256(point.bias - bias);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function supplyAt(Point memory _point, uint256 _t) internal view returns (uint256) {\\n        uint256 iterativeTime = _floorToWeek(_point.timestamp);\\n\\n        for (uint256 i; i < 255; i++) {\\n            int256 slope = 0;\\n\\n            iterativeTime += WEEK;\\n\\n            if (iterativeTime > _t) {\\n                iterativeTime = _t;\\n            } else {\\n                slope = slopeChanges[iterativeTime];\\n            }\\n            _point.bias -= _point.slope * int256(iterativeTime - _point.timestamp);\\n\\n            if (iterativeTime == _t) {\\n                break;\\n            }\\n            _point.slope += slope;\\n            _point.timestamp = iterativeTime;\\n        }\\n\\n        if (_point.bias < 0) {\\n            _point.bias = 0;\\n        }\\n\\n        return uint256(_point.bias);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        if (expired) {\\n            return supplyAt(pointHistory[epoch], block.timestamp);\\n        } else {\\n            return lockedSupply;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IBaseReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IBaseReward {\\n    function earned(address account) external view returns (uint256);\\n    function stake(address _for) external;\\n    function withdraw(address _for) external;\\n    function getReward(address _for) external;\\n    function notifyRewardAmount(uint256 reward) external;\\n    function addOwner(address _newOwner) external;\\n    function addOwners(address[] calldata _newOwners) external;\\n    function removeOwner(address _owner) external;\\n    function isOwner(address _owner) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LendFlareVotingEscrowV2.DepositTypes\",\"name\":\"depositTypes\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"TotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_senders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_expired\",\"type\":\"bool\"}],\"name\":\"_updateTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v\",\"type\":\"address\"}],\"name\":\"addRewardPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearRewardPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPools\",\"outputs\":[{\"internalType\":\"contract IBaseReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LendFlareVotingEscrowV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}