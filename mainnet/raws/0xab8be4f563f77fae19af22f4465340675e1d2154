{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"CalculationsSushiswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface PriceRouter {\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function WETH() external view returns (address);\\n}\\n\\ninterface Pair {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        );\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract CalculationsSushiswap is Ownable {\\n    address public defaultRouterAddress;\\n    address public wethAddress;\\n    address public usdcAddress;\\n    PriceRouter defaultRouter;\\n    mapping(address => address) public routerOverrides;\\n\\n    address ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address zeroAddress = 0x0000000000000000000000000000000000000000;\\n\\n    constructor(\\n        address _defaultRouterAddress,\\n        address _usdcAddress\\n    ) {\\n        defaultRouterAddress = _defaultRouterAddress;\\n        usdcAddress = _usdcAddress;\\n        defaultRouter = PriceRouter(defaultRouterAddress);\\n        wethAddress = defaultRouter.WETH();\\n    }\\n    \\n    function setRouterOverrideForToken(address tokenAddress, address routerAddress) public onlyOwner {\\n        routerOverrides[tokenAddress] = routerAddress;\\n    }\\n\\n    // Uniswap/Sushiswap\\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\\n        if (isLpToken(tokenAddress)) {\\n            return getLpTokenPriceUsdc(tokenAddress);\\n        }\\n        return getPriceFromRouterUsdc(tokenAddress);\\n    }\\n\\n    function getPriceFromRouter(address token0Address, address token1Address)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // Convert ETH address (0xEeee...) to WETH\\n        if (token0Address == ethAddress) {\\n            token0Address = wethAddress;\\n        }\\n        if (token1Address == ethAddress) {\\n            token1Address = wethAddress;\\n        }\\n\\n        address[] memory path;\\n        uint8 numberOfJumps;\\n        bool inputTokenIsWeth =\\n            token0Address == wethAddress || token1Address == wethAddress;\\n        if (inputTokenIsWeth) {\\n            // path = [token0, weth] or [weth, token1]\\n            numberOfJumps = 1;\\n            path = new address[](numberOfJumps + 1);\\n            path[0] = token0Address;\\n            path[1] = token1Address;\\n        } else {\\n            // path = [token0, weth, token1]\\n            numberOfJumps = 2;\\n            path = new address[](numberOfJumps + 1);\\n            path[0] = token0Address;\\n            path[1] = wethAddress;\\n            path[2] = token1Address;\\n        }\\n\\n        IERC20 token0 = IERC20(token0Address);\\n        uint256 amountIn = 10**uint256(token0.decimals());\\n        uint256[] memory amountsOut;\\n\\n        PriceRouter router = defaultRouter;\\n        address routerOverrideAddress = routerOverrides[token0Address];\\n        if (routerOverrideAddress != zeroAddress) {\\n            router = PriceRouter(routerOverrideAddress);\\n        }\\n        amountsOut = router.getAmountsOut(amountIn, path);\\n\\n        // Return raw price (without fees)\\n        uint256 amountOut = amountsOut[amountsOut.length - 1];\\n        uint256 feeBips = 30; // .3% per swap\\n        amountOut = (amountOut * 10000) / (10000 - (feeBips * numberOfJumps));\\n        return amountOut;\\n    }\\n\\n    function getPriceFromRouterUsdc(address tokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getPriceFromRouter(tokenAddress, usdcAddress);\\n    }\\n\\n    function isLpToken(address tokenAddress) public view returns (bool) {\\n        if (tokenAddress == ethAddress) {\\n            return false;\\n        }\\n        Pair lpToken = Pair(tokenAddress);\\n        try lpToken.factory() {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function getLpTokenTotalLiquidityUsdc(address tokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Pair pair = Pair(tokenAddress);\\n        address token0Address = pair.token0();\\n        address token1Address = pair.token1();\\n        IERC20 token0 = IERC20(token0Address);\\n        IERC20 token1 = IERC20(token1Address);\\n        uint8 token0Decimals = token0.decimals();\\n        uint8 token1Decimals = token1.decimals();\\n        uint256 token0Price = getPriceUsdc(token0Address);\\n        uint256 token1Price = getPriceUsdc(token1Address);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        uint256 totalLiquidity =\\n            ((reserve0 / 10**token0Decimals) * token0Price) +\\n                ((reserve1 / 10**token1Decimals) * token1Price);\\n        return totalLiquidity;\\n    }\\n\\n    function getLpTokenPriceUsdc(address tokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Pair pair = Pair(tokenAddress);\\n        uint256 totalLiquidity = getLpTokenTotalLiquidityUsdc(tokenAddress);\\n        uint256 totalSupply = pair.totalSupply();\\n        uint8 pairDecimals = pair.decimals();\\n        uint256 pricePerLpTokenUsdc =\\n            (totalLiquidity * 10**pairDecimals) / totalSupply;\\n        return pricePerLpTokenUsdc;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n/*******************************************************\\n *                     Ownable\\n *******************************************************/\\ncontract Ownable {\\n    address public ownerAddress;\\n\\n    constructor() {\\n        ownerAddress = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == ownerAddress, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function setOwnerAddress(address _ownerAddress) public onlyOwner {\\n        ownerAddress = _ownerAddress;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"defaultRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLpTokenPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLpTokenTotalLiquidityUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"}],\"name\":\"getPriceFromRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceFromRouterUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerOverrides\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterOverrideForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CalculationsSushiswap", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}