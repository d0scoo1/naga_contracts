{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/DeFiatTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"./lib/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/* Defiat 2021\\r\\n* \\r\\n* This is the contract locking the UNISWAP liquidity.\\r\\n* Notes 24th Feb 2021: This contract adds a functionality to prolong the lock period if required.\\r\\n* This will avoid having to wait for the maturity to reach to reload the UNIv2 tokens into a new lock-contract.\\r\\n*\\r\\n* Information:\\r\\n* UNISWAP liquidity token: 0xb4c36b752b706836ab90ed4e78b058150ae9ed59\\r\\n* Constructor has been initialized with 180 day of locking (see: timeLockDays in the code below)\\r\\n* You can interact with the contract on Etherscan to check the _release time (linux timestamp)\\r\\n* _releaseTime = 1640995199\\r\\n* You can use an epoch converter to verify the release date is :\\r\\n* Friday, December 31, 2021 11:59:59 PM (GMT)\\r\\n* \\r\\n* How does this contract work?\\r\\n* look at  the function release():\\r\\n* it's the only function that has the _token.transfer method, thus that can send tokens.\\r\\n* it requires the condiction require(block.timestamp >= _releaseTime)\\r\\n* this ensures that this function, hence the token transfer can only be activated \\r\\n* after the _releaseTime.\\r\\n* \\r\\n* As usual, any question feel free to reach out to us.\\r\\n*/\\r\\ncontract DeFiatTimelock {\\r\\n\\r\\n    // ERC20 basic token contract being held\\r\\n    IERC20 private _token;\\r\\n\\r\\n    // beneficiary of tokens after they are released\\r\\n    address private _beneficiary;\\r\\n\\r\\n    // timestamp when token release is enabled\\r\\n    uint256 private _releaseTime;\\r\\n\\r\\n    constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {\\r\\n        _token = token;\\r\\n        _beneficiary = beneficiary;\\r\\n        _releaseTime = releaseTime;\\r\\n        require(_releaseTime > block.timestamp + 600, \\\"ERROR: please add at least 10min of lock\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the token being held.\\r\\n     */\\r\\n    function token() public view returns (IERC20) {\\r\\n        return _token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the beneficiary of the tokens.\\r\\n     */\\r\\n    function beneficiary() public view returns (address) {\\r\\n        return _beneficiary;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the time when the tokens are released.\\r\\n     */\\r\\n    function releaseTime() public view returns (uint256) {\\r\\n        return _releaseTime;\\r\\n    }\\r\\n    \\r\\n    function canRelease() public view returns (bool) {\\r\\n        if(_releaseTime < block.timestamp){\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers tokens held by timelock to beneficiary.\\r\\n     */\\r\\n    function release() public virtual {\\r\\n        require(block.timestamp >= _releaseTime, \\\"TokenTimelock: current time is before release time\\\");\\r\\n\\r\\n        uint256 amount = _token.balanceOf(address(this));\\r\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\r\\n\\r\\n        _token.transfer(_beneficiary, amount);\\r\\n    }\\r\\n    \\r\\n    function extend(uint256 _newReleaseTime) public returns(bool){\\r\\n        require(msg.sender == _beneficiary, \\\"only the beneficiary can extend timelock\\\");\\r\\n\\t    require(_newReleaseTime > _releaseTime, \\\"can only extend timeLock\\\");\\r\\n        \\r\\n        _releaseTime = _newReleaseTime;\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/lib/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReleaseTime\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeFiatTimelock", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b4c36b752b706836ab90ed4e78b058150ae9ed590000000000000000000000000419eb10e9c1effb47cb6b5b1b2b2b3556395ae10000000000000000000000000000000000000000000000000000000061cf9980", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}