{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract EtherMemes {\r\n  //ETHEREUM SOLIDITY VERSION 4.19\r\n  //CRYPTOCOLLECTED LTD\r\n  \r\n  //INITIALIZATION VALUES\r\n  address ceoAddress = 0xc10A6AedE9564efcDC5E842772313f0669D79497;\r\n  struct Sergey {\r\n    address memeHolder;\r\n    uint256 currentValue;\r\n   \r\n  }\r\n  Sergey[32] data;\r\n  \r\n  //No-Arg Constructor initializes basic low-end values.\r\n  function EtherMemes() public {\r\n    for (uint i = 0; i < 32; i++) {\r\n     \r\n      data[i].currentValue = 15000000000000000;\r\n      data[i].memeHolder = msg.sender;\r\n    }\r\n  }\r\n\r\n  // Function to pay the previous owner.\r\n  //     Neccesary for contract integrity\r\n  function payPreviousOwner(address previousHeroOwner, uint256 currentValue) private {\r\n    previousHeroOwner.transfer(currentValue);\r\n  }\r\n  //Sister function to payPreviousOwner():\r\n  //   Addresses wallet-to-wallet payment totality\r\n  function transactionFee(address, uint256 currentValue) private {\r\n    ceoAddress.transfer(currentValue);\r\n  }\r\n  // Function that handles logic for setting prices and assigning collectibles to addresses.\r\n  // Doubles instance value  on purchase.\r\n  // Verify  correct amount of ethereum has been received\r\n  function purchaseCollectible(uint uniqueCollectibleID) public payable returns (uint, uint) {\r\n    require(uniqueCollectibleID >= 0 && uniqueCollectibleID <= 31);\r\n    // Set initial price to .02 (ETH)\r\n    if ( data[uniqueCollectibleID].currentValue == 15000000000000000 ) {\r\n      data[uniqueCollectibleID].currentValue = 30000000000000000;\r\n    } else {\r\n      // Double price\r\n      data[uniqueCollectibleID].currentValue = data[uniqueCollectibleID].currentValue * 2;\r\n    }\r\n    \r\n    require(msg.value >= data[uniqueCollectibleID].currentValue * uint256(1));\r\n    // Call payPreviousOwner() after purchase.\r\n    payPreviousOwner(data[uniqueCollectibleID].memeHolder,  (data[uniqueCollectibleID].currentValue / 10) * (8)); \r\n    transactionFee(ceoAddress, (data[uniqueCollectibleID].currentValue / 10) * (2));\r\n    // Assign owner.\r\n    data[uniqueCollectibleID].memeHolder = msg.sender;\r\n    // Return values for web3js display.\r\n    return (uniqueCollectibleID, data[uniqueCollectibleID].currentValue);\r\n\r\n  }\r\n  // Gets the current list of heroes, their owners, and prices. \r\n  function getMemeHolders() external view returns (address[], uint256[]) {\r\n    address[] memory memeHolders = new address[](32);\r\n    uint256[] memory currentValues =  new uint256[](32);\r\n    for (uint i=0; i<32; i++) {\r\n      memeHolders[i] = (data[i].memeHolder);\r\n      currentValues[i] = (data[i].currentValue);\r\n    }\r\n    return (memeHolders,currentValues);\r\n  }\r\n  \r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"uniqueCollectibleID\",\"type\":\"uint256\"}],\"name\":\"purchaseCollectible\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemeHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "EtherMemes", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0536920ea42a3e87268cccfa035afc81d4bc8fc546dad8ba859c282d073542a5"}]}