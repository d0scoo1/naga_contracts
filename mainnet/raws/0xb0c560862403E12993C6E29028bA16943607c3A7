{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract PauserRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    function initialize(address sender) public initializer {\\n        if (!isPauser(sender)) {\\n            _addPauser(sender);\\n        }\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * NOTE: This call _does not revert_ if the signature is invalid, or\\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\\n     * the zero address is returned.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: signature length is invalid\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: signature.s is in the wrong range\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: signature.v is in the wrong range\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../access/roles/PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Initializable, Context, PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    function initialize(address sender) public initializer {\\n        PauserRole.initialize(sender);\\n\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Initializable, Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is Initializable, IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../lifecycle/Pausable.sol\\\";\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 with pausable transfers and allowances.\\n *\\n * Useful if you want to stop trades until the end of a crowdsale, or have\\n * an emergency switch for freezing all token transfers in the event of a large\\n * bug.\\n */\\ncontract ERC20Pausable is Initializable, ERC20, Pausable {\\n    function initialize(address sender) public initializer {\\n        Pausable.initialize(sender);\\n    }\\n\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n *\\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\\n */\\ncontract OpenZeppelinUpgradesOwnable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/AdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\n\\n/**\\n * @title AdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\\n  /**\\n   * Contract constructor.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './UpgradeabilityProxy.sol';\\n\\n/**\\n * @title BaseAdminUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Emitted when the administration has been transferred.\\n   * @param previousAdmin Address of the previous admin.\\n   * @param newAdmin Address of the new admin.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n\\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Modifier to check whether the `msg.sender` is the admin.\\n   * If it is, it will run the function. Otherwise, it will delegate the call\\n   * to the implementation.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _admin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return The address of the proxy admin.\\n   */\\n  function admin() external ifAdmin returns (address) {\\n    return _admin();\\n  }\\n\\n  /**\\n   * @return The address of the implementation.\\n   */\\n  function implementation() external ifAdmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   * Only the current admin can call this function.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeAdmin(address newAdmin) external ifAdmin {\\n    require(newAdmin != address(0), \\\"Cannot change the admin of a proxy to the zero address\\\");\\n    emit AdminChanged(_admin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy.\\n   * Only the admin can call this function.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeTo(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * This is useful to initialize the proxied contract.\\n   * @param newImplementation Address of the new implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\\n    _upgradeTo(newImplementation);\\n    (bool success,) = newImplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @return The admin slot.\\n   */\\n  function _admin() internal view returns (address adm) {\\n    bytes32 slot = ADMIN_SLOT;\\n    assembly {\\n      adm := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets the address of the proxy admin.\\n   * @param newAdmin Address of the new proxy admin.\\n   */\\n  function _setAdmin(address newAdmin) internal {\\n    bytes32 slot = ADMIN_SLOT;\\n\\n    assembly {\\n      sstore(slot, newAdmin)\\n    }\\n  }\\n\\n  /**\\n   * @dev Only fall back when the sender is not the admin.\\n   */\\n  function _willFallback() internal {\\n    require(msg.sender != _admin(), \\\"Cannot call fallback function from the proxy admin\\\");\\n    super._willFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './Proxy.sol';\\nimport '../utils/Address.sol';\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   * @param implementation Address of the new implementation.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   * @return Address of the current implementation\\n   */\\n  function _implementation() internal view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /**\\n   * @dev Upgrades the proxy to a new implementation.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Sets the implementation address of the proxy.\\n   * @param newImplementation Address of the new implementation.\\n   */\\n  function _setImplementation(address newImplementation) internal {\\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseAdminUpgradeabilityProxy.sol';\\nimport './InitializableUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \\n * initializing the implementation, admin, and init data.\\n */\\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\\n  /**\\n   * Contract initializer.\\n   * @param _logic address of the initial implementation.\\n   * @param _admin Address of the proxy administrator.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, address _admin, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\\n    _setAdmin(_admin);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract initializer.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }  \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/Proxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\ncontract Proxy {\\n  /**\\n   * @dev Fallback function.\\n   * Implemented entirely in `_fallback`.\\n   */\\n  function () payable external {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @return The Address of the implementation.\\n   */\\n  function _implementation() internal view returns (address);\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   * @param implementation Address to delegate.\\n   */\\n  function _delegate(address implementation) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize)\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize)\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 { revert(0, returndatasize) }\\n      default { return(0, returndatasize) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Function that is run as the first thing in the fallback function.\\n   * Can be redefined in derived contracts to add functionality.\\n   * Redefinitions must call super._willFallback().\\n   */\\n  function _willFallback() internal {\\n  }\\n\\n  /**\\n   * @dev fallback implementation.\\n   * Extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willFallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/ProxyAdmin.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../ownership/Ownable.sol\\\";\\nimport \\\"./AdminUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title ProxyAdmin\\n * @dev This contract is the admin of a proxy, and is in charge\\n * of upgrading it as well as transferring it to another admin.\\n */\\ncontract ProxyAdmin is OpenZeppelinUpgradesOwnable {\\n  \\n  /**\\n   * @dev Returns the current implementation of a proxy.\\n   * This is needed because only the proxy admin can query it.\\n   * @return The address of the current implementation of the proxy.\\n   */\\n  function getProxyImplementation(AdminUpgradeabilityProxy proxy) public view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the admin of a proxy. Only the admin can query it.\\n   * @return The address of the current admin of the proxy.\\n   */\\n  function getProxyAdmin(AdminUpgradeabilityProxy proxy) public view returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of a proxy.\\n   * @param proxy Proxy to change admin.\\n   * @param newAdmin Address to transfer proxy administration to.\\n   */\\n  function changeProxyAdmin(AdminUpgradeabilityProxy proxy, address newAdmin) public onlyOwner {\\n    proxy.changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrades a proxy to the newest implementation of a contract.\\n   * @param proxy Proxy to be upgraded.\\n   * @param implementation the address of the Implementation.\\n   */\\n  function upgrade(AdminUpgradeabilityProxy proxy, address implementation) public onlyOwner {\\n    proxy.upgradeTo(implementation);\\n  }\\n\\n  /**\\n   * @dev Upgrades a proxy to the newest implementation of a contract and forwards a function call to it.\\n   * This is useful to initialize the proxied contract.\\n   * @param proxy Proxy to be upgraded.\\n   * @param implementation Address of the Implementation.\\n   * @param data Data to send as msg.data in the low level call.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradeAndCall(AdminUpgradeabilityProxy proxy, address implementation, bytes memory data) payable public onlyOwner {\\n    proxy.upgradeToAndCall.value(msg.value)(implementation, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/upgradeability/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport './BaseUpgradeabilityProxy.sol';\\n\\n/**\\n * @title UpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\\n * implementation and init data.\\n */\\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\\n  /**\\n   * @dev Contract constructor.\\n   * @param _logic Address of the initial implementation.\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n   * It should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  constructor(address _logic, bytes memory _data) public payable {\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setImplementation(_logic);\\n    if(_data.length > 0) {\\n      (bool success,) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }  \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * Utility library of inline functions on addresses\\n *\\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\\n */\\nlibrary OpenZeppelinUpgradesAddress {\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/DarknodeRegistry/DarknodeRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../RenToken/RenToken.sol\\\";\\nimport \\\"./DarknodeRegistryStore.sol\\\";\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\nimport \\\"./DarknodeRegistryV1.sol\\\";\\n\\ncontract DarknodeRegistryStateV2 {}\\n\\n/// @notice DarknodeRegistry is responsible for the registration and\\n/// deregistration of Darknodes.\\ncontract DarknodeRegistryLogicV2 is\\n    Claimable,\\n    CanReclaimTokens,\\n    DarknodeRegistryStateV1,\\n    DarknodeRegistryStateV2\\n{\\n    using SafeMath for uint256;\\n\\n    /// @notice Emitted when a darknode is registered.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was registered.\\n    /// @param _bond The amount of REN that was transferred as bond.\\n    event LogDarknodeRegistered(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        uint256 _bond\\n    );\\n\\n    /// @notice Emitted when a darknode is deregistered.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was deregistered.\\n    event LogDarknodeDeregistered(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID\\n    );\\n\\n    /// @notice Emitted when a refund has been made.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was refunded.\\n    /// @param _amount The amount of REN that was refunded.\\n    event LogDarknodeRefunded(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Emitted when a recovery has been made.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was recovered.\\n    /// @param _bondRecipient The address that received the bond.\\n    /// @param _submitter The address that called the recover method.\\n    event LogDarknodeRecovered(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        address _bondRecipient,\\n        address indexed _submitter\\n    );\\n\\n    /// @notice Emitted when a darknode's bond is slashed.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was slashed.\\n    /// @param _challenger The address of the account that submitted the challenge.\\n    /// @param _percentage The total percentage  of bond slashed.\\n    event LogDarknodeSlashed(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        address indexed _challenger,\\n        uint256 _percentage\\n    );\\n\\n    /// @notice Emitted when a new epoch has begun.\\n    event LogNewEpoch(uint256 indexed epochhash);\\n\\n    /// @notice Emitted when a constructor parameter has been updated.\\n    event LogMinimumBondUpdated(\\n        uint256 _previousMinimumBond,\\n        uint256 _nextMinimumBond\\n    );\\n    event LogMinimumPodSizeUpdated(\\n        uint256 _previousMinimumPodSize,\\n        uint256 _nextMinimumPodSize\\n    );\\n    event LogMinimumEpochIntervalUpdated(\\n        uint256 _previousMinimumEpochInterval,\\n        uint256 _nextMinimumEpochInterval\\n    );\\n    event LogSlasherUpdated(\\n        address indexed _previousSlasher,\\n        address indexed _nextSlasher\\n    );\\n    event LogDarknodePaymentUpdated(\\n        address indexed _previousDarknodePayment,\\n        address indexed _nextDarknodePayment\\n    );\\n\\n    /// @notice Restrict a function to the owner that registered the darknode.\\n    modifier onlyDarknodeOperator(address _darknodeID) {\\n        require(\\n            store.darknodeOperator(_darknodeID) == msg.sender,\\n            \\\"DarknodeRegistry: must be darknode owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to unregistered darknodes.\\n    modifier onlyRefunded(address _darknodeID) {\\n        require(\\n            isRefunded(_darknodeID),\\n            \\\"DarknodeRegistry: must be refunded or never registered\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to refundable darknodes.\\n    modifier onlyRefundable(address _darknodeID) {\\n        require(\\n            isRefundable(_darknodeID),\\n            \\\"DarknodeRegistry: must be deregistered for at least one epoch\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to registered nodes without a pending\\n    /// deregistration.\\n    modifier onlyDeregisterable(address _darknodeID) {\\n        require(\\n            isDeregisterable(_darknodeID),\\n            \\\"DarknodeRegistry: must be deregisterable\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to the Slasher contract.\\n    modifier onlySlasher() {\\n        require(\\n            address(slasher) == msg.sender,\\n            \\\"DarknodeRegistry: must be slasher\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to registered and deregistered nodes.\\n    modifier onlyDarknode(address _darknodeID) {\\n        require(\\n            isRegistered(_darknodeID) || isDeregistered(_darknodeID),\\n            \\\"DarknodeRegistry: invalid darknode\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice The contract constructor.\\n    ///\\n    /// @param _VERSION A string defining the contract version.\\n    /// @param _renAddress The address of the RenToken contract.\\n    /// @param _storeAddress The address of the DarknodeRegistryStore contract.\\n    /// @param _minimumBond The minimum bond amount that can be submitted by a\\n    ///        Darknode.\\n    /// @param _minimumPodSize The minimum size of a Darknode pod.\\n    /// @param _minimumEpochIntervalSeconds The minimum number of seconds between epochs.\\n    function initialize(\\n        string memory _VERSION,\\n        RenToken _renAddress,\\n        DarknodeRegistryStore _storeAddress,\\n        uint256 _minimumBond,\\n        uint256 _minimumPodSize,\\n        uint256 _minimumEpochIntervalSeconds,\\n        uint256 _deregistrationIntervalSeconds\\n    ) public initializer {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n        VERSION = _VERSION;\\n\\n        store = _storeAddress;\\n        ren = _renAddress;\\n\\n        minimumBond = _minimumBond;\\n        nextMinimumBond = minimumBond;\\n\\n        minimumPodSize = _minimumPodSize;\\n        nextMinimumPodSize = minimumPodSize;\\n\\n        minimumEpochInterval = _minimumEpochIntervalSeconds;\\n        nextMinimumEpochInterval = minimumEpochInterval;\\n        deregistrationInterval = _deregistrationIntervalSeconds;\\n\\n        uint256 epochhash = uint256(blockhash(block.number - 1));\\n        currentEpoch = Epoch({\\n            epochhash: epochhash,\\n            blocktime: block.timestamp\\n        });\\n        emit LogNewEpoch(epochhash);\\n    }\\n\\n    /// @notice Register a darknode and transfer the bond to this contract.\\n    /// Before registering, the bond transfer must be approved in the REN\\n    /// contract. The caller must provide a public encryption key for the\\n    /// darknode. The darknode will remain pending registration until the next\\n    /// epoch. Only after this period can the darknode be deregistered. The\\n    /// caller of this method will be stored as the owner of the darknode.\\n    ///\\n    /// @param _darknodeID The darknode ID that will be registered.\\n    function registerNode(address _darknodeID)\\n        public\\n        onlyRefunded(_darknodeID)\\n    {\\n        require(\\n            _darknodeID != address(0),\\n            \\\"DarknodeRegistry: darknode address cannot be zero\\\"\\n        );\\n\\n        // Use the current minimum bond as the darknode's bond and transfer bond to store\\n        require(\\n            ren.transferFrom(msg.sender, address(store), minimumBond),\\n            \\\"DarknodeRegistry: bond transfer failed\\\"\\n        );\\n\\n        // Flag this darknode for registration\\n        store.appendDarknode(\\n            _darknodeID,\\n            msg.sender,\\n            minimumBond,\\n            \\\"\\\",\\n            currentEpoch.blocktime.add(minimumEpochInterval),\\n            0\\n        );\\n\\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\\n\\n        // Emit an event.\\n        emit LogDarknodeRegistered(msg.sender, _darknodeID, minimumBond);\\n    }\\n\\n    /// @notice An alias for `registerNode` that includes the legacy public key\\n    /// parameter.\\n    /// @param _darknodeID The darknode ID that will be registered.\\n    /// @param _publicKey Deprecated parameter - see `registerNode`.\\n    function register(address _darknodeID, bytes calldata _publicKey) external {\\n        return registerNode(_darknodeID);\\n    }\\n\\n    /// @notice Register multiple darknodes and transfer the bonds to this contract.\\n    /// Before registering, the bonds transfer must be approved in the REN contract.\\n    /// The darknodes will remain pending registration until the next epoch. Only\\n    /// after this period can the darknodes be deregistered. The caller of this method\\n    /// will be stored as the owner of each darknode. If one registration fails, all\\n    /// registrations fail.\\n    /// @param _darknodeIDs The darknode IDs that will be registered.\\n    function registerMultiple(address[] calldata _darknodeIDs) external {\\n        // Save variables in memory to prevent redundant reads from storage\\n        DarknodeRegistryStore _store = store;\\n        Epoch memory _currentEpoch = currentEpoch;\\n        uint256 nextRegisteredAt = _currentEpoch.blocktime.add(\\n            minimumEpochInterval\\n        );\\n        uint256 _minimumBond = minimumBond;\\n\\n        require(\\n            ren.transferFrom(\\n                msg.sender,\\n                address(_store),\\n                _minimumBond.mul(_darknodeIDs.length)\\n            ),\\n            \\\"DarknodeRegistry: bond transfers failed\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _darknodeIDs.length; i++) {\\n            address darknodeID = _darknodeIDs[i];\\n\\n            uint256 registeredAt = _store.darknodeRegisteredAt(darknodeID);\\n            uint256 deregisteredAt = _store.darknodeDeregisteredAt(darknodeID);\\n\\n            require(\\n                _isRefunded(registeredAt, deregisteredAt),\\n                \\\"DarknodeRegistry: must be refunded or never registered\\\"\\n            );\\n\\n            require(\\n                darknodeID != address(0),\\n                \\\"DarknodeRegistry: darknode address cannot be zero\\\"\\n            );\\n\\n            _store.appendDarknode(\\n                darknodeID,\\n                msg.sender,\\n                _minimumBond,\\n                \\\"\\\",\\n                nextRegisteredAt,\\n                0\\n            );\\n\\n            emit LogDarknodeRegistered(msg.sender, darknodeID, _minimumBond);\\n        }\\n\\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(_darknodeIDs.length);\\n    }\\n\\n    /// @notice Deregister a darknode. The darknode will not be deregistered\\n    /// until the end of the epoch. After another epoch, the bond can be\\n    /// refunded by calling the refund method.\\n    /// @param _darknodeID The darknode ID that will be deregistered. The caller\\n    ///        of this method must be the owner of this darknode.\\n    function deregister(address _darknodeID)\\n        external\\n        onlyDeregisterable(_darknodeID)\\n        onlyDarknodeOperator(_darknodeID)\\n    {\\n        deregisterDarknode(_darknodeID);\\n    }\\n\\n    /// @notice Deregister multiple darknodes. The darknodes will not be\\n    /// deregistered until the end of the epoch. After another epoch, their\\n    /// bonds can be refunded by calling the refund or refundMultiple methods.\\n    /// If one deregistration fails, all deregistrations fail.\\n    /// @param _darknodeIDs The darknode IDs that will be deregistered. The\\n    /// caller of this method must be the owner of each darknode.\\n    function deregisterMultiple(address[] calldata _darknodeIDs) external {\\n        // Save variables in memory to prevent redundant reads from storage\\n        DarknodeRegistryStore _store = store;\\n        Epoch memory _currentEpoch = currentEpoch;\\n        uint256 _minimumEpochInterval = minimumEpochInterval;\\n\\n        for (uint256 i = 0; i < _darknodeIDs.length; i++) {\\n            address darknodeID = _darknodeIDs[i];\\n\\n            uint256 deregisteredAt = _store.darknodeDeregisteredAt(darknodeID);\\n            bool registered = isRegisteredInEpoch(\\n                _store.darknodeRegisteredAt(darknodeID),\\n                deregisteredAt,\\n                _currentEpoch\\n            );\\n\\n            require(\\n                _isDeregisterable(registered, deregisteredAt),\\n                \\\"DarknodeRegistry: must be deregisterable\\\"\\n            );\\n\\n            require(\\n                _store.darknodeOperator(darknodeID) == msg.sender,\\n                \\\"DarknodeRegistry: must be darknode owner\\\"\\n            );\\n\\n            _store.updateDarknodeDeregisteredAt(\\n                darknodeID,\\n                _currentEpoch.blocktime.add(_minimumEpochInterval)\\n            );\\n\\n            emit LogDarknodeDeregistered(msg.sender, darknodeID);\\n        }\\n\\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(_darknodeIDs.length);\\n    }\\n\\n    /// @notice Progress the epoch if it is possible to do so. This captures\\n    /// the current timestamp and current blockhash and overrides the current\\n    /// epoch.\\n    function epoch() external {\\n        if (previousEpoch.blocktime == 0) {\\n            // The first epoch must be called by the owner of the contract\\n            require(\\n                msg.sender == owner(),\\n                \\\"DarknodeRegistry: not authorized to call first epoch\\\"\\n            );\\n        }\\n\\n        // Require that the epoch interval has passed\\n        require(\\n            block.timestamp >= currentEpoch.blocktime.add(minimumEpochInterval),\\n            \\\"DarknodeRegistry: epoch interval has not passed\\\"\\n        );\\n        uint256 epochhash = uint256(blockhash(block.number - 1));\\n\\n        // Update the epoch hash and timestamp\\n        previousEpoch = currentEpoch;\\n        currentEpoch = Epoch({\\n            epochhash: epochhash,\\n            blocktime: block.timestamp\\n        });\\n\\n        // Update the registry information\\n        numDarknodesPreviousEpoch = numDarknodes;\\n        numDarknodes = numDarknodesNextEpoch;\\n\\n        // If any update functions have been called, update the values now\\n        if (nextMinimumBond != minimumBond) {\\n            minimumBond = nextMinimumBond;\\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\\n        }\\n        if (nextMinimumPodSize != minimumPodSize) {\\n            minimumPodSize = nextMinimumPodSize;\\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\\n        }\\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\\n            minimumEpochInterval = nextMinimumEpochInterval;\\n            emit LogMinimumEpochIntervalUpdated(\\n                minimumEpochInterval,\\n                nextMinimumEpochInterval\\n            );\\n        }\\n        if (nextSlasher != slasher) {\\n            slasher = nextSlasher;\\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\\n        }\\n\\n        // Emit an event\\n        emit LogNewEpoch(epochhash);\\n    }\\n\\n    /// @notice Allows the contract owner to initiate an ownership transfer of\\n    /// the DarknodeRegistryStore.\\n    /// @param _newOwner The address to transfer the ownership to.\\n    function transferStoreOwnership(DarknodeRegistryLogicV2 _newOwner)\\n        external\\n        onlyOwner\\n    {\\n        store.transferOwnership(address(_newOwner));\\n        _newOwner.claimStoreOwnership();\\n    }\\n\\n    /// @notice Claims ownership of the store passed in to the constructor.\\n    /// `transferStoreOwnership` must have previously been called when\\n    /// transferring from another Darknode Registry.\\n    function claimStoreOwnership() external {\\n        store.claimOwnership();\\n\\n        // Sync state with new store.\\n        // Note: numDarknodesPreviousEpoch is set to 0 for a newly deployed DNR.\\n        (\\n            numDarknodesPreviousEpoch,\\n            numDarknodes,\\n            numDarknodesNextEpoch\\n        ) = getDarknodeCountFromEpochs();\\n    }\\n\\n    /// @notice Allows the contract owner to update the minimum bond.\\n    /// @param _nextMinimumBond The minimum bond amount that can be submitted by\\n    ///        a darknode.\\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\\n        // Will be updated next epoch\\n        nextMinimumBond = _nextMinimumBond;\\n    }\\n\\n    /// @notice Allows the contract owner to update the minimum pod size.\\n    /// @param _nextMinimumPodSize The minimum size of a pod.\\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize)\\n        external\\n        onlyOwner\\n    {\\n        // Will be updated next epoch\\n        nextMinimumPodSize = _nextMinimumPodSize;\\n    }\\n\\n    /// @notice Allows the contract owner to update the minimum epoch interval.\\n    /// @param _nextMinimumEpochInterval The minimum number of blocks between epochs.\\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval)\\n        external\\n        onlyOwner\\n    {\\n        // Will be updated next epoch\\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\\n    }\\n\\n    /// @notice Allow the contract owner to update the DarknodeSlasher contract\\n    /// address.\\n    /// @param _slasher The new slasher address.\\n    function updateSlasher(IDarknodeSlasher _slasher) external onlyOwner {\\n        nextSlasher = _slasher;\\n    }\\n\\n    /// @notice Allow the DarknodeSlasher contract to slash a portion of darknode's\\n    ///         bond and deregister it.\\n    /// @param _guilty The guilty prover whose bond is being slashed.\\n    /// @param _challenger The challenger who should receive a portion of the bond as reward.\\n    /// @param _percentage The total percentage  of bond to be slashed.\\n    function slash(\\n        address _guilty,\\n        address _challenger,\\n        uint256 _percentage\\n    ) external onlySlasher onlyDarknode(_guilty) {\\n        require(_percentage <= 100, \\\"DarknodeRegistry: invalid percent\\\");\\n\\n        // If the darknode has not been deregistered then deregister it\\n        if (isDeregisterable(_guilty)) {\\n            deregisterDarknode(_guilty);\\n        }\\n\\n        uint256 totalBond = store.darknodeBond(_guilty);\\n        uint256 penalty = totalBond.div(100).mul(_percentage);\\n        uint256 challengerReward = penalty.div(2);\\n        uint256 slasherPortion = penalty.sub(challengerReward);\\n        if (challengerReward > 0) {\\n            // Slash the bond of the failed prover\\n            store.updateDarknodeBond(_guilty, totalBond.sub(penalty));\\n\\n            // Forward the remaining amount to be handled by the slasher.\\n            require(\\n                ren.transfer(msg.sender, slasherPortion),\\n                \\\"DarknodeRegistry: reward transfer to slasher failed\\\"\\n            );\\n            require(\\n                ren.transfer(_challenger, challengerReward),\\n                \\\"DarknodeRegistry: reward transfer to challenger failed\\\"\\n            );\\n        }\\n\\n        emit LogDarknodeSlashed(\\n            store.darknodeOperator(_guilty),\\n            _guilty,\\n            _challenger,\\n            _percentage\\n        );\\n    }\\n\\n    /// @notice Refund the bond of a deregistered darknode. This will make the\\n    /// darknode available for registration again.\\n    ///\\n    /// @param _darknodeID The darknode ID that will be refunded.\\n    function refund(address _darknodeID)\\n        external\\n        onlyRefundable(_darknodeID)\\n        onlyDarknodeOperator(_darknodeID)\\n    {\\n        // Remember the bond amount\\n        uint256 amount = store.darknodeBond(_darknodeID);\\n\\n        // Erase the darknode from the registry\\n        store.removeDarknode(_darknodeID);\\n\\n        // Refund the operator by transferring REN\\n        require(\\n            ren.transfer(msg.sender, amount),\\n            \\\"DarknodeRegistry: bond transfer failed\\\"\\n        );\\n\\n        // Emit an event.\\n        emit LogDarknodeRefunded(msg.sender, _darknodeID, amount);\\n    }\\n\\n    /// @notice A permissioned method for refunding a darknode without the usual\\n    /// delay. The operator must provide a signature of the darknode ID and the\\n    /// bond recipient, but the call must come from the contract's owner. The\\n    /// main use case is for when an operator's keys have been compromised,\\n    /// allowing for the bonds to be recovered by the operator through the\\n    /// GatewayRegistry's governance. It is expected that this process would\\n    /// happen towards the end of the darknode's deregistered period, so that\\n    /// a malicious operator can't use this to quickly exit their stake after\\n    /// attempting an attack on the network. It's also expected that the\\n    /// operator will not re-register the same darknode again.\\n    function recover(\\n        address _darknodeID,\\n        address _bondRecipient,\\n        bytes calldata _signature\\n    ) external onlyOwner {\\n        require(\\n            isRefundable(_darknodeID) || isDeregistered(_darknodeID),\\n            \\\"DarknodeRegistry: must be deregistered\\\"\\n        );\\n\\n        address darknodeOperator = store.darknodeOperator(_darknodeID);\\n\\n        require(\\n            ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19Ethereum Signed Message:\\\\n64\\\",\\n                        \\\"DarknodeRegistry.recover\\\",\\n                        _darknodeID,\\n                        _bondRecipient\\n                    )\\n                ),\\n                _signature\\n            ) == darknodeOperator,\\n            \\\"DarknodeRegistry: invalid signature\\\"\\n        );\\n\\n        // Remember the bond amount\\n        uint256 amount = store.darknodeBond(_darknodeID);\\n\\n        // Erase the darknode from the registry\\n        store.removeDarknode(_darknodeID);\\n\\n        // Refund the operator by transferring REN\\n        require(\\n            ren.transfer(_bondRecipient, amount),\\n            \\\"DarknodeRegistry: bond transfer failed\\\"\\n        );\\n\\n        // Emit an event.\\n        emit LogDarknodeRefunded(darknodeOperator, _darknodeID, amount);\\n        emit LogDarknodeRecovered(\\n            darknodeOperator,\\n            _darknodeID,\\n            _bondRecipient,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @notice Refund the bonds of multiple deregistered darknodes. This will\\n    /// make the darknodes available for registration again. If one refund fails,\\n    /// all refunds fail.\\n    /// @param _darknodeIDs The darknode IDs that will be refunded.\\n    function refundMultiple(address[] calldata _darknodeIDs) external {\\n        // Save variables in memory to prevent redundant reads from storage\\n        DarknodeRegistryStore _store = store;\\n        Epoch memory _currentEpoch = currentEpoch;\\n        Epoch memory _previousEpoch = previousEpoch;\\n        uint256 _deregistrationInterval = deregistrationInterval;\\n\\n        // The sum of bonds to refund\\n        uint256 sum;\\n\\n        for (uint256 i = 0; i < _darknodeIDs.length; i++) {\\n            address darknodeID = _darknodeIDs[i];\\n\\n            uint256 deregisteredAt = _store.darknodeDeregisteredAt(darknodeID);\\n            bool deregistered = _isDeregistered(deregisteredAt, _currentEpoch);\\n\\n            require(\\n                _isRefundable(\\n                    deregistered,\\n                    deregisteredAt,\\n                    _previousEpoch,\\n                    _deregistrationInterval\\n                ),\\n                \\\"DarknodeRegistry: must be deregistered for at least one epoch\\\"\\n            );\\n\\n            require(\\n                _store.darknodeOperator(darknodeID) == msg.sender,\\n                \\\"DarknodeRegistry: must be darknode owner\\\"\\n            );\\n\\n            // Remember the bond amount\\n            uint256 amount = _store.darknodeBond(darknodeID);\\n\\n            // Erase the darknode from the registry\\n            _store.removeDarknode(darknodeID);\\n\\n            // Emit an event\\n            emit LogDarknodeRefunded(msg.sender, darknodeID, amount);\\n\\n            // Increment the sum of bonds to be transferred\\n            sum = sum.add(amount);\\n        }\\n\\n        // Transfer all bonds together\\n        require(\\n            ren.transfer(msg.sender, sum),\\n            \\\"DarknodeRegistry: bond transfers failed\\\"\\n        );\\n    }\\n\\n    /// @notice Retrieves the address of the account that registered a darknode.\\n    /// @param _darknodeID The ID of the darknode to retrieve the owner for.\\n    function getDarknodeOperator(address _darknodeID)\\n        external\\n        view\\n        returns (address payable)\\n    {\\n        return store.darknodeOperator(_darknodeID);\\n    }\\n\\n    /// @notice Retrieves the bond amount of a darknode in 10^-18 REN.\\n    /// @param _darknodeID The ID of the darknode to retrieve the bond for.\\n    function getDarknodeBond(address _darknodeID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return store.darknodeBond(_darknodeID);\\n    }\\n\\n    /// @notice Retrieves the encryption public key of the darknode.\\n    /// @param _darknodeID The ID of the darknode to retrieve the public key for.\\n    function getDarknodePublicKey(address _darknodeID)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return store.darknodePublicKey(_darknodeID);\\n    }\\n\\n    /// @notice Retrieves a list of darknodes which are registered for the\\n    /// current epoch.\\n    /// @param _start A darknode ID used as an offset for the list. If _start is\\n    ///        0x0, the first dark node will be used. _start won't be\\n    ///        included it is not registered for the epoch.\\n    /// @param _count The number of darknodes to retrieve starting from _start.\\n    ///        If _count is 0, all of the darknodes from _start are\\n    ///        retrieved. If _count is more than the remaining number of\\n    ///        registered darknodes, the rest of the list will contain\\n    ///        0x0s.\\n    function getDarknodes(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 count = _count;\\n        if (count == 0) {\\n            count = numDarknodes;\\n        }\\n        return getDarknodesFromEpochs(_start, count, false);\\n    }\\n\\n    /// @notice Retrieves a list of darknodes which were registered for the\\n    /// previous epoch. See `getDarknodes` for the parameter documentation.\\n    function getPreviousDarknodes(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 count = _count;\\n        if (count == 0) {\\n            count = numDarknodesPreviousEpoch;\\n        }\\n        return getDarknodesFromEpochs(_start, count, true);\\n    }\\n\\n    /// @notice Returns whether a darknode is scheduled to become registered\\n    /// at next epoch.\\n    /// @param _darknodeID The ID of the darknode to return.\\n    function isPendingRegistration(address _darknodeID)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\\n        return registeredAt != 0 && registeredAt > currentEpoch.blocktime;\\n    }\\n\\n    /// @notice Returns if a darknode is in the pending deregistered state. In\\n    /// this state a darknode is still considered registered.\\n    function isPendingDeregistration(address _darknodeID)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocktime;\\n    }\\n\\n    /// @notice Returns if a darknode is in the deregistered state.\\n    function isDeregistered(address _darknodeID) public view returns (bool) {\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        return _isDeregistered(deregisteredAt, currentEpoch);\\n    }\\n\\n    /// @notice Returns if a darknode can be deregistered. This is true if the\\n    /// darknodes is in the registered state and has not attempted to\\n    /// deregister yet.\\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\\n        DarknodeRegistryStore _store = store;\\n        uint256 deregisteredAt = _store.darknodeDeregisteredAt(_darknodeID);\\n        bool registered = isRegisteredInEpoch(\\n            _store.darknodeRegisteredAt(_darknodeID),\\n            deregisteredAt,\\n            currentEpoch\\n        );\\n        return _isDeregisterable(registered, deregisteredAt);\\n    }\\n\\n    /// @notice Returns if a darknode is in the refunded state. This is true\\n    /// for darknodes that have never been registered, or darknodes that have\\n    /// been deregistered and refunded.\\n    function isRefunded(address _darknodeID) public view returns (bool) {\\n        DarknodeRegistryStore _store = store;\\n        uint256 registeredAt = _store.darknodeRegisteredAt(_darknodeID);\\n        uint256 deregisteredAt = _store.darknodeDeregisteredAt(_darknodeID);\\n        return _isRefunded(registeredAt, deregisteredAt);\\n    }\\n\\n    /// @notice Returns if a darknode is refundable. This is true for darknodes\\n    /// that have been in the deregistered state for one full epoch.\\n    function isRefundable(address _darknodeID) public view returns (bool) {\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        bool deregistered = _isDeregistered(deregisteredAt, currentEpoch);\\n\\n        return\\n            _isRefundable(\\n                deregistered,\\n                deregisteredAt,\\n                previousEpoch,\\n                deregistrationInterval\\n            );\\n    }\\n\\n    /// @notice Returns the registration time of a given darknode.\\n    function darknodeRegisteredAt(address darknodeID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return store.darknodeRegisteredAt(darknodeID);\\n    }\\n\\n    /// @notice Returns the deregistration time of a given darknode.\\n    function darknodeDeregisteredAt(address darknodeID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return store.darknodeDeregisteredAt(darknodeID);\\n    }\\n\\n    /// @notice Returns if a darknode is in the registered state.\\n    function isRegistered(address _darknodeID) public view returns (bool) {\\n        DarknodeRegistryStore _store = store;\\n        uint256 registeredAt = _store.darknodeRegisteredAt(_darknodeID);\\n        uint256 deregisteredAt = _store.darknodeDeregisteredAt(_darknodeID);\\n        return isRegisteredInEpoch(registeredAt, deregisteredAt, currentEpoch);\\n    }\\n\\n    /// @notice Returns if a darknode was in the registered state last epoch.\\n    function isRegisteredInPreviousEpoch(address _darknodeID)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        DarknodeRegistryStore _store = store;\\n        uint256 registeredAt = _store.darknodeRegisteredAt(_darknodeID);\\n        uint256 deregisteredAt = _store.darknodeDeregisteredAt(_darknodeID);\\n        return isRegisteredInEpoch(registeredAt, deregisteredAt, previousEpoch);\\n    }\\n\\n    /// @notice Returns the darknodes registered by the provided operator.\\n    /// @dev THIS IS AN EXPENSIVE CALL - this should only called when using\\n    /// eth_call contract reads - not in transactions.\\n    function getOperatorDarknodes(address _operator)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory nodesPadded = new address[](numDarknodes);\\n\\n        address[] memory allNodes = getDarknodesFromEpochs(\\n            address(0),\\n            numDarknodes,\\n            false\\n        );\\n\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < allNodes.length; i++) {\\n            if (store.darknodeOperator(allNodes[i]) == _operator) {\\n                nodesPadded[j] = (allNodes[i]);\\n                j++;\\n            }\\n        }\\n\\n        address[] memory nodes = new address[](j);\\n        for (uint256 i = 0; i < j; i++) {\\n            nodes[i] = nodesPadded[i];\\n        }\\n\\n        return nodes;\\n    }\\n\\n    /// @notice Returns if a darknode was in the registered state for a given\\n    /// epoch.\\n    /// @param _epoch One of currentEpoch, previousEpoch.\\n    function isRegisteredInEpoch(\\n        uint256 _registeredAt,\\n        uint256 _deregisteredAt,\\n        Epoch memory _epoch\\n    ) private pure returns (bool) {\\n        bool registered = _registeredAt != 0 &&\\n            _registeredAt <= _epoch.blocktime;\\n        bool notDeregistered = _deregisteredAt == 0 ||\\n            _deregisteredAt > _epoch.blocktime;\\n        // The Darknode has been registered and has not yet been deregistered,\\n        // although it might be pending deregistration\\n        return registered && notDeregistered;\\n    }\\n\\n    /// Private function called by `isDeregistered`, `isRefundable`, and `refundMultiple`.\\n    function _isDeregistered(\\n        uint256 _deregisteredAt,\\n        Epoch memory _currentEpoch\\n    ) private pure returns (bool) {\\n        return\\n            _deregisteredAt != 0 && _deregisteredAt <= _currentEpoch.blocktime;\\n    }\\n\\n    /// Private function called by `isDeregisterable` and `deregisterMultiple`.\\n    function _isDeregisterable(bool _registered, uint256 _deregisteredAt)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        // The Darknode is currently in the registered state and has not been\\n        // transitioned to the pending deregistration, or deregistered, state\\n        return _registered && _deregisteredAt == 0;\\n    }\\n\\n    /// Private function called by `isRefunded` and `registerMultiple`.\\n    function _isRefunded(uint256 registeredAt, uint256 deregisteredAt)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return registeredAt == 0 && deregisteredAt == 0;\\n    }\\n\\n    /// Private function called by `isRefundable` and `refundMultiple`.\\n    function _isRefundable(\\n        bool _deregistered,\\n        uint256 _deregisteredAt,\\n        Epoch memory _previousEpoch,\\n        uint256 _deregistrationInterval\\n    ) private pure returns (bool) {\\n        return\\n            _deregistered &&\\n            _deregisteredAt <=\\n            (_previousEpoch.blocktime - _deregistrationInterval);\\n    }\\n\\n    /// @notice Returns a list of darknodes registered for either the current\\n    /// or the previous epoch. See `getDarknodes` for documentation on the\\n    /// parameters `_start` and `_count`.\\n    /// @param _usePreviousEpoch If true, use the previous epoch, otherwise use\\n    ///        the current epoch.\\n    function getDarknodesFromEpochs(\\n        address _start,\\n        uint256 _count,\\n        bool _usePreviousEpoch\\n    ) private view returns (address[] memory) {\\n        uint256 count = _count;\\n        if (count == 0) {\\n            count = numDarknodes;\\n        }\\n\\n        address[] memory nodes = new address[](count);\\n\\n        // Begin with the first node in the list\\n        uint256 n = 0;\\n        address next = _start;\\n        if (next == address(0)) {\\n            next = store.begin();\\n        }\\n\\n        // Iterate until all registered Darknodes have been collected\\n        while (n < count) {\\n            if (next == address(0)) {\\n                break;\\n            }\\n            // Only include Darknodes that are currently registered\\n            bool includeNext;\\n            if (_usePreviousEpoch) {\\n                includeNext = isRegisteredInPreviousEpoch(next);\\n            } else {\\n                includeNext = isRegistered(next);\\n            }\\n            if (!includeNext) {\\n                next = store.next(next);\\n                continue;\\n            }\\n            nodes[n] = next;\\n            next = store.next(next);\\n            n += 1;\\n        }\\n        return nodes;\\n    }\\n\\n    /// Private function called by `deregister` and `slash`\\n    function deregisterDarknode(address _darknodeID) private {\\n        address darknodeOperator = store.darknodeOperator(_darknodeID);\\n\\n        // Flag the darknode for deregistration\\n        store.updateDarknodeDeregisteredAt(\\n            _darknodeID,\\n            currentEpoch.blocktime.add(minimumEpochInterval)\\n        );\\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\\n\\n        // Emit an event\\n        emit LogDarknodeDeregistered(darknodeOperator, _darknodeID);\\n    }\\n\\n    function getDarknodeCountFromEpochs()\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Begin with the first node in the list\\n        uint256 nPreviousEpoch = 0;\\n        uint256 nCurrentEpoch = 0;\\n        uint256 nNextEpoch = 0;\\n        address next = store.begin();\\n\\n        // Iterate until all registered Darknodes have been collected\\n        while (true) {\\n            // End of darknode list.\\n            if (next == address(0)) {\\n                break;\\n            }\\n\\n            if (isRegisteredInPreviousEpoch(next)) {\\n                nPreviousEpoch += 1;\\n            }\\n\\n            if (isRegistered(next)) {\\n                nCurrentEpoch += 1;\\n            }\\n\\n            // Darknode is registered and has not deregistered, or is pending\\n            // becoming registered.\\n            if (\\n                ((isRegistered(next) && !isPendingDeregistration(next)) ||\\n                    isPendingRegistration(next))\\n            ) {\\n                nNextEpoch += 1;\\n            }\\n            next = store.next(next);\\n        }\\n        return (nPreviousEpoch, nCurrentEpoch, nNextEpoch);\\n    }\\n}\\n\\n/* solium-disable-next-line no-empty-blocks */\\ncontract DarknodeRegistryProxy is InitializableAdminUpgradeabilityProxy {\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/DarknodeRegistry/DarknodeRegistryStore.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/LinkedList.sol\\\";\\nimport \\\"../RenToken/RenToken.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\n\\n/// @notice This contract stores data and funds for the DarknodeRegistry\\n/// contract. The data / fund logic and storage have been separated to improve\\n/// upgradability.\\ncontract DarknodeRegistryStore is Claimable, CanReclaimTokens {\\n    using SafeMath for uint256;\\n\\n    string public VERSION; // Passed in as a constructor parameter.\\n\\n    /// @notice Darknodes are stored in the darknode struct. The owner is the\\n    /// address that registered the darknode, the bond is the amount of REN that\\n    /// was transferred during registration, and the public key is the\\n    /// encryption key that should be used when sending sensitive information to\\n    /// the darknode.\\n    struct Darknode {\\n        // The owner of a Darknode is the address that called the register\\n        // function. The owner is the only address that is allowed to\\n        // deregister the Darknode, unless the Darknode is slashed for\\n        // malicious behavior.\\n        address payable owner;\\n        // The bond is the amount of REN submitted as a bond by the Darknode.\\n        // This amount is reduced when the Darknode is slashed for malicious\\n        // behavior.\\n        uint256 bond;\\n        // The block number at which the Darknode is considered registered.\\n        uint256 registeredAt;\\n        // The block number at which the Darknode is considered deregistered.\\n        uint256 deregisteredAt;\\n        // The public key used by this Darknode for encrypting sensitive data\\n        // off chain. It is assumed that the Darknode has access to the\\n        // respective private key, and that there is an agreement on the format\\n        // of the public key.\\n        bytes publicKey;\\n    }\\n\\n    /// Registry data.\\n    mapping(address => Darknode) private darknodeRegistry;\\n    LinkedList.List private darknodes;\\n\\n    // RenToken.\\n    RenToken public ren;\\n\\n    /// @notice The contract constructor.\\n    ///\\n    /// @param _VERSION A string defining the contract version.\\n    /// @param _ren The address of the RenToken contract.\\n    constructor(string memory _VERSION, RenToken _ren) public {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n        VERSION = _VERSION;\\n        ren = _ren;\\n        blacklistRecoverableToken(address(ren));\\n    }\\n\\n    /// @notice Instantiates a darknode and appends it to the darknodes\\n    /// linked-list.\\n    ///\\n    /// @param _darknodeID The darknode's ID.\\n    /// @param _darknodeOperator The darknode's owner's address.\\n    /// @param _bond The darknode's bond value.\\n    /// @param _publicKey The darknode's public key.\\n    /// @param _registeredAt The time stamp when the darknode is registered.\\n    /// @param _deregisteredAt The time stamp when the darknode is deregistered.\\n    function appendDarknode(\\n        address _darknodeID,\\n        address payable _darknodeOperator,\\n        uint256 _bond,\\n        bytes calldata _publicKey,\\n        uint256 _registeredAt,\\n        uint256 _deregisteredAt\\n    ) external onlyOwner {\\n        Darknode memory darknode =\\n            Darknode({\\n                owner: _darknodeOperator,\\n                bond: _bond,\\n                publicKey: _publicKey,\\n                registeredAt: _registeredAt,\\n                deregisteredAt: _deregisteredAt\\n            });\\n        darknodeRegistry[_darknodeID] = darknode;\\n        LinkedList.append(darknodes, _darknodeID);\\n    }\\n\\n    /// @notice Returns the address of the first darknode in the store.\\n    function begin() external view onlyOwner returns (address) {\\n        return LinkedList.begin(darknodes);\\n    }\\n\\n    /// @notice Returns the address of the next darknode in the store after the\\n    /// given address.\\n    function next(address darknodeID)\\n        external\\n        view\\n        onlyOwner\\n        returns (address)\\n    {\\n        return LinkedList.next(darknodes, darknodeID);\\n    }\\n\\n    /// @notice Removes a darknode from the store and transfers its bond to the\\n    /// owner of this contract.\\n    function removeDarknode(address darknodeID) external onlyOwner {\\n        uint256 bond = darknodeRegistry[darknodeID].bond;\\n        delete darknodeRegistry[darknodeID];\\n        LinkedList.remove(darknodes, darknodeID);\\n        require(\\n            ren.transfer(owner(), bond),\\n            \\\"DarknodeRegistryStore: bond transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Updates the bond of a darknode. The new bond must be smaller\\n    /// than the previous bond of the darknode.\\n    function updateDarknodeBond(address darknodeID, uint256 decreasedBond)\\n        external\\n        onlyOwner\\n    {\\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\\n        require(\\n            decreasedBond < previousBond,\\n            \\\"DarknodeRegistryStore: bond not decreased\\\"\\n        );\\n        darknodeRegistry[darknodeID].bond = decreasedBond;\\n        require(\\n            ren.transfer(owner(), previousBond.sub(decreasedBond)),\\n            \\\"DarknodeRegistryStore: bond transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Updates the deregistration timestamp of a darknode.\\n    function updateDarknodeDeregisteredAt(\\n        address darknodeID,\\n        uint256 deregisteredAt\\n    ) external onlyOwner {\\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\\n    }\\n\\n    /// @notice Returns the owner of a given darknode.\\n    function darknodeOperator(address darknodeID)\\n        external\\n        view\\n        onlyOwner\\n        returns (address payable)\\n    {\\n        return darknodeRegistry[darknodeID].owner;\\n    }\\n\\n    /// @notice Returns the bond of a given darknode.\\n    function darknodeBond(address darknodeID)\\n        external\\n        view\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return darknodeRegistry[darknodeID].bond;\\n    }\\n\\n    /// @notice Returns the registration time of a given darknode.\\n    function darknodeRegisteredAt(address darknodeID)\\n        external\\n        view\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return darknodeRegistry[darknodeID].registeredAt;\\n    }\\n\\n    /// @notice Returns the deregistration time of a given darknode.\\n    function darknodeDeregisteredAt(address darknodeID)\\n        external\\n        view\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return darknodeRegistry[darknodeID].deregisteredAt;\\n    }\\n\\n    /// @notice Returns the encryption public key of a given darknode.\\n    function darknodePublicKey(address darknodeID)\\n        external\\n        view\\n        onlyOwner\\n        returns (bytes memory)\\n    {\\n        return darknodeRegistry[darknodeID].publicKey;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/DarknodeRegistry/DarknodeRegistryV1.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/InitializableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../RenToken/RenToken.sol\\\";\\nimport \\\"./DarknodeRegistryStore.sol\\\";\\nimport \\\"../Governance/Claimable.sol\\\";\\nimport \\\"../libraries/CanReclaimTokens.sol\\\";\\n\\ninterface IDarknodePaymentStore {}\\n\\ninterface IDarknodePayment {\\n    function changeCycle() external returns (uint256);\\n\\n    function store() external view returns (IDarknodePaymentStore);\\n}\\n\\ninterface IDarknodeSlasher {}\\n\\ncontract DarknodeRegistryStateV1 {\\n    using SafeMath for uint256;\\n\\n    string public VERSION; // Passed in as a constructor parameter.\\n\\n    /// @notice Darknode pods are shuffled after a fixed number of blocks.\\n    /// An Epoch stores an epoch hash used as an (insecure) RNG seed, and the\\n    /// blocknumber which restricts when the next epoch can be called.\\n    struct Epoch {\\n        uint256 epochhash;\\n        uint256 blocktime;\\n    }\\n\\n    uint256 public numDarknodes;\\n    uint256 public numDarknodesNextEpoch;\\n    uint256 public numDarknodesPreviousEpoch;\\n\\n    /// Variables used to parameterize behavior.\\n    uint256 public minimumBond;\\n    uint256 public minimumPodSize;\\n    uint256 public minimumEpochInterval;\\n    uint256 public deregistrationInterval;\\n\\n    /// When one of the above variables is modified, it is only updated when the\\n    /// next epoch is called. These variables store the values for the next\\n    /// epoch.\\n    uint256 public nextMinimumBond;\\n    uint256 public nextMinimumPodSize;\\n    uint256 public nextMinimumEpochInterval;\\n\\n    /// The current and previous epoch.\\n    Epoch public currentEpoch;\\n    Epoch public previousEpoch;\\n\\n    /// REN ERC20 contract used to transfer bonds.\\n    RenToken public ren;\\n\\n    /// Darknode Registry Store is the storage contract for darknodes.\\n    DarknodeRegistryStore public store;\\n\\n    /// The Darknode Payment contract for changing cycle.\\n    IDarknodePayment public darknodePayment;\\n\\n    /// Darknode Slasher allows darknodes to vote on bond slashing.\\n    IDarknodeSlasher public slasher;\\n    IDarknodeSlasher public nextSlasher;\\n}\\n\\n/// @notice DarknodeRegistry is responsible for the registration and\\n/// deregistration of Darknodes.\\ncontract DarknodeRegistryLogicV1 is\\n    Claimable,\\n    CanReclaimTokens,\\n    DarknodeRegistryStateV1\\n{\\n    /// @notice Emitted when a darknode is registered.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was registered.\\n    /// @param _bond The amount of REN that was transferred as bond.\\n    event LogDarknodeRegistered(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        uint256 _bond\\n    );\\n\\n    /// @notice Emitted when a darknode is deregistered.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was deregistered.\\n    event LogDarknodeDeregistered(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID\\n    );\\n\\n    /// @notice Emitted when a refund has been made.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _amount The amount of REN that was refunded.\\n    event LogDarknodeRefunded(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Emitted when a darknode's bond is slashed.\\n    /// @param _darknodeOperator The owner of the darknode.\\n    /// @param _darknodeID The ID of the darknode that was slashed.\\n    /// @param _challenger The address of the account that submitted the challenge.\\n    /// @param _percentage The total percentage  of bond slashed.\\n    event LogDarknodeSlashed(\\n        address indexed _darknodeOperator,\\n        address indexed _darknodeID,\\n        address indexed _challenger,\\n        uint256 _percentage\\n    );\\n\\n    /// @notice Emitted when a new epoch has begun.\\n    event LogNewEpoch(uint256 indexed epochhash);\\n\\n    /// @notice Emitted when a constructor parameter has been updated.\\n    event LogMinimumBondUpdated(\\n        uint256 _previousMinimumBond,\\n        uint256 _nextMinimumBond\\n    );\\n    event LogMinimumPodSizeUpdated(\\n        uint256 _previousMinimumPodSize,\\n        uint256 _nextMinimumPodSize\\n    );\\n    event LogMinimumEpochIntervalUpdated(\\n        uint256 _previousMinimumEpochInterval,\\n        uint256 _nextMinimumEpochInterval\\n    );\\n    event LogSlasherUpdated(\\n        address indexed _previousSlasher,\\n        address indexed _nextSlasher\\n    );\\n    event LogDarknodePaymentUpdated(\\n        IDarknodePayment indexed _previousDarknodePayment,\\n        IDarknodePayment indexed _nextDarknodePayment\\n    );\\n\\n    /// @notice Restrict a function to the owner that registered the darknode.\\n    modifier onlyDarknodeOperator(address _darknodeID) {\\n        require(\\n            store.darknodeOperator(_darknodeID) == msg.sender,\\n            \\\"DarknodeRegistry: must be darknode owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to unregistered darknodes.\\n    modifier onlyRefunded(address _darknodeID) {\\n        require(\\n            isRefunded(_darknodeID),\\n            \\\"DarknodeRegistry: must be refunded or never registered\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to refundable darknodes.\\n    modifier onlyRefundable(address _darknodeID) {\\n        require(\\n            isRefundable(_darknodeID),\\n            \\\"DarknodeRegistry: must be deregistered for at least one epoch\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to registered nodes without a pending\\n    /// deregistration.\\n    modifier onlyDeregisterable(address _darknodeID) {\\n        require(\\n            isDeregisterable(_darknodeID),\\n            \\\"DarknodeRegistry: must be deregisterable\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to the Slasher contract.\\n    modifier onlySlasher() {\\n        require(\\n            address(slasher) == msg.sender,\\n            \\\"DarknodeRegistry: must be slasher\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Restrict a function to registered nodes without a pending\\n    /// deregistration.\\n    modifier onlyDarknode(address _darknodeID) {\\n        require(\\n            isRegistered(_darknodeID),\\n            \\\"DarknodeRegistry: invalid darknode\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice The contract constructor.\\n    ///\\n    /// @param _VERSION A string defining the contract version.\\n    /// @param _renAddress The address of the RenToken contract.\\n    /// @param _storeAddress The address of the DarknodeRegistryStore contract.\\n    /// @param _minimumBond The minimum bond amount that can be submitted by a\\n    ///        Darknode.\\n    /// @param _minimumPodSize The minimum size of a Darknode pod.\\n    /// @param _minimumEpochIntervalSeconds The minimum number of seconds between epochs.\\n    function initialize(\\n        string memory _VERSION,\\n        RenToken _renAddress,\\n        DarknodeRegistryStore _storeAddress,\\n        uint256 _minimumBond,\\n        uint256 _minimumPodSize,\\n        uint256 _minimumEpochIntervalSeconds,\\n        uint256 _deregistrationIntervalSeconds\\n    ) public initializer {\\n        Claimable.initialize(msg.sender);\\n        CanReclaimTokens.initialize(msg.sender);\\n        VERSION = _VERSION;\\n\\n        store = _storeAddress;\\n        ren = _renAddress;\\n\\n        minimumBond = _minimumBond;\\n        nextMinimumBond = minimumBond;\\n\\n        minimumPodSize = _minimumPodSize;\\n        nextMinimumPodSize = minimumPodSize;\\n\\n        minimumEpochInterval = _minimumEpochIntervalSeconds;\\n        nextMinimumEpochInterval = minimumEpochInterval;\\n        deregistrationInterval = _deregistrationIntervalSeconds;\\n\\n        uint256 epochhash = uint256(blockhash(block.number - 1));\\n        currentEpoch = Epoch({\\n            epochhash: epochhash,\\n            blocktime: block.timestamp\\n        });\\n        emit LogNewEpoch(epochhash);\\n    }\\n\\n    /// @notice Register a darknode and transfer the bond to this contract.\\n    /// Before registering, the bond transfer must be approved in the REN\\n    /// contract. The caller must provide a public encryption key for the\\n    /// darknode. The darknode will remain pending registration until the next\\n    /// epoch. Only after this period can the darknode be deregistered. The\\n    /// caller of this method will be stored as the owner of the darknode.\\n    ///\\n    /// @param _darknodeID The darknode ID that will be registered.\\n    /// @param _publicKey The public key of the darknode. It is stored to allow\\n    ///        other darknodes and traders to encrypt messages to the trader.\\n    function register(address _darknodeID, bytes calldata _publicKey)\\n        external\\n        onlyRefunded(_darknodeID)\\n    {\\n        require(\\n            _darknodeID != address(0),\\n            \\\"DarknodeRegistry: darknode address cannot be zero\\\"\\n        );\\n\\n        // Use the current minimum bond as the darknode's bond and transfer bond to store\\n        require(\\n            ren.transferFrom(msg.sender, address(store), minimumBond),\\n            \\\"DarknodeRegistry: bond transfer failed\\\"\\n        );\\n\\n        // Flag this darknode for registration\\n        store.appendDarknode(\\n            _darknodeID,\\n            msg.sender,\\n            minimumBond,\\n            _publicKey,\\n            currentEpoch.blocktime.add(minimumEpochInterval),\\n            0\\n        );\\n\\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\\n\\n        // Emit an event.\\n        emit LogDarknodeRegistered(msg.sender, _darknodeID, minimumBond);\\n    }\\n\\n    /// @notice Deregister a darknode. The darknode will not be deregistered\\n    /// until the end of the epoch. After another epoch, the bond can be\\n    /// refunded by calling the refund method.\\n    /// @param _darknodeID The darknode ID that will be deregistered. The caller\\n    ///        of this method must be the owner of this darknode.\\n    function deregister(address _darknodeID)\\n        external\\n        onlyDeregisterable(_darknodeID)\\n        onlyDarknodeOperator(_darknodeID)\\n    {\\n        deregisterDarknode(_darknodeID);\\n    }\\n\\n    /// @notice Progress the epoch if it is possible to do so. This captures\\n    /// the current timestamp and current blockhash and overrides the current\\n    /// epoch.\\n    function epoch() external {\\n        if (previousEpoch.blocktime == 0) {\\n            // The first epoch must be called by the owner of the contract\\n            require(\\n                msg.sender == owner(),\\n                \\\"DarknodeRegistry: not authorized to call first epoch\\\"\\n            );\\n        }\\n\\n        // Require that the epoch interval has passed\\n        require(\\n            block.timestamp >= currentEpoch.blocktime.add(minimumEpochInterval),\\n            \\\"DarknodeRegistry: epoch interval has not passed\\\"\\n        );\\n        uint256 epochhash = uint256(blockhash(block.number - 1));\\n\\n        // Update the epoch hash and timestamp\\n        previousEpoch = currentEpoch;\\n        currentEpoch = Epoch({\\n            epochhash: epochhash,\\n            blocktime: block.timestamp\\n        });\\n\\n        // Update the registry information\\n        numDarknodesPreviousEpoch = numDarknodes;\\n        numDarknodes = numDarknodesNextEpoch;\\n\\n        // If any update functions have been called, update the values now\\n        if (nextMinimumBond != minimumBond) {\\n            minimumBond = nextMinimumBond;\\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\\n        }\\n        if (nextMinimumPodSize != minimumPodSize) {\\n            minimumPodSize = nextMinimumPodSize;\\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\\n        }\\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\\n            minimumEpochInterval = nextMinimumEpochInterval;\\n            emit LogMinimumEpochIntervalUpdated(\\n                minimumEpochInterval,\\n                nextMinimumEpochInterval\\n            );\\n        }\\n        if (nextSlasher != slasher) {\\n            slasher = nextSlasher;\\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\\n        }\\n        if (address(darknodePayment) != address(0x0)) {\\n            darknodePayment.changeCycle();\\n        }\\n\\n        // Emit an event\\n        emit LogNewEpoch(epochhash);\\n    }\\n\\n    /// @notice Allows the contract owner to initiate an ownership transfer of\\n    /// the DarknodeRegistryStore.\\n    /// @param _newOwner The address to transfer the ownership to.\\n    function transferStoreOwnership(DarknodeRegistryLogicV1 _newOwner)\\n        external\\n        onlyOwner\\n    {\\n        store.transferOwnership(address(_newOwner));\\n        _newOwner.claimStoreOwnership();\\n    }\\n\\n    /// @notice Claims ownership of the store passed in to the constructor.\\n    /// `transferStoreOwnership` must have previously been called when\\n    /// transferring from another Darknode Registry.\\n    function claimStoreOwnership() external {\\n        store.claimOwnership();\\n\\n        // Sync state with new store.\\n        // Note: numDarknodesPreviousEpoch is set to 0 for a newly deployed DNR.\\n        (\\n            numDarknodesPreviousEpoch,\\n            numDarknodes,\\n            numDarknodesNextEpoch\\n        ) = getDarknodeCountFromEpochs();\\n    }\\n\\n    /// @notice Allows the contract owner to update the address of the\\n    /// darknode payment contract.\\n    /// @param _darknodePayment The address of the Darknode Payment\\n    /// contract.\\n    function updateDarknodePayment(IDarknodePayment _darknodePayment)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            address(_darknodePayment) != address(0x0),\\n            \\\"DarknodeRegistry: invalid Darknode Payment address\\\"\\n        );\\n        IDarknodePayment previousDarknodePayment = darknodePayment;\\n        darknodePayment = _darknodePayment;\\n        emit LogDarknodePaymentUpdated(\\n            previousDarknodePayment,\\n            darknodePayment\\n        );\\n    }\\n\\n    /// @notice Allows the contract owner to update the minimum bond.\\n    /// @param _nextMinimumBond The minimum bond amount that can be submitted by\\n    ///        a darknode.\\n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\\n        // Will be updated next epoch\\n        nextMinimumBond = _nextMinimumBond;\\n    }\\n\\n    /// @notice Allows the contract owner to update the minimum pod size.\\n    /// @param _nextMinimumPodSize The minimum size of a pod.\\n    function updateMinimumPodSize(uint256 _nextMinimumPodSize)\\n        external\\n        onlyOwner\\n    {\\n        // Will be updated next epoch\\n        nextMinimumPodSize = _nextMinimumPodSize;\\n    }\\n\\n    /// @notice Allows the contract owner to update the minimum epoch interval.\\n    /// @param _nextMinimumEpochInterval The minimum number of blocks between epochs.\\n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval)\\n        external\\n        onlyOwner\\n    {\\n        // Will be updated next epoch\\n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\\n    }\\n\\n    /// @notice Allow the contract owner to update the DarknodeSlasher contract\\n    /// address.\\n    /// @param _slasher The new slasher address.\\n    function updateSlasher(IDarknodeSlasher _slasher) external onlyOwner {\\n        require(\\n            address(_slasher) != address(0),\\n            \\\"DarknodeRegistry: invalid slasher address\\\"\\n        );\\n        nextSlasher = _slasher;\\n    }\\n\\n    /// @notice Allow the DarknodeSlasher contract to slash a portion of darknode's\\n    ///         bond and deregister it.\\n    /// @param _guilty The guilty prover whose bond is being slashed.\\n    /// @param _challenger The challenger who should receive a portion of the bond as reward.\\n    /// @param _percentage The total percentage  of bond to be slashed.\\n    function slash(\\n        address _guilty,\\n        address _challenger,\\n        uint256 _percentage\\n    ) external onlySlasher onlyDarknode(_guilty) {\\n        require(_percentage <= 100, \\\"DarknodeRegistry: invalid percent\\\");\\n\\n        // If the darknode has not been deregistered then deregister it\\n        if (isDeregisterable(_guilty)) {\\n            deregisterDarknode(_guilty);\\n        }\\n\\n        uint256 totalBond = store.darknodeBond(_guilty);\\n        uint256 penalty = totalBond.div(100).mul(_percentage);\\n        uint256 challengerReward = penalty.div(2);\\n        uint256 darknodePaymentReward = penalty.sub(challengerReward);\\n        if (challengerReward > 0) {\\n            // Slash the bond of the failed prover\\n            store.updateDarknodeBond(_guilty, totalBond.sub(penalty));\\n\\n            // Distribute the remaining bond into the darknode payment reward pool\\n            require(\\n                address(darknodePayment) != address(0x0),\\n                \\\"DarknodeRegistry: invalid payment address\\\"\\n            );\\n            require(\\n                ren.transfer(\\n                    address(darknodePayment.store()),\\n                    darknodePaymentReward\\n                ),\\n                \\\"DarknodeRegistry: reward transfer failed\\\"\\n            );\\n            require(\\n                ren.transfer(_challenger, challengerReward),\\n                \\\"DarknodeRegistry: reward transfer failed\\\"\\n            );\\n        }\\n\\n        emit LogDarknodeSlashed(\\n            store.darknodeOperator(_guilty),\\n            _guilty,\\n            _challenger,\\n            _percentage\\n        );\\n    }\\n\\n    /// @notice Refund the bond of a deregistered darknode. This will make the\\n    /// darknode available for registration again. Anyone can call this function\\n    /// but the bond will always be refunded to the darknode operator.\\n    ///\\n    /// @param _darknodeID The darknode ID that will be refunded.\\n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\\n        address darknodeOperator = store.darknodeOperator(_darknodeID);\\n\\n        // Remember the bond amount\\n        uint256 amount = store.darknodeBond(_darknodeID);\\n\\n        // Erase the darknode from the registry\\n        store.removeDarknode(_darknodeID);\\n\\n        // Refund the operator by transferring REN\\n        require(\\n            ren.transfer(darknodeOperator, amount),\\n            \\\"DarknodeRegistry: bond transfer failed\\\"\\n        );\\n\\n        // Emit an event.\\n        emit LogDarknodeRefunded(darknodeOperator, _darknodeID, amount);\\n    }\\n\\n    /// @notice Retrieves the address of the account that registered a darknode.\\n    /// @param _darknodeID The ID of the darknode to retrieve the owner for.\\n    function getDarknodeOperator(address _darknodeID)\\n        external\\n        view\\n        returns (address payable)\\n    {\\n        return store.darknodeOperator(_darknodeID);\\n    }\\n\\n    /// @notice Retrieves the bond amount of a darknode in 10^-18 REN.\\n    /// @param _darknodeID The ID of the darknode to retrieve the bond for.\\n    function getDarknodeBond(address _darknodeID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return store.darknodeBond(_darknodeID);\\n    }\\n\\n    /// @notice Retrieves the encryption public key of the darknode.\\n    /// @param _darknodeID The ID of the darknode to retrieve the public key for.\\n    function getDarknodePublicKey(address _darknodeID)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return store.darknodePublicKey(_darknodeID);\\n    }\\n\\n    /// @notice Retrieves a list of darknodes which are registered for the\\n    /// current epoch.\\n    /// @param _start A darknode ID used as an offset for the list. If _start is\\n    ///        0x0, the first dark node will be used. _start won't be\\n    ///        included it is not registered for the epoch.\\n    /// @param _count The number of darknodes to retrieve starting from _start.\\n    ///        If _count is 0, all of the darknodes from _start are\\n    ///        retrieved. If _count is more than the remaining number of\\n    ///        registered darknodes, the rest of the list will contain\\n    ///        0x0s.\\n    function getDarknodes(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 count = _count;\\n        if (count == 0) {\\n            count = numDarknodes;\\n        }\\n        return getDarknodesFromEpochs(_start, count, false);\\n    }\\n\\n    /// @notice Retrieves a list of darknodes which were registered for the\\n    /// previous epoch. See `getDarknodes` for the parameter documentation.\\n    function getPreviousDarknodes(address _start, uint256 _count)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 count = _count;\\n        if (count == 0) {\\n            count = numDarknodesPreviousEpoch;\\n        }\\n        return getDarknodesFromEpochs(_start, count, true);\\n    }\\n\\n    /// @notice Returns whether a darknode is scheduled to become registered\\n    /// at next epoch.\\n    /// @param _darknodeID The ID of the darknode to return.\\n    function isPendingRegistration(address _darknodeID)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\\n        return registeredAt != 0 && registeredAt > currentEpoch.blocktime;\\n    }\\n\\n    /// @notice Returns if a darknode is in the pending deregistered state. In\\n    /// this state a darknode is still considered registered.\\n    function isPendingDeregistration(address _darknodeID)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocktime;\\n    }\\n\\n    /// @notice Returns if a darknode is in the deregistered state.\\n    function isDeregistered(address _darknodeID) public view returns (bool) {\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocktime;\\n    }\\n\\n    /// @notice Returns if a darknode can be deregistered. This is true if the\\n    /// darknodes is in the registered state and has not attempted to\\n    /// deregister yet.\\n    function isDeregisterable(address _darknodeID) public view returns (bool) {\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        // The Darknode is currently in the registered state and has not been\\n        // transitioned to the pending deregistration, or deregistered, state\\n        return isRegistered(_darknodeID) && deregisteredAt == 0;\\n    }\\n\\n    /// @notice Returns if a darknode is in the refunded state. This is true\\n    /// for darknodes that have never been registered, or darknodes that have\\n    /// been deregistered and refunded.\\n    function isRefunded(address _darknodeID) public view returns (bool) {\\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        return registeredAt == 0 && deregisteredAt == 0;\\n    }\\n\\n    /// @notice Returns if a darknode is refundable. This is true for darknodes\\n    /// that have been in the deregistered state for one full epoch.\\n    function isRefundable(address _darknodeID) public view returns (bool) {\\n        return\\n            isDeregistered(_darknodeID) &&\\n            store.darknodeDeregisteredAt(_darknodeID) <=\\n            (previousEpoch.blocktime - deregistrationInterval);\\n    }\\n\\n    /// @notice Returns the registration time of a given darknode.\\n    function darknodeRegisteredAt(address darknodeID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return store.darknodeRegisteredAt(darknodeID);\\n    }\\n\\n    /// @notice Returns the deregistration time of a given darknode.\\n    function darknodeDeregisteredAt(address darknodeID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return store.darknodeDeregisteredAt(darknodeID);\\n    }\\n\\n    /// @notice Returns if a darknode is in the registered state.\\n    function isRegistered(address _darknodeID) public view returns (bool) {\\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\\n    }\\n\\n    /// @notice Returns if a darknode was in the registered state last epoch.\\n    function isRegisteredInPreviousEpoch(address _darknodeID)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\\n    }\\n\\n    /// @notice Returns if a darknode was in the registered state for a given\\n    /// epoch.\\n    /// @param _darknodeID The ID of the darknode.\\n    /// @param _epoch One of currentEpoch, previousEpoch.\\n    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocktime;\\n        bool notDeregistered = deregisteredAt == 0 ||\\n            deregisteredAt > _epoch.blocktime;\\n        // The Darknode has been registered and has not yet been deregistered,\\n        // although it might be pending deregistration\\n        return registered && notDeregistered;\\n    }\\n\\n    /// @notice Returns a list of darknodes registered for either the current\\n    /// or the previous epoch. See `getDarknodes` for documentation on the\\n    /// parameters `_start` and `_count`.\\n    /// @param _usePreviousEpoch If true, use the previous epoch, otherwise use\\n    ///        the current epoch.\\n    function getDarknodesFromEpochs(\\n        address _start,\\n        uint256 _count,\\n        bool _usePreviousEpoch\\n    ) private view returns (address[] memory) {\\n        uint256 count = _count;\\n        if (count == 0) {\\n            count = numDarknodes;\\n        }\\n\\n        address[] memory nodes = new address[](count);\\n\\n        // Begin with the first node in the list\\n        uint256 n = 0;\\n        address next = _start;\\n        if (next == address(0)) {\\n            next = store.begin();\\n        }\\n\\n        // Iterate until all registered Darknodes have been collected\\n        while (n < count) {\\n            if (next == address(0)) {\\n                break;\\n            }\\n            // Only include Darknodes that are currently registered\\n            bool includeNext;\\n            if (_usePreviousEpoch) {\\n                includeNext = isRegisteredInPreviousEpoch(next);\\n            } else {\\n                includeNext = isRegistered(next);\\n            }\\n            if (!includeNext) {\\n                next = store.next(next);\\n                continue;\\n            }\\n            nodes[n] = next;\\n            next = store.next(next);\\n            n += 1;\\n        }\\n        return nodes;\\n    }\\n\\n    /// Private function called by `deregister` and `slash`\\n    function deregisterDarknode(address _darknodeID) private {\\n        address darknodeOperator = store.darknodeOperator(_darknodeID);\\n\\n        // Flag the darknode for deregistration\\n        store.updateDarknodeDeregisteredAt(\\n            _darknodeID,\\n            currentEpoch.blocktime.add(minimumEpochInterval)\\n        );\\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\\n\\n        // Emit an event\\n        emit LogDarknodeDeregistered(darknodeOperator, _darknodeID);\\n    }\\n\\n    function getDarknodeCountFromEpochs()\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Begin with the first node in the list\\n        uint256 nPreviousEpoch = 0;\\n        uint256 nCurrentEpoch = 0;\\n        uint256 nNextEpoch = 0;\\n        address next = store.begin();\\n\\n        // Iterate until all registered Darknodes have been collected\\n        while (true) {\\n            // End of darknode list.\\n            if (next == address(0)) {\\n                break;\\n            }\\n\\n            if (isRegisteredInPreviousEpoch(next)) {\\n                nPreviousEpoch += 1;\\n            }\\n\\n            if (isRegistered(next)) {\\n                nCurrentEpoch += 1;\\n            }\\n\\n            // Darknode is registered and has not deregistered, or is pending\\n            // becoming registered.\\n            if (\\n                ((isRegistered(next) && !isPendingDeregistration(next)) ||\\n                    isPendingRegistration(next))\\n            ) {\\n                nNextEpoch += 1;\\n            }\\n            next = store.next(next);\\n        }\\n        return (nPreviousEpoch, nCurrentEpoch, nNextEpoch);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/DarknodeRegistry/DarknodeRegistryV1Preupgrader.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./DarknodeRegistry.sol\\\";\\nimport \\\"../Governance/RenProxyAdmin.sol\\\";\\nimport \\\"../RenToken/RenToken.sol\\\";\\nimport \\\"./DarknodeRegistryV1ToV2Upgrader.sol\\\";\\n\\ncontract DarknodeRegistryV1ToV2Preupgrader is Ownable {\\n    DarknodeRegistryLogicV1 public darknodeRegistryProxy;\\n    DarknodeRegistryV1ToV2Upgrader public upgrader;\\n    address public previousDarknodeRegistryOwner;\\n\\n    constructor(\\n        DarknodeRegistryLogicV1 _darknodeRegistryProxy,\\n        DarknodeRegistryV1ToV2Upgrader _upgrader\\n    ) public {\\n        Ownable.initialize(msg.sender);\\n        darknodeRegistryProxy = _darknodeRegistryProxy;\\n        upgrader = _upgrader;\\n        previousDarknodeRegistryOwner = darknodeRegistryProxy.owner();\\n    }\\n\\n    function claimStoreOwnership() public {\\n        darknodeRegistryProxy.store().claimOwnership();\\n    }\\n\\n    function recover(\\n        address[] calldata _darknodeIDs,\\n        address _bondRecipient,\\n        bytes[] calldata _signatures\\n    ) external onlyOwner {\\n        forwardDNR();\\n        RenToken ren = darknodeRegistryProxy.ren();\\n        DarknodeRegistryStore store = darknodeRegistryProxy.store();\\n        darknodeRegistryProxy.transferStoreOwnership(\\n            DarknodeRegistryLogicV1(address(this))\\n        );\\n        if (darknodeRegistryProxy.store().owner() != address(this)) {\\n            claimStoreOwnership();\\n        }\\n\\n        (, uint256 currentEpochBlocktime) = darknodeRegistryProxy\\n            .currentEpoch();\\n\\n        uint256 total = 0;\\n\\n        for (uint8 i = 0; i < _darknodeIDs.length; i++) {\\n            address _darknodeID = _darknodeIDs[i];\\n\\n            // Require darknode to be refundable.\\n            {\\n                uint256 deregisteredAt = store.darknodeDeregisteredAt(\\n                    _darknodeID\\n                );\\n                bool deregistered = deregisteredAt != 0 &&\\n                    deregisteredAt <= currentEpochBlocktime;\\n\\n                require(\\n                    deregistered,\\n                    \\\"DarknodeRegistryV1Preupgrader: must be deregistered\\\"\\n                );\\n            }\\n\\n            address darknodeOperator = store.darknodeOperator(_darknodeID);\\n            require(\\n                ECDSA.recover(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            \\\"\\\\x19Ethereum Signed Message:\\\\n64\\\",\\n                            \\\"DarknodeRegistry.recover\\\",\\n                            _darknodeID,\\n                            _bondRecipient\\n                        )\\n                    ),\\n                    _signatures[i]\\n                ) == darknodeOperator,\\n                \\\"DarknodeRegistryV1Preupgrader: invalid signature\\\"\\n            );\\n            // Remember the bond amount\\n            total += store.darknodeBond(_darknodeID);\\n            // Erase the darknode from the registry\\n            store.removeDarknode(_darknodeID);\\n            // // Refund the operator by transferring REN\\n        }\\n\\n        require(\\n            ren.transfer(_bondRecipient, total),\\n            \\\"DarknodeRegistryV1Preupgrader: bond transfer failed\\\"\\n        );\\n\\n        store.transferOwnership(address(darknodeRegistryProxy));\\n        darknodeRegistryProxy.claimStoreOwnership();\\n    }\\n\\n    function forwardDNR() public onlyOwner {\\n        // Claim ownership\\n        if (darknodeRegistryProxy.owner() != address(this)) {\\n            darknodeRegistryProxy.claimOwnership();\\n        }\\n        // Set pending owner to upgrader.\\n        if (darknodeRegistryProxy.pendingOwner() != address(upgrader)) {\\n            darknodeRegistryProxy.transferOwnership(address(upgrader));\\n        }\\n    }\\n\\n    function returnDNR() public onlyOwner {\\n        darknodeRegistryProxy.transferOwnership(previousDarknodeRegistryOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/DarknodeRegistry/DarknodeRegistryV1ToV2Upgrader.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./DarknodeRegistry.sol\\\";\\n\\nimport \\\"../Governance/RenProxyAdmin.sol\\\";\\n\\ncontract DarknodeRegistryV1ToV2Upgrader is Ownable {\\n    RenProxyAdmin public renProxyAdmin;\\n    DarknodeRegistryLogicV1 public darknodeRegistryProxy;\\n    DarknodeRegistryLogicV2 public darknodeRegistryLogicV2;\\n    address public previousAdminOwner;\\n    address public previousDarknodeRegistryOwner;\\n\\n    constructor(\\n        RenProxyAdmin _renProxyAdmin,\\n        DarknodeRegistryLogicV1 _darknodeRegistryProxy,\\n        DarknodeRegistryLogicV2 _darknodeRegistryLogicV2\\n    ) public {\\n        Ownable.initialize(msg.sender);\\n        renProxyAdmin = _renProxyAdmin;\\n        darknodeRegistryProxy = _darknodeRegistryProxy;\\n        darknodeRegistryLogicV2 = _darknodeRegistryLogicV2;\\n        previousAdminOwner = renProxyAdmin.owner();\\n        previousDarknodeRegistryOwner = darknodeRegistryProxy.owner();\\n    }\\n\\n    function upgrade() public onlyOwner {\\n        // Pre-checks\\n        uint256 numDarknodes = darknodeRegistryProxy.numDarknodes();\\n        uint256 numDarknodesNextEpoch = darknodeRegistryProxy\\n            .numDarknodesNextEpoch();\\n        uint256 numDarknodesPreviousEpoch = darknodeRegistryProxy\\n            .numDarknodesPreviousEpoch();\\n        uint256 minimumBond = darknodeRegistryProxy.minimumBond();\\n        uint256 minimumPodSize = darknodeRegistryProxy.minimumPodSize();\\n        uint256 minimumEpochInterval = darknodeRegistryProxy\\n            .minimumEpochInterval();\\n        uint256 deregistrationInterval = darknodeRegistryProxy\\n            .deregistrationInterval();\\n        RenToken ren = darknodeRegistryProxy.ren();\\n        DarknodeRegistryStore store = darknodeRegistryProxy.store();\\n        IDarknodePayment darknodePayment = darknodeRegistryProxy\\n            .darknodePayment();\\n\\n        // Claim and update.\\n        darknodeRegistryProxy.claimOwnership();\\n        renProxyAdmin.upgrade(\\n            AdminUpgradeabilityProxy(\\n                // Cast gateway instance to payable address\\n                address(uint160(address(darknodeRegistryProxy)))\\n            ),\\n            address(darknodeRegistryLogicV2)\\n        );\\n\\n        // Post-checks\\n        require(\\n            numDarknodes == darknodeRegistryProxy.numDarknodes(),\\n            \\\"Migrator: expected 'numDarknodes' not to change\\\"\\n        );\\n        require(\\n            numDarknodesNextEpoch ==\\n                darknodeRegistryProxy.numDarknodesNextEpoch(),\\n            \\\"Migrator: expected 'numDarknodesNextEpoch' not to change\\\"\\n        );\\n        require(\\n            numDarknodesPreviousEpoch ==\\n                darknodeRegistryProxy.numDarknodesPreviousEpoch(),\\n            \\\"Migrator: expected 'numDarknodesPreviousEpoch' not to change\\\"\\n        );\\n        require(\\n            minimumBond == darknodeRegistryProxy.minimumBond(),\\n            \\\"Migrator: expected 'minimumBond' not to change\\\"\\n        );\\n        require(\\n            minimumPodSize == darknodeRegistryProxy.minimumPodSize(),\\n            \\\"Migrator: expected 'minimumPodSize' not to change\\\"\\n        );\\n        require(\\n            minimumEpochInterval ==\\n                darknodeRegistryProxy.minimumEpochInterval(),\\n            \\\"Migrator: expected 'minimumEpochInterval' not to change\\\"\\n        );\\n        require(\\n            deregistrationInterval ==\\n                darknodeRegistryProxy.deregistrationInterval(),\\n            \\\"Migrator: expected 'deregistrationInterval' not to change\\\"\\n        );\\n        require(\\n            ren == darknodeRegistryProxy.ren(),\\n            \\\"Migrator: expected 'ren' not to change\\\"\\n        );\\n        require(\\n            store == darknodeRegistryProxy.store(),\\n            \\\"Migrator: expected 'store' not to change\\\"\\n        );\\n        require(\\n            darknodePayment == darknodeRegistryProxy.darknodePayment(),\\n            \\\"Migrator: expected 'darknodePayment' not to change\\\"\\n        );\\n\\n        darknodeRegistryProxy.updateSlasher(IDarknodeSlasher(0x0));\\n    }\\n\\n    function recover(\\n        address _darknodeID,\\n        address _bondRecipient,\\n        bytes calldata _signature\\n    ) external onlyOwner {\\n        return\\n            DarknodeRegistryLogicV2(address(darknodeRegistryProxy)).recover(\\n                _darknodeID,\\n                _bondRecipient,\\n                _signature\\n            );\\n    }\\n\\n    function returnDNR() public onlyOwner {\\n        darknodeRegistryProxy._directTransferOwnership(\\n            previousDarknodeRegistryOwner\\n        );\\n    }\\n\\n    function returnProxyAdmin() public onlyOwner {\\n        renProxyAdmin.transferOwnership(previousAdminOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Governance/Claimable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\ncontract Claimable is Initializable, Ownable {\\n    address public pendingOwner;\\n\\n    function initialize(address _nextOwner) public initializer {\\n        Ownable.initialize(_nextOwner);\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(\\n            _msgSender() == pendingOwner,\\n            \\\"Claimable: caller is not the pending owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(\\n            newOwner != owner() && newOwner != pendingOwner,\\n            \\\"Claimable: invalid new owner\\\"\\n        );\\n        pendingOwner = newOwner;\\n    }\\n\\n    // Allow skipping two-step transfer if the recipient is known to be a valid\\n    // owner, for use in smart-contracts only.\\n    function _directTransferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function claimOwnership() public onlyPendingOwner {\\n        _transferOwnership(pendingOwner);\\n        delete pendingOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Governance/RenProxyAdmin.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/upgradeability/ProxyAdmin.sol\\\";\\n\\n/**\\n * @title RenProxyAdmin\\n * @dev Proxies restrict the proxy's owner from calling functions from the\\n * delegate contract logic. The ProxyAdmin contract allows single account to be\\n * the governance address of both the proxy and the delegate contract logic.\\n */\\n/* solium-disable-next-line no-empty-blocks */\\ncontract RenProxyAdmin is ProxyAdmin {\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/RenToken/RenToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {\\n    string private constant _name = \\\"REN\\\";\\n    string private constant _symbol = \\\"REN\\\";\\n    uint8 private constant _decimals = 18;\\n\\n    uint256 public constant INITIAL_SUPPLY =\\n        1000000000 * 10**uint256(_decimals);\\n\\n    /// @notice The RenToken Constructor.\\n    constructor() public {\\n        ERC20Pausable.initialize(msg.sender);\\n        ERC20Detailed.initialize(_name, _symbol, _decimals);\\n        Ownable.initialize(msg.sender);\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n\\n    function transferTokens(address beneficiary, uint256 amount)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        // Note: The deployed version has no revert reason\\n        /* solium-disable-next-line error-reason */\\n        require(amount > 0);\\n\\n        _transfer(msg.sender, beneficiary, amount);\\n        emit Transfer(msg.sender, beneficiary, amount);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/CanReclaimTokens.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../Governance/Claimable.sol\\\";\\n\\ncontract CanReclaimTokens is Claimable {\\n    using SafeERC20 for ERC20;\\n\\n    mapping(address => bool) private recoverableTokensBlacklist;\\n\\n    function initialize(address _nextOwner) public initializer {\\n        Claimable.initialize(_nextOwner);\\n    }\\n\\n    function blacklistRecoverableToken(address _token) public onlyOwner {\\n        recoverableTokensBlacklist[_token] = true;\\n    }\\n\\n    /// @notice Allow the owner of the contract to recover funds accidentally\\n    /// sent to the contract. To withdraw ETH, the token should be set to `0x0`.\\n    function recoverTokens(address _token) external onlyOwner {\\n        require(\\n            !recoverableTokensBlacklist[_token],\\n            \\\"CanReclaimTokens: token is not recoverable\\\"\\n        );\\n\\n        if (_token == address(0x0)) {\\n            msg.sender.transfer(address(this).balance);\\n        } else {\\n            ERC20(_token).safeTransfer(\\n                msg.sender,\\n                ERC20(_token).balanceOf(address(this))\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/LinkedList.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n/**\\n * @notice LinkedList is a library for a circular double linked list.\\n */\\nlibrary LinkedList {\\n    /*\\n     * @notice A permanent NULL node (0x0) in the circular double linked list.\\n     * NULL.next is the head, and NULL.previous is the tail.\\n     */\\n    address public constant NULL = address(0);\\n\\n    /**\\n     * @notice A node points to the node before it, and the node after it. If\\n     * node.previous = NULL, then the node is the head of the list. If\\n     * node.next = NULL, then the node is the tail of the list.\\n     */\\n    struct Node {\\n        bool inList;\\n        address previous;\\n        address next;\\n    }\\n\\n    /**\\n     * @notice LinkedList uses a mapping from address to nodes. Each address\\n     * uniquely identifies a node, and in this way they are used like pointers.\\n     */\\n    struct List {\\n        mapping(address => Node) list;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice Insert a new node before an existing node.\\n     *\\n     * @param self The list being used.\\n     * @param target The existing node in the list.\\n     * @param newNode The next node to insert before the target.\\n     */\\n    function insertBefore(\\n        List storage self,\\n        address target,\\n        address newNode\\n    ) internal {\\n        require(newNode != address(0), \\\"LinkedList: invalid address\\\");\\n        require(!isInList(self, newNode), \\\"LinkedList: already in list\\\");\\n        require(\\n            isInList(self, target) || target == NULL,\\n            \\\"LinkedList: not in list\\\"\\n        );\\n\\n        // It is expected that this value is sometimes NULL.\\n        address prev = self.list[target].previous;\\n\\n        self.list[newNode].next = target;\\n        self.list[newNode].previous = prev;\\n        self.list[target].previous = newNode;\\n        self.list[prev].next = newNode;\\n\\n        self.list[newNode].inList = true;\\n\\n        self.length += 1;\\n    }\\n\\n    /**\\n     * @notice Insert a new node after an existing node.\\n     *\\n     * @param self The list being used.\\n     * @param target The existing node in the list.\\n     * @param newNode The next node to insert after the target.\\n     */\\n    function insertAfter(\\n        List storage self,\\n        address target,\\n        address newNode\\n    ) internal {\\n        require(newNode != address(0), \\\"LinkedList: invalid address\\\");\\n        require(!isInList(self, newNode), \\\"LinkedList: already in list\\\");\\n        require(\\n            isInList(self, target) || target == NULL,\\n            \\\"LinkedList: not in list\\\"\\n        );\\n\\n        // It is expected that this value is sometimes NULL.\\n        address n = self.list[target].next;\\n\\n        self.list[newNode].previous = target;\\n        self.list[newNode].next = n;\\n        self.list[target].next = newNode;\\n        self.list[n].previous = newNode;\\n\\n        self.list[newNode].inList = true;\\n\\n        self.length += 1;\\n    }\\n\\n    /**\\n     * @notice Remove a node from the list, and fix the previous and next\\n     * pointers that are pointing to the removed node. Removing anode that is not\\n     * in the list will do nothing.\\n     *\\n     * @param self The list being using.\\n     * @param node The node in the list to be removed.\\n     */\\n    function remove(List storage self, address node) internal {\\n        require(isInList(self, node), \\\"LinkedList: not in list\\\");\\n\\n        address p = self.list[node].previous;\\n        address n = self.list[node].next;\\n\\n        self.list[p].next = n;\\n        self.list[n].previous = p;\\n\\n        // Deleting the node should set this value to false, but we set it here for\\n        // explicitness.\\n        self.list[node].inList = false;\\n        delete self.list[node];\\n\\n        self.length -= 1;\\n    }\\n\\n    /**\\n     * @notice Insert a node at the beginning of the list.\\n     *\\n     * @param self The list being used.\\n     * @param node The node to insert at the beginning of the list.\\n     */\\n    function prepend(List storage self, address node) internal {\\n        // isInList(node) is checked in insertBefore\\n\\n        insertBefore(self, begin(self), node);\\n    }\\n\\n    /**\\n     * @notice Insert a node at the end of the list.\\n     *\\n     * @param self The list being used.\\n     * @param node The node to insert at the end of the list.\\n     */\\n    function append(List storage self, address node) internal {\\n        // isInList(node) is checked in insertBefore\\n\\n        insertAfter(self, end(self), node);\\n    }\\n\\n    function swap(\\n        List storage self,\\n        address left,\\n        address right\\n    ) internal {\\n        // isInList(left) and isInList(right) are checked in remove\\n\\n        address previousRight = self.list[right].previous;\\n        remove(self, right);\\n        insertAfter(self, left, right);\\n        remove(self, left);\\n        insertAfter(self, previousRight, left);\\n    }\\n\\n    function isInList(List storage self, address node)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.list[node].inList;\\n    }\\n\\n    /**\\n     * @notice Get the node at the beginning of a double linked list.\\n     *\\n     * @param self The list being used.\\n     *\\n     * @return A address identifying the node at the beginning of the double\\n     * linked list.\\n     */\\n    function begin(List storage self) internal view returns (address) {\\n        return self.list[NULL].next;\\n    }\\n\\n    /**\\n     * @notice Get the node at the end of a double linked list.\\n     *\\n     * @param self The list being used.\\n     *\\n     * @return A address identifying the node at the end of the double linked\\n     * list.\\n     */\\n    function end(List storage self) internal view returns (address) {\\n        return self.list[NULL].previous;\\n    }\\n\\n    function next(List storage self, address node)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(isInList(self, node), \\\"LinkedList: not in list\\\");\\n        return self.list[node].next;\\n    }\\n\\n    function previous(List storage self, address node)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        require(isInList(self, node), \\\"LinkedList: not in list\\\");\\n        return self.list[node].previous;\\n    }\\n\\n    function elements(\\n        List storage self,\\n        address _start,\\n        uint256 _count\\n    ) internal view returns (address[] memory) {\\n        require(_count > 0, \\\"LinkedList: invalid count\\\");\\n        require(\\n            isInList(self, _start) || _start == address(0),\\n            \\\"LinkedList: not in list\\\"\\n        );\\n        address[] memory elems = new address[](_count);\\n\\n        // Begin with the first node in the list\\n        uint256 n = 0;\\n        address nextItem = _start;\\n        if (nextItem == address(0)) {\\n            nextItem = begin(self);\\n        }\\n\\n        while (n < _count) {\\n            if (nextItem == address(0)) {\\n                break;\\n            }\\n            elems[n] = nextItem;\\n            nextItem = next(self, nextItem);\\n            n += 1;\\n        }\\n        return elems;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"_darknodeRegistryProxy\",\"type\":\"address\"},{\"internalType\":\"contract DarknodeRegistryV1ToV2Upgrader\",\"name\":\"_upgrader\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimStoreOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeRegistryProxy\",\"outputs\":[{\"internalType\":\"contract DarknodeRegistryLogicV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardDNR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousDarknodeRegistryOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_darknodeIDs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_bondRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnDNR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgrader\",\"outputs\":[{\"internalType\":\"contract DarknodeRegistryV1ToV2Upgrader\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DarknodeRegistryV1ToV2Preupgrader", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002d7b6c95afeffa50c068d50f89c5c0014e054f0a0000000000000000000000005945bbe065b7a723fd4cf9485a726cb5529cfaa5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}