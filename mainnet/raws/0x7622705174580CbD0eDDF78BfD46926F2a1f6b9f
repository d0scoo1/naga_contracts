{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/SystemStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\n// Inheritance\\nimport \\\"./OwnedwManager.sol\\\";\\n\\ncontract SystemStatus is OwnedwManager {\\n    struct Status {\\n        bool canSuspend;\\n        bool canResume;\\n    }\\n\\n    struct Suspension {\\n        bool suspended;\\n        // reason is an integer code,\\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\\n        uint248 reason;\\n    }\\n    \\n    mapping(bytes32 => mapping(address => Status)) public accessControl;\\n    uint248 public constant SUSPENSION_REASON_UPGRADE = 1;\\n    bytes32 public constant SECTION_SYSTEM = \\\"System\\\";\\n    bytes32 public constant SECTION_ISSUANCE = \\\"Issuance\\\";\\n\\n    Suspension public systemSuspension;\\n    Suspension public issuanceSuspension;\\n\\n    constructor(address _owner) public OwnedwManager(_owner, _owner) {}\\n\\n    /* ========== VIEWS ========== */\\n    function requireSystemActive() external view {\\n        _internalRequireSystemActive();\\n    }\\n\\n    function requireIssuanceActive() external view {\\n        // Issuance requires the system be active\\n        _internalRequireSystemActive();\\n\\n        // and issuance itself of course\\n        _internalRequireIssuanceActive();\\n    }\\n\\n\\n    function isSystemUpgrading() external view returns (bool) {\\n        return systemSuspension.suspended && systemSuspension.reason == SUSPENSION_REASON_UPGRADE;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function updateAccessControl(\\n        bytes32 section,\\n        address account,\\n        bool canSuspend,\\n        bool canResume\\n    ) external onlyOwner {\\n        _internalUpdateAccessControl(section, account, canSuspend, canResume);\\n    }\\n\\n    function updateAccessControls(\\n        bytes32[] calldata sections,\\n        address[] calldata accounts,\\n        bool[] calldata canSuspends,\\n        bool[] calldata canResumes\\n    ) external onlyOwner {\\n        require(\\n            sections.length == accounts.length &&\\n                accounts.length == canSuspends.length &&\\n                canSuspends.length == canResumes.length,\\n            \\\"Input array lengths must match\\\"\\n        );\\n        for (uint i = 0; i < sections.length; i++) {\\n            _internalUpdateAccessControl(sections[i], accounts[i], canSuspends[i], canResumes[i]);\\n        }\\n    }\\n\\n    function suspendSystem(uint256 reason) external {\\n        _requireAccessToSuspend(SECTION_SYSTEM);\\n        systemSuspension.suspended = true;\\n        systemSuspension.reason = uint248(reason);\\n        emit SystemSuspended(systemSuspension.reason);\\n    }\\n\\n    function resumeSystem() external {\\n        _requireAccessToResume(SECTION_SYSTEM);\\n        systemSuspension.suspended = false;\\n        emit SystemResumed(uint256(systemSuspension.reason));\\n        systemSuspension.reason = 0;\\n    }\\n\\n    function suspendIssuance(uint256 reason) external {\\n        _requireAccessToSuspend(SECTION_ISSUANCE);\\n        issuanceSuspension.suspended = true;\\n        issuanceSuspension.reason = uint248(reason);\\n        emit IssuanceSuspended(reason);\\n    }\\n\\n    function resumeIssuance() external {\\n        _requireAccessToResume(SECTION_ISSUANCE);\\n        issuanceSuspension.suspended = false;\\n        emit IssuanceResumed(uint256(issuanceSuspension.reason));\\n        issuanceSuspension.reason = 0;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _requireAccessToSuspend(bytes32 section) internal view {\\n        require(accessControl[section][msg.sender].canSuspend, \\\"Restricted to access control list\\\");\\n    }\\n\\n    function _requireAccessToResume(bytes32 section) internal view {\\n        require(accessControl[section][msg.sender].canResume, \\\"Restricted to access control list\\\");\\n    }\\n\\n    function _internalRequireSystemActive() internal view {\\n        require(\\n            !systemSuspension.suspended,\\n            systemSuspension.reason == SUSPENSION_REASON_UPGRADE\\n                ? \\\"System is suspended, upgrade in progress... please stand by\\\"\\n                : \\\"System is suspended. Operation prohibited\\\"\\n        );\\n    }\\n\\n    function _internalRequireIssuanceActive() internal view {\\n        require(!issuanceSuspension.suspended, \\\"Issuance is suspended. Operation prohibited\\\");\\n    }\\n\\n    function _internalUpdateAccessControl(\\n        bytes32 section,\\n        address account,\\n        bool canSuspend,\\n        bool canResume\\n    ) internal {\\n        require(\\n            section == SECTION_SYSTEM,\\n            \\\"Invalid section supplied\\\"\\n        );\\n        accessControl[section][account].canSuspend = canSuspend;\\n        accessControl[section][account].canResume = canResume;\\n        emit AccessControlUpdated(section, account, canSuspend, canResume);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event SystemSuspended(uint256 reason);\\n    event SystemResumed(uint256 reason);\\n\\n    event IssuanceSuspended(uint256 reason);\\n    event IssuanceResumed(uint256 reason);\\n\\n    event AccessControlUpdated(bytes32 indexed section, address indexed account, bool canSuspend, bool canResume);\\n}\\n\"\r\n    },\r\n    \"/contracts/OwnedwManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ncontract OwnedwManager {\\n    address public owner;\\n    address public manager;\\n\\n    address public nominatedOwner;\\n\\n    constructor(address _owner, address _manager) {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        manager = _manager;\\n        emit OwnerChanged(address(0), _owner);\\n        emit ManagerChanged(_manager);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyManager {\\n        _onlyManager();\\n        _;\\n    }\\n    \\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    function _onlyManager() private view {\\n        require(msg.sender == manager, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    function setManager(address _manager) external onlyOwner {\\n        manager = _manager;\\n        emit ManagerChanged(_manager);\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n    event ManagerChanged(address newManager);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"section\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canSuspend\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canResume\",\"type\":\"bool\"}],\"name\":\"AccessControlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"IssuanceResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"IssuanceSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"SystemResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"SystemSuspended\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SECTION_ISSUANCE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECTION_SYSTEM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSPENSION_REASON_UPGRADE\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canSuspend\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canResume\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSystemUpgrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceSuspension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"suspended\",\"type\":\"bool\"},{\"internalType\":\"uint248\",\"name\":\"reason\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireIssuanceActive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireSystemActive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"suspendIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"suspendSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemSuspension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"suspended\",\"type\":\"bool\"},{\"internalType\":\"uint248\",\"name\":\"reason\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"section\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canSuspend\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canResume\",\"type\":\"bool\"}],\"name\":\"updateAccessControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"sections\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"canSuspends\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"canResumes\",\"type\":\"bool[]\"}],\"name\":\"updateAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SystemStatus", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d02522de79947c76add6d324f27f816b70230e85", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}