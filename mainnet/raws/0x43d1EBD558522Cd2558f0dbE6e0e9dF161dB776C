{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gaggle.sol\": {\r\n      \"content\": \"/*\\n\\n\\n\\n\\n\\n \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584            \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \\n\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u258c          \u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\\n\u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \u2590\u2591\u258c          \u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \\n\u2590\u2591\u258c          \u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c          \u2590\u2591\u258c          \u2590\u2591\u258c          \u2590\u2591\u258c          \\n\u2590\u2591\u258c \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2591\u258c\u2590\u2591\u258c \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2590\u2591\u258c \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2590\u2591\u258c          \u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \\n\u2590\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u258c          \u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\\n\u2590\u2591\u258c \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u258c \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u258c \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2591\u258c\u2590\u2591\u258c          \u2590\u2591\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \\n\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u258c          \u2590\u2591\u258c          \\n\u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2591\u258c\u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2591\u258c\u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2590\u2591\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \\n\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u258c       \u2590\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\u2590\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u258c\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract GAGGLE is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    address public tokenPairAddress;\\n    address public teamAddress = 0x02D7E6bC55Bcf210bc7f79F4e15F7E439FF2425d;\\n    address public treasuryAddress = 0x1534854fE07d619ce3A2c4c5c03eb35A49A9E652;\\n    address public psWallet = 0x5Fcb81060feeA737902033F0411AcFd0aCE1448C;\\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\\n    address public gaggle = 0x8Ff3c88B369AC869DA3b6f4eC510A37E2E848ce8;\\n    address public cso = 0x14d21E48FEC43Cd683eE607c61C13ebB4151EFAB;\\n    address public coc = 0xf27d0d5Bd9C750F0CC147d8f4760101970D30cc9;\\n    address public cko = 0xBa4bB65000F555A6E3f78196Aa73cC374D18DEc1;\\n    address public vex = 0x99990Ab0E073Ecf018ad5d6C4D1D0815Aa3D33A1;\\n    address public cmo = 0xed564EF21C2A46FcA92fB9fF29cb5b53a10C90B0;\\n\\n    mapping(address => uint256) private _reserveTokenBalance;\\n    mapping(address => uint256) private _circulatingTokenBalance;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    // The highest possible number.\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant _totalSupply = 10000000000 * 10**9;\\n    uint256 private _totalReserve = (MAX - (MAX % _totalSupply));\\n    uint256 private _transactionFeeTotal;\\n    uint256 public _gag = 5;\\n\\n    bool private initialSellTaxActive = false;\\n    bool private initialSellTaxSet = false;\\n    bool public waxing = false;\\n\\n    uint8 private _decimals = 9;\\n    string private _symbol = \\\"$GAG\\\";\\n    string private _name = \\\"Gaggle\\\";\\n\\n    struct ReserveValues {\\n        uint256 reserveAmount;\\n        uint256 reserveTransferAmountMarketing;\\n        uint256 reserveTransferAmount;\\n        uint256 reserveTransferAmountTeam;\\n        uint256 reserveTransferAmountBurnEm;\\n    }\\n\\n    struct TransactionValues {\\n        uint256 transactionFee;\\n        uint256 transferAmount;\\n        uint256 netTransferAmount;\\n        uint256 marketingFee;\\n        uint256 teamTax;\\n        uint256 burnEm;\\n    }\\n\\n    ////////////////////////////////////\\n    //  ____  ____   ____  ______\\n    // |    ||    \\\\ |    ||      |\\n    //  |  | |  _  | |  | |      |\\n    //  |  | |  |  | |  | |_|  |_|\\n    //  |  | |  |  | |  |   |  |\\n    //  |  | |  |  | |  |   |  |\\n    // |____||__|__||____|  |__|\\n    //\\n    ////////////////////////////////////\\n\\n    constructor() {\\n        uint256 blackHole = _totalSupply;\\n        uint256 _presale = blackHole.mul(23).div(100);\\n        uint256 _lp = blackHole.mul(30).div(100);\\n        uint256 _treasury = blackHole.mul(28).div(100);\\n        uint256 _gaggle = blackHole.mul(36).div(1000);\\n        uint256 _cmo = blackHole.mul(10).div(1000);\\n\\n        uint256 rate = getRate();\\n\\n      \\n        _reserveTokenBalance[_msgSender()] = _presale.mul(rate) + _lp.mul(rate);\\n        _reserveTokenBalance[treasuryAddress] = _treasury.mul(rate);\\n        _reserveTokenBalance[vex] = _gaggle.mul(rate);\\n        _reserveTokenBalance[cso] = _gaggle.mul(rate);\\n        _reserveTokenBalance[coc] = _gaggle.mul(rate);\\n        _reserveTokenBalance[cko] = _gaggle.mul(rate);\\n        _reserveTokenBalance[gaggle] = _gaggle.mul(rate);\\n        _reserveTokenBalance[cmo] = _cmo.mul(rate);\\n\\n       \\n        emit Transfer(address(0), _msgSender(), _presale);\\n        emit Transfer(address(0), _msgSender(), _lp);\\n        emit Transfer(address(0), treasuryAddress, _treasury);\\n        emit Transfer(address(0), vex, _gaggle);\\n        emit Transfer(address(0), cso, _gaggle);\\n        emit Transfer(address(0), coc, _gaggle);\\n        emit Transfer(address(0), cko, _gaggle);\\n        emit Transfer(address(0), gaggle, _gaggle);\\n        emit Transfer(address(0), cmo, _cmo);\\n    }\\n\\n    ///////////////////////////////////////\\n    //           _   _\\n    //          | | | |\\n    //  ___  ___| |_| |_ ___ _ __ ___\\n    // / __|/ _ \\\\ __| __/ _ \\\\ '__/ __|\\n    // \\\\__ \\\\  __/ |_| ||  __/ |  \\\\__ \\\\\\n    // |___/\\\\___|\\\\__|\\\\__\\\\___|_|  |___/\\n    //\\n    //\\n    ///////////////////////////////////////\\n\\n    function deathTaxOn() public onlyOwner {\\n        initialSellTaxActive = true;\\n    }\\n\\n    function deathTaxOff() public onlyOwner {\\n        initialSellTaxActive = false;\\n    }\\n\\n    function setTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    function setpsWallet(address _psWallet) public onlyOwner {\\n        psWallet = _psWallet;\\n    }\\n\\n    function setCmoAddress(address _cmoAddress) public onlyOwner {\\n        cmo = _cmoAddress;\\n    }\\n\\n    function setVexAddress(address _vexAddress) public onlyOwner {\\n        vex = _vexAddress;\\n    }\\n\\n    function setCsoAddress(address _csoAddress) public onlyOwner {\\n        cso = _csoAddress;\\n    }\\n\\n    function setCocAddress(address _cocAddress) public onlyOwner {\\n        coc = _cocAddress;\\n    }\\n\\n    function setCkoAddress(address _ckoAddress) public onlyOwner {\\n        cko = _ckoAddress;\\n    }\\n\\n    function setGaggleAddress(address _gaggleAddress) public onlyOwner {\\n        gaggle = _gaggleAddress;\\n    }\\n\\n    function setGag(uint256 newGag) public onlyOwner {\\n        _gag = newGag;\\n    }\\n\\n    function setTokenPairAddress(address _tokenPairAddress) public onlyOwner {\\n        tokenPairAddress = _tokenPairAddress;\\n    }\\n    function setWaxing (bool _waxing) public onlyOwner {\\n        waxing = _waxing;\\n    }\\n    \\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _circulatingTokenBalance[account];\\n        return tokenBalanceFromReserveAmount(_reserveTokenBalance[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    function isExcluded(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _transactionFeeTotal;\\n    }\\n\\n    function distributeToAllHolders(uint256 transferAmount) public {\\n        address sender = _msgSender();\\n        require(\\n            !_isExcluded[sender],\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (, ReserveValues memory reserveValues, ) = _getValues(transferAmount);\\n        _reserveTokenBalance[sender] = _reserveTokenBalance[sender].sub(\\n            reserveValues.reserveAmount\\n        );\\n        _totalReserve = _totalReserve.sub(reserveValues.reserveAmount);\\n        _transactionFeeTotal = _transactionFeeTotal.add(transferAmount);\\n    }\\n\\n    function reserveBalanceFromTokenAmount(\\n        uint256 transferAmount,\\n        bool deductTransferReserveFee\\n    ) public view returns (uint256) {\\n        (, ReserveValues memory reserveValues, ) = _getValues(transferAmount);\\n        require(\\n            transferAmount <= _totalSupply,\\n            \\\"Amount must be less than supply\\\"\\n        );\\n        if (!deductTransferReserveFee) {\\n            return reserveValues.reserveAmount;\\n        } else {\\n            return reserveValues.reserveTransferAmount;\\n        }\\n    }\\n\\n    function tokenBalanceFromReserveAmount(uint256 reserveAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            reserveAmount <= _totalReserve,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = getRate();\\n        return reserveAmount.div(currentRate);\\n    }\\n\\n    function excludeAccount(address account) external onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if (_reserveTokenBalance[account] > 0) {\\n            _circulatingTokenBalance[account] = tokenBalanceFromReserveAmount(\\n                _reserveTokenBalance[account]\\n            );\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeAccount(address account) external onlyOwner {\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _circulatingTokenBalance[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function applyExternalTransactionTax(\\n        ReserveValues memory reserveValues,\\n        TransactionValues memory transactionValues,\\n        address sender\\n    ) private {\\n        _reserveTokenBalance[teamAddress] = _reserveTokenBalance[teamAddress]\\n            .add(reserveValues.reserveTransferAmountTeam);\\n        _reserveTokenBalance[treasuryAddress] = _reserveTokenBalance[\\n            treasuryAddress\\n        ].add(reserveValues.reserveTransferAmountMarketing);\\n        _reserveTokenBalance[burnAddress] = _reserveTokenBalance[burnAddress]\\n            .add(reserveValues.reserveTransferAmountBurnEm);\\n\\n        emit Transfer(sender, teamAddress, transactionValues.teamTax);\\n        emit Transfer(sender, treasuryAddress, transactionValues.teamTax);\\n        emit Transfer(sender, burnAddress, transactionValues.burnEm);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferStandard(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n    }\\n\\n    /////////////////////////////////////////////////////  :) --->\\n    //   _____      ____ _ _ __  _ __   ___ _ __ ___\\n    //  / __\\\\ \\\\ /\\\\ / / _` | '_ \\\\| '_ \\\\ / _ \\\\ '__/ __|\\n    //  \\\\__ \\\\\\\\ V  V / (_| | |_) | |_) |  __/ |  \\\\__ \\\\\\n    //  |___/ \\\\_/\\\\_/ \\\\__,_| .__/| .__/ \\\\___|_|  |___/\\n    //                    | |   | |\\n    //                    |_|   |_|\\n    //////////////////////////////////////////////////////   :-O  <-----\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 transferAmount\\n    ) private {\\n        (\\n            TransactionValues memory transactionValues,\\n            ReserveValues memory reserveValues,\\n\\n        ) = _getValues(transferAmount);\\n        _reserveTokenBalance[sender] = _reserveTokenBalance[sender].sub(\\n            reserveValues.reserveAmount\\n        );\\n        _reserveTokenBalance[recipient] = _reserveTokenBalance[recipient].add(\\n            reserveValues.reserveTransferAmount\\n        );\\n        emit Transfer(sender, recipient, transactionValues.netTransferAmount);\\n        if (waxing == true) {\\n            applyExternalTransactionTax(\\n                reserveValues,\\n                transactionValues,\\n                sender\\n            );\\n        }\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 transferAmount\\n    ) private {\\n        (\\n            TransactionValues memory transactionValues,\\n            ReserveValues memory reserveValues,\\n\\n        ) = _getValues(transferAmount);\\n\\n        _reserveTokenBalance[sender] = _reserveTokenBalance[sender].sub(\\n            reserveValues.reserveAmount\\n        );\\n\\n        if (recipient == tokenPairAddress) {\\n            _reserveTokenBalance[recipient] = _reserveTokenBalance[recipient]\\n                .add(reserveValues.reserveAmount);\\n            _circulatingTokenBalance[recipient] = _circulatingTokenBalance[\\n                recipient\\n            ].add(transferAmount);\\n\\n            emit Transfer(sender, recipient, transferAmount);\\n        } else {\\n            _reserveTokenBalance[recipient] = _reserveTokenBalance[recipient]\\n                .add(reserveValues.reserveTransferAmount);\\n            _circulatingTokenBalance[recipient] = _circulatingTokenBalance[\\n                recipient\\n            ].add(transactionValues.netTransferAmount);\\n            emit Transfer(\\n                sender,\\n                recipient,\\n                transactionValues.netTransferAmount\\n            );\\n            if (waxing == true) {\\n                applyExternalTransactionTax(\\n                    reserveValues,\\n                    transactionValues,\\n                    sender\\n                );\\n            }\\n        }\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 transferAmount\\n    ) private {\\n        (\\n            TransactionValues memory transactionValues,\\n            ReserveValues memory reserveValues,\\n\\n        ) = _getValues(transferAmount);\\n        _circulatingTokenBalance[sender] = _circulatingTokenBalance[sender].sub(\\n            transferAmount\\n        );\\n        _reserveTokenBalance[sender] = _reserveTokenBalance[sender].sub(\\n            reserveValues.reserveAmount\\n        );\\n\\n        if (!initialSellTaxActive) {\\n            _reserveTokenBalance[recipient] = _reserveTokenBalance[recipient]\\n                .add(reserveValues.reserveTransferAmount);\\n            emit Transfer(\\n                sender,\\n                recipient,\\n                transactionValues.netTransferAmount\\n            );\\n            if (waxing == true) {\\n                applyExternalTransactionTax(\\n                    reserveValues,\\n                    transactionValues,\\n                    sender\\n                );\\n            }\\n        } else {\\n            /////////////////////////////////////\\n            //  | |__  ___| |_   / _|_  _| |__\\n            //  | '_ \\\\/ _ \\\\  _| |  _| || | / /\\n            //  |_.__/\\\\___/\\\\__| |_|  \\\\_,_|_\\\\_\\\\\\n            ////////////////////////////////////\\n\\n            // this is where we pump one in the bots!!  ///\\n            _reserveTokenBalance[recipient] = _reserveTokenBalance[recipient]\\n                .add(reserveValues.reserveAmount.div(10));\\n            emit Transfer(sender, recipient, transferAmount.div(10));\\n        }\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 transferAmount\\n    ) private {\\n        (\\n            TransactionValues memory transactionValues,\\n            ReserveValues memory reserveValues,\\n\\n        ) = _getValues(transferAmount);\\n        _circulatingTokenBalance[sender] = _circulatingTokenBalance[sender].sub(\\n            transferAmount\\n        );\\n        _reserveTokenBalance[sender] = _reserveTokenBalance[sender].sub(\\n            reserveValues.reserveAmount\\n        );\\n        _reserveTokenBalance[recipient] = _reserveTokenBalance[recipient].add(\\n            reserveValues.reserveTransferAmount\\n        );\\n        _circulatingTokenBalance[recipient] = _circulatingTokenBalance[\\n            recipient\\n        ].add(transactionValues.netTransferAmount);\\n\\n        emit Transfer(sender, recipient, transactionValues.netTransferAmount);\\n        if (waxing == true) {\\n            applyExternalTransactionTax(\\n                reserveValues,\\n                transactionValues,\\n                sender\\n            );\\n        }\\n    }\\n\\n    function _getValues(uint256 transferAmount)\\n        private\\n        view\\n        returns (\\n            TransactionValues memory,\\n            ReserveValues memory,\\n            uint256\\n        )\\n    {\\n        TransactionValues memory transactionValues = _getTValues(\\n            transferAmount\\n        );\\n        uint256 currentRate = getRate();\\n        ReserveValues memory reserveValues = _getRValues(\\n            transferAmount,\\n            transactionValues,\\n            currentRate\\n        );\\n\\n        return (transactionValues, reserveValues, currentRate);\\n    }\\n\\n    function _getTValues(uint256 transferAmount)\\n        private\\n        view\\n        returns (TransactionValues memory)\\n    {\\n        TransactionValues memory transactionValues;\\n\\n        transactionValues.transactionFee = transferAmount.mul(_gag).div(100);\\n\\n        transactionValues.teamTax = transferAmount.mul(_gag).div(100);\\n\\n        transactionValues.netTransferAmount = transferAmount\\n            .sub(transactionValues.transactionFee)\\n            .sub(transactionValues.teamTax)\\n            .sub(transactionValues.burnEm);\\n\\n        return transactionValues;\\n    }\\n\\n    function _getRValues(\\n        uint256 transferAmount,\\n        TransactionValues memory transactionValues,\\n        uint256 currentRate\\n    ) private pure returns (ReserveValues memory) {\\n        ReserveValues memory reserveValues;\\n        reserveValues.reserveAmount = transferAmount.mul(currentRate);\\n        reserveValues.reserveTransferAmountMarketing = transactionValues\\n            .transactionFee\\n            .mul(currentRate);\\n        reserveValues.reserveTransferAmountTeam = transactionValues.teamTax.mul(\\n            currentRate\\n        );\\n        reserveValues.reserveTransferAmountBurnEm = transactionValues\\n            .burnEm\\n            .mul(currentRate);\\n\\n        reserveValues.reserveTransferAmount = reserveValues\\n            .reserveAmount\\n            .sub(reserveValues.reserveTransferAmountMarketing)\\n            .sub(reserveValues.reserveTransferAmountTeam)\\n            .sub(reserveValues.reserveTransferAmountBurnEm);\\n\\n        return reserveValues;\\n    }\\n\\n    function getRate() public view returns (uint256) {\\n        (uint256 reserveSupply, uint256 totalTokenSupply) = getCurrentSupply();\\n        return reserveSupply.div(totalTokenSupply);\\n    }\\n\\n    function getCurrentSupply() public view returns (uint256, uint256) {\\n        uint256 reserveSupply = _totalReserve;\\n        uint256 totalTokenSupply = _totalSupply;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _reserveTokenBalance[_excluded[i]] > reserveSupply ||\\n                _circulatingTokenBalance[_excluded[i]] > totalTokenSupply\\n            ) return (_totalReserve, _totalSupply);\\n            reserveSupply = reserveSupply.sub(\\n                _reserveTokenBalance[_excluded[i]]\\n            );\\n            totalTokenSupply = totalTokenSupply.sub(\\n                _circulatingTokenBalance[_excluded[i]]\\n            );\\n        }\\n        if (reserveSupply < _totalReserve.div(_totalSupply))\\n            return (_totalReserve, _totalSupply);\\n        return (reserveSupply, totalTokenSupply);\\n    }\\n}\\n\\n// ___  __ ____ ___  ___\\n// \\\\  \\\\/ // __ \\\\\\\\  \\\\/  /\\n//  \\\\   /\\\\  ___/ >    <\\n//   \\\\_/  \\\\___  >__/\\\\_ \\\\\\n//            \\\\/      \\\\/\\n//\\n/// vexcooler.eth /// anonX\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n\\n\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function totalSupply() external view returns (uint256);\\n  function decimals() external view returns (uint8);\\n  function symbol() external view returns (string memory);\\n  function name() external view returns (string memory);\\n  function getOwner() external view returns (address);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_gag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cko\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cmo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cso\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deathTaxOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deathTaxOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"distributeToAllHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaggle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferReserveFee\",\"type\":\"bool\"}],\"name\":\"reserveBalanceFromTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ckoAddress\",\"type\":\"address\"}],\"name\":\"setCkoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cmoAddress\",\"type\":\"address\"}],\"name\":\"setCmoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cocAddress\",\"type\":\"address\"}],\"name\":\"setCocAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_csoAddress\",\"type\":\"address\"}],\"name\":\"setCsoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGag\",\"type\":\"uint256\"}],\"name\":\"setGag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaggleAddress\",\"type\":\"address\"}],\"name\":\"setGaggleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPairAddress\",\"type\":\"address\"}],\"name\":\"setTokenPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vexAddress\",\"type\":\"address\"}],\"name\":\"setVexAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_waxing\",\"type\":\"bool\"}],\"name\":\"setWaxing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_psWallet\",\"type\":\"address\"}],\"name\":\"setpsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"}],\"name\":\"tokenBalanceFromReserveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waxing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GAGGLE", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}