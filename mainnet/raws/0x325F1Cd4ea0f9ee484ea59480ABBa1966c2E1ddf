{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"NFTSeller.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.14;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IWithBalance.sol\\\";\\n\\n/// @title A Seller Contract for selling single NFTs (modified contract of Avo Labs GmbH)\\n/// @notice This contract can be used for selling any NFTs\\ncontract NFTSeller is Ownable {\\n    address[] public whitelistedPassCollections; //Only owners of tokens from any of these collections can buy if is onlyWhitelisted\\n    mapping(address => mapping(uint256 => Sale)) public nftContractAuctions; // variable name is the same as in NFTAuction\\n    mapping(address => uint256) failedTransferCredits;\\n    //Each Sale is unique to each NFT (contract + id pairing).\\n    struct Sale {\\n        //map token ID to\\n        uint64 auctionStart; // name is the same as in NFTAuction\\n        uint64 auctionEnd; // name is the same as in NFTAuction\\n        uint128 buyNowPrice;\\n        address feeRecipient;\\n        bool onlyWhitelisted; // if true, than only owners of whitelistedPassCollections can make bids\\n    }\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551           EVENTS            \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    event NftAuctionCreated(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId,\\n        uint128 buyNowPrice,\\n        uint64 auctionStart,\\n        uint64 auctionEnd,\\n        address feeRecipient,\\n        bool onlyWhitelisted\\n    );\\n\\n    event NFTTransferredAndSellerPaid(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId,\\n        uint128 nftHighestBid,\\n        address nftHighestBidder\\n    );\\n\\n    event AuctionWithdrawn(\\n        address indexed nftContractAddress,\\n        uint256 indexed tokenId\\n    );\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END             \u2551\\n      \u2551            EVENTS           \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551          MODIFIERS          \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    modifier needWhitelistedToken(address _nftContractAddress, uint256 _tokenId) {\\n        if (nftContractAuctions[_nftContractAddress][_tokenId].onlyWhitelisted) {\\n            bool isWhitelisted;\\n            for (uint256 i = 0; i < whitelistedPassCollections.length; i++) {\\n                if(IWithBalance(whitelistedPassCollections[i]).balanceOf(msg.sender) > 0) {\\n                    isWhitelisted = true;\\n                    break;\\n                }\\n            }\\n            require(isWhitelisted, \\\"Sender has no whitelisted NFTs\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier saleOngoing(address _nftContractAddress, uint256 _tokenId) {\\n        require(\\n            _isSaleStarted(_nftContractAddress, _tokenId),\\n            \\\"Sale has not started\\\"\\n        );\\n        require(\\n            _isSaleOngoing(_nftContractAddress, _tokenId),\\n            \\\"Sale has ended\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier ethAmountMeetsBuyRequirements(\\n        address _nftContractAddress,\\n        uint256 _tokenId\\n    ) {\\n        require(\\n            msg.value >= nftContractAuctions[_nftContractAddress][_tokenId].buyNowPrice,\\n            \\\"Not enough funds to buy NFT\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Cannot specify 0 address\\\");\\n        _;\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END             \u2551\\n      \u2551          MODIFIERS          \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n    // constructor\\n    constructor(address[] memory _whitelistedPassCollectionsAddresses) {\\n        uint256 collectionsCount = _whitelistedPassCollectionsAddresses.length;\\n        for (uint256 i = 0; i < collectionsCount; i++) {\\n            whitelistedPassCollections.push(_whitelistedPassCollectionsAddresses[i]);\\n        }\\n    }\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551     WHITELIST FUNCTIONS      \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /*\\n     * Add whitelisted pass collection.\\n     */\\n    function addWhitelistedCollection(address _collectionContractAddress)\\n    external\\n    onlyOwner\\n    {\\n        whitelistedPassCollections.push(_collectionContractAddress);\\n    }\\n\\n    /*\\n     * Remove whitelisted pass collection by index.\\n     */\\n    function removeWhitelistedCollection(uint256 index)\\n    external\\n    onlyOwner\\n    {\\n        whitelistedPassCollections[index] = whitelistedPassCollections[whitelistedPassCollections.length - 1];\\n        whitelistedPassCollections.pop();\\n    }\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551     WHITELIST FUNCTIONS      \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551     SALE CHECK FUNCTIONS     \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    function _isSaleStarted(address _nftContractAddress, uint256 _tokenId)\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        return (block.timestamp >= nftContractAuctions[_nftContractAddress][_tokenId].auctionStart);\\n    }\\n\\n    function _isSaleOngoing(address _nftContractAddress, uint256 _tokenId)\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        uint64 auctionEndTimestamp = nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd;\\n        //if the auctionEnd is set to 0, the sale is on-going and doesn't have specified end.\\n        return (auctionEndTimestamp == 0 || block.timestamp < auctionEndTimestamp);\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551     SALE CHECK FUNCTIONS     \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551         SALE CREATION        \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    function createNewNftAuctions(\\n        address _nftContractAddress,\\n        uint256[] memory _tokenIds,\\n        uint64 _auctionStart,\\n        uint64 _auctionEnd,\\n        uint128 _buyNowPrice,\\n        address _feeRecipient,\\n        bool _onlyWhitelisted\\n    )\\n    external\\n    onlyOwner\\n    notZeroAddress(_feeRecipient)\\n    {\\n        require(_auctionEnd >= _auctionStart || _auctionEnd == 0, \\\"Sale end must be after the start\\\");\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(\\n                nftContractAuctions[_nftContractAddress][_tokenId].feeRecipient == address(0),\\n                \\\"Sale is already created\\\"\\n            );\\n\\n            Sale memory sale; // creating the sale\\n            sale.auctionStart = _auctionStart;\\n            sale.auctionEnd = _auctionEnd;\\n            sale.buyNowPrice = _buyNowPrice;\\n            sale.feeRecipient = _feeRecipient;\\n            sale.onlyWhitelisted = _onlyWhitelisted;\\n\\n            nftContractAuctions[_nftContractAddress][_tokenId] = sale;\\n\\n            // Sending the NFT to this contract\\n            if (IERC721(_nftContractAddress).ownerOf(_tokenId) == msg.sender) {\\n                IERC721(_nftContractAddress).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _tokenId\\n                );\\n            }\\n            require(\\n                IERC721(_nftContractAddress).ownerOf(_tokenId) == address(this),\\n                \\\"NFT transfer failed\\\"\\n            );\\n\\n            emit NftAuctionCreated(\\n                _nftContractAddress,\\n                _tokenId,\\n                _buyNowPrice,\\n                _auctionStart,\\n                _auctionEnd,\\n                _feeRecipient,\\n                _onlyWhitelisted\\n            );\\n        }\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551         SALE CREATION        \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551        BID FUNCTIONS        \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n\\n    /********************************************************************\\n     *                          Make bids with ETH.                     *\\n     ********************************************************************/\\n\\n    function makeBid( // function name is the same as in NFTAuction\\n        address _nftContractAddress,\\n        uint256 _tokenId\\n    )\\n    external\\n    payable\\n    saleOngoing(_nftContractAddress, _tokenId)\\n    needWhitelistedToken(\\n        _nftContractAddress,\\n        _tokenId\\n    )\\n    ethAmountMeetsBuyRequirements(\\n        _nftContractAddress,\\n        _tokenId\\n    )\\n    {\\n        require(msg.sender == tx.origin, \\\"Sender must be a wallet\\\");\\n        address _feeRecipient = nftContractAuctions[_nftContractAddress][_tokenId].feeRecipient;\\n        require(_feeRecipient != address(0), \\\"Sale does not exist\\\");\\n\\n        // attempt to send the funds to the recipient\\n        (bool success, ) = payable(_feeRecipient).call{ value: msg.value, gas: 20000 }(\\\"\\\");\\n        // if it failed, update their credit balance so they can pull it later\\n        if (!success) failedTransferCredits[_feeRecipient] = failedTransferCredits[_feeRecipient] + msg.value;\\n\\n        IERC721(_nftContractAddress).transferFrom(address(this), msg.sender, _tokenId);\\n\\n        delete nftContractAuctions[_nftContractAddress][_tokenId];\\n\\n        emit NFTTransferredAndSellerPaid(_nftContractAddress, _tokenId, uint128(msg.value), msg.sender);\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551        BID FUNCTIONS         \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551           WITHDRAW           \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    function withdrawAuctions(address _nftContractAddress, uint256[] memory _tokenIds)\\n    external\\n    onlyOwner\\n    {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            delete nftContractAuctions[_nftContractAddress][_tokenId];\\n            IERC721(_nftContractAddress).transferFrom(address(this), owner(), _tokenId);\\n            emit AuctionWithdrawn(_nftContractAddress, _tokenId);\\n        }\\n    }\\n\\n    /*\\n     * If the transfer of a bid has failed, allow to reclaim amount later.\\n     */\\n    function withdrawAllFailedCreditsOf(address recipient) external {\\n        uint256 amount = failedTransferCredits[recipient];\\n\\n        require(amount != 0, \\\"no credits to withdraw\\\");\\n\\n        failedTransferCredits[recipient] = 0;\\n\\n        (bool successfulWithdraw, ) = recipient.call{\\n        value: amount,\\n        gas: 20000\\n        }(\\\"\\\");\\n        require(successfulWithdraw, \\\"withdraw failed\\\");\\n    }\\n\\n    /**********************************/\\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\\n      \u2551             END              \u2551\\n      \u2551           WITHDRAW           \u2551\\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\\n    /**********************************/\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IWithBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWithBalance {\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"NFTSeller.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedPassCollectionsAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nftHighestBid\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"}],\"name\":\"NFTTransferredAndSellerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"buyNowPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionStart\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onlyWhitelisted\",\"type\":\"bool\"}],\"name\":\"NftAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionContractAddress\",\"type\":\"address\"}],\"name\":\"addWhitelistedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"_auctionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"_buyNowPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_onlyWhitelisted\",\"type\":\"bool\"}],\"name\":\"createNewNftAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractAuctions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"auctionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"buyNowPrice\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onlyWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeWhitelistedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedPassCollections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllFailedCreditsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTSeller", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}