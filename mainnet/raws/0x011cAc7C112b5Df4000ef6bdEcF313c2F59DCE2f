{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AvoFrens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/* \\r\\n                 __  _  _  _____    ____  ____  ____  _  _  ___ \\r\\n                /__\\\\( \\\\/ )(  _  )  ( ___)(  _ \\\\( ___)( \\\\( )/ __)\\r\\n               /(__)\\\\\\\\  /  )(_)(    )__)  )   / )__)  )  ( \\\\__ \\\\\\r\\n              (__)(__)\\\\/  (_____)  (__)  (_)\\\\_)(____)(_)\\\\_)(___/\\r\\n\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&#################&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@&&########################&&@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@&############################&@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@&##############################&@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@&%&&&&&&&%%#############%&&&&%&#####&@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@&%###&########&########%%#########&#####&@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@&####&########&#########&#########&###&&@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&%#####%%%&&&&&/(((((&&@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@&&(((((,,,,,,,,,,,,,,,,,,,,,,,,((((*&&*@@@@@@@@@@@@@@@@@@@@\\r\\n@@@&&@@@@@@@@@@@@@@@@&&((((,,,,,,%%%,,,,,,,,%%%%,,,,,(((**&&**@@@@@@@@@@@@@@@@@@\\r\\n@&&&&&&&@@@@@@@@@@@@&&#((((,,,,,%%%%%,,,,,,,,,,%%,,,,,((((&**@@@@@@@@@@@@@@@@@@@\\r\\n@@@&&@@@@@@@@@@@@@@@&&((((/,,,,,,,,,,,,,,,,,,,,,,,,,,,((((&&&@@@@@@@@@@@@@@@@@@@\\r\\n@@@&&@@@@@@@@@@@@@@&&&((((,,,,,,,,,%%,,,,,,,%%,,,,,,,,,((((&&@@@@@@@@@@@@@@@@@@@\\r\\n@@@&&&@@@@@@@@@@@@@&&((((/,,,,,,,,,,,%%%%%%%,,,,,,,,,,,((((&&&@@@@@@@@@@@@@@@@@@\\r\\n@@@@&&@@@@@@@@@@@@&&(((((,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,((((&&@@@@@@@@@@@@@@@@@@\\r\\n@@@@@&&&&@@@@@@@@&&#((((,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(((((&&&&@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@&&&&&&&%((((,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,((((#&&@@&&&&&@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@&&(((((,,,,,,,,,,,,,,,&&&&&&%,,,,,,,,,,,,,,(((((&&@@@@@@&&&@@@@@@\\r\\n@@@@@@@@@@@@@@&&(((((,,,,,,,,,,,&&&&&&&&&&&&&&&&&,,,,,,,,,,(((((&&@@@@@@@&&&@@@@\\r\\n@@@@@@@@@@@@@&&(((((,,,,,,,,,#&&&&&&&&&&&&&&&&&&&&&,,,,,,,,,(((((&&@@@@@@@&&&@@@\\r\\n@@@@@@@@@@@@&&#((((,,,,,,,,,&&&&&&&&&&&&&&&&&&&&&&&&&,,,,,,,,(((((&&@@@@@@@&&@@@\\r\\n@@@@@@@@@@@@&&(((((,,,,,,,,%&&&&&&&&&&&&&&&&&&&&&&&&&#,,,,,,,,(((((&&@@@@@@@&&@@\\r\\n@@@@@@@@@@@&&%((((,,,,,,,,(&&&&&&&&&&&&&&&&&&&&&&&&&&&,,,,,,,,,((((&&@@@@@@@&&&@\\r\\n@@@@@@@@@@@&&(((((,,,,,,,,,&&&&&&&&&&&&&&&&&&&&&&&&&&&,,,,,,,,,((((%&&@@@@&&&&&&\\r\\n@@@@@@@@@@@&&(((((,,,,,,,,,#&&&&&&&&&&&&&&&&&&&&&&&&&,,,,,,,,,,((((#&&@@@@&&&&@&\\r\\n@@@@@@@@@@@&&(((((*,,,,,,,,,#&&&&&&&&&&&&&&&&&&&&&&&,,,,,,,,,,,((((&&&@@@@@@@@@@\\r\\n@@@@@@@@@@@@&&(((((,,,,,,,,,,,#&&&&&&&&&&&&&&&&&&&,,,,,,,,,,,,(((((&&@@@@@@@@@@@\\r\\n@@@@@@@@@@@@&&&(((((,,,,,,,,,,,,,##&&&&&&&&&&&#,,,,,,,,,,,,,*(((((&&@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@&&#(((((,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,/(((((%&&@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@&&&((((((,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(((((((&&&@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@&&&&(((((((((/,,,,,,,,,,,,,,,,,/(((((((((%&&&@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@&&&&&#((((((((((((((((((((((((((((&&&&&@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&#((((((((#&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport './ERC721.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\r\\n\\r\\ncontract AvoFrens is ERC721, ReentrancyGuard, Ownable {\\r\\n  using Strings for uint256;\\r\\n\\r\\n  uint256 private constant MAX_TOKENS_PURCHASE = 16;\\r\\n  uint256 private constant MAX_TOKENS_PRESALE = 16;\\r\\n  uint256 private constant TOKENS_FOR_ONE_FREE = 8;\\r\\n  uint256 private constant INITIAL_TOKENS = 6;\\r\\n\\r\\n  // Maximum amount of tokens available\\r\\n  uint256 public maxTokens = 10000;\\r\\n\\r\\n  // Amount of ETH required per mint\\r\\n  uint256 public price  = 75000000000000000; // 0.075 ETH;\\r\\n\\r\\n  // Contract to recieve ETH raised in sales\\r\\n  address public vault = 0x0Efa349d9A0b6b25651a1f1Bed9FeC5B0dc0F2F0;\\r\\n\\r\\n  // Control for public sale\\r\\n  bool public isRevealed = false;\\r\\n\\r\\n  // Control for public sale\\r\\n  bool public isActive = false;\\r\\n\\r\\n  // Control for claim process\\r\\n  bool public isClaimActive = false;\\r\\n\\r\\n  // Control for presale\\r\\n  bool public isPresaleActive = false;\\r\\n\\r\\n  // Used for verification that an address is included in claim process\\r\\n  bytes32 public claimMerkleRoot;\\r\\n\\r\\n  // Used for verification that an address is included in presale\\r\\n  bytes32 public presaleMerkleRoot;\\r\\n\\r\\n  // Reference to image and metadata storage\\r\\n  string private _baseTokenURI = \\\"https://www.avofrens.com/nft/prereveal/\\\";\\r\\n\\r\\n  // Storage of addresses that have minted with the `claim()` function\\r\\n  mapping(address => bool) private claimParticipants;\\r\\n\\r\\n  // Storage of addresses that have minted with the `presale()` function\\r\\n  mapping(address => bool) private presaleParticipants;\\r\\n\\r\\n  // Constructor\\r\\n  constructor() ERC721(\\\"Avo Frens\\\", \\\"AVF\\\") {\\r\\n  }\\r\\n\\r\\n  // Override of `_baseURI()` that returns _baseTokenURI\\r\\n  function _baseURI() internal view virtual override returns (string memory) {\\r\\n    return _baseTokenURI;\\r\\n  }\\r\\n\\r\\n // Sets `_baseTokenURI` to be returned by `_baseURI()`\\r\\n  function setBaseURI(string memory baseURI) public onlyOwner {\\r\\n    _baseTokenURI = baseURI;\\r\\n  }\\r\\n\\r\\n  // Sets `isRevealed` to activate specific `tokenURI()`\\r\\n  function setRevealed(bool _isRevealed) external onlyOwner {\\r\\n    isRevealed = _isRevealed;\\r\\n  }\\r\\n\\r\\n  // Are the tokens revealed\\r\\n  function _revealed() internal view virtual override returns (bool) {\\r\\n    return isRevealed;\\r\\n  }\\r\\n\\r\\n  // Sets `isActive` to turn on/off minting in `mint()`\\r\\n  function setActive(bool _isActive) external onlyOwner {\\r\\n    isActive = _isActive;\\r\\n  }\\r\\n\\r\\n  // Sets `isClaimActive` to turn on/off minting in `claim()`\\r\\n  function setClaimActive(bool _isClaimActive) external onlyOwner {\\r\\n    isClaimActive = _isClaimActive;\\r\\n  }\\r\\n\\r\\n  // Sets `claimMerkleRoot` to be used in `presale()`\\r\\n  function setClaimMerkleRoot(bytes32 _claimMerkleRoot) external onlyOwner {\\r\\n    claimMerkleRoot = _claimMerkleRoot;\\r\\n  }\\r\\n\\r\\n  // Sets `isPresaleActive` to turn on/off minting in `presale()`\\r\\n  function setPresaleActive(bool _isPresaleActive) external onlyOwner {\\r\\n    isPresaleActive = _isPresaleActive;\\r\\n  }\\r\\n\\r\\n  // Sets `presaleMerkleRoot` to be used in `presale()`\\r\\n  function setPresaleMerkleRoot(bytes32 _presaleMerkleRoot) external onlyOwner {\\r\\n    presaleMerkleRoot = _presaleMerkleRoot;\\r\\n  }\\r\\n\\r\\n  // Sets `maxTokens`\\r\\n  function setMaxTokens(uint256 _maxTokens) public onlyOwner {\\r\\n    maxTokens = _maxTokens;\\r\\n  }\\r\\n\\r\\n  // Sets `price` to be used in `presale()` and `mint()`(called on deployment)\\r\\n  function setPrice(uint256 _price) public onlyOwner {\\r\\n    price = _price;\\r\\n  }\\r\\n\\r\\n  // Sets `vault` to recieve ETH from sales and used within `withdraw()`\\r\\n  function setVault(address _vault) external onlyOwner {\\r\\n    vault = _vault;\\r\\n  }\\r\\n\\r\\n  // Minting function used in the claim process (Max 1 per wallet)\\r\\n  function claim(bytes32[] calldata _merkleProof) external {\\r\\n    uint256 supply = totalSupply();\\r\\n    require(isClaimActive, 'Not Active');\\r\\n    require(supply < maxTokens, 'Supply Denied');\\r\\n    require(!claimParticipants[_msgSender()], 'Mint Already Claimed');\\r\\n\\r\\n    bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\\r\\n    require(MerkleProof.verify(_merkleProof, claimMerkleRoot, leaf), 'Proof Invalid');\\r\\n\\r\\n    _safeMint(_msgSender(), supply + 1);\\r\\n\\r\\n    claimParticipants[_msgSender()] = true;\\r\\n  }\\r\\n\\r\\n  // Minting function used in the presale\\r\\n  function presale(bytes32[] calldata _merkleProof, uint256 _amount) external payable {\\r\\n    uint256 supply = totalSupply();\\r\\n\\r\\n    require(isPresaleActive, 'Not Active');\\r\\n    require(_amount <= MAX_TOKENS_PRESALE, 'Amount Denied');\\r\\n    require(supply + _amount <= maxTokens, 'Supply Denied');\\r\\n    require(!presaleParticipants[_msgSender()], 'Presale Already Claimed');\\r\\n    require(msg.value >= price * _amount, 'Ether Amount Denied');\\r\\n\\r\\n    bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\\r\\n    require(MerkleProof.verify(_merkleProof, presaleMerkleRoot, leaf), 'Proof Invalid');\\r\\n\\r\\n    _amount = _amount + _amount / TOKENS_FOR_ONE_FREE;\\r\\n    for(uint256 i=1; i <= _amount; i++){\\r\\n      _safeMint(_msgSender(), supply + i );\\r\\n    }\\r\\n\\r\\n    presaleParticipants[_msgSender()] = true;\\r\\n  }\\r\\n\\r\\n  // Minting function used in the public sale\\r\\n  function mint(uint256 _amount) external payable {\\r\\n    uint256 supply = totalSupply();\\r\\n\\r\\n    require(isActive, 'Not Active');\\r\\n    require(_amount <= MAX_TOKENS_PURCHASE, 'Amount Denied');\\r\\n    require(supply + _amount <= maxTokens, 'Supply Denied');\\r\\n    require(msg.value >= price * _amount, 'Ether Amount Denied');\\r\\n    \\r\\n    _amount = _amount + _amount / TOKENS_FOR_ONE_FREE;\\r\\n    for(uint256 i=1; i <= _amount; i++){\\r\\n      _safeMint(_msgSender(), supply + i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Initial minting for owner\\r\\n  function initialMint() external onlyOwner {\\r\\n    uint256 supply = totalSupply();\\r\\n    for(uint256 i=1; i <= INITIAL_TOKENS; i++){\\r\\n      _safeMint(_msgSender(), supply + i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Send balance of contract to address referenced in `vault`\\r\\n  function withdrawToVault() external nonReentrant onlyOwner {\\r\\n    require(vault != address(0), 'Vault Invalid');\\r\\n    (bool success, ) = vault.call{value: address(this).balance}(\\\"\\\");\\r\\n    require(success, \\\"Failed to send to vault.\\\");\\r\\n  }\\r\\n\\r\\n  // Send amount to address referenced in `vault`\\r\\n  function withdrawAmtToVault(uint256 amount) external nonReentrant onlyOwner {\\r\\n    require(vault != address(0), 'Vault Invalid');\\r\\n    (bool success, ) = vault.call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Failed to send to vault.\\\");\\r\\n  }\\r\\n  \\r\\n  // Send balance of contract to owner wallet\\r\\n  function withdrawToOwner() external nonReentrant onlyOwner {\\r\\n    require(vault != address(0), 'Vault Invalid');\\r\\n    (bool success, ) = _msgSender().call{value: address(this).balance}(\\\"\\\");\\r\\n    require(success, \\\"Failed to send to vault.\\\");\\r\\n  }\\r\\n\\r\\n  // Send amount to address referenced in `vault`\\r\\n  function withdrawAmtToOwner(uint256 amount) external nonReentrant onlyOwner {\\r\\n    require(vault != address(0), 'Vault Invalid');\\r\\n    (bool success, ) = _msgSender().call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Failed to send to vault.\\\");\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n\\r\\n  address[] internal _owners;\\r\\n\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  // Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n  constructor(string memory name_, string memory symbol_) {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n  }\\r\\n\\r\\n  // See {IERC165-supportsInterface}.\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n    return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n\\r\\n  // See {IERC721-balanceOf}.\\r\\n  function balanceOf(address owner) public view virtual override returns (uint) {\\r\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n    uint count;\\r\\n    for(uint i; i < _owners.length; ++i){\\r\\n      if(owner == _owners[i]) ++count;\\r\\n    }\\r\\n    return count;\\r\\n  }\\r\\n\\r\\n\\r\\n  // See {IERC721-ownerOf}.\\r\\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n    require(tokenId >= 1, \\\"Token ID too low\\\");\\r\\n    require(tokenId <= totalSupply(), \\\"Token ID too high\\\");\\r\\n    address owner = _owners[tokenId-1];\\r\\n    require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n    return owner;\\r\\n  }\\r\\n\\r\\n  // See {IERC721Metadata-name}.\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  // See {IERC721Metadata-symbol}.\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  // Base URI for computing {tokenURI}.\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  // Are the tokens revealed\\r\\n  function _revealed() internal view virtual returns (bool) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // See {IERC721Metadata-tokenURI}.\\r\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n    string memory baseURI = _baseURI();\\r\\n    if(!_revealed()){\\r\\n      return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, \\\"prereveal.json\\\")) : \\\"\\\";\\r\\n    }else{\\r\\n      return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\")) : \\\"\\\";\\r\\n    }\\r\\n  }\\r\\n  // Returns totalSupply\\r\\n function totalSupply() public view virtual returns (uint256) {\\r\\n    return _owners.length;\\r\\n  }\\r\\n\\r\\n  // See {IERC721-approve}.\\r\\n  function approve(address to, uint256 tokenId) public virtual override {\\r\\n    address owner = ERC721.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n    require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \\\"ERC721: approve caller is not owner nor approved for all\\\");\\r\\n\\r\\n    _approve(to, tokenId);\\r\\n  }\\r\\n\\r\\n  // See {IERC721-getApproved}.\\r\\n  function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  // See {IERC721-setApprovalForAll}.\\r\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n    require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  // See {IERC721-isApprovedForAll}.\\r\\n  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n    /** @dev Opensea whitelisting */\\r\\n    if(operator == address(0xa5409ec958C83C3f309868babACA7c86DCB077c1)){\\r\\n        return true;\\r\\n    }\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n  // See {IERC721-transferFrom}.\\r\\n  function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  // See {IERC721-safeTransferFrom}.\\r\\n  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  // See {IERC721-safeTransferFrom}.\\r\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\r\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n    _safeTransfer(from, to, tokenId, _data);\\r\\n  }\\r\\n\\r\\n\\r\\n  // Safely transfers `tokenId` token from `from` to `to`.\\r\\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n  }\\r\\n\\r\\n  // Returns whether `tokenId` exists.\\r\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n    return tokenId >= 1 && tokenId <= _owners.length && _owners[tokenId-1] != address(0);\\r\\n  }\\r\\n\\r\\n  // Returns whether `spender` is allowed to manage `tokenId`.\\r\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n    require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n    address owner = ERC721.ownerOf(tokenId);\\r\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n  }\\r\\n\\r\\n  // Safely mints `tokenId` and transfers it to `to`.\\r\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n    _safeMint(to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  // Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter.\\r\\n  function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\r\\n    _mint(to, tokenId);\\r\\n    require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n  }\\r\\n\\r\\n  // Mints `tokenId` and transfers it to `to`.\\r\\n  function _mint(address to, uint256 tokenId) internal virtual {\\r\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n    _beforeTokenTransfer(address(0), to, tokenId);\\r\\n    _owners.push(to);\\r\\n\\r\\n    emit Transfer(address(0), to, tokenId);\\r\\n  }\\r\\n\\r\\n  // Destroys `tokenId`.\\r\\n  function _burn(uint256 tokenId) internal virtual {\\r\\n    address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n    _approve(address(0), tokenId);\\r\\n    _owners[tokenId-1] = address(0);\\r\\n\\r\\n    emit Transfer(owner, address(0), tokenId);\\r\\n  }\\r\\n\\r\\n  // Transfers `tokenId` from `from` to `to`. (No restrictions on sender)\\r\\n  function _transfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n    require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(from, to, tokenId);\\r\\n    _approve(address(0), tokenId);\\r\\n    _owners[tokenId-1] = to;\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  // Approve `to` to operate on `tokenId`\\r\\n  function _approve(address to, uint256 tokenId) internal virtual {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n  }\\r\\n\\r\\n  // Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver.onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n // Hook that is called before any token transfer.\\r\\n function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimActive\",\"type\":\"bool\"}],\"name\":\"setClaimActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setClaimMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPresaleActive\",\"type\":\"bool\"}],\"name\":\"setPresaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_presaleMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRevealed\",\"type\":\"bool\"}],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmtToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmtToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AvoFrens", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}