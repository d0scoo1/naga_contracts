{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/GlobalRateLimitedMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport {MultiRateLimited} from \\\"./MultiRateLimited.sol\\\";\\nimport {IGlobalRateLimitedMinter} from \\\"./IGlobalRateLimitedMinter.sol\\\";\\nimport {CoreRef} from \\\"./../refs/CoreRef.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @notice global contract to handle rate limited minting of VOLT on a global level\\n/// allows whitelisted minters to call in and specify the address to mint VOLT to within\\n/// that contract's limits\\ncontract GlobalRateLimitedMinter is MultiRateLimited, IGlobalRateLimitedMinter {\\n    /// @param coreAddress address of the core contract\\n    /// @param _globalMaxRateLimitPerSecond maximum amount of VOLT that can replenish per second ever, this amount cannot be changed by governance\\n    /// @param _perAddressRateLimitMaximum maximum rate limit per second per address\\n    /// @param _maxRateLimitPerSecondPerAddress maximum rate limit per second per address in multi rate limited\\n    /// @param _maxBufferCap maximum buffer cap in multi rate limited contract\\n    /// @param _globalBufferCap maximum global buffer cap\\n    constructor(\\n        address coreAddress,\\n        uint256 _globalMaxRateLimitPerSecond,\\n        uint256 _perAddressRateLimitMaximum,\\n        uint256 _maxRateLimitPerSecondPerAddress,\\n        uint256 _maxBufferCap,\\n        uint256 _globalBufferCap\\n    )\\n        CoreRef(coreAddress)\\n        MultiRateLimited(\\n            _globalMaxRateLimitPerSecond,\\n            _perAddressRateLimitMaximum,\\n            _maxRateLimitPerSecondPerAddress,\\n            _maxBufferCap,\\n            _globalBufferCap\\n        )\\n    {}\\n\\n    /// @notice mint VOLT to the target address and deplete the buffer\\n    /// pausable and depletes the msg.sender's buffer\\n    /// @param to the recipient address of the minted VOLT\\n    /// @param amount the amount of VOLT to mint\\n    function mintVolt(address to, uint256 amount)\\n        external\\n        virtual\\n        override\\n        whenNotPaused\\n    {\\n        _depleteIndividualBuffer(msg.sender, amount);\\n        _mintVolt(to, amount);\\n    }\\n\\n    /// @notice mint VOLT to the target address and deplete the whole rate limited\\n    ///  minter's buffer, pausable and completely depletes the msg.sender's buffer\\n    /// @param to the recipient address of the minted VOLT\\n    /// mints all VOLT that msg.sender has in the buffer\\n    function mintMaxAllowableVolt(address to)\\n        external\\n        virtual\\n        override\\n        whenNotPaused\\n    {\\n        uint256 amount = Math.min(individualBuffer(msg.sender), buffer());\\n\\n        _depleteIndividualBuffer(msg.sender, amount);\\n        _mintVolt(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MultiRateLimited.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport {CoreRef} from \\\"../refs/CoreRef.sol\\\";\\nimport {TribeRoles} from \\\"./../core/TribeRoles.sol\\\";\\nimport {RateLimited} from \\\"./RateLimited.sol\\\";\\nimport {IMultiRateLimited} from \\\"./IMultiRateLimited.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title abstract contract for putting a rate limit on how fast an address can perform an action e.g. Minting\\n/// there are two buffers, one buffer which is each individual addresses's current buffer,\\n/// and then there is a global buffer which is the buffer that each individual address must respect as well\\n/// @author Elliot Friedman, Fei Protocol\\n/// this contract was made abstract so that other contracts that already construct an instance of CoreRef\\n/// do not collide with this one\\nabstract contract MultiRateLimited is RateLimited, IMultiRateLimited {\\n    using SafeCast for *;\\n\\n    /// @notice the struct containing all information per rate limited address\\n    struct RateLimitData {\\n        uint32 lastBufferUsedTime;\\n        uint112 bufferCap;\\n        uint112 bufferStored;\\n        uint112 rateLimitPerSecond;\\n    }\\n\\n    /// @notice rate limited address information\\n    mapping(address => RateLimitData) public rateLimitPerAddress;\\n\\n    /// @notice max rate limit per second allowable by non governor per contract\\n    uint256 public individualMaxRateLimitPerSecond;\\n\\n    /// @notice max buffer cap allowable by non governor per contract\\n    uint256 public individualMaxBufferCap;\\n\\n    /// @param _maxRateLimitPerSecond maximum amount of fei that can replenish per second ever, this amount cannot be changed by governance\\n    /// @param _rateLimitPerSecond maximum rate limit per second per address\\n    /// @param _individualMaxRateLimitPerSecond maximum rate limit per second per address in multi rate limited\\n    /// @param _individualMaxBufferCap maximum buffer cap in multi rate limited\\n    /// @param _globalBufferCap maximum global buffer cap\\n    constructor(\\n        uint256 _maxRateLimitPerSecond,\\n        uint256 _rateLimitPerSecond,\\n        uint256 _individualMaxRateLimitPerSecond,\\n        uint256 _individualMaxBufferCap,\\n        uint256 _globalBufferCap\\n    )\\n        RateLimited(\\n            _maxRateLimitPerSecond,\\n            _rateLimitPerSecond,\\n            _globalBufferCap,\\n            false\\n        )\\n    {\\n        require(\\n            _individualMaxBufferCap < _globalBufferCap,\\n            \\\"MultiRateLimited: max buffer cap invalid\\\"\\n        );\\n\\n        individualMaxRateLimitPerSecond = _individualMaxRateLimitPerSecond;\\n        individualMaxBufferCap = _individualMaxBufferCap;\\n    }\\n\\n    modifier addressIsRegistered(address rateLimitedAddress) {\\n        require(\\n            rateLimitPerAddress[rateLimitedAddress].lastBufferUsedTime != 0,\\n            \\\"MultiRateLimited: rate limit address does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    // ----------- Governor and Admin only state changing api -----------\\n\\n    /// @notice update the ADD_MINTER_ROLE rate limit per second\\n    /// @param newRateLimitPerSecond new maximum rate limit per second for add minter role\\n    function updateMaxRateLimitPerSecond(uint256 newRateLimitPerSecond)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(\\n            newRateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND,\\n            \\\"MultiRateLimited: exceeds global max rate limit per second\\\"\\n        );\\n\\n        uint256 oldMaxRateLimitPerSecond = individualMaxRateLimitPerSecond;\\n        individualMaxRateLimitPerSecond = newRateLimitPerSecond;\\n\\n        emit MultiMaxRateLimitPerSecondUpdate(\\n            oldMaxRateLimitPerSecond,\\n            newRateLimitPerSecond\\n        );\\n    }\\n\\n    /// @notice update the ADD_MINTER_ROLE max buffer cap\\n    /// @param newBufferCap new buffer cap for ADD_MINTER_ROLE added addresses\\n    function updateMaxBufferCap(uint256 newBufferCap)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        require(\\n            newBufferCap <= bufferCap,\\n            \\\"MultiRateLimited: exceeds global buffer cap\\\"\\n        );\\n\\n        uint256 oldBufferCap = individualMaxBufferCap;\\n        individualMaxBufferCap = newBufferCap;\\n\\n        emit MultiBufferCapUpdate(oldBufferCap, newBufferCap);\\n    }\\n\\n    /// @notice add an authorized rateLimitedAddress contract\\n    /// @param rateLimitedAddress the new address to add as a rateLimitedAddress\\n    /// @param _rateLimitPerSecond the rate limit per second for this rateLimitedAddress\\n    /// @param _bufferCap  the buffer cap for this rateLimitedAddress\\n    function addAddress(\\n        address rateLimitedAddress,\\n        uint112 _rateLimitPerSecond,\\n        uint112 _bufferCap\\n    ) external override onlyGovernor {\\n        _addAddress(rateLimitedAddress, _rateLimitPerSecond, _bufferCap);\\n    }\\n\\n    /// @notice add an authorized rateLimitedAddress contract\\n    /// @param rateLimitedAddress the address whose buffer and rate limit per second will be set\\n    /// @param _rateLimitPerSecond the new rate limit per second for this rateLimitedAddress\\n    /// @param _bufferCap  the new buffer cap for this rateLimitedAddress\\n    function updateAddress(\\n        address rateLimitedAddress,\\n        uint112 _rateLimitPerSecond,\\n        uint112 _bufferCap\\n    )\\n        external\\n        override\\n        addressIsRegistered(rateLimitedAddress)\\n        hasAnyOfTwoRoles(TribeRoles.ADD_MINTER_ROLE, TribeRoles.GOVERNOR)\\n    {\\n        if (core().hasRole(TribeRoles.ADD_MINTER_ROLE, msg.sender)) {\\n            require(\\n                _rateLimitPerSecond <= individualMaxRateLimitPerSecond,\\n                \\\"MultiRateLimited: rate limit per second exceeds non governor allowable amount\\\"\\n            );\\n            require(\\n                _bufferCap <= individualMaxBufferCap,\\n                \\\"MultiRateLimited: max buffer cap exceeds non governor allowable amount\\\"\\n            );\\n        }\\n        require(\\n            _bufferCap <= bufferCap,\\n            \\\"MultiRateLimited: buffercap too high\\\"\\n        );\\n        require(\\n            _rateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND,\\n            \\\"MultiRateLimited: rateLimitPerSecond too high\\\"\\n        );\\n\\n        _updateAddress(rateLimitedAddress, _rateLimitPerSecond, _bufferCap);\\n    }\\n\\n    /// @notice add an authorized rateLimitedAddress contract\\n    /// @param rateLimitedAddress the new address to add as a rateLimitedAddress\\n    /// gives the newly added contract the maximum allowable rate limit per second and buffer cap\\n    function addAddressAsMinter(address rateLimitedAddress)\\n        external\\n        override\\n        onlyTribeRole(TribeRoles.ADD_MINTER_ROLE)\\n    {\\n        _addAddress(\\n            rateLimitedAddress,\\n            uint112(individualMaxRateLimitPerSecond),\\n            uint112(individualMaxBufferCap)\\n        );\\n    }\\n\\n    /// @notice add an authorized rateLimitedAddress contract\\n    /// @param rateLimitedAddress the new address to add as a rateLimitedAddress\\n    /// gives the newly added contract the maximum allowable rate limit per second and buffer cap\\n    function addAddressAsMinter(\\n        address rateLimitedAddress,\\n        uint112 _rateLimitPerSecond,\\n        uint112 _bufferCap\\n    ) external onlyTribeRole(TribeRoles.ADD_MINTER_ROLE) {\\n        require(\\n            _rateLimitPerSecond <= individualMaxRateLimitPerSecond,\\n            \\\"MultiRateLimited: rlps exceeds role amt\\\"\\n        );\\n        require(\\n            _bufferCap <= individualMaxBufferCap,\\n            \\\"MultiRateLimited: buffercap exceeds role amt\\\"\\n        );\\n        _addAddress(rateLimitedAddress, _rateLimitPerSecond, _bufferCap);\\n    }\\n\\n    /// @notice remove an authorized rateLimitedAddress contract\\n    /// @param rateLimitedAddress the address to remove from the whitelist of addresses\\n    function removeAddress(address rateLimitedAddress)\\n        external\\n        override\\n        addressIsRegistered(rateLimitedAddress)\\n        onlyGuardianOrGovernor\\n    {\\n        uint256 oldRateLimitPerSecond = rateLimitPerAddress[rateLimitedAddress]\\n            .rateLimitPerSecond;\\n\\n        delete rateLimitPerAddress[rateLimitedAddress];\\n\\n        emit IndividualRateLimitPerSecondUpdate(\\n            rateLimitedAddress,\\n            oldRateLimitPerSecond,\\n            0\\n        );\\n    }\\n\\n    // ----------- Getters -----------\\n\\n    /// @notice the amount of action used before hitting limit\\n    /// @dev replenishes at rateLimitPerSecond per second up to bufferCap\\n    /// @param rateLimitedAddress the address whose buffer will be returned\\n    /// @return the buffer of the specified rate limited address\\n    function individualBuffer(address rateLimitedAddress)\\n        public\\n        view\\n        override\\n        returns (uint112)\\n    {\\n        RateLimitData memory rateLimitData = rateLimitPerAddress[\\n            rateLimitedAddress\\n        ];\\n\\n        uint256 elapsed = block.timestamp - rateLimitData.lastBufferUsedTime;\\n        return\\n            uint112(\\n                Math.min(\\n                    rateLimitData.bufferStored +\\n                        (rateLimitData.rateLimitPerSecond * elapsed),\\n                    rateLimitData.bufferCap\\n                )\\n            );\\n    }\\n\\n    /// @notice the rate per second for each address\\n    function getRateLimitPerSecond(address limiter)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return rateLimitPerAddress[limiter].rateLimitPerSecond;\\n    }\\n\\n    /// @notice the last time the buffer was used by each address\\n    function getLastBufferUsedTime(address limiter)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return rateLimitPerAddress[limiter].lastBufferUsedTime;\\n    }\\n\\n    /// @notice the cap of the buffer that can be used at once\\n    function getBufferCap(address limiter)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return rateLimitPerAddress[limiter].bufferCap;\\n    }\\n\\n    // ----------- Helper Methods -----------\\n\\n    function _updateAddress(\\n        address rateLimitedAddress,\\n        uint112 _rateLimitPerSecond,\\n        uint112 _bufferCap\\n    ) internal {\\n        RateLimitData storage rateLimitData = rateLimitPerAddress[\\n            rateLimitedAddress\\n        ];\\n\\n        uint112 oldRateLimitPerSecond = rateLimitData.rateLimitPerSecond;\\n        uint112 currentBufferStored = individualBuffer(rateLimitedAddress);\\n        uint32 newBlockTimestamp = block.timestamp.toUint32();\\n\\n        rateLimitData.bufferStored = currentBufferStored;\\n        rateLimitData.lastBufferUsedTime = newBlockTimestamp;\\n        rateLimitData.bufferCap = _bufferCap;\\n        rateLimitData.rateLimitPerSecond = _rateLimitPerSecond;\\n\\n        emit IndividualRateLimitPerSecondUpdate(\\n            rateLimitedAddress,\\n            oldRateLimitPerSecond,\\n            _rateLimitPerSecond\\n        );\\n    }\\n\\n    /// @param rateLimitedAddress the new address to add as a rateLimitedAddress\\n    /// @param _rateLimitPerSecond the rate limit per second for this rateLimitedAddress\\n    /// @param _bufferCap  the buffer cap for this rateLimitedAddress\\n    function _addAddress(\\n        address rateLimitedAddress,\\n        uint112 _rateLimitPerSecond,\\n        uint112 _bufferCap\\n    ) internal {\\n        require(\\n            _bufferCap <= bufferCap,\\n            \\\"MultiRateLimited: new buffercap too high\\\"\\n        );\\n        require(\\n            rateLimitPerAddress[rateLimitedAddress].lastBufferUsedTime == 0,\\n            \\\"MultiRateLimited: address already added\\\"\\n        );\\n        require(\\n            _rateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND,\\n            \\\"MultiRateLimited: rateLimitPerSecond too high\\\"\\n        );\\n\\n        RateLimitData memory rateLimitData = RateLimitData({\\n            lastBufferUsedTime: block.timestamp.toUint32(),\\n            bufferCap: _bufferCap,\\n            rateLimitPerSecond: _rateLimitPerSecond,\\n            bufferStored: _bufferCap\\n        });\\n\\n        rateLimitPerAddress[rateLimitedAddress] = rateLimitData;\\n\\n        emit IndividualRateLimitPerSecondUpdate(\\n            rateLimitedAddress,\\n            0,\\n            _rateLimitPerSecond\\n        );\\n    }\\n\\n    /// @notice the method that enforces the rate limit. Decreases buffer by \\\"amount\\\".\\n    /// @param rateLimitedAddress the address whose buffer will be depleted\\n    /// @param amount the amount to remove from the rateLimitedAddress's buffer\\n    function _depleteIndividualBuffer(\\n        address rateLimitedAddress,\\n        uint256 amount\\n    ) internal {\\n        _depleteBuffer(amount);\\n\\n        uint256 newBuffer = individualBuffer(rateLimitedAddress);\\n\\n        require(newBuffer != 0, \\\"MultiRateLimited: no rate limit buffer\\\");\\n        require(amount <= newBuffer, \\\"MultiRateLimited: rate limit hit\\\");\\n\\n        uint32 lastBufferUsedTime = block.timestamp.toUint32();\\n\\n        uint112 newBufferStored = uint112(newBuffer - amount);\\n        uint112 currentBufferCap = rateLimitPerAddress[rateLimitedAddress]\\n            .bufferCap;\\n\\n        rateLimitPerAddress[rateLimitedAddress]\\n            .lastBufferUsedTime = lastBufferUsedTime;\\n        rateLimitPerAddress[rateLimitedAddress].bufferCap = currentBufferCap;\\n        rateLimitPerAddress[rateLimitedAddress].bufferStored = newBufferStored;\\n\\n        emit IndividualBufferUsed(\\n            rateLimitedAddress,\\n            amount,\\n            newBuffer - amount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IGlobalRateLimitedMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMultiRateLimited.sol\\\";\\n\\n/// @notice global contract to handle rate limited minting of VOLT on a global level\\n/// allows whitelisted minters to call in and specify the address to mint VOLT to within\\n/// the calling contract's limits\\ninterface IGlobalRateLimitedMinter is IMultiRateLimited {\\n    /// @notice function that all VOLT minters call to mint VOLT\\n    /// pausable and depletes the msg.sender's buffer\\n    /// @param to the recipient address of the minted VOLT\\n    /// @param amount the amount of VOLT to mint\\n    function mintVolt(address to, uint256 amount) external;\\n\\n    /// @notice mint VOLT to the target address and deplete the whole rate limited\\n    ///  minter's buffer, pausable and completely depletes the msg.sender's buffer\\n    /// @param to the recipient address of the minted VOLT\\n    /// mints all VOLT that msg.sender has in the buffer\\n    function mintMaxAllowableVolt(address to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/refs/CoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ICoreRef.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @title A Reference to Core\\n/// @author Fei Protocol\\n/// @notice defines some modifiers and utilities around interacting with Core\\nabstract contract CoreRef is ICoreRef, Pausable {\\n    ICore private immutable _core;\\n    IVolt private immutable _volt;\\n    IERC20 private immutable _vcon;\\n\\n    /// @notice a role used with a subset of governor permissions for this contract only\\n    bytes32 public override CONTRACT_ADMIN_ROLE;\\n\\n    constructor(address coreAddress) {\\n        _core = ICore(coreAddress);\\n\\n        _volt = ICore(coreAddress).volt();\\n        _vcon = ICore(coreAddress).vcon();\\n\\n        _setContractAdminRole(ICore(coreAddress).GOVERN_ROLE());\\n    }\\n\\n    function _initialize() internal {} // no-op for backward compatibility\\n\\n    modifier ifMinterSelf() {\\n        if (_core.isMinter(address(this))) {\\n            _;\\n        }\\n    }\\n\\n    modifier onlyMinter() {\\n        require(_core.isMinter(msg.sender), \\\"CoreRef: Caller is not a minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(_core.isBurner(msg.sender), \\\"CoreRef: Caller is not a burner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPCVController() {\\n        require(\\n            _core.isPCVController(msg.sender),\\n            \\\"CoreRef: Caller is not a PCV controller\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernorOrAdmin() {\\n        require(\\n            _core.isGovernor(msg.sender) || isContractAdmin(msg.sender),\\n            \\\"CoreRef: Caller is not a governor or contract admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGovernorOrGuardianOrAdmin() {\\n        require(\\n            _core.isGovernor(msg.sender) ||\\n                _core.isGuardian(msg.sender) ||\\n                isContractAdmin(msg.sender),\\n            \\\"CoreRef: Caller is not governor or guardian or admin\\\"\\n        );\\n        _;\\n    }\\n\\n    // Named onlyTribeRole to prevent collision with OZ onlyRole modifier\\n    modifier onlyTribeRole(bytes32 role) {\\n        require(_core.hasRole(role, msg.sender), \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    // Modifiers to allow any combination of roles\\n    modifier hasAnyOfTwoRoles(bytes32 role1, bytes32 role2) {\\n        require(\\n            _core.hasRole(role1, msg.sender) ||\\n                _core.hasRole(role2, msg.sender),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasAnyOfThreeRoles(\\n        bytes32 role1,\\n        bytes32 role2,\\n        bytes32 role3\\n    ) {\\n        require(\\n            _core.hasRole(role1, msg.sender) ||\\n                _core.hasRole(role2, msg.sender) ||\\n                _core.hasRole(role3, msg.sender),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasAnyOfFourRoles(\\n        bytes32 role1,\\n        bytes32 role2,\\n        bytes32 role3,\\n        bytes32 role4\\n    ) {\\n        require(\\n            _core.hasRole(role1, msg.sender) ||\\n                _core.hasRole(role2, msg.sender) ||\\n                _core.hasRole(role3, msg.sender) ||\\n                _core.hasRole(role4, msg.sender),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier hasAnyOfFiveRoles(\\n        bytes32 role1,\\n        bytes32 role2,\\n        bytes32 role3,\\n        bytes32 role4,\\n        bytes32 role5\\n    ) {\\n        require(\\n            _core.hasRole(role1, msg.sender) ||\\n                _core.hasRole(role2, msg.sender) ||\\n                _core.hasRole(role3, msg.sender) ||\\n                _core.hasRole(role4, msg.sender) ||\\n                _core.hasRole(role5, msg.sender),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVolt() {\\n        require(msg.sender == address(_volt), \\\"CoreRef: Caller is not VOLT\\\");\\n        _;\\n    }\\n\\n    /// @notice sets a new admin role for this contract\\n    function setContractAdminRole(bytes32 newContractAdminRole)\\n        external\\n        override\\n        onlyGovernor\\n    {\\n        _setContractAdminRole(newContractAdminRole);\\n    }\\n\\n    /// @notice returns whether a given address has the admin role for this contract\\n    function isContractAdmin(address _admin)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\\n    }\\n\\n    /// @notice set pausable methods to paused\\n    function pause() public override onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    /// @notice set pausable methods to unpaused\\n    function unpause() public override onlyGuardianOrGovernor {\\n        _unpause();\\n    }\\n\\n    /// @notice address of the Core contract referenced\\n    /// @return ICore implementation address\\n    function core() public view override returns (ICore) {\\n        return _core;\\n    }\\n\\n    /// @notice address of the Fei contract referenced by Core\\n    /// @return IFei implementation address\\n    function volt() public view override returns (IVolt) {\\n        return _volt;\\n    }\\n\\n    /// @notice address of the Tribe contract referenced by Core\\n    /// @return IERC20 implementation address\\n    function vcon() public view override returns (IERC20) {\\n        return _vcon;\\n    }\\n\\n    /// @notice volt balance of contract\\n    /// @return volt amount held\\n    function voltBalance() public view override returns (uint256) {\\n        return _volt.balanceOf(address(this));\\n    }\\n\\n    /// @notice vcon balance of contract\\n    /// @return vcon amount held\\n    function vconBalance() public view override returns (uint256) {\\n        return _vcon.balanceOf(address(this));\\n    }\\n\\n    function _burnVoltHeld() internal {\\n        _volt.burn(voltBalance());\\n    }\\n\\n    function _mintVolt(address to, uint256 amount) internal virtual {\\n        if (amount != 0) {\\n            _volt.mint(to, amount);\\n        }\\n    }\\n\\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\\n        emit ContractAdminRoleUpdate(\\n            oldContractAdminRole,\\n            newContractAdminRole\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/TribeRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/**\\n @title Tribe DAO ACL Roles\\n @notice Holds a complete list of all roles which can be held by contracts inside Tribe DAO.\\n         Roles are broken up into 3 categories:\\n         * Major Roles - the most powerful roles in the Tribe DAO which should be carefully managed.\\n         * Admin Roles - roles with management capability over critical functionality. Should only be held by automated or optimistic mechanisms\\n         * Minor Roles - operational roles. May be held or managed by shorter optimistic timelocks or trusted multisigs.\\n */\\nlibrary TribeRoles {\\n    /*///////////////////////////////////////////////////////////////\\n                                 Major Roles\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice the ultimate role of Tribe. Controls all other roles and protocol functionality.\\n    bytes32 internal constant GOVERNOR = keccak256(\\\"GOVERN_ROLE\\\");\\n\\n    /// @notice the protector role of Tribe. Admin of pause, veto, revoke, and minor roles\\n    bytes32 internal constant GUARDIAN = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice the role which can arbitrarily move PCV in any size from any contract\\n    bytes32 internal constant PCV_CONTROLLER = keccak256(\\\"PCV_CONTROLLER_ROLE\\\");\\n\\n    /// @notice can mint FEI arbitrarily\\n    bytes32 internal constant MINTER = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 Admin Roles\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice can manage the majority of Tribe protocol parameters. Sets boundaries for MINOR_PARAM_ROLE.\\n    bytes32 internal constant PARAMETER_ADMIN = keccak256(\\\"PARAMETER_ADMIN\\\");\\n\\n    /// @notice manages the Collateralization Oracle as well as other protocol oracles.\\n    bytes32 internal constant ORACLE_ADMIN = keccak256(\\\"ORACLE_ADMIN_ROLE\\\");\\n\\n    /// @notice manages TribalChief incentives and related functionality.\\n    bytes32 internal constant TRIBAL_CHIEF_ADMIN =\\n        keccak256(\\\"TRIBAL_CHIEF_ADMIN_ROLE\\\");\\n\\n    /// @notice admin of PCVGuardian\\n    bytes32 internal constant PCV_GUARDIAN_ADMIN =\\n        keccak256(\\\"PCV_GUARDIAN_ADMIN_ROLE\\\");\\n\\n    /// @notice admin of all Minor Roles\\n    bytes32 internal constant MINOR_ROLE_ADMIN = keccak256(\\\"MINOR_ROLE_ADMIN\\\");\\n\\n    /// @notice admin of the Fuse protocol\\n    bytes32 internal constant FUSE_ADMIN = keccak256(\\\"FUSE_ADMIN\\\");\\n\\n    /// @notice capable of vetoing DAO votes or optimistic timelocks\\n    bytes32 internal constant VETO_ADMIN = keccak256(\\\"VETO_ADMIN\\\");\\n\\n    /// @notice capable of setting FEI Minters within global rate limits and caps\\n    bytes32 internal constant MINTER_ADMIN = keccak256(\\\"MINTER_ADMIN\\\");\\n\\n    /// @notice manages the constituents of Optimistic Timelocks, including Proposers and Executors\\n    bytes32 internal constant OPTIMISTIC_ADMIN = keccak256(\\\"OPTIMISTIC_ADMIN\\\");\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 Minor Roles\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice capable of poking existing LBP auctions to exchange tokens.\\n    bytes32 internal constant LBP_SWAP_ROLE = keccak256(\\\"SWAP_ADMIN_ROLE\\\");\\n\\n    /// @notice capable of engaging with Votium for voting incentives.\\n    bytes32 internal constant VOTIUM_ROLE = keccak256(\\\"VOTIUM_ADMIN_ROLE\\\");\\n\\n    /// @notice capable of changing parameters within non-critical ranges\\n    bytes32 internal constant MINOR_PARAM_ROLE = keccak256(\\\"MINOR_PARAM_ROLE\\\");\\n\\n    /// @notice capable of adding an address to multi rate limited\\n    bytes32 internal constant ADD_MINTER_ROLE = keccak256(\\\"ADD_MINTER_ROLE\\\");\\n\\n    /// @notice capable of changing PCV Deposit and Global Rate Limited Minter in the PSM\\n    bytes32 internal constant PSM_ADMIN_ROLE = keccak256(\\\"PSM_ADMIN_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RateLimited.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../refs/CoreRef.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @title abstract contract for putting a rate limit on how fast a contract can perform an action e.g. Minting\\n/// @author Fei Protocol\\nabstract contract RateLimited is CoreRef {\\n    /// @notice maximum rate limit per second governance can set for this contract\\n    uint256 public immutable MAX_RATE_LIMIT_PER_SECOND;\\n\\n    /// @notice the rate per second for this contract\\n    uint256 public rateLimitPerSecond;\\n\\n    /// @notice the last time the buffer was used by the contract\\n    uint256 public lastBufferUsedTime;\\n\\n    /// @notice the cap of the buffer that can be used at once\\n    uint256 public bufferCap;\\n\\n    /// @notice a flag for whether to allow partial actions to complete if the buffer is less than amount\\n    bool public doPartialAction;\\n\\n    /// @notice the buffer at the timestamp of lastBufferUsedTime\\n    uint256 public bufferStored;\\n\\n    event BufferUsed(uint256 amountUsed, uint256 bufferRemaining);\\n    event BufferCapUpdate(uint256 oldBufferCap, uint256 newBufferCap);\\n    event RateLimitPerSecondUpdate(\\n        uint256 oldRateLimitPerSecond,\\n        uint256 newRateLimitPerSecond\\n    );\\n\\n    constructor(\\n        uint256 _maxRateLimitPerSecond,\\n        uint256 _rateLimitPerSecond,\\n        uint256 _bufferCap,\\n        bool _doPartialAction\\n    ) {\\n        lastBufferUsedTime = block.timestamp;\\n\\n        _setBufferCap(_bufferCap);\\n        bufferStored = _bufferCap;\\n\\n        require(\\n            _rateLimitPerSecond <= _maxRateLimitPerSecond,\\n            \\\"RateLimited: rateLimitPerSecond too high\\\"\\n        );\\n        _setRateLimitPerSecond(_rateLimitPerSecond);\\n\\n        MAX_RATE_LIMIT_PER_SECOND = _maxRateLimitPerSecond;\\n        doPartialAction = _doPartialAction;\\n    }\\n\\n    /// @notice set the rate limit per second\\n    function setRateLimitPerSecond(uint256 newRateLimitPerSecond)\\n        external\\n        virtual\\n        onlyGovernorOrAdmin\\n    {\\n        require(\\n            newRateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND,\\n            \\\"RateLimited: rateLimitPerSecond too high\\\"\\n        );\\n        _updateBufferStored();\\n\\n        _setRateLimitPerSecond(newRateLimitPerSecond);\\n    }\\n\\n    /// @notice set the buffer cap\\n    function setBufferCap(uint256 newBufferCap)\\n        external\\n        virtual\\n        onlyGovernorOrAdmin\\n    {\\n        _setBufferCap(newBufferCap);\\n    }\\n\\n    /// @notice the amount of action used before hitting limit\\n    /// @dev replenishes at rateLimitPerSecond per second up to bufferCap\\n    function buffer() public view returns (uint256) {\\n        uint256 elapsed = block.timestamp - lastBufferUsedTime;\\n        return\\n            Math.min(bufferStored + (rateLimitPerSecond * elapsed), bufferCap);\\n    }\\n\\n    /** \\n        @notice the method that enforces the rate limit. Decreases buffer by \\\"amount\\\". \\n        If buffer is <= amount either\\n        1. Does a partial mint by the amount remaining in the buffer or\\n        2. Reverts\\n        Depending on whether doPartialAction is true or false\\n    */\\n    function _depleteBuffer(uint256 amount) internal virtual returns (uint256) {\\n        uint256 newBuffer = buffer();\\n\\n        uint256 usedAmount = amount;\\n        if (doPartialAction && usedAmount > newBuffer) {\\n            usedAmount = newBuffer;\\n        }\\n\\n        require(newBuffer != 0, \\\"RateLimited: no rate limit buffer\\\");\\n        require(usedAmount <= newBuffer, \\\"RateLimited: rate limit hit\\\");\\n\\n        bufferStored = newBuffer - usedAmount;\\n\\n        lastBufferUsedTime = block.timestamp;\\n\\n        emit BufferUsed(usedAmount, bufferStored);\\n\\n        return usedAmount;\\n    }\\n\\n    /// @notice function to replenish buffer\\n    /// @param amount to increase buffer by if under buffer cap\\n    function _replenishBuffer(uint256 amount) internal {\\n        uint256 newBuffer = buffer();\\n\\n        uint256 _bufferCap = bufferCap; /// gas opti, save an SLOAD\\n\\n        /// cannot replenish any further if already at buffer cap\\n        if (newBuffer == _bufferCap) {\\n            return;\\n        }\\n\\n        lastBufferUsedTime = block.timestamp;\\n\\n        /// ensure that bufferStored cannot be gt buffer cap\\n        bufferStored = Math.min(newBuffer + amount, _bufferCap);\\n    }\\n\\n    function _setRateLimitPerSecond(uint256 newRateLimitPerSecond) internal {\\n        uint256 oldRateLimitPerSecond = rateLimitPerSecond;\\n        rateLimitPerSecond = newRateLimitPerSecond;\\n\\n        emit RateLimitPerSecondUpdate(\\n            oldRateLimitPerSecond,\\n            newRateLimitPerSecond\\n        );\\n    }\\n\\n    function _setBufferCap(uint256 newBufferCap) internal {\\n        _updateBufferStored();\\n\\n        uint256 oldBufferCap = bufferCap;\\n        bufferCap = newBufferCap;\\n\\n        emit BufferCapUpdate(oldBufferCap, newBufferCap);\\n    }\\n\\n    function _resetBuffer() internal {\\n        bufferStored = bufferCap;\\n    }\\n\\n    function _updateBufferStored() internal {\\n        bufferStored = buffer();\\n        lastBufferUsedTime = block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IMultiRateLimited.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title interface for putting a rate limit on how fast a contract can perform an action, e.g. Minting\\n/// @author Fei Protocol\\ninterface IMultiRateLimited {\\n    // ----------- Events -----------\\n\\n    /// @notice emitted when a buffer is eaten into\\n    event IndividualBufferUsed(\\n        address rateLimitedAddress,\\n        uint256 amountUsed,\\n        uint256 bufferRemaining\\n    );\\n\\n    /// @notice emitted when rate limit is updated\\n    event IndividualRateLimitPerSecondUpdate(\\n        address rateLimitedAddress,\\n        uint256 oldRateLimitPerSecond,\\n        uint256 newRateLimitPerSecond\\n    );\\n\\n    /// @notice emitted when the non gov buffer cap max is updated\\n    event MultiBufferCapUpdate(uint256 oldBufferCap, uint256 newBufferCap);\\n\\n    /// @notice emitted when the non gov buffer rate limit per second max is updated\\n    event MultiMaxRateLimitPerSecondUpdate(\\n        uint256 oldMaxRateLimitPerSecond,\\n        uint256 newMaxRateLimitPerSecond\\n    );\\n\\n    // ----------- View API -----------\\n\\n    /// @notice the rate per second for each address\\n    function getRateLimitPerSecond(address) external view returns (uint256);\\n\\n    /// @notice the last time the buffer was used by each address\\n    function getLastBufferUsedTime(address) external view returns (uint256);\\n\\n    /// @notice the cap of the buffer that can be used at once\\n    function getBufferCap(address) external view returns (uint256);\\n\\n    /// @notice the amount of action that can be used before hitting limit\\n    /// @dev replenishes at rateLimitPerSecond per second up to bufferCap\\n    function individualBuffer(address) external view returns (uint112);\\n\\n    // ----------- Governance State Changing API -----------\\n\\n    /// @notice update the non gov max rate limit per second\\n    function updateMaxRateLimitPerSecond(uint256 newMaxRateLimitPerSecond)\\n        external;\\n\\n    /// @notice update the non gov max buffer cap\\n    function updateMaxBufferCap(uint256 newBufferCap) external;\\n\\n    /// @notice add an authorized contract, its per second replenishment and buffer set to the non governor caps\\n    function addAddressAsMinter(address) external;\\n\\n    /// @notice add an authorized contract, its per second replenishment and buffer\\n    function addAddress(\\n        address,\\n        uint112,\\n        uint112\\n    ) external;\\n\\n    /// @notice update an authorized contract\\n    function updateAddress(\\n        address,\\n        uint112,\\n        uint112\\n    ) external;\\n\\n    /// @notice remove an authorized contract\\n    function removeAddress(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/refs/ICoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/ICore.sol\\\";\\n\\n/// @title CoreRef interface\\n/// @author Fei Protocol\\ninterface ICoreRef {\\n    // ----------- Events -----------\\n\\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\\n\\n    event ContractAdminRoleUpdate(\\n        bytes32 indexed oldContractAdminRole,\\n        bytes32 indexed newContractAdminRole\\n    );\\n\\n    // ----------- Governor only state changing api -----------\\n\\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\\n\\n    // ----------- Governor or Guardian only state changing api -----------\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ----------- Getters -----------\\n\\n    function core() external view returns (ICore);\\n\\n    function volt() external view returns (IVolt);\\n\\n    function vcon() external view returns (IERC20);\\n\\n    function voltBalance() external view returns (uint256);\\n\\n    function vconBalance() external view returns (uint256);\\n\\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function isContractAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport {IPermissions} from \\\"./IPermissions.sol\\\";\\nimport {IVolt, IERC20} from \\\"../volt/IVolt.sol\\\";\\n\\n/// @title Core Interface\\n/// @author Fei Protocol\\ninterface ICore is IPermissions {\\n    // ----------- Events -----------\\n    event VoltUpdate(IERC20 indexed _volt);\\n    event VconUpdate(IERC20 indexed _vcon);\\n\\n    // ----------- Getters -----------\\n\\n    function volt() external view returns (IVolt);\\n\\n    function vcon() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/core/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./IPermissionsRead.sol\\\";\\n\\n/// @title Permissions interface\\n/// @author Fei Protocol\\ninterface IPermissions is IAccessControl, IPermissionsRead {\\n    // ----------- Governor only state changing api -----------\\n\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\n\\n    function grantMinter(address minter) external;\\n\\n    function grantBurner(address burner) external;\\n\\n    function grantPCVController(address pcvController) external;\\n\\n    function grantGovernor(address governor) external;\\n\\n    function grantGuardian(address guardian) external;\\n\\n    function revokeMinter(address minter) external;\\n\\n    function revokeBurner(address burner) external;\\n\\n    function revokePCVController(address pcvController) external;\\n\\n    function revokeGovernor(address governor) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    // ----------- Revoker only state changing api -----------\\n\\n    function revokeOverride(bytes32 role, address account) external;\\n\\n    // ----------- Getters -----------\\n\\n    function GUARDIAN_ROLE() external view returns (bytes32);\\n\\n    function GOVERN_ROLE() external view returns (bytes32);\\n\\n    function BURNER_ROLE() external view returns (bytes32);\\n\\n    function MINTER_ROLE() external view returns (bytes32);\\n\\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/volt/IVolt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title FEI stablecoin interface\\n/// @author Fei Protocol\\ninterface IVolt is IERC20 {\\n    // ----------- Events -----------\\n\\n    event Minting(\\n        address indexed _to,\\n        address indexed _minter,\\n        uint256 _amount\\n    );\\n\\n    event Burning(\\n        address indexed _to,\\n        address indexed _burner,\\n        uint256 _amount\\n    );\\n\\n    event IncentiveContractUpdate(\\n        address indexed _incentivized,\\n        address indexed _incentiveContract\\n    );\\n\\n    // ----------- State changing api -----------\\n\\n    function burn(uint256 amount) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ----------- Minter only state changing api -----------\\n\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/IPermissionsRead.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title Permissions Read interface\\n/// @author Fei Protocol\\ninterface IPermissionsRead {\\n    // ----------- Getters -----------\\n\\n    function isBurner(address _address) external view returns (bool);\\n\\n    function isMinter(address _address) external view returns (bool);\\n\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function isPCVController(address _address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coreAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_globalMaxRateLimitPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perAddressRateLimitMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRateLimitPerSecondPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBufferCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_globalBufferCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBufferCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBufferCap\",\"type\":\"uint256\"}],\"name\":\"BufferCapUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferRemaining\",\"type\":\"uint256\"}],\"name\":\"BufferUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldContractAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"ContractAdminRoleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferRemaining\",\"type\":\"uint256\"}],\"name\":\"IndividualBufferUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateLimitPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"IndividualRateLimitPerSecondUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBufferCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBufferCap\",\"type\":\"uint256\"}],\"name\":\"MultiBufferCapUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxRateLimitPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"MultiMaxRateLimitPerSecondUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateLimitPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"RateLimitPerSecondUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE_LIMIT_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"_rateLimitPerSecond\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_bufferCap\",\"type\":\"uint112\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"}],\"name\":\"addAddressAsMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"_rateLimitPerSecond\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_bufferCap\",\"type\":\"uint112\"}],\"name\":\"addAddressAsMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doPartialAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limiter\",\"type\":\"address\"}],\"name\":\"getBufferCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limiter\",\"type\":\"address\"}],\"name\":\"getLastBufferUsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limiter\",\"type\":\"address\"}],\"name\":\"getRateLimitPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"}],\"name\":\"individualBuffer\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualMaxBufferCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualMaxRateLimitPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isContractAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBufferUsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintMaxAllowableVolt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintVolt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rateLimitPerAddress\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastBufferUsedTime\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"bufferCap\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"bufferStored\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"rateLimitPerSecond\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimitPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBufferCap\",\"type\":\"uint256\"}],\"name\":\"setBufferCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"setContractAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRateLimitPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitedAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"_rateLimitPerSecond\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_bufferCap\",\"type\":\"uint112\"}],\"name\":\"updateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBufferCap\",\"type\":\"uint256\"}],\"name\":\"updateMaxBufferCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"updateMaxRateLimitPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcon\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vconBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volt\",\"outputs\":[{\"internalType\":\"contract IVolt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voltBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GlobalRateLimitedMinter", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec7ad284f7ad256b64c6e69b84eb0f48f42e819600000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000032d26d12e980b60000000000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}