{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */ \r\n   modifier onlyOwner(){\r\n        require(msg.sender == owner, 'Can be called by owner only');\r\n        _;\r\n    }\r\n \r\n   /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */ \r\n   function transferOwnership(address newOwner) onlyOwner public{\r\n        require(newOwner != address(0), 'Wrong new owner address');\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */ \r\nlibrary SafeMath{\r\n    function sub(uint a, uint b) internal pure returns (uint){\r\n        assert(b <= a); \r\n        return a - b; \r\n    } \r\n  \r\n    function add(uint a, uint b) internal pure returns (uint){ \r\n        uint c = a + b; assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PLTT token\r\n * @dev ERC20 Token implementation, with its own specific\r\n */\r\ncontract PlatinumClubToken is Ownable{\r\n    using SafeMath for uint;\r\n    \r\n    // Tokent basic initialization\r\n    string public constant name = \"Platinum Club Marquise Square Tower\";\r\n    string public constant symbol = \"PCMST\";\r\n    uint32 public constant decimals = 0;\r\n    uint public totalSupply = 72;\r\n    \r\n    // Company is owned all tokens at start\r\n    address public companyAddress = payable(address(0));\r\n    // Transfers from addresses but the company are locked at start\r\n    bool public transfersUnlocked = false;\r\n    // Unlock transfers when this pool is empty (number of tokens required to be transfered to get unlocked)\r\n    uint public unlockTransferRemain = 72;\r\n    // Manually unlocked addresses\r\n    mapping (address => bool) public unlocked;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event TransfersUnlocked();\r\n\r\n    /** \r\n     * @dev Allow transfers to company and send it all tokens.\r\n     */\r\n    constructor(){\r\n        owner = msg.sender;\r\n        companyAddress = msg.sender;\r\n\r\n        // Transfer all tokens to company address\r\n        balances[companyAddress] = totalSupply;\r\n        emit Transfer(address(0), companyAddress, totalSupply);\r\n\r\n        // Allow transfers to company\r\n        unlockAddress(companyAddress, true);\r\n    }\r\n    \r\n    /** \r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint){\r\n        return balances[_owner];\r\n    }\r\n \r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */ \r\n    function _transfer(address _to, uint _value) private returns (bool){\r\n        require(msg.sender != address(0));\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(transfersUnlocked || unlocked[msg.sender], 'Transfer is locked for you');\r\n        require(_value > 0 && _value <= balances[msg.sender], 'Insufficient balance');\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        if(msg.sender == companyAddress){\r\n            if(unlockTransferRemain > _value){\r\n                unlockTransferRemain = unlockTransferRemain.sub(_value);\r\n            }else{\r\n                unlockTransferRemain = 0;\r\n                transfersUnlocked = true;\r\n                emit TransfersUnlocked();\r\n            }\r\n        }\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true; \r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */ \r\n    function transfer(address _to, uint _value) public returns (bool){\r\n        return _transfer(_to, _value);\r\n    } \r\n    \r\n    /**\r\n     * @dev Transfer several token for a specified addresses\r\n     * @param _to The array of addresses to transfer to.\r\n     * @param _value The array of amounts to be transferred.\r\n     */ \r\n    function massTransfer(address[] memory _to, uint[] memory _value) public returns (bool){\r\n        require(_to.length == _value.length);\r\n\r\n        uint len = _to.length;\r\n        for(uint i = 0; i < len; i++){\r\n            if(!_transfer(_to[i], _value[i])){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    } \r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */ \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool){\r\n        require(msg.sender != address(0));\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(transfersUnlocked || unlocked[_from], 'Transfer is locked for address');\r\n        require(_value > 0 && _value <= balances[_from], 'Insufficient balance');\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool){\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n \r\n    /** \r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint){\r\n        return allowed[_owner][_spender]; \r\n    } \r\n \r\n    /**\r\n     * @dev Increase approved amount of tokents that could be spent on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to be spent.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool){\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \r\n        return true; \r\n    }\r\n \r\n    /**\r\n     * @dev Decrease approved amount of tokents that could be spent on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to be spent.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool){\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if(_subtractedValue > oldValue){\r\n            allowed[msg.sender][_spender] = 0;\r\n        }else{\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Emit new tokens and transfer from 0 to client address.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */ \r\n    function mint(address _to, uint _value) onlyOwner public{\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_value > 0);\r\n        \r\n        totalSupply = totalSupply.add(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Burn tokens at some address.\r\n     * @param _from The address where the tokens should be burned down.\r\n     * @param _value The amount to be burned.\r\n     */ \r\n    function burn(address _from, uint _value) onlyOwner public{\r\n        require(_from != address(0));\r\n        require(_from != address(this));\r\n        require(_value > 0 && _value <= balances[_from], 'Insufficient balance');\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n    /** \r\n     * @dev Manually unlock transfers from any address.\r\n     * @param _addr Allowed address\r\n     * @param status Unlock status: true = unlocked, false = locked\r\n     */\r\n    function unlockAddress(address _addr, bool status) onlyOwner public{\r\n        unlocked[_addr] = status;\r\n    }\r\n  \r\n    /** \r\n     * @dev Change company address. Be sure you have transferred tokens first.\r\n     * @param _addr New company address\r\n     */\r\n    function setCompanyAddress(address _addr) onlyOwner public{\r\n        companyAddress = _addr;\r\n    }\r\n  \r\n    /** \r\n     * @dev Set lock flag manually.\r\n     * @param isLocked Are transfers locked? true = locked, false = unlocked\r\n     */\r\n    function setLockState(bool isLocked) onlyOwner public{\r\n        transfersUnlocked = !isLocked;\r\n    }\r\n  \r\n    /** \r\n     * @dev Set new amount of tokens to be transfered before unlock. Transfers are also locked.\r\n     * @param amount New amount of tokens.\r\n     */\r\n    function setTransferRemain(uint amount) onlyOwner public{\r\n        unlockTransferRemain = amount;\r\n        setLockState(true);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersUnlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"massTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCompanyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"setLockState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTransferRemain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransferRemain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PlatinumClubToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ba2492934256fade90515ee55d31f4575c14cbd7e973bab6731f7febf3649c6"}]}