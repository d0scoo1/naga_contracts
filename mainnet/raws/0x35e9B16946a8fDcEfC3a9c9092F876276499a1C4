{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LockedTokenSaleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./interface/IPancakeRouter.sol\\\";\\r\\nimport \\\"./interface/ITokenVesting.sol\\\";\\r\\n\\r\\n\\r\\ncontract LockedTokenSaleV2 is Ownable {\\r\\n\\r\\n    ITokenVesting public tokenVesting;\\r\\n    IPancakeRouter01 public router;\\r\\n    AggregatorInterface public ref;\\r\\n    address public token;\\r\\n\\r\\n    uint constant lock_period1 = 121;\\r\\n    uint constant lock_period2 = 242;\\r\\n\\r\\n    uint constant lock_period1_without_referrer = 182;\\r\\n    uint constant lock_period2_without_referrer = 365;\\r\\n\\r\\n    uint constant plan1_price_limit = 1.25 * 1e18; // ie18 1.25\\r\\n    uint constant plan2_price_limit = 1 * 1e18; // ie18 1\\r\\n\\r\\n    uint[] lockedTokenPrice;\\r\\n\\r\\n    uint public referral_ratio = 30; //30 %\\r\\n\\r\\n    uint public eth_collected;\\r\\n    uint public eth_referral;\\r\\n\\r\\n    struct AccountantInfo {\\r\\n        address accountant;\\r\\n        address withdrawal_address;\\r\\n    }\\r\\n\\r\\n    AccountantInfo[] accountantInfo;\\r\\n    mapping(address => address) withdrawalAddress;\\r\\n\\r\\n    uint min_withdrawal_amount;\\r\\n\\r\\n    address[] referrers;\\r\\n    mapping(uint => bool) referrer_status;\\r\\n    mapping(address => uint) referrer_to_ids;\\r\\n\\r\\n    event Buy_Locked_Tokens(address indexed account, uint plan, uint amount, uint referral_id);\\r\\n    event Set_Accountant(AccountantInfo[] info);\\r\\n    event Set_Min_Withdrawal_Amount(uint amount);\\r\\n    event Set_Referral_Ratio(uint ratio);\\r\\n    event Add_Referrers(address[] referrers);\\r\\n    event Delete_Referrers(uint[] referrer_ids);\\r\\n\\r\\n    modifier onlyAccountant() {\\r\\n        address withdraw_address = withdrawalAddress[msg.sender];\\r\\n        require(withdraw_address != address(0x0), \\\"Only Accountant can perform this operation\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _router, address _tokenVesting, address _ref, address _token) {\\r\\n        router = IPancakeRouter01(_router); // 0x9ac64cc6e4415144c455bd8e4837fea55603e5c3\\r\\n        tokenVesting = ITokenVesting(_tokenVesting); // 0x63570e161Cb15Bb1A0a392c768D77096Bb6fF88C 0xDB83E3dDB0Fa0cA26e7D8730EE2EbBCB3438527E\\r\\n        ref = AggregatorInterface(_ref); // 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526 bscTestnet\\r\\n        token = _token; //0x5Ca372019D65f49cBe7cfaad0bAA451DF613ab96\\r\\n        lockedTokenPrice.push(0);\\r\\n        lockedTokenPrice.push(plan1_price_limit); // plan1\\r\\n        lockedTokenPrice.push(plan2_price_limit); // plan2\\r\\n        IERC20(_token).approve(_tokenVesting, 1e25);\\r\\n        _add_referrer(address(this));\\r\\n    }\\r\\n\\r\\n    function balanceOfToken() public view returns (uint) {\\r\\n        return IERC20(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getUnlockedTokenPrice() public view returns (uint) {\\r\\n        address pair = IPancakeFactory(router.factory()).getPair(token, router.WETH());\\r\\n        (uint112 reserve0, uint112 reserve1, ) = IPancakePair(pair).getReserves();\\r\\n        uint pancake_price;\\r\\n        if( IPancakePair(pair).token0() == token ){\\r\\n            pancake_price = reserve1 * (10 ** IERC20(token).decimals()) / reserve0;\\r\\n        }\\r\\n        else {\\r\\n            pancake_price = reserve0 * (10 ** IERC20(token).decimals()) / reserve1;\\r\\n        }\\r\\n        return pancake_price;\\r\\n    }\\r\\n\\r\\n    function setLockedTokenPrice(uint plan, uint price) public onlyOwner{\\r\\n        if(plan == 1)\\r\\n            require(plan1_price_limit <= price, \\\"Price should not below the limit\\\");\\r\\n        if(plan == 2)\\r\\n            require(plan2_price_limit <= price, \\\"Price should not below the limit\\\");\\r\\n        lockedTokenPrice[plan] = price;\\r\\n    }\\r\\n\\r\\n    function getLockedTokenPrice(uint plan) public view returns (uint){\\r\\n        return lockedTokenPrice[plan] * 1e8 / ref.latestAnswer();\\r\\n    }\\r\\n\\r\\n    function buyLockedTokens(uint plan, uint amount, uint referral_id) public payable{\\r\\n\\r\\n        require(amount >= 100, \\\"You should buy at least 100 locked token\\\");\\r\\n        bool is_valid_referrer = referral_id > 0 && referrer_status[referral_id] == true;\\r\\n        address referrer = referrers[referral_id];\\r\\n\\r\\n        uint price = getLockedTokenPrice(plan);\\r\\n        \\r\\n        uint amount_eth = amount * price;\\r\\n        uint referral_value = amount_eth * referral_ratio / 100;\\r\\n\\r\\n        require(amount_eth <= msg.value, 'Insufficient msg.value');\\r\\n        if(is_valid_referrer && referrer != msg.sender) {\\r\\n            payable(referrer).transfer(referral_value);\\r\\n            eth_referral += referral_value;\\r\\n        }\\r\\n        \\r\\n        require(amount <= IERC20(token).balanceOf(address(this)), \\\"Insufficient token in the contract\\\");\\r\\n        uint256 lockdays;\\r\\n        if(plan == 1)\\r\\n        {    \\r\\n            if(is_valid_referrer)\\r\\n                lockdays = lock_period1;\\r\\n            else\\r\\n                lockdays = lock_period1_without_referrer;\\r\\n        } else {\\r\\n            if(is_valid_referrer)\\r\\n                lockdays = lock_period2;\\r\\n            else\\r\\n                lockdays = lock_period2_without_referrer;\\r\\n        }\\r\\n        uint256 endEmission = block.timestamp + 1 days * lockdays;\\r\\n        _lock_wjxn(msg.sender, amount, endEmission);\\r\\n\\r\\n        if(amount_eth < msg.value) {\\r\\n            payable(msg.sender).transfer(msg.value - amount_eth);\\r\\n        }\\r\\n\\r\\n        eth_collected += amount_eth;\\r\\n    }\\r\\n\\r\\n    function _lock_wjxn(address owner, uint amount, uint endEmission) internal {\\r\\n        ITokenVesting.LockParams[] memory lockParams = new ITokenVesting.LockParams[](1);\\r\\n        ITokenVesting.LockParams memory lockParam;\\r\\n        lockParam.owner = payable(owner);\\r\\n        lockParam.amount = amount;\\r\\n        lockParam.startEmission = 0;\\r\\n        lockParam.endEmission = endEmission;\\r\\n        lockParam.condition = address(0);\\r\\n        lockParams[0] = lockParam;\\r\\n        tokenVesting.lock(token, lockParams);\\r\\n    }\\r\\n\\r\\n    function setReferralRatio(uint ratio) external onlyOwner {\\r\\n        require(ratio >= 10 && ratio <= 50, \\\"Referral ratio should be 10% ~ 50%\\\");\\r\\n        referral_ratio = ratio;\\r\\n        emit Set_Referral_Ratio(ratio);\\r\\n    }\\r\\n\\r\\n    function setMinWithdrawalAmount(uint amount) external onlyOwner {\\r\\n        min_withdrawal_amount = amount;\\r\\n        emit Set_Min_Withdrawal_Amount(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(uint256 amount) external onlyOwner {\\r\\n        IERC20(token).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external onlyAccountant {\\r\\n        require(amount >= min_withdrawal_amount, \\\"Below minimum withdrawal amount\\\");\\r\\n        payable(withdrawalAddress[msg.sender]).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function setAccountant(AccountantInfo[] calldata _accountantInfo) external onlyOwner {\\r\\n        uint length = accountantInfo.length;\\r\\n        for(uint i; i < length; i++) {\\r\\n            withdrawalAddress[accountantInfo[i].accountant] = address(0x0);\\r\\n        }\\r\\n        delete accountantInfo;\\r\\n        length = _accountantInfo.length;\\r\\n        for(uint i; i < length; i++) {\\r\\n            accountantInfo.push(_accountantInfo[i]);\\r\\n            withdrawalAddress[_accountantInfo[i].accountant] = _accountantInfo[i].withdrawal_address;\\r\\n        }\\r\\n        emit Set_Accountant(_accountantInfo);\\r\\n    }\\r\\n\\r\\n    function add_referrers(address[] memory _referrers) external onlyOwner {\\r\\n        uint i = 0;\\r\\n        for(; i < _referrers.length; i += 1) {\\r\\n            _add_referrer(_referrers[i]);\\r\\n        }\\r\\n        emit Add_Referrers(_referrers);\\r\\n    }\\r\\n\\r\\n    function delete_referrers(uint[] memory _referrer_ids) external onlyOwner {\\r\\n        uint i = 0;\\r\\n        for(; i < _referrer_ids.length; i += 1) {\\r\\n            referrer_status[_referrer_ids[i]] = false;\\r\\n        }\\r\\n        emit Delete_Referrers(_referrer_ids);\\r\\n    }\\r\\n\\r\\n    function get_referrer_status(uint id) external view returns(bool) {\\r\\n        require(id < referrers.length, \\\"Invalid referrer id\\\");\\r\\n        return referrer_status[id];\\r\\n    }\\r\\n\\r\\n    function get_referrer(uint id) external view returns(address) {\\r\\n        require(id < referrers.length, \\\"Invalid referrer id\\\");\\r\\n        return referrers[id];\\r\\n    }\\r\\n\\r\\n    function get_referrers() external view returns(address[] memory) {\\r\\n        return referrers;\\r\\n    }\\r\\n\\r\\n    function get_referrer_id(address referrer) external view returns(uint) {\\r\\n        return referrer_to_ids[referrer];\\r\\n    }\\r\\n\\r\\n    function _add_referrer(address referrer) internal {\\r\\n        uint referrer_id = referrer_to_ids[referrer];\\r\\n        if( referrer_id == 0) {\\r\\n            referrer_id = referrers.length;\\r\\n            referrers.push(referrer);\\r\\n            referrer_to_ids[referrer] = referrer_id;\\r\\n        }\\r\\n        referrer_status[referrer_id] = true;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface AggregatorInterface{\\r\\n    function latestAnswer() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev Interface of the BEP standard.\\n */\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function getOwner() external view returns (address);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function mint(address account, uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external view returns (address);\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/interface/ITokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface ITokenVesting {\\n\\n   struct LockParams {\\n        address payable owner; // the user who can withdraw tokens once the lock expires.\\n        uint256 amount; // amount of tokens to lock\\n        uint256 startEmission; // 0 if lock type 1, else a unix timestamp\\n        uint256 endEmission; // the unlock date as a unix timestamp (in seconds)\\n        address condition; // address(0) = no condition, otherwise the condition must implement IUnlockCondition\\n    }\\n  /**\\n   * @notice Creates one or multiple locks for the specified token\\n   * @param _token the erc20 token address\\n   * @param _lock_params an array of locks with format: [LockParams[owner, amount, startEmission, endEmission, condition]]\\n   * owner: user or contract who can withdraw the tokens\\n   * amount: must be >= 100 units\\n   * startEmission = 0 : LockType 1\\n   * startEmission != 0 : LockType 2 (linear scaling lock)\\n   * use address(0) for no premature unlocking condition\\n   * Fails if startEmission is not less than EndEmission\\n   * Fails is amount < 100\\n   */\\n  function lock (address _token, LockParams[] calldata _lock_params) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenVesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"referrers\",\"type\":\"address[]\"}],\"name\":\"Add_Referrers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referral_id\",\"type\":\"uint256\"}],\"name\":\"Buy_Locked_Tokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"referrer_ids\",\"type\":\"uint256[]\"}],\"name\":\"Delete_Referrers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawal_address\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct LockedTokenSaleV2.AccountantInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"name\":\"Set_Accountant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Set_Min_Withdrawal_Amount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"Set_Referral_Ratio\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_referrers\",\"type\":\"address[]\"}],\"name\":\"add_referrers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_id\",\"type\":\"uint256\"}],\"name\":\"buyLockedTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_referrer_ids\",\"type\":\"uint256[]\"}],\"name\":\"delete_referrers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_collected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_referral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"}],\"name\":\"getLockedTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get_referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"get_referrer_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get_referrer_status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_referrers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ref\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawal_address\",\"type\":\"address\"}],\"internalType\":\"struct LockedTokenSaleV2.AccountantInfo[]\",\"name\":\"_accountantInfo\",\"type\":\"tuple[]\"}],\"name\":\"setAccountant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setLockedTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setReferralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenVesting\",\"outputs\":[{\"internalType\":\"contract ITokenVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockedTokenSaleV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000dba68f07d1b7ca219f78ae8582c213d975c25caf0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000ca1262e77fb25c0a4112cfc9bad3ff54f617f2e6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}