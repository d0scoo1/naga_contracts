{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/KWWUtils.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary KWWUtils{\r\n\r\n  uint64 constant DAY_IN_SECONDS = 86400;\r\n  uint64 constant HOUR_IN_SECONDS = 3600;\r\n  uint64 constant WEEK_IN_SECONDS = DAY_IN_SECONDS * 7;\r\n\r\n  function pack(uint32 a, uint32 b) external pure returns(uint64) {\r\n        return (uint64(a) << 32) | uint64(b);\r\n  }\r\n\r\n  function unpack(uint64 c) external pure returns(uint32 a, uint32 b) {\r\n        a = uint32(c >> 32);\r\n        b = uint32(c);\r\n  }\r\n\r\n  function random(uint256 seed) external view returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(\r\n        tx.origin,\r\n        blockhash(block.number - 1),\r\n        block.difficulty,\r\n        block.timestamp,\r\n        seed\r\n    )));\r\n  }\r\n\r\n\r\n  function getWeekday(uint256 timestamp) public pure returns (uint8) {\r\n      //https://github.com/pipermerriam/ethereum-datetime\r\n      return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n  }\r\n}\r\n// File: contracts/IBoatsVoting.sol\r\n\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IBoatsVoting {\r\n  struct TypeVote{\r\n      uint256 finalPrice;\r\n      uint256 priceSum;\r\n      uint256 avg;\r\n      uint16 voters;\r\n      int16 agreeToAvg;\r\n  }\r\n  struct BoatData {\r\n    uint256 vote1;\r\n    uint48 timestampVoted1;\r\n    uint48 timestampVoted2;\r\n    bool vote2;\r\n  }\r\n\r\n    function makeVote1(uint16 tokenId, uint256 vote, uint8 boatState) external;\r\n    function getLastVoteTime(uint8 voteType) external view returns(int);\r\n    function getVoteTimeByDate(uint256 timestamp, uint8 voteType) external view returns (int);\r\n    function setVoteDay1(uint8 newDay) external;\r\n    function setVoteDay2(uint8 newDay) external;\r\n    function setBoatDetails(uint16 idx, BoatData memory data) external;\r\n    function setDurationHours(uint8 newHours) external;\r\n    function getCurrentOnlineVote() external view returns (uint8);\r\n    function getBoatDetails(uint16 idx) external view returns(BoatData memory);\r\n}\r\n// File: contracts/KWWBoatsVoting.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract KWWBoatsVoting is IBoatsVoting, Ownable {\r\n    address gameManager;\r\n\r\n    int8 public voteDay1 = 2;\r\n    int8 public voteDay2 = 3;\r\n    uint8 public durationHours = 24;\r\n    uint8 public daysBetweenVotes = 7;\r\n\r\n    //tokenId => BoatData\r\n    mapping(uint16 => BoatData) public boatsDetails;\r\n    //boatState => State Vote data\r\n    mapping(uint8 => TypeVote) public votes;\r\n\r\n    /*\r\n       EXECUTABLE FUNCTIONS\r\n    */\r\n\r\n    function setBoatDetails(uint16 idx, BoatData memory data)  public override onlyGameManager{\r\n        boatsDetails[idx] = data;\r\n    }\r\n\r\n    function makeVote1(uint16 tokenId, uint256 vote, uint8 boatState) public override onlyGameManager{\r\n        require(getCurrentOnlineVote() == 1, \"Vote 1 is not online right now\");\r\n        require(getLastVoteTime(1) > getVoteTimeByDate(boatsDetails[tokenId].timestampVoted1 ,1), \"Already Voted!\");\r\n\r\n        votes[boatState].priceSum += vote;\r\n        votes[boatState].voters += 1;\r\n        votes[boatState].avg = votes[boatState].priceSum / votes[boatState].voters;\r\n\r\n        boatsDetails[tokenId].vote1 = vote;\r\n        boatsDetails[tokenId].timestampVoted1 = uint48(block.timestamp);\r\n    }\r\n\r\n    function makeVote2(uint16 tokenId, bool vote, uint8 boatState) public onlyGameManager{\r\n        require(getCurrentOnlineVote() == 2, \"Vote 2 is not online right now\");\r\n        require(getLastVoteTime(2) > getVoteTimeByDate(boatsDetails[tokenId].timestampVoted2 ,2), \"Already Voted!\");\r\n\r\n        votes[boatState].agreeToAvg += (vote ? int16(1) : int16(-1));\r\n        \r\n        boatsDetails[tokenId].vote2 = vote;\r\n        boatsDetails[tokenId].timestampVoted2 = uint48(block.timestamp);\r\n    }\r\n\r\n    function updatePrice(uint8 boatState) public onlyGameManager {\r\n        require(getCurrentOnlineVote() == 0, \"Vote is online\");\r\n        require(votes[boatState].voters > 0, \"No one voted this week\");\r\n\r\n        if(votes[boatState].agreeToAvg > 0){\r\n            votes[boatState].finalPrice = votes[boatState].avg;\r\n        }\r\n\r\n        votes[boatState].voters = 0;\r\n        votes[boatState].priceSum = 0;\r\n        votes[boatState].avg = 0;\r\n        votes[boatState].agreeToAvg = 0;\r\n    }\r\n\r\n    function setVoteDetails(uint8 boatState, TypeVote memory vote) public onlyGameManager {\r\n        votes[boatState] = vote;\r\n    }\r\n\r\n    function setFinalPrice(uint8 boatState, uint256 finalPrice) public onlyGameManager {\r\n        votes[boatState].finalPrice = finalPrice;\r\n    }\r\n\r\n    function setPriceSum(uint8 boatState, uint256 priceSum) public onlyGameManager {\r\n        votes[boatState].priceSum = priceSum;\r\n    }\r\n    \r\n    function setAvg(uint8 boatState, uint256 avg) public onlyGameManager {\r\n        votes[boatState].avg = avg;\r\n    }\r\n\r\n    function setVoters(uint8 boatState, uint16 voters) public onlyGameManager {\r\n        votes[boatState].voters = voters;\r\n    }\r\n    \r\n    function setAgreeToAvg(uint8 boatState, int16 agreeToAvg) public onlyGameManager {\r\n        votes[boatState].agreeToAvg = agreeToAvg;\r\n    }\r\n\r\n    function setVote1(uint16 tokenId, uint256 vote1) public onlyGameManager {\r\n        boatsDetails[tokenId].vote1 = vote1;\r\n    }\r\n\r\n    function setVote2(uint16 tokenId, bool vote2) public onlyGameManager {\r\n        boatsDetails[tokenId].vote2 = vote2;\r\n    }\r\n    \r\n    function setTimestampVoted1(uint16 tokenId, uint48 timestampVoted1) public onlyGameManager {\r\n        boatsDetails[tokenId].timestampVoted1 = timestampVoted1;\r\n    }\r\n    \r\n    function setTimestampVoted2(uint16 tokenId, uint48 timestampVoted2) public onlyGameManager {\r\n        boatsDetails[tokenId].timestampVoted2 = timestampVoted2;\r\n    }\r\n    \r\n    /*\r\n        GETTERS\r\n    */\r\n\r\n    function getBoatDetails(uint16 idx) public override view returns(BoatData memory){\r\n        return boatsDetails[idx];\r\n    }\r\n    \r\n    function getVoteDetails(uint8 boatState) public view returns(TypeVote memory){\r\n        return votes[boatState];\r\n    }\r\n\r\n    function getAveragePrice(uint8 boatState) public view returns(uint256){\r\n        return votes[boatState].avg;\r\n    }\r\n\r\n    function getPrice(uint8 boatState) public view returns(uint256){\r\n        return votes[boatState].finalPrice;\r\n    }\r\n\r\n    function getLastVoteTime(uint8 voteType) public override view returns(int){\r\n        return getVoteTimeByDate(block.timestamp, voteType);\r\n    }\r\n\r\n    function getVoteTimeByDate(uint256 timestamp, uint8 voteType) public override view returns (int){\r\n        int8 voteDay = voteType == 1 ? voteDay1 : voteDay2;\r\n\r\n        int8 delta = voteDay - int8(KWWUtils.getWeekday(timestamp));\r\n        if(delta > 0) delta = delta - 7;\r\n        int date = (int(timestamp) + delta * int64(KWWUtils.DAY_IN_SECONDS));\r\n        return  date - date % int64(KWWUtils.DAY_IN_SECONDS);\r\n    }\r\n\r\n    function getCurrentVoteEndTime() public view returns(int256) {\r\n        uint8 onlineVote = getCurrentOnlineVote();\r\n\r\n        if(onlineVote == 1){\r\n            return getLastVoteTime(1) + int64(durationHours * KWWUtils.HOUR_IN_SECONDS);\r\n        }\r\n        \r\n        if(onlineVote == 2){\r\n            return getLastVoteTime(2) + int64(durationHours * KWWUtils.HOUR_IN_SECONDS);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getCurrentOnlineVote() public override view returns (uint8) {\r\n        int lastVote1 = getLastVoteTime(1);\r\n        int lastVote2 = getLastVoteTime(2);\r\n\r\n        //Vote1 Time\r\n        if(lastVote1 > lastVote2 && lastVote1 + int64(durationHours * KWWUtils.HOUR_IN_SECONDS) > int(block.timestamp)){\r\n            return 1;\r\n        }\r\n\r\n        if(lastVote2 + int64(durationHours * KWWUtils.HOUR_IN_SECONDS) > int(block.timestamp)){\r\n            return 2;\r\n        }\r\n\r\n        return 0;\r\n    }    \r\n\r\n    /*\r\n        MODIFIERS\r\n    */\r\n\r\n    modifier onlyGameManager() {\r\n        require(gameManager != address(0), \"Game manager not exists\");\r\n        require(msg.sender == owner() || msg.sender == gameManager, \"caller is not the game manager\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n        ONLY OWNER\r\n    */\r\n\r\n    function setVoteDay1(uint8 newDay) public override onlyOwner {\r\n      voteDay1 = int8(newDay);\r\n    }\r\n\r\n    function setVoteDay2(uint8 newDay) public override onlyOwner {\r\n      voteDay2 = int8(newDay);\r\n    }\r\n\r\n    function setDurationHours(uint8 newHours) public override onlyOwner {\r\n        require(newHours > 0, \"Must be more than 0 and less than time between votes\");\r\n        durationHours = newHours;\r\n    }\r\n\r\n    function setGameManager(address _newAddress) public onlyOwner{\r\n        gameManager = _newAddress;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"boatsDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vote1\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted1\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted2\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"vote2\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysBetweenVotes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationHours\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"getAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"idx\",\"type\":\"uint16\"}],\"name\":\"getBoatDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vote1\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted1\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted2\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"vote2\",\"type\":\"bool\"}],\"internalType\":\"struct IBoatsVoting.BoatData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentOnlineVote\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentVoteEndTime\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"voteType\",\"type\":\"uint8\"}],\"name\":\"getLastVoteTime\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"getVoteDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avg\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"voters\",\"type\":\"uint16\"},{\"internalType\":\"int16\",\"name\":\"agreeToAvg\",\"type\":\"int16\"}],\"internalType\":\"struct IBoatsVoting.TypeVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"voteType\",\"type\":\"uint8\"}],\"name\":\"getVoteTimeByDate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"makeVote1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"makeVote2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"int16\",\"name\":\"agreeToAvg\",\"type\":\"int16\"}],\"name\":\"setAgreeToAvg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"avg\",\"type\":\"uint256\"}],\"name\":\"setAvg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"idx\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vote1\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted1\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted2\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"vote2\",\"type\":\"bool\"}],\"internalType\":\"struct IBoatsVoting.BoatData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"setBoatDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newHours\",\"type\":\"uint8\"}],\"name\":\"setDurationHours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"}],\"name\":\"setFinalPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"}],\"name\":\"setPriceSum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted1\",\"type\":\"uint48\"}],\"name\":\"setTimestampVoted1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"timestampVoted2\",\"type\":\"uint48\"}],\"name\":\"setTimestampVoted2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"vote1\",\"type\":\"uint256\"}],\"name\":\"setVote1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"vote2\",\"type\":\"bool\"}],\"name\":\"setVote2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDay\",\"type\":\"uint8\"}],\"name\":\"setVoteDay1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDay\",\"type\":\"uint8\"}],\"name\":\"setVoteDay2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avg\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"voters\",\"type\":\"uint16\"},{\"internalType\":\"int16\",\"name\":\"agreeToAvg\",\"type\":\"int16\"}],\"internalType\":\"struct IBoatsVoting.TypeVote\",\"name\":\"vote\",\"type\":\"tuple\"}],\"name\":\"setVoteDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"voters\",\"type\":\"uint16\"}],\"name\":\"setVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDay1\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDay2\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avg\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"voters\",\"type\":\"uint16\"},{\"internalType\":\"int16\",\"name\":\"agreeToAvg\",\"type\":\"int16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KWWBoatsVoting", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "KWWUtils:44a7b7f1f1fec9f85924614f0e8a3ca26000a6da", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f707f7f8f9ebb3464f53a333bb3a80a6aaf6b2844d348c99cac0a09323e7b4c"}]}