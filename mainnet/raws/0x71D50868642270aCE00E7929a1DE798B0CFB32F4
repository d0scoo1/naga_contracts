{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConvexBoosterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./convex/ConvexInterfacesV2.sol\\\";\\nimport \\\"./common/IVirtualBalanceWrapper.sol\\\";\\n\\ncontract ConvexBoosterV2 is Initializable, ReentrancyGuard, IConvexBoosterV2 {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // https://curve.readthedocs.io/registry-address-provider.html\\n    ICurveAddressProvider public curveAddressProvider;\\n\\n    address public constant ZERO_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public convexRewardFactory;\\n    address public virtualBalanceWrapperFactory;\\n    address public originConvexBooster;\\n    address public rewardCrvToken;\\n    address public rewardCvxToken;\\n    uint256 public version;\\n\\n    address public lendingMarket;\\n    address public owner;\\n    address public governance;\\n\\n    struct PoolInfo {\\n        uint256 originConvexPid;\\n        address curveSwapAddress; /* like 3pool https://github.com/curvefi/curve-js/blob/master/src/constants/abis/abis-ethereum.ts */\\n        address lpToken;\\n        address originCrvRewards;\\n        address originStash;\\n        address virtualBalance;\\n        address rewardCrvPool;\\n        address rewardCvxPool;\\n        bool shutdown;\\n    }\\n\\n    struct MetaPoolInfo {\\n        address swapAddress;\\n        address zapAddress;\\n        address basePoolAddress;\\n        bool isMeta;\\n        bool isMetaFactory;\\n    }\\n\\n    struct MovingLeverage {\\n        uint256 prev;\\n        uint256 origin;\\n    }\\n\\n    PoolInfo[] public override poolInfo;\\n\\n    mapping(uint256 => mapping(address => uint256)) public frozenTokens; // pid => (user => amount)\\n    mapping(address => MetaPoolInfo) public metaPoolInfo;\\n    mapping(uint256 => mapping(int128 => MovingLeverage)) public movingLeverages; // pid =>(coin id => MovingLeverage)\\n\\n    event Deposited(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Initialized(address indexed thisAddress);\\n    event ToggleShutdownPool(uint256 pid, bool shutdown);\\n    event SetOwner(address owner);\\n    event SetGovernance(address governance);\\n    event CurveZap(address lpToken, address curveZapAddress);\\n    event SetLendingMarket(address lendingMarket);\\n    event AddConvexPool(uint256 originConvexPid, address lpToken, address curveSwapAddress);\\n    event RemoveLiquidity(address lpToken, address curveSwapAddress, uint256 amount, int128 coinId);\\n    event ClaimRewardToken(uint256 pid, bool remarkTag);\\n    event SetOriginMovingLeverage(uint256 pid, int128 curveCoinId, uint256 base, uint256 current, uint256 blockNumber);\\n    event UpdateMovingLeverage(uint256 pid, int128 curveCoinId, uint256 prev, uint256 current);\\n    event UpgradeRewards(uint256 pid, address oldRewardCrvPool, address newRewardCrvPool, address extraRewardToken, address extraRewardPool);\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"ConvexBooster: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(governance == msg.sender, \\\"ConvexBooster: caller is not the governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyLendingMarket() {\\n        require(lendingMarket == msg.sender, \\\"ConvexBooster: caller is not the lendingMarket\\\");\\n\\n        _;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n\\n        emit SetOwner(_owner);\\n    }\\n\\n    /* \\n    The default governance user is GenerateLendingPools contract.\\n    It will be set to DAO in the future \\n    */\\n    function setGovernance(address _governance) public onlyOwner {\\n        governance = _governance;\\n\\n        emit SetGovernance(_governance);\\n    }\\n\\n    function setLendingMarket(address _v) public onlyOwner {\\n        require(_v != address(0), \\\"!_v\\\");\\n\\n        lendingMarket = _v;\\n\\n        emit SetLendingMarket(lendingMarket);\\n    }\\n\\n    // @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() public initializer {}\\n\\n    function initialize(\\n        address _owner,\\n        address _originConvexBooster,\\n        address _convexRewardFactory,\\n        address _virtualBalanceWrapperFactory,\\n        address _rewardCrvToken,\\n        address _rewardCvxToken\\n    ) public initializer {\\n        owner = _owner;\\n        governance = _owner;\\n        convexRewardFactory = _convexRewardFactory;\\n        originConvexBooster = _originConvexBooster;\\n        virtualBalanceWrapperFactory = _virtualBalanceWrapperFactory;\\n        rewardCrvToken = _rewardCrvToken;\\n        rewardCvxToken = _rewardCvxToken;\\n        version = 1;\\n\\n        curveAddressProvider = ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n        emit Initialized(address(this));\\n    }\\n\\n    function _addConvexPool(\\n        uint256 _originConvexPid,\\n        address _lpToken,\\n        address _originCrvRewards,\\n        address _originStash,\\n        address _curveSwapAddress\\n    ) internal {\\n        address virtualBalance = IVirtualBalanceWrapperFactory(virtualBalanceWrapperFactory).createWrapper(address(this));\\n        address rewardCrvPool = IConvexRewardFactoryV2(convexRewardFactory).createReward(rewardCrvToken, virtualBalance, address(this), address(this));\\n        address rewardCvxPool = IConvexRewardFactoryV2(convexRewardFactory).createReward(rewardCvxToken, virtualBalance, address(this), address(this));\\n        uint256 extraRewardsLength = IOriginConvexRewardPool(_originCrvRewards).extraRewardsLength();\\n\\n        for (uint256 i = 0; i < extraRewardsLength; i++) {\\n            address extraReward = IOriginConvexRewardPool(_originCrvRewards).extraRewards(i);\\n            address extraRewardPool = IConvexRewardFactoryV2(convexRewardFactory).createReward(\\n                IOriginConvexRewardPool(extraReward).rewardToken(),\\n                virtualBalance,\\n                rewardCrvPool,\\n                address(this)\\n            );\\n\\n            IConvexRewardPool(rewardCrvPool).addExtraReward(extraRewardPool);\\n        }\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                originConvexPid: _originConvexPid,\\n                curveSwapAddress: _curveSwapAddress,\\n                lpToken: _lpToken,\\n                originCrvRewards: _originCrvRewards,\\n                originStash: _originStash,\\n                virtualBalance: virtualBalance,\\n                rewardCrvPool: rewardCrvPool,\\n                rewardCvxPool: rewardCvxPool,\\n                shutdown: false\\n            })\\n        );\\n\\n        emit AddConvexPool(_originConvexPid, _lpToken, _curveSwapAddress);\\n    }\\n\\n    function addConvexPool(uint256 _originConvexPid) public override onlyGovernance {\\n        (address lpToken, , , address originCrvRewards, address originStash, bool shutdown) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n            _originConvexPid\\n        );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n        require(lpToken != address(0), \\\"!lpToken\\\");\\n\\n        ICurveRegistry registry = ICurveRegistry(ICurveAddressProvider(curveAddressProvider).get_registry());\\n\\n        address curveSwapAddress = registry.get_pool_from_lp_token(lpToken);\\n\\n        _addConvexPool(_originConvexPid, lpToken, originCrvRewards, originStash, curveSwapAddress);\\n    }\\n\\n    // Reference https://curve.readthedocs.io/ref-addresses.html?highlight=zap#deposit-zaps\\n    function addConvexPool(\\n        uint256 _originConvexPid,\\n        address _curveSwapAddress,\\n        address _curveZapAddress,\\n        address _basePoolAddress,\\n        bool _isMeta,\\n        bool _isMetaFactory\\n    ) public override onlyGovernance {\\n        require(_curveSwapAddress != address(0), \\\"!_curveSwapAddress\\\");\\n        require(_curveZapAddress != address(0), \\\"!_curveZapAddress\\\");\\n        require(_basePoolAddress != address(0), \\\"!_basePoolAddress\\\");\\n\\n        (address lpToken, , , address originCrvRewards, address originStash, bool shutdown) = IOriginConvexBooster(originConvexBooster).poolInfo(\\n            _originConvexPid\\n        );\\n\\n        require(!shutdown, \\\"!shutdown\\\");\\n        require(lpToken != address(0), \\\"!lpToken\\\");\\n\\n        metaPoolInfo[lpToken] = MetaPoolInfo(_curveSwapAddress, _curveZapAddress, _basePoolAddress, _isMeta, _isMetaFactory);\\n\\n        _addConvexPool(_originConvexPid, lpToken, originCrvRewards, originStash, _curveSwapAddress);\\n\\n        emit CurveZap(lpToken, _curveZapAddress);\\n    }\\n\\n    function toggleShutdownPool(uint256 _pid) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        pool.shutdown = !pool.shutdown;\\n\\n        emit ToggleShutdownPool(_pid, pool.shutdown);\\n    }\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) public override onlyLendingMarket nonReentrant returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        claimRewardToken(_pid);\\n\\n        IERC20(pool.lpToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        /* (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        ) */\\n        (, , , , , bool shutdown) = IOriginConvexBooster(originConvexBooster).poolInfo(pool.originConvexPid);\\n\\n        require(!shutdown, \\\"!convex shutdown\\\");\\n        require(!pool.shutdown, \\\"!shutdown\\\");\\n\\n        IERC20(pool.lpToken).safeApprove(originConvexBooster, 0);\\n        IERC20(pool.lpToken).safeApprove(originConvexBooster, _amount);\\n\\n        IOriginConvexBooster(originConvexBooster).deposit(pool.originConvexPid, _amount, true);\\n\\n        IConvexRewardPool(pool.rewardCrvPool).stake(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).stake(_user);\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).stakeFor(_user, _amount);\\n\\n        emit Deposited(_user, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdrawFrozenTokens(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(_amount > 0, \\\"!_amount\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        frozenTokens[_pid][msg.sender] = frozenTokens[_pid][msg.sender].sub(_amount);\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(_amount, true);\\n\\n        IERC20(pool.lpToken).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function withdrawFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user,\\n        bool _frozenTokens\\n    ) public override onlyLendingMarket nonReentrant returns (bool) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (_frozenTokens) {\\n            frozenTokens[_pid][_user] = frozenTokens[_pid][_user].add(_amount);\\n        } else {\\n            IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(_amount, true);\\n\\n            IERC20(pool.lpToken).safeTransfer(_user, _amount);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);\\n        }\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);\\n\\n        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);\\n\\n        emit Withdrawn(_user, _pid, _amount);\\n\\n        return true;\\n    }\\n\\n    function _removeLiquidity(\\n        address _lpToken,\\n        address _curveSwapAddress,\\n        uint256 _amount,\\n        int128 _coinId\\n    ) internal {\\n        if (metaPoolInfo[_lpToken].zapAddress != address(0)) {\\n            if (metaPoolInfo[_lpToken].isMetaFactory) {\\n                ICurveSwapV2(metaPoolInfo[_lpToken].zapAddress).remove_liquidity_one_coin(_lpToken, _amount, _coinId, 0);\\n\\n                emit RemoveLiquidity(_lpToken, _curveSwapAddress, _amount, _coinId);\\n\\n                return;\\n            }\\n        }\\n\\n        ICurveSwapV2(_curveSwapAddress).remove_liquidity_one_coin(_amount, _coinId, 0);\\n\\n        emit RemoveLiquidity(_lpToken, _curveSwapAddress, _amount, _coinId);\\n    }\\n\\n    function liquidate(\\n        uint256 _pid,\\n        int128 _coinId,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyLendingMarket nonReentrant returns (address, uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(_amount, true);\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);\\n        }\\n\\n        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);\\n\\n        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);\\n        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);\\n\\n        IERC20(pool.lpToken).safeApprove(pool.curveSwapAddress, 0);\\n        IERC20(pool.lpToken).safeApprove(pool.curveSwapAddress, _amount);\\n\\n        address underlyToken;\\n\\n        if (metaPoolInfo[pool.lpToken].zapAddress != address(0)) {\\n            if (\\n                metaPoolInfo[pool.lpToken].swapAddress == metaPoolInfo[pool.lpToken].basePoolAddress ||\\n                (!metaPoolInfo[pool.lpToken].isMeta && !metaPoolInfo[pool.lpToken].isMetaFactory) ||\\n                _coinId == 0\\n            ) {\\n                underlyToken = _coins(pool.curveSwapAddress, _coinId);\\n            } else {\\n                underlyToken = _coins(metaPoolInfo[pool.lpToken].basePoolAddress, _coinId - 1);\\n            }\\n        } else {\\n            underlyToken = _coins(pool.curveSwapAddress, _coinId);\\n        }\\n\\n        _removeLiquidity(pool.lpToken, pool.curveSwapAddress, _amount, _coinId);\\n\\n        if (underlyToken == ZERO_ADDRESS) {\\n            uint256 totalAmount = address(this).balance;\\n\\n            msg.sender.sendValue(totalAmount);\\n\\n            return (ZERO_ADDRESS, totalAmount);\\n        } else {\\n            uint256 totalAmount = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(msg.sender, totalAmount);\\n\\n            return (underlyToken, totalAmount);\\n        }\\n    }\\n\\n    function getRewards(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (IConvexRewardPool(pool.rewardCrvPool).earned(msg.sender) > 0) {\\n            IConvexRewardPool(pool.rewardCrvPool).getReward(msg.sender);\\n        }\\n\\n        if (IConvexRewardPool(pool.rewardCvxPool).earned(msg.sender) > 0) {\\n            IConvexRewardPool(pool.rewardCvxPool).getReward(msg.sender);\\n        }\\n    }\\n\\n    function claimRewardToken(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (pool.shutdown) return;\\n\\n        // If convex updates the extra contract, it need remark contract.\\n        bool remarkTag = false;\\n        uint256 extraRewardsLength = IConvexRewardPool(pool.rewardCrvPool).extraRewardsLength();\\n        uint256 originExtraRewardsLength = IOriginConvexRewardPool(pool.originCrvRewards).extraRewardsLength();\\n\\n        if (extraRewardsLength == originExtraRewardsLength) {\\n            IOriginConvexRewardPool(pool.originCrvRewards).getReward(address(this), true);\\n\\n            for (uint256 i = 0; i < extraRewardsLength; i++) {\\n                address currentExtraReward = IConvexRewardPool(pool.rewardCrvPool).extraRewards(i);\\n                address originExtraReward = IOriginConvexRewardPool(pool.originCrvRewards).extraRewards(i);\\n                address originExtraRewardToken = IOriginConvexVirtualBalanceRewardPool(originExtraReward).rewardToken();\\n\\n                IOriginConvexVirtualBalanceRewardPool(originExtraReward).getReward(address(this));\\n\\n                uint256 extraBalance = IERC20(originExtraRewardToken).balanceOf(address(this));\\n                if (extraBalance > 0) {\\n                    IERC20(originExtraRewardToken).safeTransfer(currentExtraReward, extraBalance);\\n                    IConvexRewardPool(currentExtraReward).notifyRewardAmount(extraBalance);\\n                }\\n            }\\n        } else {\\n            remarkTag = true;\\n            IOriginConvexRewardPool(pool.originCrvRewards).getReward(address(this), false);\\n        }\\n\\n        uint256 crvBalance = IERC20(rewardCrvToken).balanceOf(address(this));\\n\\n        if (crvBalance > 0) {\\n            IERC20(rewardCrvToken).safeTransfer(pool.rewardCrvPool, crvBalance);\\n\\n            IConvexRewardPool(pool.rewardCrvPool).notifyRewardAmount(crvBalance);\\n        }\\n\\n        /* cvx */\\n        uint256 cvxBal = IERC20(rewardCvxToken).balanceOf(address(this));\\n\\n        if (cvxBal > 0) {\\n            IERC20(rewardCvxToken).safeTransfer(pool.rewardCvxPool, cvxBal);\\n\\n            IConvexRewardPool(pool.rewardCvxPool).notifyRewardAmount(cvxBal);\\n        }\\n\\n        emit ClaimRewardToken(_pid, remarkTag);\\n    }\\n\\n    function claimAllRewardToken() public {\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            claimRewardToken(i);\\n        }\\n    }\\n\\n    function remarkRewards(address[] calldata oldCrvPools, uint256[] calldata _pids) public {\\n        require(oldCrvPools.length >= _pids.length, \\\"!oldCrvPools\\\");\\n\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            PoolInfo storage pool = poolInfo[_pids[i]];\\n\\n            address currentOldCrvPools = oldCrvPools[_pids[i]];\\n\\n            if (pool.rewardCrvPool != currentOldCrvPools) {\\n                if (IConvexRewardPool(currentOldCrvPools).earned(msg.sender) > 0) {\\n                    IConvexRewardPool(currentOldCrvPools).getReward(msg.sender);\\n                }\\n\\n                IConvexRewardPool(currentOldCrvPools).withdraw(msg.sender);\\n                IConvexRewardPoolV2(pool.rewardCrvPool).stake(msg.sender);\\n            }\\n        }\\n    }\\n\\n    function upgradeRewards(uint256[] calldata _pids) public onlyOwner {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            PoolInfo storage pool = poolInfo[_pids[i]];\\n\\n            address oldRewardCrvPool = pool.rewardCrvPool;\\n            address newRewardCrvPool = IConvexRewardFactoryV2(convexRewardFactory).createReward(\\n                rewardCrvToken,\\n                pool.virtualBalance,\\n                address(this),\\n                address(this)\\n            );\\n\\n            pool.rewardCrvPool = newRewardCrvPool;\\n\\n            uint256 extraRewardsLength = IOriginConvexRewardPool(pool.originCrvRewards).extraRewardsLength();\\n\\n            for (uint256 j = 0; j < extraRewardsLength; j++) {\\n                address extraReward = IOriginConvexRewardPool(pool.originCrvRewards).extraRewards(j);\\n                address extraRewardPool = IConvexRewardFactoryV2(convexRewardFactory).createReward(\\n                    IOriginConvexRewardPool(extraReward).rewardToken(),\\n                    pool.virtualBalance,\\n                    newRewardCrvPool,\\n                    address(this)\\n                );\\n\\n                IConvexRewardPool(newRewardCrvPool).addExtraReward(extraRewardPool);\\n\\n                emit UpgradeRewards(_pids[i], oldRewardCrvPool, newRewardCrvPool, extraReward, extraRewardPool);\\n            }\\n        }\\n    }\\n\\n    function updateMovingLeverage(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) public override onlyLendingMarket returns (uint256) {\\n        MovingLeverage storage movingLeverage = movingLeverages[_pid][_curveCoinId];\\n\\n        uint256 amount = calculateTokenAmount(_pid, _tokens, _curveCoinId);\\n        uint256 current = amount.mul(1e18).div(_tokens);\\n\\n        if (0 == movingLeverage.origin) {\\n            movingLeverage.origin = IMovingLeverageBase(0xd132C63A09fccfeF56b88c5ACa8Ecbb63F814A46).get(_pid, _curveCoinId);\\n        }\\n\\n        require(movingLeverage.origin > 0, \\\"!Origin need to update\\\");\\n\\n        uint256 originScalePercent = getMovingLeverageScale(movingLeverage.origin, current);\\n\\n        originScalePercent = originScalePercent.mul(1000).div(1e18);\\n\\n        // <= 10%\\n        require(originScalePercent <= 100, \\\"!Origin scale exceeded\\\");\\n\\n        if (movingLeverage.prev > 0) {\\n            uint256 prevScalePercent = getMovingLeverageScale(movingLeverage.prev, current);\\n\\n            prevScalePercent = prevScalePercent.mul(1000).div(1e18);\\n\\n            // <= 5%\\n            require(prevScalePercent <= 50, \\\"!Prev scale exceeded\\\");\\n        }\\n\\n        movingLeverage.prev = current;\\n\\n        emit UpdateMovingLeverage(_pid, _curveCoinId, movingLeverage.prev, current);\\n\\n        return amount;\\n    }\\n\\n    function setOriginMovingLeverage(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) public onlyOwner {\\n        require(_tokens >= 10e18, \\\"!Tokens is too small\\\");\\n\\n        MovingLeverage storage movingLeverage = movingLeverages[_pid][_curveCoinId];\\n\\n        uint256 amount = calculateTokenAmount(_pid, _tokens, _curveCoinId);\\n\\n        uint256 oldLeverage = movingLeverage.origin;\\n        uint256 newLeverage = amount.mul(1e18).div(_tokens);\\n\\n        movingLeverage.origin = newLeverage;\\n\\n        emit SetOriginMovingLeverage(_pid, _curveCoinId, oldLeverage, newLeverage, block.timestamp);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /* view functions */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function getPoolToken(uint256 _pid) external view override returns (address) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return pool.lpToken;\\n    }\\n\\n    function getPoolZapAddress(address _lpToken) external view override returns (address) {\\n        return metaPoolInfo[_lpToken].zapAddress;\\n    }\\n\\n    function _coins(address _swapAddress, int128 _coinId) internal view returns (address) {\\n        // curve v1 base pool\\n        address susd = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n        address sbtc = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\\n        address ren = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\\n\\n        if (_swapAddress == susd || _swapAddress == sbtc || _swapAddress == ren) {\\n            return ICurveSwapV2(_swapAddress).coins(_coinId);\\n        }\\n\\n        return ICurveSwapV2(_swapAddress).coins(uint256(_coinId));\\n    }\\n\\n    function getMovingLeverageScale(uint256 _base, uint256 _current) internal pure returns (uint256) {\\n        if (_base >= _current) {\\n            return _base.sub(_current).mul(1e18).div(_base);\\n        }\\n\\n        return _current.sub(_base).mul(1e18).div(_base);\\n    }\\n\\n    function calculateTokenAmount(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) public view override returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (metaPoolInfo[pool.lpToken].zapAddress != address(0)) {\\n            if (metaPoolInfo[pool.lpToken].isMetaFactory) {\\n                return ICurveSwapV2(metaPoolInfo[pool.lpToken].zapAddress).calc_withdraw_one_coin(pool.curveSwapAddress, _tokens, _curveCoinId);\\n            }\\n\\n            return ICurveSwapV2(metaPoolInfo[pool.lpToken].zapAddress).calc_withdraw_one_coin(_tokens, _curveCoinId);\\n        }\\n\\n        return ICurveSwapV2(pool.curveSwapAddress).calc_withdraw_one_coin(_tokens, _curveCoinId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/ConvexInterfacesV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./ConvexInterfaces.sol\\\";\\nimport \\\"./IConvexBoosterV2.sol\\\";\\n\\ninterface ICurveSwapV2 is ICurveSwap {\\n    // function remove_liquidity_one_coin(\\n    //     uint256 _token_amount,\\n    //     int128 _i,\\n    //     uint256 _min_amount\\n    // ) external override;\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 _i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    // function coins(uint256 _coinId) external view returns(address); in ICurveSwap\\n    function coins(int128 _coinId) external view returns (address);\\n\\n    function balances(uint256 _coinId) external view override returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _tokenAmount, int128 _tokenId) external view returns (uint256);\\n\\n    /* factory */\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _tokenAmount,\\n        int128 _tokenId\\n    ) external view returns (uint256);\\n}\\n\\ninterface IConvexRewardPoolV2 is IConvexRewardPool {\\n    function clearExtraRewards() external;\\n\\n    function rewardToken() external returns (address);\\n\\n    function userRewardPerTokenPaid(address) external returns (uint256);\\n\\n    function rewards(address) external returns (uint256);\\n}\\n\\ninterface IConvexRewardFactoryV2 is IConvexRewardFactory {\\n    function createReward(address _reward, address _virtualBalance, address _depositer,address _owner) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/common/IVirtualBalanceWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IVirtualBalanceWrapperFactory {\\n    function createWrapper(address _op) external returns (address);\\n}\\n\\ninterface IVirtualBalanceWrapper {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function stakeFor(address _for, uint256 _amount) external returns (bool);\\n    function withdrawFor(address _for, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/ConvexInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./IConvexBooster.sol\\\";\\n\\ninterface IOriginConvexBooster {\\n    function deposit( uint256 _pid, uint256 _amount, bool _stake ) external returns (bool);\\n    function withdraw(uint256 _pid, uint256 _amount) external returns(bool);\\n    function claimStashToken(address _token, address _rewardAddress, address _lfRewardAddress, uint256 _rewards) external;\\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\\n    function isShutdown() external view returns(bool);\\n    function minter() external view returns(address);\\n    function earmarkRewards(uint256) external returns(bool);\\n}\\n\\ninterface IOriginConvexRewardPool {\\n    function getReward() external returns(bool);\\n    function getReward(address _account, bool _claimExtras) external returns(bool);\\n    function withdrawAllAndUnwrap(bool claim) external;\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\\n    function withdrawAll(bool claim) external;\\n    function withdraw(uint256 amount, bool claim) external returns(bool);\\n    function stakeFor(address _for, uint256 _amount) external returns(bool);\\n    function stakeAll() external returns(bool);\\n    function stake(uint256 _amount) external returns(bool);\\n    function earned(address account) external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function rewardToken() external returns(address);\\n    function extraRewards(uint256 _idx) external view returns (address);\\n    function extraRewardsLength() external view returns (uint256);\\n}\\n\\ninterface IOriginConvexVirtualBalanceRewardPool {\\n    function getReward(address _account) external;\\n    function getReward() external;\\n    function rewardToken() external returns(address);\\n}\\n\\ninterface IConvexRewardPool {\\n    function earned(address account) external view returns (uint256);\\n    function stake(address _for) external;\\n    function withdraw(address _for) external;\\n    function getReward(address _for) external;\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function extraRewards(uint256 _idx) external view returns (address);\\n    function extraRewardsLength() external view returns (uint256);\\n    function addExtraReward(address _reward) external returns(bool);\\n}\\n\\ninterface IConvexRewardFactory {\\n    function createReward(address _reward, address _virtualBalance, address _operator) external returns (address);\\n}\\n\\ninterface ICurveSwap {\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\\n    /* function remove_liquidity(uint256 _token_amount, uint256[] memory min_amounts) external; */\\n    function coins(uint256 _coinId) external view returns(address);\\n    function balances(uint256 _coinId) external view returns(uint256);\\n}\\n\\ninterface ICurveAddressProvider{\\n    function get_registry() external view returns(address);\\n    function get_address(uint256 _id) external view returns(address);\\n}\\n\\ninterface ICurveRegistry{\\n    function gauge_controller() external view returns(address);\\n    function get_lp_token(address) external view returns(address);\\n    function get_pool_from_lp_token(address) external view returns(address);\\n    function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\\n}\"\r\n    },\r\n    \"contracts/convex/IConvexBoosterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./IConvexBooster.sol\\\";\\n\\ninterface IConvexBoosterV2 is IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external override returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external override returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external override returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external override;\\n\\n    function addConvexPool(\\n        uint256 _originConvexPid,\\n        address _curveSwapAddress,\\n        address _curveZapAddress,\\n        address _basePoolAddress,\\n        bool _isMeta,\\n        bool _isMetaFactory\\n    ) external;\\n\\n    function getPoolZapAddress(address _lpToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function getPoolToken(uint256 _pid) external view returns (address);\\n\\n    function calculateTokenAmount(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) external view returns (uint256);\\n\\n    function updateMovingLeverage(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) external returns (uint256);\\n}\\n\\ninterface IMovingLeverageBase {\\n    function get(uint256 _pid, int128 _coinId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/convex/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originConvexPid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curveSwapAddress\",\"type\":\"address\"}],\"name\":\"AddConvexPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"remarkTag\",\"type\":\"bool\"}],\"name\":\"ClaimRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curveZapAddress\",\"type\":\"address\"}],\"name\":\"CurveZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thisAddress\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curveSwapAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"coinId\",\"type\":\"int128\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lendingMarket\",\"type\":\"address\"}],\"name\":\"SetLendingMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"curveCoinId\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"SetOriginMovingLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"name\":\"ToggleShutdownPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"curveCoinId\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"UpdateMovingLeverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRewardCrvPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardCrvPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"extraRewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"extraRewardPool\",\"type\":\"address\"}],\"name\":\"UpgradeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originConvexPid\",\"type\":\"uint256\"}],\"name\":\"addConvexPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originConvexPid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_curveSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveZapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMeta\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isMetaFactory\",\"type\":\"bool\"}],\"name\":\"addConvexPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_curveCoinId\",\"type\":\"int128\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexRewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveAddressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getPoolZapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originConvexBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexRewardFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_virtualBalanceWrapperFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardCrvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardCvxToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_coinId\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"metaPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMeta\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMetaFactory\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"name\":\"movingLeverages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originConvexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originConvexPid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"curveSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originCrvRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originStash\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"virtualBalance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardCrvPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardCvxPool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oldCrvPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"remarkRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCrvToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCvxToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v\",\"type\":\"address\"}],\"name\":\"setLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_curveCoinId\",\"type\":\"int128\"}],\"name\":\"setOriginMovingLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"toggleShutdownPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_curveCoinId\",\"type\":\"int128\"}],\"name\":\"updateMovingLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"upgradeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualBalanceWrapperFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_frozenTokens\",\"type\":\"bool\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrozenTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConvexBoosterV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}