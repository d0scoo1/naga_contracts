{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EthernalElves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\"; \\r\\nimport \\\"./DataStructures.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\"; \\r\\n\\r\\n// We are the Ethernal. The Ethernal Elves         \\r\\n// Written by 0xHusky & Beff Jezos. Everything is on-chain for all time to come.\\r\\n// Version 1.0.4\\r\\n//patch notes: ICY Patch and Items Patch\\r\\n\\r\\ncontract EthernalElvesV2 is ERC721 {\\r\\n\\r\\n    function name() external pure returns (string memory) { return \\\"Ethernal Elves\\\"; }\\r\\n    function symbol() external pure returns (string memory) { return \\\"ELV\\\"; }\\r\\n       \\r\\n    using DataStructures for DataStructures.ActionVariables;\\r\\n    using DataStructures for DataStructures.Elf;\\r\\n    using DataStructures for DataStructures.Token; \\r\\n\\r\\n    IElfMetaDataHandler elfmetaDataHandler;\\r\\n    ICampaigns campaigns;\\r\\n    IERC20Lite public ren;\\r\\n    \\r\\n    using ECDSA for bytes32;\\r\\n    \\r\\n//STATE   \\r\\n\\r\\n    bool public isGameActive;\\r\\n    bool public isMintOpen;\\r\\n    bool public isWlOpen;\\r\\n    bool private initialized;\\r\\n\\r\\n    address dev1Address;//Husky\\r\\n    address dev2Address;//Beff\\r\\n    address terminus;\\r\\n    address public validator;\\r\\n   \\r\\n    uint256 public INIT_SUPPLY; \\r\\n    uint256 public price;\\r\\n    bytes32 internal ketchup;\\r\\n    \\r\\n    uint256[] public _remaining; ////MAKE THIS PUBLIC\\r\\n    mapping(uint256 => uint256) public sentinels; //memory slot for Elfs\\r\\n    mapping(address => uint256) public bankBalances; //memory slot for bank balances\\r\\n    mapping(address => bool)    public auth;\\r\\n    mapping(address => uint16)  public whitelist; \\r\\n\\r\\n/////NEW STORAGE FROM THIS LINE///////////////////////////////////////////////////////\\r\\n\\r\\n   \\r\\n       function initialize(address _dev1Address, address _dev2Address) public {\\r\\n    \\r\\n       require(!initialized, \\\"Already initialized\\\");\\r\\n       admin                = msg.sender;   \\r\\n       dev1Address          = _dev1Address;\\r\\n       dev2Address          = _dev2Address;\\r\\n       maxSupply            = 6666; \\r\\n       INIT_SUPPLY          = 3300; \\r\\n       initialized          = true;\\r\\n       price                = .088 ether;  \\r\\n       _remaining           = [250,660,2500]; //[200, 600, 2500]; //this is the supply of each whitelist role\\r\\n       validator            = 0x80861814a8775de20F9506CF41932E95f80f7035;\\r\\n       \\r\\n    }\\r\\n\\r\\n    function setAddresses(address _ren, address _inventory, address _campaigns, address _validator)  public {\\r\\n       onlyOwner();\\r\\n       ren                  = IERC20Lite(_ren);\\r\\n       elfmetaDataHandler   = IElfMetaDataHandler(_inventory);\\r\\n       campaigns            = ICampaigns(_campaigns);\\r\\n       validator            = _validator;\\r\\n    }    \\r\\n    \\r\\n    \\r\\n    function setTerminus(address _terminus)  public {\\r\\n       onlyOwner();\\r\\n       terminus             = _terminus;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function setInitialSupply(uint256 _initialSupply)  public {\\r\\n       onlyOwner();\\r\\n       INIT_SUPPLY             = _initialSupply;\\r\\n    }\\r\\n\\r\\n    function setAuth(address[] calldata adds_, bool status) public {\\r\\n       onlyOwner();\\r\\n       \\r\\n        for (uint256 index = 0; index < adds_.length; index++) {\\r\\n            auth[adds_[index]] = status;\\r\\n        }\\r\\n    }\\r\\n\\r\\n//EVENTS\\r\\n\\r\\n    event Action(address indexed from, uint256 indexed action, uint256 indexed tokenId);         \\r\\n    event BalanceChanged(address indexed owner, uint256 indexed amount, bool indexed subtract);\\r\\n    event Campaigns(address indexed owner, uint256 amount, uint256 indexed campaign, uint256 sector, uint256 indexed tokenId);\\r\\n        \\r\\n//MINT\\r\\n//Whitelist permissions \\r\\n\\r\\nfunction encodeForSignature(address to, uint256 roleIndex) private pure returns (bytes32) {\\r\\n     return keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", \\r\\n                keccak256(\\r\\n                        abi.encodePacked(to, roleIndex))\\r\\n                        )\\r\\n                    );\\r\\n}       \\r\\n  \\r\\nfunction _isSignedByValidator(bytes32 _hash, bytes memory _signature) private view returns (bool) {\\r\\n    \\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n    uint8 v;\\r\\n           assembly {\\r\\n                r := mload(add(_signature, 0x20))\\r\\n                s := mload(add(_signature, 0x40))\\r\\n                v := byte(0, mload(add(_signature, 0x60)))\\r\\n            }\\r\\n        \\r\\n            address signer = ecrecover(_hash, v, r, s);\\r\\n            return signer == validator;\\r\\n  \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nfunction validSignature(address to, uint256 roleIndex, bytes memory _signature) public view returns (bool) {\\r\\n    \\r\\n    return _isSignedByValidator(encodeForSignature(to, roleIndex), _signature);\\r\\n\\r\\n}\\r\\n\\r\\nfunction receiveEth() public payable returns (string memory)  {\\r\\n\\r\\n    return (\\\"Received ETH\\\");\\r\\n}   \\r\\n\\r\\nfunction whitelistMint(uint256 qty, address to, uint256 roleIndex, bytes memory signature) public payable  {\\r\\n    \\r\\n    isPlayer();\\r\\n    require(_isSignedByValidator(encodeForSignature(to, roleIndex),signature), \\\"incorrect signature\\\");  /////Francesco Sullo Thanks for showing me how to do this. Follow @sullof\\r\\n    require(isWlOpen, \\\"Whitelist is closed\\\");\\r\\n    require(whitelist[to] != 1,\\\"Wallet used already\\\"); //not on whitelist\\r\\n    require(_remaining[roleIndex] > 0, \\\"noneLeft\\\");\\r\\n    require(qty > 0 && qty <= 2, \\\"max 2\\\"); //max 2\\r\\n    \\r\\n    /*Role:0 SOG 2 free Role:1 OG 1 free 1 paid Role:2 2 WL paid\\r\\n\\r\\n      bytes32 messageHash = encodeForSignature(to, roleIndex);\\r\\n      bool isValid = _isSignedByValidator(messageHash, signature);\\r\\n    \\r\\n        if(isValid){\\r\\n            console.log(\\\"valid\\\");\\r\\n        }\\r\\n    */\\r\\n\\r\\n    uint256 amount = msg.value;\\r\\n    \\r\\n    _remaining[roleIndex] = _remaining[roleIndex] - qty;\\r\\n\\r\\n    whitelist[to] = 1; //indicate that address is used\\r\\n\\r\\n        if(roleIndex == 0){\\r\\n            \\r\\n           for (uint i = 0; i < qty; i++) {\\r\\n                _mintElf(to);\\r\\n            }\\r\\n\\r\\n        }else if(roleIndex == 1){\\r\\n           \\r\\n            require(amount >= price * qty/2, \\\"NotEnoughEther\\\");\\r\\n            for (uint i = 0; i < qty; i++) {\\r\\n                _mintElf(to);\\r\\n            }\\r\\n\\r\\n        }else if(roleIndex == 2){\\r\\n             require(amount >= price * qty, \\\"NotEnoughEther\\\");\\r\\n             for (uint i = 0; i < qty; i++) {\\r\\n                _mintElf(to);\\r\\n             }\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n/////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function mint() external payable  returns (uint256 id) {\\r\\n        isPlayer();\\r\\n        require(isMintOpen, \\\"Minting is closed\\\");\\r\\n        uint256 cost;\\r\\n        (cost,) = getMintPriceLevel();\\r\\n        \\r\\n        if (totalSupply <= INIT_SUPPLY) {            \\r\\n             require(msg.value >= cost, \\\"NotEnoughEther\\\");\\r\\n        }else{\\r\\n            bankBalances[msg.sender] >= cost ? _setAccountBalance(msg.sender, cost, true) :  ren.burn(msg.sender, cost);\\r\\n        }\\r\\n\\r\\n        return _mintElf(msg.sender);\\r\\n\\r\\n    }\\r\\n\\r\\n//GAMEPLAY//\\r\\n\\r\\n    function unStake(uint256[] calldata ids) external  {\\r\\n          isPlayer();        \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 0, msg.sender, 0, 0, false, false, false, 0);\\r\\n          }\\r\\n    }\\r\\n\\r\\n    function sendCampaign(uint256[] calldata ids, uint256 campaign_, uint256 sector_, bool rollWeapons_, bool rollItems_, bool useitem_) external {\\r\\n          isPlayer();          \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 2, msg.sender, campaign_, sector_, rollWeapons_, rollItems_, useitem_, 1);\\r\\n          }\\r\\n    }\\r\\n\\r\\n/*NOTE Add in V2\\r\\n\\r\\n    function bloodThirst(uint256[] calldata ids, uint256 campaign_, uint256 sector_) external {\\r\\n          isPlayer();          \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 2, msg.sender, campaign_, sector_, false, false, false, 2);\\r\\n          }\\r\\n    }\\r\\n\\r\\n    function rampage(uint256[] calldata ids, uint256 campaign_, uint256 sector_) external {\\r\\n          isPlayer();          \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 2, msg.sender, campaign_, sector_, true, true, false, 3);\\r\\n          }\\r\\n    }\\r\\n\\r\\n*/\\r\\n    function passive(uint256[] calldata ids) external {\\r\\n          isPlayer();         \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 3, msg.sender, 0, 0, false, false, false, 0);\\r\\n          }\\r\\n    }\\r\\n\\r\\n    function returnPassive(uint256[] calldata ids) external  {\\r\\n          isPlayer();        \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 4, msg.sender, 0, 0, false, false, false, 0);\\r\\n          }\\r\\n    }\\r\\n\\r\\n    function forging(uint256[] calldata ids) external payable {\\r\\n          isPlayer();         \\r\\n        \\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 5, msg.sender, 0, 0, false, false, false, 0);\\r\\n          }\\r\\n    }\\r\\n\\r\\n    function merchant(uint256[] calldata ids) external payable {\\r\\n          isPlayer();   \\r\\n\\r\\n          for (uint256 index = 0; index < ids.length; index++) {  \\r\\n            _actions(ids[index], 6, msg.sender, 0, 0, false, false, false, 0);\\r\\n          }\\r\\n\\r\\n    }\\r\\n\\r\\n    function heal(uint256 healer, uint256 target) external {\\r\\n        isPlayer();\\r\\n        _actions(healer, 7, msg.sender, target, 0, false, false, false, 0);\\r\\n    }    \\r\\n\\r\\n\\r\\n    function withdrawTokenBalance() external {\\r\\n      \\r\\n        require(bankBalances[msg.sender] > 0, \\\"NoBalance\\\");\\r\\n        ren.mint(msg.sender, bankBalances[msg.sender]); \\r\\n        bankBalances[msg.sender] = 0;\\r\\n\\r\\n    }\\r\\n\\r\\n//INTERNALS\\r\\n    \\r\\n        function _mintElf(address _to) private returns (uint16 id) {\\r\\n        \\r\\n            uint256 rand = _rand();\\r\\n          \\r\\n            \\r\\n            {        \\r\\n                DataStructures.Elf memory elf;\\r\\n                id = uint16(totalSupply + 1);   \\r\\n                        \\r\\n                elf.owner = address(0);\\r\\n                elf.timestamp = block.timestamp;\\r\\n                \\r\\n                elf.action = elf.weaponTier = elf.inventory = 0;\\r\\n                \\r\\n                elf.primaryWeapon = 69; //69 is the default weapon - fists.\\r\\n\\r\\n                (,elf.level) = getMintPriceLevel();\\r\\n\\r\\n                elf.sentinelClass = uint16(_randomize(rand, \\\"Class\\\", id)) % 3;\\r\\n\\r\\n                elf.race = rand % 100 > 97 ? 3 : uint16(_randomize(rand, \\\"Race\\\", id)) % 3;\\r\\n\\r\\n                elf.hair = elf.race == 3 ? 0 : uint16(_randomize(rand, \\\"Hair\\\", id)) % 3;            \\r\\n\\r\\n                elf.accessories = elf.sentinelClass == 0 ? (uint16(_randomize(rand, \\\"Accessories\\\", id)) % 2) + 3 : uint16(_randomize(rand, \\\"Accessories\\\", id)) % 2; //2 accessories MAX 7 \\r\\n\\r\\n                uint256 _traits = DataStructures.packAttributes(elf.hair, elf.race, elf.accessories);\\r\\n                uint256 _class =  DataStructures.packAttributes(elf.sentinelClass, elf.weaponTier, elf.inventory);\\r\\n                \\r\\n                elf.healthPoints = DataStructures.calcHealthPoints(elf.sentinelClass, elf.level);\\r\\n                elf.attackPoints = DataStructures.calcAttackPoints(elf.sentinelClass, elf.weaponTier); \\r\\n\\r\\n            sentinels[id] = DataStructures._setElf(elf.owner, elf.timestamp, elf.action, elf.healthPoints, elf.attackPoints, elf.primaryWeapon, elf.level, _traits, _class);\\r\\n            \\r\\n            }\\r\\n                \\r\\n            _mint(_to, id);           \\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n        function _actions(\\r\\n            uint256 id_, \\r\\n            uint action, \\r\\n            address elfOwner, \\r\\n            uint256 campaign_, \\r\\n            uint256 sector_, \\r\\n            bool rollWeapons, \\r\\n            bool rollItems, \\r\\n            bool useItem, \\r\\n            uint256 gameMode_) \\r\\n        \\r\\n        private {\\r\\n\\r\\n            DataStructures.Elf memory elf = DataStructures.getElf(sentinels[id_]);\\r\\n            DataStructures.ActionVariables memory actions;\\r\\n            require(isGameActive);\\r\\n            require(ownerOf[id_] == msg.sender || elf.owner == msg.sender, \\\"NotYourElf\\\");\\r\\n\\r\\n            uint256 rand = _rand();\\r\\n                \\r\\n                if(action == 0){//Unstake if currently staked\\r\\n\\r\\n                    require(ownerOf[id_] == address(this));\\r\\n                    require(elf.timestamp < block.timestamp, \\\"elf busy\\\");\\r\\n\\r\\n                    _transfer(address(this), elfOwner, id_);      \\r\\n\\r\\n                    elf.owner = address(0);                            \\r\\n\\r\\n                }else if(action == 2){//campaign loop - bloodthirst and rampage mode loop.\\r\\n\\r\\n                    require(elf.timestamp < block.timestamp, \\\"elf busy\\\");\\r\\n                    require(elf.action != 3, \\\"exit passive mode first\\\");                 \\r\\n            \\r\\n                        if(ownerOf[id_] != address(this)){\\r\\n                        _transfer(elfOwner, address(this), id_);\\r\\n                        elf.owner = elfOwner;\\r\\n                        }\\r\\n \\r\\n                    (elf.level, actions.reward, elf.timestamp, elf.inventory) = campaigns.gameEngine(campaign_, sector_, elf.level, elf.attackPoints, elf.healthPoints, elf.inventory, useItem);\\r\\n                    \\r\\n                    uint256 options;\\r\\n                    if(rollWeapons && rollItems){\\r\\n                        options = 3;\\r\\n                        }else if(rollWeapons){\\r\\n                        options = 1;\\r\\n                        }else if(rollItems){\\r\\n                        options = 2;\\r\\n                        }else{\\r\\n                        options = 0;\\r\\n                    }\\r\\n                  \\r\\n                    if(options > 0){\\r\\n                       (elf.weaponTier, elf.primaryWeapon, elf.inventory) \\r\\n\\r\\n                                    = DataStructures.roll(id_, elf.level, _rand(), options, elf.weaponTier, elf.primaryWeapon, elf.inventory);                                    \\r\\n                                    \\r\\n                    }\\r\\n                    \\r\\n                    if(gameMode_ == 1 || gameMode_ == 2) _setAccountBalance(msg.sender, actions.reward, false);\\r\\n                    if(gameMode_ == 3) elf.level = elf.level + 1;\\r\\n                    \\r\\n                    emit Campaigns(msg.sender, actions.reward, campaign_, sector_, id_);\\r\\n\\r\\n                \\r\\n                }else if(action == 3){//passive campaign\\r\\n\\r\\n                    require(elf.timestamp < block.timestamp, \\\"elf busy\\\");\\r\\n                    \\r\\n                        if(ownerOf[id_] != address(this)){\\r\\n                            _transfer(elfOwner, address(this), id_);\\r\\n                            elf.owner = elfOwner;\\r\\n                         \\r\\n                        }\\r\\n\\r\\n                    elf.timestamp = block.timestamp; //set timestamp to current block time\\r\\n\\r\\n                }else if(action == 4){///return from passive mode\\r\\n                    \\r\\n                    require(elf.action == 3);                    \\r\\n\\r\\n                    actions.timeDiff = (block.timestamp - elf.timestamp) / 1 days; //amount of time spent in camp CHANGE TO 1 DAYS!\\r\\n\\r\\n                    \\r\\n                    if(actions.timeDiff >= 7){\\r\\n                        actions.reward = 140 ether;\\r\\n                    }\\r\\n                    if(actions.timeDiff >= 14 && actions.timeDiff < 30){\\r\\n                        actions.reward = 420 ether;\\r\\n                    }\\r\\n                    if(actions.timeDiff >= 30){\\r\\n                        actions.reward = 1200 ether;\\r\\n                    }\\r\\n                    \\r\\n                    elf.level = elf.level + (actions.timeDiff * 1); //one level per day\\r\\n                    elf.level = elf.level > 100 ? 100 : elf.level;\\r\\n\\r\\n \\r\\n                    _setAccountBalance(msg.sender, actions.reward, false);\\r\\n                \\r\\n                }else if(action == 5){//forge loop for weapons\\r\\n                   \\r\\n                    require(msg.value >= .01 ether);  \\r\\n                    require(elf.action != 3); //Cant roll in passve mode  \\r\\n                    //                    \\r\\n                   // (elf.weaponTier, elf.primaryWeapon, elf.inventory) = DataStructures.roll(id_, elf.level, rand, 1, elf.weaponTier, elf.primaryWeapon, elf.inventory);\\r\\n                    (elf.primaryWeapon, elf.weaponTier) = _rollWeapon(elf.level, id_, rand);\\r\\n                \\r\\n   \\r\\n                \\r\\n                }else if(action == 6){//item or merchant loop\\r\\n                   \\r\\n                    require(msg.value >= .01 ether); \\r\\n                    require(elf.action != 3); //Cant roll in passve mode\\r\\n                    (elf.weaponTier, elf.primaryWeapon, elf.inventory) = DataStructures.roll(id_, elf.level, rand, 2, elf.weaponTier, elf.primaryWeapon, elf.inventory);                      \\r\\n\\r\\n                }else if(action == 7){//healing loop\\r\\n\\r\\n\\r\\n                    require(elf.sentinelClass == 0, \\\"not a healer\\\"); \\r\\n                    require(elf.action != 3, \\\"cant heal while passive\\\"); //Cant heal in passve mode\\r\\n                    require(elf.timestamp < block.timestamp, \\\"elf busy\\\");\\r\\n\\r\\n                        if(ownerOf[id_] != address(this)){\\r\\n                        _transfer(elfOwner, address(this), id_);\\r\\n                        elf.owner = elfOwner;\\r\\n                        }\\r\\n\\r\\n\\r\\n                    \\r\\n                    \\r\\n                    elf.timestamp = block.timestamp + (12 hours);\\r\\n\\r\\n                    elf.level = elf.level + 1;\\r\\n                    \\r\\n                    {   \\r\\n\\r\\n                        DataStructures.Elf memory hElf = DataStructures.getElf(sentinels[campaign_]);//using the campaign varialbe for elfId here.\\r\\n                        require(ownerOf[campaign_] == msg.sender || hElf.owner == msg.sender, \\\"NotYourElf\\\");\\r\\n                               \\r\\n                                if(block.timestamp < hElf.timestamp){\\r\\n\\r\\n                                        actions.timeDiff = hElf.timestamp - block.timestamp;\\r\\n                \\r\\n                                        actions.timeDiff = actions.timeDiff > 0 ? \\r\\n                                            \\r\\n                                            hElf.sentinelClass == 0 ? 0 : \\r\\n                                            hElf.sentinelClass == 1 ? actions.timeDiff * 1/4 : \\r\\n                                            actions.timeDiff * 1/2\\r\\n                                        \\r\\n                                        : actions.timeDiff;\\r\\n                                        \\r\\n                                        hElf.timestamp = hElf.timestamp - actions.timeDiff;                        \\r\\n                                        \\r\\n                                }\\r\\n                            \\r\\n                        actions.traits = DataStructures.packAttributes(hElf.hair, hElf.race, hElf.accessories);\\r\\n                        actions.class =  DataStructures.packAttributes(hElf.sentinelClass, hElf.weaponTier, hElf.inventory);\\r\\n                                \\r\\n                        sentinels[campaign_] = DataStructures._setElf(hElf.owner, hElf.timestamp, hElf.action, hElf.healthPoints, hElf.attackPoints, hElf.primaryWeapon, hElf.level, actions.traits, actions.class);\\r\\n\\r\\n                }\\r\\n                }           \\r\\n             \\r\\n            actions.traits   = DataStructures.packAttributes(elf.hair, elf.race, elf.accessories);\\r\\n            actions.class    = DataStructures.packAttributes(elf.sentinelClass, elf.weaponTier, elf.inventory);\\r\\n            elf.healthPoints = DataStructures.calcHealthPoints(elf.sentinelClass, elf.level); \\r\\n            elf.attackPoints = DataStructures.calcAttackPoints(elf.sentinelClass, elf.weaponTier);  \\r\\n            elf.level        = elf.level > 100 ? 100 : elf.level; \\r\\n            elf.action       = action;\\r\\n\\r\\n            sentinels[id_] = DataStructures._setElf(elf.owner, elf.timestamp, elf.action, elf.healthPoints, elf.attackPoints, elf.primaryWeapon, elf.level, actions.traits, actions.class);\\r\\n            emit Action(msg.sender, action, id_); \\r\\n    }\\r\\n\\r\\n\\r\\n    function _rollWeapon(uint256 level, uint256 id, uint256 rand) internal pure returns (uint256 newWeapon, uint256 newWeaponTier) {\\r\\n    \\r\\n        uint256 levelTier = level == 100 ? 5 : uint256((level/20) + 1);\\r\\n                \\r\\n                uint256  chance = _randomize(rand, \\\"Weapon\\\", id) % 100;\\r\\n      \\r\\n                if(chance > 10 && chance < 80){\\r\\n        \\r\\n                             newWeaponTier = levelTier;\\r\\n        \\r\\n                        }else if (chance > 80 ){\\r\\n        \\r\\n                             newWeaponTier = levelTier + 1 > 4 ? 4 : levelTier + 1;\\r\\n        \\r\\n                        }else{\\r\\n\\r\\n                                newWeaponTier = levelTier - 1 < 1 ? 1 : levelTier - 1;          \\r\\n                        }\\r\\n                         \\r\\n\\r\\n                newWeapon = ((newWeaponTier - 1) * 3) + (rand % 3);  \\r\\n            \\r\\n        \\r\\n    }\\r\\n    \\r\\n\\r\\n    function _setAccountBalance(address _owner, uint256 _amount, bool _subtract) private {\\r\\n            \\r\\n            _subtract ? bankBalances[_owner] -= _amount : bankBalances[_owner] += _amount;\\r\\n            emit BalanceChanged(_owner, _amount, _subtract);\\r\\n    }\\r\\n    //NOTE BEFF WE NEED TO CHANGE THIS\\r\\n    function getMintPriceLevel() public view returns (uint256 mintCost, uint256 mintLevel) {\\r\\n            \\r\\n            if (totalSupply <= INIT_SUPPLY) return  (price, 1);\\r\\n            if (totalSupply < 4000) return  (  60 ether, 3);\\r\\n            if (totalSupply < 4500) return  ( 180 ether, 5);\\r\\n            if (totalSupply < 5000) return  ( 360 ether, 15);\\r\\n            if (totalSupply < 5500) return  ( 600 ether, 25);\\r\\n            if (totalSupply < 6000) return  ( 900 ether, 35);\\r\\n            if (totalSupply < 6333) return  ( 1800 ether, 45);\\r\\n            if (totalSupply < 6666) return  ( 2700  ether, 60);\\r\\n\\r\\n    }\\r\\n\\r\\n    function _randomize(uint256 ran, string memory dom, uint256 ness) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(ran,dom,ness)));}\\r\\n\\r\\n    function _rand() internal view returns (uint256) {\\r\\n    return uint256(keccak256(abi.encodePacked(msg.sender, block.difficulty, block.timestamp, block.basefee, ketchup)));}\\r\\n\\r\\n//PUBLIC VIEWS\\r\\n    function tokenURI(uint256 _id) external view returns(string memory) {\\r\\n    return elfmetaDataHandler.getTokenURI(uint16(_id), sentinels[_id]);\\r\\n    }\\r\\n\\r\\n    function attributes(uint256 _id) external view returns(uint hair, uint race, uint accessories, uint sentinelClass, uint weaponTier, uint inventory){\\r\\n    uint256 character = sentinels[_id];\\r\\n\\r\\n    uint _traits =        uint256(uint8(character>>240));\\r\\n    uint _class =         uint256(uint8(character>>248));\\r\\n\\r\\n    hair           = (_traits / 100) % 10;\\r\\n    race           = (_traits / 10) % 10;\\r\\n    accessories    = (_traits) % 10;\\r\\n    sentinelClass  = (_class / 100) % 10;\\r\\n    weaponTier     = (_class / 10) % 10;\\r\\n    inventory      = (_class) % 10; \\r\\n\\r\\n}\\r\\n\\r\\nfunction getSentinel(uint256 _id) external view returns(uint256 sentinel){\\r\\n    return sentinel = sentinels[_id];\\r\\n}\\r\\n\\r\\n\\r\\nfunction getToken(uint256 _id) external view returns(DataStructures.Token memory token){\\r\\n   \\r\\n    return DataStructures.getToken(sentinels[_id]);\\r\\n}\\r\\n\\r\\nfunction elves(uint256 _id) external view returns(address owner, uint timestamp, uint action, uint healthPoints, uint attackPoints, uint primaryWeapon, uint level) {\\r\\n\\r\\n    uint256 character = sentinels[_id];\\r\\n\\r\\n    owner =          address(uint160(uint256(character)));\\r\\n    timestamp =      uint(uint40(character>>160));\\r\\n    action =         uint(uint8(character>>200));\\r\\n    healthPoints =   uint(uint8(character>>208));\\r\\n    attackPoints =   uint(uint8(character>>216));\\r\\n    primaryWeapon =  uint(uint8(character>>224));\\r\\n    level =          uint(uint8(character>>232));   \\r\\n\\r\\n}\\r\\n\\r\\n//Modifiers but as functions. Less Gas\\r\\n    function isPlayer() internal {    \\r\\n        uint256 size = 0;\\r\\n        address acc = msg.sender;\\r\\n        assembly { size := extcodesize(acc)}\\r\\n        require((msg.sender == tx.origin && size == 0));\\r\\n        ketchup = keccak256(abi.encodePacked(acc, block.coinbase));\\r\\n    }\\r\\n\\r\\n\\r\\n    function onlyOwner() internal view {    \\r\\n        require(admin == msg.sender || auth[msg.sender] == true || dev1Address == msg.sender || dev2Address == msg.sender);\\r\\n    }\\r\\n\\r\\n//Bridge and Tunnel Stuff\\r\\n\\r\\n    function modifyElfDNA(uint256 id, uint256 sentinel) external {\\r\\n        require (msg.sender == terminus || admin == msg.sender, \\\"not terminus\\\");\\r\\n        sentinels[id] = sentinel;\\r\\n    }\\r\\n\\r\\n      function pull(address owner_, uint256[] calldata ids) external {\\r\\n        require (msg.sender == terminus, \\\"not terminus\\\"); \\r\\n        for (uint256 index = 0; index < ids.length; index++) {\\r\\n              _transfer(owner_, msg.sender, ids[index]);\\r\\n        }\\r\\n        ITerminus(msg.sender).pullCallback(owner_, ids);\\r\\n    }\\r\\n  \\r\\n\\r\\n//ADMIN Only\\r\\n    function withdrawAll() public {\\r\\n        onlyOwner();\\r\\n        uint256 balance = address(this).balance;\\r\\n        \\r\\n        uint256 devShare = balance/2;      \\r\\n\\r\\n        require(balance > 0);\\r\\n        _withdraw(dev1Address, devShare);\\r\\n        _withdraw(dev2Address, devShare);\\r\\n    }\\r\\n\\r\\n    //Internal withdraw\\r\\n    function _withdraw(address _address, uint256 _amount) private {\\r\\n\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function flipActiveStatus() external {\\r\\n        onlyOwner();\\r\\n        isGameActive = !isGameActive;\\r\\n    }\\r\\n\\r\\n    function flipMint() external {\\r\\n        onlyOwner();\\r\\n        isMintOpen = !isMintOpen;\\r\\n    }\\r\\n\\r\\n    function flipWhitelist() external {\\r\\n        onlyOwner();\\r\\n        isWlOpen = !isWlOpen;\\r\\n    }\\r\\n    \\r\\n   function setAccountBalance(address _owner, uint256 _amount) public {                \\r\\n        onlyOwner();\\r\\n        bankBalances[_owner] += _amount;\\r\\n    }\\r\\n \\r\\n    function reserve(uint256 _reserveAmount, address _to) public {    \\r\\n        onlyOwner();        \\r\\n        for (uint i = 0; i < _reserveAmount; i++) {\\r\\n            _mintElf(_to);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function setElfManually(uint id, uint8 _primaryWeapon, uint8 _weaponTier, uint8 _attackPoints, uint8 _healthPoints, uint8 _level, uint8 _inventory) external {\\r\\n        onlyOwner();\\r\\n        DataStructures.Elf memory elf = DataStructures.getElf(sentinels[id]);\\r\\n        DataStructures.ActionVariables memory actions;\\r\\n\\r\\n        elf.owner           = elf.owner;\\r\\n        elf.timestamp       = elf.timestamp;\\r\\n        elf.action          = elf.action;\\r\\n        elf.healthPoints    = _healthPoints;\\r\\n        elf.attackPoints    = _attackPoints;\\r\\n        elf.primaryWeapon   = _primaryWeapon;\\r\\n        elf.level           = _level;\\r\\n        elf.weaponTier      = _weaponTier;\\r\\n        elf.inventory       = _inventory;\\r\\n\\r\\n        actions.traits = DataStructures.packAttributes(elf.hair, elf.race, elf.accessories);\\r\\n        actions.class =  DataStructures.packAttributes(elf.sentinelClass, elf.weaponTier, elf.inventory);\\r\\n                       \\r\\n        sentinels[id] = DataStructures._setElf(elf.owner, elf.timestamp, elf.action, elf.healthPoints, elf.attackPoints, elf.primaryWeapon, elf.level, actions.traits, actions.class);\\r\\n        \\r\\n    }\\r\\n    \\r\\n   /* function addManyToWhitelist(address[] calldata _addr, uint256 _whitelistRole) public {\\r\\n        onlyOwner();\\r\\n        \\r\\n            for (uint256 index = 0; index < _addr.length; index++) {\\r\\n                whitelist[_addr[index]] = uint16(_whitelistRole);\\r\\n            }\\r\\n    }    \\r\\n    */\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\\r\\n/// including the MetaData, and partially, Enumerable extensions.\\r\\ncontract ERC721 {\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                  EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    address implementation_;\\r\\n    address public admin;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             ERC-721 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    uint256 public maxSupply;\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    mapping(uint256 => address) public ownerOf;\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                             VIEW FUNCTION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function owner() external view returns (address) {\\r\\n        return admin;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC-20-LIKE LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function transfer(address to, uint256 tokenId) external {\\r\\n        require(msg.sender == ownerOf[tokenId], \\\"NOT_OWNER\\\");\\r\\n\\r\\n        _transfer(msg.sender, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              ERC-721 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        external\\r\\n        pure\\r\\n        returns (bool supported)\\r\\n    {\\r\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 tokenId) external {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner_ || isApprovedForAll[owner_][msg.sender],\\r\\n            \\\"NOT_APPROVED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[tokenId] = spender;\\r\\n\\r\\n        emit Approval(owner_, spender, tokenId);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner_ ||\\r\\n                msg.sender == getApproved[tokenId] ||\\r\\n                isApprovedForAll[owner_][msg.sender],\\r\\n            \\\"NOT_APPROVED\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\\r\\n        transferFrom(from, to, tokenId);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            // selector = `onERC721Received(address,address,uint,bytes)`\\r\\n            (, bytes memory returned) = to.staticcall(\\r\\n                abi.encodeWithSelector(\\r\\n                    0x150b7a02,\\r\\n                    msg.sender,\\r\\n                    from, \\r\\n                    tokenId,\\r\\n                    data\\r\\n                )\\r\\n            );\\r\\n\\r\\n            bytes4 selector = abi.decode(returned, (bytes4));\\r\\n\\r\\n            require(selector == 0x150b7a02, \\\"NOT_ERC721_RECEIVER\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          INTERNAL UTILS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\r\\n        \\r\\n        require(ownerOf[tokenId] == from);\\r\\n\\r\\n        balanceOf[from]--;\\r\\n        balanceOf[to]++;\\r\\n\\r\\n        delete getApproved[tokenId];\\r\\n\\r\\n        ownerOf[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal {\\r\\n        require(ownerOf[tokenId] == address(0), \\\"ALREADY_MINTED\\\");\\r\\n        require(totalSupply++ <= maxSupply, \\\"MAX SUPPLY REACHED\\\");\\r\\n\\r\\n        // This is safe because the sum of all user\\r\\n        // balances can't exceed type(uint256).max!\\r\\n        unchecked {\\r\\n            balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        ownerOf[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 tokenId) internal {\\r\\n        address owner_ = ownerOf[tokenId];\\r\\n\\r\\n        require(ownerOf[tokenId] != address(0), \\\"NOT_MINTED\\\");\\r\\n\\r\\n        totalSupply--;\\r\\n        balanceOf[owner_]--;\\r\\n\\r\\n        delete ownerOf[tokenId];\\r\\n\\r\\n        emit Transfer(owner_, address(0), tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n//import \\\"hardhat/console.sol\\\"; ///REMOVE BEFORE DEPLOYMENT\\r\\n//v 1.0.3\\r\\n\\r\\nlibrary DataStructures {\\r\\n\\r\\n/////////////DATA STRUCTURES///////////////////////////////\\r\\n    struct Elf {\\r\\n            address owner;  \\r\\n            uint256 timestamp; \\r\\n            uint256 action; \\r\\n            uint256 healthPoints;\\r\\n            uint256 attackPoints; \\r\\n            uint256 primaryWeapon; \\r\\n            uint256 level;\\r\\n            uint256 hair;\\r\\n            uint256 race; \\r\\n            uint256 accessories; \\r\\n            uint256 sentinelClass; \\r\\n            uint256 weaponTier; \\r\\n            uint256 inventory; \\r\\n    }\\r\\n\\r\\n    struct Token {\\r\\n            address owner;  \\r\\n            uint256 timestamp; \\r\\n            uint8 action; \\r\\n            uint8 healthPoints;\\r\\n            uint8 attackPoints; \\r\\n            uint8 primaryWeapon; \\r\\n            uint8 level;\\r\\n            uint8 hair;\\r\\n            uint8 race; \\r\\n            uint8 accessories; \\r\\n            uint8 sentinelClass; \\r\\n            uint8 weaponTier; \\r\\n            uint8 inventory; \\r\\n    }\\r\\n\\r\\n    struct ActionVariables {\\r\\n\\r\\n            uint256 reward;\\r\\n            uint256 timeDiff;\\r\\n            uint256 traits; \\r\\n            uint256 class;  \\r\\n    }\\r\\n\\r\\n    struct Camps {\\r\\n            uint32 baseRewards; \\r\\n            uint32 creatureCount; \\r\\n            uint32 creatureHealth; \\r\\n            uint32 expPoints; \\r\\n            uint32 minLevel;\\r\\n            uint32 itemDrop;\\r\\n            uint32 weaponDrop;\\r\\n            uint32 spare;\\r\\n    }\\r\\n\\r\\n    /*Dont Delete, just keep it for reference\\r\\n\\r\\n    struct Attributes { \\r\\n            uint256 hair; //MAX 3 3 hair traits\\r\\n            uint256 race;  //MAX 6 Body 4 for body\\r\\n            uint256 accessories; //MAX 7 4 \\r\\n            uint256 sentinelClass; //MAX 3 3 in class\\r\\n            uint256 weaponTier; //MAX 6 5 tiers\\r\\n            uint256 inventory; //MAX 7 6 items\\r\\n    }\\r\\n\\r\\n    */\\r\\n\\r\\n/////////////////////////////////////////////////////\\r\\nfunction getElf(uint256 character) internal pure returns(Elf memory _elf) {\\r\\n   \\r\\n    _elf.owner =          address(uint160(uint256(character)));\\r\\n    _elf.timestamp =      uint256(uint40(character>>160));\\r\\n    _elf.action =         uint256(uint8(character>>200));\\r\\n    _elf.healthPoints =       uint256(uint8(character>>208));\\r\\n    _elf.attackPoints =   uint256(uint8(character>>216));\\r\\n    _elf.primaryWeapon =  uint256(uint8(character>>224));\\r\\n    _elf.level    =       uint256(uint8(character>>232));\\r\\n    _elf.hair           = (uint256(uint8(character>>240)) / 100) % 10;\\r\\n    _elf.race           = (uint256(uint8(character>>240)) / 10) % 10;\\r\\n    _elf.accessories    = (uint256(uint8(character>>240))) % 10;\\r\\n    _elf.sentinelClass  = (uint256(uint8(character>>248)) / 100) % 10;\\r\\n    _elf.weaponTier     = (uint256(uint8(character>>248)) / 10) % 10;\\r\\n    _elf.inventory      = (uint256(uint8(character>>248))) % 10; \\r\\n\\r\\n} \\r\\n\\r\\nfunction getToken(uint256 character) internal pure returns(Token memory token) {\\r\\n   \\r\\n    token.owner          = address(uint160(uint256(character)));\\r\\n    token.timestamp      = uint256(uint40(character>>160));\\r\\n    token.action         = (uint8(character>>200));\\r\\n    token.healthPoints   = (uint8(character>>208));\\r\\n    token.attackPoints   = (uint8(character>>216));\\r\\n    token.primaryWeapon  = (uint8(character>>224));\\r\\n    token.level          = (uint8(character>>232));\\r\\n    token.hair           = ((uint8(character>>240)) / 100) % 10; //MAX 3\\r\\n    token.race           = ((uint8(character>>240)) / 10) % 10; //Max6\\r\\n    token.accessories    = ((uint8(character>>240))) % 10; //Max7\\r\\n    token.sentinelClass  = ((uint8(character>>248)) / 100) % 10; //MAX 3\\r\\n    token.weaponTier     = ((uint8(character>>248)) / 10) % 10; //MAX 6\\r\\n    token.inventory      = ((uint8(character>>248))) % 10; //MAX 7\\r\\n\\r\\n    token.hair = (token.sentinelClass * 3) + (token.hair + 1);\\r\\n    token.race = (token.sentinelClass * 4) + (token.race + 1);\\r\\n    token.primaryWeapon = token.primaryWeapon == 69 ? 69 : (token.sentinelClass * 15) + (token.primaryWeapon + 1);\\r\\n    token.accessories = (token.sentinelClass * 7) + (token.accessories + 1);\\r\\n\\r\\n}\\r\\n\\r\\nfunction _setElf(\\r\\n                address owner, uint256 timestamp, uint256 action, uint256 healthPoints, \\r\\n                uint256 attackPoints, uint256 primaryWeapon, \\r\\n                uint256 level, uint256 traits, uint256 class )\\r\\n\\r\\n    internal pure returns (uint256 sentinel) {\\r\\n\\r\\n    uint256 character = uint256(uint160(address(owner)));\\r\\n    \\r\\n    character |= timestamp<<160;\\r\\n    character |= action<<200;\\r\\n    character |= healthPoints<<208;\\r\\n    character |= attackPoints<<216;\\r\\n    character |= primaryWeapon<<224;\\r\\n    character |= level<<232;\\r\\n    character |= traits<<240;\\r\\n    character |= class<<248;\\r\\n    \\r\\n    return character;\\r\\n}\\r\\n\\r\\n//////////////////////////////HELPERS/////////////////\\r\\n\\r\\nfunction packAttributes(uint hundreds, uint tens, uint ones) internal pure returns (uint256 packedAttributes) {\\r\\n    packedAttributes = uint256(hundreds*100 + tens*10 + ones);\\r\\n    return packedAttributes;\\r\\n}\\r\\n\\r\\nfunction calcAttackPoints(uint256 sentinelClass, uint256 weaponTier) internal pure returns (uint256 attackPoints) {\\r\\n\\r\\n        attackPoints = ((sentinelClass + 1) * 2) + (weaponTier * 2);\\r\\n        \\r\\n        return attackPoints;\\r\\n}\\r\\n\\r\\nfunction calcHealthPoints(uint256 sentinelClass, uint256 level) internal pure returns (uint256 healthPoints) {\\r\\n\\r\\n        healthPoints = (level/(3) +2) + (20 - (sentinelClass * 4));\\r\\n        \\r\\n        return healthPoints;\\r\\n}\\r\\n\\r\\nfunction calcCreatureHealth(uint256 sector, uint256 baseCreatureHealth) internal pure returns (uint256 creatureHealth) {\\r\\n\\r\\n        creatureHealth = ((sector - 1) * 12) + baseCreatureHealth; \\r\\n        \\r\\n        return creatureHealth;\\r\\n}\\r\\n\\r\\nfunction roll(uint256 id_, uint256 level_, uint256 rand, uint256 rollOption_, uint256 weaponTier_, uint256 primaryWeapon_, uint256 inventory_) \\r\\ninternal pure \\r\\nreturns (uint256 newWeaponTier, uint256 newWeapon, uint256 newInventory) {\\r\\n\\r\\n   uint256 levelTier = level_ == 100 ? 5 : uint256((level_/20) + 1);\\r\\n\\r\\n   newWeaponTier = weaponTier_;\\r\\n   newWeapon     = primaryWeapon_;\\r\\n   newInventory  = inventory_;\\r\\n\\r\\n\\r\\n   if(rollOption_ == 1 || rollOption_ == 3){\\r\\n       //Weapons\\r\\n      \\r\\n        uint16  chance = uint16(_randomize(rand, \\\"Weapon\\\", id_)) % 100;\\r\\n       // console.log(\\\"chance: \\\", chance);\\r\\n                if(chance > 10 && chance < 80){\\r\\n        \\r\\n                              newWeaponTier = levelTier;\\r\\n        \\r\\n                        }else if (chance > 80 ){\\r\\n        \\r\\n                              newWeaponTier = levelTier + 1 > 5 ? 5 : levelTier + 1;\\r\\n        \\r\\n                        }else{\\r\\n\\r\\n                                newWeaponTier = levelTier - 1 < 1 ? 1 : levelTier - 1;          \\r\\n                        }\\r\\n\\r\\n                                         \\r\\n        \\r\\n\\r\\n        newWeapon = newWeaponTier == 0 ? 0 : ((newWeaponTier - 1) * 3) + (rand % 3);  \\r\\n        \\r\\n\\r\\n   }\\r\\n   \\r\\n   if(rollOption_ == 2 || rollOption_ == 3){//Items Loop\\r\\n      \\r\\n       \\r\\n        uint16 morerand = uint16(_randomize(rand, \\\"Inventory\\\", id_));\\r\\n        uint16 diceRoll = uint16(_randomize(rand, \\\"Dice\\\", id_));\\r\\n        \\r\\n        diceRoll = (diceRoll % 100);\\r\\n        \\r\\n        if(diceRoll <= 20){\\r\\n\\r\\n            newInventory = levelTier > 3 ? morerand % 3 + 3: morerand % 6 + 1;\\r\\n            //console.log(\\\"Token#: \\\", id_);\\r\\n            //console.log(\\\"newITEM: \\\", newInventory);\\r\\n        } \\r\\n\\r\\n   }\\r\\n                      \\r\\n              \\r\\n}\\r\\n\\r\\n\\r\\nfunction _randomize(uint256 ran, string memory dom, uint256 ness) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(ran,dom,ness)));}\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IERC20Lite {\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function burn(address from, uint256 value) external;\\r\\n    function mint(address to, uint256 value) external; \\r\\n\\r\\n}\\r\\n\\r\\ninterface IElfMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface ICampaigns {\\r\\nfunction gameEngine(uint256 _campId, uint256 _sector, uint256 _level, uint256 _attackPoints, uint256 _healthPoints, uint256 _inventory, bool _useItem) external \\r\\nreturns(uint256 level, uint256 rewards, uint256 timestamp, uint256 inventory);\\r\\n}\\r\\n\\r\\ninterface ITunnel {\\r\\n    function sendMessage(bytes calldata message_) external;\\r\\n}\\r\\n\\r\\ninterface ITerminus {\\r\\n    function pullCallback(address owner, uint256[] calldata ids) external;\\r\\n    \\r\\n}\\r\\n\\r\\ninterface IElves {\\r\\n    function getSentinel(uint256 _id) external view returns(uint256 sentinel);\\r\\n    function modifyElfDNA(uint256 id, uint256 sentinel) external;\\r\\n    function pull(address owner_, uint256[] calldata ids) external;\\r\\n    function transfer(address to, uint256 id) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Lite {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\ninterface IEthernalElves {\\r\\nfunction presale(uint256 _reserveAmount, address _whitelister) external payable returns (uint256 id);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Action\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"subtract\",\"type\":\"bool\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaign\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sector\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Campaigns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"race\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accessories\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentinelClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weaponTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bankBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"elves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryWeapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"forging\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPriceLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSentinel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sentinel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"healthPoints\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attackPoints\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"primaryWeapon\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"accessories\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sentinelClass\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"weaponTier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"inventory\",\"type\":\"uint8\"}],\"internalType\":\"struct DataStructures.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"healer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2Address\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGameActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWlOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"merchant\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sentinel\",\"type\":\"uint256\"}],\"name\":\"modifyElfDNA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"passive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEth\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ren\",\"outputs\":[{\"internalType\":\"contract IERC20Lite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"returnPassive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"campaign_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sector_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rollWeapons_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rollItems_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useitem_\",\"type\":\"bool\"}],\"name\":\"sendCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentinels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAccountBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ren\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inventory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_campaigns\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adds_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_primaryWeapon\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_weaponTier\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_attackPoints\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_healthPoints\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_inventory\",\"type\":\"uint8\"}],\"name\":\"setElfManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"name\":\"setInitialSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminus\",\"type\":\"address\"}],\"name\":\"setTerminus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"validSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EthernalElvesV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}