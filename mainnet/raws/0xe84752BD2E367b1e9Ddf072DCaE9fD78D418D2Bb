{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/delegation/ValidatorService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ValidatorService.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/delegation/IValidatorService.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/delegation/IDelegationController.sol\\\";\\n\\nimport \\\"../Permissions.sol\\\";\\n\\n/**\\n * @title ValidatorService\\n * @dev This contract handles all validator operations including registration,\\n * node management, validator-specific delegation parameters, and more.\\n * \\n * TIP: For more information see our main instructions\\n * https://forum.skale.network/t/skale-mainnet-launch-faq/182[SKALE MainNet Launch FAQ].\\n * \\n * Validators register an address, and use this address to accept delegations and\\n * register nodes.\\n */\\ncontract ValidatorService is Permissions, IValidatorService {\\n\\n    using ECDSAUpgradeable for bytes32;\\n\\n    mapping (uint => Validator) public validators;\\n    mapping (uint => bool) private _trustedValidators;\\n    uint[] public trustedValidatorsList;\\n    //       address => validatorId\\n    mapping (address => uint) private _validatorAddressToId;\\n    //       address => validatorId\\n    mapping (address => uint) private _nodeAddressToValidatorId;\\n    // validatorId => nodeAddress[]\\n    mapping (uint => address[]) private _nodeAddresses;\\n    uint public numberOfValidators;\\n    bool public useWhitelist;\\n\\n    bytes32 public constant VALIDATOR_MANAGER_ROLE = keccak256(\\\"VALIDATOR_MANAGER_ROLE\\\");\\n\\n    modifier onlyValidatorManager() {\\n        require(hasRole(VALIDATOR_MANAGER_ROLE, msg.sender), \\\"VALIDATOR_MANAGER_ROLE is required\\\");\\n        _;\\n    }\\n\\n    modifier checkValidatorExists(uint validatorId) {\\n        require(validatorExists(validatorId), \\\"Validator with such ID does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new validator ID that includes a validator name, description,\\n     * commission or fee rate, and a minimum delegation amount accepted by the validator.\\n     * \\n     * Emits a {ValidatorRegistered} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Sender must not already have registered a validator ID.\\n     * - Fee rate must be between 0 - 1000\u2030. Note: in per mille.\\n     */\\n    function registerValidator(\\n        string calldata name,\\n        string calldata description,\\n        uint feeRate,\\n        uint minimumDelegationAmount\\n    )\\n        external\\n        override\\n        returns (uint validatorId)\\n    {\\n        require(!validatorAddressExists(msg.sender), \\\"Validator with such address already exists\\\");\\n        require(feeRate <= 1000, \\\"Fee rate of validator should be lower than 100%\\\");\\n        validatorId = ++numberOfValidators;\\n        validators[validatorId] = IValidatorService.Validator(\\n            name,\\n            msg.sender,\\n            address(0),\\n            description,\\n            feeRate,\\n            block.timestamp,\\n            minimumDelegationAmount,\\n            true\\n        );\\n        _setValidatorAddress(validatorId, msg.sender);\\n\\n        emit ValidatorRegistered(validatorId);\\n    }\\n\\n    /**\\n     * @dev Allows Admin to enable a validator by adding their ID to the\\n     * trusted list.\\n     * \\n     * Emits a {ValidatorWasEnabled} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must not already be enabled.\\n     */\\n    function enableValidator(uint validatorId)\\n        external\\n        override\\n        checkValidatorExists(validatorId)\\n        onlyValidatorManager\\n    {\\n        require(!_trustedValidators[validatorId], \\\"Validator is already enabled\\\");\\n        _trustedValidators[validatorId] = true;\\n        trustedValidatorsList.push(validatorId);\\n        emit ValidatorWasEnabled(validatorId);\\n    }\\n\\n    /**\\n     * @dev Allows Admin to disable a validator by removing their ID from\\n     * the trusted list.\\n     * \\n     * Emits a {ValidatorWasDisabled} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must not already be disabled.\\n     */\\n    function disableValidator(uint validatorId)\\n        external\\n        override\\n        checkValidatorExists(validatorId)\\n        onlyValidatorManager\\n    {\\n        require(_trustedValidators[validatorId], \\\"Validator is already disabled\\\");\\n        _trustedValidators[validatorId] = false;\\n        uint position = _find(trustedValidatorsList, validatorId);\\n        if (position < trustedValidatorsList.length) {\\n            trustedValidatorsList[position] =\\n                trustedValidatorsList[trustedValidatorsList.length - 1];\\n        }\\n        trustedValidatorsList.pop();\\n        emit ValidatorWasDisabled(validatorId);\\n    }\\n\\n    /**\\n     * @dev Owner can disable the trusted validator list. Once turned off, the\\n     * trusted list cannot be re-enabled.\\n     */\\n    function disableWhitelist() external override onlyValidatorManager {\\n        useWhitelist = false;\\n        emit WhitelistDisabled(false);\\n    }\\n\\n    /**\\n     * @dev Allows `msg.sender` to request a new address.\\n     * \\n     * Requirements:\\n     *\\n     * - `msg.sender` must already be a validator.\\n     * - New address must not be null.\\n     * - New address must not be already registered as a validator.\\n     */\\n    function requestForNewAddress(address newValidatorAddress) external override {\\n        require(newValidatorAddress != address(0), \\\"New address cannot be null\\\");\\n        require(_validatorAddressToId[newValidatorAddress] == 0, \\\"Address already registered\\\");\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].requestedAddress = newValidatorAddress;\\n        emit RequestNewAddress(validatorId, msg.sender, newValidatorAddress);\\n    }\\n\\n    /**\\n     * @dev Allows msg.sender to confirm an address change.\\n     * \\n     * Emits a {ValidatorAddressChanged} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Must be owner of new address.\\n     */\\n    function confirmNewAddress(uint validatorId)\\n        external\\n        override\\n        checkValidatorExists(validatorId)\\n    {\\n        require(\\n            getValidator(validatorId).requestedAddress == msg.sender,\\n            \\\"The validator address cannot be changed because it is not the actual owner\\\"\\n        );\\n        delete validators[validatorId].requestedAddress;\\n        _setValidatorAddress(validatorId, msg.sender);\\n\\n        emit ValidatorAddressChanged(validatorId, validators[validatorId].validatorAddress);\\n    }\\n\\n    /**\\n     * @dev Links a node address to validator ID. Validator must present\\n     * the node signature of the validator ID.\\n     * \\n     * Requirements:\\n     * \\n     * - Signature must be valid.\\n     * - Address must not be assigned to a validator.\\n     */\\n    function linkNodeAddress(address nodeAddress, bytes calldata sig) external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(\\n            keccak256(abi.encodePacked(validatorId)).toEthSignedMessageHash().recover(sig) == nodeAddress,\\n            \\\"Signature is not pass\\\"\\n        );\\n        require(_validatorAddressToId[nodeAddress] == 0, \\\"Node address is a validator\\\");\\n\\n        _addNodeAddress(validatorId, nodeAddress);\\n        emit NodeAddressWasAdded(validatorId, nodeAddress);\\n    }\\n\\n    /**\\n     * @dev Unlinks a node address from a validator.\\n     * \\n     * Emits a {NodeAddressWasRemoved} event.\\n     */\\n    function unlinkNodeAddress(address nodeAddress) external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        this.removeNodeAddress(validatorId, nodeAddress);\\n        emit NodeAddressWasRemoved(validatorId, nodeAddress);\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a minimum delegation amount.\\n     */\\n    function setValidatorMDA(uint minimumDelegationAmount) external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        \\n        emit SetMinimumDelegationAmount(\\n            validatorId,\\n            validators[validatorId].minimumDelegationAmount,\\n            minimumDelegationAmount\\n        );\\n        validators[validatorId].minimumDelegationAmount = minimumDelegationAmount;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a new validator name.\\n     */\\n    function setValidatorName(string calldata newName) external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        emit SetValidatorName(validatorId, validators[validatorId].name, newName);\\n        validators[validatorId].name = newName;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a new validator description.\\n     */\\n    function setValidatorDescription(string calldata newDescription) external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        emit SetValidatorDescription(validatorId, validators[validatorId].description, newDescription);\\n        validators[validatorId].description = newDescription;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to start accepting new delegation requests.\\n     * \\n     * Requirements:\\n     * \\n     * - Must not have already enabled accepting new requests.\\n     */\\n    function startAcceptingNewRequests() external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(!isAcceptingNewRequests(validatorId), \\\"Accepting request is already enabled\\\");\\n\\n        validators[validatorId].acceptNewRequests = true;\\n        emit AcceptingNewRequests(validatorId, true);\\n    }\\n\\n    /**\\n     * @dev Allows a validator to stop accepting new delegation requests.\\n     * \\n     * Requirements:\\n     * \\n     * - Must not have already stopped accepting new requests.\\n     */\\n    function stopAcceptingNewRequests() external override {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(isAcceptingNewRequests(validatorId), \\\"Accepting request is already disabled\\\");\\n\\n        validators[validatorId].acceptNewRequests = false;\\n        emit AcceptingNewRequests(validatorId, false);\\n    }\\n\\n    function removeNodeAddress(uint validatorId, address nodeAddress)\\n        external\\n        override\\n        allowTwo(\\\"ValidatorService\\\", \\\"Nodes\\\")\\n    {\\n        require(_nodeAddressToValidatorId[nodeAddress] == validatorId,\\n            \\\"Validator does not have permissions to unlink node\\\");\\n        delete _nodeAddressToValidatorId[nodeAddress];\\n        for (uint i = 0; i < _nodeAddresses[validatorId].length; ++i) {\\n            if (_nodeAddresses[validatorId][i] == nodeAddress) {\\n                if (i + 1 < _nodeAddresses[validatorId].length) {\\n                    _nodeAddresses[validatorId][i] =\\n                        _nodeAddresses[validatorId][_nodeAddresses[validatorId].length - 1];\\n                }\\n                delete _nodeAddresses[validatorId][_nodeAddresses[validatorId].length - 1];\\n                _nodeAddresses[validatorId].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the amount of validator bond (self-delegation).\\n     */\\n    function getAndUpdateBondAmount(uint validatorId)\\n        external\\n        override\\n        returns (uint)\\n    {\\n        IDelegationController delegationController = IDelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        return delegationController.getAndUpdateDelegatedByHolderToValidatorNow(\\n            getValidator(validatorId).validatorAddress,\\n            validatorId\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns node addresses linked to the msg.sender.\\n     */\\n    function getMyNodesAddresses() external view override returns (address[] memory) {\\n        return getNodeAddresses(getValidatorId(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Returns the list of trusted validators.\\n     */\\n    function getTrustedValidators() external view override returns (uint[] memory) {\\n        return trustedValidatorsList;\\n    }\\n\\n    /**\\n     * @dev Checks whether the validator ID is linked to the validator address.\\n     */\\n    function checkValidatorAddressToId(address validatorAddress, uint validatorId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return getValidatorId(validatorAddress) == validatorId ? true : false;\\n    }\\n\\n    /**\\n     * @dev Returns the validator ID linked to a node address.\\n     * \\n     * Requirements:\\n     * \\n     * - Node address must be linked to a validator.\\n     */\\n    function getValidatorIdByNodeAddress(address nodeAddress) external view override returns (uint validatorId) {\\n        validatorId = _nodeAddressToValidatorId[nodeAddress];\\n        require(validatorId != 0, \\\"Node address is not assigned to a validator\\\");\\n    }\\n\\n    function checkValidatorCanReceiveDelegation(uint validatorId, uint amount) external view override {\\n        require(isAuthorizedValidator(validatorId), \\\"Validator is not authorized to accept delegation request\\\");\\n        require(isAcceptingNewRequests(validatorId), \\\"The validator is not currently accepting new requests\\\");\\n        require(\\n            validators[validatorId].minimumDelegationAmount <= amount,\\n            \\\"Amount does not meet the validator's minimum delegation amount\\\"\\n        );\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        useWhitelist = true;\\n    }\\n\\n    /**\\n     * @dev Returns a validator's node addresses.\\n     */\\n    function getNodeAddresses(uint validatorId) public view override returns (address[] memory) {\\n        return _nodeAddresses[validatorId];\\n    }\\n\\n    /**\\n     * @dev Checks whether validator ID exists.\\n     */\\n    function validatorExists(uint validatorId) public view override returns (bool) {\\n        return validatorId <= numberOfValidators && validatorId != 0;\\n    }\\n\\n    /**\\n     * @dev Checks whether validator address exists.\\n     */\\n    function validatorAddressExists(address validatorAddress) public view override returns (bool) {\\n        return _validatorAddressToId[validatorAddress] != 0;\\n    }\\n\\n    /**\\n     * @dev Checks whether validator address exists.\\n     */\\n    function checkIfValidatorAddressExists(address validatorAddress) public view override {\\n        require(validatorAddressExists(validatorAddress), \\\"Validator address does not exist\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the Validator struct.\\n     */\\n    function getValidator(uint validatorId)\\n        public\\n        view\\n        override\\n        checkValidatorExists(validatorId)\\n        returns (IValidatorService.Validator memory)\\n    {\\n        return validators[validatorId];\\n    }\\n\\n    /**\\n     * @dev Returns the validator ID for the given validator address.\\n     */\\n    function getValidatorId(address validatorAddress) public view override returns (uint) {\\n        checkIfValidatorAddressExists(validatorAddress);\\n        return _validatorAddressToId[validatorAddress];\\n    }\\n\\n    /**\\n     * @dev Checks whether the validator is currently accepting new delegation requests.\\n     */\\n    function isAcceptingNewRequests(uint validatorId)\\n        public\\n        view\\n        override\\n        checkValidatorExists(validatorId)\\n        returns (bool)\\n    {\\n        return validators[validatorId].acceptNewRequests;\\n    }\\n\\n    function isAuthorizedValidator(uint validatorId)\\n        public\\n        view\\n        override\\n        checkValidatorExists(validatorId)\\n        returns (bool)\\n    {\\n        return _trustedValidators[validatorId] || !useWhitelist;\\n    }\\n\\n    // private\\n\\n    /**\\n     * @dev Links a validator address to a validator ID.\\n     * \\n     * Requirements:\\n     * \\n     * - Address is not already in use by another validator.\\n     */\\n    function _setValidatorAddress(uint validatorId, address validatorAddress) private {\\n        if (_validatorAddressToId[validatorAddress] == validatorId) {\\n            return;\\n        }\\n        require(_validatorAddressToId[validatorAddress] == 0, \\\"Address is in use by another validator\\\");\\n        address oldAddress = validators[validatorId].validatorAddress;\\n        delete _validatorAddressToId[oldAddress];\\n        _nodeAddressToValidatorId[validatorAddress] = validatorId;\\n        validators[validatorId].validatorAddress = validatorAddress;\\n        _validatorAddressToId[validatorAddress] = validatorId;\\n    }\\n\\n    /**\\n     * @dev Links a node address to a validator ID.\\n     * \\n     * Requirements:\\n     * \\n     * - Node address must not be already linked to a validator.\\n     */\\n    function _addNodeAddress(uint validatorId, address nodeAddress) private {\\n        if (_nodeAddressToValidatorId[nodeAddress] == validatorId) {\\n            return;\\n        }\\n        require(_nodeAddressToValidatorId[nodeAddress] == 0, \\\"Validator cannot override node address\\\");\\n        _nodeAddressToValidatorId[nodeAddress] = validatorId;\\n        _nodeAddresses[validatorId].push(nodeAddress);\\n    }\\n\\n    function _find(uint[] memory array, uint index) private pure returns (uint) {\\n        uint i;\\n        for (i = 0; i < array.length; i++) {\\n            if (array[i] == index) {\\n                return i;\\n            }\\n        }\\n        return array.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/delegation/IValidatorService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IValidatorService.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IValidatorService {\\n    struct Validator {\\n        string name;\\n        address validatorAddress;\\n        address requestedAddress;\\n        string description;\\n        uint feeRate;\\n        uint registrationTime;\\n        uint minimumDelegationAmount;\\n        bool acceptNewRequests;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a validator registers.\\n     */\\n    event ValidatorRegistered(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator address changes.\\n     */\\n    event ValidatorAddressChanged(\\n        uint validatorId,\\n        address newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator is enabled.\\n     */\\n    event ValidatorWasEnabled(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator is disabled.\\n     */\\n    event ValidatorWasDisabled(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a node address is linked to a validator.\\n     */\\n    event NodeAddressWasAdded(\\n        uint validatorId,\\n        address nodeAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a node address is unlinked from a validator.\\n     */\\n    event NodeAddressWasRemoved(\\n        uint validatorId,\\n        address nodeAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when whitelist disabled.\\n     */\\n    event WhitelistDisabled(bool status);\\n\\n    /**\\n     * @dev Emitted when validator requested new address.\\n     */\\n    event RequestNewAddress(uint indexed validatorId, address previousAddress, address newAddress);\\n\\n    /**\\n     * @dev Emitted when validator set new minimum delegation amount.\\n     */\\n    event SetMinimumDelegationAmount(uint indexed validatorId, uint previousMDA, uint newMDA);\\n\\n    /**\\n     * @dev Emitted when validator set new name.\\n     */\\n    event SetValidatorName(uint indexed validatorId, string previousName, string newName);\\n\\n    /**\\n     * @dev Emitted when validator set new description.\\n     */\\n    event SetValidatorDescription(uint indexed validatorId, string previousDescription, string newDescription);\\n\\n    /**\\n     * @dev Emitted when validator start or stop accepting new delegation requests.\\n     */\\n    event AcceptingNewRequests(uint indexed validatorId, bool status);\\n    \\n    function registerValidator(\\n        string calldata name,\\n        string calldata description,\\n        uint feeRate,\\n        uint minimumDelegationAmount\\n    )\\n        external\\n        returns (uint validatorId);\\n    function enableValidator(uint validatorId) external;\\n    function disableValidator(uint validatorId) external;\\n    function disableWhitelist() external;\\n    function requestForNewAddress(address newValidatorAddress) external;\\n    function confirmNewAddress(uint validatorId) external;\\n    function linkNodeAddress(address nodeAddress, bytes calldata sig) external;\\n    function unlinkNodeAddress(address nodeAddress) external;\\n    function setValidatorMDA(uint minimumDelegationAmount) external;\\n    function setValidatorName(string calldata newName) external;\\n    function setValidatorDescription(string calldata newDescription) external;\\n    function startAcceptingNewRequests() external;\\n    function stopAcceptingNewRequests() external;\\n    function removeNodeAddress(uint validatorId, address nodeAddress) external;\\n    function getAndUpdateBondAmount(uint validatorId) external returns (uint);\\n    function getMyNodesAddresses() external view returns (address[] memory);\\n    function getTrustedValidators() external view returns (uint[] memory);\\n    function checkValidatorAddressToId(address validatorAddress, uint validatorId)\\n        external\\n        view\\n        returns (bool);\\n    function getValidatorIdByNodeAddress(address nodeAddress) external view returns (uint validatorId);\\n    function checkValidatorCanReceiveDelegation(uint validatorId, uint amount) external view;\\n    function getNodeAddresses(uint validatorId) external view returns (address[] memory);\\n    function validatorExists(uint validatorId) external view returns (bool);\\n    function validatorAddressExists(address validatorAddress) external view returns (bool);\\n    function checkIfValidatorAddressExists(address validatorAddress) external view;\\n    function getValidator(uint validatorId) external view returns (Validator memory);\\n    function getValidatorId(address validatorAddress) external view returns (uint);\\n    function isAcceptingNewRequests(uint validatorId) external view returns (bool);\\n    function isAuthorizedValidator(uint validatorId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/delegation/IDelegationController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IDelegationController.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IDelegationController {\\n    enum State {\\n        PROPOSED,\\n        ACCEPTED,\\n        CANCELED,\\n        REJECTED,\\n        DELEGATED,\\n        UNDELEGATION_REQUESTED,\\n        COMPLETED\\n    }\\n\\n    struct Delegation {\\n        address holder; // address of token owner\\n        uint validatorId;\\n        uint amount;\\n        uint delegationPeriod;\\n        uint created; // time of delegation creation\\n        uint started; // month when a delegation becomes active\\n        uint finished; // first month after a delegation ends\\n        string info;\\n    }\\n\\n    /**\\n     * @dev Emitted when validator was confiscated.\\n     */\\n    event Confiscated(\\n        uint indexed validatorId,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted when validator was confiscated.\\n     */\\n    event SlashesProcessed(\\n        address indexed holder,\\n        uint limit\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is proposed to a validator.\\n     */\\n    event DelegationProposed(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is accepted by a validator.\\n     */\\n    event DelegationAccepted(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is cancelled by the delegator.\\n     */\\n    event DelegationRequestCanceledByUser(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is requested to undelegate.\\n     */\\n    event UndelegationRequested(\\n        uint delegationId\\n    );\\n    \\n    function getAndUpdateDelegatedToValidatorNow(uint validatorId) external returns (uint);\\n    function getAndUpdateDelegatedAmount(address holder) external returns (uint);\\n    function getAndUpdateEffectiveDelegatedByHolderToValidator(address holder, uint validatorId, uint month)\\n        external\\n        returns (uint effectiveDelegated);\\n    function delegate(\\n        uint validatorId,\\n        uint amount,\\n        uint delegationPeriod,\\n        string calldata info\\n    )\\n        external;\\n    function cancelPendingDelegation(uint delegationId) external;\\n    function acceptPendingDelegation(uint delegationId) external;\\n    function requestUndelegation(uint delegationId) external;\\n    function confiscate(uint validatorId, uint amount) external;\\n    function getAndUpdateEffectiveDelegatedToValidator(uint validatorId, uint month) external returns (uint);\\n    function getAndUpdateDelegatedByHolderToValidatorNow(address holder, uint validatorId) external returns (uint);\\n    function processSlashes(address holder, uint limit) external;\\n    function processAllSlashes(address holder) external;\\n    function getEffectiveDelegatedValuesByValidator(uint validatorId) external view returns (uint[] memory);\\n    function getEffectiveDelegatedToValidator(uint validatorId, uint month) external view returns (uint);\\n    function getDelegatedToValidator(uint validatorId, uint month) external view returns (uint);\\n    function getDelegation(uint delegationId) external view returns (Delegation memory);\\n    function getFirstDelegationMonth(address holder, uint validatorId) external view returns(uint);\\n    function getDelegationsByValidatorLength(uint validatorId) external view returns (uint);\\n    function getDelegationsByHolderLength(address holder) external view returns (uint);\\n    function getState(uint delegationId) external view returns (State state);\\n    function getLockedInPendingDelegations(address holder) external view returns (uint);\\n    function hasUnprocessedSlashes(address holder) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IPermissions.sol\\\";\\n\\nimport \\\"./thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\\\";\\n\\n\\n/**\\n * @title Permissions\\n * @dev Contract is connected module for Upgradeable approach, knows ContractManager\\n */\\ncontract Permissions is AccessControlUpgradeableLegacy, IPermissions {\\n    using AddressUpgradeable for address;\\n    \\n    IContractManager public contractManager;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is an Admin.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be an admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner or `contractName`.\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1` or `contractName2` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, or `contractName2`.\\n     */\\n    modifier allowTwo(string memory contractName1, string memory contractName2) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1`, `contractName2`, or `contractName3` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, `contractName2`, or \\n     * `contractName3`.\\n     */\\n    modifier allowThree(string memory contractName1, string memory contractName2, string memory contractName3) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            contractManager.getContract(contractName3) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual override initializer {\\n        AccessControlUpgradeableLegacy.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        address skaleManagerAddress = contractManager.contracts(keccak256(abi.encodePacked(\\\"SkaleManager\\\")));\\n        if (skaleManagerAddress != address(0)) {\\n            AccessControlUpgradeableLegacy skaleManager = AccessControlUpgradeableLegacy(skaleManagerAddress);\\n            return skaleManager.hasRole(keccak256(\\\"ADMIN_ROLE\\\"), account) || _isOwner();\\n        } else {\\n            return _isOwner();\\n        }\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = IContractManager(contractManagerAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IContractManager.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IContractManager {\\n    /**\\n     * @dev Emitted when contract is upgraded.\\n     */\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external;\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external;\\n    function contracts(bytes32 nameHash) external view returns (address);\\n    function getDelegationPeriodManager() external view returns (address);\\n    function getBounty() external view returns (address);\\n    function getValidatorService() external view returns (address);\\n    function getTimeHelpers() external view returns (address);\\n    function getConstantsHolder() external view returns (address);\\n    function getSkaleToken() external view returns (address);\\n    function getTokenState() external view returns (address);\\n    function getPunisher() external view returns (address);\\n    function getContract(string calldata name) external view returns (address);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IPermissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IPermissions {\\n    function initialize(address contractManagerAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\\\";\\nimport \\\"./InitializableWithGap.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeableLegacy is InitializableWithGap, ContextUpgradeable, IAccessControlUpgradeableLegacy {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IAccessControlUpgradeableLegacy.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IAccessControlUpgradeableLegacy {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    \\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/InitializableWithGap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract InitializableWithGap is Initializable {\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AcceptingNewRequests\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"NodeAddressWasAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"NodeAddressWasRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RequestNewAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMDA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMDA\",\"type\":\"uint256\"}],\"name\":\"SetMinimumDelegationAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousDescription\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"SetValidatorDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"SetValidatorName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ValidatorAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"ValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"ValidatorWasDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"ValidatorWasEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistDisabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"checkIfValidatorAddressExists\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"checkValidatorAddressToId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkValidatorCanReceiveDelegation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"confirmNewAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"disableValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"enableValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"getAndUpdateBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyNodesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"getNodeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedValidators\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestedAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDelegationAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptNewRequests\",\"type\":\"bool\"}],\"internalType\":\"struct IValidatorService.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"getValidatorId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getValidatorIdByNodeAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractManagerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"isAcceptingNewRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"isAuthorizedValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"linkNodeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDelegationAmount\",\"type\":\"uint256\"}],\"name\":\"registerValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"removeNodeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValidatorAddress\",\"type\":\"address\"}],\"name\":\"requestForNewAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"setValidatorDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumDelegationAmount\",\"type\":\"uint256\"}],\"name\":\"setValidatorMDA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setValidatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAcceptingNewRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAcceptingNewRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trustedValidatorsList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"unlinkNodeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"validatorAddressExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"}],\"name\":\"validatorExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestedAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDelegationAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptNewRequests\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ValidatorService", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}