{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ContractDataStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * Explaining the `init` variable within saveData:\\n *\\n * 61_00_00 -- PUSH2 (size)\\n * 60_00 -- PUSH1 (code position)\\n * 60_00 -- PUSH1 (mem position)\\n * 39 CODECOPY\\n * 61_00_00 PUSH2 (size)\\n * 60_00 PUSH1 (mem position)\\n * f3 RETURN\\n *\\n **/\\n\\ncontract ContractDataStorage is Ownable {\\n\\n  struct ContractData {\\n    address rawContract;\\n    uint128 size;\\n    uint128 offset;\\n  }\\n\\n  struct ContractDataPages {\\n    uint256 maxPageNumber;\\n    bool exists;\\n    mapping (uint256 => ContractData) pages;\\n  }\\n\\n  mapping (string => ContractDataPages) internal _contractDataPages;\\n\\n  mapping (address => bool) internal _controllers;\\n\\n  constructor() {\\n    updateController(_msgSender(), true);\\n  }\\n\\n  /**\\n   * Access Control\\n   **/\\n  function updateController(address _controller, bool _status) public onlyOwner {\\n    _controllers[_controller] = _status;\\n  }\\n\\n  modifier onlyController() {\\n    require(_controllers[_msgSender()], \\\"ContractDataStorage: caller is not a controller\\\");\\n    _;\\n  }\\n\\n  /**\\n   * Storage & Revocation\\n   **/\\n\\n  function saveData(\\n    string memory _key,\\n    uint128 _pageNumber,\\n    bytes memory _b\\n  )\\n    public\\n    onlyController\\n  {\\n    require(_b.length < 24576, \\\"SvgStorage: Exceeded 24,576 bytes max contract size\\\");\\n\\n    // Create the header for the contract data\\n    bytes memory init = hex\\\"610000_600e_6000_39_610000_6000_f3\\\";\\n    bytes1 size1 = bytes1(uint8(_b.length));\\n    bytes1 size2 = bytes1(uint8(_b.length >> 8));\\n    init[2] = size1;\\n    init[1] = size2;\\n    init[10] = size1;\\n    init[9] = size2;\\n\\n    // Prepare the code for storage in a contract\\n    bytes memory code = abi.encodePacked(init, _b);\\n\\n    // Create the contract\\n    address dataContract;\\n    assembly {\\n      dataContract := create(0, add(code, 32), mload(code))\\n      if eq(dataContract, 0) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // Store the record of the contract\\n    saveDataForDeployedContract(\\n      _key,\\n      _pageNumber,\\n      dataContract,\\n      uint128(_b.length),\\n      0\\n    );\\n  }\\n\\n  function saveDataForDeployedContract(\\n    string memory _key,\\n    uint256 _pageNumber,\\n    address dataContract,\\n    uint128 _size,\\n    uint128 _offset\\n  )\\n    public\\n    onlyController\\n  {\\n    // Pull the current data for the contractData\\n    ContractDataPages storage _cdPages = _contractDataPages[_key];\\n\\n    // Store the maximum page\\n    if (_cdPages.maxPageNumber < _pageNumber) {\\n      _cdPages.maxPageNumber = _pageNumber;\\n    }\\n\\n    // Keep track of the existance of this key\\n    _cdPages.exists = true;\\n\\n    // Add the page to the location needed\\n    _cdPages.pages[_pageNumber] = ContractData(\\n      dataContract,\\n      _size,\\n      _offset\\n    );\\n  }\\n\\n  function revokeContractData(\\n    string memory _key\\n  )\\n    public\\n    onlyController\\n  {\\n    delete _contractDataPages[_key];\\n  }\\n\\n  function getSizeOfPages(\\n    string memory _key\\n  )\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    // For all data within the contract data pages, iterate over and compile them\\n    ContractDataPages storage _cdPages = _contractDataPages[_key];\\n\\n    // Determine the total size\\n    uint256 totalSize;\\n    for (uint256 idx; idx <= _cdPages.maxPageNumber; idx++) {\\n      totalSize += _cdPages.pages[idx].size;\\n    }\\n\\n    return totalSize;\\n  }\\n\\n  function getData(\\n    string memory _key\\n  )\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    // Get the total size\\n    uint256 totalSize = getSizeOfPages(_key);\\n\\n    // Create a region large enough for all of the data\\n    bytes memory _totalData = new bytes(totalSize);\\n\\n    // Retrieve the pages\\n    ContractDataPages storage _cdPages = _contractDataPages[_key];\\n\\n    // For each page, pull and compile\\n    uint256 currentPointer = 32;\\n    for (uint256 idx; idx <= _cdPages.maxPageNumber; idx++) {\\n      ContractData storage dataPage = _cdPages.pages[idx];\\n      address dataContract = dataPage.rawContract;\\n      uint256 size = uint256(dataPage.size);\\n      uint256 offset = uint256(dataPage.offset);\\n\\n      // Copy directly to total data\\n      assembly {\\n        extcodecopy(dataContract, add(_totalData, currentPointer), offset, size)\\n      }\\n\\n      // Update the current pointer\\n      currentPointer += size;\\n    }\\n\\n    return _totalData;\\n  }\\n\\n  function getDataForAll(string[] memory _keys)\\n    public\\n    view\\n    returns (bytes memory)\\n  {\\n    // Get the total size of all of the keys\\n    uint256 totalSize;\\n    for (uint256 idx; idx < _keys.length; idx++) {\\n      totalSize += getSizeOfPages(_keys[idx]);\\n    }\\n\\n    // Create a region large enough for all of the data\\n    bytes memory _totalData = new bytes(totalSize);\\n\\n    // For each key, pull down all data\\n    uint256 currentPointer = 32;\\n    for (uint256 idx; idx < _keys.length; idx++) {\\n      // Retrieve the set of pages\\n      ContractDataPages storage _cdPages = _contractDataPages[_keys[idx]];\\n\\n      // For each page, pull and compile\\n      for (uint256 innerIdx; innerIdx <= _cdPages.maxPageNumber; innerIdx++) {\\n        ContractData storage dataPage = _cdPages.pages[innerIdx];\\n        address dataContract = dataPage.rawContract;\\n        uint256 size = uint256(dataPage.size);\\n        uint256 offset = uint256(dataPage.offset);\\n\\n        // Copy directly to total data\\n        assembly {\\n          extcodecopy(dataContract, add(_totalData, currentPointer), offset, size)\\n        }\\n\\n        // Update the current pointer\\n        currentPointer += size;\\n      }\\n    }\\n\\n    return _totalData;\\n  }\\n\\n  function hasKey(string memory _key)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return _contractDataPages[_key].exists;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_keys\",\"type\":\"string[]\"}],\"name\":\"getDataForAll\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getSizeOfPages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"hasKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"revokeContractData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"_pageNumber\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"saveData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pageNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dataContract\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_size\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_offset\",\"type\":\"uint128\"}],\"name\":\"saveDataForDeployedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContractDataStorage", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}