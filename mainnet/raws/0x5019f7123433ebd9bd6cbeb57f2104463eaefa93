{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.6.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = _setInitializedVersion(1);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        bool isTopLevelCall = _setInitializedVersion(version);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(version);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        _setInitializedVersion(type(uint8).max);\r\n    }\r\n\r\n    function _setInitializedVersion(uint8 version) private returns (bool) {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\r\n        // of initializers, because in other contexts the contract may have been reentered.\r\n        if (_initializing) {\r\n            require(\r\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\r\n                \"Initializable: contract is already initialized\"\r\n            );\r\n            return false;\r\n        } else {\r\n            require(_initialized < version, \"Initializable: contract is already initialized\");\r\n            _initialized = version;\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/CreatorDAOCommission.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\ncontract CreatorDAOCommission is Initializable {\r\n    enum CommissionStatus {\r\n        queued,\r\n        accepted,\r\n        removed\r\n    }\r\n\r\n    struct Shop {\r\n        uint256 minBid;\r\n        uint256 tax; // e.g 50 represent for 5%\r\n        address payable owner;\r\n    }\r\n\r\n    struct Commission {\r\n        address payable recipient;\r\n        uint256 shopId;\r\n        uint256 bid;\r\n        CommissionStatus status;\r\n    }\r\n\r\n    address payable public admin;\r\n    address payable public recipientDao;\r\n\r\n    mapping(uint256 => Commission) public commissions;\r\n    mapping(uint256 => Shop) public shops;\r\n\r\n    //uint256public minBid; // the number of wei required to create a commission\r\n    uint256 public newCommissionIndex; // the index of the next commission which should be created in the mapping\r\n    uint256 public newShopIndex;\r\n    bool private callStarted; // ensures no re-entrancy can occur\r\n\r\n    modifier callNotStarted() {\r\n        require(!callStarted, \"callNotStarted\");\r\n        callStarted = true;\r\n        _;\r\n        callStarted = false;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"not an admin\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address payable _admin, address payable _recipientDao)\r\n        public\r\n        initializer\r\n    {\r\n        admin = _admin;\r\n        recipientDao = _recipientDao;\r\n        newCommissionIndex = 1;\r\n        newShopIndex = 1;\r\n    }\r\n\r\n    function updateAdmin(address payable _newAdmin)\r\n        public\r\n        callNotStarted\r\n        onlyAdmin\r\n    {\r\n        admin = _newAdmin;\r\n        emit AdminUpdated(_newAdmin);\r\n    }\r\n\r\n    function updateTaxRecipient(address payable _newRecipientDao)\r\n        public\r\n        callNotStarted\r\n        onlyAdmin\r\n    {\r\n        recipientDao = _newRecipientDao;\r\n    }\r\n\r\n    function updateMinBid(uint256 _shopId, uint256 _newMinBid)\r\n        public\r\n        callNotStarted\r\n        onlyAdmin\r\n    {\r\n        Shop storage shop = shops[_shopId];\r\n        shop.minBid = _newMinBid;\r\n        emit MinBidUpdated(_shopId, _newMinBid);\r\n    }\r\n\r\n    function commission(string memory _id, uint256 _shopId)\r\n        public\r\n        payable\r\n        callNotStarted\r\n    {\r\n        Shop memory shop = shops[_shopId];\r\n        require(shop.minBid != 0, \"undefined shopId\");\r\n        require(msg.value >= shop.minBid, \"bid below minimum\"); // must send the proper amount of into the bid\r\n\r\n        // Next, initialize the new commission\r\n        Commission storage newCommission = commissions[newCommissionIndex];\r\n        newCommission.shopId = _shopId;\r\n        newCommission.bid = msg.value;\r\n        newCommission.status = CommissionStatus.queued;\r\n        newCommission.recipient = payable(msg.sender);\r\n\r\n        emit NewCommission(\r\n            newCommissionIndex,\r\n            _id,\r\n            _shopId,\r\n            msg.value,\r\n            msg.sender\r\n        );\r\n\r\n        newCommissionIndex++; // for the subsequent commission to be added into the next slot\r\n    }\r\n\r\n    function rescindCommission(uint256 _commissionIndex) public callNotStarted {\r\n        Commission storage selectedCommission = commissions[_commissionIndex];\r\n        require(\r\n            msg.sender == selectedCommission.recipient,\r\n            \"commission not yours\"\r\n        ); // may only be performed by the person who commissioned it\r\n        require(\r\n            selectedCommission.status == CommissionStatus.queued,\r\n            \"commission not in queue\"\r\n        ); // the commission must still be queued\r\n\r\n        // we mark it as removed and return the individual their bid\r\n        selectedCommission.status = CommissionStatus.removed;\r\n        (bool success, ) = selectedCommission.recipient.call{\r\n            value: selectedCommission.bid\r\n        }(\"\");\r\n        require(success, \"Transfer failed.\");\r\n\r\n        emit CommissionRescinded(_commissionIndex, selectedCommission.bid);\r\n    }\r\n\r\n    function increaseCommissionBid(uint256 _commissionIndex)\r\n        public\r\n        payable\r\n        callNotStarted\r\n    {\r\n        Commission storage selectedCommission = commissions[_commissionIndex];\r\n        require(\r\n            msg.sender == selectedCommission.recipient,\r\n            \"commission not yours\"\r\n        ); // may only be performed by the person who commissioned it\r\n        require(\r\n            selectedCommission.status == CommissionStatus.queued,\r\n            \"commission not in queue\"\r\n        ); // the commission must still be queued\r\n\r\n        // then we update the commission's bid\r\n        selectedCommission.bid = selectedCommission.bid + msg.value;\r\n\r\n        emit CommissionBidUpdated(\r\n            _commissionIndex,\r\n            msg.value,\r\n            selectedCommission.bid\r\n        );\r\n    }\r\n\r\n    function processCommissions(uint256[] memory _commissionIndexes)\r\n        public\r\n        onlyAdmin\r\n        callNotStarted\r\n    {\r\n        uint256 totalTaxAmount = 0;\r\n        for (uint256 i = 0; i < _commissionIndexes.length; i++) {\r\n            Commission storage selectedCommission = commissions[\r\n                _commissionIndexes[i]\r\n            ];\r\n\r\n            //the queue my not be empty when processing more commissions\r\n            require(\r\n                selectedCommission.status == CommissionStatus.queued,\r\n                \"commission not in the queue\"\r\n            );\r\n\r\n            selectedCommission.status = CommissionStatus.accepted; // first, we change the status of the commission to accepted\r\n\r\n            uint256 taxAmount = (selectedCommission.bid *\r\n                shops[selectedCommission.shopId].tax) / 1000;\r\n\r\n            uint256 payAmount = selectedCommission.bid - taxAmount;\r\n\r\n            totalTaxAmount = totalTaxAmount + taxAmount;\r\n\r\n            (bool success, ) = shops[selectedCommission.shopId].owner.call{\r\n                value: payAmount\r\n            }(\"\"); // next we accept the payment for the commission\r\n            require(success, \"Transfer failed.\");\r\n\r\n            emit CommissionProcessed(\r\n                _commissionIndexes[i],\r\n                selectedCommission.status,\r\n                taxAmount,\r\n                payAmount\r\n            );\r\n        }\r\n\r\n        (bool success, ) = recipientDao.call{value: totalTaxAmount}(\"\");\r\n\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function addShop(\r\n        uint256 _minBid,\r\n        uint256 _tax,\r\n        address _owner\r\n    ) public onlyAdmin {\r\n        require(_minBid != 0, \"minBid must not zero\");\r\n        require(_tax < 1000, \"tax too high\");\r\n        Shop storage shop = shops[newShopIndex];\r\n        shop.minBid = _minBid;\r\n        shop.tax = _tax;\r\n        shop.owner = payable(_owner);\r\n\r\n        emit NewShop(newShopIndex, _minBid, _tax, _owner);\r\n        newShopIndex++;\r\n    }\r\n\r\n    event AdminUpdated(address _newAdmin);\r\n    event MinBidUpdated(uint256 _shopId, uint256 _newMinBid);\r\n    event NewCommission(\r\n        uint256 _commissionIndex,\r\n        string _id,\r\n        uint256 _shopId,\r\n        uint256 _bid,\r\n        address _recipient\r\n    );\r\n    event CommissionBidUpdated(\r\n        uint256 _commissionIndex,\r\n        uint256 _addedBid,\r\n        uint256 _newBid\r\n    );\r\n    event CommissionRescinded(uint256 _commissionIndex, uint256 _bid);\r\n    event CommissionProcessed(\r\n        uint256 _commissionIndex,\r\n        CommissionStatus _status,\r\n        uint256 taxAmount,\r\n        uint256 payAmount\r\n    );\r\n    event NewShop(\r\n        uint256 _newShopIndex,\r\n        uint256 _minBid,\r\n        uint256 _tax,\r\n        address owner\r\n    );\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_addedBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBid\",\"type\":\"uint256\"}],\"name\":\"CommissionBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CreatorDAOCommission.CommissionStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"CommissionProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"CommissionRescinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinBid\",\"type\":\"uint256\"}],\"name\":\"MinBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shopId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"NewCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newShopIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewShop\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addShop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_shopId\",\"type\":\"uint256\"}],\"name\":\"commission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shopId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"enum CreatorDAOCommission.CommissionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"}],\"name\":\"increaseCommissionBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_recipientDao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newCommissionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newShopIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_commissionIndexes\",\"type\":\"uint256[]\"}],\"name\":\"processCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientDao\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionIndex\",\"type\":\"uint256\"}],\"name\":\"rescindCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shopId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinBid\",\"type\":\"uint256\"}],\"name\":\"updateMinBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newRecipientDao\",\"type\":\"address\"}],\"name\":\"updateTaxRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CreatorDAOCommission", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b177305fa2352da96a863d263879f02a52861efb4f4f6261604e4b36c7dd056a"}]}