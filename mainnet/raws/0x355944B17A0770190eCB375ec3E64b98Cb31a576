{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HardwareGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport './interfaces/IHardwareGenerator.sol';\\nimport './interfaces/IHardwareSVGs.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/// @dev Generate Hardware SVG and properties\\ncontract HardwareGenerator is IHardwareGenerator {\\n    using Strings for uint16;\\n\\n    IHardwareSVGs immutable hardwareSVGs1;\\n    IHardwareSVGs immutable hardwareSVGs2;\\n    IHardwareSVGs immutable hardwareSVGs3;\\n    IHardwareSVGs immutable hardwareSVGs4;\\n    IHardwareSVGs immutable hardwareSVGs5;\\n    IHardwareSVGs immutable hardwareSVGs6;\\n    IHardwareSVGs immutable hardwareSVGs7;\\n    IHardwareSVGs immutable hardwareSVGs8;\\n    IHardwareSVGs immutable hardwareSVGs9;\\n    IHardwareSVGs immutable hardwareSVGs10;\\n    IHardwareSVGs immutable hardwareSVGs11;\\n    IHardwareSVGs immutable hardwareSVGs12;\\n    IHardwareSVGs immutable hardwareSVGs13;\\n    IHardwareSVGs immutable hardwareSVGs14;\\n    IHardwareSVGs immutable hardwareSVGs15;\\n    IHardwareSVGs immutable hardwareSVGs16;\\n    IHardwareSVGs immutable hardwareSVGs17;\\n    IHardwareSVGs immutable hardwareSVGs18;\\n    IHardwareSVGs immutable hardwareSVGs19;\\n    IHardwareSVGs immutable hardwareSVGs20;\\n    IHardwareSVGs immutable hardwareSVGs21;\\n    IHardwareSVGs immutable hardwareSVGs22;\\n    IHardwareSVGs immutable hardwareSVGs23;\\n    IHardwareSVGs immutable hardwareSVGs24;\\n    IHardwareSVGs immutable hardwareSVGs25;\\n    IHardwareSVGs immutable hardwareSVGs26;\\n    IHardwareSVGs immutable hardwareSVGs27;\\n    IHardwareSVGs immutable hardwareSVGs28;\\n    IHardwareSVGs immutable hardwareSVGs29;\\n    IHardwareSVGs immutable hardwareSVGs30;\\n    IHardwareSVGs immutable hardwareSVGs31;\\n    IHardwareSVGs immutable hardwareSVGs32;\\n    IHardwareSVGs immutable hardwareSVGs33;\\n    IHardwareSVGs immutable hardwareSVGs34;\\n    IHardwareSVGs immutable hardwareSVGs35;\\n    IHardwareSVGs immutable hardwareSVGs36;\\n    IHardwareSVGs immutable hardwareSVGs37;\\n    IHardwareSVGs immutable hardwareSVGs38;\\n\\n    constructor(HardwareSVGs memory svgs) {\\n        hardwareSVGs1 = svgs.hardwareSVGs1;\\n        hardwareSVGs2 = svgs.hardwareSVGs2;\\n        hardwareSVGs3 = svgs.hardwareSVGs3;\\n        hardwareSVGs4 = svgs.hardwareSVGs4;\\n        hardwareSVGs5 = svgs.hardwareSVGs5;\\n        hardwareSVGs6 = svgs.hardwareSVGs6;\\n        hardwareSVGs7 = svgs.hardwareSVGs7;\\n        hardwareSVGs8 = svgs.hardwareSVGs8;\\n        hardwareSVGs9 = svgs.hardwareSVGs9;\\n        hardwareSVGs10 = svgs.hardwareSVGs10;\\n        hardwareSVGs11 = svgs.hardwareSVGs11;\\n        hardwareSVGs12 = svgs.hardwareSVGs12;\\n        hardwareSVGs13 = svgs.hardwareSVGs13;\\n        hardwareSVGs14 = svgs.hardwareSVGs14;\\n        hardwareSVGs15 = svgs.hardwareSVGs15;\\n        hardwareSVGs16 = svgs.hardwareSVGs16;\\n        hardwareSVGs17 = svgs.hardwareSVGs17;\\n        hardwareSVGs18 = svgs.hardwareSVGs18;\\n        hardwareSVGs19 = svgs.hardwareSVGs19;\\n        hardwareSVGs20 = svgs.hardwareSVGs20;\\n        hardwareSVGs21 = svgs.hardwareSVGs21;\\n        hardwareSVGs22 = svgs.hardwareSVGs22;\\n        hardwareSVGs23 = svgs.hardwareSVGs23;\\n        hardwareSVGs24 = svgs.hardwareSVGs24;\\n        hardwareSVGs25 = svgs.hardwareSVGs25;\\n        hardwareSVGs26 = svgs.hardwareSVGs26;\\n        hardwareSVGs27 = svgs.hardwareSVGs27;\\n        hardwareSVGs28 = svgs.hardwareSVGs28;\\n        hardwareSVGs29 = svgs.hardwareSVGs29;\\n        hardwareSVGs30 = svgs.hardwareSVGs30;\\n        hardwareSVGs31 = svgs.hardwareSVGs31;\\n        hardwareSVGs32 = svgs.hardwareSVGs32;\\n        hardwareSVGs33 = svgs.hardwareSVGs33;\\n        hardwareSVGs34 = svgs.hardwareSVGs34;\\n        hardwareSVGs35 = svgs.hardwareSVGs35;\\n        hardwareSVGs36 = svgs.hardwareSVGs36;\\n        hardwareSVGs37 = svgs.hardwareSVGs37;\\n        hardwareSVGs38 = svgs.hardwareSVGs38;\\n    }\\n\\n    function callHardwareSVGs(IHardwareSVGs target, uint16 hardware)\\n        internal\\n        view\\n        returns (IHardwareSVGs.HardwareData memory)\\n    {\\n        bytes memory functionSelector = abi.encodePacked('hardware_', uint16(hardware).toString(), '()');\\n\\n        bool success;\\n        bytes memory result;\\n        (success, result) = address(target).staticcall(abi.encodeWithSelector(bytes4(keccak256(functionSelector))));\\n\\n        return abi.decode(result, (IHardwareSVGs.HardwareData));\\n    }\\n\\n    function generateHardware(uint16 hardware) external view override returns (IHardwareSVGs.HardwareData memory) {\\n        if (hardware <= 5) {\\n            return callHardwareSVGs(hardwareSVGs1, hardware);\\n        }\\n\\n        if (hardware <= 9) {\\n            return callHardwareSVGs(hardwareSVGs2, hardware);\\n        }\\n\\n        if (hardware <= 14) {\\n            return callHardwareSVGs(hardwareSVGs3, hardware);\\n        }\\n\\n        if (hardware <= 18) {\\n            return callHardwareSVGs(hardwareSVGs4, hardware);\\n        }\\n\\n        if (hardware <= 22) {\\n            return callHardwareSVGs(hardwareSVGs5, hardware);\\n        }\\n\\n        if (hardware <= 25) {\\n            return callHardwareSVGs(hardwareSVGs6, hardware);\\n        }\\n\\n        if (hardware <= 29) {\\n            return callHardwareSVGs(hardwareSVGs7, hardware);\\n        }\\n\\n        if (hardware <= 33) {\\n            return callHardwareSVGs(hardwareSVGs8, hardware);\\n        }\\n\\n        if (hardware <= 37) {\\n            return callHardwareSVGs(hardwareSVGs9, hardware);\\n        }\\n\\n        if (hardware <= 41) {\\n            return callHardwareSVGs(hardwareSVGs10, hardware);\\n        }\\n\\n        if (hardware <= 44) {\\n            return callHardwareSVGs(hardwareSVGs11, hardware);\\n        }\\n\\n        if (hardware <= 47) {\\n            return callHardwareSVGs(hardwareSVGs12, hardware);\\n        }\\n\\n        if (hardware <= 51) {\\n            return callHardwareSVGs(hardwareSVGs13, hardware);\\n        }\\n\\n        if (hardware <= 56) {\\n            return callHardwareSVGs(hardwareSVGs14, hardware);\\n        }\\n\\n        if (hardware <= 60) {\\n            return callHardwareSVGs(hardwareSVGs15, hardware);\\n        }\\n\\n        if (hardware <= 63) {\\n            return callHardwareSVGs(hardwareSVGs16, hardware);\\n        }\\n\\n        if (hardware <= 68) {\\n            return callHardwareSVGs(hardwareSVGs17, hardware);\\n        }\\n\\n        if (hardware <= 72) {\\n            return callHardwareSVGs(hardwareSVGs18, hardware);\\n        }\\n\\n        if (hardware <= 75) {\\n            return callHardwareSVGs(hardwareSVGs19, hardware);\\n        }\\n\\n        if (hardware <= 77) {\\n            return callHardwareSVGs(hardwareSVGs20, hardware);\\n        }\\n\\n        if (hardware <= 79) {\\n            return callHardwareSVGs(hardwareSVGs21, hardware);\\n        }\\n\\n        if (hardware <= 82) {\\n            return callHardwareSVGs(hardwareSVGs22, hardware);\\n        }\\n\\n        if (hardware <= 84) {\\n            return callHardwareSVGs(hardwareSVGs23, hardware);\\n        }\\n\\n        if (hardware <= 86) {\\n            return callHardwareSVGs(hardwareSVGs24, hardware);\\n        }\\n\\n        if (hardware <= 88) {\\n            return callHardwareSVGs(hardwareSVGs25, hardware);\\n        }\\n\\n        if (hardware <= 90) {\\n            return callHardwareSVGs(hardwareSVGs26, hardware);\\n        }\\n\\n        if (hardware <= 92) {\\n            return callHardwareSVGs(hardwareSVGs27, hardware);\\n        }\\n\\n        if (hardware <= 95) {\\n            return callHardwareSVGs(hardwareSVGs28, hardware);\\n        }\\n\\n        if (hardware <= 97) {\\n            return callHardwareSVGs(hardwareSVGs29, hardware);\\n        }\\n\\n        if (hardware <= 99) {\\n            return callHardwareSVGs(hardwareSVGs30, hardware);\\n        }\\n\\n        if (hardware <= 101) {\\n            return callHardwareSVGs(hardwareSVGs31, hardware);\\n        }\\n\\n        if (hardware <= 103) {\\n            return callHardwareSVGs(hardwareSVGs32, hardware);\\n        }\\n\\n        if (hardware <= 106) {\\n            return callHardwareSVGs(hardwareSVGs33, hardware);\\n        }\\n\\n        if (hardware <= 111) {\\n            return callHardwareSVGs(hardwareSVGs34, hardware);\\n        }\\n\\n        if (hardware <= 113) {\\n            return callHardwareSVGs(hardwareSVGs35, hardware);\\n        }\\n\\n        if (hardware <= 115) {\\n            return callHardwareSVGs(hardwareSVGs36, hardware);\\n        }\\n\\n        if (hardware <= 117) {\\n            return callHardwareSVGs(hardwareSVGs37, hardware);\\n        }\\n\\n        if (hardware <= 120) {\\n            return callHardwareSVGs(hardwareSVGs38, hardware);\\n        }\\n\\n        revert('invalid hardware selection');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHardwareGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport './IHardwareSVGs.sol';\\n\\n/// @dev Generate Hardware SVG\\ninterface IHardwareGenerator {\\n\\n    /// @param hardware uint representing hardware selection\\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\\n\\n    struct HardwareSVGs {\\n        IHardwareSVGs hardwareSVGs1;\\n        IHardwareSVGs hardwareSVGs2;\\n        IHardwareSVGs hardwareSVGs3;\\n        IHardwareSVGs hardwareSVGs4;\\n        IHardwareSVGs hardwareSVGs5;\\n        IHardwareSVGs hardwareSVGs6;\\n        IHardwareSVGs hardwareSVGs7;\\n        IHardwareSVGs hardwareSVGs8;\\n        IHardwareSVGs hardwareSVGs9;\\n        IHardwareSVGs hardwareSVGs10;\\n        IHardwareSVGs hardwareSVGs11;\\n        IHardwareSVGs hardwareSVGs12;\\n        IHardwareSVGs hardwareSVGs13;\\n        IHardwareSVGs hardwareSVGs14;\\n        IHardwareSVGs hardwareSVGs15;\\n        IHardwareSVGs hardwareSVGs16;\\n        IHardwareSVGs hardwareSVGs17;\\n        IHardwareSVGs hardwareSVGs18;\\n        IHardwareSVGs hardwareSVGs19;\\n        IHardwareSVGs hardwareSVGs20;\\n        IHardwareSVGs hardwareSVGs21;\\n        IHardwareSVGs hardwareSVGs22;\\n        IHardwareSVGs hardwareSVGs23;\\n        IHardwareSVGs hardwareSVGs24;\\n        IHardwareSVGs hardwareSVGs25;\\n        IHardwareSVGs hardwareSVGs26;\\n        IHardwareSVGs hardwareSVGs27;\\n        IHardwareSVGs hardwareSVGs28;\\n        IHardwareSVGs hardwareSVGs29;\\n        IHardwareSVGs hardwareSVGs30;\\n        IHardwareSVGs hardwareSVGs31;\\n        IHardwareSVGs hardwareSVGs32;\\n        IHardwareSVGs hardwareSVGs33;\\n        IHardwareSVGs hardwareSVGs34;\\n        IHardwareSVGs hardwareSVGs35;\\n        IHardwareSVGs hardwareSVGs36;\\n        IHardwareSVGs hardwareSVGs37;\\n        IHardwareSVGs hardwareSVGs38;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHardwareSVGs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\nimport './ICategories.sol';\\n\\ninterface IHardwareSVGs {\\n    struct HardwareData {\\n        string title;\\n        ICategories.HardwareCategories hardwareType;\\n        string svgString;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICategories.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.9;\\n\\ninterface ICategories {\\n    enum FieldCategories {\\n        MYTHIC,\\n        HERALDIC\\n    }\\n\\n    enum HardwareCategories {\\n        STANDARD,\\n        SPECIAL\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs1\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs2\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs3\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs4\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs5\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs6\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs7\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs8\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs9\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs10\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs11\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs12\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs13\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs14\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs15\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs16\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs17\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs18\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs19\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs20\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs21\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs22\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs23\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs24\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs25\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs26\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs27\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs28\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs29\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs30\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs31\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs32\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs33\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs34\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs35\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs36\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs37\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareSVGs\",\"name\":\"hardwareSVGs38\",\"type\":\"address\"}],\"internalType\":\"struct IHardwareGenerator.HardwareSVGs\",\"name\":\"svgs\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"}],\"name\":\"generateHardware\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"enum ICategories.HardwareCategories\",\"name\":\"hardwareType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"svgString\",\"type\":\"string\"}],\"internalType\":\"struct IHardwareSVGs.HardwareData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HardwareGenerator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000a0d250a9b8af88496aaf0e699bf460d793cbc70a000000000000000000000000a90b1f659a9f3a7f0153d761bc3983048f64695700000000000000000000000088a730fae720f93e24a4c03693e17134084cbd18000000000000000000000000874d288ccf6d670c073bbf9edee736bf8f93e984000000000000000000000000cc84ec240922fb5922c3ab6f19b667ced5fa7d3a000000000000000000000000769afe331bc9c4ad5d0ee905f5754434b946d82f000000000000000000000000b54f961be0098c007eef24fcf1429b79451a923b000000000000000000000000ae278bd3ae025aa92f81aeb4675960d7fa0f85620000000000000000000000000a58eb15380cfcebbe273b3c10bb1027a7530e4100000000000000000000000081be100b1a0db980cff614f5300eb9ff28a93dc30000000000000000000000006a9df3a0d82c0590b1e2cc75250563f7953d93bc000000000000000000000000d84e52e09bf3ec041cb409f714752b4c2a696e6d000000000000000000000000c0e1fc75c6af20659beb93fbed1de9bb2eaadc74000000000000000000000000c7f91e74e5c7a9f444fd6fb0c2fac52201ca4030000000000000000000000000ca49afb97c53fecad21b3909cf4e9a7c77887e3b000000000000000000000000ccb440678d0f435cabd7d1b5865e8d00be7903ef000000000000000000000000b2f657a0e9447293dbc7b2e03abbeef8d1384d48000000000000000000000000f974982878ab652372c91ec4a185d7eba728b88c000000000000000000000000f1df089f731b12f246bdaa372d8781ff4fffecae0000000000000000000000005e31d8b704ebc204a2e20fe33e8403df97a214160000000000000000000000001777355165f8239f39f0531c03e4308e3ce2a821000000000000000000000000bb4edfa1934bb0761b848090150acfe10797aabd000000000000000000000000a0c028b946198f7269e4338f6898c3c457033b2400000000000000000000000010ba6ffb37fd7396ff81a81c1a7391aa65efd2e7000000000000000000000000c6c1f246e99bc95b21f296db5b446a013b5c10dc0000000000000000000000002fc1c63079286db539edeff0f6cee1c1aa40460b000000000000000000000000c2235f3992aedc94b833d16b382ffb25064e9a61000000000000000000000000e272e61f3e68f1370a899894a402d7ba530cb9f900000000000000000000000026afdaf9bd1e7626c75f84c56cc99a1e71a00cd10000000000000000000000008482c9243fcdc0f106bb0283bfa392289073933300000000000000000000000081bcc6e7b950d852fcc2d3c42096d3b9e53d698e0000000000000000000000002fbea676451f4f78f59dea1d71c74d63be0140a60000000000000000000000004d8e7b230715de3732b5b14a7239496d56d5a63500000000000000000000000099a5c70c0d0821e84974c68308333bd2fccd4b1f00000000000000000000000056da702ff81c80c8905dc3a9b62e1a2ff2237fed0000000000000000000000001b212aa34a12682e18f503af7692c9951bc9124d00000000000000000000000074ff871d68ffd552f303a725fc109dbfa5b6b3940000000000000000000000003ea6a024918d0e77d0f0752d849bed7e94c2653d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}