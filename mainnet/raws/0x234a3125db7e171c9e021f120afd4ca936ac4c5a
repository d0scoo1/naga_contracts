{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transfer(address dst, uint wad) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Start\r\n\r\ncontract SelenaBot {\r\n\r\n    mapping(address => bool) isOwner;\r\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //uniswap router\r\n    \r\n    // address public WETH_address = 0xc778417E063141139Fce010982780140Aa0cD5Ab; //Testnet\r\n    // address public TOKEN_address = 0x4134217ec606E446ba575d7DEBfe8e0B913a13C3;  //Testnet\r\n    // address pokeMe = 0x8c089073A9594a4FB03Fa99feee3effF0e2Bc58a; //rinkeby\r\n\r\n    address selenaBotAddress = 0xd50B253F1cD33AF18d02642983534ad39AE9377F;\r\n    address public TOKEN_address = 0x8A743Eb80BFc3bF2a5582213aeA8B27D2188074a;  \r\n    address public WETH_address = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; //Mainnet\r\n    address pokeMe = 0xB3f5503f93d5Ef84b06993a1975B9D21B962892F; //Mainnet:\r\n\r\n    IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n\r\n    constructor() {\r\n        isOwner[msg.sender] = true;\r\n        isOwner[pokeMe] = true;\r\n        isOwner[selenaBotAddress] = true; //selena bot\r\n        // isOwner[0x0630d1b8C2df3F0a68Df578D02075027a6397173] = true; //rinkeby gelato\r\n        isOwner[0x3CACa7b48D0573D793d3b0279b5F0029180E83b6] = true; //mainnet gelato\r\n        isOwner[0x66e2F69df68C8F56837142bE2E8C290EfE76DA9f] = true; //gelato task treasury mainnet\r\n        \r\n    }\r\n\r\n    modifier owner {\r\n        require(isOwner[msg.sender] == true); _;\r\n    }\r\n\r\n    function getWETH() public view returns(address) {\r\n        return WETH_address;\r\n    }\r\n    \r\n    function swapETHforTokens(uint amount) internal{\r\n        address to = address(this);\r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = WETH_address;                    //Token address\r\n        path[1] = TOKEN_address;                     //WETH address\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp);\r\n    }\r\n\r\n    function swapTokensforETH(uint amount) internal{\r\n        address to = address(this);\r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = TOKEN_address;\r\n        path[1] = WETH_address;\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount,0,path,to,block.timestamp);\r\n    }\r\n\r\n    function getAmountsOut(uint amountIn) public view returns (uint[] memory amounts){ //Returns ETH value of input token amount\r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = TOKEN_address;                    //Token address\r\n        path[1] = WETH_address;                     //WETH address\r\n        amounts = uniswapV2Router.getAmountsOut(amountIn,path);\r\n\r\n        return amounts;\r\n    }\r\n\r\n    function approveTokens(uint amount) public owner{\r\n        ERC20 TOKEN = ERC20(TOKEN_address);\r\n        TOKEN.approve(routerAddress,amount);\r\n    }\r\n\r\n    function withdrawTokens(address reciever) public owner{\r\n        ERC20 TOKEN = ERC20(TOKEN_address);\r\n        uint contractBalance = TOKEN.balanceOf(address(this));\r\n        TOKEN.approve(address(this),contractBalance);\r\n        TOKEN.approve(msg.sender,contractBalance);\r\n        TOKEN.approve(pokeMe,contractBalance);\r\n        TOKEN.transferFrom(address(this), reciever, contractBalance);\r\n    }\r\n\r\n    function sendEthBack() public owner {\r\n        uint256 ethBalance = address(this).balance;\r\n        payable(selenaBotAddress).transfer(ethBalance);\r\n        \r\n    }\r\n\r\n    function BuySellVolume(uint amount_token) public owner{\r\n        approveTokens(amount_token);\r\n        uint amount_eth = getAmountsOut(amount_token)[1];\r\n        swapTokensforETH(amount_token);\r\n        swapETHforTokens(amount_eth);\r\n    }\r\n\r\n    function BuySellVolumeRandomAmount(uint maxAmount_token, uint minAmount_token) public owner{\r\n        uint amount_token = randomNumber(minAmount_token, maxAmount_token);\r\n        BuySellVolume(amount_token);\r\n    }\r\n\r\n    function BuyVolume(uint amount_eth) public owner{\r\n        swapETHforTokens(amount_eth);\r\n    }\r\n\r\n    function SellVolume(uint amount_token) public owner{\r\n        approveTokens(amount_token);\r\n        swapTokensforETH(amount_token);\r\n    }\r\n\r\n    function addOwner(address user) public owner{\r\n        isOwner[user] = true;\r\n    }\r\n\r\n    function randomNumber(uint min, uint max) public view returns(uint){\r\n        uint num = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % max;\r\n        return num + min;\r\n    }\r\n\r\n    function setTOKEN(address token_address) public owner{\r\n        TOKEN_address = token_address;\r\n    }\r\n\r\n    function setWETH(address token_address) public owner{\r\n        WETH_address = token_address;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_token\",\"type\":\"uint256\"}],\"name\":\"BuySellVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount_token\",\"type\":\"uint256\"}],\"name\":\"BuySellVolumeRandomAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_eth\",\"type\":\"uint256\"}],\"name\":\"BuyVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_token\",\"type\":\"uint256\"}],\"name\":\"SellVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEthBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"setTOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SelenaBot", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4da9f25750d927c21620b89288285264034c3efa91efae2d1364247701476ee4"}]}