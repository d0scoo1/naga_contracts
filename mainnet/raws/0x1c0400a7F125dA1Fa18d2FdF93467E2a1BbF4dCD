{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract Marketplace is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    /**\\n     * Variables\\n     */\\n\\n    /// @notice Types of offer\\n    enum Types {\\n        regular,\\n        auction,\\n        offer\\n    }\\n\\n    /// @notice Bid object\\n    struct Bid {\\n        address payable buyer;\\n        uint256 amount;\\n        bool isWinner;\\n        bool isChargedBack;\\n    }\\n\\n    /// @notice Lot object\\n    struct Lot {\\n        address nft;\\n        address payable seller;\\n        uint256 tokenId;\\n        Types offerType;\\n        uint256 price;\\n        uint256 stopPrice;\\n        uint256 auctionStart;\\n        uint256 auctionEnd;\\n        bool isSold;\\n        bool isCanceled;\\n    }\\n\\n    /// @notice Royalty object\\n    struct Royalty {\\n        uint256 percent;\\n        address receiver;\\n    }\\n\\n    /// @dev This multiplier allows us to use the fractional part for the commission\\n    uint256 private constant FEES_MULTIPLIER = 10000;\\n\\n    /// @notice Marketplace fee\\n    /// @dev 1 == 0.01%\\n    uint256 public serviceFee;\\n\\n    /// @notice Maximal user royalty percent\\n    uint256 public maxRoyaltyPercent;\\n\\n    /// @notice Address that will receive marketplace fees\\n    address payable public feesCollector;\\n\\n    /// @notice ARA ERC20 token address\\n    address public ara;\\n\\n    /// @notice RAD Pandas NFT address\\n    address public rad;\\n\\n    /// @notice Users who are not allowed to the marketplace\\n    mapping(address => bool) public banList;\\n\\n    /// @dev All lots IDs of the seller\\n    mapping(address => uint256[]) private lotsOfSeller;\\n\\n    /// @notice All bids of lot\\n    mapping(uint256 => Bid[]) public bidsOfLot;\\n\\n    /// @notice Sellers royalties\\n    mapping(address => mapping(uint256 => Royalty)) public royalties;\\n\\n    /// @notice Array of lots\\n    Lot[] public lots;\\n\\n    /**\\n     * Events\\n     */\\n\\n    /// @notice When service fee changed\\n    event ServiceFeeChanged(uint256 newFee);\\n\\n    /// @notice When maximal royalty percent changed\\n    event MaxRoyaltyChanged(uint256 newMaxRoyaltyPercent);\\n\\n    /// @notice When user gets ban or unban status\\n    event UserBanStatusChanged(address indexed user, bool isBanned);\\n\\n    /// @notice When address of ARA token changed\\n    event ARAAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    /// @notice When address of RAD Pandas token changed\\n    event RADAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    /// @notice When new regular lot created\\n    event RegularLotCreated(uint256 indexed lotId, address indexed seller);\\n\\n    /// @notice When new auction lot created\\n    event AuctionLotCreated(uint256 indexed lotId, address indexed seller);\\n\\n    /// @notice When new offer lot created\\n    event OfferLotCreated(uint256 indexed lotId, address indexed seller);\\n\\n    /// @notice When lot removed\\n    event TokenRemovedFromSale(uint256 indexed lotId, bool indexed removedBySeller);\\n\\n    /// @notice When lot sold\\n    event Sold(uint256 indexed lotId, address indexed buyer, uint256 price, uint256 fee, uint256 royalty);\\n\\n    /// @notice When something was wrong with transaction\\n    event FailedTx(uint256 indexed lotId, uint256 bidId, address indexed recipient, uint256 amount);\\n\\n    /// @notice When royalty set\\n    event RoyaltySet(address indexed nft, uint256 indexed tokenId, address receiver, uint256 percent);\\n\\n    /// @notice When price offer created\\n    event NewOffer(address indexed buyer, uint256 price, uint256 indexed lotId);\\n\\n    /// @notice When offer accepted by the seller\\n    event OfferAccepted(uint256 indexed lotId);\\n\\n    /**\\n     * Modifiers\\n     */\\n\\n    /**\\n     * @notice Checks that the user is not banned\\n     */\\n    modifier notBanned() {\\n        require(!banList[msg.sender], \\\"you are banned\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks that the lot has not been sold or canceled\\n     * @param lotId - ID of the lot\\n     */\\n    modifier lotIsActive(uint256 lotId) {\\n        Lot memory lot = lots[lotId];\\n        require(!lot.isSold, \\\"lot already sold\\\");\\n        require(!lot.isCanceled, \\\"lot canceled\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Getters\\n     */\\n\\n    /**\\n     * @notice Get filtered lots\\n     * @param from - Minimal lotId\\n     * @param to - Get to lot Id. 0 ar any value greater than lots.length will set \\\"to\\\" to lots.length\\n     * @param getActive - Is get active lots?\\n     * @param getSold - Is get sold lots?\\n     * @param getCanceled - Is get canceled lots?\\n     * @return _filteredLots - Array of filtered lots\\n     */\\n    function getLots(\\n        uint256 from,\\n        uint256 to,\\n        bool getActive,\\n        bool getSold,\\n        bool getCanceled\\n    ) external view returns (Lot[] memory _filteredLots) {\\n        require(from < lots.length, \\\"value is bigger than lots count\\\");\\n        if (to == 0 || to >= lots.length) to = lots.length - 1;\\n        Lot[] memory _tempLots = new Lot[](lots.length);\\n        uint256 _count = 0;\\n        for (uint256 i = from; i <= to; i++) {\\n            if (\\n                (getActive && (!lots[i].isSold && !lots[i].isCanceled)) ||\\n                (getSold && lots[i].isSold) ||\\n                (getCanceled && lots[i].isCanceled)\\n            ) {\\n                _tempLots[_count] = lots[i];\\n                _count++;\\n            }\\n        }\\n        _filteredLots = new Lot[](_count);\\n        for (uint256 i = 0; i < _count; i++) {\\n            _filteredLots[i] = _tempLots[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all lots of the seller\\n     * @param seller - Address of seller\\n     * @return array of lot IDs\\n     */\\n    function getLotsOfSeller(address seller) external view returns (uint256[] memory) {\\n        return lotsOfSeller[seller];\\n    }\\n\\n    /**\\n     * @notice Get all bids of the lot\\n     * @param lotId - ID of lot\\n     * @return array of lot IDs\\n     */\\n    function getBidsOfLot(uint256 lotId) external view returns (Bid[] memory) {\\n        return bidsOfLot[lotId];\\n    }\\n\\n    /**\\n     * @notice Get lot by ERC721 address and token ID\\n     * @param nft - Address of ERC721 token\\n     * @param tokenId - ID of the token\\n     * @return _isFound - Is found or not\\n     * @return _lotId - ID of the lot\\n     */\\n    function getLotId(address nft, uint256 tokenId) external view returns (bool _isFound, uint256 _lotId) {\\n        require(nft != address(0), \\\"zero_addr\\\");\\n        _isFound = false;\\n        _lotId = 0;\\n        for (uint256 i; i < lots.length; i++) {\\n            Lot memory _lot = lots[i];\\n            if (_lot.nft == nft && _lot.tokenId == tokenId && !_lot.isCanceled && !_lot.isSold) {\\n                _isFound = true;\\n                _lotId = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get bids of the user by lot Id\\n     * @param bidder - User's address\\n     * @param lotId - ID of lot\\n     * @return _bid - Return bid\\n     */\\n    function getBidsOf(address bidder, uint256 lotId) external view returns (Bid memory _bid) {\\n        for (uint256 i = 0; i < bidsOfLot[lotId].length; i++) {\\n            _bid = bidsOfLot[lotId][i];\\n            if (_bid.buyer == bidder && !_bid.isChargedBack) {\\n                return _bid;\\n            }\\n        }\\n        revert(\\\"bid not found\\\");\\n    }\\n\\n    /**\\n     * Setters\\n     */\\n\\n    /**\\n     * @notice Change marketplace fee\\n     * @param newServiceFee - New fee amount\\n     */\\n    function setServiceFee(uint256 newServiceFee) external onlyOwner {\\n        require(serviceFee != newServiceFee, \\\"similar amount\\\");\\n        serviceFee = newServiceFee;\\n        emit ServiceFeeChanged(newServiceFee);\\n    }\\n\\n    /**\\n     * @notice Change user's ban status\\n     * @param user - Address of account\\n     * @param isBanned - Status of account\\n     */\\n    function setBanStatus(address user, bool isBanned) external onlyOwner {\\n        require(banList[user] != isBanned, \\\"address already have this status\\\");\\n        banList[user] = isBanned;\\n        emit UserBanStatusChanged(user, isBanned);\\n    }\\n\\n    /**\\n     * @notice Change ARA token address\\n     * @param _ara - New address of the ARA ERC20 token\\n     */\\n    function setARAAddress(address _ara) external onlyOwner {\\n        require(_ara != address(0), \\\"zero address\\\");\\n        require(_ara != ara, \\\"same address\\\");\\n        address _oldARA = ara;\\n        ara = _ara;\\n        emit ARAAddressChanged(_oldARA, ara);\\n    }\\n\\n    /**\\n     * @notice Change RAD Pandas token address\\n     * @param _rad - New address of the RAD NFT\\n     */\\n    function setRADAddress(address _rad) external onlyOwner {\\n        require(_rad != address(0), \\\"zero address\\\");\\n        require(_rad != rad, \\\"same address\\\");\\n        address _oldRAD = rad;\\n        rad = _rad;\\n        emit RADAddressChanged(_oldRAD, rad);\\n    }\\n\\n    /**\\n     * @notice Set maximal royalty percent\\n     * @param newMaxRoyaltyPercent - New maximal royalty percent\\n     */\\n    function setMaxRoyalty(uint256 newMaxRoyaltyPercent) external onlyOwner {\\n        require(maxRoyaltyPercent != newMaxRoyaltyPercent, \\\"similar amount\\\");\\n        maxRoyaltyPercent = newMaxRoyaltyPercent;\\n        emit MaxRoyaltyChanged(newMaxRoyaltyPercent);\\n    }\\n\\n    /**\\n     * @notice Set royalty\\n     * @dev Can be set only ones\\n     * @param nftToken - Address of NFT token\\n     * @param tokenId - ID of NFT token\\n     * @param royaltyPercent - Royalty (1% == 100)\\n     */\\n    function setRoyalty(\\n        address nftToken,\\n        uint256 tokenId,\\n        uint256 royaltyPercent\\n    ) external {\\n        require(royaltyPercent <= maxRoyaltyPercent, \\\"% is too big\\\");\\n        Royalty storage _royalty = royalties[nftToken][tokenId];\\n        require(_royalty.percent == 0, \\\"Royalty % already set\\\");\\n        require(_royalty.receiver == address(0), \\\"Royalty address already set\\\");\\n        address _tokenOwner = IERC721Upgradeable(nftToken).ownerOf(tokenId);\\n        require(msg.sender == _tokenOwner, \\\"not owner\\\");\\n        _royalty.percent = royaltyPercent;\\n        _royalty.receiver = msg.sender;\\n        emit RoyaltySet(nftToken, tokenId, msg.sender, royaltyPercent);\\n    }\\n\\n    /**\\n     * Marketplace logic\\n     */\\n\\n    /**\\n     * @notice Regular offer (not auction)\\n     * @param nft - Address of NFT contract\\n     * @param tokenId - ID of token to sale\\n     * @param price - Token price\\n     * @return _lotId - Lot ID\\n     */\\n    function makeRegularOffer(\\n        address nft,\\n        uint256 tokenId,\\n        uint256 price\\n    ) external notBanned returns (uint256 _lotId) {\\n        require(nft != address(0), \\\"zero address for NFT\\\");\\n        require(price > 0, \\\"price should be greater than 0\\\");\\n        IERC721Upgradeable(nft).safeTransferFrom(msg.sender, address(this), tokenId);\\n        Lot memory newLot = Lot(nft, payable(msg.sender), tokenId, Types.regular, price, 0, 0, 0, false, false);\\n        lots.push(newLot);\\n        _lotId = lots.length - 1;\\n        lotsOfSeller[msg.sender].push(_lotId);\\n        emit RegularLotCreated(_lotId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Regular offer (not auction)\\n     * @param nft - Address of NFT contract\\n     * @param tokenId - ID of token to sale\\n     * @param price - Token price\\n     * @param stopPrice - Price to stop auction and sale immediately\\n     * @param auctionStart - Auction starts at\\n     * @param auctionEnd - Auction finish at\\n     * @return _lotId - Lot ID\\n     */\\n    function makeAuctionOffer(\\n        address nft,\\n        uint256 tokenId,\\n        uint256 price,\\n        uint256 stopPrice,\\n        uint256 auctionStart,\\n        uint256 auctionEnd\\n    ) external notBanned returns (uint256 _lotId) {\\n        require(nft != address(0), \\\"zero address\\\");\\n        require(auctionStart > 0, \\\"auction start time should be greater than 0\\\");\\n        require(auctionEnd > auctionStart, \\\"auction end time should be greater than auction start time\\\");\\n        require(price > 0, \\\"price should be greater than 0\\\");\\n        if (stopPrice > 0) {\\n            require(stopPrice > price, \\\"stop price should be greater than price\\\");\\n        }\\n        IERC721Upgradeable(nft).safeTransferFrom(msg.sender, address(this), tokenId);\\n        Lot memory newLot = Lot(\\n            nft,\\n            payable(msg.sender),\\n            tokenId,\\n            Types.auction,\\n            price,\\n            stopPrice,\\n            auctionStart,\\n            auctionEnd,\\n            false,\\n            false\\n        );\\n        lots.push(newLot);\\n        _lotId = lots.length - 1;\\n        lotsOfSeller[msg.sender].push(_lotId);\\n        emit AuctionLotCreated(_lotId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Add token to receive price offers\\n     * @param nft - Address of NFT contract\\n     * @param tokenId - ID of token to sale\\n     * @return _lotId - Lot ID\\n     */\\n    function addTokenForOffers(address nft, uint256 tokenId) external notBanned returns (uint256 _lotId) {\\n        require(nft != address(0), \\\"zero address for NFT\\\");\\n        IERC721Upgradeable(nft).safeTransferFrom(msg.sender, address(this), tokenId);\\n        Lot memory newLot = Lot(nft, payable(msg.sender), tokenId, Types.offer, 0, 0, 0, 0, false, false);\\n        lots.push(newLot);\\n        _lotId = lots.length - 1;\\n        lotsOfSeller[msg.sender].push(_lotId);\\n        emit RegularLotCreated(_lotId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Remove lot from sale and return users funds\\n     * @dev Only lot owner or contract owner can do this\\n     * @param lotId - ID of the lot\\n     */\\n    function removeLot(uint256 lotId) external lotIsActive(lotId) nonReentrant {\\n        Lot storage lot = lots[lotId];\\n        require(msg.sender == lot.seller || msg.sender == owner(), \\\"only owner or seller can remove\\\");\\n        lot.isCanceled = true;\\n        if (lot.offerType != Types.regular) {\\n            // send funds to bidders\\n            Bid[] storage bids = bidsOfLot[lotId];\\n            for (uint256 i = 0; i < bids.length; i++) {\\n                Bid storage _bid = bids[i];\\n                if (!_bid.isChargedBack && !_bid.isWinner) {\\n                    _bid.isChargedBack = true;\\n                    (bool sent, ) = _bid.buyer.call{value: _bid.amount}(\\\"\\\");\\n                    require(sent, \\\"something went wrong\\\");\\n                }\\n            }\\n        }\\n        // send NFT back to the seller\\n        IERC721Upgradeable(lot.nft).safeTransferFrom(address(this), lot.seller, lot.tokenId);\\n        emit TokenRemovedFromSale(lotId, msg.sender == lot.seller);\\n    }\\n\\n    /**\\n     * @notice Update price for a regular offer\\n     * @param lotId - ID of the lot\\n     * @param newPrice - New price of the lot\\n     */\\n    function changeRegularOfferPrice(uint256 lotId, uint256 newPrice) external lotIsActive(lotId) {\\n        Lot storage _lot = lots[lotId];\\n        require(msg.sender == _lot.seller, \\\"not seller\\\");\\n        require(_lot.offerType == Types.regular, \\\"only regular offer\\\");\\n        require(_lot.price != newPrice, \\\"same\\\");\\n        _lot.price = newPrice;\\n    }\\n\\n    /**\\n     * @notice Make offer to lot\\n     * @param lotId - ID of the lot\\n     */\\n    function makeOffer(uint256 lotId) external payable notBanned lotIsActive(lotId) nonReentrant {\\n        Lot storage lot = lots[lotId];\\n        require(lot.offerType == Types.offer, \\\"only offer lot type\\\");\\n        Bid[] storage _bids = bidsOfLot[lotId];\\n        if (_bids.length > 0) {\\n            (bool _hasActiveBid, uint256 _activeBidId) = _getLastActiveBid(lotId);\\n            if (_hasActiveBid) {\\n                require(msg.value > _bids[_activeBidId].amount);\\n                (bool _isOk, uint256 _id) = _getMyLastOfferBid(lotId);\\n                if (_isOk) {\\n                    Bid storage _lastBid = _bids[_id];\\n                    _lastBid.isChargedBack = true;\\n                    (bool isTransfered, ) = _lastBid.buyer.call{value: _lastBid.amount}(\\\"\\\");\\n                    require(isTransfered, \\\"payment error\\\");\\n                }\\n            }\\n        }\\n        Bid memory _newBid = Bid(payable(msg.sender), msg.value, false, false);\\n        (bool isOk, ) = payable(address(this)).call{value: msg.value}(\\\"\\\");\\n        require(isOk, \\\"payment error\\\");\\n        _bids.push(_newBid);\\n        emit NewOffer(msg.sender, msg.value, lotId);\\n    }\\n\\n    /**\\n     * @notice Make offer to lot\\n     * @param lotId - ID of the lot\\n     */\\n    function acceptOffer(uint256 lotId) external payable notBanned lotIsActive(lotId) nonReentrant {\\n        Lot storage lot = lots[lotId];\\n        require(lot.seller == msg.sender, \\\"seller only\\\");\\n        require(lot.offerType == Types.offer, \\\"only offer lot type\\\");\\n        Bid[] storage _bids = bidsOfLot[lotId];\\n        require(_bids.length > 0, \\\"no bids\\\");\\n        (bool _hasActiveBid, uint256 _activeBidId) = _getLastActiveBid(lotId);\\n        require(_hasActiveBid, \\\"no active bids\\\");\\n        Bid storage _winner = _bids[_activeBidId];\\n        _winner.isWinner = true;\\n        _buy(lot, _winner.amount, lotId);\\n        emit OfferAccepted(lotId);\\n    }\\n\\n    /**\\n     * @notice Buy regular lot (not auction)\\n     * @param lotId - ID of the lot\\n     */\\n    function buy(uint256 lotId) external payable notBanned lotIsActive(lotId) nonReentrant {\\n        Lot storage lot = lots[lotId];\\n        require(lot.offerType == Types.regular, \\\"only regular lot type\\\");\\n        require(msg.value == lot.price, \\\"wrong ether amount\\\");\\n        _buy(lot, lot.price, lotId);\\n    }\\n\\n    /**\\n     * @notice Make auction bid\\n     * @param lotId - ID of the lot\\n     */\\n    function bid(uint256 lotId) external payable notBanned lotIsActive(lotId) nonReentrant {\\n        Lot storage lot = lots[lotId];\\n        require(lot.offerType == Types.auction, \\\"only auction lot type\\\");\\n        require(lot.auctionStart <= block.timestamp, \\\"auction is not started yet\\\");\\n        require(lot.auctionEnd >= block.timestamp, \\\"auction already finished\\\");\\n        Bid[] storage bids = bidsOfLot[lotId];\\n        uint256 bidAmount = msg.value;\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            if (bids[i].buyer == msg.sender && !bids[i].isChargedBack) {\\n                bidAmount += bids[i].amount;\\n            }\\n        }\\n        if (lot.stopPrice != 0) {\\n            require(bidAmount <= lot.stopPrice, \\\"amount should be less or equal to stop price\\\");\\n        }\\n        require(bidAmount >= lot.price, \\\"amount should be great or equal to lot price\\\");\\n        if (bids.length > 0) {\\n            require(bids[bids.length - 1].amount < bidAmount, \\\"bid should be greater than last\\\");\\n        }\\n        // Pay\\n        (bool fundsInMarketplace, ) = payable(address(this)).call{value: msg.value}(\\\"\\\");\\n        require(fundsInMarketplace, \\\"payment error (bidder)\\\");\\n        Bid memory newBid = Bid(payable(msg.sender), bidAmount, false, false);\\n        // Do not send funds to previous bids, because this amount in last bid\\n        for (uint256 i = 0; i < bids.length; i++) {\\n            if (bids[i].buyer == msg.sender && !bids[i].isChargedBack) {\\n                bids[i].isChargedBack = true;\\n            }\\n        }\\n        bids.push(newBid);\\n        // finalize when target price reached\\n        if (lot.stopPrice != 0 && bidAmount == lot.stopPrice) {\\n            lot.auctionEnd = block.timestamp - 1;\\n            _finalize(lotId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Finalize auction (external function)\\n     * @param lotId - ID of the lot\\n     */\\n    function finalize(uint256 lotId) external notBanned lotIsActive(lotId) nonReentrant {\\n        _finalize(lotId);\\n    }\\n\\n    /**\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Get last offer bid of msg.sender\\n     * @param _lotId - ID of the lot\\n     * @return _isOk - Bid found\\n     * @return _bidId - Id of the lot bid\\n     */\\n    function _getMyLastOfferBid(uint256 _lotId) internal view returns (bool _isOk, uint256 _bidId) {\\n        Bid[] memory _bids = bidsOfLot[_lotId];\\n        if (_bids.length > 0) {\\n            for (uint256 _i = _bids.length - 1; _i >= 0; _i--) {\\n                if (_bids[_i].buyer == msg.sender && !_bids[_i].isChargedBack) {\\n                    _isOk = true;\\n                    _bidId = _i;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get last offer bid\\n     * @param _lotId - ID of the lot\\n     * @return _isOk - Bid found\\n     * @return _bidId - Id of the lot bid\\n     */\\n    function _getLastActiveBid(uint256 _lotId) internal view returns (bool _isOk, uint256 _bidId) {\\n        Bid[] memory _bids = bidsOfLot[_lotId];\\n        if (_bids.length > 0) {\\n            for (uint256 _i = _bids.length - 1; _i >= 0; _i--) {\\n                if (!_bids[_i].isChargedBack) {\\n                    _isOk = true;\\n                    _bidId = _i;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Send funds and token\\n     * @param lot - Lot to buy\\n     * @param price - Lot price\\n     * @param lotId - ID of the lot\\n     */\\n    function _buy(\\n        Lot storage lot,\\n        uint256 price,\\n        uint256 lotId\\n    ) internal {\\n        uint256 _fee = (price * serviceFee) / FEES_MULTIPLIER;\\n        uint256 _royaltyPercent = 0;\\n        bool _payRoyalty = IERC20Upgradeable(ara).balanceOf(lot.seller) < 50000 ether;\\n        if (_payRoyalty) {\\n            _payRoyalty = IERC721Upgradeable(rad).balanceOf(lot.seller) < 1;\\n        }\\n        if (_payRoyalty) {\\n            Royalty memory _royalty = royalties[lot.nft][lot.tokenId];\\n            if (_royalty.percent > 0) {\\n                _royaltyPercent = (price * _royalty.percent) / FEES_MULTIPLIER;\\n                (bool payedRoyalty, ) = payable(_royalty.receiver).call{value: _royaltyPercent}(\\\"\\\");\\n                require(payedRoyalty, \\\"payment error (royalty)\\\");\\n            }\\n        }\\n        (bool payedToSeller, ) = lot.seller.call{value: price - _fee - _royaltyPercent}(\\\"\\\");\\n        require(payedToSeller, \\\"payment error (seller)\\\");\\n        (bool payedToFeesCollector, ) = feesCollector.call{value: _fee}(\\\"\\\");\\n        require(payedToFeesCollector, \\\"payment error (fees collector)\\\");\\n        lot.isSold = true;\\n        IERC721Upgradeable(lot.nft).safeTransferFrom(address(this), msg.sender, lot.tokenId);\\n        emit Sold(lotId, msg.sender, price, _fee, _royaltyPercent);\\n    }\\n\\n    /**\\n     * @dev Finalize auction (internal function)\\n     * @param lotId - ID of the lot\\n     */\\n    function _finalize(uint256 lotId) internal {\\n        Lot storage lot = lots[lotId];\\n        Bid[] storage bids = bidsOfLot[lotId];\\n        require(bids.length > 0, \\\"no bids\\\");\\n        require(lot.auctionEnd < block.timestamp, \\\"auction is not finished yet\\\");\\n        uint256 winnerId;\\n        if (bids.length == 1) {\\n            winnerId = 0;\\n        } else {\\n            winnerId = bids.length - 1;\\n            for (uint256 i = 0; i < bids.length - 1; i++) {\\n                Bid storage _bid = bids[i];\\n                if (!_bid.isChargedBack) {\\n                    _bid.isChargedBack = true;\\n                    (bool success, ) = _bid.buyer.call{value: _bid.amount}(\\\"\\\");\\n                    if (!success) {\\n                        emit FailedTx(lotId, i, _bid.buyer, _bid.amount);\\n                    }\\n                }\\n            }\\n        }\\n        bids[winnerId].isWinner = true;\\n        _buy(lot, bids[winnerId].amount, lotId);\\n    }\\n\\n    /**\\n     * Other\\n     */\\n\\n    /// @notice Acts like constructor() for upgradeable contracts\\n    function initialize(address _ara, address _rad) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        feesCollector = payable(msg.sender);\\n        serviceFee = 0;\\n        maxRoyaltyPercent = 1000; // 10%\\n        ara = _ara;\\n        rad = _rad;\\n    }\\n\\n    /// @notice To make ERC721 safeTransferFrom works\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external pure returns (bytes4) {\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    /// @notice Allow this contract to receive ether\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ARAAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionLotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxRoyaltyPercent\",\"type\":\"uint256\"}],\"name\":\"MaxRoyaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"OfferLotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RADAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"RegularLotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"RoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ServiceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"removedBySeller\",\"type\":\"bool\"}],\"name\":\"TokenRemovedFromSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"UserBanStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addTokenForOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ara\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"banList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidsOfLot\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isChargedBack\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeRegularOfferPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"getBidsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isChargedBack\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"getBidsOfLot\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isChargedBack\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLotId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isFound\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"getActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"getSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"getCanceled\",\"type\":\"bool\"}],\"name\":\"getLots\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum Marketplace.Types\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.Lot[]\",\"name\":\"_filteredLots\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getLotsOfSeller\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ara\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rad\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum Marketplace.Types\",\"name\":\"offerType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"}],\"name\":\"makeAuctionOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"makeRegularOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoyaltyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotId\",\"type\":\"uint256\"}],\"name\":\"removeLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ara\",\"type\":\"address\"}],\"name\":\"setARAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"setBanStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxRoyaltyPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rad\",\"type\":\"address\"}],\"name\":\"setRADAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercent\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newServiceFee\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}