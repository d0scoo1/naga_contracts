{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >0.4.23 <0.9.0;\r\n\r\ninterface Wriggler{\r\n    function yeet(address target) external;\r\n    function yoink() external;\r\n}\r\n\r\ncontract EphemeralWrigglerVault {\r\n    address constant wriggler = 0xCA5d26fda442bbF604f20CC88289Ea1661863C44;\r\n\r\n    function pull() public {\r\n        Wriggler(wriggler).yoink();\r\n    }\r\n\r\n    function push(address target) public {\r\n        Wriggler(wriggler).yeet(target);\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes calldata) pure external returns(bytes4) {\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n}\r\n\r\ncontract CloneFactory {\r\n\r\n  function createClone(address target) internal returns (address result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n      mstore(add(clone, 0x14), targetBytes)\r\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n      result := create(0, clone, 0x37)\r\n    }\r\n  }\r\n\r\n  function isClone(address target, address query) internal view returns (bool result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\r\n      mstore(add(clone, 0xa), targetBytes)\r\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\r\n      let other := add(clone, 0x40)\r\n      extcodecopy(query, other, 0, 0x2d)\r\n      result := and(\r\n        eq(mload(clone), mload(other)),\r\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\ncontract YoinkFactory is CloneFactory {\r\n    address private lib;\r\n\r\n    constructor(address _lib) {\r\n        lib = _lib;\r\n    }\r\n    \r\n    function yeetChain(address target) public {\r\n        address clone1 = createClone(lib);\r\n        address clone2 = createClone(lib);\r\n        address clone3 = createClone(lib);\r\n        address clone4 = createClone(lib);\r\n        EphemeralWrigglerVault(clone1).pull();\r\n        EphemeralWrigglerVault(clone1).push(clone2);\r\n        EphemeralWrigglerVault(clone2).push(clone3);\r\n        EphemeralWrigglerVault(clone3).push(clone4);\r\n        EphemeralWrigglerVault(clone4).push(target);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"yeetChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YoinkFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000081ac82470f07fd125a54f88520cf209c149afbac", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6a54d3551fa93d82a3bd8f046c8d2ec124a222d40a697b50102d086bcf7a8e2"}]}