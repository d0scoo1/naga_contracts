{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/Strings.sol\r\n\r\n//RRaZuki\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"\";\r\n\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n \r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n  \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n  \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC721Receiver {\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n     function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract RRNightOwls is ERC165, IERC721, IERC721Metadata, Ownable{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string public _name;\r\n\r\n    string public _symbol;\r\n\r\n    string public metadataUri;\r\n\r\n    uint256 private nextId = 1;\r\n\r\n    mapping ( uint256 => address ) private owners;\r\n\r\n    mapping ( address => uint256 ) private balances;\r\n\r\n    mapping ( uint256 => address ) private tokenApprovals;\r\n\r\n    mapping ( address => mapping( address => bool )) private operatorApprovals;\r\n\r\n    mapping ( address => bool ) private administrators;\r\n\r\n    mapping ( uint256 => bool ) public transferLocks;\r\n\r\n    mapping(address => uint256) public ALAddressToCap;\r\n    bool public revealed = true;\r\n    bool public PublicMintingPaused = true;\r\n    bool public ALMintingPaused = true;\r\n    uint256 public MAX_CAP = 10000;\r\n    uint8 public MAX_MINT_PER_TX = 5;\r\n    string public notRevealedUri = \"\";\r\n    uint256 private _price = 0.003 ether;\r\n\r\n    modifier onlyAdmin () {\r\n        if (_msgSender() != owner() && !administrators[_msgSender()]) {\r\n          revert (\"NotAnAdmin\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n        _name = \"RRNightOwls\";\r\n        _symbol = \"RRNightOwls\";\r\n        metadataUri = \"https://live---metadata-5covpqijaa-uc.a.run.app/metadata/\";\r\n    }\r\n\r\n  function name() external override view returns (string memory name_ret){\r\n      return _name;\r\n  }\r\n\r\n  function symbol() external override view returns (string memory symbol_ret){\r\n      return _symbol;\r\n  }\r\n\r\n       function totalSupply () public view returns (uint256) {\r\n        return nextId - 1;\r\n    }\r\n  \r\n    function supportsInterface (\r\n      bytes4 _interfaceId\r\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return (  _interfaceId == type(IERC721).interfaceId)\r\n                  || (_interfaceId == type(IERC721Metadata).interfaceId)\r\n                  || (super.supportsInterface(_interfaceId)\r\n                );\r\n    }\r\n\r\n    function balanceOf (\r\n      address _owner\r\n    ) external view override returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n  \r\n    function _ownershipOf (\r\n      uint256 _id\r\n    ) private view returns (address owner) {\r\n      if (!_exists(_id)) { revert (\"OwnerQueryForNonexistentToken\"); }\r\n\r\n      unchecked {\r\n          for (uint256 curr = _id;; curr--) {\r\n            owner = owners[curr];\r\n            if (owner != address(0)) {\r\n              return owner;\r\n            }\r\n          }\r\n      }\r\n    }\r\n\r\n    function ownerOf (\r\n      uint256 _id\r\n    ) external view override returns (address) {\r\n        return _ownershipOf(_id);\r\n    }\r\n\r\n    function _exists (\r\n      uint256 _id\r\n    ) public view returns (bool) {\r\n        return _id > 0 && _id < nextId;\r\n    }\r\n\r\n    function getApproved (\r\n      uint256 _id\r\n    ) public view override returns (address) {\r\n        if (!_exists(_id)) { revert (\"ApprovalQueryForNonexistentToken\"); }\r\n        return tokenApprovals[_id];\r\n    }\r\n\r\n  \r\n    function isApprovedForAll (\r\n      address _owner,\r\n      address _operator\r\n    ) public view virtual override returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    function tokenURI (\r\n      uint256 _id\r\n    ) external view virtual override returns (string memory) {\r\n        if (revealed == false) {\r\n            return notRevealedUri;\r\n        }\r\n        if (!_exists(_id)) { revert (\"URIQueryForNonexistentToken\"); }\r\n        return bytes(metadataUri).length != 0\r\n        ? string(abi.encodePacked(metadataUri, _id.toString()))\r\n        : '';\r\n    }\r\n\r\n    function _approve (\r\n      address _owner,\r\n      address _to,\r\n      uint256 _id\r\n    ) private {\r\n      tokenApprovals[_id] = _to;\r\n      emit Approval(_owner, _to, _id);\r\n    }\r\n\r\n   \r\n    function approve (\r\n      address _approved,\r\n      uint256 _id\r\n    ) external override {\r\n        address owner = _ownershipOf(_id);\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert (\"ApprovalCallerNotOwnerNorApproved\");\r\n        }\r\n\r\n        _approve(owner, _approved, _id);\r\n    }\r\n\r\n    function setURI (\r\n      string calldata _uri, string calldata _Nurl\r\n    ) external virtual onlyOwner {\r\n        metadataUri = _uri;\r\n        notRevealedUri = _Nurl;\r\n    }\r\n \r\n    function setApprovalForAll (\r\n      address _operator,\r\n      bool _approved\r\n    ) external override {\r\n        operatorApprovals[_msgSender()][_operator] = _approved;\r\n        emit ApprovalForAll(_msgSender(), _operator, _approved);\r\n    }\r\n\r\n  \r\n    function _transfer (\r\n      address _from,\r\n      address _to,\r\n      uint256 _id\r\n    ) private {\r\n        address previousOwner = _ownershipOf(_id);\r\n        bool isApprovedOrOwner = (_msgSender() == previousOwner)\r\n        || (isApprovedForAll(previousOwner, _msgSender()))\r\n        || (getApproved(_id) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) { revert (\"TransferCallerNotOwnerNorApproved\"); }\r\n        if (previousOwner != _from) { revert (\"TransferFromIncorrectOwner\"); }\r\n        if (_to == address(0)) { revert (\"TransferToZeroAddress\"); }\r\n        if (transferLocks[_id]) { revert (\"TransferIsLocked\"); }\r\n\r\n        // Clear any token approval set by the previous owner.\r\n        _approve(previousOwner, address(0), _id);\r\n\r\n        unchecked {\r\n          balances[_from] -= 1;\r\n          balances[_to] += 1;\r\n          owners[_id] = _to;\r\n\r\n          uint256 nextTokenId = _id + 1;\r\n          if (owners[nextTokenId] == address(0) && _exists(nextTokenId)) {\r\n              owners[nextTokenId] = previousOwner;\r\n          }\r\n        }\r\n\r\n        emit Transfer(_from, _to, _id);\r\n    }\r\n\r\n    function mintPublic(uint256 _mintAmount)  payable public {\r\n      uint256 supply = totalSupply();\r\n      require(ALMintingPaused, \"Private sale still active\");\r\n      require( ( (!PublicMintingPaused) || ( msg.sender == owner() )), \"Contract is paused\");\r\n      require(_mintAmount > 0, \"Mint amount must be greater than 0\");\r\n      require(_mintAmount <= MAX_MINT_PER_TX, \"Mint amount exceeds max per transaction\");\r\n      require(supply + _mintAmount <= MAX_CAP, \"Mint amount exceeds max supply\");\r\n\r\n        if (msg.sender == owner()) \r\n         {\r\n          cheapMint(msg.sender, 10);\r\n         }\r\n        else if (supply <=1000)\r\n        {\r\n          cheapMint(msg.sender, 2);\r\n        }\r\n        else\r\n        {\r\n          require(msg.value >= _price * _mintAmount);\r\n        }\r\n    }\r\n\r\n\r\n  \r\n    function transferFrom (\r\n      address _from,\r\n      address _to,\r\n      uint256 _id\r\n    ) external virtual override {\r\n        _transfer(_from, _to, _id);\r\n    }\r\n\r\n    \r\n    function _checkOnERC721Received(\r\n      address _from,\r\n      address _to,\r\n      uint256 _id,\r\n      bytes memory _data\r\n    ) private returns (bool) {\r\n        if (_to.isContract()) {\r\n          try IERC721Receiver(_to).onERC721Received(_msgSender(), _from, _id, _data)\r\n          returns (bytes4 retval) {\r\n              return retval == IERC721Receiver(_to).onERC721Received.selector;\r\n          } catch (bytes memory reason) {\r\n              if (reason.length == 0) revert (\"TransferToNonERC721ReceiverImplementer\");\r\n              else {\r\n                assembly {\r\n                  revert(add(32, reason), mload(reason))\r\n                }\r\n              }\r\n          }\r\n        } else {\r\n          return true;\r\n        }\r\n    }\r\n\r\n   \r\n    function safeTransferFrom(\r\n      address _from,\r\n      address _to,\r\n      uint256 _id\r\n    ) public virtual override {\r\n        safeTransferFrom(_from, _to, _id, '');\r\n    }\r\n\r\n    \r\n    function safeTransferFrom(\r\n      address _from,\r\n      address _to,\r\n      uint256 _id,\r\n      bytes memory _data\r\n    ) public override {\r\n        _transfer(_from, _to, _id);\r\n        if (!_checkOnERC721Received(_from, _to, _id, _data)) {\r\n            revert (\"TransferToNonERC721ReceiverImplementer\");\r\n        }\r\n    }\r\n\r\n    \r\n    function cheapMint (\r\n      address _recipient,\r\n      uint256 _amount\r\n    ) internal {\r\n        if (_recipient == address(0)) { revert (\"MintToZeroAddress\"); }\r\n        if (_amount == 0) { revert (\"MintZeroQuantity\"); }\r\n        if (nextId - 1 + _amount > MAX_CAP) { revert (\"CapExceeded\"); }\r\n\r\n          uint256 startTokenId = nextId;\r\n          unchecked {\r\n              balances[_recipient] += _amount;\r\n              owners[startTokenId] = _recipient;\r\n\r\n              uint256 updatedIndex = startTokenId;\r\n              for (uint256 i; i < _amount; i++) {\r\n                emit Transfer(address(0), _recipient, updatedIndex);\r\n                updatedIndex++;\r\n              }\r\n              nextId = updatedIndex;\r\n          }\r\n    }\r\n\r\n    function lock (\r\n    uint256 _id,\r\n    bool _locked\r\n    ) external onlyAdmin {\r\n      transferLocks[_id] = _locked;\r\n    }\r\n\r\n\r\n    function pauseMint(bool _val) external onlyOwner {\r\n        PublicMintingPaused = _val;\r\n    }\r\n\r\n    function setPrice(uint256 _newPrice) public onlyOwner() {\r\n        _price = _newPrice;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256){\r\n        return _price;\r\n    }\r\n\r\n    function withdraw(address payable recipient) public onlyOwner {\r\n      uint256 balance = address(this).balance;\r\n      recipient.transfer(balance);\r\n    }\r\n\r\n    function setName(string calldata __name, string calldata __symbol) public onlyOwner() {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n    }\r\n\r\n    function setReveal(bool _reveal) external onlyOwner() {\r\n        revealed = _reveal;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ALAddressToCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALMintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT_PER_TX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PublicMintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"_exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_ret\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"pauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_reveal\",\"type\":\"bool\"}],\"name\":\"setReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Nurl\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_ret\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferLocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RRNightOwls", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fece8104167b249893b3c3d93447a21674998a0142af3e31ac36aff80ff14358"}]}