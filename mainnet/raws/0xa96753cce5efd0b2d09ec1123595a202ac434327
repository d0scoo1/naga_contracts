{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n\r\nlibrary BobbySafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract BobbyERC20Base {\r\n\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n\r\n    //\u662f\u5426\u6682\u505c\u667a\u80fd\u5408\u7ea6\u7684\u8fd0\u884c\r\n    bool public paused = false;\r\n\r\n    constructor(address cfoAddr) public {\r\n        ceoAddress = msg.sender;\r\n        cfoAddress = cfoAddr;\r\n    }\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier allButCFO() {\r\n        require(msg.sender != cfoAddress);\r\n        _;\r\n    }\r\n\r\n    function setCFO(address _newCFO) public onlyCEO {\r\n        require(_newCFO != address(0));\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyCEO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyCEO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    //ERC20\u6307\u5b9a\u63a5\u53e3\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n\r\n    //extend event\r\n    event Grant(address indexed src, address indexed dst, uint wad);    //\u53d1\u653e\u4ee3\u5e01\uff0c\u6709\u89e3\u7981\u671f\r\n    event Unlock(address indexed user, uint wad);                       //\u89e3\u7981\u4ee3\u5e01\r\n\r\n    function name() public view returns (string n);\r\n    function symbol() public view returns (string s);\r\n    function decimals() public view returns (uint8 d);\r\n    function totalSupply() public view returns (uint256 t);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n//Erc\u667a\u80fd\u5408\u7ea6\r\ncontract ERC20 is ERC20Interface, BobbyERC20Base {\r\n    using BobbySafeMath for uint256;\r\n\r\n    uint private _Thousand = 1000;\r\n    uint private _Billion = _Thousand * _Thousand * _Thousand;\r\n\r\n    //\u4ee3\u5e01\u57fa\u672c\u4fe1\u606f\r\n    string private _name = \"BOBBYTest\";     //\u4ee3\u5e01\u540d\u79f0\r\n    string private _symbol = \"BOBBYTest\";   //\u4ee3\u5e01\u6807\u8bc6\r\n    uint8 private _decimals = 9;        //\u5c0f\u6570\u70b9\u540e\u4f4d\u6570\r\n    uint256 private _totalSupply = 10 * _Billion * (10 ** uint256(_decimals));\r\n\r\n    //\u89e3\u5c01\u7528\u6237\u4ee3\u5e01\u7ed3\u6784\r\n    struct UserToken {\r\n        uint index;              //\u653e\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\r\n        address addr;            //\u7528\u6237\u8d26\u53f7\r\n        uint256 tokens;          //\u901a\u8bc1\u6570\u91cf\r\n\r\n        uint256 unlockUnit;     // \u6bcf\u6b21\u89e3\u9501\u6570\u91cf\r\n        uint256 unlockPeriod;   // \u89e3\u9501\u65f6\u95f4\u95f4\u9694\r\n        uint256 unlockLeft;     // \u672a\u89e3\u9501\u901a\u8bc1\u6570\u91cf\r\n        uint256 unlockLastTime; // \u4e0a\u6b21\u89e3\u9501\u65f6\u95f4\r\n    }\r\n\r\n    mapping(address=>UserToken) private _balancesMap;           //\u7528\u6237\u53ef\u7528\u4ee3\u5e01\u6620\u5c04\r\n    address[] private _balancesArray;                           //\u7528\u6237\u53ef\u7528\u4ee3\u5e01\u6570\u7ec4,from 1\r\n\r\n    uint32 private actionTransfer = 0;\r\n    uint32 private actionGrant = 1;\r\n    uint32 private actionUnlock = 2;\r\n\r\n    struct LogEntry {\r\n        uint256 time;\r\n        uint32  action;       // 0 \u8f6c\u8d26 1 \u53d1\u653e 2 \u89e3\u9501\r\n        address from;\r\n        address to;\r\n        uint256 v1;\r\n        uint256 v2;\r\n        uint256 v3;\r\n    }\r\n\r\n    LogEntry[] private _logs;\r\n\r\n    //\u6784\u9020\u65b9\u6cd5\uff0c\u5c06\u4ee3\u5e01\u7684\u521d\u59cb\u603b\u4f9b\u7ed9\u90fd\u5206\u914d\u7ed9\u5408\u7ea6\u7684\u90e8\u7f72\u8d26\u6237\u3002\u5408\u7ea6\u7684\u6784\u9020\u65b9\u6cd5\u53ea\u5728\u5408\u7ea6\u90e8\u7f72\u65f6\u6267\u884c\u4e00\u6b21\r\n    constructor(address cfoAddr) BobbyERC20Base(cfoAddr) public {\r\n\r\n        //placeholder\r\n        _balancesArray.push(address(0));\r\n\r\n        //\u6b64\u5904\u9700\u8981\u6ce8\u610f\uff0c\u8bf7\u4f7f\u7528CEO\u7684\u5730\u5740,\u56e0\u4e3a\u521d\u59cb\u5316\u540e\uff0c\u5c06\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3aCEO\u5730\u5740\r\n        //\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u4f7f\u7528memory\u7c7b\u578b\uff0c\u5426\u5219\uff0c\u540e\u9762\u7684\u8d4b\u503c\u4f1a\u5f71\u54cd\u5176\u5b83\u6210\u5458\u53d8\u91cf\r\n        UserToken memory userCFO;\r\n        userCFO.index = _balancesArray.length;\r\n        userCFO.addr = cfoAddr;\r\n        userCFO.tokens = _totalSupply;\r\n        userCFO.unlockUnit = 0;\r\n        userCFO.unlockPeriod = 0;\r\n        userCFO.unlockLeft = 0;\r\n        userCFO.unlockLastTime = 0;\r\n        _balancesArray.push(cfoAddr);\r\n        _balancesMap[cfoAddr] = userCFO;\r\n    }\r\n\r\n    //\u8fd4\u56de\u5408\u7ea6\u540d\u79f0\u3002view\u5173\u952e\u5b50\u8868\u793a\u51fd\u6570\u53ea\u67e5\u8be2\u72b6\u6001\u53d8\u91cf\uff0c\u800c\u4e0d\u5199\u5165\r\n    function name() public view returns (string n){\r\n        n = _name;\r\n    }\r\n\r\n    //\u8fd4\u56de\u5408\u7ea6\u6807\u8bc6\u7b26\r\n    function symbol() public view returns (string s){\r\n        s = _symbol;\r\n    }\r\n\r\n    //\u8fd4\u56de\u5408\u7ea6\u5c0f\u6570\u4f4d\r\n    function decimals() public view returns (uint8 d){\r\n        d = _decimals;\r\n    }\r\n\r\n    //\u8fd4\u56de\u5408\u7ea6\u603b\u4f9b\u7ed9\u989d\r\n    function totalSupply() public view returns (uint256 t){\r\n        t = _totalSupply;\r\n    }\r\n\r\n    //\u67e5\u8be2\u8d26\u6237_owner\u7684\u8d26\u6237\u4f59\u989d\r\n    function balanceOf(address _owner) public view returns (uint256 balance){\r\n        UserToken storage user = _balancesMap[_owner];\r\n        balance = user.tokens.add(user.unlockLeft);\r\n    }\r\n\r\n    //\u4ece\u4ee3\u5e01\u5408\u7ea6\u7684\u8c03\u7528\u8005\u5730\u5740\u4e0a\u8f6c\u79fb_value\u7684\u6570\u91cftoken\u5230\u7684\u5730\u5740_to\uff0c\u5e76\u4e14\u5fc5\u987b\u89e6\u53d1Transfer\u4e8b\u4ef6\r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        require(!paused);\r\n        require(msg.sender != cfoAddress);\r\n        require(msg.sender != _to);\r\n\r\n        //\u5148\u5224\u65ad\u662f\u5426\u6709\u53ef\u4ee5\u89e3\u7981\r\n        if(_balancesMap[msg.sender].unlockLeft > 0){\r\n            UserToken storage sender = _balancesMap[msg.sender];\r\n            uint256 diff = now.sub(sender.unlockLastTime);\r\n            uint256 round = diff.div(sender.unlockPeriod);\r\n            if(round > 0) {\r\n                uint256 unlocked = sender.unlockUnit.mul(round);\r\n                if (unlocked > sender.unlockLeft) {\r\n                    unlocked = sender.unlockLeft;\r\n                }\r\n\r\n                sender.unlockLeft = sender.unlockLeft.sub(unlocked);\r\n                sender.tokens = sender.tokens.add(unlocked);\r\n                sender.unlockLastTime = sender.unlockLastTime.add(sender.unlockPeriod.mul(round));\r\n\r\n                emit Unlock(msg.sender, unlocked);\r\n                log(actionUnlock, msg.sender, 0, unlocked, 0, 0);\r\n            }\r\n        }\r\n\r\n        require(_balancesMap[msg.sender].tokens >= _value);\r\n        _balancesMap[msg.sender].tokens = _balancesMap[msg.sender].tokens.sub(_value);\r\n\r\n        uint index = _balancesMap[_to].index;\r\n        if(index == 0){\r\n            UserToken memory user;\r\n            user.index = _balancesArray.length;\r\n            user.addr = _to;\r\n            user.tokens = _value;\r\n            user.unlockUnit = 0;\r\n            user.unlockPeriod = 0;\r\n            user.unlockLeft = 0;\r\n            user.unlockLastTime = 0;\r\n            _balancesMap[_to] = user;\r\n            _balancesArray.push(_to);\r\n        }\r\n        else{\r\n            _balancesMap[_to].tokens = _balancesMap[_to].tokens.add(_value);\r\n        }\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        log(actionTransfer, msg.sender, _to, _value, 0, 0);\r\n        success = true;\r\n    }\r\n\r\n    function transferFrom(address, address, uint256) public returns (bool success){\r\n        require(!paused);\r\n        success = true;\r\n    }\r\n\r\n    function approve(address, uint256) public returns (bool success){\r\n        require(!paused);\r\n        success = true;\r\n    }\r\n\r\n    function allowance(address, address) public view returns (uint256 remaining){\r\n        require(!paused);\r\n        remaining = 0;\r\n    }\r\n\r\n    function grant(address _to, uint256 _value, uint256 _duration, uint256 _periods) public returns (bool success){\r\n        require(msg.sender != _to);\r\n        require(_balancesMap[msg.sender].tokens >= _value);\r\n        require(_balancesMap[_to].unlockLastTime == 0);\r\n\r\n        _balancesMap[msg.sender].tokens = _balancesMap[msg.sender].tokens.sub(_value);\r\n\r\n        if(_balancesMap[_to].index == 0){\r\n            UserToken memory user;\r\n            user.index = _balancesArray.length;\r\n            user.addr = _to;\r\n            user.tokens = 0;\r\n            user.unlockUnit = _value.div(_periods);\r\n            // user.unlockPeriod = _duration.mul(30).mul(1 days).div(_periods);\r\n            user.unlockPeriod = _duration.mul(1 days).div(_periods); //for test \r\n            user.unlockLeft = _value;\r\n            user.unlockLastTime = now;\r\n            _balancesMap[_to] = user;\r\n            _balancesArray.push(_to);\r\n        }\r\n        else{\r\n            _balancesMap[_to].unlockUnit = _value.div(_periods);\r\n            // _balancesMap[_to].unlockPeriod = _duration.mul(30).mul(1 days).div(_periods);\r\n            _balancesMap[_to].unlockPeriod = _duration.mul(1 days).div(_periods); //for test\r\n            _balancesMap[_to].unlockLeft = _value;\r\n            _balancesMap[_to].unlockLastTime = now;\r\n        }\r\n\r\n        emit Grant(msg.sender, _to, _value);\r\n        log(actionGrant, msg.sender, _to, _value, _duration, _periods);\r\n        success = true;\r\n    }\r\n\r\n    function getBalanceAddr(uint256 _index) public view returns(address addr){\r\n        require(_index < _balancesArray.length);\r\n        require(_index >= 0);\r\n        addr = _balancesArray[_index];\r\n    }\r\n\r\n    function getBalanceSize() public view returns(uint256 size){\r\n        size = _balancesArray.length;\r\n    }\r\n\r\n    function getLockInfo(address addr) public view returns (uint256 unlocked, uint256 unit, uint256 period, uint256 last) {\r\n        UserToken storage user = _balancesMap[addr];\r\n        unlocked = user.unlockLeft;\r\n        unit = user.unlockUnit;\r\n        period = user.unlockPeriod;\r\n        last = user.unlockLastTime;\r\n    }\r\n\r\n    function log(uint32 action, address from, address to, uint256 _v1, uint256 _v2, uint256 _v3) private {\r\n        LogEntry memory entry;\r\n        entry.action = action;\r\n        entry.time = now;\r\n        entry.from = from;\r\n        entry.to = to;\r\n        entry.v1 = _v1;\r\n        entry.v2 = _v2;\r\n        entry.v3 = _v3;\r\n        _logs.push(entry);\r\n    }\r\n\r\n    function getLogSize() public view returns(uint256 size){\r\n        size = _logs.length;\r\n    }\r\n\r\n    function getLog(uint256 _index) public view returns(uint time, uint32 action, address from, address to, uint256 _v1, uint256 _v2, uint256 _v3){\r\n        require(_index < _logs.length);\r\n        require(_index >= 0);\r\n        LogEntry storage entry = _logs[_index];\r\n        action = entry.action;\r\n        time = entry.time;\r\n        from = entry.from;\r\n        to = entry.to;\r\n        _v1 = entry.v1;\r\n        _v2 = entry.v2;\r\n        _v3 = entry.v3;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"n\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLogSize\",\"outputs\":[{\"name\":\"size\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"t\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"d\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLog\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"action\",\"type\":\"uint32\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_v1\",\"type\":\"uint256\"},{\"name\":\"_v2\",\"type\":\"uint256\"},{\"name\":\"_v3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceSize\",\"outputs\":[{\"name\":\"size\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLockInfo\",\"outputs\":[{\"name\":\"unlocked\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"last\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBalanceAddr\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"cfoAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Grant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d60fec50c4dfda6bbc2f047e7f9c3795bede95f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cebc2c006877f5b5e8d0dbe77504866597e37abf8714fd2c595c885714a392dc"}]}