{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsRegistryV1Interface {\r\n    function getWnsAddress(string memory _label) external view returns(address);\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract WnsOwnable {\r\n    address private _owner;\r\n    bytes32 private _passwordHash;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(bytes32 hash_) {\r\n        _passwordHash = hash_;\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner, string memory password, bytes32 newPasswordHash) public {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        require(keccak256(abi.encodePacked(password)) == _passwordHash, \"Invalid credentials\");\r\n        _transferOwnership(newOwner);\r\n        _passwordHash = newPasswordHash;\r\n    }\r\n\r\n    function changePasswordHash(bytes32 newPasswordHash) public virtual onlyOwner {\r\n        _passwordHash = newPasswordHash;\r\n    }\r\n\r\n    function getHash(string memory txt) public pure returns(bytes32){\r\n        return keccak256(abi.encodePacked(txt));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract WnsAddresses is WnsOwnable {\r\n\r\n    address private WnsRegistry_v1;\r\n    WnsRegistryV1Interface wnsRegistry_v1;\r\n\r\n    constructor(address registry_, bytes32 hash_) WnsOwnable(hash_) {\r\n        WnsRegistry_v1 = registry_;\r\n        wnsRegistry_v1 = WnsRegistryV1Interface(WnsRegistry_v1);\r\n    }\r\n\r\n    function setRegistry_v1(address _registry) public {\r\n        require(msg.sender == owner(), \"Not authorized.\");\r\n        WnsRegistry_v1 = _registry;\r\n        wnsRegistry_v1 = WnsRegistryV1Interface(WnsRegistry_v1);\r\n    }\r\n\r\n    mapping(string => address) private _wnsAddresses;\r\n\r\n    function setWnsAddresses(string[] memory _labels, address[] memory _addresses) public onlyOwner {\r\n        require(_labels.length == _addresses.length, \"Arrays do not match\");\r\n\r\n        for(uint256 i=0; i<_addresses.length; i++) {\r\n            _wnsAddresses[_labels[i]] = _addresses[i];\r\n        }\r\n    }\r\n\r\n    function getWnsAddress(string memory _label) public view returns(address) {\r\n        if(_wnsAddresses[_label] != address(0)) {\r\n            return _wnsAddresses[_label];\r\n        } else {\r\n            return wnsRegistry_v1.getWnsAddress(_label);\r\n        }\r\n    }\r\n  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newPasswordHash\",\"type\":\"bytes32\"}],\"name\":\"changePasswordHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"txt\",\"type\":\"string\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getWnsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry_v1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_labels\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setWnsAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"newPasswordHash\",\"type\":\"bytes32\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WnsAddresses", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000082fe896e4969a3270c0bec103cf1ebdbda6e6bfc69f4cbdbb59a352d665273710822babc1c51187ad3bf8a037e4d562da28bf273", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ad1752f4b7dcb1cce696f955c2a657a5796af181bf8d484ce3f1216832fddf63"}]}