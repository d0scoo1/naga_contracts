{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ninterface IOracle {\n    function value() external view returns (int256, bool);\n\n    function update() external returns (bool);\n}\n/// @notice Emitted when paused\nerror Pausable__whenNotPaused_paused();\n\n/// @notice Emitted when not paused\nerror Pausable__whenPaused_notPaused();\n\n/// @title Guarded\n/// @notice Mixin implementing an authentication scheme on a method level\nabstract contract Guarded {\n    /// ======== Custom Errors ======== ///\n\n    error Guarded__notRoot();\n    error Guarded__notGranted();\n\n    /// ======== Storage ======== ///\n\n    /// @notice Wildcard for granting a caller to call every guarded method\n    bytes32 public constant ANY_SIG = keccak256(\"ANY_SIG\");\n    /// @notice Wildcard for granting a caller to call every guarded method\n    address public constant ANY_CALLER =\n        address(uint160(uint256(bytes32(keccak256(\"ANY_CALLER\")))));\n\n    /// @notice Mapping storing who is granted to which method\n    /// @dev Method Signature => Caller => Bool\n    mapping(bytes32 => mapping(address => bool)) private _canCall;\n\n    /// ======== Events ======== ///\n\n    event AllowCaller(bytes32 sig, address who);\n    event BlockCaller(bytes32 sig, address who);\n\n    constructor() {\n        // set root\n        _setRoot(msg.sender);\n    }\n\n    /// ======== Auth ======== ///\n\n    modifier callerIsRoot() {\n        if (_canCall[ANY_SIG][msg.sender]) {\n            _;\n        } else revert Guarded__notRoot();\n    }\n\n    modifier checkCaller() {\n        if (canCall(msg.sig, msg.sender)) {\n            _;\n        } else revert Guarded__notGranted();\n    }\n\n    /// @notice Grant the right to call method `sig` to `who`\n    /// @dev Only the root user (granted `ANY_SIG`) is able to call this method\n    /// @param sig_ Method signature (4Byte)\n    /// @param who_ Address of who should be able to call `sig`\n    function allowCaller(bytes32 sig_, address who_) public callerIsRoot {\n        _canCall[sig_][who_] = true;\n        emit AllowCaller(sig_, who_);\n    }\n\n    /// @notice Revoke the right to call method `sig` from `who`\n    /// @dev Only the root user (granted `ANY_SIG`) is able to call this method\n    /// @param sig_ Method signature (4Byte)\n    /// @param who_ Address of who should not be able to call `sig` anymore\n    function blockCaller(bytes32 sig_, address who_) public callerIsRoot {\n        _canCall[sig_][who_] = false;\n        emit BlockCaller(sig_, who_);\n    }\n\n    /// @notice Returns if `who` can call `sig`\n    /// @param sig_ Method signature (4Byte)\n    /// @param who_ Address of who should be able to call `sig`\n    function canCall(bytes32 sig_, address who_) public view returns (bool) {\n        return (_canCall[sig_][who_] ||\n            _canCall[ANY_SIG][who_] ||\n            _canCall[sig_][ANY_CALLER]);\n    }\n\n    /// @notice Sets the root user (granted `ANY_SIG`)\n    /// @param root_ Address of who should be set as root\n    function _setRoot(address root_) internal {\n        _canCall[ANY_SIG][root_] = true;\n        emit AllowCaller(ANY_SIG, root_);\n    }\n}\ncontract Pausable is Guarded {\n    event Paused(address who);\n    event Unpaused(address who);\n\n    bool private _paused;\n\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        // If the contract is paused, throw an error\n        if (_paused) {\n            revert Pausable__whenNotPaused_paused();\n        }\n        _;\n    }\n\n    modifier whenPaused() {\n        // If the contract is not paused, throw an error\n        if (_paused == false) {\n            revert Pausable__whenPaused_notPaused();\n        }\n        _;\n    }\n\n    function _pause() internal whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function _unpause() internal whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\nabstract contract Oracle is Pausable, IOracle {\n    /// @notice Emitted when a method is reentered\n    error Oracle__nonReentrant();\n\n    /// ======== Events ======== ///\n\n    event ValueInvalid();\n    event ValueUpdated(int256 currentValue, int256 nextValue);\n    event OracleReset();\n\n    /// ======== Storage ======== ///\n    // Time interval between the value updates\n    uint256 public immutable timeUpdateWindow;\n\n    // Timestamp of the current value\n    uint256 public lastTimestamp;\n\n    // The next value that will replace the current value once the timeUpdateWindow has passed\n    int256 public nextValue;\n\n    // Current value that will be returned by the Oracle\n    int256 private _currentValue;\n\n    // Flag that tells if the value provider returned successfully\n    bool private _validReturnedValue;\n\n    // Reentrancy constants\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    // Reentrancy guard flag\n    uint256 private _reentrantGuard = _NOT_ENTERED;\n\n    /// ======== Modifiers ======== ///\n\n    modifier nonReentrant() {\n        // Check if the guard is set\n        if (_reentrantGuard != _NOT_ENTERED) {\n            revert Oracle__nonReentrant();\n        }\n\n        // Set the guard\n        _reentrantGuard = _ENTERED;\n\n        // Allow execution\n        _;\n\n        // Reset the guard\n        _reentrantGuard = _NOT_ENTERED;\n    }\n\n    constructor(uint256 timeUpdateWindow_) {\n        timeUpdateWindow = timeUpdateWindow_;\n        _validReturnedValue = false;\n    }\n\n    /// @notice Get the current value of the oracle\n    /// @return The current value of the oracle\n    /// @return Whether the value is valid\n    function value()\n        public\n        view\n        override(IOracle)\n        whenNotPaused\n        returns (int256, bool)\n    {\n        // Value is considered valid if the value provider successfully returned a value\n        return (_currentValue, _validReturnedValue);\n    }\n\n    function getValue() external virtual returns (int256);\n\n    function update()\n        public\n        override(IOracle)\n        checkCaller\n        nonReentrant\n        returns (bool)\n    {\n        // Not enough time has passed since the last update\n        if (lastTimestamp + timeUpdateWindow > block.timestamp) {\n            // Exit early if no update is needed\n            return false;\n        }\n\n        // Oracle update should not fail even if the value provider fails to return a value\n        try this.getValue() returns (int256 returnedValue) {\n            // Update the value using an exponential moving average\n            if (_currentValue == 0) {\n                // First update takes the current value\n                nextValue = returnedValue;\n                _currentValue = nextValue;\n            } else {\n                // Update the current value with the next value\n                _currentValue = nextValue;\n                // Set the returnedValue as the next value\n                nextValue = returnedValue;\n            }\n\n            // Save when the value was last updated\n            lastTimestamp = block.timestamp;\n            _validReturnedValue = true;\n\n            emit ValueUpdated(_currentValue, nextValue);\n\n            return true;\n        } catch {\n            // When a value provider fails, we update the valid flag which will\n            // invalidate the value instantly\n            _validReturnedValue = false;\n            emit ValueInvalid();\n        }\n\n        return false;\n    }\n\n    function pause() public checkCaller {\n        _pause();\n    }\n\n    function unpause() public checkCaller {\n        _unpause();\n    }\n\n    function reset() public whenPaused checkCaller {\n        _currentValue = 0;\n        nextValue = 0;\n        lastTimestamp = 0;\n        _validReturnedValue = false;\n\n        emit OracleReset();\n    }\n}\ncontract Convert {\n    function convert(\n        int256 x_,\n        uint256 currentPrecision_,\n        uint256 targetPrecision_\n    ) internal pure returns (int256) {\n        if (targetPrecision_ > currentPrecision_)\n            return x_ * int256(10**(targetPrecision_ - currentPrecision_));\n\n        return x_ / int256(10**(currentPrecision_ - targetPrecision_));\n    }\n\n    function uconvert(\n        uint256 x_,\n        uint256 currentPrecision_,\n        uint256 targetPrecision_\n    ) internal pure returns (uint256) {\n        if (targetPrecision_ > currentPrecision_)\n            return x_ * 10**(targetPrecision_ - currentPrecision_);\n\n        return x_ / 10**(currentPrecision_ - targetPrecision_);\n    }\n}\n// Chainlink Aggregator v3 interface\n// https://github.com/smartcontractkit/chainlink/blob/6fea3ccd275466e082a22be690dbaf1609f19dce/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\ninterface IChainlinkAggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract ChainlinkValueProvider is Oracle, Convert {\n    uint8 public immutable underlierDecimals;\n    address public chainlinkAggregatorAddress;\n\n    /// @notice Constructs the Value provider contracts with the needed Chainlink.\n    /// @param timeUpdateWindow_ Minimum time between updates of the value\n    /// @param chainlinkAggregatorAddress_ Address of the deployed chainlink aggregator contract.\n    constructor(\n        // Oracle parameters\n        uint256 timeUpdateWindow_,\n        // Chainlink specific parameter\n        address chainlinkAggregatorAddress_\n    ) Oracle(timeUpdateWindow_) {\n        chainlinkAggregatorAddress = chainlinkAggregatorAddress_;\n        underlierDecimals = IChainlinkAggregatorV3Interface(\n            chainlinkAggregatorAddress_\n        ).decimals();\n    }\n\n    /// @notice Retrieves the price from the chainlink aggregator\n    /// @return result The result as an signed 59.18-decimal fixed-point number.\n    function getValue() external view override(Oracle) returns (int256) {\n        // Convert the annual rate to 1e18 precision.\n        (, int256 answer, , , ) = IChainlinkAggregatorV3Interface(\n            chainlinkAggregatorAddress\n        ).latestRoundData();\n\n        return convert(answer, underlierDecimals, 18);\n    }\n\n    /// @notice returns the description of the chainlink aggregator the proxy points to.\n    function description() external view returns (string memory) {\n        return\n            IChainlinkAggregatorV3Interface(chainlinkAggregatorAddress)\n                .description();\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeUpdateWindow_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chainlinkAggregatorAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Guarded__notGranted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guarded__notRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Oracle__nonReentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Pausable__whenNotPaused_paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Pausable__whenPaused_notPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AllowCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"BlockCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OracleReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ValueInvalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"currentValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"nextValue\",\"type\":\"int256\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY_CALLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ANY_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sig_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"allowCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sig_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"blockCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sig_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who_\",\"type\":\"address\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUpdateWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlierDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkValueProvider", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "8000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}