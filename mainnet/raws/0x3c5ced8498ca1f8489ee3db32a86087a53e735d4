{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/governance/GRODistributer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity 0.8.4;\\n\\ninterface IToken {\\n    function mint(address _receiver, uint256 _amount) external;\\n    function burn(address _receiver, uint256 _amount) external;\\n}\\n\\n/// @notice Contract that defines GRO DAOs' tokenomics - Contracts set below\\n///     are allowed to mint tokens based on predefined quotas. This contract is\\n///     intrinsically tied to the GRO Dao token, and is the only contract that is\\n///     allowed to mint and burn tokens.\\ncontract GRODistributer {\\n    // Limits for token minting\\n    uint256 public constant DEFAULT_FACTOR = 1E18;\\n    // Amount dedicated to the dao (13M - 5M)\\n    uint256 public constant DAO_QUOTA = 8_000_000 * DEFAULT_FACTOR;\\n    // Amount dedicated to the investor group\\n    uint256 public constant INVESTOR_QUOTA = 19_490_577 * DEFAULT_FACTOR;\\n    // Amount dedicated to the team\\n    uint256 public constant TEAM_QUOTA = 22_509_423 * DEFAULT_FACTOR;\\n    // Amount dedicated to the community\\n    uint256 public constant COMMUNITY_QUOTA = 45_000_000 * DEFAULT_FACTOR;\\n\\n    IToken public immutable govToken;\\n    // contracts that are allowed to mint\\n    address public immutable DAO_VESTER;\\n    address public immutable INVESTOR_VESTER;\\n    address public immutable TEAM_VESTER;\\n    address public immutable COMMUNITY_VESTER;\\n    // contract that is allowed to burn\\n    address public immutable BURNER;\\n\\n    // pool with minting limits for above contracts\\n    mapping(address => uint256) public mintingPools;\\n\\n    constructor(address token, address[4] memory vesters, address burner, uint256[4] memory oldAmounts) {\\n        // set token\\n        govToken = IToken(token);\\n        \\n        // set vesters\\n        DAO_VESTER = vesters[0];\\n        INVESTOR_VESTER = vesters[1];\\n        TEAM_VESTER = vesters[2];\\n        COMMUNITY_VESTER = vesters[3];\\n        BURNER = burner;\\n        \\n        // set quotas for each vester\\n        mintingPools[vesters[0]] = DAO_QUOTA - oldAmounts[0];\\n        mintingPools[vesters[1]] = INVESTOR_QUOTA - oldAmounts[1];\\n        mintingPools[vesters[2]] = TEAM_QUOTA - oldAmounts[2];\\n        mintingPools[vesters[3]] = COMMUNITY_QUOTA - oldAmounts[3];\\n    }\\n\\n    /// @notice mint tokens - Reduces total allowance for minting pool\\n    /// @param account account to mint for\\n    /// @param amount amount to mint\\n    function mint(address account, uint256 amount) external {\\n        require(\\n            msg.sender == INVESTOR_VESTER ||\\n            msg.sender == TEAM_VESTER ||\\n            msg.sender == COMMUNITY_VESTER,\\n            'mint: msg.sender != vester'\\n        );\\n        uint256 available = mintingPools[msg.sender];\\n        mintingPools[msg.sender] = available - amount;\\n        govToken.mint(account, amount);\\n    }\\n\\n    /// @notice mintDao seperate minting function for dao vester - can mint from both\\n    ///      community and dao quota\\n    /// @param account account to mint for\\n    /// @param amount amount to mint\\n    /// @param community If the vest comes from the community or dao quota\\n    function mintDao(\\n        address account,\\n        uint256 amount,\\n        bool community\\n    ) external {\\n        require(msg.sender == DAO_VESTER, \\\"mintDao: msg.sender != DAO_VESTER\\\");\\n        address poolId = msg.sender;\\n        if (community) {\\n            poolId = COMMUNITY_VESTER;\\n        }\\n        uint256 available = mintingPools[poolId];\\n        mintingPools[poolId] = available - amount;\\n        govToken.mint(account, amount);\\n    }\\n\\n    /// @notice burn tokens - adds allowance to community pool\\n    /// @param amount amount to burn\\n    /// @dev Burned tokens should get add to users vesting position and\\n    ///  add to the community quota.\\n    function burn(uint256 amount) external {\\n        require(msg.sender == BURNER, \\\"burn: msg.sender != BURNER\\\");\\n        govToken.burn(msg.sender, amount);\\n        mintingPools[COMMUNITY_VESTER] = mintingPools[COMMUNITY_VESTER] + amount;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"vesters\",\"type\":\"address[4]\"},{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"oldAmounts\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BURNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_VESTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_VESTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_VESTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_VESTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"community\",\"type\":\"bool\"}],\"name\":\"mintDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GRODistributer", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ec8798b81485a254928b70cda1cf0a2bb0b74d700000000000000000000000063d96236fd0e1c395d3e464a38f46b1adca247de0000000000000000000000000537d3da1ed1dd7350ff1f3b92b727dfdbab80f100000000000000000000000082bbee051744299486da61e5914d04a862f0b85c000000000000000000000000748218256afe0a19a88ebeb2e0c5ce86d21783600000000000000000000000001f09e308bb18795f62ea7b114041e12b426b88800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023f39c5f2ff9176d0fe2", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b7c7676ac7a5e478462b0b070197d708e2ebc1ce95d57116b5a6ca516967ffcf"}]}