{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HighriseReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SPDX-License\\n/// @author aboltc\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract HighriseReserve is Ownable {\\n\\tconstructor(uint8 lowerTokenIdBound_, uint8 upperTokenIdBound_) {\\n\\t\\tlowerTokenIdBound = lowerTokenIdBound_;\\n\\t\\tupperTokenIdBound = upperTokenIdBound_;\\n\\t}\\n\\n\\t/**--------------------------\\n\\t * Opening mechanics\\n\\t */\\n\\t/// @dev private sale bounds\\n\\tbool public isPrivateReserveOpen = false;\\n\\tbool public isPublicReserveOpen = false;\\n\\n\\t/// @notice toggle private sale open state\\n\\tfunction setIsPrivateReserveOpen(bool isPrivateReserveOpen_)\\n\\t\\tpublic\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tisPrivateReserveOpen = isPrivateReserveOpen_;\\n\\t}\\n\\n\\t/// @notice toggle public sale open state\\n\\tfunction setIsPublicReserveOpen(bool isPublicReserveOpen_)\\n\\t\\tpublic\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tisPublicReserveOpen = isPublicReserveOpen_;\\n\\t}\\n\\n\\t/**--------------------------\\n\\t * Reserve mechanics\\n\\t */\\n\\n\\t/// @dev token bounds\\n\\tuint8 lowerTokenIdBound;\\n\\tuint8 upperTokenIdBound;\\n\\tmapping(address => bool) public reserveAddressMap;\\n\\tmapping(address => bool) public claimedTokenMap;\\n\\tmapping(uint8 => address) public tokenAddressMap;\\n\\n\\t/**\\n\\t * @notice get current reserve\\n\\t * @return list of addresses that have reserved current tokens\\n\\t */\\n\\tfunction getCurrentReserve() public view returns (address[] memory) {\\n\\t\\trequire(lowerTokenIdBound < upperTokenIdBound, \\\"TOKEN_BOUNDS_ERROR\\\");\\n\\n\\t\\taddress[] memory currentReserve = new address[](\\n\\t\\t\\tupperTokenIdBound - lowerTokenIdBound\\n\\t\\t);\\n\\t\\tfor (uint8 i = 0; i < upperTokenIdBound - lowerTokenIdBound; i++) {\\n\\t\\t\\tcurrentReserve[i] = tokenAddressMap[i];\\n\\t\\t}\\n\\n\\t\\treturn currentReserve;\\n\\t}\\n\\n\\t/**\\n\\t * @notice set token bounds\\n\\t */\\n\\tfunction setTokenBounds(uint8 lowerTokenIdBound_, uint8 upperTokenIdBound_)\\n\\t\\tpublic\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(lowerTokenIdBound < upperTokenIdBound, \\\"TOKEN_BOUNDS_ERROR\\\");\\n\\t\\tlowerTokenIdBound = lowerTokenIdBound_;\\n\\t\\tupperTokenIdBound = upperTokenIdBound_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice check if address is on private reserve\\n\\t * @param privateReserveAddress address on private reserve\\n\\t * @return isPrivateReserve if item is private reserve\\n\\t */\\n\\tfunction checkPrivateReserve(address privateReserveAddress)\\n\\t\\tprivate\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tif (reserveAddressMap[privateReserveAddress]) {\\n\\t\\t\\treserveAddressMap[privateReserveAddress] = false;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @notice set reserve addresses from array\\n\\t * @param addresses addresses to add to reserve mapping\\n\\t */\\n\\tfunction setReserveAddresses(address[] memory addresses) public {\\n\\t\\tfor (uint8 i = 0; i < addresses.length; i++) {\\n\\t\\t\\treserveAddressMap[addresses[i]] = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice reserve token bounds\\n\\t * @param tokenId token id to reserve\\n\\t */\\n\\tfunction reserve(uint8 tokenId) public {\\n\\t\\trequire(\\n\\t\\t\\ttokenId >= lowerTokenIdBound && tokenId <= upperTokenIdBound,\\n\\t\\t\\t\\\"TOKEN_OUT_OF_BOUNDS\\\"\\n\\t\\t);\\n\\t\\trequire(tokenAddressMap[tokenId] == address(0), \\\"TOKEN_RESERVED\\\");\\n\\t\\trequire(\\n\\t\\t\\tisPrivateReserveOpen || isPublicReserveOpen,\\n\\t\\t\\t\\\"RESERVE_NOT_OPEN\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tclaimedTokenMap[msg.sender] == false,\\n\\t\\t\\t\\\"ADDRESS_ALREADY_CLAIMED\\\"\\n\\t\\t);\\n\\n\\t\\ttokenAddressMap[tokenId] = msg.sender;\\n\\t\\tclaimedTokenMap[msg.sender] = true;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lowerTokenIdBound_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"upperTokenIdBound_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokenMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentReserve\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrivateReserveOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicReserveOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveAddressMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPrivateReserveOpen_\",\"type\":\"bool\"}],\"name\":\"setIsPrivateReserveOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPublicReserveOpen_\",\"type\":\"bool\"}],\"name\":\"setIsPublicReserveOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setReserveAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lowerTokenIdBound_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"upperTokenIdBound_\",\"type\":\"uint8\"}],\"name\":\"setTokenBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokenAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HighriseReserve", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}