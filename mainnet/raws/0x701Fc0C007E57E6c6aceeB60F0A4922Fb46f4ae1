{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MoPArMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\ninterface IMoPArMetadata {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    function beforeTokenTransfer(address from, address to, uint256 tokenId) external;\\n}\\n\\ninterface IMoPAr {\\n    struct Collection {\\n        string name;\\n        string artist;\\n        uint128 circulating;\\n        uint128 max;\\n        uint256 price;\\n        address payable artistWallet;\\n        uint128 artistMintBasis; //in basis points (ie 5.0% = 500)\\n        address royaltyWallet;\\n        uint128 royaltyBasis; //in basis points (ie 5.0% = 500)\\n        address customContract;\\n        bool mixedOnOffChain;\\n    }\\n    function getCollectionId(uint256 tokenId) external view returns (uint256);\\n    function getName(uint256 tokenId) external view returns (string memory);\\n    function getDescription(uint256 tokenId) external view returns (string memory);\\n    function getImage(uint256 tokenId) external view returns (string memory);\\n    function getAttributes(uint256 tokenId, uint256 index) external view returns (string memory);\\n    function getCollection(uint256 collectionId) external view returns (bool, Collection memory);\\n    function getSignature(uint256 tokenId) external view returns (bytes32);\\n}\\n\\ncontract MoPArMetadata is Ownable, IMoPArMetadata {\\n    IMoPAr private mopar;\\n\\n    string private _uriPrefix;             // uri prefix\\n    string private _baseURI;\\n    string[] public metadataKeys;\\n\\n    constructor(string memory initURIPrefix_, string memory initBaseURI_, address moparAddress_)\\n    Ownable() \\n    {\\n        _uriPrefix = initURIPrefix_;\\n        _baseURI = initBaseURI_;\\n        mopar = IMoPAr(moparAddress_);\\n        metadataKeys = [\\n            \\\"Date\\\",\\n            \\\"Type Of Art\\\",\\n            \\\"Format\\\",\\n            \\\"Medium\\\",\\n            \\\"Colour\\\",\\n            \\\"Location\\\",\\n            \\\"Distinguishing Attributes\\\",\\n            \\\"Dimensions\\\",\\n            \\\"On-Chain\\\"\\n        ];\\n    }\\n\\n    function tokenURI(uint256 tokenId) override external view returns (string memory) {\\n        bytes32 signature = mopar.getSignature(tokenId); //Index hardcoded for on-chain\\n        if (signature != 0) {\\n            ( , IMoPAr.Collection memory collection) = mopar.getCollection(mopar.getCollectionId(tokenId));\\n            string memory json;\\n            json = string(abi.encodePacked(json, '{\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"platform\\\": \\\"Museum of Permuted Art\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"name\\\": \\\"' , mopar.getName(tokenId) , '\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"artist\\\": \\\"' , collection.artist , '\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"collection\\\": \\\"' , collection.name , '\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"description\\\": \\\"' , mopar.getDescription(tokenId) , '\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"image\\\": \\\"' , _uriPrefix, mopar.getImage(tokenId) , '\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"external_url\\\": \\\"https://permuted.xyz\\\",\\\\n '));\\n            json = string(abi.encodePacked(json, '\\\"attributes\\\": [\\\\n\\\\t'));\\n            for (uint8 i=0; i<metadataKeys.length; i++) {\\n                string memory metadataValue = mopar.getAttributes(tokenId,i);\\n                if (bytes(metadataValue).length > 0) {\\n                    if (i != 0) {\\n                        json = string(abi.encodePacked(json, ',')); \\n                    }\\n                    json = string(abi.encodePacked(json, '{\\\"trait_type\\\": \\\"', metadataKeys[i], '\\\", \\\"value\\\": \\\"', metadataValue, '\\\"}\\\\n\\\\t'));\\n                }\\n            }\\n            json = string(abi.encodePacked(json, ',{\\\"trait_type\\\": \\\"On-Chain\\\", \\\"value\\\": \\\"true\\\"}\\\\n\\\\t'));\\n            json = string(abi.encodePacked(json, ']\\\\n}'));\\n            return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(json))));\\n        } else {\\n            return string(abi.encodePacked(_baseURI, _toString(tokenId), \\\".json\\\"));\\n        }\\n    }\\n\\n    function setURIPrefix(string calldata newURIPrefix) external onlyOwner {\\n        _uriPrefix = newURIPrefix;\\n    }\\n\\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\\n        _baseURI = newBaseURI;\\n    }\\n\\n    function setMetadataKeys(string[] memory metadataKeys_) external onlyOwner {\\n        require(metadataKeys_.length <=20, \\\"TOO_MANY_METADATA_KEYS\\\");\\n        metadataKeys = metadataKeys_;\\n    }\\n\\n    function beforeTokenTransfer(address from, address to, uint256 tokenId) override external {}\\n    \\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    } \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initURIPrefix_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initBaseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"moparAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataKeys\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"metadataKeys_\",\"type\":\"string[]\"}],\"name\":\"setMetadataKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURIPrefix\",\"type\":\"string\"}],\"name\":\"setURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoPArMetadata", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000677aced6cdbb8b24f0bfd3da27191e640a73bfa60000000000000000000000000000000000000000000000000000000000000007697066733a2f2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f68747470733a2f2f6170692e7065726d757465642e78797a2f746f6b656e2f00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}