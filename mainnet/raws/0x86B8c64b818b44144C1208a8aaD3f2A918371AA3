{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"VoxelsOwnershipInstructor_flat.sol\": {\r\n      \"content\": \"\\n// File: Interfaces/IOwnershipInstructor.sol\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * This is an interface of OwnershipInstructor\\n * The goal of this contract is to allow people to integrate their contract into OwnershipChecker.sol\\n * by generalising the obtention of the owner of NFTs.\\n * The reason for this solution was because NFTs nowadays have standards, but not all NFTs support these standards.\\n * The interface id for this is 0xb0f6fd7f;\\n */\\ninterface IOwnershipInstructor{\\n\\n/**\\n * isValidInterface()\\n * This function should be public and should be overriden.\\n * It should obtain an address as input and should return a boolean value;\\n * A positive result means the given address supports your contract's interface.\\n * @dev This should be overriden and replaced with a set of instructions to check the given _impl if your contract's interface.\\n * See ERC165 for help on interface support.\\n * @param _impl address we want to check.\\n * @return bool\\n * \\n */\\n  function isValidInterface (address _impl) external view returns (bool);\\n\\n    /**\\n    * This function should be public or External and should be overriden.\\n    * It should obtain an address as implementation, a uint256 token Id and an optional _potentialOwner;\\n    * It should return an address (or address zero is no owner);\\n    * @dev This should be overriden and replaced with a set of instructions obtaining the owner of the given tokenId;\\n    *\\n    * @param _tokenId token id we want to grab the owner of.\\n    * @param _impl Address of the NFT contract\\n    * @param _potentialOwner (OPTIONAL) A potential owner, set address zero if no potentialOwner; Necessary for ERC1155\\n    * @return a non zero address if the given tokenId has an owner; else if the token Id does not exist or has no owner, return zero address\\n    * \\n    */\\n    function ownerOfTokenOnImplementation(address _impl,uint256 _tokenId,address _potentialOwner) external view  returns (address);\\n}\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: contracts/VoxelsOwnershipInstructor.sol\\n\\n\\ninterface ICryptovoxelsContract {\\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\\n}\\n\\n/**\\n * Ownership Instructor Wrapper that wraps around the Voxels (cryptovoxels) contract,\\n *\\n * This is because cryptovoxels does not support the ERC721 interface.\\n */\\ncontract VoxelsOwnershipInstructor is IERC165,IOwnershipInstructor,Ownable{\\n    address cvAddress = 0x79986aF15539de2db9A5086382daEdA917A9CF0C;\\n    constructor(){\\n    }\\n    /**\\n     * @dev NOT AN EXAMPLE\\n     * @dev We know the Voxels contract address will change in the future.\\n     * This lets us change the address without redeploying a new contract.\\n     * Normally an OwnershipInstructor contract should be immutable.\\n     * @param _impl address of Voxels\\n     */\\n    function setVoxelsAddress(address _impl) external onlyOwner {\\n        cvAddress = _impl;\\n    }\\n\\n    /**\\n    * Checks if the given contract is the voxels address\\n    * It should obtain an address as input and should return a boolean value;\\n    * @dev Contains a set of instructions to check the given _impl is the voxels contract\\n    * @param _impl address we want to check.\\n    * @return bool\\n    * \\n    */\\n    function isValidInterface (address _impl) public view override returns (bool){\\n        return _impl == cvAddress;\\n    }\\n\\n    /**\\n    * See {OwnershipInstructor.sol}\\n    * It should obtain a uint256 token Id as input and the address of the implementation \\n    * It should return an address (or address zero is no owner);\\n    *\\n    * @param _tokenId token id we want to grab the owner of.\\n    * @param _impl Address of the NFT contract\\n    * @param _potentialOwner (OPTIONAL) A potential owner, set address zero if no potentialOwner;\\n    * @return address\\n    * \\n    */\\n    function ownerOfTokenOnImplementation(address _impl,uint256 _tokenId,address _potentialOwner) public view override returns (address){\\n        require(isValidInterface(_impl),\\\"Invalid interface\\\");\\n        return ICryptovoxelsContract(_impl).ownerOf(_tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return interfaceId == type(IOwnershipInstructor).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"isValidInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_potentialOwner\",\"type\":\"address\"}],\"name\":\"ownerOfTokenOnImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"setVoxelsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VoxelsOwnershipInstructor", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}