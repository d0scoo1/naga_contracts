{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/APMReservoir.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./interfaces/IAPMReservoir.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Signature.sol\\\";\\r\\n\\r\\ncontract APMReservoir is Ownable, IAPMReservoir {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address[] public signers;\\r\\n    mapping(address => uint256) public signerIndex;\\r\\n    uint256 public signingNonce;\\r\\n    uint256 public quorum;\\r\\n\\r\\n    IFeeDB public feeDB;\\r\\n    IERC20 public token;\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _token,\\r\\n        uint256 _quorum,\\r\\n        address[] memory _signers\\r\\n    ) {\\r\\n        require(address(_token) != address(0));\\r\\n        token = _token;\\r\\n\\r\\n        require(_quorum > 0);\\r\\n        quorum = _quorum;\\r\\n        emit UpdateQuorum(_quorum);\\r\\n\\r\\n        require(_signers.length >= _quorum);\\r\\n        signers = _signers;\\r\\n\\r\\n        for (uint256 i = 0; i < _signers.length; i++) {\\r\\n            address signer = _signers[i];\\r\\n            require(signer != address(0));\\r\\n            require(signerIndex[signer] == 0);\\r\\n\\r\\n            if (i > 0) require(signer != _signers[0]);\\r\\n\\r\\n            signerIndex[signer] = i;\\r\\n            emit AddSigner(signer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function signersLength() public view returns (uint256) {\\r\\n        return signers.length;\\r\\n    }\\r\\n\\r\\n    function isSigner(address signer) public view returns (bool) {\\r\\n        return (signerIndex[signer] > 0) || (signers[0] == signer);\\r\\n    }\\r\\n\\r\\n    function _checkSigners(\\r\\n        bytes32 message,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) private view {\\r\\n        uint256 length = vs.length;\\r\\n        require(length == rs.length && length == ss.length);\\r\\n        require(length >= quorum);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            require(isSigner(Signature.recover(message, vs[i], rs[i], ss[i])));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addSigner(\\r\\n        address signer,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) public {\\r\\n        require(signer != address(0));\\r\\n        require(!isSigner(signer));\\r\\n\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"addSigner\\\", block.chainid, signingNonce++));\\r\\n        bytes32 message = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n        _checkSigners(message, vs, rs, ss);\\r\\n\\r\\n        signerIndex[signer] = signersLength();\\r\\n        signers.push(signer);\\r\\n        emit AddSigner(signer);\\r\\n    }\\r\\n\\r\\n    function removeSigner(\\r\\n        address signer,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) public {\\r\\n        require(signer != address(0));\\r\\n        require(isSigner(signer));\\r\\n\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"removeSigner\\\", block.chainid, signingNonce++));\\r\\n        bytes32 message = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n        _checkSigners(message, vs, rs, ss);\\r\\n\\r\\n        uint256 lastIndex = signersLength().sub(1);\\r\\n        require(lastIndex >= quorum);\\r\\n\\r\\n        uint256 targetIndex = signerIndex[signer];\\r\\n        if (targetIndex != lastIndex) {\\r\\n            address lastSigner = signers[lastIndex];\\r\\n            signers[targetIndex] = lastSigner;\\r\\n            signerIndex[lastSigner] = targetIndex;\\r\\n        }\\r\\n\\r\\n        signers.pop();\\r\\n        delete signerIndex[signer];\\r\\n\\r\\n        emit RemoveSigner(signer);\\r\\n    }\\r\\n\\r\\n    function updateQuorum(\\r\\n        uint256 newQuorum,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) public {\\r\\n        require(newQuorum > 0);\\r\\n\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"updateQuorum\\\", block.chainid, signingNonce++));\\r\\n        bytes32 message = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n        _checkSigners(message, vs, rs, ss);\\r\\n\\r\\n        quorum = newQuorum;\\r\\n        emit UpdateQuorum(newQuorum);\\r\\n    }\\r\\n\\r\\n    function updateFeeDB(IFeeDB newDB) public onlyOwner {\\r\\n        feeDB = newDB;\\r\\n        emit UpdateFeeDB(newDB);\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(uint256 => mapping(address => uint256[]))) public sendedAmounts;\\r\\n    mapping(address => mapping(uint256 => mapping(address => mapping(uint256 => bool)))) public isTokenReceived;\\r\\n\\r\\n    function sendingCounts(\\r\\n        address sender,\\r\\n        uint256 toChainId,\\r\\n        address receiver\\r\\n    ) public view returns (uint256) {\\r\\n        return sendedAmounts[sender][toChainId][receiver].length;\\r\\n    }\\r\\n\\r\\n    function sendToken(\\r\\n        uint256 toChainId,\\r\\n        address receiver,\\r\\n        uint256 amount\\r\\n    ) public returns (uint256 sendingId) {\\r\\n        sendingId = sendingCounts(msg.sender, toChainId, receiver);\\r\\n        sendedAmounts[msg.sender][toChainId][receiver].push(amount);\\r\\n\\r\\n        bool paysFee = feeDB.paysFeeWhenSending();\\r\\n        _takeAmount(msg.sender, amount, paysFee);\\r\\n        emit SendToken(msg.sender, toChainId, receiver, amount, sendingId, paysFee);\\r\\n    }\\r\\n\\r\\n    function receiveToken(\\r\\n        address sender,\\r\\n        uint256 fromChainId,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 sendingId,\\r\\n        bool isFeePayed,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) public {\\r\\n        require(!isTokenReceived[sender][fromChainId][receiver][sendingId]);\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(fromChainId, sender, block.chainid, receiver, amount, sendingId, isFeePayed)\\r\\n        );\\r\\n        bytes32 message = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n        _checkSigners(message, vs, rs, ss);\\r\\n\\r\\n        isTokenReceived[sender][fromChainId][receiver][sendingId] = true;\\r\\n        _giveAmount(receiver, amount, isFeePayed);\\r\\n\\r\\n        emit ReceiveToken(sender, fromChainId, receiver, amount, sendingId);\\r\\n    }\\r\\n\\r\\n    function _takeAmount(\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        bool paysFee\\r\\n    ) private {\\r\\n        uint256 fee;\\r\\n        if (paysFee) {\\r\\n            address feeRecipient;\\r\\n            (fee, feeRecipient) = _getFeeData(user, amount);\\r\\n            if (fee != 0 && feeRecipient != address(0)) token.transferFrom(user, feeRecipient, fee);\\r\\n        }\\r\\n        token.transferFrom(user, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _giveAmount(\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        bool isFeePayed\\r\\n    ) private {\\r\\n        uint256 fee;\\r\\n        if (!isFeePayed) {\\r\\n            address feeRecipient;\\r\\n            (fee, feeRecipient) = _getFeeData(user, amount);\\r\\n            if (fee != 0 && feeRecipient != address(0)) token.transfer(feeRecipient, fee);\\r\\n        }\\r\\n        token.transfer(user, amount.sub(fee));\\r\\n    }\\r\\n\\r\\n    function _getFeeData(address user, uint256 amount) private view returns (uint256 fee, address feeRecipient) {\\r\\n        fee = feeDB.userFee(user, amount);\\r\\n        feeRecipient = feeDB.protocolFeeRecipient();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAPMReservoir.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./IGaiaBridge.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAPMReservoir is IGaiaBridge {\\r\\n    function token() external returns (IERC20);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Signature.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.6;\\r\\n\\r\\nlibrary Signature {\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address signer) {\\r\\n        require(\\r\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n            \\\"invalid signature 's' value\\\"\\r\\n        );\\r\\n        require(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\r\\n\\r\\n        signer = ecrecover(hash, v, r, s);\\r\\n        require(signer != address(0), \\\"invalid signature\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IGaiaBridge.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.6;\\r\\n\\r\\nimport \\\"./IFeeDB.sol\\\";\\r\\n\\r\\ninterface IGaiaBridge {\\r\\n    event AddSigner(address signer);\\r\\n    event RemoveSigner(address signer);\\r\\n    event UpdateFeeDB(IFeeDB newFeeDB);\\r\\n    event UpdateQuorum(uint256 newQuorum);\\r\\n    event SendToken(\\r\\n        address indexed sender,\\r\\n        uint256 indexed toChainId,\\r\\n        address indexed receiver,\\r\\n        uint256 amount,\\r\\n        uint256 sendingId,\\r\\n        bool isFeeCollected\\r\\n    );\\r\\n    event ReceiveToken(\\r\\n        address indexed sender,\\r\\n        uint256 indexed fromChainId,\\r\\n        address indexed receiver,\\r\\n        uint256 amount,\\r\\n        uint256 sendingId\\r\\n    );\\r\\n\\r\\n    function signers(uint256 id) external view returns (address);\\r\\n\\r\\n    function signerIndex(address signer) external view returns (uint256);\\r\\n\\r\\n    function quorum() external view returns (uint256);\\r\\n\\r\\n    function feeDB() external view returns (IFeeDB);\\r\\n\\r\\n    function signersLength() external view returns (uint256);\\r\\n\\r\\n    function isSigner(address signer) external view returns (bool);\\r\\n\\r\\n    function sendedAmounts(\\r\\n        address sender,\\r\\n        uint256 toChainId,\\r\\n        address receiver,\\r\\n        uint256 sendingId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function isTokenReceived(\\r\\n        address sender,\\r\\n        uint256 fromChainId,\\r\\n        address receiver,\\r\\n        uint256 sendingId\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function sendingCounts(\\r\\n        address sender,\\r\\n        uint256 toChainId,\\r\\n        address receiver\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function sendToken(\\r\\n        uint256 toChainId,\\r\\n        address receiver,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256 sendingId);\\r\\n\\r\\n    function receiveToken(\\r\\n        address sender,\\r\\n        uint256 fromChainId,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 sendingId,\\r\\n        bool isFeePayed,\\r\\n        uint8[] calldata vs,\\r\\n        bytes32[] calldata rs,\\r\\n        bytes32[] calldata ss\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeDB.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.6;\\r\\n\\r\\ninterface IFeeDB {\\r\\n    event UpdateFeeAndRecipient(uint256 newFee, address newRecipient);\\r\\n    event UpdatePaysFeeWhenSending(bool newType);\\r\\n\\r\\n    function protocolFee() external view returns (uint256);\\r\\n\\r\\n    function protocolFeeRecipient() external view returns (address);\\r\\n\\r\\n    function paysFeeWhenSending() external view returns (bool);\\r\\n\\r\\n    function userDiscountRate(address user) external view returns (uint256);\\r\\n\\r\\n    function userFee(address user, uint256 amount) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"AddSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"}],\"name\":\"ReceiveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RemoveSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeCollected\",\"type\":\"bool\"}],\"name\":\"SendToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeeDB\",\"name\":\"newFeeDB\",\"type\":\"address\"}],\"name\":\"UpdateFeeDB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"UpdateQuorum\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDB\",\"outputs\":[{\"internalType\":\"contract IFeeDB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTokenReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeePayed\",\"type\":\"bool\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sendedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendingCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signingNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeDB\",\"name\":\"newDB\",\"type\":\"address\"}],\"name\":\"updateFeeDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"updateQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "APMReservoir", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8c424b91d8ce0137bab4b832b7f7d154156ba6c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005307b5e725feb3d6a55605dac1986e3571fb765d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}