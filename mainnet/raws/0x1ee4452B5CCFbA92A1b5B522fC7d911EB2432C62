{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LaCosaOstraClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0; \\n\\n/*\\n* @title LaCosaOstraClaim\\n* @author lileddie.eth / Enefte Studio\\n*/\\n\\ncontract ERC721 {\\n    function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {}\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {}\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual {}\\n}\\n\\ncontract LaCosaOstraClaim {\\n\\n    ERC721 laCosaOstra = ERC721(0xFD899B7285Ae84923e643D0CEB284658EB38B037);\\n    uint256 public REFUND = 0.023 ether;\\n\\n    bool public claimOpen = false;\\n\\n    mapping(uint256 => bool) blockedTokens;\\n\\n    address private _owner;\\n    address public constant burnAddress = address(0x000000000000000000000000000000000000dEaD);\\n\\n    constructor() public {\\n        _owner = msg.sender;   \\n        blockedTokens[361] = true;\\n        blockedTokens[459] = true;\\n        blockedTokens[460] = true;\\n        blockedTokens[480] = true;\\n        blockedTokens[516] = true;\\n        blockedTokens[517] = true;\\n        blockedTokens[518] = true;\\n        blockedTokens[519] = true;\\n        blockedTokens[520] = true;\\n        blockedTokens[521] = true;\\n        blockedTokens[522] = true;\\n        blockedTokens[523] = true;\\n        blockedTokens[524] = true;\\n        blockedTokens[528] = true;\\n        blockedTokens[559] = true;\\n        blockedTokens[735] = true;\\n        blockedTokens[755] = true;\\n        blockedTokens[775] = true;\\n        blockedTokens[779] = true;\\n        blockedTokens[780] = true;\\n        blockedTokens[781] = true;\\n        blockedTokens[789] = true;\\n        blockedTokens[790] = true;\\n        blockedTokens[791] = true;\\n        blockedTokens[793] = true;\\n        blockedTokens[795] = true;\\n        blockedTokens[797] = true;\\n        blockedTokens[799] = true;\\n        blockedTokens[803] = true;\\n        blockedTokens[814] = true;\\n        blockedTokens[994] = true;\\n        blockedTokens[996] = true;\\n   }\\n    \\n    /**\\n    * @notice minting process for the main sale\\n    *\\n    */\\n    function claim() external  {\\n        require(claimOpen, \\\"Claim is closed\\\");\\n        require(laCosaOstra.isApprovedForAll(msg.sender,address(this)), \\\"Not Approved\\\");\\n        uint256[] memory ownedTokens = laCosaOstra.tokensOfOwner(msg.sender);\\n        uint256 totalToRefund = 0;\\n        for(uint256 i = 0; i < ownedTokens.length; i++){\\n            if(!blockedTokens[ownedTokens[i]] && ownedTokens[i] > 55){\\n                laCosaOstra.safeTransferFrom(msg.sender, burnAddress, ownedTokens[i]);\\n                totalToRefund += 1;\\n            }\\n        }\\n        uint256 sumToSend = totalToRefund * REFUND;\\n        payable(msg.sender).transfer(sumToSend);\\n    }\\n\\n    /**\\n    * @notice Toggle the claim open/closed\\n    *\\n    */\\n    function toggleClaim() external onlyOwner {\\n        claimOpen = !claimOpen;\\n    }\\n    \\n    /**\\n    * @notice set the price of the NFT for main sale\\n    *\\n    * @param _price the price in wei\\n    */\\n    function setRefundAmount(uint256 _price) external onlyOwner {\\n        REFUND = _price;\\n    }\\n    \\n    /**\\n    * @notice withdraw the funds from the contract to owner wallet. \\n    */\\n    function withdrawBalance() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function deposit() external payable {}\\n    \\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _owner = newOwner;\\n    }\\n\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"REFUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRefundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaCosaOstraClaim", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}