{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Permissions Read interface\r\n/// @author Fei Protocol\r\ninterface IPermissionsRead {\r\n    // ----------- Getters -----------\r\n\r\n    function isBurner(address _address) external view returns (bool);\r\n\r\n    function isMinter(address _address) external view returns (bool);\r\n\r\n    function isGovernor(address _address) external view returns (bool);\r\n\r\n    function isGuardian(address _address) external view returns (bool);\r\n\r\n    function isPCVController(address _address) external view returns (bool);\r\n}\r\n\r\n\r\n/// @title Permissions interface\r\n/// @author Fei Protocol\r\ninterface IPermissions is IAccessControl, IPermissionsRead {\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function createRole(bytes32 role, bytes32 adminRole) external;\r\n\r\n    function grantMinter(address minter) external;\r\n\r\n    function grantBurner(address burner) external;\r\n\r\n    function grantPCVController(address pcvController) external;\r\n\r\n    function grantGovernor(address governor) external;\r\n\r\n    function grantGuardian(address guardian) external;\r\n\r\n    function revokeMinter(address minter) external;\r\n\r\n    function revokeBurner(address burner) external;\r\n\r\n    function revokePCVController(address pcvController) external;\r\n\r\n    function revokeGovernor(address governor) external;\r\n\r\n    function revokeGuardian(address guardian) external;\r\n\r\n    // ----------- Revoker only state changing api -----------\r\n\r\n    function revokeOverride(bytes32 role, address account) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function GUARDIAN_ROLE() external view returns (bytes32);\r\n\r\n    function GOVERN_ROLE() external view returns (bytes32);\r\n\r\n    function BURNER_ROLE() external view returns (bytes32);\r\n\r\n    function MINTER_ROLE() external view returns (bytes32);\r\n\r\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// @title FEI stablecoin interface\r\n/// @author Fei Protocol\r\ninterface IFei is IERC20 {\r\n    // ----------- Events -----------\r\n\r\n    event Minting(\r\n        address indexed _to,\r\n        address indexed _minter,\r\n        uint256 _amount\r\n    );\r\n\r\n    event Burning(\r\n        address indexed _to,\r\n        address indexed _burner,\r\n        uint256 _amount\r\n    );\r\n\r\n    event IncentiveContractUpdate(\r\n        address indexed _incentivized,\r\n        address indexed _incentiveContract\r\n    );\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    // ----------- Burner only state changing api -----------\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    // ----------- Minter only state changing api -----------\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setIncentiveContract(address account, address incentive) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function incentiveContract(address account) external view returns (address);\r\n}\r\n\r\n/// @title Core Interface\r\n/// @author Fei Protocol\r\ninterface ICore is IPermissions {\r\n    // ----------- Events -----------\r\n\r\n    event FeiUpdate(address indexed _fei);\r\n    event TribeUpdate(address indexed _tribe);\r\n    event GenesisGroupUpdate(address indexed _genesisGroup);\r\n    event TribeAllocation(address indexed _to, uint256 _amount);\r\n    event GenesisPeriodComplete(uint256 _timestamp);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function init() external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setFei(address token) external;\r\n\r\n    function setTribe(address token) external;\r\n\r\n    function allocateTribe(address to, uint256 amount) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n}\r\n\r\n/// @title CoreRef interface\r\n/// @author Fei Protocol\r\ninterface ICoreRef {\r\n    // ----------- Events -----------\r\n\r\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\r\n\r\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\r\n\r\n    // ----------- Governor or Guardian only state changing api -----------\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function core() external view returns (ICore);\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n\r\n    function feiBalance() external view returns (uint256);\r\n\r\n    function tribeBalance() external view returns (uint256);\r\n\r\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function isContractAdmin(address admin) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/// @title A Reference to Core\r\n/// @author Fei Protocol\r\n/// @notice defines some modifiers and utilities around interacting with Core\r\nabstract contract CoreRef is ICoreRef, Pausable {\r\n    ICore private immutable _core;\r\n    IFei private immutable _fei;\r\n    IERC20 private immutable _tribe;\r\n\r\n    /// @notice a role used with a subset of governor permissions for this contract only\r\n    bytes32 public override CONTRACT_ADMIN_ROLE;\r\n\r\n    constructor(address coreAddress) {\r\n        _core = ICore(coreAddress);\r\n\r\n        _fei = ICore(coreAddress).fei();\r\n        _tribe = ICore(coreAddress).tribe();\r\n\r\n        _setContractAdminRole(ICore(coreAddress).GOVERN_ROLE());\r\n    }\r\n\r\n    function _initialize(address) internal {} // no-op for backward compatibility\r\n\r\n    modifier ifMinterSelf() {\r\n        if (_core.isMinter(address(this))) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(_core.isMinter(msg.sender), \"CoreRef: Caller is not a minter\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(_core.isBurner(msg.sender), \"CoreRef: Caller is not a burner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPCVController() {\r\n        require(\r\n            _core.isPCVController(msg.sender),\r\n            \"CoreRef: Caller is not a PCV controller\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernorOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) ||\r\n            isContractAdmin(msg.sender),\r\n            \"CoreRef: Caller is not a governor or contract admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(\r\n            _core.isGovernor(msg.sender),\r\n            \"CoreRef: Caller is not a governor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardianOrGovernor() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || \r\n            _core.isGuardian(msg.sender),\r\n            \"CoreRef: Caller is not a guardian or governor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isGovernorOrGuardianOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) ||\r\n            _core.isGuardian(msg.sender) || \r\n            isContractAdmin(msg.sender), \r\n            \"CoreRef: Caller is not governor or guardian or admin\");\r\n        _;\r\n    }\r\n\r\n    // Named onlyTribeRole to prevent collision with OZ onlyRole modifier\r\n    modifier onlyTribeRole(bytes32 role) {\r\n        require(_core.hasRole(role, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    // Modifiers to allow any combination of roles\r\n    modifier hasAnyOfTwoRoles(bytes32 role1, bytes32 role2) {\r\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfThreeRoles(bytes32 role1, bytes32 role2, bytes32 role3) {\r\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender) || _core.hasRole(role3, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfFourRoles(bytes32 role1, bytes32 role2, bytes32 role3, bytes32 role4) {\r\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender) || _core.hasRole(role3, msg.sender) || _core.hasRole(role4, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfFiveRoles(bytes32 role1, bytes32 role2, bytes32 role3, bytes32 role4, bytes32 role5) {\r\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender) || _core.hasRole(role3, msg.sender) || _core.hasRole(role4, msg.sender) || _core.hasRole(role5, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFei() {\r\n        require(msg.sender == address(_fei), \"CoreRef: Caller is not FEI\");\r\n        _;\r\n    }\r\n\r\n    /// @notice sets a new admin role for this contract\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\r\n        _setContractAdminRole(newContractAdminRole);\r\n    }\r\n\r\n    /// @notice returns whether a given address has the admin role for this contract\r\n    function isContractAdmin(address _admin) public view override returns (bool) {\r\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\r\n    }\r\n\r\n    /// @notice set pausable methods to paused\r\n    function pause() public override onlyGuardianOrGovernor {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice set pausable methods to unpaused\r\n    function unpause() public override onlyGuardianOrGovernor {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice address of the Core contract referenced\r\n    /// @return ICore implementation address\r\n    function core() public view override returns (ICore) {\r\n        return _core;\r\n    }\r\n\r\n    /// @notice address of the Fei contract referenced by Core\r\n    /// @return IFei implementation address\r\n    function fei() public view override returns (IFei) {\r\n        return _fei;\r\n    }\r\n\r\n    /// @notice address of the Tribe contract referenced by Core\r\n    /// @return IERC20 implementation address\r\n    function tribe() public view override returns (IERC20) {\r\n        return _tribe;\r\n    }\r\n\r\n    /// @notice fei balance of contract\r\n    /// @return fei amount held\r\n    function feiBalance() public view override returns (uint256) {\r\n        return _fei.balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice tribe balance of contract\r\n    /// @return tribe amount held\r\n    function tribeBalance() public view override returns (uint256) {\r\n        return _tribe.balanceOf(address(this));\r\n    }\r\n\r\n    function _burnFeiHeld() internal {\r\n        _fei.burn(feiBalance());\r\n    }\r\n\r\n    function _mintFei(address to, uint256 amount) internal virtual {\r\n        if (amount != 0) {\r\n            _fei.mint(to, amount);\r\n        }\r\n    }\r\n\r\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\r\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\r\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\r\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\r\n    }\r\n}\r\n\r\nabstract contract CToken {\r\n    function getCash() external view returns (uint) {}\r\n}\r\n\r\nabstract contract Unitroller {\r\n\r\n    struct Market {\r\n        bool isListed;\r\n        uint collateralFactorMantissa;\r\n        mapping(address => bool) accountMembership;\r\n    }\r\n\r\n    address public admin;\r\n    address public borrowCapGuardian;\r\n    address public pauseGuardian;\r\n\r\n    address public oracle;\r\n    address public pendingAdmin;\r\n    uint public closeFactorMantissa;\r\n    uint public liquidationIncentiveMantissa;\r\n    mapping(address => Market) public markets;\r\n    mapping(address => address) public cTokensByUnderlying;\r\n    mapping(address => uint) public supplyCaps;\r\n\r\n    function enterMarkets(address[] memory cTokens) public virtual returns (uint[] memory);\r\n\r\n    function _setPendingAdmin(address newPendingAdmin) public virtual returns (uint);\r\n\r\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) public virtual;\r\n    function _setMarketSupplyCaps(CToken[] calldata cTokens, uint[] calldata newSupplyCaps) external virtual;\r\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external virtual;\r\n\r\n    function _setPauseGuardian(address newPauseGuardian) public virtual returns (uint);\r\n    function _setMintPaused(CToken cToken, bool state) public virtual returns (bool);\r\n    function _setBorrowPaused(CToken cToken, bool borrowPaused) public virtual returns (bool);\r\n    function _setTransferPaused(bool state) public virtual returns (bool);\r\n    function _setSeizePaused(bool state) public virtual returns (bool);\r\n\r\n    function _setPriceOracle(address newOracle) external virtual returns (uint256);\r\n    function _setCloseFactor(uint newCloseFactorMantissa) external virtual returns (uint256);\r\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external virtual returns (uint);\r\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) public virtual returns (uint256);\r\n    function _acceptAdmin() external virtual returns (uint);\r\n    function _deployMarket(bool isCEther, bytes calldata constructionData, uint256 collateralFactorMantissa) external virtual returns (uint);\r\n    function borrowGuardianPaused(address cToken) external view virtual returns(bool);\r\n    function comptrollerImplementation() external view virtual returns(address);\r\n    function rewardsDistributors(uint256 index) external view virtual returns(address);\r\n\r\n    function _addRewardsDistributor(address distributor) external virtual returns (uint);\r\n    function _setWhitelistEnforcement(bool enforce) external virtual returns (uint);\r\n\r\n    function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external virtual returns (uint);\r\n\r\n    function _unsupportMarket(CToken cToken) external virtual returns (uint);\r\n\r\n    function _toggleAutoImplementations(bool enabled) public virtual returns (uint);\r\n}\r\n\r\n/// @title a Fuse pause and borrow cap guardian used to expand access control to more Fei roles\r\n/// @author joeysantoro\r\ncontract FuseGuardian is CoreRef {\r\n\r\n    /// @notice the fuse comptroller\r\n    Unitroller public immutable comptroller;\r\n\r\n    /// @param _core address of core contract\r\n    /// @param _comptroller the fuse comptroller\r\n    constructor(\r\n        address _core,\r\n        Unitroller _comptroller\r\n    ) CoreRef(_core) {\r\n        comptroller = _comptroller;\r\n        /// @notice The reason we are reusing the tribal chief admin role is it consolidates control in the OA,\r\n        /// and means we don't have to do another governance action to create this role in core\r\n        _setContractAdminRole(keccak256(\"TRIBAL_CHIEF_ADMIN_ROLE\"));\r\n    }\r\n\r\n    // ************ BORROW GUARDIAN FUNCTIONS ************\r\n    /**\r\n      * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\r\n      * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\r\n      * @param cTokens The addresses of the markets (tokens) to change the supply caps for\r\n      * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\r\n      */\r\n    function _setMarketSupplyCaps(CToken[] memory cTokens, uint[] calldata newSupplyCaps) external isGovernorOrGuardianOrAdmin {\r\n        _setMarketSupplyCapsInternal(cTokens, newSupplyCaps);\r\n    }\r\n\r\n    function _setMarketSupplyCapsByUnderlying(address[] calldata underlyings, uint[] calldata newSupplyCaps) external isGovernorOrGuardianOrAdmin {\r\n        _setMarketSupplyCapsInternal(_underlyingToCTokens(underlyings), newSupplyCaps);\r\n    }\r\n\r\n    function _setMarketSupplyCapsInternal(CToken[] memory cTokens, uint[] calldata newSupplyCaps) internal {\r\n        comptroller._setMarketSupplyCaps(cTokens, newSupplyCaps);\r\n    }\r\n\r\n    function _underlyingToCTokens(address[] calldata underlyings) internal view returns (CToken[] memory) {\r\n        CToken[] memory cTokens = new CToken[](underlyings.length);\r\n        for (uint256 i = 0; i < underlyings.length; i++) {\r\n            address cToken = comptroller.cTokensByUnderlying(underlyings[i]);\r\n            require(cToken != address(0), \"cToken doesn't exist\");\r\n            cTokens[i] = CToken(cToken);\r\n        }\r\n        return cTokens;\r\n    }\r\n\r\n    /**\r\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\r\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\r\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\r\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\r\n      */\r\n    function _setMarketBorrowCaps(CToken[] memory cTokens, uint[] calldata newBorrowCaps) external isGovernorOrGuardianOrAdmin {\r\n        _setMarketBorrowCapsInternal(cTokens, newBorrowCaps);\r\n    }\r\n\r\n    function _setMarketBorrowCapsInternal(CToken[] memory cTokens, uint[] calldata newBorrowCaps) internal {\r\n        comptroller._setMarketBorrowCaps(cTokens, newBorrowCaps);\r\n    }\r\n\r\n    function _setMarketBorrowCapsByUnderlying(address[] calldata underlyings, uint[] calldata newBorrowCaps) external isGovernorOrGuardianOrAdmin {\r\n        _setMarketBorrowCapsInternal(_underlyingToCTokens(underlyings), newBorrowCaps);\r\n    }\r\n\r\n    /**\r\n     * @notice Admin function to change the Borrow Cap Guardian\r\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\r\n     */\r\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external onlyGovernor {\r\n        comptroller._setBorrowCapGuardian(newBorrowCapGuardian);\r\n    }\r\n\r\n    // ************ PAUSE GUARDIAN FUNCTIONS ************\r\n    /**\r\n     * @notice Admin function to change the Pause Guardian\r\n     * @param newPauseGuardian The address of the new Pause Guardian\r\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n     */\r\n    function _setPauseGuardian(address newPauseGuardian) external onlyGovernor returns (uint) {\r\n        return comptroller._setPauseGuardian(newPauseGuardian);\r\n    }\r\n\r\n    function _setMintPausedByUnderlying(address underlying, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\r\n        address cToken = comptroller.cTokensByUnderlying(underlying);\r\n        require(cToken != address(0), \"cToken doesn't exist\");\r\n        _setMintPausedInternal(CToken(cToken), state);\r\n    }\r\n\r\n    function _setMintPaused(CToken cToken, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\r\n        return _setMintPausedInternal(cToken, state);\r\n    }\r\n\r\n    function _setMintPausedInternal(CToken cToken, bool state) internal returns (bool) {\r\n        return comptroller._setMintPaused(cToken, state);\r\n    }\r\n\r\n    function _setBorrowPausedByUnderlying(address underlying, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\r\n        address cToken = comptroller.cTokensByUnderlying(underlying);\r\n        require(cToken != address(0), \"cToken doesn't exist\");\r\n        return _setBorrowPausedInternal(CToken(cToken), state);\r\n    }\r\n\r\n    function _setBorrowPausedInternal(CToken cToken, bool state) internal returns (bool) {\r\n        return comptroller._setBorrowPaused(cToken, state);\r\n    }\r\n\r\n    function _setBorrowPaused(CToken cToken, bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\r\n        _setBorrowPausedInternal(CToken(cToken), state);\r\n    }\r\n\r\n    function _setTransferPaused(bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\r\n        return comptroller._setTransferPaused(state);\r\n    }\r\n\r\n    function _setSeizePaused(bool state) external isGovernorOrGuardianOrAdmin returns (bool) {\r\n        return comptroller._setSeizePaused(state);\r\n    }\r\n}\r\n\r\ninterface IMasterOracle {\r\n    function add(address[] calldata underlyings, address[] calldata _oracles) external;\r\n\r\n    function changeAdmin(address newAdmin) external;\r\n\r\n    function admin() external view returns (address);\r\n}\r\n\r\ncontract FuseAdmin is FuseGuardian {\r\n\r\n    error ComptrollerError();\r\n\r\n    /// @param _core address of core contract\r\n    /// @param _comptroller the fuse comptroller\r\n    constructor(\r\n        address _core,\r\n        Unitroller _comptroller\r\n    ) FuseGuardian(_core, _comptroller) {}\r\n\r\n    function oracleAdd(address[] calldata underlyings, address[] calldata _oracles) external onlyGovernorOrAdmin {\r\n        IMasterOracle(comptroller.oracle()).add(underlyings, _oracles);\r\n    }\r\n\r\n    function oracleChangeAdmin(address newAdmin) external onlyGovernor {\r\n        IMasterOracle(comptroller.oracle()).changeAdmin(newAdmin);\r\n    }\r\n\r\n    function _addRewardsDistributor(address distributor) external onlyGovernorOrAdmin {\r\n        if (comptroller._addRewardsDistributor(distributor) != 0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setWhitelistEnforcement(bool enforce) external onlyGovernorOrAdmin {\r\n        if (comptroller._setWhitelistEnforcement(enforce) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external onlyGovernorOrAdmin {\r\n        if (comptroller._setWhitelistStatuses(suppliers, statuses) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setPriceOracle(address newOracle) public onlyGovernor {\r\n        if (comptroller._setPriceOracle(newOracle) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setCloseFactor(uint newCloseFactorMantissa) external onlyGovernorOrAdmin {\r\n        if (comptroller._setCloseFactor(newCloseFactorMantissa) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) public onlyGovernorOrAdmin {\r\n        if (comptroller._setCollateralFactor(cToken, newCollateralFactorMantissa) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external onlyGovernorOrAdmin {\r\n        if (comptroller._setLiquidationIncentive(newLiquidationIncentiveMantissa) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _deployMarket(\r\n        address underlying,\r\n        address irm,\r\n        string calldata name,\r\n        string calldata symbol,\r\n        address impl,\r\n        bytes calldata data,\r\n        uint256 reserveFactor,\r\n        uint256 adminFee,\r\n        uint256 collateralFactorMantissa\r\n    ) external onlyGovernorOrAdmin {\r\n        bytes memory constructorData = abi.encode(\r\n            underlying,\r\n            address(comptroller),\r\n            irm,\r\n            name,\r\n            symbol,\r\n            impl,\r\n            data,\r\n            reserveFactor,\r\n            adminFee\r\n        );\r\n\r\n        if (comptroller._deployMarket(false, constructorData, collateralFactorMantissa) != 0) revert ComptrollerError();\r\n    }\r\n\r\n    function _unsupportMarket(CToken cToken) external onlyGovernorOrAdmin {\r\n        if (comptroller._unsupportMarket(cToken) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _toggleAutoImplementations(bool enabled) public onlyGovernorOrAdmin {\r\n        if (comptroller._toggleAutoImplementations(enabled) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _setPendingAdmin(address newPendingAdmin) public onlyGovernorOrAdmin {\r\n        if (comptroller._setPendingAdmin(newPendingAdmin) !=0) revert ComptrollerError();\r\n    }\r\n\r\n    function _acceptAdmin() public {\r\n        if(comptroller._acceptAdmin() != 0) revert ComptrollerError();\r\n    }   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract Unitroller\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ComptrollerError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldContractAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"ContractAdminRoleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"_addRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"irm\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_deployMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPausedByUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCapsByUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCapsByUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPausedByUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"_setWhitelistEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"suppliers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"_setWhitelistStatuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleAutoImplementations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_unsupportMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fei\",\"outputs\":[{\"internalType\":\"contract IFei\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isContractAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"oracleAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"oracleChangeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"setContractAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FuseAdmin", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b900000000000000000000000007cd53380fe9b2a5e64099591b498c73f0efaa66", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://658aa678c0816a334badc9dbda7cf34e0fa7819f22f175c809fd834c648972a1"}]}