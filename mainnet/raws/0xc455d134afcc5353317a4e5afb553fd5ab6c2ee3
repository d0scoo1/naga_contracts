{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.11;\r\n\r\ncontract Ownable {\r\n    address public ownerAddress;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwnerAddress(address _ownerAddress) public onlyOwner {\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n}\r\n\r\ninterface ICurveRegistry {\r\n    function get_pool_from_lp_token(address) external view returns (address);\r\n}\r\n\r\ncontract CurveRegistryOverrides is Ownable {\r\n    address[] public curveRegistries;\r\n    mapping(address => address) public poolByLpOverride;\r\n\r\n    /// @notice Sets the registries this contract will search when running poolByLp\r\n    /// @dev Registries added must have .get_pool_from_lp_token method\r\n    function setCurveRegistries(address[] memory _curveRegistries)\r\n        public\r\n        onlyOwner\r\n    {\r\n        curveRegistries = _curveRegistries;\r\n    }\r\n\r\n    /// @notice Returns all curve registries that have been set\r\n    function curveRegistriesList() public view returns (address[] memory) {\r\n        return curveRegistries;\r\n    }\r\n\r\n    /// @notice Adds an override pool address for an LP\r\n    /// @dev Maintains an additional pool address list for indexing\r\n    function setPoolForLp(address _poolAddress, address _lpAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        poolByLpOverride[_lpAddress] = _poolAddress;\r\n    }\r\n\r\n    /// @notice Search through pool registry overrides and curve registries for a LP Pool\r\n    function poolByLp(address _lpAddress) public view returns (address) {\r\n        address pool = poolByLpOverride[_lpAddress];\r\n        if (pool != address(0)) {\r\n            return pool;\r\n        }\r\n        for (uint256 i; i < curveRegistries.length; i++) {\r\n            pool = ICurveRegistry(curveRegistries[i]).get_pool_from_lp_token(\r\n                _lpAddress\r\n            );\r\n            if (pool != address(0)) {\r\n                return pool;\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curveRegistries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveRegistriesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"poolByLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolByLpOverride\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_curveRegistries\",\"type\":\"address[]\"}],\"name\":\"setCurveRegistries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"setPoolForLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveRegistryOverrides", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e01b1c054a15fee81bc19eb063c7e1f5b11d2785c9f7eb946f18f9ada3bcee64"}]}