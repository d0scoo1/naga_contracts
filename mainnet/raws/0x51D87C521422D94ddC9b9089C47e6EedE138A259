{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File srcBuild/Gauge.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nlibrary Math {\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface erc20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ninterface ve {\r\n    function token() external view returns (address);\r\n    function balanceOfNFT(uint) external view returns (uint);\r\n    function isApprovedOrOwner(address, uint) external view returns (bool);\r\n    function isUnlocked() external view returns (bool);\r\n    function locked__end(uint) external view returns (uint);\r\n    function create_lock_for(uint, uint, address) external returns (uint);\r\n    function deposit_for(uint, uint) external;\r\n    function ownerOf(uint) external view returns (address);\r\n    function transferFrom(address, address, uint) external;\r\n}\r\n\r\ninterface IBribe {\r\n    function notifyRewardAmount(address token, uint amount) external;\r\n    function left(address token) external view returns (uint);\r\n}\r\n\r\ninterface Voter {\r\n    function attachTokenToGauge(uint _tokenId, address account) external;\r\n    function detachTokenFromGauge(uint _tokenId, address account) external;\r\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\r\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\r\n    function distribute(address _gauge) external;\r\n}\r\n\r\n// Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\r\ncontract Gauge {\r\n\r\n    address public immutable stake; // the asset token that needs to be staked for rewards\r\n    address public immutable _ve; // the ve token used for gauges\r\n    address public immutable bribe;\r\n    address public immutable voter;\r\n\r\n    bool internal depositsOpen;\r\n    uint public derivedSupply;\r\n    mapping(address => uint) public derivedBalances;\r\n\r\n    uint internal constant DURATION = 7 days; // rewards are released over 7 days\r\n    uint internal constant PRECISION = 10 ** 18;\r\n\r\n    // default snx staking contract implementation\r\n    mapping(address => uint) public rewardRate;\r\n    mapping(address => uint) public periodFinish;\r\n    mapping(address => uint) public lastUpdateTime;\r\n    mapping(address => uint) public rewardPerTokenStored;\r\n\r\n    mapping(address => mapping(address => uint)) public lastEarn;\r\n    mapping(address => mapping(address => uint)) public userRewardPerTokenStored;\r\n\r\n    mapping(address => uint) public tokenIds;\r\n\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    address[] public rewards;\r\n    mapping(address => bool) public isReward;\r\n\r\n    /// @notice A checkpoint for marking balance\r\n    struct Checkpoint {\r\n        uint timestamp;\r\n        uint balanceOf;\r\n    }\r\n\r\n    /// @notice A checkpoint for marking reward rate\r\n    struct RewardPerTokenCheckpoint {\r\n        uint timestamp;\r\n        uint rewardPerToken;\r\n    }\r\n\r\n    /// @notice A checkpoint for marking supply\r\n    struct SupplyCheckpoint {\r\n        uint timestamp;\r\n        uint supply;\r\n    }\r\n\r\n    /// @notice A record of balance checkpoints for each account, by index\r\n    mapping (address => mapping (uint => Checkpoint)) public checkpoints;\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint) public numCheckpoints;\r\n    /// @notice A record of balance checkpoints for each token, by index\r\n    mapping (uint => SupplyCheckpoint) public supplyCheckpoints;\r\n    /// @notice The number of checkpoints\r\n    uint public supplyNumCheckpoints;\r\n    /// @notice A record of balance checkpoints for each token, by index\r\n    mapping (address => mapping (uint => RewardPerTokenCheckpoint)) public rewardPerTokenCheckpoints;\r\n    /// @notice The number of checkpoints for each token\r\n    mapping (address => uint) public rewardPerTokenNumCheckpoints;\r\n\r\n    event Deposit(address indexed from, uint tokenId, uint amount);\r\n    event Withdraw(address indexed from, uint tokenId, uint amount);\r\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\r\n    event ClaimRewards(address indexed from, address indexed reward, uint amount);\r\n\r\n    constructor(address _stake, address _bribe, address  __ve, address _voter) {\r\n        stake = _stake;\r\n        bribe = _bribe;\r\n        _ve = __ve;\r\n        voter = _voter;\r\n        depositsOpen = true;\r\n    }\r\n\r\n    modifier whenDepositsOpen() {\r\n        require(depositsOpen, \"This gauge is not open for deposits\");\r\n        _;\r\n    }\r\n\r\n    function stopDeposits() external {\r\n        require(msg.sender == voter, \"must be from voter\");\r\n        depositsOpen = false;\r\n    }\r\n\r\n    function openDeposits() external {\r\n        require(msg.sender == voter, \"must be from voter\");\r\n        depositsOpen = true;\r\n    }\r\n\r\n    function isDepositsOpen() external view returns (bool) {\r\n        return depositsOpen;\r\n    }\r\n\r\n    // simple re-entrancy check\r\n    uint internal _unlocked = 1;\r\n    modifier lock() {\r\n        require(_unlocked == 1);\r\n        _unlocked = 2;\r\n        _;\r\n        _unlocked = 1;\r\n    }\r\n\r\n    /**\r\n    * @notice Determine the prior balance for an account as of a block number\r\n    * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n    * @param account The address of the account to check\r\n    * @param timestamp The timestamp to get the balance at\r\n    * @return The balance the account had as of the given block\r\n    */\r\n    function getPriorBalanceIndex(address account, uint timestamp) public view returns (uint) {\r\n        uint nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].timestamp <= timestamp) {\r\n            return (nCheckpoints - 1);\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].timestamp > timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        uint lower = 0;\r\n        uint upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.timestamp == timestamp) {\r\n                return center;\r\n            } else if (cp.timestamp < timestamp) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return lower;\r\n    }\r\n\r\n    function getPriorSupplyIndex(uint timestamp) public view returns (uint) {\r\n        uint nCheckpoints = supplyNumCheckpoints;\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\r\n            return (nCheckpoints - 1);\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (supplyCheckpoints[0].timestamp > timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        uint lower = 0;\r\n        uint upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\r\n            if (cp.timestamp == timestamp) {\r\n                return center;\r\n            } else if (cp.timestamp < timestamp) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return lower;\r\n    }\r\n\r\n    function getPriorRewardPerToken(address token, uint timestamp) public view returns (uint, uint) {\r\n        uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\r\n        if (nCheckpoints == 0) {\r\n            return (0,0);\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <= timestamp) {\r\n            return (rewardPerTokenCheckpoints[token][nCheckpoints - 1].rewardPerToken, rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp);\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\r\n            return (0,0);\r\n        }\r\n\r\n        uint lower = 0;\r\n        uint upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[token][center];\r\n            if (cp.timestamp == timestamp) {\r\n                return (cp.rewardPerToken, cp.timestamp);\r\n            } else if (cp.timestamp < timestamp) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return (rewardPerTokenCheckpoints[token][lower].rewardPerToken, rewardPerTokenCheckpoints[token][lower].timestamp);\r\n    }\r\n\r\n    function _writeCheckpoint(address account, uint balance) internal {\r\n        uint _timestamp = block.timestamp;\r\n        uint _nCheckPoints = numCheckpoints[account];\r\n\r\n        if (_nCheckPoints > 0 && checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp) {\r\n            checkpoints[account][_nCheckPoints - 1].balanceOf = balance;\r\n        } else {\r\n            checkpoints[account][_nCheckPoints] = Checkpoint(_timestamp, balance);\r\n            numCheckpoints[account] = _nCheckPoints + 1;\r\n        }\r\n    }\r\n\r\n    function _writeRewardPerTokenCheckpoint(address token, uint reward, uint timestamp) internal {\r\n        uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\r\n\r\n        if (_nCheckPoints > 0 && rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp == timestamp) {\r\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].rewardPerToken = reward;\r\n        } else {\r\n            rewardPerTokenCheckpoints[token][_nCheckPoints] = RewardPerTokenCheckpoint(timestamp, reward);\r\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\r\n        }\r\n    }\r\n\r\n    function _writeSupplyCheckpoint() internal {\r\n        uint _nCheckPoints = supplyNumCheckpoints;\r\n        uint _timestamp = block.timestamp;\r\n\r\n        if (_nCheckPoints > 0 && supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp) {\r\n            supplyCheckpoints[_nCheckPoints - 1].supply = derivedSupply;\r\n        } else {\r\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(_timestamp, derivedSupply);\r\n            supplyNumCheckpoints = _nCheckPoints + 1;\r\n        }\r\n    }\r\n\r\n    function rewardsListLength() external view returns (uint) {\r\n        return rewards.length;\r\n    }\r\n\r\n    // returns the last time the reward was modified or periodFinish if the reward has ended\r\n    function lastTimeRewardApplicable(address token) public view returns (uint) {\r\n        return Math.min(block.timestamp, periodFinish[token]);\r\n    }\r\n\r\n    function getReward(address account, address[] memory tokens) external lock {\r\n        require(msg.sender == account || msg.sender == voter);\r\n        _unlocked = 1;\r\n        Voter(voter).distribute(address(this));\r\n        _unlocked = 2;\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            (rewardPerTokenStored[tokens[i]], lastUpdateTime[tokens[i]]) = _updateRewardPerToken(tokens[i]);\r\n\r\n            uint _reward = earned(tokens[i], account);\r\n            lastEarn[tokens[i]][account] = block.timestamp;\r\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[tokens[i]];\r\n            if (_reward > 0) {\r\n              if (ve(_ve).isUnlocked()) {\r\n                  _safeTransfer(tokens[i], account, _reward); //setup gauges to send you veAPHRA while token is unlocked\r\n              } else {\r\n                  uint tokenId = tokenIds[msg.sender];\r\n\r\n                  if (tokenId == 0 || block.timestamp > ve(_ve).locked__end(tokenId)) {\r\n\r\n                      //set initial lock for 8 weeks\r\n                      tokenIds[msg.sender] = ve(_ve).create_lock_for(_reward, DURATION * 8, msg.sender);\r\n                  } else {\r\n                      ve(_ve).deposit_for(tokenId, _reward);\r\n                  }\r\n              }\r\n            }\r\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\r\n        }\r\n\r\n        uint _derivedBalance = derivedBalances[account];\r\n        derivedSupply -= _derivedBalance;\r\n        _derivedBalance = derivedBalance(account);\r\n        derivedBalances[account] = _derivedBalance;\r\n        derivedSupply += _derivedBalance;\r\n\r\n        _writeCheckpoint(account, derivedBalances[account]);\r\n        _writeSupplyCheckpoint();\r\n    }\r\n\r\n    function rewardPerToken(address token) public view returns (uint) {\r\n        if (derivedSupply == 0) {\r\n            return rewardPerTokenStored[token];\r\n        }\r\n        return rewardPerTokenStored[token] + ((lastTimeRewardApplicable(token) - Math.min(lastUpdateTime[token], periodFinish[token])) * rewardRate[token] * PRECISION / derivedSupply);\r\n    }\r\n\r\n    function derivedBalance(address account) public view returns (uint) {\r\n        uint _tokenId = tokenIds[account];\r\n        uint _balance = balanceOf[account];\r\n        uint _derived = _balance * 40 / 100;\r\n        uint _adjusted = 0;\r\n        uint _supply = erc20(_ve).totalSupply();\r\n        //only activate boosts on ve unlock\r\n        if (account == ve(_ve).ownerOf(_tokenId) && _supply > 0 && ve(_ve).isUnlocked()) {\r\n            _adjusted = ve(_ve).balanceOfNFT(_tokenId);\r\n            _adjusted = (totalSupply * _adjusted / _supply) * 60 / 100;\r\n        }\r\n        return Math.min((_derived + _adjusted), _balance);\r\n    }\r\n\r\n    function batchRewardPerToken(address token, uint maxRuns) external {\r\n        (rewardPerTokenStored[token], lastUpdateTime[token])  = _batchRewardPerToken(token, maxRuns);\r\n    }\r\n\r\n    function _batchRewardPerToken(address token, uint maxRuns) internal returns (uint, uint) {\r\n        uint _startTimestamp = lastUpdateTime[token];\r\n        uint reward = rewardPerTokenStored[token];\r\n\r\n        if (supplyNumCheckpoints == 0) {\r\n            return (reward, _startTimestamp);\r\n        }\r\n\r\n        if (rewardRate[token] == 0) {\r\n            return (reward, block.timestamp);\r\n        }\r\n\r\n        uint _startIndex = getPriorSupplyIndex(_startTimestamp);\r\n        uint _endIndex = Math.min(supplyNumCheckpoints-1, maxRuns);\r\n\r\n        for (uint i = _startIndex; i < _endIndex; i++) {\r\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\r\n            if (sp0.supply > 0) {\r\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i+1];\r\n                (uint _reward, uint _endTime) = _calcRewardPerToken(token, sp1.timestamp, sp0.timestamp, sp0.supply, _startTimestamp);\r\n                reward += _reward;\r\n                _writeRewardPerTokenCheckpoint(token, reward, _endTime);\r\n                _startTimestamp = _endTime;\r\n            }\r\n        }\r\n\r\n        return (reward, _startTimestamp);\r\n    }\r\n\r\n    function _calcRewardPerToken(address token, uint timestamp1, uint timestamp0, uint supply, uint startTimestamp) internal view returns (uint, uint) {\r\n        uint endTime = Math.max(timestamp1, startTimestamp);\r\n        return (((Math.min(endTime, periodFinish[token]) - Math.min(Math.max(timestamp0, startTimestamp), periodFinish[token])) * rewardRate[token] * PRECISION / supply), endTime);\r\n    }\r\n\r\n    function _updateRewardPerToken(address token) internal returns (uint, uint) {\r\n        uint _startTimestamp = lastUpdateTime[token];\r\n        uint reward = rewardPerTokenStored[token];\r\n\r\n        if (supplyNumCheckpoints == 0) {\r\n            return (reward, _startTimestamp);\r\n        }\r\n\r\n        if (rewardRate[token] == 0) {\r\n            return (reward, block.timestamp);\r\n        }\r\n\r\n        uint _startIndex = getPriorSupplyIndex(_startTimestamp);\r\n        uint _endIndex = supplyNumCheckpoints-1;\r\n\r\n        if (_endIndex - _startIndex > 1) {\r\n            for (uint i = _startIndex; i < _endIndex-1; i++) {\r\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\r\n                if (sp0.supply > 0) {\r\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i+1];\r\n                    (uint _reward, uint _endTime) = _calcRewardPerToken(token, sp1.timestamp, sp0.timestamp, sp0.supply, _startTimestamp);\r\n                    reward += _reward;\r\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\r\n                    _startTimestamp = _endTime;\r\n                }\r\n            }\r\n        }\r\n\r\n        SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\r\n        if (sp.supply > 0) {\r\n            (uint _reward,) = _calcRewardPerToken(token, lastTimeRewardApplicable(token), Math.max(sp.timestamp, _startTimestamp), sp.supply, _startTimestamp);\r\n            reward += _reward;\r\n            _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\r\n            _startTimestamp = block.timestamp;\r\n        }\r\n\r\n        return (reward, _startTimestamp);\r\n    }\r\n\r\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\r\n    function earned(address token, address account) public view returns (uint) {\r\n        uint _startTimestamp = Math.max(lastEarn[token][account], rewardPerTokenCheckpoints[token][0].timestamp);\r\n        if (numCheckpoints[account] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint _startIndex = getPriorBalanceIndex(account, _startTimestamp);\r\n        uint _endIndex = numCheckpoints[account]-1;\r\n\r\n        uint reward = 0;\r\n\r\n        if (_endIndex - _startIndex > 1) {\r\n            for (uint i = _startIndex; i < _endIndex-1; i++) {\r\n                Checkpoint memory cp0 = checkpoints[account][i];\r\n                Checkpoint memory cp1 = checkpoints[account][i+1];\r\n                (uint _rewardPerTokenStored0,) = getPriorRewardPerToken(token, cp0.timestamp);\r\n                (uint _rewardPerTokenStored1,) = getPriorRewardPerToken(token, cp1.timestamp);\r\n                reward += cp0.balanceOf * (_rewardPerTokenStored1 - _rewardPerTokenStored0) / PRECISION;\r\n            }\r\n        }\r\n\r\n        Checkpoint memory cp = checkpoints[account][_endIndex];\r\n        (uint _rewardPerTokenStored,) = getPriorRewardPerToken(token, cp.timestamp);\r\n        reward += cp.balanceOf * (rewardPerToken(token) - Math.max(_rewardPerTokenStored, userRewardPerTokenStored[token][account])) / PRECISION;\r\n\r\n        return reward;\r\n    }\r\n\r\n    function depositAll(uint tokenId) external {\r\n        deposit(erc20(stake).balanceOf(msg.sender), tokenId);\r\n    }\r\n\r\n    function deposit(uint amount, uint tokenId) public whenDepositsOpen lock {\r\n        require(amount > 0);\r\n\r\n        _safeTransferFrom(stake, msg.sender, address(this), amount);\r\n        totalSupply += amount;\r\n        balanceOf[msg.sender] += amount;\r\n\r\n        if (tokenId > 0) {\r\n            require(ve(_ve).ownerOf(tokenId) == msg.sender);\r\n            if (tokenIds[msg.sender] == 0) {\r\n                tokenIds[msg.sender] = tokenId;\r\n                Voter(voter).attachTokenToGauge(tokenId, msg.sender);\r\n            }\r\n            require(tokenIds[msg.sender] == tokenId);\r\n        } else {\r\n            tokenId = tokenIds[msg.sender];\r\n        }\r\n\r\n        uint _derivedBalance = derivedBalances[msg.sender];\r\n        derivedSupply -= _derivedBalance;\r\n        _derivedBalance = derivedBalance(msg.sender);\r\n        derivedBalances[msg.sender] = _derivedBalance;\r\n        derivedSupply += _derivedBalance;\r\n\r\n        _writeCheckpoint(msg.sender, _derivedBalance);\r\n        _writeSupplyCheckpoint();\r\n\r\n        Voter(voter).emitDeposit(tokenId, msg.sender, amount);\r\n        emit Deposit(msg.sender, tokenId, amount);\r\n    }\r\n\r\n    function withdrawAll() external {\r\n        withdraw(balanceOf[msg.sender]);\r\n    }\r\n\r\n    function withdraw(uint amount) public {\r\n        uint tokenId = 0;\r\n        if (amount == balanceOf[msg.sender]) {\r\n            tokenId = tokenIds[msg.sender];\r\n        }\r\n        withdrawToken(amount, tokenId);\r\n    }\r\n\r\n    function withdrawToken(uint amount, uint tokenId) public lock {\r\n        totalSupply -= amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        _safeTransfer(stake, msg.sender, amount);\r\n\r\n        if (tokenId > 0) {\r\n            require(tokenId == tokenIds[msg.sender]);\r\n            tokenIds[msg.sender] = 0;\r\n            Voter(voter).detachTokenFromGauge(tokenId, msg.sender);\r\n        } else {\r\n            tokenId = tokenIds[msg.sender];\r\n        }\r\n\r\n        uint _derivedBalance = derivedBalances[msg.sender];\r\n        derivedSupply -= _derivedBalance;\r\n        _derivedBalance = derivedBalance(msg.sender);\r\n        derivedBalances[msg.sender] = _derivedBalance;\r\n        derivedSupply += _derivedBalance;\r\n\r\n        _writeCheckpoint(msg.sender, derivedBalances[msg.sender]);\r\n        _writeSupplyCheckpoint();\r\n\r\n        Voter(voter).emitWithdraw(tokenId, msg.sender, amount);\r\n        emit Withdraw(msg.sender, tokenId, amount);\r\n    }\r\n\r\n    function left(address token) external view returns (uint) {\r\n        if (block.timestamp >= periodFinish[token]) return 0;\r\n        uint _remaining = periodFinish[token] - block.timestamp;\r\n        return _remaining * rewardRate[token];\r\n    }\r\n\r\n    function notifyRewardAmount(address token, uint amount) external lock {\r\n        require(token != stake);\r\n        require(amount > 0);\r\n        if (rewardRate[token] == 0) _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\r\n        (rewardPerTokenStored[token], lastUpdateTime[token]) = _updateRewardPerToken(token);\r\n\r\n        if (block.timestamp >= periodFinish[token]) {\r\n            _safeTransferFrom(token, msg.sender, address(this), amount);\r\n            rewardRate[token] = amount / DURATION;\r\n        } else {\r\n            uint _remaining = periodFinish[token] - block.timestamp;\r\n            uint _left = _remaining * rewardRate[token];\r\n            require(amount > _left);\r\n            _safeTransferFrom(token, msg.sender, address(this), amount);\r\n            rewardRate[token] = (amount + _left) / DURATION;\r\n        }\r\n        require(rewardRate[token] > 0);\r\n        uint balance = erc20(token).balanceOf(address(this));\r\n        require(rewardRate[token] <= balance / DURATION, \"Provided reward too high\");\r\n        periodFinish[token] = block.timestamp + DURATION;\r\n        if (!isReward[token]) {\r\n            isReward[token] = true;\r\n            rewards.push(token);\r\n        }\r\n\r\n        emit NotifyReward(msg.sender, token, amount);\r\n    }\r\n\r\n    // Safe if transfer function, just in case if rounding error causes pool to not have enough APHRAs.\r\n//    function _claimAndLockVe(address _to, uint256 _amount) internal {\r\n//\r\n//        uint256 depositAmount = _amount;\r\n//        //\r\n//        if (_amount > aphraToken.balanceOf(address(this))) {\r\n//            depositAmount = aphraToken.balanceOf(address(this));\r\n//        }\r\n//\r\n//        //check to see if a the receiving user has an lock.\r\n//        if (activeBadge[_to] != uint(0) && _ve.ownerOf(activeBadge[_to]) == _to) {\r\n//            _ve.deposit_for(activeBadge[_to], depositAmount);\r\n//        } else {\r\n//            activeBadge[_to] = _ve.create_lock_for(depositAmount, DURATION, _to);\r\n//        }\r\n//    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        require(token.code.length > 0);\r\n        (bool success, bytes memory data) =\r\n        token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n\r\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        require(token.code.length > 0);\r\n        (bool success, bytes memory data) =\r\n        token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n\r\n    function _safeApprove(address token, address spender, uint256 value) internal {\r\n        require(token.code.length > 0);\r\n        (bool success, bytes memory data) =\r\n        token.call(abi.encodeWithSelector(erc20.approve.selector, spender, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}\r\n\r\ncontract GaugeFactory {\r\n    address public last_gauge;\r\n\r\n    function createGauge(address _asset, address _bribe, address _ve) external returns (address) {\r\n        last_gauge = address(new Gauge(_asset, _bribe, _ve, msg.sender));\r\n        return last_gauge;\r\n    }\r\n\r\n    function createGaugeSingle(address _asset, address _bribe, address _ve, address _voter) external returns (address) {\r\n        last_gauge = address(new Gauge(_asset, _bribe, _ve, _voter));\r\n        return last_gauge;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"createGaugeSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GaugeFactory", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9c5e228105b5acd1d5ed9be5e5a1edafd2f7e003f2af9ad3f0c3e8fa94fa1482"}]}