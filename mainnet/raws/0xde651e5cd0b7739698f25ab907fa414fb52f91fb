{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Scroll down to the bottom to find the contract of interest. \r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File: @rari-capital/solmate/src/tokens/ERC20.sol\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\n\r\n// File: eth/contracts/Dreams.sol\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n// import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\"; \r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n// import \"@rari-capital/solmate/src/tokens/ERC20.sol\";\r\n\r\nerror InvalidProof();\r\nerror Unauthorized();\r\nerror NotActive();\r\nerror IndexOutOfBounds();\r\nerror NoMoreAvailableToMint();\r\n\r\nabstract contract ERC20MintCapped is ERC20, Ownable {\r\n\r\n    uint256 public immutable mintCap;\r\n\r\n    uint256 public immutable harvestMintCap;\r\n\r\n    uint128 public totalMinted;\r\n\r\n    uint128 public totalHarvestMinted;\r\n\r\n    mapping(address => bool) public minters;\r\n\r\n    constructor(uint128 mintCap_, uint128 harvestMintCap_) { \r\n        mintCap = mintCap_;\r\n        harvestMintCap = harvestMintCap_;\r\n        if (harvestMintCap_ > mintCap_) revert();\r\n        minters[msg.sender] = true;\r\n    }\r\n\r\n    function _cappedMint(address to, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) return 0;\r\n        uint256 diff;\r\n        unchecked {\r\n            uint256 curr = totalMinted;\r\n            uint256 next = curr + amount;\r\n            if (amount > type(uint128).max) revert();\r\n            if (next > mintCap) { // If the next total amount exceeds the mintCap,\r\n                next = mintCap; // set the total amount to the mintCap.\r\n            }\r\n            diff = next - curr; // The amount needed to be minted.\r\n            if (diff == 0) revert NoMoreAvailableToMint();\r\n            if (next > type(uint128).max) revert();\r\n            totalMinted = uint128(next);    \r\n        }\r\n        _mint(to, diff);\r\n        return diff;\r\n    }\r\n\r\n    function _harvestCappedMint(address to, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) return 0;\r\n        uint256 diff;\r\n        unchecked {\r\n            uint256 curr = totalHarvestMinted;\r\n            uint256 next = curr + amount;\r\n            if (amount > type(uint128).max) revert();\r\n            if (next > harvestMintCap) { // If the next total amount exceeds the harvestMintCap,\r\n                next = harvestMintCap; // set the total amount to the harvestMintCap.\r\n            }\r\n            diff = next - curr; // The amount needed to be minted.\r\n            if (diff == 0) revert NoMoreAvailableToMint();\r\n            if (next > type(uint128).max) revert();\r\n            totalHarvestMinted = uint128(next);    \r\n        }\r\n        return _cappedMint(to, diff);\r\n    }\r\n\r\n    function authorizeMinter(address minter) external onlyOwner {\r\n        minters[minter] = true;\r\n    }\r\n\r\n    function revokeMinter(address minter) external onlyOwner {\r\n        minters[minter] = false;\r\n    }\r\n    \r\n    function mint(address to, uint256 amount) external {\r\n        if (!minters[msg.sender]) revert Unauthorized();\r\n        _cappedMint(to, amount);\r\n    }\r\n\r\n    function selfMint(uint256 amount) external {\r\n        if (!minters[msg.sender]) revert Unauthorized();\r\n        _cappedMint(msg.sender, amount);\r\n    }\r\n}\r\n\r\n\r\nabstract contract ERC20Claimable is ERC20MintCapped {\r\n    \r\n    bytes32 internal _claimMerkleRoot;\r\n\r\n    mapping(uint256 => uint256) internal _claimed;\r\n\r\n    constructor(bytes32 claimMerkleRoot) {\r\n        _claimMerkleRoot = claimMerkleRoot;\r\n    }\r\n\r\n    function setClaimMerkleRoot(bytes32 root) public onlyOwner {\r\n        _claimMerkleRoot = root;\r\n    }\r\n\r\n    function isClaimed(uint256 slot) external view returns (bool) {\r\n        uint256 q = slot >> 8;\r\n        uint256 r = slot & 255;\r\n        uint256 b = 1 << r;\r\n        return _claimed[q] & b != 0;\r\n    }\r\n\r\n    function claim(address to, uint256 amount, uint256 slot, bytes32[] calldata proof) external {\r\n        uint256 q = slot >> 8;\r\n        uint256 r = slot & 255;\r\n        uint256 b = 1 << r;\r\n        require(_claimed[q] & b == 0, \"Already claimed.\");\r\n        bytes32 leaf = keccak256(abi.encodePacked(to, amount, slot));\r\n        bool isValidLeaf = MerkleProof.verify(proof, _claimMerkleRoot, leaf);\r\n        if (!isValidLeaf) revert InvalidProof();\r\n        _claimed[q] |= b;\r\n\r\n        _cappedMint(to, amount);\r\n    }\r\n}\r\n\r\n\r\nabstract contract ERC20Burnable is ERC20 {\r\n\r\n    function _checkedBurn(address account, uint256 amount) internal {\r\n        require(balanceOf[account] >= amount, \"Insufficient balance.\");\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        _checkedBurn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public {\r\n        uint256 currentAllowance = allowance[account][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            allowance[account][msg.sender] -= amount;\r\n        }\r\n        _checkedBurn(account, amount);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Coin is ERC20, ERC20Burnable, ERC20MintCapped, ERC20Claimable {\r\n\r\n    constructor(\r\n        string memory name_, \r\n        string memory symbol_, \r\n        uint128 mintCap_, \r\n        uint128 harvestMintCap_\r\n    )\r\n    ERC20(name_, symbol_, 18) \r\n    ERC20MintCapped(mintCap_, harvestMintCap_) {}\r\n}\r\n\r\n\r\nabstract contract Shop is Coin {\r\n\r\n    struct PriceListing {\r\n        uint248 price;\r\n        bool active;\r\n    }\r\n\r\n    uint256 internal constant BITWIDTH_TOKEN_UID = 16;\r\n    uint256 internal constant BITWIDTH_TOKEN_ID = BITWIDTH_TOKEN_UID - 1;\r\n    uint256 internal constant BITMASK_TOKEN_ID = (1 << BITWIDTH_TOKEN_ID) - 1;\r\n\r\n    address public immutable gen0;\r\n    address public immutable gen1;\r\n\r\n    constructor(address _gen0, address _gen1) {\r\n        gen0 = _gen0;\r\n        gen1 = _gen1;\r\n    }\r\n\r\n    function _gen(uint256 gen) internal view returns (IERC721) {\r\n        return IERC721(gen == 0 ? gen0 : gen1);\r\n    }\r\n}\r\n\r\n\r\nabstract contract NFTStaker is Shop {\r\n\r\n    uint256 internal constant BITSHIFT_OWNER = 96;\r\n    uint256 internal constant BITWIDTH_BLOCK_NUM = 31;\r\n    uint256 internal constant BITMASK_BLOCK_NUM = (1 << BITWIDTH_BLOCK_NUM) - 1;\r\n    uint256 internal constant BITWIDTH_STAKE = (BITWIDTH_TOKEN_UID + BITWIDTH_BLOCK_NUM);\r\n    uint256 internal constant BITMASK_STAKE = (1 << BITWIDTH_STAKE) - 1;\r\n    uint256 internal constant BITMOD_STAKE = (256 / BITWIDTH_STAKE);\r\n    uint256 internal constant BITPOS_NUM_STAKED = BITMOD_STAKE * BITWIDTH_STAKE;\r\n    uint256 internal constant BITMASK_STAKES = (1 << BITPOS_NUM_STAKED) - 1;\r\n    \r\n    uint256 internal constant BITWIDTH_RATE = 4;\r\n    uint256 internal constant BITMOD_RATE = (256 / BITWIDTH_RATE);\r\n    uint256 internal constant BITMASK_RATE = (1 << BITWIDTH_RATE) - 1;\r\n    uint256 internal constant DEFAULT_RATE = 5;\r\n\r\n    mapping(uint256 => uint256) internal _vault;\r\n\r\n    bytes32 internal _ratesMerkleRoot;\r\n\r\n    uint128 public harvestBaseRate;\r\n\r\n    uint32 public minStakeBlocks;\r\n\r\n    bool private _reentrancyGuard;\r\n\r\n    constructor(\r\n        uint128 harvestBaseRate_, \r\n        uint32 minStakeBlocks_, \r\n        bytes32 ratesMerkleRoot_\r\n    ) {\r\n        harvestBaseRate = harvestBaseRate_;\r\n        minStakeBlocks = minStakeBlocks_;\r\n        _ratesMerkleRoot = ratesMerkleRoot_;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        if (_reentrancyGuard) revert();\r\n        _reentrancyGuard = true;\r\n        _;\r\n        _reentrancyGuard = false;\r\n    }\r\n\r\n    function setRatesMerkleRoot(bytes32 value) external onlyOwner {\r\n        _ratesMerkleRoot = value;\r\n    }\r\n\r\n    function setMinStakeBlocks(uint32 value) external onlyOwner {\r\n        minStakeBlocks = value;\r\n    }\r\n\r\n    function setHarvestBaseRate(uint128 value) external onlyOwner {\r\n        harvestBaseRate = value;\r\n    }\r\n\r\n    function _blockNumber() internal view virtual returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    function stakeNFTs(uint256[] memory tokenUids) \r\n    external nonReentrant {\r\n        unchecked {\r\n            uint256 n = tokenUids.length;\r\n            require(n > 0, \"Please submit at least 1 token.\");\r\n            uint256 o = uint256(uint160(msg.sender)) << BITSHIFT_OWNER;\r\n            uint256 f = _vault[o];\r\n            uint256 m = f >> BITPOS_NUM_STAKED;\r\n\r\n            uint256 j = m;\r\n\r\n            _vault[o] = f ^ ((m ^ (m + n)) << BITPOS_NUM_STAKED);\r\n\r\n            uint256 blockNumCurr = _blockNumber();\r\n            for (uint256 i; i < n; ++i) {\r\n                uint256 e = tokenUids[i];\r\n                \r\n                // Transfer NFT from owner to contract.\r\n                uint256 gen = e >> BITWIDTH_TOKEN_ID;\r\n                uint256 tokenId = e & BITMASK_TOKEN_ID;\r\n                _gen(gen).transferFrom(msg.sender, address(this), tokenId);\r\n\r\n                uint256 q = (j / BITMOD_STAKE) | o;\r\n                uint256 r = (j % BITMOD_STAKE) * BITWIDTH_STAKE;\r\n                uint256 s = (e << BITWIDTH_BLOCK_NUM) | blockNumCurr;\r\n                _vault[q] |= (s << r);\r\n                ++j;\r\n            }\r\n        }\r\n    }\r\n\r\n    function stakedNFTs(address owner) \r\n    external view returns (uint256[] memory) {\r\n        unchecked {\r\n            uint256 o = uint256(uint160(owner)) << BITSHIFT_OWNER;\r\n            uint256 f = _vault[o];\r\n            uint256 m = f >> BITPOS_NUM_STAKED;\r\n\r\n            uint256[] memory a = new uint256[](m);\r\n            for (uint256 j; j < m; ++j) {\r\n                uint256 q = (j / BITMOD_STAKE) | o;\r\n                uint256 r = (j % BITMOD_STAKE) * BITWIDTH_STAKE;\r\n                uint256 s = (_vault[q] >> r) & BITMASK_STAKE;\r\n                a[j] = s >> BITWIDTH_BLOCK_NUM;\r\n            }\r\n            return a;\r\n        }\r\n    }\r\n\r\n    function stakedNFTByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        unchecked {\r\n            uint256 j = index;\r\n            uint256 o = uint256(uint160(owner)) << BITSHIFT_OWNER;\r\n            uint256 f = _vault[o];\r\n            uint256 m = f >> BITPOS_NUM_STAKED;\r\n            if (j >= m) revert IndexOutOfBounds();\r\n            uint256 q = (j / BITMOD_STAKE) | o;\r\n            uint256 r = (j % BITMOD_STAKE) * BITWIDTH_STAKE;\r\n            uint256 s = (_vault[q] >> r) & BITMASK_STAKE;\r\n            return s >> BITWIDTH_BLOCK_NUM;\r\n        }        \r\n    }\r\n\r\n    function unstakeNFTs(uint256[] calldata indices, uint256 numStaked) \r\n    external nonReentrant {\r\n        unchecked {\r\n            uint256 o = uint256(uint160(msg.sender)) << BITSHIFT_OWNER;\r\n            uint256 f = _vault[o];\r\n            uint256 m = f >> BITPOS_NUM_STAKED;      \r\n            if (m != numStaked) revert IndexOutOfBounds();\r\n            uint256 n = indices.length;\r\n            require(n > 0, \"Please submit at least 1 token.\");\r\n            if (m < n) revert IndexOutOfBounds();\r\n\r\n            _vault[o] = f ^ ((m ^ (m - n)) << BITPOS_NUM_STAKED);\r\n            uint256 p = type(uint256).max;\r\n            for (uint256 i; i < n; ++i) {\r\n                uint256 j = indices[i];\r\n                if (j >= m || j >= p) revert IndexOutOfBounds();\r\n                uint256 q = (j / BITMOD_STAKE) | o;\r\n                uint256 r = (j % BITMOD_STAKE) * BITWIDTH_STAKE;\r\n                uint256 s = (_vault[q] >> r) & BITMASK_STAKE;\r\n                \r\n                uint256 tokenUid = s >> BITWIDTH_BLOCK_NUM;\r\n                \r\n                // Transfer NFT from contract to owner.\r\n                uint256 gen = tokenUid >> BITWIDTH_TOKEN_ID;\r\n                uint256 tokenId = tokenUid & BITMASK_TOKEN_ID;\r\n                _gen(gen).transferFrom(address(this), msg.sender, tokenId);\r\n\r\n                --m;\r\n                uint256 u = (m / BITMOD_STAKE) | o;\r\n                uint256 v = (m % BITMOD_STAKE) * BITWIDTH_STAKE;\r\n                uint256 w = (_vault[u] >> v) & BITMASK_STAKE;\r\n                _vault[q] ^= ((s ^ w) << r);\r\n                _vault[u] ^= (w << v);\r\n                p = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    function harvest(uint256[] calldata rates, bytes32[][] calldata proofs) \r\n    external nonReentrant returns (uint256) {\r\n        unchecked {\r\n            uint256 o = uint256(uint160(msg.sender)) << BITSHIFT_OWNER;\r\n            uint256 m = _vault[o] >> BITPOS_NUM_STAKED;\r\n            uint256 amount;\r\n            if (m != rates.length || m != proofs.length)\r\n                revert InvalidProof();\r\n            \r\n            uint256 blockNumCurr = _blockNumber();\r\n            uint256 thres = minStakeBlocks;\r\n            bytes32 root = _ratesMerkleRoot;\r\n            \r\n            for (uint256 j; j < m; ++j) {\r\n                bytes32[] memory proof = proofs[j];\r\n                uint256 rate = rates[j];\r\n                uint256 q = (j / BITMOD_STAKE) | o;\r\n                uint256 r = (j % BITMOD_STAKE) * BITWIDTH_STAKE;\r\n                uint256 s = (_vault[q] >> r) & BITMASK_STAKE;\r\n                \r\n                uint256 blockNum = s & BITMASK_BLOCK_NUM;\r\n                uint256 tokenUid = s >> BITWIDTH_BLOCK_NUM;\r\n                \r\n                if (blockNum + thres > blockNumCurr) continue;\r\n\r\n                if (!MerkleProof.verify(proof, root, \r\n                    keccak256(abi.encodePacked(tokenUid, rate)))) \r\n                    revert InvalidProof();\r\n\r\n                amount += rate * (blockNumCurr - blockNum);\r\n\r\n                uint256 w = (tokenUid << BITWIDTH_BLOCK_NUM) | blockNumCurr;\r\n                _vault[q] ^= ((s ^ w) << r);                    \r\n            }\r\n            amount *= harvestBaseRate;\r\n\r\n            return _harvestCappedMint(msg.sender, amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract NFTDataChanger is NFTStaker {\r\n\r\n    mapping(uint256 => PriceListing) public nftDataPrices;\r\n\r\n    // nftData[tokenUid][dataTypeId]\r\n    mapping(uint256 => mapping(uint256 => bytes32)) public nftData;\r\n\r\n    event NFTDataChanged(uint256 tokenUid, uint256 dataTypeId, bytes32 value);\r\n\r\n    function setNFTDataPrice(uint256 dataTypeId, uint248 price, bool active) external onlyOwner {\r\n        nftDataPrices[dataTypeId].price = price;\r\n        nftDataPrices[dataTypeId].active = active;\r\n    }\r\n\r\n    function _setNFTData(uint256 tokenUid, uint256 dataTypeId, bytes32 value) internal {\r\n        if (!nftDataPrices[dataTypeId].active) revert NotActive();\r\n        burn(nftDataPrices[dataTypeId].price);\r\n\r\n        nftData[tokenUid][dataTypeId] = value;\r\n        emit NFTDataChanged(tokenUid, dataTypeId, value);\r\n    }\r\n\r\n    function setNFTData(uint256 tokenUid, uint256 dataTypeId, bytes32 value) external {\r\n        uint256 gen = tokenUid >> BITWIDTH_TOKEN_ID;\r\n        uint256 tokenId = tokenUid & BITMASK_TOKEN_ID;\r\n        if (msg.sender != _gen(gen).ownerOf(tokenId)) revert Unauthorized();\r\n        _setNFTData(tokenUid, dataTypeId, value);\r\n    }\r\n\r\n    function setStakedNFTData(uint256 tokenUid, uint256 index, uint256 dataTypeId, bytes32 value) external {\r\n        if (stakedNFTByIndex(msg.sender, index) != tokenUid) revert Unauthorized();\r\n        _setNFTData(tokenUid, dataTypeId, value);\r\n    }\r\n\r\n    function getNFTData(uint256[] calldata tokenUids, uint256[] calldata dataTypeIds) \r\n    external view returns (bytes32[] memory) {\r\n        unchecked {\r\n            uint256 m = tokenUids.length;\r\n            uint256 n = dataTypeIds.length;\r\n            bytes32[] memory a = new bytes32[](m * n);\r\n            for (uint256 j; j < m; ++j) {\r\n                for (uint256 i; i < n; ++i) {\r\n                    a[j * n + i] = nftData[tokenUids[j]][dataTypeIds[i]];\r\n                }\r\n            }\r\n            return a;    \r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract TicketShop is Shop {\r\n\r\n    mapping(uint256 => PriceListing) public ticketPrices;\r\n\r\n    mapping(uint256 => address[]) public ticketPurchases;\r\n\r\n    mapping(uint256 => mapping(address => bool)) public hasPurchasedTicket;\r\n\r\n    function setTicketPrice(uint256 ticketTypeId, uint248 price, bool active) external onlyOwner {\r\n        ticketPrices[ticketTypeId].price = price;\r\n        ticketPrices[ticketTypeId].active = active;\r\n    }\r\n\r\n    function purchaseTicket(uint256 ticketTypeId) public {\r\n        if (!ticketPrices[ticketTypeId].active) revert NotActive();\r\n        burn(ticketPrices[ticketTypeId].price);\r\n\r\n        ticketPurchases[ticketTypeId].push(msg.sender);\r\n        hasPurchasedTicket[ticketTypeId][msg.sender] = true;\r\n    }\r\n}\r\n\r\n\r\ninterface IGen1 is IERC721 {\r\n    \r\n    function forceMint(address[] memory _addresses) external;\r\n}\r\n\r\n\r\nabstract contract Gen1Minter is Shop {\r\n\r\n    PriceListing public gen1MintPrice;\r\n\r\n    function setGen1MintPrice(uint128 price, bool active) external onlyOwner {\r\n        gen1MintPrice.price = price;\r\n        gen1MintPrice.active = active;\r\n    }\r\n\r\n    function passBackGen1Ownership() external onlyOwner {\r\n        Ownable(gen1).transferOwnership(owner());\r\n    }\r\n\r\n    function mintGen1(uint256 numTokens) external {\r\n        if (!gen1MintPrice.active) revert NotActive();\r\n        burn(gen1MintPrice.price * numTokens);\r\n\r\n        address[] memory a = new address[](numTokens);\r\n        unchecked {\r\n            for (uint i; i < numTokens; ++i) {\r\n                a[i] = msg.sender;\r\n            }\r\n        }\r\n        IGen1(gen1).forceMint(a);\r\n    }\r\n}\r\n\r\n\r\nabstract contract NFTCoinShop is NFTDataChanger, TicketShop, Gen1Minter {\r\n\r\n    constructor(\r\n        string memory name_, \r\n        string memory symbol_, \r\n        uint128 mintCap_, \r\n        uint128 harvestMintCap_, \r\n        address gen0_, \r\n        address gen1_,\r\n        bytes32 claimMerkleRoot_,\r\n        uint128 harvestBaseRate_, \r\n        uint32 minStakeBlocks_, \r\n        bytes32 ratesMerkleRoot_) \r\n    Coin(name_, symbol_, mintCap_, harvestMintCap_)\r\n    Shop(gen0_, gen1_)\r\n    ERC20Claimable(claimMerkleRoot_)\r\n    NFTStaker(harvestBaseRate_, minStakeBlocks_, ratesMerkleRoot_) {}\r\n}\r\n\r\n\r\n// Replace class name with actual value in prod.\r\ncontract Dreams is NFTCoinShop {\r\n\r\n    constructor() \r\n    NFTCoinShop(\r\n        // Name\r\n        \"Dreams\", \r\n        // Symbol\r\n        \"DREAMS\", \r\n        // Mint cap\r\n        10000000 * 1000000000000000000, \r\n        // Harvest mint cap\r\n        7000000 * 1000000000000000000, \r\n        // Gen 0 \r\n        0x4e2781e3aD94b2DfcF34c51De0D8e9358c69F296, \r\n        // Gen 1\r\n        0xAB9F99e6460f6B7940aB7920F44D97b725e0FA4c, \r\n        // Claim Merkle Root\r\n        0xef35dac8c7728a6c30dc702829819d9d3349f1435480726d0a865665ef8ace69,\r\n        // Harvest base Rate\r\n        100000000000000,\r\n        // Harvest min stake blocks\r\n        66000, \r\n        // Harvest rates merkle root\r\n        0x8b032d7c4c594507e68c268cbee1026fb7321f4eee5d333862bac183598d338d\r\n    ) {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMoreAvailableToMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"NFTDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"authorizeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gen0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gen1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gen1MintPrice\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenUids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dataTypeIds\",\"type\":\"uint256[]\"}],\"name\":\"getNFTData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestBaseRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestMintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasPurchasedTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"mintGen1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftDataPrices\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passBackGen1Ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setClaimMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setGen1MintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"name\":\"setHarvestBaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setMinStakeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenUid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataTypeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setNFTData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dataTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setNFTDataPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setRatesMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenUid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataTypeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setStakedNFTData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenUids\",\"type\":\"uint256[]\"}],\"name\":\"stakeNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakedNFTByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketPrices\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketPurchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHarvestMinted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numStaked\",\"type\":\"uint256\"}],\"name\":\"unstakeNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Dreams", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a49d12b57b0e96b81212eac6ddd03bebad42c1a8e5d0e5aa8bdcecffcfb06427"}]}