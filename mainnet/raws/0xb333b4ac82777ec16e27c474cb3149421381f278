{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface ITreasury {\\r\\n    function updateTaxesAccrued(uint taxType, uint amt) external;\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external;\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external;\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nstruct Slot0 {\\r\\n    // the current price\\r\\n    uint160 sqrtPriceX96;\\r\\n    // the current tick\\r\\n    int24 tick;\\r\\n    // the most-recently updated index of the observations array\\r\\n    uint16 observationIndex;\\r\\n    // the current maximum number of observations that are being stored\\r\\n    uint16 observationCardinality;\\r\\n    // the next maximum number of observations to store, triggered in observations.write\\r\\n    uint16 observationCardinalityNext;\\r\\n    // the current protocol fee as a percentage of the swap fee taken on withdrawal\\r\\n    // represented as an integer denominator (1/x)%\\r\\n    uint8 feeProtocol;\\r\\n    // whether the pool is locked\\r\\n    bool unlocked;\\r\\n}\\r\\n\\r\\ninterface IUniPool {\\r\\n    function slot0() external returns(Slot0 memory slot0);\\r\\n    function liquidity() external returns(uint128 liquidity);\\r\\n    function fee() external returns(uint24 fee);\\r\\n    function token0() external returns(address token0);\\r\\n    function token1() external returns(address token1);\\r\\n    function tickSpacing() external returns(int24 tickSpacing);\\r\\n    function tickBitmap(int16 i) external payable returns(uint256 o);\\r\\n}\\r\\n\\r\\n\\r\\ninterface ILiquidityPoolV4 {\\r\\n\\r\\n}\\r\\n\\r\\ninterface IDapperTri {\\r\\n    function get_paid(\\r\\n        address[3] memory _route, \\r\\n        uint8[3] memory _exchanges, \\r\\n        uint24[4] memory _poolFees, \\r\\n        address _borrow, \\r\\n        uint _borrowAmt\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nstruct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function getAmountsOut(\\r\\n        uint amountIn, \\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\n\\r\\ninterface IUniswapQuoterV3 {\\r\\n    function quoteExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n    ) external view returns (uint256 amountOut);\\r\\n}\\r\\n\\r\\ninterface IUniswapRouterV3 {\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n}\\r\\n\\r\\n// https://etherscan.io/address/0x2F9EC37d6CcFFf1caB21733BdaDEdE11c823cCB0#code\\r\\ninterface IBancorNetwork {\\r\\n     function conversionPath(\\r\\n         IERC20 _sourceToken, \\r\\n         IERC20 _targetToken\\r\\n    ) external view returns (address[] memory);\\r\\n    function convert(\\r\\n        address[] memory path,\\r\\n        uint256 sourceAmount,\\r\\n        uint256 minReturn\\r\\n    ) external payable returns (uint256);\\r\\n    function convertByPath(\\r\\n        address[] memory path,\\r\\n        uint256 sourceAmount,\\r\\n        uint256 minReturn,\\r\\n        address payable beneficiary,\\r\\n        address affiliate,\\r\\n        uint256 affiliateFee\\r\\n    ) external payable returns (uint256);\\r\\n    function rateByPath(\\r\\n        address[] memory path, \\r\\n        uint256 sourceAmount\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\n// https://etherscan.io/address/0x8301ae4fc9c624d1d396cbdaa1ed877821d7c511#code (ETH/CRV)\\r\\n// https://etherscan.io/address/0xDC24316b9AE028F1497c275EB9192a3Ea0f67022#code (ETH/stETH)\\r\\ninterface ICRVMetaPool {\\r\\n    // i = token_from\\r\\n    // j = token_to\\r\\n    // dx = token_from_change\\r\\n    // min_dy = token_to_min_receive\\r\\n    // function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256); \\r\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns(uint256); \\r\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable returns(uint256); \\r\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external payable returns(uint256);\\r\\n    function exchange_underlying(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable returns(uint256);\\r\\n    function add_liquidity(uint256[] memory amounts_in, uint256 min_mint_amount) external payable returns(uint256);\\r\\n    function remove_liquidity(uint256 amount, uint256[] memory min_amounts_out) external returns(uint256[] memory);\\r\\n}\\r\\n\\r\\ninterface ICRV {\\r\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable; \\r\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external payable;\\r\\n}\\r\\n\\r\\ninterface ICRV_PP_128_NP {\\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\r\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256);\\r\\n}\\r\\ninterface ICRV_PP_256_NP {\\r\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external;\\r\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns(uint256);\\r\\n}\\r\\ninterface ICRV_PP_256_P {\\r\\n    function exchange_underlying(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable returns(uint256);\\r\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns(uint256);\\r\\n}\\r\\ninterface ICRV_MP_256 {\\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable returns(uint256);\\r\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable returns(uint256);\\r\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface ICRVSBTC {\\r\\n    // i = token_from\\r\\n    // j = token_to\\r\\n    // dx = token_from_change\\r\\n    // min_dy = token_to_min_receive\\r\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256); \\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint256); \\r\\n    function add_liquidity(uint256[3] memory amounts_in, uint256 min_mint_amount) external;\\r\\n    function remove_liquidity(uint256 amount, uint256[3] memory min_amounts_out) external;\\r\\n    function remove_liquidity_one_coin(uint256 token_amount, int128 index, uint min_amount) external;\\r\\n}\\r\\n\\r\\ninterface ICRVSBTC_CRV {\\r\\n    // i = token_from\\r\\n    // j = token_to\\r\\n    // dx = token_from_change\\r\\n    // min_dy = token_to_min_receive\\r\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256); \\r\\n    // function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint256);\\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external; \\r\\n    function add_liquidity(uint256[3] memory amounts_in, uint256 min_mint_amount) external;\\r\\n    function remove_liquidity(uint256 amount, uint256[3] memory min_amounts_out) external;\\r\\n    function remove_liquidity_one_coin(uint256 token_amount, int128 index, uint min_amount) external;\\r\\n}\\r\\n\\r\\n// https://etherscan.io/address/0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f#code\\r\\ninterface ISushiRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function getAmountsOut(\\r\\n        uint amountIn, \\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// https://etherscan.io/address/0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0#code\\r\\ninterface IWSTETH {\\r\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\r\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IVault {\\r\\n    function flashLoan(\\r\\n        IFlashLoanRecipient recipient,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IFlashLoanRecipient {\\r\\n    function receiveFlashLoan(\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        uint256[] memory feeAmounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"},\"Treasury.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { IERC20, IUniswapV2Router01, IWETH } from \\\"./ERC20.sol\\\";\\r\\n\\r\\n\\r\\n/// @notice The treasury is responsible for escrow of TaxToken fee\\u0027s.\\r\\n///         The treasury handles accounting, for what\\u0027s owed to different groups.\\r\\n///         The treasury handles distribution of TaxToken fees to different groups.\\r\\n///         The admin can modify how TaxToken fees are distributed (the TaxDistribution struct).\\r\\ncontract Treasury {\\r\\n \\r\\n    // ---------------\\r\\n    // State Variables\\r\\n    // ---------------\\r\\n\\r\\n    address public taxToken;   /// @dev The token that fees are taken from, and what is held in escrow here.\\r\\n    address public admin;      /// @dev The administrator of accounting and distribution settings.\\r\\n\\r\\n    address public UNIV2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n\\r\\n\\r\\n    /// @notice Handles the internal accounting for how much taxToken is owed to each taxType.\\r\\n    /// @dev    e.g. 10,000 taxToken owed to taxType 0 =\\u003e taxTokenAccruedForTaxType[0] = 10000 * 10**18\\r\\n    ///         taxType 0 =\\u003e Xfer Tax\\r\\n    ///         taxType 1 =\\u003e Buy Tax\\r\\n    ///         taxType 2 =\\u003e Sell Tax\\r\\n    mapping(uint =\\u003e uint) public taxTokenAccruedForTaxType;\\r\\n\\r\\n    mapping(uint =\\u003e TaxDistribution) public taxSettings;   /// @dev Mapping of taxType to TaxDistribution struct.\\r\\n \\r\\n    /// @notice Manages how TaxToken is distributed for a given taxType.\\r\\n    ///         Variables:\\r\\n    ///           walletCount           =\\u003e The number of wallets to distribute fees to.\\r\\n    ///           wallets               =\\u003e The addresses to distribute fees (maps with convertToAsset and percentDistribution)\\r\\n    ///           convertToAsset        =\\u003e The asset to pre-convert taxToken to prior to distribution (if same as taxToken, no conversion executed).\\r\\n    ///           percentDistribution   =\\u003e The percentage of taxToken accrued for taxType to distribute.\\r\\n    struct TaxDistribution {\\r\\n        uint walletCount;\\r\\n        address[] wallets;\\r\\n        address[] convertToAsset;\\r\\n        uint[] percentDistribution;\\r\\n    }\\r\\n\\r\\n\\r\\n    // -----------\\r\\n    // Constructor\\r\\n    // -----------\\r\\n\\r\\n    /// @notice Initializes the Treasury.\\r\\n    /// @param  _admin      The administrator of the contract.\\r\\n    /// @param  _taxToken   The taxToken (ERC-20 asset) which accumulates in this Treasury.\\r\\n    constructor(address _admin, address _taxToken) {\\r\\n        admin = _admin;\\r\\n        taxToken = _taxToken;\\r\\n    }\\r\\n\\r\\n\\r\\n \\r\\n    // ---------\\r\\n    // Modifiers\\r\\n    // ---------\\r\\n\\r\\n    /// @dev    Enforces msg.sender is admin.\\r\\n    modifier isAdmin {\\r\\n        require(msg.sender == admin);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev    Enforces msg.sender is taxToken.\\r\\n    modifier isTaxToken {\\r\\n        require(msg.sender == taxToken);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ---------\\r\\n    // Functions\\r\\n    // ---------\\r\\n\\r\\n    /// @notice Increases _amt of taxToken allocated to _taxType.\\r\\n    /// @dev    Only callable by taxToken.\\r\\n    /// @param  taxType The taxType to allocate more taxToken to for distribution.\\r\\n    /// @param  amt The amount of taxToken going to taxType.\\r\\n    function updateTaxesAccrued(uint taxType, uint amt) isTaxToken public {\\r\\n        taxTokenAccruedForTaxType[taxType] += amt;\\r\\n    }\\r\\n\\r\\n    /// @notice View function for taxes accrued (a.k.a. \\\"claimable\\\") for each tax type, and the sum.\\r\\n    /// @return _taxType0 Taxes accrued (claimable) for taxType0.\\r\\n    /// @return _taxType1 Taxes accrued (claimable) for taxType1.\\r\\n    /// @return _taxType2 Taxes accrued (claimable) for taxType2.\\r\\n    /// @return _sum Taxes accrued (claimable) for all tax types.\\r\\n    function viewTaxesAccrued() public view returns(uint _taxType0, uint _taxType1, uint _taxType2, uint _sum) {\\r\\n        return (\\r\\n            taxTokenAccruedForTaxType[0],\\r\\n            taxTokenAccruedForTaxType[1],\\r\\n            taxTokenAccruedForTaxType[2],\\r\\n            taxTokenAccruedForTaxType[0] + taxTokenAccruedForTaxType[1] + taxTokenAccruedForTaxType[2]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice This function modifies the distribution settings for a given taxType.\\r\\n    /// @dev    Only callable by Admin.\\r\\n    /// @param  taxType The taxType to update settings for.\\r\\n    /// @param  walletCount The number of wallets to distribute across.\\r\\n    /// @param  wallets The address of wallets to distribute fees across.\\r\\n    /// @param  convertToAsset The asset to convert taxToken to, prior to distribution.\\r\\n    /// @param  percentDistribution The percentage (corresponding with wallets) to distribute taxes to of overall amount owed for taxType.\\r\\n    function setTaxDistribution(\\r\\n        uint taxType,\\r\\n        uint walletCount,\\r\\n        address[] calldata wallets,\\r\\n        address[] calldata convertToAsset,\\r\\n        uint[] calldata percentDistribution\\r\\n    ) isAdmin public {\\r\\n\\r\\n        // Pre-check that supplied values have equal lengths.\\r\\n        require(walletCount == wallets.length, \\\"err walletCount length != wallets.length\\\");\\r\\n        require(walletCount == convertToAsset.length, \\\"err walletCount length != convertToAsset.length\\\");\\r\\n        require(walletCount == percentDistribution.length, \\\"err walletCount length != percentDistribution.length\\\");\\r\\n\\r\\n        // Enforce sum(percentDistribution) = 100;\\r\\n        uint sumPercentDistribution;\\r\\n        for(uint i = 0; i \\u003c walletCount; i++) {\\r\\n            sumPercentDistribution += percentDistribution[i];\\r\\n        }\\r\\n        require(sumPercentDistribution == 100, \\\"err sumPercentDistribution != 100\\\");\\r\\n\\r\\n        // Update taxSettings for taxType.\\r\\n        taxSettings[taxType] = TaxDistribution(\\r\\n            walletCount,\\r\\n            wallets,\\r\\n            convertToAsset,\\r\\n            percentDistribution\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Distributes taxes for given taxType.\\r\\n    /// @param  taxType Chosen taxType to distribute.\\r\\n    /// @return amountToDistribute TaxToken amount distributed.\\r\\n    function distributeTaxes(uint taxType) public returns(uint amountToDistribute) {\\r\\n        \\r\\n        amountToDistribute = taxTokenAccruedForTaxType[taxType];\\r\\n\\r\\n        if (amountToDistribute \\u003e 0) {\\r\\n\\r\\n            taxTokenAccruedForTaxType[taxType] = 0;\\r\\n            uint walletCount = taxSettings[taxType].walletCount;\\r\\n\\r\\n            for (uint i = 0; i \\u003c walletCount; i++) {\\r\\n                uint amountForWallet = (amountToDistribute * taxSettings[taxType].percentDistribution[i]) / 100;\\r\\n                address walletToAirdrop = taxSettings[taxType].wallets[i];\\r\\n\\r\\n                if (taxSettings[taxType].convertToAsset[i] == taxToken) {\\r\\n                    IERC20(taxToken).transfer(walletToAirdrop, amountForWallet);\\r\\n                }\\r\\n                else {\\r\\n                    IERC20(address(taxToken)).approve(address(UNIV2_ROUTER), amountForWallet);\\r\\n\\r\\n                    address[] memory path_uni_v2 = new address[](2);\\r\\n\\r\\n                    path_uni_v2[0] = address(taxToken);\\r\\n                    path_uni_v2[1] = taxSettings[taxType].convertToAsset[i];\\r\\n\\r\\n                    IUniswapV2Router01(UNIV2_ROUTER).swapExactTokensForTokens(\\r\\n                        amountForWallet,           \\r\\n                        0,\\r\\n                        path_uni_v2,\\r\\n                        walletToAirdrop,\\r\\n                        block.timestamp + 30000\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Distributes taxes for all taxTypes.\\r\\n    function distributeAllTaxes() public {\\r\\n        distributeTaxes(0);\\r\\n        distributeTaxes(1);\\r\\n        distributeTaxes(2);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Helper view function for taxSettings.\\r\\n    function viewTaxSettings(uint taxType) public view returns(uint256, address[] memory, address[] memory, uint[] memory) {\\r\\n        return (\\r\\n            taxSettings[taxType].walletCount,\\r\\n            taxSettings[taxType].wallets,\\r\\n            taxSettings[taxType].convertToAsset,\\r\\n            taxSettings[taxType].percentDistribution\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw a non-taxToken from the treasury.\\r\\n    /// @dev    Reverts if token == taxtoken.\\r\\n    /// @dev    Only callable by Admin.\\r\\n    /// @param  token The token to withdraw from the treasury.\\r\\n    function safeWithdraw(address token) public isAdmin {\\r\\n        require(token != taxToken, \\\"err cannot withdraw native tokens from this contract\\\");\\r\\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /// @notice Change the admin for the treasury.\\r\\n    /// @dev    Only callable by Admin.\\r\\n    /// @param  _admin New admin address.\\r\\n    function updateAdmin(address _admin) public isAdmin {\\r\\n        admin = _admin;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNIV2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAllTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxType\",\"type\":\"uint256\"}],\"name\":\"distributeTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walletCount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"convertToAsset\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentDistribution\",\"type\":\"uint256[]\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taxSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"walletCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taxTokenAccruedForTaxType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"updateTaxesAccrued\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxType\",\"type\":\"uint256\"}],\"name\":\"viewTaxSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTaxesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxType0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxType1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxType2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Treasury", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007937c166b9844a712434c2ce7e49a6ab338c836f0000000000000000000000008cabddcf54b912be02a51d25a4b5fda733e6441b", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ced56535e6e0475c66f2d775412ff604cd716484250f8396d48e6246e8490c2d"}]}