{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GenArtPaymentSplitterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./GenArtAccess.sol\\\";\\nimport \\\"./IGenArtPaymentSplitterV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract GenArtPaymentSplitterV2 is GenArtAccess, IGenArtPaymentSplitterV2 {\\n    struct Payment {\\n        address[] payees;\\n        uint256[] shares;\\n    }\\n\\n    event IncomingPayment(\\n        address collection,\\n        uint256 paymentType,\\n        address payee,\\n        uint256 amount\\n    );\\n\\n    mapping(address => uint256) public _balances;\\n    mapping(address => uint256) public _wethBalances;\\n    mapping(address => Payment) private _payments;\\n    mapping(address => Payment) private _paymentsRoyalties;\\n    address public _wethAddress;\\n    bool public _destoryed = false;\\n\\n    constructor(address wethAddress_) GenArtAccess() {\\n        _wethAddress = wethAddress_;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner, admin or collection contract.\\n     */\\n    modifier onlyCollectionContractOrAdmin(bool isCollection) {\\n        address sender = _msgSender();\\n        require(\\n            isCollection || (owner() == sender) || admins[sender],\\n            \\\"GenArtAccess: caller is not the owner nor admin\\\"\\n        );\\n        _;\\n    }\\n\\n    function addCollectionPayment(\\n        address collection,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) public override onlyAdmin {\\n        require(!_destoryed, \\\"GenArtPaymentSplitterV2: contract is destroyed\\\");\\n        require(\\n            shares.length > 0 && shares.length == payees.length,\\n            \\\"GenArtPaymentSplitterV2: invalid arguments\\\"\\n        );\\n\\n        _payments[collection] = Payment(payees, shares);\\n    }\\n\\n    function addCollectionPaymentRoyalty(\\n        address collection,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) public override onlyAdmin {\\n        require(!_destoryed, \\\"GenArtPaymentSplitterV2: contract is destroyed\\\");\\n        require(\\n            shares.length > 0 && shares.length == payees.length,\\n            \\\"GenArtPaymentSplitterV2: invalid arguments\\\"\\n        );\\n        _paymentsRoyalties[collection] = Payment(payees, shares);\\n    }\\n\\n    function sanityCheck(address collection, uint8 paymentType) internal view {\\n        require(!_destoryed, \\\"GenArtPaymentSplitterV2: contract is destroyed\\\");\\n        Payment memory payment = paymentType == 0\\n            ? _payments[collection]\\n            : _paymentsRoyalties[collection];\\n        require(\\n            payment.payees.length > 0,\\n            \\\"GenArtPaymentSplitterV2: payment not found for collection\\\"\\n        );\\n    }\\n\\n    function splitPayment(address collection)\\n        public\\n        payable\\n        override\\n        onlyCollectionContractOrAdmin(_payments[msg.sender].payees.length > 0)\\n    {\\n        uint256 totalShares = getTotalSharesOfCollection(collection, 0);\\n        for (uint8 i; i < _payments[collection].payees.length; i++) {\\n            address payee = _payments[collection].payees[i];\\n            uint256 ethAmount = (msg.value * _payments[collection].shares[i]) /\\n                totalShares;\\n            unchecked {\\n                _balances[payee] += ethAmount;\\n            }\\n            emit IncomingPayment(collection, 0, payee, ethAmount);\\n        }\\n    }\\n\\n    function splitPaymentRoyalty(address collection)\\n        public\\n        payable\\n        override\\n        onlyCollectionContractOrAdmin(\\n            _paymentsRoyalties[msg.sender].payees.length > 0\\n        )\\n    {\\n        uint256 totalShares = getTotalSharesOfCollection(collection, 1);\\n        for (uint8 i; i < _paymentsRoyalties[collection].payees.length; i++) {\\n            address payee = _paymentsRoyalties[collection].payees[i];\\n            uint256 ethAmount = (msg.value *\\n                _paymentsRoyalties[collection].shares[i]) / totalShares;\\n            unchecked {\\n                _balances[payee] += ethAmount;\\n            }\\n            emit IncomingPayment(collection, 1, payee, ethAmount);\\n        }\\n    }\\n\\n    function splitPaymentRoyaltyWETH(address collection, uint256 wethAmount)\\n        public\\n        payable\\n        override\\n        onlyCollectionContractOrAdmin(\\n            _paymentsRoyalties[msg.sender].payees.length > 0\\n        )\\n    {\\n        uint256 totalShares = getTotalSharesOfCollection(collection, 1);\\n        IERC20(_wethAddress).transferFrom(\\n            collection,\\n            address(this),\\n            wethAmount\\n        );\\n        for (uint8 i; i < _paymentsRoyalties[collection].payees.length; i++) {\\n            address payee = _paymentsRoyalties[collection].payees[i];\\n            uint256 wethAmountShare = (wethAmount *\\n                _paymentsRoyalties[collection].shares[i]) / totalShares;\\n            unchecked {\\n                _wethBalances[payee] += wethAmountShare;\\n            }\\n            emit IncomingPayment(collection, 1, payee, wethAmountShare);\\n        }\\n    }\\n\\n    /**\\n     *@dev Get total shares of collection\\n     * - `paymentType` pass \\\"0\\\" for _payments an \\\"1\\\" for _paymentsRoyalties\\n     */\\n    function getTotalSharesOfCollection(address collection, uint8 paymentType)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        sanityCheck(collection, paymentType);\\n        Payment memory payment = paymentType == 0\\n            ? _payments[collection]\\n            : _paymentsRoyalties[collection];\\n        uint256 totalShares;\\n        for (uint8 i; i < payment.shares.length; i++) {\\n            unchecked {\\n                totalShares += payment.shares[i];\\n            }\\n        }\\n\\n        return totalShares;\\n    }\\n\\n    function release(address account) public override {\\n        require(!_destoryed, \\\"GenArtPaymentSplitterV2: contract is destroyed\\\");\\n        uint256 amount = _balances[account];\\n        uint256 wethAmount = _wethBalances[account];\\n        require(\\n            amount > 0 || wethAmount > 0,\\n            \\\"GenArtPaymentSplitterV2: no funds to release\\\"\\n        );\\n        if (amount > 0) {\\n            _balances[account] = 0;\\n            payable(account).transfer(amount);\\n        }\\n        if (wethAmount > 0) {\\n            _wethBalances[account] = 0;\\n            IERC20(_wethAddress).transfer(account, wethAmount);\\n        }\\n    }\\n\\n    function updatePayee(\\n        address collection,\\n        uint8 paymentType,\\n        uint256 payeeIndex,\\n        address newPayee\\n    ) public override {\\n        sanityCheck(collection, paymentType);\\n        Payment storage payment = paymentType == 0\\n            ? _payments[collection]\\n            : _paymentsRoyalties[collection];\\n        address oldPayee = payment.payees[payeeIndex];\\n        require(\\n            oldPayee == _msgSender(),\\n            \\\"GenArtPaymentSplitterV2: sender is not current payee\\\"\\n        );\\n        payment.payees[payeeIndex] = newPayee;\\n    }\\n\\n    function getBalanceForAccount(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(!_destoryed, \\\"GenArtPaymentSplitterV2: contract is destroyed\\\");\\n        return _balances[account];\\n    }\\n\\n    function emergencyWithdraw() public onlyOwner {\\n        _destoryed = true;\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    receive() external payable {\\n        payable(owner()).transfer(msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GenArtAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev This implements access control for owner and admins\\n */\\nabstract contract GenArtAccess is Ownable {\\n    mapping(address => bool) public admins;\\n    address public genartAdmin;\\n\\n    constructor() Ownable() {\\n        genartAdmin = _msgSender();\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyAdmin() {\\n        address sender = _msgSender();\\n        require(\\n            owner() == sender || admins[sender],\\n            \\\"GenArtAccess: caller is not the owner nor admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the GEN.ART admin.\\n     */\\n    modifier onlyGenArtAdmin() {\\n        address sender = _msgSender();\\n        require(\\n            genartAdmin == sender,\\n            \\\"GenArtAccess: caller is not genart admin\\\"\\n        );\\n        _;\\n    }\\n\\n    function setGenArtAdmin(address admin) public onlyGenArtAdmin {\\n        genartAdmin = admin;\\n    }\\n\\n    function setAdminAccess(address admin, bool access) public onlyGenArtAdmin {\\n        admins[admin] = access;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IGenArtPaymentSplitterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtPaymentSplitterV2 {\\n    function addCollectionPayment(\\n        address collection,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) external;\\n\\n    function addCollectionPaymentRoyalty(\\n        address collection,\\n        address[] memory payees,\\n        uint256[] memory shares\\n    ) external;\\n\\n    function splitPayment(address collection) external payable;\\n\\n    function splitPaymentRoyalty(address collection) external payable;\\n\\n    function splitPaymentRoyaltyWETH(address collection, uint256 wethAmount)\\n        external\\n        payable;\\n\\n    function getTotalSharesOfCollection(address collection, uint8 _payment)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function release(address account) external;\\n\\n    function updatePayee(\\n        address collection,\\n        uint8 paymentType,\\n        uint256 payeeIndex,\\n        address newPayee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncomingPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destoryed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_wethBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"addCollectionPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"addCollectionPaymentRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genartAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"name\":\"getTotalSharesOfCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setGenArtAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"splitPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"splitPaymentRoyalty\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"splitPaymentRoyaltyWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"paymentType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payeeIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newPayee\",\"type\":\"address\"}],\"name\":\"updatePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GenArtPaymentSplitterV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}