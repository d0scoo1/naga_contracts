{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AlphaKidsSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// warrencheng.eth\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface NFT {\\n    function mint(address to, uint256 quantity) external;\\n}\\nenum SaleStage {\\n    None,\\n    WhiteList,\\n    Auction\\n}\\n\\ncontract AlphaKidsSale is Ownable, ReentrancyGuard {\\n    using MerkleProof for bytes32[];\\n\\n    uint256 public whiteListSaleStartTime = 1649988000; // 4/15 10am\\n    uint256 public whiteListSaleEndTime = 1650078000; // 4/16 11am\\n    uint256 public whiteListSaleMintPrice = 0.26 ether;\\n    uint256 public auctionStartTime = 1650087000; // 4/16 1.30pm\\n    uint256 public auctionEndTime = 1650094200; // 4/16 3.30pm\\n    uint256 public auctionTimeStep = 10 minutes;\\n    uint256 public totalAuctionTimeSteps = 2;\\n    uint256 public auctionStartPrice = 0.36 ether;\\n    uint256 public auctionEndPrice = 0.30 ether;\\n    uint256 public auctionPriceStep = 0.03 ether;\\n    uint256 public auctionMaxPurchaseQuantityPerTx = 1;\\n    uint256 public remainingCount = 369;\\n\\n    address public alphaKids;\\n    bytes32 public whiteListMerkleRoot;\\n    mapping(address => bool) public whiteListPurchased;\\n\\n    constructor(address _alphaKids) {\\n        alphaKids = _alphaKids;\\n    }\\n\\n    /* ************** */\\n    /* USER FUNCTIONS */\\n    /* ************** */\\n    function getAuctionPrice() public view returns (uint256) {\\n        require(auctionStartTime != 0, \\\"auctionStartTime not set\\\");\\n        require(auctionEndTime != 0, \\\"auctionEndTime not set\\\");\\n        if (block.timestamp < auctionStartTime) {\\n            return auctionStartPrice;\\n        }\\n        uint256 timeSteps = (block.timestamp - auctionStartTime) /\\n            auctionTimeStep;\\n        if (timeSteps > totalAuctionTimeSteps) {\\n            timeSteps = totalAuctionTimeSteps;\\n        }\\n        uint256 discount = timeSteps * auctionPriceStep;\\n        return\\n            auctionStartPrice > discount\\n                ? auctionStartPrice - discount\\n                : auctionEndPrice;\\n    }\\n\\n    function getCurrentActiveSaleStage() public view returns (SaleStage) {\\n        bool whiteListSaleIsActive = (block.timestamp >\\n            whiteListSaleStartTime) && (block.timestamp < whiteListSaleEndTime);\\n        if (whiteListSaleIsActive) {\\n            return SaleStage.WhiteList;\\n        }\\n        bool auctionIsActive = (block.timestamp > auctionStartTime) &&\\n            (block.timestamp < auctionEndTime);\\n        if (auctionIsActive) {\\n            return SaleStage.Auction;\\n        }\\n        return SaleStage.None;\\n    }\\n\\n    function mint(bytes32[] calldata proof, uint256 numberOfTokens)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(tx.origin == msg.sender, \\\"contract not allowed\\\");\\n        SaleStage currentActiveSaleStage = getCurrentActiveSaleStage();\\n        require(\\n            currentActiveSaleStage != SaleStage.None,\\n            \\\"no active sale right now\\\"\\n        );\\n        require(numberOfTokens > 0, \\\"numberOfTokens cannot be 0\\\");\\n        if (currentActiveSaleStage == SaleStage.WhiteList) {\\n            _mintWhiteList(proof, numberOfTokens);\\n        } else if (currentActiveSaleStage == SaleStage.Auction) {\\n            _mintAuction(numberOfTokens);\\n        }\\n    }\\n\\n    /* ****************** */\\n    /* INTERNAL FUNCTIONS */\\n    /* ****************** */\\n\\n    function _mintWhiteList(bytes32[] calldata proof, uint256 numberOfTokens)\\n        internal\\n    {\\n        require(\\n            msg.value == whiteListSaleMintPrice * numberOfTokens,\\n            \\\"sent ether value incorrect\\\"\\n        );\\n        require(!whiteListPurchased[msg.sender], \\\"whiteListPurchased already\\\");\\n        require(\\n            proof.verify(\\n                whiteListMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender, numberOfTokens))\\n            ),\\n            \\\"failed to verify first WL merkle root\\\"\\n        );\\n        require(numberOfTokens <= remainingCount, \\\"whiteList sold out\\\");\\n        whiteListPurchased[msg.sender] = true;\\n        remainingCount -= 1;\\n        NFT(alphaKids).mint(msg.sender, numberOfTokens);\\n    }\\n\\n    function _mintAuction(uint256 numberOfTokens) internal {\\n        require(\\n            msg.value >= getAuctionPrice() * numberOfTokens,\\n            \\\"sent ether value incorrect\\\"\\n        );\\n        require(numberOfTokens <= remainingCount, \\\"auction sold out\\\");\\n        require(\\n            numberOfTokens <= auctionMaxPurchaseQuantityPerTx,\\n            \\\"numberOfTokens exceeds auctionMaxPurchaseQuantityPerTx\\\"\\n        );\\n\\n        remainingCount -= 1;\\n        NFT(alphaKids).mint(msg.sender, numberOfTokens);\\n    }\\n\\n    /* *************** */\\n    /* ADMIN FUNCTIONS */\\n    /* *************** */\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        whiteListMerkleRoot = _merkleRoot;\\n    }\\n\\n    function setSaleData(\\n        uint256 _whiteListSaleStartTime,\\n        uint256 _whiteListSaleEndTime,\\n        uint256 _whiteListSaleMintPrice,\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime,\\n        uint256 _auctionTimeStep,\\n        uint256 _totalAuctionTimeSteps,\\n        uint256 _auctionStartPrice,\\n        uint256 _auctionEndPrice,\\n        uint256 _auctionPriceStep,\\n        uint256 _auctionMaxPurchaseQuantityPerTx,\\n        uint256 _remainingCount\\n    ) external onlyOwner {\\n        whiteListSaleStartTime = _whiteListSaleStartTime;\\n        whiteListSaleEndTime = _whiteListSaleEndTime;\\n        whiteListSaleMintPrice = _whiteListSaleMintPrice;\\n        auctionStartTime = _auctionStartTime;\\n        auctionEndTime = _auctionEndTime;\\n        auctionTimeStep = _auctionTimeStep;\\n        totalAuctionTimeSteps = _totalAuctionTimeSteps;\\n        auctionStartPrice = _auctionStartPrice;\\n        auctionEndPrice = _auctionEndPrice;\\n        auctionPriceStep = _auctionPriceStep;\\n        auctionMaxPurchaseQuantityPerTx = _auctionMaxPurchaseQuantityPerTx;\\n        remainingCount = _remainingCount;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool sent, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"sent value failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alphaKids\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"alphaKids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionMaxPurchaseQuantityPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionPriceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionTimeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentActiveSaleStage\",\"outputs\":[{\"internalType\":\"enum SaleStage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whiteListSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whiteListSaleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whiteListSaleMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionTimeStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAuctionTimeSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionPriceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionMaxPurchaseQuantityPerTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingCount\",\"type\":\"uint256\"}],\"name\":\"setSaleData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctionTimeSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListSaleMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlphaKidsSale", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a642d418430a95daf3dabdd3380bb346011e523b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}