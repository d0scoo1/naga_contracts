{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Auction.sol\": {\r\n      \"content\": \"pragma solidity =0.8.7;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport './interfaces/IFactory.sol';\\nimport './interfaces/IBasket.sol';\\nimport \\\"./interfaces/IAuction.sol\\\";\\n\\ncontract Auction is IAuction, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant BASE = 1e18;\\n    uint256 private constant ONE_DAY = 1 days;\\n    \\n    bool public override auctionOngoing;\\n    uint256 public override auctionStart;\\n    bool public override hasBonded;\\n    uint256 public override bondAmount;\\n    uint256 public override bondTimestamp;\\n    uint256 public override bondBlock;\\n\\n    IBasket public override basket;\\n    IFactory public override factory;\\n    address public override auctionBonder;\\n\\n    Bounty[] private _bounties;\\n\\n    bool public override initialized;\\n\\n    modifier onlyBasket() {\\n        require(msg.sender == address(basket));\\n        _;\\n    }\\n\\n    function startAuction() onlyBasket public override {\\n        require(auctionOngoing == false);\\n\\n        auctionOngoing = true;\\n        auctionStart = block.number;\\n\\n        emit AuctionStarted();\\n    }\\n\\n    function killAuction() onlyBasket public override {\\n        auctionOngoing = false;\\n    }\\n\\n    function endAuction() public override {\\n        require(msg.sender == basket.publisher());\\n        require(auctionOngoing);\\n        require(!hasBonded);\\n\\n        auctionOngoing = false;\\n    }\\n\\n    function initialize(address basket_, address factory_) public override {\\n        require(address(factory) == address(0));\\n        require(!initialized);\\n\\n        basket = IBasket(basket_);\\n        factory = IFactory(factory_);\\n        initialized = true;\\n    }\\n\\n    function bondForRebalance() public override {\\n        require(auctionOngoing);\\n        require(!hasBonded);\\n\\n        bondTimestamp = block.timestamp;\\n        bondBlock = block.number;\\n\\n        uint256 newRatio = calcIbRatio(bondBlock);\\n        (,, uint256 minIbRatio) = basket.getPendingWeights();\\n        require(newRatio >= minIbRatio);\\n\\n        IERC20 basketToken = IERC20(address(basket));\\n        bondAmount = basketToken.totalSupply() / factory.bondPercentDiv();\\n        basketToken.safeTransferFrom(msg.sender, address(this), bondAmount);\\n        hasBonded = true;\\n        auctionBonder = msg.sender;\\n\\n        emit Bonded(msg.sender, bondAmount);\\n    }\\n\\n    function calcIbRatio(uint256 blockNum) public view override returns (uint256) {\\n        uint256 a = factory.auctionMultiplier() * basket.ibRatio();\\n        uint256 b = (blockNum - auctionStart) * BASE / factory.auctionDecrement();\\n        uint256 newRatio = a - b;\\n        return newRatio;\\n    }\\n\\n    function getCurrentNewIbRatio() public view override returns(uint256) {\\n        return calcIbRatio(block.number);\\n    }\\n\\n    function settleAuctionWithBond(\\n        uint256[] memory bountyIDs,\\n        address[] memory inputTokens,\\n        uint256[] memory inputAmounts,\\n        address[] memory outputTokens,\\n        uint256[] memory outputAmounts\\n    ) public nonReentrant override {\\n        require(auctionOngoing);\\n        require(hasBonded);\\n        require(bondTimestamp + ONE_DAY > block.timestamp);\\n        require(msg.sender == auctionBonder);\\n        require(inputTokens.length == inputAmounts.length);\\n        require(outputTokens.length == outputAmounts.length);\\n\\n       uint256 newIbRatio = calcIbRatio(bondBlock);\\n\\n       _settleAuction(bountyIDs, inputTokens, inputAmounts, outputTokens, outputAmounts, newIbRatio);\\n\\n        IERC20 basketAsERC20 = IERC20(address(basket));\\n        basketAsERC20.safeTransfer(msg.sender, bondAmount);\\n    }\\n    \\n    function settleAuctionWithoutBond(\\n        uint256[] memory bountyIDs,\\n        address[] memory inputTokens,\\n        uint256[] memory inputAmounts,\\n        address[] memory outputTokens,\\n        uint256[] memory outputAmounts\\n    ) public nonReentrant override {\\n        require(auctionOngoing);\\n        require(!hasBonded);\\n        require(inputTokens.length == inputAmounts.length);\\n        require(outputTokens.length == outputAmounts.length);\\n\\n       uint256 newIbRatio = getCurrentNewIbRatio();\\n\\n       _settleAuction(bountyIDs, inputTokens, inputAmounts, outputTokens, outputAmounts, newIbRatio);\\n    }\\n      function _settleAuction(\\n        uint256[] memory bountyIDs,\\n        address[] memory inputTokens,\\n        uint256[] memory inputAmounts,\\n        address[] memory outputTokens,\\n        uint256[] memory outputAmounts,\\n        uint256 newIbRatio\\n    ) internal {\\n        for (uint256 i = 0; i < inputTokens.length; i++) {\\n            IERC20(inputTokens[i]).safeTransferFrom(msg.sender, address(basket), inputAmounts[i]);\\n        }\\n\\n        for (uint256 i = 0; i < outputTokens.length; i++) {\\n            IERC20(outputTokens[i]).safeTransferFrom(address(basket), msg.sender, outputAmounts[i]);\\n        }\\n\\n        (address[] memory pendingTokens, uint256[] memory pendingWeights, uint256 minIbRatio) = basket.getPendingWeights();\\n        require(newIbRatio >= minIbRatio);\\n        IERC20 basketAsERC20 = IERC20(address(basket));\\n\\n        for (uint256 i = 0; i < pendingWeights.length; i++) {\\n            uint256 tokensNeeded = basketAsERC20.totalSupply() * pendingWeights[i] * newIbRatio / BASE / BASE;\\n            require(IERC20(pendingTokens[i]).balanceOf(address(basket)) >= tokensNeeded);\\n        }\\n\\n        basket.setNewWeights();\\n        basket.updateIBRatio(newIbRatio);\\n        auctionOngoing = false;\\n        hasBonded = false;\\n\\n        withdrawBounty(bountyIDs);\\n\\n        emit AuctionSettled(msg.sender);\\n    }\\n\\n    function bondBurn() external override {\\n        require(auctionOngoing);\\n        require(hasBonded);\\n        require(bondTimestamp + ONE_DAY <= block.timestamp);\\n\\n        basket.auctionBurn(bondAmount);\\n        hasBonded = false;\\n        auctionOngoing = false;\\n        basket.deleteNewIndex();\\n\\n        emit BondBurned(msg.sender, auctionBonder, bondAmount);\\n\\n        auctionBonder = address(0);\\n    }\\n\\n    function addBounty(IERC20 token, uint256 amount) public nonReentrant override returns (uint256) {\\n        // add bounty to basket\\n        _bounties.push(Bounty({\\n            token: address(token),\\n            amount: amount,\\n            active: true\\n        }));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 id = _bounties.length - 1;\\n        emit BountyAdded(token, amount, id);\\n        return id;\\n    }\\n\\n    function withdrawBounty(uint256[] memory bountyIds) internal {\\n        // withdraw bounties\\n        for (uint256 i = 0; i < bountyIds.length; i++) {\\n            Bounty storage bounty = _bounties[bountyIds[i]];\\n            require(bounty.active);\\n            bounty.active = false;\\n\\n            IERC20(bounty.token).safeTransfer(msg.sender, bounty.amount);\\n\\n            emit BountyClaimed(msg.sender, bounty.token, bounty.amount, bountyIds[i]);\\n        }\\n    }\\n }\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"pragma solidity =0.8.7;\\n\\nimport \\\"./IBasket.sol\\\";\\n\\ninterface IFactory {\\n    struct Proposal {\\n        uint256 licenseFee;\\n        string tokenName;\\n        string tokenSymbol;\\n        address proposer;\\n        address[] tokens;\\n        uint256[] weights;\\n        address basket;\\n        uint256 maxSupply;\\n    }\\n\\n    struct PendingChange{\\n        uint256 change;\\n        uint256 timestamp;\\n    }\\n\\n\\n    function proposal(uint256) external view returns (Proposal memory);\\n    function proposals(uint256[] memory _ids) external view returns (Proposal[] memory); \\n    function proposalsLength() external view returns (uint256);\\n    function minLicenseFee() external view returns (uint256);\\n    function auctionDecrement() external view returns (uint256);\\n    function auctionMultiplier() external view returns (uint256);\\n    function bondPercentDiv() external view returns (uint256);\\n    function ownerSplit() external view returns (uint256);\\n    function auctionImpl() external view returns (IAuction);\\n    function basketImpl() external view returns (IBasket);\\n    function getProposalWeights(uint256 id) external view returns (address[] memory, uint256[] memory);\\n\\n    function createBasket(uint256) external returns (IBasket);\\n    function proposeBasketLicense(uint256, string calldata, string calldata, address[] memory tokens, uint256[] memory weights, uint256) external returns (uint256);\\n    function setMinLicenseFee(uint256) external;\\n    function setAuctionDecrement(uint256) external;\\n    function setAuctionMultiplier(uint256) external;\\n    function setBondPercentDiv(uint256) external;\\n    function setOwnerSplit(uint256) external;\\n\\n    event BasketCreated(address indexed basket, uint256 id);\\n    event BasketLicenseProposed(address indexed proposer, string tokenName, uint256 indexed id);\\n\\n    event NewMinLicenseFeeSubmitted(uint256);\\n    event ChangedMinLicenseFee(uint256);\\n    event NewAuctionDecrementSubmitted(uint256);\\n    event ChangedAuctionDecrement(uint256);\\n    event NewAuctionMultiplierSubmitted(uint256);\\n    event ChangedAuctionMultipler(uint256);\\n    event NewBondPercentDivSubmitted(uint256);\\n    event ChangedBondPercentDiv(uint256);\\n    event NewOwnerSplitSubmitted(uint256);\\n    event ChangedOwnerSplit(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBasket.sol\": {\r\n      \"content\": \"pragma solidity =0.8.7;\\n\\nimport \\\"./IAuction.sol\\\";\\n\\ninterface IBasket {\\n    struct PendingPublisher {\\n        address publisher;\\n        uint256 timestamp;\\n    }\\n\\n    struct PendingLicenseFee {\\n        uint256 licenseFee;\\n        uint256 timestamp;\\n    }\\n\\n    struct PendingMaxSupply {\\n        uint256 maxSupply;\\n        uint256 timestamp;\\n    }\\n\\n    struct PendingWeights {\\n        address[] tokens;\\n        uint256[] weights;\\n        uint256 timestamp;\\n        bool pending;\\n        uint256 minIbRatio;\\n    }\\n\\n    function initialize(IFactory.Proposal memory, IAuction) external;\\n    function mint(uint256) external;\\n    function mintTo(uint256, address) external;\\n    function burn(uint256) external;\\n    function changePublisher(address) external;\\n    function changeLicenseFee(uint256) external;\\n    function setNewMaxSupply(uint256) external;\\n    function publishNewIndex(address[] calldata, uint256[] calldata, uint256) external;\\n    function deleteNewIndex() external;\\n    function auctionBurn(uint256) external;\\n    function updateIBRatio(uint256) external returns (uint256);\\n    function setNewWeights() external;\\n    function validateWeights(address[] memory, uint256[] memory) external pure;\\n    function initialized() external view returns (bool);\\n\\n    function ibRatio() external view returns (uint256);\\n    function getPendingWeights() external view returns (address[] memory, uint256[] memory, uint256);\\n    function factory() external view returns (IFactory);\\n    function auction() external view returns (IAuction);\\n    function lastFee() external view returns (uint256);\\n    function publisher() external view returns (address);\\n\\n    event Minted(address indexed _to, uint256 _amount);\\n    event Burned(address indexed _from, uint256 _amount);\\n    event ChangedPublisher(address indexed _newPublisher);\\n    event ChangedLicenseFee(uint256 _newLicenseFee);\\n    event NewPublisherSubmitted(address indexed _newPublisher);\\n    event NewLicenseFeeSubmitted(uint256 _newLicenseFee);\\n    event NewIndexSubmitted();\\n    event PublishedNewIndex(address _publisher);\\n    event DeletedNewIndex(address _sender);\\n    event WeightsSet();\\n    event NewIBRatio(uint256);\\n    event NewMaxSupplySubmitted(uint256 _newMaxSupply);\\n    event ChangedMaxSupply(uint256 _newMaxSupply);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"pragma solidity =0.8.7;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IBasket.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IAuction {\\n    struct Bounty {\\n        address token;\\n        uint256 amount;\\n        bool active;\\n    }\\n\\n    function startAuction() external;\\n    function bondForRebalance() external;\\n    function settleAuctionWithBond(\\n        uint256[] calldata,\\n        address[] calldata,\\n        uint256[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external;\\n    function settleAuctionWithoutBond(\\n        uint256[] calldata,\\n        address[] calldata,\\n        uint256[] calldata,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) external;\\n    function bondBurn() external;\\n    function killAuction() external;\\n    function endAuction() external;\\n    function addBounty(IERC20, uint256) external returns (uint256);\\n    function initialize(address, address) external;\\n    function initialized() external view returns (bool);\\n    function calcIbRatio(uint256 blockNum) external view returns (uint256);\\n    function getCurrentNewIbRatio() external view returns(uint256);\\n\\n    function auctionOngoing() external view returns (bool);\\n    function auctionStart() external view returns (uint256);\\n    function hasBonded() external view returns (bool);\\n    function bondAmount() external view returns (uint256);\\n    function bondTimestamp() external view returns (uint256);\\n    function bondBlock() external view returns (uint256);\\n\\n    function basket() external view returns (IBasket);\\n    function factory() external view returns (IFactory);\\n    function auctionBonder() external view returns (address);\\n\\n    event AuctionStarted();\\n    event Bonded(address _bonder, uint256 _amount);\\n    event AuctionSettled(address _settler);\\n    event BondBurned(address _burned, address _burnee, uint256 _amount);\\n    event BountyAdded(IERC20 _token, uint256 _amount, uint256 _id);\\n    event BountyClaimed(address _claimer, address _token, uint256 _amount, uint256 _id);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_settler\",\"type\":\"address\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_burned\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_burnee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BondBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bonder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Bonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"BountyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"BountyClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionBonder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionOngoing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basket\",\"outputs\":[{\"internalType\":\"contract IBasket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondForRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"calcIbRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentNewIbRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBonded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"basket_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bountyIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputAmounts\",\"type\":\"uint256[]\"}],\"name\":\"settleAuctionWithBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bountyIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"outputAmounts\",\"type\":\"uint256[]\"}],\"name\":\"settleAuctionWithoutBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Auction", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}