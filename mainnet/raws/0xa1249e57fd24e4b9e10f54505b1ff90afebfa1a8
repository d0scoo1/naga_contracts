{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.7;\r\n\r\ncontract SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function addition(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return subtract(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function subtract(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function multiply(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function divide(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divide(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function divide(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\ncontract SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function multiply(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function divide(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function subtract(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function addition(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\nReflexer PI Controller License 1.0\r\n\r\nDefinitions\r\n\r\nPrimary License: This license agreement\r\nSecondary License: GNU General Public License v2.0 or later\r\nEffective Date of Secondary License: May 5, 2023\r\n\r\nLicensed Software:\r\n\r\nSoftware License Grant: Subject to and dependent upon your adherence to the terms and conditions of this Primary License, and subject to explicit approval by Reflexer, Inc., Reflexer, Inc., hereby grants you the right to copy, modify or otherwise create derivative works, redistribute, and use the Licensed Software solely for internal testing and development, and solely until the Effective Date of the Secondary License.  You may not, and you agree you will not, use the Licensed Software outside the scope of the limited license grant in this Primary License.\r\n\r\nYou agree you will not (i) use the Licensed Software for any commercial purpose, and (ii) deploy the Licensed Software to a blockchain system other than as a noncommercial deployment to a testnet in which tokens or transactions could not reasonably be expected to have or develop commercial value.You agree to be bound by the terms and conditions of this Primary License until the Effective Date of the Secondary License, at which time the Primary License will expire and be replaced by the Secondary License. You Agree that as of the Effective Date of the Secondary License, you will be bound by the terms and conditions of the Secondary License.\r\n\r\nYou understand and agree that any violation of the terms and conditions of this License will automatically terminate your rights under this License for the current and all other versions of the Licensed Software.\r\n\r\nYou understand and agree that any use of the Licensed Software outside the boundaries of the limited licensed granted in this Primary License renders the license granted in this Primary License null and void as of the date you first used the Licensed Software in any way (void ab initio).You understand and agree that you may purchase a commercial license to use a version of the Licensed Software under the terms and conditions set by Reflexer, Inc.  You understand and agree that you will display an unmodified copy of this Primary License with each Licensed Software, and any derivative work of the Licensed Software.\r\n\r\nTO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED SOFTWARE IS PROVIDED ON AN \u201cAS IS\u201d BASIS. REFLEXER, INC HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE.\r\n\r\nYou understand and agree that all copies of the Licensed Software, and all derivative works thereof, are each subject to the terms and conditions of this License. Notwithstanding the foregoing, You hereby grant to Reflexer, Inc. a fully paid-up, worldwide, fully sublicensable license to use,for any lawful purpose, any such derivative work made by or for You, now or in the future. You agree that you will, at the request of Reflexer, Inc., provide Reflexer, Inc. with the complete source code to such derivative work.\r\n\r\nCopyright \u00a9 2021 Reflexer Inc. All Rights Reserved\r\n**/\r\n\r\ncontract PIScaledPerSecondCalculator is SafeMath, SignedSafeMath {\r\n    // --- Authorities ---\r\n    mapping (address => uint) public authorities;\r\n    function addAuthority(address account) external isAuthority { authorities[account] = 1; }\r\n    function removeAuthority(address account) external isAuthority { authorities[account] = 0; }\r\n    modifier isAuthority {\r\n        require(authorities[msg.sender] == 1, \"PIScaledPerSecondCalculator/not-an-authority\");\r\n        _;\r\n    }\r\n\r\n    // --- Readers ---\r\n    mapping (address => uint) public readers;\r\n    function addReader(address account) external isAuthority { readers[account] = 1; }\r\n    function removeReader(address account) external isAuthority { readers[account] = 0; }\r\n    modifier isReader {\r\n        require(either(allReaderToggle == 1, readers[msg.sender] == 1), \"PIScaledPerSecondCalculator/not-a-reader\");\r\n        _;\r\n    }\r\n\r\n    // --- Structs ---\r\n    struct ControllerGains {\r\n        // This value is multiplied with the proportional term\r\n        int Kp;                                      // [EIGHTEEN_DECIMAL_NUMBER]\r\n        // This value is multiplied with priceDeviationCumulative\r\n        int Ki;                                      // [EIGHTEEN_DECIMAL_NUMBER]\r\n    }\r\n    struct DeviationObservation {\r\n        // The timestamp when this observation was stored\r\n        uint timestamp;\r\n        // The proportional term stored in this observation\r\n        int  proportional;\r\n        // The integral term stored in this observation\r\n        int  integral;\r\n    }\r\n\r\n    // -- Static & Default Variables ---\r\n    // The Kp and Ki values used in this calculator\r\n    ControllerGains internal controllerGains;\r\n\r\n    // Flag that can allow anyone to read variables\r\n    uint256 public   allReaderToggle;\r\n    // The minimum percentage deviation from the redemption price that allows the contract to calculate a non null redemption rate\r\n    uint256 internal noiseBarrier;                   // [EIGHTEEN_DECIMAL_NUMBER]\r\n    // The default redemption rate to calculate in case P + I is smaller than noiseBarrier\r\n    uint256 internal defaultRedemptionRate;          // [TWENTY_SEVEN_DECIMAL_NUMBER]\r\n    // The maximum value allowed for the redemption rate\r\n    uint256 internal feedbackOutputUpperBound;       // [TWENTY_SEVEN_DECIMAL_NUMBER]\r\n    // The minimum value allowed for the redemption rate\r\n    int256  internal feedbackOutputLowerBound;       // [TWENTY_SEVEN_DECIMAL_NUMBER]\r\n    // The minimum delay between two computeRate calls\r\n    uint256 internal integralPeriodSize;             // [seconds]\r\n\r\n    // --- Fluctuating/Dynamic Variables ---\r\n    // Array of observations storing the latest timestamp as well as the proportional and integral terms\r\n    DeviationObservation[] internal deviationObservations;\r\n    // Array of historical priceDeviationCumulative\r\n    int256[]               internal historicalCumulativeDeviations;\r\n\r\n    // The integral term (sum of deviations at each calculateRate call minus the leak applied at every call)\r\n    int256  internal priceDeviationCumulative;             // [TWENTY_SEVEN_DECIMAL_NUMBER]\r\n    // The per second leak applied to priceDeviationCumulative before the latest deviation is added\r\n    uint256 internal perSecondCumulativeLeak;              // [TWENTY_SEVEN_DECIMAL_NUMBER]\r\n    // Timestamp of the last update\r\n    uint256 internal lastUpdateTime;                       // [timestamp]\r\n    // Flag indicating that the rate computed is per second\r\n    uint256 constant internal defaultGlobalTimeline = 1;\r\n\r\n    // Address that can validate seeds\r\n    address public seedProposer;\r\n\r\n    uint256 internal constant NEGATIVE_RATE_LIMIT         = TWENTY_SEVEN_DECIMAL_NUMBER - 1;\r\n    uint256 internal constant TWENTY_SEVEN_DECIMAL_NUMBER = 10 ** 27;\r\n    uint256 internal constant EIGHTEEN_DECIMAL_NUMBER     = 10 ** 18;\r\n\r\n    constructor(\r\n        int256 Kp_,\r\n        int256 Ki_,\r\n        uint256 perSecondCumulativeLeak_,\r\n        uint256 integralPeriodSize_,\r\n        uint256 noiseBarrier_,\r\n        uint256 feedbackOutputUpperBound_,\r\n        int256  feedbackOutputLowerBound_,\r\n        int256[] memory importedState\r\n    ) public {\r\n        defaultRedemptionRate           = TWENTY_SEVEN_DECIMAL_NUMBER;\r\n\r\n        require(both(feedbackOutputUpperBound_ < subtract(subtract(uint(-1), defaultRedemptionRate), 1), feedbackOutputUpperBound_ > 0), \"PIScaledPerSecondCalculator/invalid-foub\");\r\n        require(both(feedbackOutputLowerBound_ < 0, feedbackOutputLowerBound_ >= -int(NEGATIVE_RATE_LIMIT)), \"PIScaledPerSecondCalculator/invalid-folb\");\r\n        require(integralPeriodSize_ > 0, \"PIScaledPerSecondCalculator/invalid-ips\");\r\n        require(uint(importedState[0]) <= now, \"PIScaledPerSecondCalculator/invalid-imported-time\");\r\n        require(both(noiseBarrier_ > 0, noiseBarrier_ <= EIGHTEEN_DECIMAL_NUMBER), \"PIScaledPerSecondCalculator/invalid-nb\");\r\n        require(both(Kp_ >= -int(EIGHTEEN_DECIMAL_NUMBER), Kp_ <= int(EIGHTEEN_DECIMAL_NUMBER)), \"PIScaledPerSecondCalculator/invalid-sg\");\r\n        require(both(Ki_ >= -int(EIGHTEEN_DECIMAL_NUMBER), Ki_ <= int(EIGHTEEN_DECIMAL_NUMBER)), \"PIScaledPerSecondCalculator/invalid-ag\");\r\n\r\n        authorities[msg.sender]         = 1;\r\n        readers[msg.sender]             = 1;\r\n\r\n        feedbackOutputUpperBound        = feedbackOutputUpperBound_;\r\n        feedbackOutputLowerBound        = feedbackOutputLowerBound_;\r\n        integralPeriodSize              = integralPeriodSize_;\r\n        controllerGains                 = ControllerGains(Kp_, Ki_);\r\n        perSecondCumulativeLeak         = perSecondCumulativeLeak_;\r\n        priceDeviationCumulative        = importedState[3];\r\n        noiseBarrier                    = noiseBarrier_;\r\n        lastUpdateTime                  = uint(importedState[0]);\r\n\r\n        if (importedState[4] > 0) {\r\n          deviationObservations.push(\r\n            DeviationObservation(uint(importedState[4]), importedState[1], importedState[2])\r\n          );\r\n        }\r\n\r\n        historicalCumulativeDeviations.push(priceDeviationCumulative);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify an address parameter\r\n    * @param parameter The name of the address parameter to change\r\n    * @param addr The new address for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthority {\r\n        if (parameter == \"seedProposer\") {\r\n          readers[seedProposer] = 0;\r\n          seedProposer = addr;\r\n          readers[seedProposer] = 1;\r\n        }\r\n        else revert(\"PIScaledPerSecondCalculator/modify-unrecognized-param\");\r\n    }\r\n    /*\r\n    * @notify Modify an uint256 parameter\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthority {\r\n        if (parameter == \"nb\") {\r\n          require(both(val > 0, val <= EIGHTEEN_DECIMAL_NUMBER), \"PIScaledPerSecondCalculator/invalid-nb\");\r\n          noiseBarrier = val;\r\n        }\r\n        else if (parameter == \"ips\") {\r\n          require(val > 0, \"PIScaledPerSecondCalculator/null-ips\");\r\n          integralPeriodSize = val;\r\n        }\r\n        else if (parameter == \"foub\") {\r\n          require(both(val < subtract(subtract(uint(-1), defaultRedemptionRate), 1), val > 0), \"PIScaledPerSecondCalculator/invalid-foub\");\r\n          feedbackOutputUpperBound = val;\r\n        }\r\n        else if (parameter == \"pscl\") {\r\n          require(val <= TWENTY_SEVEN_DECIMAL_NUMBER, \"PIScaledPerSecondCalculator/invalid-pscl\");\r\n          perSecondCumulativeLeak = val;\r\n        }\r\n        else if (parameter == \"allReaderToggle\") {\r\n          allReaderToggle = val;\r\n        }\r\n        else revert(\"PIScaledPerSecondCalculator/modify-unrecognized-param\");\r\n    }\r\n    /*\r\n    * @notify Modify an int256 parameter\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, int256 val) external isAuthority {\r\n        if (parameter == \"folb\") {\r\n          require(both(val < 0, val >= -int(NEGATIVE_RATE_LIMIT)), \"PIScaledPerSecondCalculator/invalid-folb\");\r\n          feedbackOutputLowerBound = val;\r\n        }\r\n        else if (parameter == \"sg\") {\r\n          require(both(val >= -int(EIGHTEEN_DECIMAL_NUMBER), val <= int(EIGHTEEN_DECIMAL_NUMBER)), \"PIScaledPerSecondCalculator/invalid-sg\");\r\n          controllerGains.Kp = val;\r\n        }\r\n        else if (parameter == \"ag\") {\r\n          require(both(val >= -int(EIGHTEEN_DECIMAL_NUMBER), val <= int(EIGHTEEN_DECIMAL_NUMBER)), \"PIScaledPerSecondCalculator/invalid-ag\");\r\n          controllerGains.Ki = val;\r\n        }\r\n        else if (parameter == \"pdc\") {\r\n          require(controllerGains.Ki == 0, \"PIScaledPerSecondCalculator/cannot-set-pdc\");\r\n          priceDeviationCumulative = val;\r\n        }\r\n        else revert(\"PIScaledPerSecondCalculator/modify-unrecognized-param\");\r\n    }\r\n\r\n    // --- PI Specific Math ---\r\n    function riemannSum(int x, int y) internal pure returns (int z) {\r\n        return addition(x, y) / 2;\r\n    }\r\n    function absolute(int x) internal pure returns (uint z) {\r\n        z = (x < 0) ? uint(-x) : uint(x);\r\n    }\r\n\r\n    // --- PI Utils ---\r\n    /*\r\n    * Return the last proportional term stored in deviationObservations\r\n    */\r\n    function getLastProportionalTerm() public isReader view returns (int256) {\r\n        if (oll() == 0) return 0;\r\n        return deviationObservations[oll() - 1].proportional;\r\n    }\r\n    /*\r\n    * Return the last integral term stored in deviationObservations\r\n    */\r\n    function getLastIntegralTerm() external isReader view returns (int256) {\r\n        if (oll() == 0) return 0;\r\n        return deviationObservations[oll() - 1].integral;\r\n    }\r\n    /*\r\n    * @notice Return the length of deviationObservations\r\n    */\r\n    function oll() public isReader view returns (uint256) {\r\n        return deviationObservations.length;\r\n    }\r\n    /*\r\n    * @notice Return a redemption rate bounded by feedbackOutputLowerBound and feedbackOutputUpperBound as well as the\r\n              timeline over which that rate will take effect\r\n    * @param piOutput The raw redemption rate computed from the proportional and integral terms\r\n    */\r\n    function getBoundedRedemptionRate(int piOutput) public isReader view returns (uint256, uint256) {\r\n        int  boundedPIOutput = piOutput;\r\n        uint newRedemptionRate;\r\n\r\n        if (piOutput < feedbackOutputLowerBound) {\r\n          boundedPIOutput = feedbackOutputLowerBound;\r\n        } else if (piOutput > int(feedbackOutputUpperBound)) {\r\n          boundedPIOutput = int(feedbackOutputUpperBound);\r\n        }\r\n\r\n        // newRedemptionRate cannot be lower than 10^0 (1) because of the way rpower is designed\r\n        bool negativeOutputExceedsHundred = (boundedPIOutput < 0 && -boundedPIOutput >= int(defaultRedemptionRate));\r\n\r\n        // If it is smaller than 1, set it to the nagative rate limit\r\n        if (negativeOutputExceedsHundred) {\r\n          newRedemptionRate = NEGATIVE_RATE_LIMIT;\r\n        } else {\r\n          // If boundedPIOutput is lower than -int(NEGATIVE_RATE_LIMIT) set newRedemptionRate to 1\r\n          if (boundedPIOutput < 0 && boundedPIOutput <= -int(NEGATIVE_RATE_LIMIT)) {\r\n            newRedemptionRate = uint(addition(int(defaultRedemptionRate), -int(NEGATIVE_RATE_LIMIT)));\r\n          } else {\r\n            // Otherwise add defaultRedemptionRate and boundedPIOutput together\r\n            newRedemptionRate = uint(addition(int(defaultRedemptionRate), boundedPIOutput));\r\n          }\r\n        }\r\n\r\n        return (newRedemptionRate, defaultGlobalTimeline);\r\n    }\r\n    /*\r\n    * @notice Returns whether the P + I sum exceeds the noise barrier\r\n    * @param piSum Represents a sum between P + I\r\n    * @param redemptionPrice The system coin redemption price\r\n    */\r\n    function breaksNoiseBarrier(uint piSum, uint redemptionPrice) public isReader view returns (bool) {\r\n        uint deltaNoise = subtract(multiply(uint(2), EIGHTEEN_DECIMAL_NUMBER), noiseBarrier);\r\n        return piSum >= subtract(divide(multiply(redemptionPrice, deltaNoise), EIGHTEEN_DECIMAL_NUMBER), redemptionPrice);\r\n    }\r\n    /*\r\n    * @notice Compute a new priceDeviationCumulative (integral term)\r\n    * @param proportionalTerm The proportional term (redemptionPrice - marketPrice) * TWENTY_SEVEN_DECIMAL_NUMBER / redemptionPrice\r\n    * @param accumulatedLeak The total leak applied to priceDeviationCumulative before it is summed with the new time adjusted deviation\r\n    */\r\n    function getNextPriceDeviationCumulative(int proportionalTerm, uint accumulatedLeak) public isReader view returns (int256, int256) {\r\n        int256 lastProportionalTerm      = getLastProportionalTerm();\r\n        uint256 timeElapsed              = (lastUpdateTime == 0) ? 0 : subtract(now, lastUpdateTime);\r\n        int256 newTimeAdjustedDeviation  = multiply(riemannSum(proportionalTerm, lastProportionalTerm), int(timeElapsed));\r\n        int256 leakedPriceCumulative     = divide(multiply(int(accumulatedLeak), priceDeviationCumulative), int(TWENTY_SEVEN_DECIMAL_NUMBER));\r\n\r\n        return (\r\n          addition(leakedPriceCumulative, newTimeAdjustedDeviation),\r\n          newTimeAdjustedDeviation\r\n        );\r\n    }\r\n    /*\r\n    * @notice Apply Kp to the proportional term and Ki to the integral term (by multiplication) and then sum P and I\r\n    * @param proportionalTerm The proportional term\r\n    * @param integralTerm The integral term\r\n    */\r\n    function getGainAdjustedPIOutput(int proportionalTerm, int integralTerm) public isReader view returns (int256) {\r\n        (int adjustedProportional, int adjustedIntegral) = getGainAdjustedTerms(proportionalTerm, integralTerm);\r\n        return addition(adjustedProportional, adjustedIntegral);\r\n    }\r\n    /*\r\n    * @notice Independently return and calculate P * Kp and I * Ki\r\n    * @param proportionalTerm The proportional term\r\n    * @param integralTerm The integral term\r\n    */\r\n    function getGainAdjustedTerms(int proportionalTerm, int integralTerm) public isReader view returns (int256, int256) {\r\n        return (\r\n          multiply(proportionalTerm, int(controllerGains.Kp)) / int(EIGHTEEN_DECIMAL_NUMBER),\r\n          multiply(integralTerm, int(controllerGains.Ki)) / int(EIGHTEEN_DECIMAL_NUMBER)\r\n        );\r\n    }\r\n\r\n    // --- Rate Validation/Calculation ---\r\n    /*\r\n    * @notice Compute a new redemption rate\r\n    * @param marketPrice The system coin market price\r\n    * @param redemptionPrice The system coin redemption price\r\n    * @param accumulatedLeak The total leak that will be applied to priceDeviationCumulative (the integral) before the latest\r\n    *        proportional term is added\r\n    */\r\n    function computeRate(\r\n      uint marketPrice,\r\n      uint redemptionPrice,\r\n      uint accumulatedLeak\r\n    ) external returns (uint256) {\r\n        // Only the seed proposer can call this\r\n        require(seedProposer == msg.sender, \"PIScaledPerSecondCalculator/invalid-msg-sender\");\r\n        // Ensure that at least integralPeriodSize seconds passed since the last update or that this is the first update\r\n        require(subtract(now, lastUpdateTime) >= integralPeriodSize || lastUpdateTime == 0, \"PIScaledPerSecondCalculator/wait-more\");\r\n        // Scale the market price by 10^9 so it also has 27 decimals like the redemption price\r\n        uint256 scaledMarketPrice = multiply(marketPrice, 10**9);\r\n        // Calculate the proportional term as (redemptionPrice - marketPrice) * TWENTY_SEVEN_DECIMAL_NUMBER / redemptionPrice\r\n        int256 proportionalTerm = multiply(subtract(int(redemptionPrice), int(scaledMarketPrice)), int(TWENTY_SEVEN_DECIMAL_NUMBER)) / int(redemptionPrice);\r\n        // Update the integral term by passing the proportional (current deviation) and the total leak that will be applied to the integral\r\n        updateDeviationHistory(proportionalTerm, accumulatedLeak);\r\n        // Set the last update time to now\r\n        lastUpdateTime = now;\r\n        // Multiply P by Kp and I by Ki and then sum P & I in order to return the result\r\n        int256 piOutput = getGainAdjustedPIOutput(proportionalTerm, priceDeviationCumulative);\r\n        // If the P * Kp + I * Ki output breaks the noise barrier, you can recompute a non null rate. Also make sure the sum is not null\r\n        if (\r\n          breaksNoiseBarrier(absolute(piOutput), redemptionPrice) &&\r\n          piOutput != 0\r\n        ) {\r\n          // Get the new redemption rate by taking into account the feedbackOutputUpperBound and feedbackOutputLowerBound\r\n          (uint newRedemptionRate, ) = getBoundedRedemptionRate(piOutput);\r\n          return newRedemptionRate;\r\n        } else {\r\n          return TWENTY_SEVEN_DECIMAL_NUMBER;\r\n        }\r\n    }\r\n    /*\r\n    * @notice Push new observations in deviationObservations & historicalCumulativeDeviations while also updating priceDeviationCumulative\r\n    * @param proportionalTerm The proportionalTerm\r\n    * @param accumulatedLeak The total leak (similar to a negative interest rate) applied to priceDeviationCumulative before proportionalTerm is added to it\r\n    */\r\n    function updateDeviationHistory(int proportionalTerm, uint accumulatedLeak) internal {\r\n        (int256 virtualDeviationCumulative, ) =\r\n          getNextPriceDeviationCumulative(proportionalTerm, accumulatedLeak);\r\n        priceDeviationCumulative = virtualDeviationCumulative;\r\n        historicalCumulativeDeviations.push(priceDeviationCumulative);\r\n        deviationObservations.push(DeviationObservation(now, proportionalTerm, priceDeviationCumulative));\r\n    }\r\n    /*\r\n    * @notice Compute and return the upcoming redemption rate\r\n    * @param marketPrice The system coin market price\r\n    * @param redemptionPrice The system coin redemption price\r\n    * @param accumulatedLeak The total leak applied to priceDeviationCumulative before it is summed with the proportionalTerm\r\n    */\r\n    function getNextRedemptionRate(uint marketPrice, uint redemptionPrice, uint accumulatedLeak)\r\n      public isReader view returns (uint256, int256, int256, uint256) {\r\n        uint256 scaledMarketPrice = multiply(marketPrice, 10**9);\r\n        int256 proportionalTerm = multiply(subtract(int(redemptionPrice), int(scaledMarketPrice)), int(TWENTY_SEVEN_DECIMAL_NUMBER)) / int(redemptionPrice);\r\n        (int cumulativeDeviation, ) = getNextPriceDeviationCumulative(proportionalTerm, accumulatedLeak);\r\n        int piOutput = getGainAdjustedPIOutput(proportionalTerm, cumulativeDeviation);\r\n        if (\r\n          breaksNoiseBarrier(absolute(piOutput), redemptionPrice) &&\r\n          piOutput != 0\r\n        ) {\r\n          (uint newRedemptionRate, uint rateTimeline) = getBoundedRedemptionRate(piOutput);\r\n          return (newRedemptionRate, proportionalTerm, cumulativeDeviation, rateTimeline);\r\n        } else {\r\n          return (TWENTY_SEVEN_DECIMAL_NUMBER, proportionalTerm, cumulativeDeviation, defaultGlobalTimeline);\r\n        }\r\n    }\r\n\r\n    // --- Parameter Getters ---\r\n    /*\r\n    * @notice Get the timeline over which the computed redemption rate takes effect e.g rateTimeline = 3600 so the rate is\r\n    *         computed over 1 hour\r\n    */\r\n    function rt(uint marketPrice, uint redemptionPrice, uint accumulatedLeak) external isReader view returns (uint256) {\r\n        (, , , uint rateTimeline) = getNextRedemptionRate(marketPrice, redemptionPrice, accumulatedLeak);\r\n        return rateTimeline;\r\n    }\r\n    /*\r\n    * @notice Return Kp\r\n    */\r\n    function sg() external isReader view returns (int256) {\r\n        return controllerGains.Kp;\r\n    }\r\n    /*\r\n    * @notice Return Ki\r\n    */\r\n    function ag() external isReader view returns (int256) {\r\n        return controllerGains.Ki;\r\n    }\r\n    function nb() external isReader view returns (uint256) {\r\n        return noiseBarrier;\r\n    }\r\n    function drr() external isReader view returns (uint256) {\r\n        return defaultRedemptionRate;\r\n    }\r\n    function foub() external isReader view returns (uint256) {\r\n        return feedbackOutputUpperBound;\r\n    }\r\n    function folb() external isReader view returns (int256) {\r\n        return feedbackOutputLowerBound;\r\n    }\r\n    function ips() external isReader view returns (uint256) {\r\n        return integralPeriodSize;\r\n    }\r\n    function dos(uint256 i) external isReader view returns (uint256, int256, int256) {\r\n        return (deviationObservations[i].timestamp, deviationObservations[i].proportional, deviationObservations[i].integral);\r\n    }\r\n    function hcd(uint256 i) external isReader view returns (int256) {\r\n        return historicalCumulativeDeviations[i];\r\n    }\r\n    function pdc() external isReader view returns (int256) {\r\n        return priceDeviationCumulative;\r\n    }\r\n    function pscl() external isReader view returns (uint256) {\r\n        return perSecondCumulativeLeak;\r\n    }\r\n    function lut() external isReader view returns (uint256) {\r\n        return lastUpdateTime;\r\n    }\r\n    function dgt() external isReader view returns (uint256) {\r\n        return defaultGlobalTimeline;\r\n    }\r\n    /*\r\n    * @notice Returns the time elapsed since the last calculateRate call minus integralPeriodSize\r\n    */\r\n    function adat() external isReader view returns (uint256) {\r\n        uint elapsed = subtract(now, lastUpdateTime);\r\n        if (elapsed < integralPeriodSize) {\r\n          return 0;\r\n        }\r\n        return subtract(elapsed, integralPeriodSize);\r\n    }\r\n    /*\r\n    * @notice Returns the time elapsed since the last calculateRate call\r\n    */\r\n    function tlv() external isReader view returns (uint256) {\r\n        uint elapsed = (lastUpdateTime == 0) ? 0 : subtract(now, lastUpdateTime);\r\n        return elapsed;\r\n    }\r\n}\r\n\r\nabstract contract RateSetterLike {\r\n    function modifyParameters(bytes32, address) external virtual;\r\n    function updateRate(address) external virtual;\r\n    function pidCalculator() external virtual view returns (address);\r\n}\r\n\r\nabstract contract CalculatorLike {\r\n    function modifyParameters(bytes32, address) external virtual;\r\n    function modifyParameters(bytes32, uint256) external virtual;\r\n    function addAuthority(address) external virtual;\r\n    function removeAuthority(address) external virtual;\r\n    function seedProposer() external virtual view returns (address);\r\n    function authorities(address) external virtual view returns (uint);\r\n    function sg() external virtual view returns (int256);\r\n    function ag() external virtual view returns (int256);\r\n    function pscl() external virtual view returns (uint256);\r\n    function ips() external virtual view returns (uint256);\r\n    function nb() external virtual view returns (uint256);\r\n    function foub() external virtual view returns (uint256);\r\n    function folb() external virtual view returns (int256);\r\n    function pdc() external virtual view returns (int256);\r\n    function lut() external virtual view returns (uint256);\r\n    function oll() external virtual view returns (uint256);\r\n    function dos(uint256) external virtual view returns (uint256, int256, int256);\r\n    function allReaderToggle() external virtual view returns (uint256);\r\n}\r\n\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual external returns (uint256);\r\n}\r\n\r\ncontract Proposal is SignedSafeMath {\r\n    CalculatorLike    constant GEB_RRFM_CALCULATOR_OLD = CalculatorLike(0xddA334de7A9C57A641616492175ca203Ba8Cf981);\r\n    RateSetterLike    constant GEB_RRFM_SETTER         = RateSetterLike(0x7Acfc14dBF2decD1c9213Db32AE7784626daEb48);\r\n    OracleRelayerLike constant GEB_ORACLE_RELAYER      = OracleRelayerLike(0x4ed9C0dCa0479bC64d8f4EB3007126D5791f7851);\r\n    int256            constant RAY                     = 10**27;\r\n\r\n\r\n    function execute(bool) public {\r\n        int256 redemptionPrice = int256(GEB_ORACLE_RELAYER.redemptionPrice());\r\n\r\n        // Fetch last observation data to populate next controller state\r\n        int256[] memory adjustedState = getAdjustedCalculatorState(GEB_RRFM_CALCULATOR_OLD, redemptionPrice);\r\n\r\n        PIScaledPerSecondCalculator newCalculator = new PIScaledPerSecondCalculator(\r\n            divide(multiply(GEB_RRFM_CALCULATOR_OLD.sg(), redemptionPrice), RAY), // kp\r\n            divide(multiply(GEB_RRFM_CALCULATOR_OLD.ag(), redemptionPrice), RAY), // ki\r\n            GEB_RRFM_CALCULATOR_OLD.pscl(),                                       // perSecondCumulativeLeak\r\n            GEB_RRFM_CALCULATOR_OLD.ips(),                                        // integralPeriodSize\r\n            GEB_RRFM_CALCULATOR_OLD.nb(),                                         // noiseBarrier\r\n            GEB_RRFM_CALCULATOR_OLD.foub(),                                       // feedbackOutputUpperBound\r\n            GEB_RRFM_CALCULATOR_OLD.folb(),                                       // feedbackOutputLowerBound\r\n            adjustedState\r\n        );\r\n\r\n        // set allReaderToggle\r\n        newCalculator.modifyParameters(\"allReaderToggle\", uint256(1));\r\n\r\n        // swap controller con rate setter\r\n        GEB_RRFM_SETTER.modifyParameters(\"pidCalculator\", address(newCalculator));\r\n        newCalculator.modifyParameters(\"seedProposer\", address(GEB_RRFM_SETTER));\r\n    }\r\n\r\n    function getAdjustedCalculatorState(CalculatorLike calculator, int256 redemptionPrice) internal view returns (int256[] memory state) {\r\n        (\r\n            uint256 deviationTimestamp,\r\n            int256  deviationProportional,\r\n            int256  deviationIntegral\r\n        ) = calculator.dos(calculator.oll() - 1);\r\n\r\n        state = new int256[](5);\r\n        state[0] = int256(calculator.lut());                                      // lastUpdateTime\r\n        state[1] = divide(multiply(deviationProportional, RAY), redemptionPrice); // deviationObservations.proportional\r\n        state[2] = divide(multiply(deviationIntegral, RAY), redemptionPrice);     // deviationObservations.integral\r\n        state[3] = divide(multiply(calculator.pdc(), RAY), redemptionPrice);      // deviationObservations.priceDeviationCumulative\r\n        state[4] = int256(deviationTimestamp);                                    // deviationObservations.timestamp\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Proposal", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://41da54154cd772ce654d31fd2f4b2fef39af8d0000317c2fb50f5388a2e8676b"}]}