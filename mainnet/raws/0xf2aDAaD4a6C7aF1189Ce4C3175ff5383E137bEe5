{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\t\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\t// Sample token contract\r\n\t//\r\n\t// Symbol        : TRA\r\n\t// Name          : Travel_coin\r\n\t// Total supply  : 100000000000000000000\r\n\t// Decimals      : 5\r\n\t// Owner Account : 0x1E7bC59a092536392Bc38f3a567e1c93597db71b\r\n\t//\r\n\t//\r\n\t// \r\n\t// ----------------------------------------------------------------------------\r\n\t\r\n\r\n\t\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\t// Lib: Safe Math\r\n\t// ----------------------------------------------------------------------------\r\n\tcontract SafeMath {\r\n\t\r\n\r\n\t    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n\t        c = a + b;\r\n\t        require(c >= a);\r\n\t    }\r\n\t\r\n\r\n\t    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n\t        require(b <= a);\r\n\t        c = a - b;\r\n\t    }\r\n\t\r\n\r\n\t    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n\t        c = a * b;\r\n\t        require(a == 0 || c / a == b);\r\n\t    }\r\n\t\r\n\r\n\t    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n\t        require(b > 0);\r\n\t        c = a / b;\r\n\t    }\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n\t/**\r\n\tERC Token Standard #20 Interface\r\n\thttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t*/\r\n\tcontract ERC20Interface {\r\n\t    function totalSupply() public constant returns (uint);\r\n\t    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\t    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\t    function transfer(address to, uint tokens) public returns (bool success);\r\n\t    function approve(address spender, uint tokens) public returns (bool success);\r\n\t    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\t\r\n\r\n\t    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\t    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n\t/**\r\n\tContract function to receive approval and execute function in one call\r\n\t\r\n\tBorrowed from MiniMeToken\r\n\t*/\r\n\tcontract ApproveAndCallFallBack {\r\n\t    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\tERC20 Token, with the addition of symbol, name and decimals and assisted token transfers\r\n\t*/\r\n\tcontract TRA is ERC20Interface, SafeMath {\r\n\t    string public symbol;\r\n\t    string public  name;\r\n\t    uint8 public decimals;\r\n\t    uint public _totalSupply;\r\n\t\r\n\r\n\t    mapping(address => uint) balances;\r\n\t    mapping(address => mapping(address => uint)) allowed;\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Constructor\r\n\t    // ------------------------------------------------------------------------\r\n\t    constructor() public {\r\n\t        symbol = \" TRA\";\r\n\t        name = \" Travel_coin\";\r\n\t        decimals = 5;\r\n\t        _totalSupply = 100000000000000000000;\r\n\t        balances[0x1E7bC59a092536392Bc38f3a567e1c93597db71b] = _totalSupply;\r\n\t        emit Transfer(address(0), 0x1E7bC59a092536392Bc38f3a567e1c93597db71b, _totalSupply);\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Total supply\r\n\t    // ------------------------------------------------------------------------\r\n\t    function totalSupply() public constant returns (uint) {\r\n\t        return _totalSupply  - balances[address(0)];\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Get the token balance for account tokenOwner\r\n\t    // ------------------------------------------------------------------------\r\n\t    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n\t        return balances[tokenOwner];\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Transfer the balance from token owner's account to to account\r\n\t    // - Owner's account must have sufficient balance to transfer\r\n\t    // - 0 value transfers are allowed\r\n\t    // ------------------------------------------------------------------------\r\n\t    function transfer(address to, uint tokens) public returns (bool success) {\r\n\t        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n\t        balances[to] = safeAdd(balances[to], tokens);\r\n\t        emit Transfer(msg.sender, to, tokens);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Token owner can approve for spender to transferFrom(...) tokens\r\n\t    // from the token owner's account\r\n\t    //\r\n\t    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t    // recommends that there are no checks for the approval double-spend attack\r\n\t    // as this should be implemented in user interfaces \r\n\t    // ------------------------------------------------------------------------\r\n\t    function approve(address spender, uint tokens) public returns (bool success) {\r\n\t        allowed[msg.sender][spender] = tokens;\r\n\t        emit Approval(msg.sender, spender, tokens);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Transfer tokens from the from account to the to account\r\n\t    // \r\n\t    // The calling account must already have sufficient tokens approve(...)-d\r\n\t    // for spending from the from account and\r\n\t    // - From account must have sufficient balance to transfer\r\n\t    // - Spender must have sufficient allowance to transfer\r\n\t    // - 0 value transfers are allowed\r\n\t    // ------------------------------------------------------------------------\r\n\t    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t        balances[from] = safeSub(balances[from], tokens);\r\n\t        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n\t        balances[to] = safeAdd(balances[to], tokens);\r\n\t        emit Transfer(from, to, tokens);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Returns the amount of tokens approved by the owner that can be\r\n\t    // transferred to the spender's account\r\n\t    // ------------------------------------------------------------------------\r\n\t    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n\t        return allowed[tokenOwner][spender];\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Token owner can approve for spender to transferFrom(...) tokens\r\n\t    // from the token owner's account. The spender contract function\r\n\t    // receiveApproval(...) is then executed\r\n\t    // ------------------------------------------------------------------------\r\n\t    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n\t        allowed[msg.sender][spender] = tokens;\r\n\t        emit Approval(msg.sender, spender, tokens);\r\n\t        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\t        return true;\r\n\t    }\r\n\t\r\n\r\n\t\r\n\r\n\t    // ------------------------------------------------------------------------\r\n\t    // Don't accept ETH\r\n\t    // ------------------------------------------------------------------------\r\n\t    function () public payable {\r\n\t        revert();\r\n\t    }\r\n\t}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "TRA", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "OSL-3.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2808aebd8f46a9fd2e07c4052b792a9672dc8ac269bf0c1e622130e44b8d5601"}]}