{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oven.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./IFridge.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXKKKK00000000000KKKXXNNWWWMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMWXOkdoolcc:;;;,,,,''''''''''',,,,;;::cclloddxkO0KXWMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMW0:.........''''''''''''''''''''''''..........'cdOWMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMXd,.......................................,o0WMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMWKl'....................................lKWMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMWO:.................................,xNMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMXd'.....''.......................:0WMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:............................cKMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd'.........................cXMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk,.......................lXMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:.....................lXMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl....,'.............cXMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl.................cKMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:...............;0MMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:.............,OWMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:............;KMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd.............oNMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,....'........:XMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;.....'........lNMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc...............dWMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl................kMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd................,OMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx'....''..........;KMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,.................cXMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;..................oWMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc...................xMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl.....'.............'kMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd......'.............,0MMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'....................:XMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMO,.....................lNMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMK;.....',,,,''..........lKKXWMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMXc.',;;::::::cc:'........,;;:lxKWMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMNl..;:::::::c:ccc;',,,'.',,,,;;;:oONMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMNd..';:::::llcclol;',,,'',,,,,,,,,,;cxNMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMNOxxxkOkc,',,,;;;;::;;:::;'''',''',,,,,,;;;;;,oNMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMWKx:,;:ccc;''',,'',,,'''',,,,''',,,'''',,;:;;:c:'cKMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMKc',;,;cc:;,''',,,,,,,'',,,,,''',,,,'''',;;,;c:,:OWMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMk,,::::c:;::;,','''',,,,,',,,'',,,,,,,,,'''',,':0MMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMXd::c:cc:;;;;,'','',,,,,'',,,,,,,,,,',,,,,,',,',d0OxkKWMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMW0l,;::;;;,,,'',,,,'',,,'''''',,,,,,,,,,,,,,,,,''.'',oXMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMXl',;,,,,',,,,,,,'..............'''',,,,,,,,,,.......cKMMMMMMMMMM\\n//MMMMMMMMMMMMMMNd,''''''',,,'''.....................',,,,'',,,.....'''dWMMMMMMMMM\\n//MMMMMMMMWXKXNWk,',,,'''''''.........................',,,'.',,'''''';oKWMMMMMMMMM\\n//MMMMMMMNx;,;:c;''''''''''.............................''..',',,,''oKNWMMMMMMMMMM\\n//MMMMMMWO:'''''''''''''....................................','',,,'cdxxONMMMMMMMM\\n//MMMMMMKc..',',,'',,'......................................,'',,,,;clcccxXMMMMMMM\\n//MMMMMWd,',,,',,,,,'.......................................',,,,,,;ccclc:xNMMMMMM\\n//MMMMW0c,'',,'',,,'........................''...............',,,,,,;:llc;lKMMMMMM\\n//MMMMKl,,,,,,,,,''.........................'.................',,,,,,;::;:xNMMMMMM\\n//MMMMO:,,,,,,,,,'.................'........''..................,,,,,',oOKWMMMMMMM\\n//MMMMW0xol:,'',''..........'.....,'........''......''...''.....',,,,,'dWMMMMMMMMM\\n//MMMMMMMWNo',,,'..........''....''.........'''....','...,'......'',,,'cXMMMMMMMMM\\n//MMMMMMMMNl',,''..........,'...''..........''''...,;'..,;........',,,';0MMMMMMMMM\\n//MMMMMMMMXc',,,'.........';,...';,........''''''.,;,..';;.........,,,,;kMMMMMMMMM\\n//MMMMMMMMXc',,,'.........';;...,;:,'....',;,''',;;;'..,:;.........',,,,xWMMMMMMMM\\n//MMMMMMMMKc',,,'.........';;'.',;;;;;,'';c:,',',;;;..';:;.........',,,'oNMMMMMMMM\\n//MMMMMMMMKc',,,.....'.....;:;;,,,;;;::::cc:'',,,;;,..';:;,'.......',,,'oNMMMMMMMM\\n//MMMMMMMMKc',,,....''.....';;;;,,;:::;;;:c;,',,,,,,,,,::;;;'......',,,'lNMMMMMMMM\\n//MMMMMMMMKc',,'....'''....',;;;,,;;;;;;::::;;,;,',:;,,::;;;'......',,,'lXMMMMMMMM\\n//MMMMMMMMKc',,'.....'''''',,;,,;;;;::;;::;;cc;,;;;;;,;:;;;,.......,,,,'lXMMMMMMMM\\n//MMMMMMMMXc',,'......''',,,''',::;:c:;,;;,:llc;:c;;:;;::;;'......',',,'lNMMMMMMMM\\n//MMMMMMMMXl',,'.......',,,,;,,,:c::ccc:::cllllll:;cl:;;;;,.......',,,,'oNMMMMMMMM\\n//MMMMMMMMNo',,'........',,;c:;;cllcllllllllloolccllllc;;;'......',,,','dWMMMMMMMM\\n//MMMMMMMMWx,','..........'':lcclxdodxxoollldkkxdddoodl;;,.......',,,,',xMMMMMMMMM\\n//MMMMMMMMMK:','............':cldkkkkOkkkkkkkkOOkkxxkxl:,........',,,,',kMMMMMMMMM\\n//MMMMMMMMMWd''''...............,;;;;:::::::::::::;;;,..........',,,,,':0MMMMMMMMM\\n//MMMMMMMMMMO,.,'..''''''......'........................''''',,,,',,,,'cKMMMMMMMMM\\n//MMMMMMMMMMNl','..'''''...''.',',;;;,;;;,,,,,,,,',:cccccccccccl:'',,,,oNMMMMMMMMM\\n//MMMMMMMMNK0o''''''''',,''''.',,;;;;,;;;,,,;;;,,'';:::::::;;;:;,'',,''oNMMMMMMMMM\\n//MMMMMMMNd:;;,,,,,''''',,,,'',,,,,,,,,,,,,,,,,,,,'''''''''''''''',,,;;:dXMMMMMMMM\\n//MMMMMMM0c::;:::::::;,;;,,,,,,,,'',''''''',,,''''''''''''',,;;;;::c::c:c0MMMMMMMM\\n//MMMMMMMNd;;;::::::::::::::::::;;;;;;;;;;;;;;;;;;;;;;;;::::ccccc::cc:::dXMMMMMMMM\\n//MMMMMMMMNOkkxc,,;;;;:::::::::::::::::c:::::cc::ccccccccccccc::::;;,;dKNMMMMMMMMM\\n//MMMMMMMMMMMMMO,',''',,,,,,,;;;;;;;:::::::::::::::::::::;;;;;,,,,,,'cXMMMMMMMMMMM\\n//MMMMMMMMMMMMMXl',,',,,,,,'',''',,,,,,,,,,,,,,,,,,,,,,,'''',,,,,,,,,xWMMMMMMMMMMM\\n//MMMMMMMMMMMMMWx,,,,,,,,,,,,,,,,,,,,,,,,'''''''',,,,,,,,,,,,,,,,,,':0MMMMMMMMMMMM\\n//MMMMMMMMMMMMMMK:',,,,,,,,,,,,,,,,,,,,,,''''',,,,,,,,,,,,,,,,,,,,,,dWMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMWd',,,,,,,,,,,,,,,,,,,,,,''''',,'',,,,,,,,,,,,,,,,';0MMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMO;',,,,,,,,'''',,,,,,,,,,,,,,,,,''',,,''',,,,,,,,'oNMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMNl''''''...'''''''''''''''''''''''''''''''',,,,,';OMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMk,',,,'. .'',,'''''''''''''''''''.'''''''.',,,,'oNMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMKc',,,,.. .'''''''''''''''''''''. .'''''.',,,,':0MMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMWx,,,,,'. .','''''''''''''''''''.  .''''.',,,,,xWMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMM0:',,,,'..'''''''''''''''''''''.  .''''',,,,'cXMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMNo',,',,,'.''''''''''''''''''''......',,'',''xMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMO;,,,,,,'..''''''''''''''''''''..'',,,,,'..,0MMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMXl',,,,,,'.''''''''''''''''''''',,,,,,'';. cNMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMWk,',,,,,,,,,''''''''''''''''',,,,,,,';d0:.dWMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMNx;''.',,,,,,,,,,,,,,,,,,,,,,,,'''';oKWN:.:kXMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMWXo. .:lccc::;;,,,,'''''''''''. 'oKWMMNo'',oXMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMM0, .xWWWNNXXKK000OOOkkxxddo:. lNMMMMWNNNNNWMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMNl .kMMMMMMMMMMMMMMMMMMMMMMk..kMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMk..kMMMMMMMMMMMMMMMMMMMMMMk.,KMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMNOo:..kMMMMMMMMMMMMMMMMMMMMMMk..lOWMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMWOc;;;c0MMMMMMMMMMMMMMMMMMMMMM0:'':kWMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMMMMMMMMMMMWNNNNNWMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n//MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n\\ncontract BasicV2Oven is Context, Ownable{\\n    /*\\n        The Oven's job is to consume tokens and send WETH to the fridge.\\n        The BasicV2Oven is designed for those poor tax-on-transfer tokens that are\\n        stuck in antiquated UniSwap pools.\\n    */\\n    IUniswapV2Factory factory;\\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    mapping (address => bool) private _targeted;\\n    mapping (address => uint8) private tax;\\n    mapping (address => uint256) private batchsize;\\n    // Sandwich-resistance:\\n    struct PriceReading {\\n        uint64 ethReserves;\\n        uint64 tokenReserves;\\n        uint32 block;\\n    }\\n    mapping (address => PriceReading) reading1;\\n    mapping (address => PriceReading) reading2;\\n    IFridge _fridge;\\n    address dev1;\\n    address dev2;\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n    using SafeMath for uint32;\\n    event UsingFridge(address fridge);\\n\\n    constructor (address fridge) {\\n        replaceFridge(fridge);\\n        factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    }\\n\\n    function addTarget(address token, uint8 new_tax, uint256 new_batchsize) public onlyOwner() {\\n        // Record the exact cooking instructions for new targets\\n        require(new_tax < 100);\\n        require(new_batchsize > 0);\\n        _targeted[token] = true;\\n        tax[token] = new_tax;\\n        batchsize[token] = new_batchsize;\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(factory.getPair(token, WETH)).getReserves();\\n        (uint ethReserves, uint tokenReserves) = WETH < token ? (reserve0, reserve1) : (reserve1, reserve0);\\n        PriceReading memory initialReading;\\n        initialReading.ethReserves = uint64(ethReserves / 10**9);\\n        initialReading.tokenReserves = uint64(tokenReserves / 10**9);\\n        initialReading.block = uint32(block.number);\\n        reading1[token] = initialReading;\\n        reading1[token].block = uint32(block.number - 1);\\n        reading2[token] = initialReading;\\n    }\\n\\n    function removeTarget(address token) public onlyOwner() {\\n        _targeted[token] = false;\\n    }\\n\\n    function replaceFridge (address fridge) public onlyOwner() {\\n        emit UsingFridge(fridge);\\n        _fridge = IFridge(fridge);\\n    }\\n\\n    function setDevs(address new_dev1, address new_dev2) public onlyOwner() {\\n        // Operators who call the cook function.\\n        dev1 = new_dev1;\\n        dev2 = new_dev2;\\n    }\\n\\n    function updatePrice(address token) external {\\n        // Take a new price reading from Uniswap.\\n        PriceReading storage my_reading1 = reading1[token];\\n        PriceReading storage my_reading2 = reading2[token];\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(factory.getPair(token, WETH)).getReserves();\\n        (uint ethReserves, uint tokenReserves) = WETH < token ? (reserve0, reserve1) : (reserve1, reserve0);\\n        if (my_reading1.block < my_reading2.block && my_reading2.block < block.number) {\\n            my_reading1.ethReserves = uint64(ethReserves / 10**9);\\n            my_reading1.tokenReserves = uint64(tokenReserves / 10**9);\\n            my_reading1.block = uint32(block.number);\\n        } else if (my_reading1.block > my_reading2.block && my_reading1.block < block.number) {\\n            my_reading2.ethReserves = uint64(ethReserves / 10**9);\\n            my_reading2.tokenReserves = uint64(tokenReserves / 10**9);\\n            my_reading2.block = uint32(block.number);\\n        }\\n    }\\n\\n    function getReserves(address token) internal view returns (uint256 ethReserves, uint256 tokenReserves) {\\n        // Retrieves recorded pool reserves.\\n        PriceReading memory toRead = reading1[token].block < reading2[token].block ? reading1[token] : reading2[token];\\n        ethReserves = uint256(toRead.ethReserves) * 10**9;\\n        tokenReserves = uint256(toRead.tokenReserves) * 10**9;\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'Zero input');\\n        require(reserveIn > 0 && reserveOut > 0, 'Zero liquidity');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function apply_tax(uint amount, address token) internal view returns (uint256) {\\n        return amount.mul(100 - tax[token]).div(100);\\n    }\\n\\n    function getValues(address token, uint256 amount) external view returns (uint256 ethValue, uint256 paperValue) {\\n        // Estimates value of a given amount of target token, based on market conditions.\\n        require(_targeted[token]);\\n        (uint256 ethReserves, uint256 tokenReserves) = getReserves(token);\\n        ethValue = getAmountOut(apply_tax(apply_tax(amount, token), token), tokenReserves, ethReserves);\\n        paperValue = apply_tax(apply_tax(amount.mul(ethReserves) / tokenReserves, token), token);\\n    }\\n\\n    function otcOffer(address token, uint256 amount) external view returns (uint256 ethValue, uint256 paperValue, uint256 vestedTime) {\\n        // Provides the estimated values back to DC, along with the \\\"cook time\\\" for the vest.\\n        require(_targeted[token]);\\n        (ethValue, paperValue) = this.getValues(token, amount);\\n        uint tokenBalance = IERC20(token).balanceOf(address(this));\\n        uint nPeriods = tokenBalance.add(amount) / batchsize[token];\\n        vestedTime = block.timestamp.add(7 days).add(nPeriods.mul(1 days));\\n    }\\n\\n    function cook(address token, uint256 amountIn, uint256 amountOutMin, uint deadline) public {\\n        // Liquidates target tokens and passes the profits along to the fridge.\\n        require(block.timestamp < deadline, \\\"Expired\\\");\\n        require(_msgSender() == dev1 || _msgSender() == dev2, \\\"Only chefs allowed in the kitchen!\\\");\\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(token, WETH));\\n        uint balanceBefore = IERC20(WETH).balanceOf(address(_fridge));\\n        IERC20(token).transfer(address(pair), amountIn);\\n        uint amountInput;\\n        uint amountOutput;\\n        {\\n        (uint reserve0, uint reserve1,) = pair.getReserves();\\n        (uint reserveInput, uint reserveOutput) = WETH > token ? (reserve0, reserve1) : (reserve1, reserve0);\\n        amountInput = IERC20(token).balanceOf(address(pair)).sub(reserveInput);\\n        amountOutput = getAmountOut(amountInput, reserveInput, reserveOutput);\\n        }\\n        (uint amount0Out, uint amount1Out) = WETH > token ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n        pair.swap(amount0Out, amount1Out, address(_fridge), new bytes(0));\\n        require(IERC20(WETH).balanceOf(address(_fridge)).sub(balanceBefore) >= amountOutMin, 'Slipped.');\\n    }\\n\\n    //Fail-safe function for releasing non-target tokens, not meant to be used.\\n    function release(address token) public {\\n        require (!_targeted[token]);\\n        IERC20(token).transfer(owner(), \\n            IERC20(token).balanceOf(address(this)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"contracts/IFridge.sol\": {\r\n      \"content\": \"interface IFridge {\\r\\n    function valuate(uint256 ethAmount) external returns (uint256 tokenValue);\\r\\n    function updatePrice() external;\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fridge\",\"type\":\"address\"}],\"name\":\"UsingFridge\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"new_tax\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"new_batchsize\",\"type\":\"uint256\"}],\"name\":\"addTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"cook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paperValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"otcOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paperValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fridge\",\"type\":\"address\"}],\"name\":\"replaceFridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"new_dev2\",\"type\":\"address\"}],\"name\":\"setDevs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BasicV2Oven", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000048a5f437e3bf231755fe7af6bad4b06ba4acc213", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}