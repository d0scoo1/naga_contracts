{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/rewards/FlurryStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IFlurryStakingRewards} from \\\"../interfaces/IFlurryStakingRewards.sol\\\";\\nimport {BaseRewards} from \\\"./BaseRewards.sol\\\";\\nimport {ILPStakingRewards} from \\\"../interfaces/ILPStakingRewards.sol\\\";\\nimport {IRhoTokenRewards} from \\\"../interfaces/IRhoTokenRewards.sol\\\";\\n\\n/**\\n * @title Rewards for FLURRY Token Stakers\\n * @notice This reward scheme enables users to stake (lock) FLURRY tokens to earn more FLURRY tokens\\n * @notice FlurryToken is an ERC20 * BEP20 compliant token with 18 decimals.\\n * @dev all FLURRY rewards in the flurry protocol are held by this contract\\n * @dev This contract is also used by LPStakingRewards & RhoTokenRewards for claiming FLURRY\\n */\\ncontract FlurryStakingRewards is IFlurryStakingRewards, BaseRewards {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @dev events\\n    event FlurryRewardsRateChanged(uint256 blockNumber, uint256 rewardsRate);\\n    event RewardsEndUpdated(uint256 blockNumber, uint256 rewardsEndBlock);\\n    event Staked(address indexed user, uint256 blockNumber, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 blockNumber, uint256 amount);\\n    event StakeBalanceUpdate(address indexed user, uint256 blockNumber, uint256 amount);\\n    event TotalStakesChanged(uint256 totalStakes);\\n\\n    /// @dev roles of other rewards contracts\\n    bytes32 public constant LP_TOKEN_REWARDS_ROLE = keccak256(\\\"LP_TOKEN_REWARDS_ROLE\\\");\\n    bytes32 public constant RHO_TOKEN_REWARDS_ROLE = keccak256(\\\"RHO_TOKEN_REWARDS_ROLE\\\");\\n\\n    /// @dev no. of FLURRY reward per block\\n    uint256 public override rewardsRate;\\n\\n    /// @dev last block of time lock\\n    uint256 public lockEndBlock;\\n\\n    /// @dev block number that staking reward was last accrued at\\n    uint256 public lastUpdateBlock;\\n\\n    /// @dev staking reward entitlement per FLURRY staked\\n    uint256 public rewardsPerTokenStored;\\n\\n    /// @dev last block when rewards distubution end\\n    uint256 public rewardsEndBlock;\\n\\n    IERC20Upgradeable public flurryToken;\\n    uint256 public override totalStakes;\\n    uint256 public flurryTokenOne;\\n\\n    /**\\n     * @notice UserInfo\\n     * @param stake FLURRY stakes for each staker\\n     * @param rewardPerTokenPaid amount of reward already paid to staker per token\\n     * @param reward accumulated FLURRY reward\\n     */\\n    struct UserInfo {\\n        uint256 stake;\\n        uint256 rewardPerTokenPaid;\\n        uint256 reward;\\n    }\\n    mapping(address => UserInfo) public userInfo;\\n\\n    ILPStakingRewards public override lpStakingRewards;\\n    IRhoTokenRewards public override rhoTokenRewards;\\n\\n    /**\\n     * @notice initialize function is used in place of constructor for upgradeability\\n     * @dev Have to call initializers in the parent classes to proper initialize\\n     */\\n    function initialize(address flurryTokenAddr) external initializer notZeroAddr(flurryTokenAddr) {\\n        BaseRewards.__initialize();\\n        flurryToken = IERC20Upgradeable(flurryTokenAddr);\\n        flurryTokenOne = getTokenOne(flurryTokenAddr);\\n    }\\n\\n    function totalRewardsPool() external view override returns (uint256) {\\n        return _totalRewardsPool();\\n    }\\n\\n    function _totalRewardsPool() internal view returns (uint256) {\\n        return flurryToken.balanceOf(address(this)) - totalStakes;\\n    }\\n\\n    function stakeOf(address user) external view override notZeroAddr(user) returns (uint256) {\\n        return userInfo[user].stake;\\n    }\\n\\n    function rewardOf(address user) external view override notZeroAddr(user) returns (uint256) {\\n        return _earned(user);\\n    }\\n\\n    function claimableRewardOf(address user) external view override notZeroAddr(user) returns (uint256) {\\n        return block.number >= lockEndBlock ? _earned(user) : 0;\\n    }\\n\\n    function lastBlockApplicable() internal view returns (uint256) {\\n        return _lastBlockApplicable(rewardsEndBlock);\\n    }\\n\\n    function rewardsPerToken() public view override returns (uint256) {\\n        if (totalStakes == 0) return rewardsPerTokenStored;\\n        return\\n            rewardPerTokenInternal(\\n                rewardsPerTokenStored,\\n                lastBlockApplicable() - lastUpdateBlock,\\n                rewardRatePerTokenInternal(rewardsRate, flurryTokenOne, 1, totalStakes, 1)\\n            );\\n    }\\n\\n    function rewardRatePerTokenStaked() external view override returns (uint256) {\\n        if (totalStakes == 0) return type(uint256).max;\\n        if (block.number > rewardsEndBlock) return 0;\\n        return rewardRatePerTokenInternal(rewardsRate, flurryTokenOne, 1, totalStakes, 1);\\n    }\\n\\n    function updateRewardInternal() internal {\\n        rewardsPerTokenStored = rewardsPerToken();\\n        lastUpdateBlock = lastBlockApplicable();\\n    }\\n\\n    function updateReward(address addr) internal {\\n        updateRewardInternal();\\n        if (addr != address(0)) {\\n            userInfo[addr].reward = _earned(addr);\\n            userInfo[addr].rewardPerTokenPaid = rewardsPerTokenStored;\\n        }\\n    }\\n\\n    function _earned(address addr) internal view returns (uint256) {\\n        return\\n            super._earned(\\n                userInfo[addr].stake,\\n                rewardsPerToken() - userInfo[addr].rewardPerTokenPaid,\\n                flurryTokenOne,\\n                userInfo[addr].reward\\n            );\\n    }\\n\\n    function setRewardsRate(uint256 newRewardsRate) external override onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        updateRewardInternal();\\n        rewardsRate = newRewardsRate;\\n        emit FlurryRewardsRateChanged(block.number, rewardsRate);\\n    }\\n\\n    function startRewards(uint256 rewardsDuration)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n        isValidDuration(rewardsDuration)\\n    {\\n        require(block.number > rewardsEndBlock, \\\"Previous rewards period must complete before starting a new one\\\");\\n        updateRewardInternal();\\n        lastUpdateBlock = block.number;\\n        rewardsEndBlock = block.number + rewardsDuration;\\n        emit RewardsEndUpdated(block.number, rewardsEndBlock);\\n    }\\n\\n    function startRewardsToBlock(uint256 _rewardsEndBlock)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        whenNotPaused\\n    {\\n        require(block.number > rewardsEndBlock, \\\"Previous rewards period must complete before starting a new one\\\");\\n        require(_rewardsEndBlock > block.number, \\\"rewardsEndBlock must be greater than the current block number\\\");\\n        updateRewardInternal();\\n        lastUpdateBlock = block.number;\\n        rewardsEndBlock = _rewardsEndBlock;\\n        emit RewardsEndUpdated(block.number, rewardsEndBlock);\\n    }\\n\\n    function endRewards() external override onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (rewardsEndBlock > block.number) {\\n            rewardsEndBlock = block.number;\\n            emit RewardsEndUpdated(block.number, rewardsEndBlock);\\n        }\\n    }\\n\\n    function isLocked() external view override returns (bool) {\\n        return block.number <= lockEndBlock;\\n    }\\n\\n    function setTimeLock(uint256 lockDuration) external override onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        lockEndBlock = block.number + lockDuration;\\n    }\\n\\n    function earlyUnlock() external override onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        lockEndBlock = block.number;\\n    }\\n\\n    function setTimeLockEndBlock(uint256 _lockEndBlock) external override onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        require(_lockEndBlock >= block.number);\\n        lockEndBlock = _lockEndBlock;\\n    }\\n\\n    function stake(uint256 amount) external override whenNotPaused nonReentrant {\\n        address user = _msgSender();\\n        // check and update\\n        require(amount > 0, \\\"Cannot stake 0 tokens\\\");\\n        require(flurryToken.balanceOf(user) >= amount, \\\"Not Enough balance to stake\\\");\\n        updateReward(user);\\n        // state change\\n        userInfo[user].stake += amount;\\n        totalStakes += amount;\\n        // interaction\\n        emit Staked(user, block.number, amount);\\n        emit StakeBalanceUpdate(user, block.number, userInfo[user].stake);\\n        emit TotalStakesChanged(totalStakes);\\n        flurryToken.safeTransferFrom(user, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override whenNotPaused nonReentrant {\\n        _withdrawUser(_msgSender(), amount);\\n    }\\n\\n    function _withdrawUser(address user, uint256 amount) internal {\\n        // check and update\\n        require(amount > 0, \\\"Cannot withdraw 0 amount\\\");\\n        require(userInfo[user].stake >= amount, \\\"Exceeds staked amount\\\");\\n        updateReward(user);\\n        // state change\\n        userInfo[user].stake -= amount;\\n        totalStakes -= amount;\\n        // interaction\\n        emit Withdrawn(user, block.number, amount);\\n        emit StakeBalanceUpdate(user, block.number, userInfo[user].stake);\\n        emit TotalStakesChanged(totalStakes);\\n        flurryToken.safeTransfer(user, amount);\\n    }\\n\\n    function exit() external override whenNotPaused nonReentrant {\\n        _withdrawUser(_msgSender(), userInfo[_msgSender()].stake);\\n    }\\n\\n    function claimRewardInternal(address user) internal {\\n        if (block.number > lockEndBlock) {\\n            updateReward(user);\\n            if (userInfo[user].reward > 0) {\\n                userInfo[user].reward = grantFlurryInternal(user, userInfo[user].reward);\\n            }\\n        }\\n    }\\n\\n    function claimReward() external override whenNotPaused nonReentrant {\\n        require(this.claimableRewardOf(_msgSender()) > 0, \\\"nothing to claim\\\");\\n        claimRewardInternal(_msgSender());\\n    }\\n\\n    function claimAllRewards() external override whenNotPaused nonReentrant {\\n        require(this.totalClaimableRewardOf(_msgSender()) > 0, \\\"nothing to claim\\\");\\n        if (address(lpStakingRewards) != address(0)) lpStakingRewards.claimAllReward(_msgSender());\\n        if (address(rhoTokenRewards) != address(0)) rhoTokenRewards.claimAllReward(_msgSender());\\n        claimRewardInternal(_msgSender());\\n    }\\n\\n    function grantFlurry(address addr, uint256 amount) external override onlyLPOrRhoTokenRewards returns (uint256) {\\n        return grantFlurryInternal(addr, amount);\\n    }\\n\\n    function grantFlurryInternal(address addr, uint256 amount) internal notZeroAddr(addr) returns (uint256) {\\n        if (amount <= _totalRewardsPool()) {\\n            flurryToken.safeTransfer(addr, amount);\\n            emit RewardPaid(addr, amount);\\n            return 0;\\n        }\\n        emit NotEnoughBalance(addr, amount);\\n        return amount;\\n    }\\n\\n    function isStakeholder(address addr) external view notZeroAddr(addr) returns (bool) {\\n        return userInfo[addr].stake > 0;\\n    }\\n\\n    function sweepERC20Token(address token, address to) external override onlyRole(SWEEPER_ROLE) {\\n        require(token != address(flurryToken), \\\"!safe\\\");\\n        _sweepERC20Token(token, to);\\n    }\\n\\n    function totalRewardOf(address user) external view override notZeroAddr(user) returns (uint256) {\\n        uint256 otherRewards;\\n\\n        if (address(lpStakingRewards) != address(0)) otherRewards += lpStakingRewards.totalRewardOf(user);\\n        if (address(rhoTokenRewards) != address(0)) otherRewards += rhoTokenRewards.totalRewardOf(user);\\n        return otherRewards + this.rewardOf(user);\\n    }\\n\\n    function totalClaimableRewardOf(address user) external view override notZeroAddr(user) returns (uint256) {\\n        uint256 otherRewards;\\n\\n        if (address(lpStakingRewards) != address(0)) otherRewards += lpStakingRewards.totalClaimableRewardOf(user);\\n        if (address(rhoTokenRewards) != address(0)) otherRewards += rhoTokenRewards.totalClaimableRewardOf(user);\\n        return otherRewards + this.claimableRewardOf(user);\\n    }\\n\\n    function setRhoTokenRewardContract(address _rhoTokenRewardAddr)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        notZeroAddr(_rhoTokenRewardAddr)\\n        whenNotPaused\\n    {\\n        rhoTokenRewards = IRhoTokenRewards(_rhoTokenRewardAddr);\\n    }\\n\\n    function setLPRewardsContract(address lpRewardsAddr)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        notZeroAddr(lpRewardsAddr)\\n        whenNotPaused\\n    {\\n        lpStakingRewards = ILPStakingRewards(lpRewardsAddr);\\n    }\\n\\n    // modified from OZ onlyRole(), allowing the checking of multiple roles\\n    modifier onlyLPOrRhoTokenRewards() {\\n        require(\\n            hasRole(LP_TOKEN_REWARDS_ROLE, _msgSender()) || hasRole(RHO_TOKEN_REWARDS_ROLE, _msgSender()),\\n            string(\\n                abi.encodePacked(\\n                    \\\"AccessControl: account \\\",\\n                    StringsUpgradeable.toHexString(uint160(_msgSender()), 20),\\n                    \\\" is missing role \\\",\\n                    StringsUpgradeable.toHexString(uint256(LP_TOKEN_REWARDS_ROLE), 32),\\n                    \\\" or role \\\",\\n                    StringsUpgradeable.toHexString(uint256(RHO_TOKEN_REWARDS_ROLE), 32)\\n                )\\n            )\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlurryStakingRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {ILPStakingRewards} from \\\"../interfaces/ILPStakingRewards.sol\\\";\\nimport {IRhoTokenRewards} from \\\"../interfaces/IRhoTokenRewards.sol\\\";\\n\\n/**\\n * @title Flurry Staking Rewards Interface\\n * @notice Interface for Flurry token staking functions\\n *\\n */\\ninterface IFlurryStakingRewards {\\n    /**\\n     * @dev equals to balance of FLURRY minus total stakes\\n     * @return amount of FLURRY rewards available for the three reward schemes\\n     * (Flurry Staking, LP Token Staking and rhoToken Holding)\\n     */\\n    function totalRewardsPool() external view returns (uint256);\\n\\n    /**\\n     * @return aggregated FLURRY stakes from all stakers (in wei)\\n     */\\n    function totalStakes() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieve the stake balance for a stakeholder.\\n     * @param user Stakeholder address\\n     * @return user staked amount (in wei)\\n     */\\n    function stakeOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his rewards.\\n     * @param user The stakeholder to check rewards for.\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function rewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his claimable rewards.\\n     * @param user The stakeholder to check rewards for.\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function claimableRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check all his rewards.\\n     * Includes Staking Rewards + RhoToken Rewards + LP Token Rewards\\n     * @param user The stakeholder to check rewards for.\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function totalRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholderto check his claimable rewards.\\n     * Includes Staking Rewards + RhoToken Rewards + LP Token Rewards\\n     * @param user The stakeholder to check rewards for\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function totalClaimableRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @return amount of FLURRY distrubuted to all FLURRY stakers per block\\n     */\\n    function rewardsRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Total accumulated reward per token\\n     * @return Reward entitlement per FLURRY token staked (in wei)\\n     */\\n    function rewardsPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice current reward rate per FLURRY token staked\\n     * @return rewards rate in FLURRY per block per FLURRY staked scaled by 18 decimals\\n     */\\n    function rewardRatePerTokenStaked() external view returns (uint256);\\n\\n    /**\\n     * @notice A method to add a stake.\\n     * @param amount amount of flurry tokens to be staked (in wei)\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     * @notice A method to unstake.\\n     * @param amount amount to unstake (in wei)\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice A method to allow a stakeholder to withdraw his FLURRY staking rewards.\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @notice A method to allow a stakeholder to claim all his rewards.\\n     */\\n    function claimAllRewards() external;\\n\\n    /**\\n     * @notice NOT for external use\\n     * @dev only callable by LPStakingRewards or RhoTokenRewards for FLURRY distribution\\n     * @param addr address of LP Token staker / rhoToken holder\\n     * @param amount amount of FLURRY token rewards to grant (in wei)\\n     * @return outstanding amount if claim is not successful, 0 if successful\\n     */\\n    function grantFlurry(address addr, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to withdraw full stake.\\n     * Rewards are not automatically claimed. Use claimReward()\\n     */\\n    function exit() external;\\n\\n    /**\\n     * @notice Admin function - set rewards rate earned for FLURRY staking per block\\n     * @param newRewardsRate amount of FLURRY (in wei) per block\\n     */\\n    function setRewardsRate(uint256 newRewardsRate) external;\\n\\n    /**\\n     * @notice Admin function - A method to start rewards distribution\\n     * @param rewardsDuration rewards duration in number of blocks\\n     */\\n    function startRewards(uint256 rewardsDuration) external;\\n\\n    /**\\n     * @notice Admin function - A method to start rewards distribution\\n     * @param _rewardsEndBlock the precise block where the new reward distribution ends\\n     */\\n    function startRewardsToBlock(uint256 _rewardsEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - End Rewards distribution earlier, if there is one running\\n     */\\n    function endRewards() external;\\n\\n    /**\\n     * @return true if reward is locked, false otherwise\\n     */\\n    function isLocked() external view returns (bool);\\n\\n    /**\\n     * @notice Admin function - lock all rewards for all users for a given duration\\n     * This function should be called BEFORE startRewards()\\n     * @param lockDuration lock duration in number of blocks\\n     */\\n    function setTimeLock(uint256 lockDuration) external;\\n\\n    /**\\n     * @notice Admin function - unlock all rewards immediately, if there is a time lock\\n     */\\n    function earlyUnlock() external;\\n\\n    /**\\n     * @notice Admin function - lock FLURRY staking rewards until a specific block\\n     * @param _lockEndBlock lock rewards until specific block no.\\n     */\\n    function setTimeLockEndBlock(uint256 _lockEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - withdraw other ERC20 tokens sent to this contract\\n     * @param token ERC20 token address to be sweeped\\n     * @param to address for sending sweeped tokens to\\n     */\\n    function sweepERC20Token(address token, address to) external;\\n\\n    /**\\n     * @notice Admin function - set RhoTokenReward contract reference\\n     */\\n    function setRhoTokenRewardContract(address rhoTokenRewardAddr) external;\\n\\n    /**\\n     * @notice Admin function - set LP Rewards contract reference\\n     */\\n    function setLPRewardsContract(address lpRewardsAddr) external;\\n\\n    /**\\n     * @return reference to LP Staking Rewards contract\\n     */\\n    function lpStakingRewards() external returns (ILPStakingRewards);\\n\\n    /**\\n     * @return reference to RhoToken Rewards contract\\n     */\\n    function rhoTokenRewards() external returns (IRhoTokenRewards);\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/BaseRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * @title BaseRewards Abstract Contract\\n * @notice Abstract Contract to be inherited by LPStakingReward, StakingReward and RhoTokenReward.\\n * Implements the core logic as internal functions.\\n * *** Note: avoid using `super` keyword to avoid confusion because the derived contracts use multiple inheritance ***\\n */\\n\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nabstract contract BaseRewards is AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // events\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event NotEnoughBalance(address indexed user, uint256 withdrawalAmount);\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant SWEEPER_ROLE = keccak256(\\\"SWEEPER_ROLE\\\");\\n\\n    function __initialize() internal {\\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function getTokenOne(address token) internal view returns (uint256) {\\n        return 10**IERC20MetadataUpgradeable(token).decimals();\\n    }\\n\\n    /**\\n     * @notice Calculate accrued but unclaimed reward for a user\\n     * @param _tokenBalance balance of the rhoToken, OR staking ammount of LP/FLURRY\\n     * @param _netRewardPerToken accumulated reward minus the reward already paid to user, on a per token basis\\n     * @param _tokenOne decimal of the token\\n     * @param accumulatedReward accumulated reward of the user\\n     * @return claimable reward of the user\\n     */\\n    function _earned(\\n        uint256 _tokenBalance,\\n        uint256 _netRewardPerToken,\\n        uint256 _tokenOne,\\n        uint256 accumulatedReward\\n    ) internal pure returns (uint256) {\\n        return ((_tokenBalance * _netRewardPerToken) / _tokenOne) + accumulatedReward;\\n    }\\n\\n    /**\\n     * @notice Rewards are accrued up to this block (put aside in rewardsPerTokenPaid)\\n     * @return min(The current block # or last rewards accrual block #)\\n     */\\n    function _lastBlockApplicable(uint256 _rewardsEndBlock) internal view returns (uint256) {\\n        return MathUpgradeable.min(block.number, _rewardsEndBlock);\\n    }\\n\\n    function rewardRatePerTokenInternal(\\n        uint256 rewardRate,\\n        uint256 tokenOne,\\n        uint256 allocPoint,\\n        uint256 totalToken,\\n        uint256 totalAllocPoint\\n    ) internal pure returns (uint256) {\\n        return (rewardRate * tokenOne * allocPoint) / (totalToken * totalAllocPoint);\\n    }\\n\\n    function rewardPerTokenInternal(\\n        uint256 accruedRewardsPerToken,\\n        uint256 blockDelta,\\n        uint256 rewardRatePerToken\\n    ) internal pure returns (uint256) {\\n        return accruedRewardsPerToken + blockDelta * rewardRatePerToken;\\n    }\\n\\n    /**\\n     * admin functions to withdraw random token transfer to this contract\\n     */\\n    function _sweepERC20Token(address token, address to) internal notZeroTokenAddr(token) {\\n        IERC20Upgradeable tokenToSweep = IERC20Upgradeable(token);\\n        tokenToSweep.safeTransfer(to, tokenToSweep.balanceOf(address(this)));\\n    }\\n\\n    /** Pausable */\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    modifier notZeroAddr(address addr) {\\n        require(addr != address(0), \\\"address is zero\\\");\\n        _;\\n    }\\n\\n    modifier notZeroTokenAddr(address addr) {\\n        require(addr != address(0), \\\"token address is zero\\\");\\n        _;\\n    }\\n\\n    modifier isValidDuration(uint256 rewardDuration) {\\n        require(rewardDuration > 0, \\\"Reward duration cannot be zero\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPStakingRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IFlurryStakingRewards} from \\\"../interfaces/IFlurryStakingRewards.sol\\\";\\n\\n/**\\n * @title LP Staking Rewards Interface\\n * @notice Interface for FLURRY token rewards when staking LP tokens\\n */\\ninterface ILPStakingRewards {\\n    /**\\n     * @notice checks whether the staking of a LP token is supported by the reward scheme\\n     * @param lpToken address of LP Token contract\\n     * @return true if the reward scheme supports `lpToken`, false otherwise\\n     */\\n    function isSupported(address lpToken) external returns (bool);\\n\\n    /**\\n     * @param user user address\\n     * @return list of addresses of LP user has engaged in\\n     */\\n    function getUserEngagedPool(address user) external view returns (address[] memory);\\n\\n    /**\\n     * @return list of addresses of LP registered in this contract\\n     */\\n    function getPoolList() external view returns (address[] memory);\\n\\n    /**\\n     * @return amount of FLURRY distrubuted for all LP per block,\\n     * to be shared by the staking pools according to allocation points\\n     */\\n    function rewardsRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Admin function - set rewards rate earned for all LP per block\\n     * @param newRewardsRate amount of FLURRY (in wei) per block\\n     */\\n    function setRewardsRate(uint256 newRewardsRate) external;\\n\\n    /**\\n     * @notice Retrieve the stake balance for a stakeholder.\\n     * @param addr Stakeholder address\\n     * @param lpToken Address of LP Token contract\\n     * @return user staked amount (in wei)\\n     */\\n    function stakeOf(address addr, address lpToken) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his rewards for one LP token\\n     * @param user The stakeholder to check rewards for\\n     * @param lpToken Address of LP Token contract\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function rewardOf(address user, address lpToken) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his rewards earned for all LP token\\n     * @param user The stakeholder to check rewards for\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function totalRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his claimble rewards for all LP token\\n     * @param user The stakeholder to check rewards for\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function totalClaimableRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to add a stake.\\n     * @param lpToken Address of LP Token contract\\n     * @param amount amount of flurry tokens to be staked (in wei)\\n     */\\n    function stake(address lpToken, uint256 amount) external;\\n\\n    /**\\n     * @notice NOT for external use\\n     * @dev allows Flurry Staking Rewards contract to claim rewards for one LP on behalf of a user\\n     * @param onBehalfOf address of the user to claim rewards for\\n     * @param lpToken Address of LP Token contract\\n     */\\n    function claimReward(address onBehalfOf, address lpToken) external;\\n\\n    /**\\n     * @notice A method to allow a LP token holder to claim his rewards for one LP token\\n     * @param lpToken Address of LP Token contract\\n     * Note: If stakingRewards contract do not have enough tokens to pay,\\n     * this will fail silently and user rewards remains as a credit in this contract\\n     */\\n    function claimReward(address lpToken) external;\\n\\n    /**\\n     * @notice NOT for external use\\n     * @dev allows Flurry Staking Rewards contract to claim rewards for all LP on behalf of a user\\n     * @param onBehalfOf address of the user to claim rewards for\\n     */\\n    function claimAllReward(address onBehalfOf) external;\\n\\n    /**\\n     * @notice A method to allow a LP token holder to claim his rewards for all LP token\\n     * Note: If stakingRewards contract do not have enough tokens to pay,\\n     * this will fail silently and user rewards remains as a credit in this contract\\n     */\\n    function claimAllReward() external;\\n\\n    /**\\n     * @notice A method to unstake.\\n     * @param lpToken Address of LP Token contract\\n     * @param amount amount to unstake (in wei)\\n     */\\n    function withdraw(address lpToken, uint256 amount) external;\\n\\n    /**\\n     * @notice A method to allow a stakeholder to withdraw full stake.\\n     * @param lpToken Address of LP Token contract\\n     * Rewards are not automatically claimed. Use claimReward()\\n     */\\n    function exit(address lpToken) external;\\n\\n    /**\\n     * @notice Total accumulated reward per token\\n     * @param lpToken Address of LP Token contract\\n     * @return Reward entitlement per LP token staked (in wei)\\n     */\\n    function rewardsPerToken(address lpToken) external view returns (uint256);\\n\\n    /**\\n     * @notice current reward rate per LP token staked\\n     * @param lpToken Address of LP Token contract\\n     * @return rewards rate in FLURRY per block per LP staked scaled by 18 decimals\\n     */\\n    function rewardRatePerTokenStaked(address lpToken) external view returns (uint256);\\n\\n    /**\\n     * @notice Admin function - A method to set reward duration\\n     * @param lpToken Address of LP Token contract\\n     * @param rewardDuration Reward Duration in number of blocks\\n     */\\n    function startRewards(address lpToken, uint256 rewardDuration) external;\\n\\n    /**\\n     * @notice Admin function - A method to set reward duration\\n     * @param lpToken Address of LP Token contract\\n     * @param _rewardsEndBlock the precise block where the new reward distribution ends\\n     */\\n    function startRewardsToBlock(address lpToken, uint256 _rewardsEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - End Rewards distribution earlier if there is one running\\n     * @param lpToken Address of LP Token contract\\n     */\\n    function endRewards(address lpToken) external;\\n\\n    /**\\n     * @return true if rewards are locked for given lpToken, false if rewards are unlocked or if lpTokenis not supported\\n     * @param lpToken address of LP Token contract\\n     */\\n    function isLocked(address lpToken) external view returns (bool);\\n\\n    /**\\n     * @notice Admin function - lock rewards for given lpToken\\n     * @param lpToken address of the lpToken contract\\n     * @param lockDuration lock duration in number of blocks\\n     */\\n    function setTimeLock(address lpToken, uint256 lockDuration) external;\\n\\n    /**\\n     * @notice Admin function - lock rewards for given lpToken until a specific block\\n     * @param lpToken address of the lpToken contract\\n     * @param lockEndBlock lock rewards until specific block no.\\n     */\\n    function setTimeLockEndBlock(address lpToken, uint256 lockEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - lock all lpToken rewards\\n     * @param lockDuration lock duration in number of blocks\\n     */\\n    function setTimeLockForAllLPTokens(uint256 lockDuration) external;\\n\\n    /**\\n     * @notice Admin function - lock all lpToken rewards until a specific block\\n     * @param lockEndBlock lock rewards until specific block no.\\n     */\\n    function setTimeLockEndBlockForAllLPTokens(uint256 lockEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - unlock rewards for given lpToken\\n     * @param lpToken address of the lpToken contract\\n     */\\n    function earlyUnlock(address lpToken) external;\\n\\n    /**\\n     * @param lpToken address of the lpToken contract\\n     * @return the current lock end block number\\n     */\\n    function getLockEndBlock(address lpToken) external view returns (uint256);\\n\\n    /**\\n     * @notice Admin function - register a LP to this contract\\n     * @param lpToken address of the LP to be registered\\n     * @param allocPoint allocation points (weight) assigned to the given LP\\n     */\\n    function addLP(address lpToken, uint256 allocPoint) external;\\n\\n    /**\\n     * @notice Admin function - change the allocation points of a LP registered in this contract\\n     * @param lpToken address of the LP subject to change\\n     * @param allocPoint allocation points (weight) assigned to the given LP\\n     */\\n    function setLP(address lpToken, uint256 allocPoint) external;\\n\\n    /**\\n     * @notice Admin function - withdraw random token transfer to this contract\\n     * @param token ERC20 token address to be sweeped\\n     * @param to address for sending sweeped tokens to\\n     */\\n    function sweepERC20Token(address token, address to) external;\\n\\n    /**\\n     * @return reference to RhoToken Rewards contract\\n     */\\n    function flurryStakingRewards() external returns (IFlurryStakingRewards);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRhoTokenRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IFlurryStakingRewards} from \\\"../interfaces/IFlurryStakingRewards.sol\\\";\\n\\n/**\\n * @title RhoToken Rewards Interface\\n * @notice Interface for bonus FLURRY token rewards contract for RhoToken holders\\n */\\ninterface IRhoTokenRewards {\\n    /**\\n     * @notice checks whether the rewards for a rhoToken is supported by the reward scheme\\n     * @param rhoToken address of rhoToken contract\\n     * @return true if the reward scheme supports `rhoToken`, false otherwise\\n     */\\n    function isSupported(address rhoToken) external returns (bool);\\n\\n    /**\\n     * @return list of addresses of rhoTokens registered in this contract\\n     */\\n    function getRhoTokenList() external view returns (address[] memory);\\n\\n    /**\\n     * @return amount of FLURRY distributed for all rhoTokens per block\\n     */\\n    function rewardsRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Admin function - set reward rate earned for all rhoTokens per block\\n     * @param newRewardsRate amount of FLURRY (in wei) per block\\n     */\\n    function setRewardsRate(uint256 newRewardsRate) external;\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his rewards.\\n     * @param user The stakeholder to check rewards for.\\n     * @param rhoToken Address of rhoToken contract\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function rewardOf(address user, address rhoToken) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his rewards for all rhoToken\\n     * @param user The stakeholder to check rewards for\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function totalRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice A method to allow a stakeholder to check his rewards for all rhoToken\\n     * @param user The stakeholder to check rewards for\\n     * @return Accumulated rewards of addr holder (in wei)\\n     */\\n    function totalClaimableRewardOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Total accumulated reward per token\\n     * @param rhoToken Address of rhoToken contract\\n     * @return Reward entitlement for rho token\\n     */\\n    function rewardsPerToken(address rhoToken) external view returns (uint256);\\n\\n    /**\\n     * @notice current reward rate per token staked\\n     * @param rhoToken Address of rhoToken contract\\n     * @return reward rate denominated in FLURRY per block\\n     */\\n    function rewardRatePerRhoToken(address rhoToken) external view returns (uint256);\\n\\n    /**\\n     * @notice Admin function - A method to set reward duration\\n     * @param rhoToken Address of rhoToken contract\\n     * @param rewardDuration Reward duration in number of blocks\\n     */\\n    function startRewards(address rhoToken, uint256 rewardDuration) external;\\n\\n    /**\\n     * @notice Admin function - A method to set reward duration\\n     * @param rhoToken Address of rhoToken contract\\n     * @param _rewardsEndBlock the precise block where the new reward distribution ends\\n     */\\n    function startRewardsToBlock(address rhoToken, uint256 _rewardsEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - End Rewards distribution earlier, if there is one running\\n     * @param rhoToken Address of rhoToken contract\\n     */\\n    function endRewards(address rhoToken) external;\\n\\n    /**\\n     * @notice Calculate and allocate rewards token for address holder\\n     * Rewards should accrue from _lastUpdateBlock to lastBlockApplicable\\n     * rewardsPerToken is based on the total supply of the RhoToken, hence\\n     * this function needs to be called every time total supply changes\\n     * @dev intended to be called externally by RhoToken contract modifier, and internally\\n     * @param user the user to update reward for\\n     * @param rhoToken the rhoToken to update reward for\\n     */\\n    function updateReward(address user, address rhoToken) external;\\n\\n    /**\\n     * @notice NOT for external use\\n     * @dev allows Flurry Staking Rewards contract to claim rewards for one rhoToken on behalf of a user\\n     * @param onBehalfOf address of the user to claim rewards for\\n     * @param rhoToken Address of rhoToken contract\\n     */\\n    function claimReward(address onBehalfOf, address rhoToken) external;\\n\\n    /**\\n     * @notice A method to allow a rhoToken holder to claim his rewards for one rhoToken\\n     * @param rhoToken Address of rhoToken contract\\n     * Note: If stakingRewards contract do not have enough tokens to pay,\\n     * this will fail silently and user rewards remains as a credit in this contract\\n     */\\n    function claimReward(address rhoToken) external;\\n\\n    /**\\n     * @notice NOT for external use\\n     * @dev allows Flurry Staking Rewards contract to claim rewards for all rhoTokens on behalf of a user\\n     * @param onBehalfOf address of the user to claim rewards for\\n     */\\n    function claimAllReward(address onBehalfOf) external;\\n\\n    /**\\n     * @notice A method to allow a rhoToken holder to claim his rewards for all rhoTokens\\n     * Note: If stakingRewards contract do not have enough tokens to pay,\\n     * this will fail silently and user rewards remains as a credit in this contract\\n     */\\n    function claimAllReward() external;\\n\\n    /**\\n     * @return true if rewards are locked for given rhoToken, false if rewards are unlocked or if rhoToken is not supported\\n     * @param rhoToken address of rhoToken contract\\n     */\\n    function isLocked(address rhoToken) external view returns (bool);\\n\\n    /**\\n     * @notice Admin function - lock rewards for given rhoToken\\n     * @param rhoToken address of the rhoToken contract\\n     * @param lockDuration lock duration in number of blocks\\n     */\\n    function setTimeLock(address rhoToken, uint256 lockDuration) external;\\n\\n    /**\\n     * @notice Admin function - lock rewards for given rhoToken until a specific block\\n     * @param rhoToken address of the rhoToken contract\\n     * @param lockEndBlock lock rewards until specific block no.\\n     */\\n    function setTimeLockEndBlock(address rhoToken, uint256 lockEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - lock all rho Staking rewards\\n     * @param lockDuration lock duration in number of blocks\\n     */\\n    function setTimeLockForAllRho(uint256 lockDuration) external;\\n\\n    /**\\n     * @notice Admin function - lock all rho Staking rewards until a specific block\\n     * @param lockEndBlock lock rewards until specific block no.\\n     */\\n    function setTimeLockEndBlockForAllRho(uint256 lockEndBlock) external;\\n\\n    /**\\n     * @notice Admin function - unlock rewards for given rhoToken\\n     * @param rhoToken address of the rhoToken contract\\n     */\\n    function earlyUnlock(address rhoToken) external;\\n\\n    /**\\n     * @param rhoToken address of the rhoToken contract\\n     * @return the current lock end block number\\n     */\\n    function getLockEndBlock(address rhoToken) external view returns (uint256);\\n\\n    /**\\n     * @notice Admin function - register a rhoToken to this contract\\n     * @param rhoToken address of the rhoToken to be registered\\n     * @param allocPoint allocation points (weight) assigned to the given rhoToken\\n     */\\n    function addRhoToken(address rhoToken, uint256 allocPoint) external;\\n\\n    /**\\n     * @notice Admin function - change the allocation points of a rhoToken registered in this contract\\n     * @param rhoToken address of the rhoToken subject to change\\n     * @param allocPoint allocation points (weight) assigned to the given rhoToken\\n     */\\n    function setRhoToken(address rhoToken, uint256 allocPoint) external;\\n\\n    /**\\n     * @notice Admin function - withdraw random token transfer to this contract\\n     * @param token ERC20 token address to be sweeped\\n     * @param to address for sending sweeped tokens to\\n     */\\n    function sweepERC20Token(address token, address to) external;\\n\\n    /**\\n     * @return reference to RhoToken Rewards contract\\n     */\\n    function flurryStakingRewards() external returns (IFlurryStakingRewards);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsRate\",\"type\":\"uint256\"}],\"name\":\"FlurryRewardsRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsEndBlock\",\"type\":\"uint256\"}],\"name\":\"RewardsEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBalanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakes\",\"type\":\"uint256\"}],\"name\":\"TotalStakesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_TOKEN_REWARDS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RHO_TOKEN_REWARDS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flurryToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flurryTokenOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grantFlurry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flurryTokenAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakingRewards\",\"outputs\":[{\"internalType\":\"contract ILPStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatePerTokenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rhoTokenRewards\",\"outputs\":[{\"internalType\":\"contract IRhoTokenRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpRewardsAddr\",\"type\":\"address\"}],\"name\":\"setLPRewardsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardsRate\",\"type\":\"uint256\"}],\"name\":\"setRewardsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rhoTokenRewardAddr\",\"type\":\"address\"}],\"name\":\"setRhoTokenRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"setTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockEndBlock\",\"type\":\"uint256\"}],\"name\":\"setTimeLockEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"startRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsEndBlock\",\"type\":\"uint256\"}],\"name\":\"startRewardsToBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalClaimableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlurryStakingRewards", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}