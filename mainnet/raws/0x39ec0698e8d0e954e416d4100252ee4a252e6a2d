{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/// @title SoulMinter\r\n/// @author Miguel Piedrafita\r\n/// @notice Barebones contract to mint Soulbound NFTs\r\ncontract SoulMinter {\r\n    /// @notice Thrown when trying to transfer a Soulbound token\r\n    error Soulbound();\r\n\r\n    /// @notice Emitted when minting a Soulbound NFT\r\n    /// @param from Who the token comes from. Will always be address(0)\r\n    /// @param to The token recipient\r\n    /// @param id The ID of the minted token\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed id\r\n    );\r\n\r\n    /// @notice The symbol for the token\r\n    string public constant symbol = \"SOUL\";\r\n\r\n    /// @notice The name for the token\r\n    string public constant name = \"Soulbound NFT\";\r\n\r\n    /// @notice The owner of this contract (set to the deployer)\r\n    address public immutable owner = msg.sender;\r\n\r\n    /// @notice Get the metadata URI for a certain tokenID\r\n    mapping(uint256 => string) public tokenURI;\r\n\r\n    /// @notice Get the owner of a certain tokenID\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    /// @notice Get how many SoulMinter NFTs a certain user owns\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    /// @dev Counter for the next tokenID, defaults to 1 for better gas on first mint\r\n    uint256 internal nextTokenId = 1;\r\n\r\n    constructor() payable {}\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function approve(address, uint256) public virtual {\r\n        revert Soulbound();\r\n    }\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function isApprovedForAll(address, address) public pure {\r\n        revert Soulbound();\r\n    }\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function getApproved(uint256) public pure {\r\n        revert Soulbound();\r\n    }\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function setApprovalForAll(address, bool) public virtual {\r\n        revert Soulbound();\r\n    }\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual {\r\n        revert Soulbound();\r\n    }\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function safeTransferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual {\r\n        revert Soulbound();\r\n    }\r\n\r\n    /// @notice This function was disabled to make the token Soulbound. Calling it will revert\r\n    function safeTransferFrom(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) public virtual {\r\n        revert Soulbound();\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /// @notice Mint a new Soulbound NFT to `to`\r\n    /// @param to The recipient of the NFT\r\n    /// @param metaURI The URL to the token metadata\r\n    function mint(address to, string calldata metaURI) public payable {\r\n        unchecked {\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[nextTokenId] = to;\r\n        tokenURI[nextTokenId] = metaURI;\r\n\r\n        emit Transfer(address(0), to, nextTokenId++);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Soulbound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metaURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SoulMinter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://31f6e8d07225e7f8012c4e3d98ea8322c74c1e0afb8850ad563560047648db98"}]}