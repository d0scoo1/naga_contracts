{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.4;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PreSale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        address buyer;\r\n        uint256 ptokenAmount;\r\n    }\r\n\r\n    IERC20 public PTOKEN;\r\n    uint256 public PTOKEN_DECIMALS = 9;\r\n    IERC20 public DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address public Recipient;\r\n\r\n    uint256 public tokenRatePerEth = 100; // 100 * (10 ** decimals) PTOKEN per DAI\r\n    uint256 public minDAILimit = 100 ether;\r\n    uint256 public maxDAILimit = 2000 ether;\r\n    uint256 public softCap = 100000 ether;\r\n    uint256 public hardCap = 200000 ether;\r\n    uint256 public totalRaisedDAI = 0; // total DAI raised by sale\r\n    uint256 public totaltokenSold = 0;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    bool public claimOpened;\r\n    bool public contractPaused;\r\n\r\n    mapping(address => uint256) private _totalPaid;\r\n    mapping(address => UserInfo) public userinfo;\r\n    event Deposited(uint amount);\r\n    event Claimed(address receiver, uint amount);\r\n\r\n    constructor(uint256 _startTime, uint256 _endTime) {\r\n        require(_startTime > block.timestamp, 'past timestamp');\r\n        require(_endTime > _startTime, 'wrong timestamp');\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        Recipient = msg.sender;\r\n    }\r\n\r\n    modifier checkIfPaused() {\r\n        require(contractPaused == false, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    function setPresaleToken(address tokenaddress) external onlyOwner {\r\n        require( tokenaddress != address(0) );\r\n        PTOKEN = IERC20(tokenaddress);\r\n    }\r\n\r\n    function setRecipient(address recipient) external onlyOwner {\r\n        Recipient = recipient;\r\n    }\r\n\r\n    function setTokenRatePerEth(uint256 rate) external onlyOwner {\r\n        tokenRatePerEth = rate;\r\n    }\r\n\r\n    function setMinDAILimit(uint256 amount) external onlyOwner {\r\n        minDAILimit = amount;    \r\n    }\r\n\r\n    function setMaxDAILimit(uint256 amount) external onlyOwner {\r\n        maxDAILimit = amount;    \r\n    }\r\n    \r\n    function updateCap(uint256 _hardcap, uint256 _softcap) external onlyOwner {\r\n        softCap = _softcap;\r\n        hardCap = _hardcap;\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime) external onlyOwner {\r\n        require(_startTime > block.timestamp, 'past timestamp');\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setEndTime(uint256 _endTime) external onlyOwner {\r\n        require(_endTime > startTime, 'should be bigger than start time');\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function openClaim(address tokenaddress) external onlyOwner {\r\n        require(!claimOpened, 'Already opened');\r\n        claimOpened = !claimOpened;\r\n        require( tokenaddress != address(0) );\r\n        PTOKEN = IERC20(tokenaddress);\r\n    }\r\n\r\n    function togglePause() external onlyOwner returns (bool){\r\n        contractPaused = !contractPaused;\r\n        return contractPaused;\r\n    }\r\n\r\n    function deposit(uint256 amount) public checkIfPaused {\r\n        require(block.timestamp > startTime, 'not started');\r\n        require(block.timestamp < endTime, 'ended');\r\n        require(totalRaisedDAI <= hardCap, 'limited cap');\r\n        require(\r\n                _totalPaid[msg.sender].add(amount) <= maxDAILimit\r\n                && _totalPaid[msg.sender].add(amount) >= minDAILimit,\r\n                \"Invalid Amount\"\r\n        );\r\n        uint256 tokenAmount = getTokensPerEth(amount);\r\n        \r\n        if (userinfo[msg.sender].buyer == address(0)) {\r\n            UserInfo memory l;\r\n            l.buyer = msg.sender;\r\n            l.ptokenAmount = tokenAmount;\r\n            userinfo[msg.sender] = l;\r\n        }\r\n        else {\r\n            userinfo[msg.sender].ptokenAmount += tokenAmount;\r\n        }\r\n\r\n        totalRaisedDAI = totalRaisedDAI.add(amount);\r\n        totaltokenSold = totaltokenSold.add(tokenAmount);\r\n        _totalPaid[msg.sender] = _totalPaid[msg.sender].add(amount);\r\n        DAI.transferFrom(msg.sender, Recipient, amount);\r\n        emit Deposited(amount);\r\n    }\r\n\r\n    function claim() public {\r\n        UserInfo storage l = userinfo[msg.sender];\r\n        require(l.buyer == msg.sender, \"You are not allowed to claim\");\r\n        require(claimOpened, \"Claim not open yet\");\r\n        uint amount = l.ptokenAmount;\r\n        l.ptokenAmount = 0;\r\n        require(amount <= PTOKEN.balanceOf(address(this)), \"Insufficient balance\");\r\n        PTOKEN.transfer(msg.sender, amount);\r\n        emit Claimed(msg.sender, amount);\r\n    }\r\n\r\n    function getUnsoldTokens(address token, address to) external onlyOwner {\r\n        require(block.timestamp > endTime, \"You cannot get tokens until the presale is closed.\");\r\n        if(token == address(0)) {\r\n            payable(to).transfer(address(this).balance);\r\n        } else {\r\n            IERC20(token).transfer(to, IERC20(token).balanceOf(address(this)) );\r\n        }\r\n    }\r\n\r\n    function getAvailableAmount(address account) external view returns ( uint256 ) {\r\n        return maxDAILimit.sub(_totalPaid[account]);\r\n    }\r\n\r\n    function getTokensPerEth(uint256 amount) internal view returns(uint256) {\r\n        return amount.mul(tokenRatePerEth).div(10**(uint256(18).sub(PTOKEN_DECIMALS)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PTOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PTOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDAILimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDAILimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"}],\"name\":\"openClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDAILimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinDAILimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"}],\"name\":\"setPresaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTokenRatePerEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRatePerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totaltokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softcap\",\"type\":\"uint256\"}],\"name\":\"updateCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userinfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ptokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PreSale", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000062af1dd00000000000000000000000000000000000000000000000000000000062b31250", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c3d85d3fc11354add8a73f3cf5b8d3eeed079bbce641fb47aed174c1b318bb1a"}]}