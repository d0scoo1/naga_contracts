{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/MultiBeneficiaryLock.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * A gas optimized implementation of a vesting contract for tokens according to a predetermined vesting schedule\r\n * for multiple beneficiaries. Beneficiaries can choose how often they invoke release() to receive the unlocked\r\n * tokens. There are several steps to use this contract\r\n *  - construction with token address, length of vesting period, and release interval\r\n *  - init of the beneficiaries with their respective amounts\r\n *  - launch of the contract when the launch date is known and after enough tokens are received.\r\n */\r\ncontract MultiBeneficiaryLock is Ownable {\r\n\r\n    IERC20 private immutable token;\r\n    uint32 private immutable period;\r\n    uint32 private immutable interval;\r\n    uint256 private start;\r\n    uint256 private totalTokens;\r\n\r\n    struct Balance {\r\n        uint256 released;\r\n        uint256 total;\r\n    }\r\n\r\n    mapping(address => Balance) private balance;\r\n\r\n    modifier notLaunched {\r\n        require(start == 0, \"MBL01\");\r\n        _;\r\n    }\r\n    modifier launched {\r\n        require(start > 0, \"MBL02\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Construct a MultiBeneficiary lock contract that has the specified vesting period in days\r\n     * and a release interval in days when new tokens prorata become available.\r\n     */\r\n    constructor(IERC20 tokenAddress, uint32 periodDays, uint32 intervalDays) {\r\n        require(intervalDays <= periodDays, \"MBL03\");\r\n        token = tokenAddress;\r\n        period = periodDays;\r\n        interval = intervalDays;\r\n\r\n    }\r\n\r\n    /**\r\n     * Initialize beneficiaries. Provide the list of beneficiaries for this lock contract and their respective\r\n     * balances. Only the owner can call this function.\r\n     * As this is a gas intensive method for large arrays, check for duplicate addresses is left out. It is the\r\n     * responsibility of the owner to prevent duplicates which can be validated by calling checkInitBeneficiaries upfront.\r\n     */\r\n    function initBeneficiaries(address[] calldata addresses,\r\n        uint256[] calldata amounts) external onlyOwner notLaunched {\r\n        require(totalTokens == 0, \"MBL04\");\r\n        require(addresses.length == amounts.length, \"MBL05\");\r\n        uint256 total = 0;\r\n        for (uint256 i=0; i < addresses.length; i++) {\r\n            total = total + amounts[i];\r\n            balance[addresses[i]] = Balance(0, amounts[i]);\r\n        }\r\n        totalTokens = total;\r\n    }\r\n\r\n    /**\r\n     * Check that the given list of beneficiaries is sane. Gasless check which can be called before initBeneficiaries.\r\n     */\r\n    function checkInitBeneficiaries(address[] calldata addresses, uint256[] calldata amounts) external view onlyOwner notLaunched returns (uint256){\r\n        require(totalTokens == 0, \"MBL04\");\r\n        require(addresses.length == amounts.length, \"MBL05\");\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i=0; i < addresses.length; i++) {\r\n            total = total + amounts[i];\r\n            require(amounts[i] > 0, \"MBL06\");\r\n            for (uint256 j = i + 1; j < addresses.length; j++) {\r\n                require(addresses[i] != addresses[j], \"MBL07\");\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Return the minium amount of tokens that is required for the contract to be launched\r\n     * only relevant after init.\r\n     */\r\n    function tokenCountOnLaunch() external view returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    /**\r\n     * Return if all preconditions are met for the lock contract to launch:\r\n     * not launched yet, initialized and token balance enough.\r\n     */\r\n    function readyForLaunch() external view returns (bool) {\r\n        return (start == 0) && (totalTokens > 0) && (token.balanceOf(address(this)) >= totalTokens);\r\n    }\r\n\r\n    /**\r\n     * Launch the contract given a start block time as the basis for the vesting period.\r\n     * when blocktime reaches startBlocktime, the first interval wait for release starts.\r\n     * blocktime in seconds since epoch.\r\n     */\r\n    function launch(uint256 startBlocktime) external notLaunched onlyOwner {\r\n        require(startBlocktime > 0, \"MBL08\");\r\n        require(totalTokens > 0, \"MBL09\");\r\n        require(token.balanceOf(address(this)) >= totalTokens, \"MBL10\");\r\n        start = startBlocktime;\r\n    }\r\n\r\n    /**\r\n     * @return the token being held.\r\n     */\r\n    function erc20() external view returns (IERC20) {\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * @return number of tokens still locked up for a particular beneficiary\r\n     */\r\n    function locked(address holder) external view returns (uint256){\r\n        return balance[holder].total - balance[holder].released - amountCanRelease(holder);\r\n    }\r\n\r\n    /**\r\n     * @return the amount of tokens that have already been released for a particular beneficiary\r\n     */\r\n    function released(address holder) external view returns (uint256){\r\n        return balance[holder].released;\r\n    }\r\n\r\n    /**\r\n     * @return block.timestamp\r\n     */\r\n    function blocktime() internal virtual view returns (uint256){\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @return number of days since contract's launchdate\r\n     * Only relevant when launched.\r\n     */\r\n    function calculateDaysSinceStart() private view returns (uint256){\r\n        uint256 ts = blocktime();\r\n        if (ts < start) return 0;\r\n        return (ts - start) / (1 days);\r\n    }\r\n\r\n    /**\r\n     * @return the amount of tokens that can be released to the beneficiary at this time\r\n     */\r\n    function amountCanRelease(address holder) public view returns (uint256){\r\n        // not launched\r\n        if (start == 0) return 0;\r\n        Balance memory beneficiaryBalance = balance[holder];\r\n        uint256 amount = beneficiaryBalance.total - beneficiaryBalance.released;\r\n        if (amount == 0) return 0;\r\n        uint256 daysSinceStart = calculateDaysSinceStart();\r\n        if (daysSinceStart > period) return amount;\r\n        uint256 amountPerDay = beneficiaryBalance.total / period;\r\n        uint256 daysStartToLastRelease = beneficiaryBalance.released / amountPerDay;\r\n        // starttime to last release date's interval start date\r\n        uint256 daysSinceLastRelease = daysSinceStart - daysStartToLastRelease;\r\n        if (daysSinceLastRelease < interval) return 0;\r\n        return (daysSinceLastRelease / interval * interval) * amountPerDay;\r\n    }\r\n\r\n    /**\r\n     * Release all tokens that can be released for a particular beneficiary. Invoker pays the gas.\r\n     * Anyone can invoke.\r\n     */\r\n    function releaseFor(address holder) public launched {\r\n        uint256 amountToRelease = amountCanRelease(holder);\r\n        require(amountToRelease > 0);\r\n        assert(balance[holder].total - balance[holder].released >= amountToRelease);\r\n        balance[holder].released += amountToRelease;\r\n        require(token.transfer(holder, amountToRelease), \"MBL11\");\r\n    }\r\n\r\n    /**\r\n     * Release all tokens that can be released for msg.sender.\r\n     */\r\n    function release() external {\r\n        releaseFor(msg.sender);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"periodDays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"intervalDays\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"amountCanRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"checkInitBeneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"initBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlocktime\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyForLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCountOnLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiBeneficiaryLock", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000037e83a94c6b1bdb816b59ac71dd02cf154d8111f00000000000000000000000000000000000000000000000000000000000001680000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://791416686733f7488d4e86cec376d9d4f0f0bc523977b1a4f292b2ca6780c277"}]}