{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-02-11\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: interfaces/IMintableERC20.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n/**\r\n * @notice ERC20-compliant interface with added\r\n *         function for minting new tokens to addresses\r\n *\r\n * See {IERC20}\r\n */\r\ninterface IMintableERC20 is IERC20 {\r\n  /**\r\n   * @dev Allows issuing new tokens to an address\r\n   *\r\n   * @dev Should have restricted access\r\n   */\r\n  function mint(address _to, uint256 _amount) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: BeachBumV2Staking.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Staking contract that allows NFT users\r\n *         to temporarily lock their NFTs to earn\r\n *         ERC-20 token rewards\r\n *\r\n * The NFTs are locked inside this contract for the\r\n * duration of the staking period while allowing the\r\n * user to unstake at any time\r\n *\r\n * While the NFTs are staked, they are technically\r\n * owned by this contract and cannot be moved or placed\r\n * on any marketplace\r\n *\r\n * The contract allows users to stake and unstake multiple\r\n * NFTs efficiently, in one transaction\r\n *\r\n * Staking rewards are paid out to users once\r\n * they unstake their NFTs and are calculated\r\n * based on a rounded down number of days the NFTs\r\n * were staken for\r\n *\r\n * Some of the rarest NFTs are boosted by the contract\r\n * owner to receive bigger staking rewards\r\n *\r\n * @dev Features a contract owner that is able to change\r\n *      the daily rewards, the boosted NFT list and the\r\n *      boosted NFT daily rewards\r\n */\r\ncontract BeachBumV2Staking is ERC721Holder, Ownable {\r\n  using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n  /**\r\n   * @notice Stores the ERC-20 token that will\r\n   *         be paid out to NFT holders for staking\r\n   */\r\n  IMintableERC20 public erc20;\r\n\r\n  /**\r\n   * @notice Stores the ERC-721 token that will\r\n   *         be staken to receive ERC-20 rewards\r\n   */\r\n  IERC721 public erc721;\r\n\r\n  /**\r\n   * @notice Amount of tokens earned for each\r\n   *         day (24 hours) the token was staked for\r\n   *\r\n   * @dev Can be changed by contract owner via setDailyRewards()\r\n   */\r\n  uint128 public dailyRewards;\r\n\r\n  /**\r\n   * @notice Some NFTs are boosted to receive bigger token\r\n   *         rewards. This multiplier shows how much more\r\n   *         they will receive\r\n   *\r\n   * E.g. dailyRewardBoostMultiplier = 10 means that the boosted\r\n   * NFTs will receive 10 times the dailyRewards\r\n   *\r\n   * @dev Can be changed by contract owner via setDailyRewardBoostMultiplier()\r\n   */\r\n  uint128 public dailyRewardBoostMultiplier;\r\n\r\n  /**\r\n   * @notice Boosted NFTs contained in this list\r\n   *         earn bigger daily rewards\r\n   *\r\n   * @dev We use an EnumerableSet to store this data\r\n   *      instead of an array to be able to query in\r\n   *      O(1) complexity\r\n   *\r\n   ** @dev Can be changed by contract owner via setBoostedNftIds()\r\n   */\r\n  EnumerableSet.UintSet private boostedNftIds;\r\n\r\n  /**\r\n   * @notice Stores ownership information for staked\r\n   *         NFTs\r\n   */\r\n  mapping(uint256 => address) public ownerOf;\r\n\r\n  /**\r\n   * @notice Stores time staking started for staked\r\n   *         NFTs\r\n   */\r\n  mapping(uint256 => uint256) public stakedAt;\r\n\r\n  /**\r\n   * @dev Stores the staked tokens of an address\r\n   */\r\n  mapping(address => EnumerableSet.UintSet) private stakedTokens;\r\n\r\n  /**\r\n   * @dev Smart contract unique identifier, a random number\r\n   *\r\n   * @dev Should be regenerated each time smart contact source code is changed\r\n   *      and changes smart contract itself is to be redeployed\r\n   *\r\n   * @dev Generated using https://www.random.org/bytes/\r\n   */\r\n\tuint256 public constant UID = 0x78ea82e97e97cd54405b116b0209cbaf8bcb22911b5ad1045e81ea6caf7d47fa;\r\n\r\n  /**\r\n   * @dev Sets initialization variables which cannot be\r\n   *      changed in the future\r\n   *\r\n   * @param _erc20Address address of erc20 rewards token\r\n   * @param _erc721Address address of erc721 token to be staken for rewards\r\n   * @param _dailyRewards daily amount of tokens to be paid to stakers for every day\r\n   *                       they have staken an NFT\r\n   * @param _boostedNftIds boosted NFTs receive bigger rewards\r\n   * @param _dailyRewardBoostMultiplier multiplier of rewards for boosted NFTs\r\n   */\r\n  constructor(\r\n    address _erc20Address,\r\n    address _erc721Address,\r\n    uint128 _dailyRewards,\r\n    uint256[] memory _boostedNftIds,\r\n    uint128 _dailyRewardBoostMultiplier\r\n  ) {\r\n    erc20 = IMintableERC20(_erc20Address);\r\n    erc721 = IERC721(_erc721Address);\r\n    setDailyRewards(_dailyRewards);\r\n    setBoostedNftIds(_boostedNftIds);\r\n    setDailyRewardBoostMultiplier(_dailyRewardBoostMultiplier);\r\n  }\r\n\r\n      function setTokenERC20 (address _erc20Address) public onlyOwner {\r\n      erc20 = IMintableERC20(_erc20Address);\r\n  }\r\n\r\n    function setTokenERC721 (address _erc721Address) public onlyOwner {\r\n      erc721 = IERC721(_erc721Address);\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted every time a token is staked\r\n   *\r\n   * Emitted in stake()\r\n   *\r\n   * @param by address that staked the NFT\r\n   * @param time block timestamp the NFT were staked at\r\n   * @param tokenId token ID of NFT that was staken\r\n   */\r\n  event Staked(address indexed by, uint256 indexed tokenId, uint256 time);\r\n\r\n  /**\r\n   * @dev Emitted every time a token is unstaked\r\n   *\r\n   * Emitted in unstake()\r\n   *\r\n   * @param by address that unstaked the NFT\r\n   * @param time block timestamp the NFT were staked at\r\n   * @param tokenId token ID of NFT that was unstaken\r\n   * @param stakedAt when the NFT initially staked at\r\n   * @param reward how many tokens user got for the\r\n   *               staking of the NFT\r\n   */\r\n  event Unstaked(address indexed by, uint256 indexed tokenId, uint256 time, uint256 stakedAt, uint256 reward);\r\n\r\n  /**\r\n   * @dev Emitted when the boosted NFT ids is changed\r\n   *\r\n   * Emitted in setDailyReward()\r\n   *\r\n   * @param by address that changed the daily reward\r\n   * @param oldDailyRewards old daily reward\r\n   * @param newDailyRewards new daily reward in effect\r\n   */\r\n  event DailyRewardsChanged(address indexed by, uint128 oldDailyRewards, uint128 newDailyRewards);\r\n\r\n  /**\r\n   * @dev Emitted when the boosted NFT daily reward\r\n   *      multiplier is changed\r\n   *\r\n   * Emitted in setDailyRewardBoostMultiplier()\r\n   *\r\n   * @param by address that changed the daily reward boost multiplier\r\n   * @param oldDailyRewardBoostMultiplier old daily reward boost multiplier\r\n   * @param newDailyRewardBoostMultiplier new daily reward boost multiplier\r\n   */\r\n  event DailyRewardBoostMultiplierChanged(\r\n    address indexed by,\r\n    uint128 oldDailyRewardBoostMultiplier,\r\n    uint128 newDailyRewardBoostMultiplier\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the boosted NFT ids change\r\n   *\r\n   * Emitted in setBoostedNftIds()\r\n   *\r\n   * @param by address that changed the boosted NFT ids\r\n   * @param oldBoostedNftIds old boosted NFT ids\r\n   * @param newBoostedNftIds new boosted NFT ids\r\n   */\r\n  event BoostedNftIdsChanged(address indexed by, uint256[] oldBoostedNftIds, uint256[] newBoostedNftIds);\r\n\r\n  /**\r\n   * @notice Checks whether a token is boosted to receive\r\n   *         bigger staking rewards\r\n   *\r\n   * @param _tokenId ID of token to check\r\n   * @return whether the token is boosted\r\n   */\r\n  function isBoostedToken(uint256 _tokenId) public view returns (bool) {\r\n    return boostedNftIds.contains(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @notice Changes the daily reward in erc20 tokens received\r\n   *         for every NFT staked\r\n   *\r\n   * @dev Restricted to contract owner\r\n   *\r\n   * @param _newDailyRewards the new daily reward in erc20 tokens\r\n   */\r\n  function setDailyRewards(uint128 _newDailyRewards) public onlyOwner {\r\n    // Emit event\r\n    emit DailyRewardsChanged(msg.sender, dailyRewards, _newDailyRewards);\r\n\r\n    // Change storage variable\r\n    dailyRewards = _newDailyRewards;\r\n  }\r\n\r\n  /**\r\n   * @notice Changes the daily reward boost multiplier for\r\n   *         boosted NFTs\r\n   *\r\n   * @dev Restricted to contract owner\r\n   *\r\n   * @param _newDailyRewardBoostMultiplier the new daily reward boost multiplier\r\n   */\r\n  function setDailyRewardBoostMultiplier(uint128 _newDailyRewardBoostMultiplier) public onlyOwner {\r\n    // Emit event\r\n    emit DailyRewardBoostMultiplierChanged(msg.sender, dailyRewardBoostMultiplier, _newDailyRewardBoostMultiplier);\r\n\r\n    // Change storage variable\r\n    dailyRewardBoostMultiplier = _newDailyRewardBoostMultiplier;\r\n  }\r\n\r\n  /**\r\n   * @notice Changes the boosted NFT ids that receive\r\n   *         a bigger daily reward\r\n   *\r\n   * @dev Restricted to contract owner\r\n   *\r\n   * @param _newBoostedNftIds the new boosted NFT ids\r\n   */\r\n  function setBoostedNftIds(uint256[] memory _newBoostedNftIds) public onlyOwner {\r\n    // Create array to store old boosted NFTs and emit\r\n    // event later\r\n    uint256[] memory oldBoostedNftIds = new uint256[](boostedNftIds.length());\r\n\r\n    // Empty boosted NFT ids set\r\n    for (uint256 i = 0; boostedNftIds.length() > 0; i++) {\r\n      // Get a value from the set\r\n      // Since set length is > 0 it is guaranteed\r\n      // that there is a value at index 0\r\n      uint256 value = boostedNftIds.at(0);\r\n\r\n      // Remove the value\r\n      boostedNftIds.remove(value);\r\n\r\n      // Store the value to the old boosted NFT ids\r\n      // list to later emit event\r\n      oldBoostedNftIds[i] = value;\r\n    }\r\n\r\n    // Emit event\r\n    emit BoostedNftIdsChanged(msg.sender, oldBoostedNftIds, _newBoostedNftIds);\r\n\r\n    // Enumerate new boosted NFT ids\r\n    for (uint256 i = 0; i < _newBoostedNftIds.length; i++) {\r\n      uint256 boostedNftId = _newBoostedNftIds[i];\r\n\r\n      // Add boosted NFT id to set\r\n      boostedNftIds.add(boostedNftId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates all the NFTs currently staken by\r\n   *         an address\r\n   *\r\n   * @dev This is an auxiliary function to help with integration\r\n   *      and is not used anywhere in the smart contract login\r\n   *\r\n   * @param _owner address to search staked tokens of\r\n   * @return an array of token IDs of NFTs that are currently staken\r\n   */\r\n  function tokensStakedByOwner(address _owner) external view returns (uint256[] memory) {\r\n    // Cache the length of the staked tokens set for the owner\r\n    uint256 stakedTokensLength = stakedTokens[_owner].length();\r\n\r\n    // Create an empty array to store the result\r\n    // Should be the same length as the staked tokens\r\n    // set\r\n    uint256[] memory tokenIds = new uint256[](stakedTokensLength);\r\n\r\n    // Copy set values to array\r\n    for (uint256 i = 0; i < stakedTokensLength; i++) {\r\n      tokenIds[i] = stakedTokens[_owner].at(i);\r\n    }\r\n\r\n    // Return array result\r\n    return tokenIds;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the rewards that would be earned by\r\n   *         the user for each an NFT if he was to unstake it at\r\n   *         the current block\r\n   *\r\n   * @param _tokenId token ID of NFT rewards are to be calculated for\r\n   * @return the amount of rewards for the input staken NFT\r\n   */\r\n  function currentRewardsOf(uint256 _tokenId) public view returns (uint256) {\r\n    // Verify NFT is staked\r\n    require(stakedAt[_tokenId] != 0, \"not staked\");\r\n\r\n    // Get current token ID staking time by calculating the\r\n    // delta between the current block time(`block.timestamp`)\r\n    // and the time the token was initially staked(`stakedAt[tokenId]`)\r\n    uint256 stakingTime = block.timestamp - stakedAt[_tokenId];\r\n\r\n    // `stakingTime` is the staking time in seconds\r\n    // Calculate the staking time in days by:\r\n    //   * dividing by 60 (seconds in a minute)\r\n    //   * dividing by 60 (minutes in an hour)\r\n    //   * dividing by 24 (hours in a day)\r\n    // This will yield the (rounded down) staking\r\n    // time in days\r\n    uint256 stakingDays = stakingTime / 60 / 60 / 24;\r\n\r\n    // Calculate reward for token by multiplying\r\n    // rounded down number of staked days by daily\r\n    // rewards variable\r\n    uint256 reward = stakingDays * dailyRewards;\r\n\r\n    // If the NFT is boosted\r\n    if (isBoostedToken(_tokenId)) {\r\n      // Multiply the reward\r\n      reward *= dailyRewardBoostMultiplier;\r\n    }\r\n\r\n    // Return reward\r\n    return reward;\r\n  }\r\n\r\n  /**\r\n   * @notice Stake NFTs to start earning ERC-20\r\n   *         token rewards\r\n   *\r\n   * The ERC-20 token rewards will be paid out\r\n   * when the NFTs are unstaken\r\n   *\r\n   * @dev Sender must first approve this contract\r\n   *      to transfer NFTs on his behalf and NFT\r\n   *      ownership is transferred to this contract\r\n   *      for the duration of the staking\r\n   *\r\n   * @param _tokenIds token IDs of NFTs to be staken\r\n   */\r\n  function stake(uint256[] memory _tokenIds) public {\r\n    // Ensure at least one token ID was sent\r\n    require(_tokenIds.length > 0, \"no token IDs sent\");\r\n\r\n    // Enumerate sent token IDs\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      // Get token ID\r\n      uint256 tokenId = _tokenIds[i];\r\n\r\n      // Store NFT owner\r\n      ownerOf[tokenId] = msg.sender;\r\n\r\n      // Add NFT to owner staked tokens\r\n      stakedTokens[msg.sender].add(tokenId);\r\n\r\n      // Store staking time as block timestamp the\r\n      // the transaction was confirmed in\r\n      stakedAt[tokenId] = block.timestamp;\r\n\r\n      // Transfer token to staking contract\r\n      // Will fail if the user does not own the\r\n      // token or has not approved the staking\r\n      // contract for transferring tokens on his\r\n      // behalf\r\n      erc721.safeTransferFrom(msg.sender, address(this), tokenId, \"\");\r\n\r\n      // Emit event\r\n      emit Staked(msg.sender, tokenId, stakedAt[tokenId]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Unstake NFTs to receive ERC-20 token rewards\r\n   *\r\n   * @dev Sender must have first staken the NFTs\r\n   *\r\n   * @param _tokenIds token IDs of NFTs to be unstaken\r\n   */\r\n  function unstake(uint256[] memory _tokenIds) public {\r\n    // Ensure at least one token ID was sent\r\n    require(_tokenIds.length > 0, \"no token IDs sent\");\r\n\r\n    // Create a variable to store the total rewards for all\r\n    // NFTs sent\r\n    uint256 totalRewards = 0;\r\n\r\n    // Enumerate sent token IDs\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      // Get token ID\r\n      uint256 tokenId = _tokenIds[i];\r\n\r\n      // Verify sender is token ID owner\r\n      // Will fail if token is not staked (owner is 0x0)\r\n      require(ownerOf[tokenId] == msg.sender, \"not token owner\");\r\n\r\n      // Calculate rewards for token ID. Will revert\r\n      // if the token is not staken\r\n      uint256 rewards = currentRewardsOf(tokenId);\r\n\r\n      // Increase amount of total rewards\r\n      // for all tokens sent\r\n      totalRewards += rewards;\r\n\r\n      // Emit event\r\n      emit Unstaked(msg.sender, tokenId, block.timestamp, stakedAt[tokenId], rewards);\r\n\r\n      // Reset `ownerOf` and `stakedAt`\r\n      // for token\r\n      ownerOf[tokenId] = address(0);\r\n      stakedAt[tokenId] = 0;\r\n\r\n      // Remove NFT from owner staked tokens\r\n      stakedTokens[msg.sender].remove(tokenId);\r\n\r\n      // Transfer NFT back to user\r\n      erc721.transferFrom(address(this), msg.sender, tokenId);\r\n    }\r\n\r\n    // Mint total rewards for all sent NFTs\r\n    // to user\r\n    erc20.mint(msg.sender, totalRewards);\r\n  }\r\n\r\n  function claimRewards(uint256[] memory _tokenIds) public {\r\n      require(_tokenIds.length > 0, \"no token IDs sent\");\r\n\r\n    // Create a variable to store the total rewards for all\r\n    // NFTs sent\r\n    uint256 totalRewards = 0;\r\n\r\n    // Enumerate sent token IDs\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      // Get token ID\r\n      uint256 tokenId = _tokenIds[i];\r\n\r\n      // Verify sender is token ID owner\r\n      // Will fail if token is not staked (owner is 0x0)\r\n      require(ownerOf[tokenId] == msg.sender, \"not token owner\");\r\n\r\n      // Calculate rewards for token ID. Will revert\r\n      // if the token is not staken\r\n      uint256 rewards = currentRewardsOf(tokenId);\r\n\r\n      // Increase amount of total rewards\r\n      // for all tokens sent\r\n      totalRewards += rewards;\r\n      stakedAt[tokenId] = block.timestamp;\r\n    }\r\n    erc20.mint(msg.sender, totalRewards);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721Address\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_dailyRewards\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"_boostedNftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"_dailyRewardBoostMultiplier\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldBoostedNftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newBoostedNftIds\",\"type\":\"uint256[]\"}],\"name\":\"BoostedNftIdsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldDailyRewardBoostMultiplier\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDailyRewardBoostMultiplier\",\"type\":\"uint128\"}],\"name\":\"DailyRewardBoostMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldDailyRewards\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDailyRewards\",\"type\":\"uint128\"}],\"name\":\"DailyRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewardBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isBoostedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newBoostedNftIds\",\"type\":\"uint256[]\"}],\"name\":\"setBoostedNftIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newDailyRewardBoostMultiplier\",\"type\":\"uint128\"}],\"name\":\"setDailyRewardBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newDailyRewards\",\"type\":\"uint128\"}],\"name\":\"setDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"setTokenERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721Address\",\"type\":\"address\"}],\"name\":\"setTokenERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensStakedByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeachBumV2Staking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fe868175fab88227a40a3411ecc4a4229dc329f7000000000000000000000000a963681cd1005987ea185a555205bfd7b82fe9700000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e1d06fab9ba076c5127f1134f0210a7c349d1cf74ab4f30e287c0124f4c6768"}]}