{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nhttps://www.stiltonmusk.com\r\nhttps://t.me/stiltonmusk\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts/Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/HasRandom.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract HasRandom {\r\n    uint256 _randomNonce = 1;\r\n\r\n    function _random() internal returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        msg.sender,\r\n                        _randomNonce++,\r\n                        block.timestamp\r\n                    )\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts/IERC721.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/StiltMachine.sol\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\n\r\nstruct State {\r\n    uint256 a;\r\n    uint256 b;\r\n    uint256 c;\r\n    uint256 number;\r\n    uint256 rewardErc20;\r\n    uint256 rewardNftId;\r\n}\r\n\r\ncontract StiltMachine is Ownable, HasRandom {\r\n    IERC20 public erc20;\r\n    IERC721 public nft;\r\n    address public caasbank;\r\n    mapping(address => State) public states;\r\n    uint256 public jackpotPercent = 50;\r\n    bool isStarted;\r\n\r\n    event OnWin(address indexed account, uint256 id);\r\n\r\n    constructor(address erc20Address, address nftAddress) {\r\n        erc20 = IERC20(erc20Address);\r\n        nft = IERC721(nftAddress);\r\n    }\r\n\r\n    function setErc20(address erc20Address) external onlyOwner {\r\n        erc20 = IERC20(erc20Address);\r\n    }\r\n\r\n    function setNft(address nftAddress) external onlyOwner {\r\n        nft = IERC721(nftAddress);\r\n    }\r\n\r\n    function setIsStarted(bool newIsStarted) external onlyOwner {\r\n        isStarted = newIsStarted;\r\n    }\r\n\r\n    function setCaasbank(address caasbankAddress) external onlyOwner {\r\n        caasbank = caasbankAddress;\r\n    }\r\n\r\n    function setJackpotPercent(uint256 newJakpotPercent) external onlyOwner {\r\n        require(newJakpotPercent > 0 && newJakpotPercent <= 100);\r\n        jackpotPercent = newJakpotPercent;\r\n    }\r\n\r\n    function getJackPot() public view returns (uint256) {\r\n        return (erc20.balanceOf(address(this)) * jackpotPercent) / 100;\r\n    }\r\n\r\n    function getRewardPool() public view returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawErc20() external onlyOwner {\r\n        uint256 balance = erc20.balanceOf(address(this));\r\n        require(balance > 0);\r\n        if (balance > 0) erc20.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function withdrawNft() external onlyOwner {\r\n        uint256 balance = nft.balanceOf(address(this));\r\n        require(balance > 0);\r\n        while (balance > 0) {\r\n            nft.safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                nft.tokenOfOwnerByIndex(address(this), 0)\r\n            );\r\n            --balance;\r\n        }\r\n    }\r\n\r\n    function Play(uint256 bid) public {\r\n        require(isStarted, \"is not started\");\r\n        // get rewards\r\n        State storage state = states[msg.sender];\r\n        state.a = _random() % 6;\r\n        state.b = _random() % 6;\r\n        state.c = _random() % 6;\r\n        ++state.number;\r\n        state.rewardErc20 = 0;\r\n        state.rewardNftId = 0;\r\n\r\n        bool win;\r\n        // JP\r\n        if (state.a == 5 && state.b == 5 && state.c == 5) {\r\n            emit OnWin(msg.sender, 5);\r\n            win = true;\r\n            state.rewardErc20 = getJackPot();\r\n            // transfer jackpot\r\n            if (address(nft) != address(0)) {\r\n                uint256 nftBalance = nft.balanceOf(address(this));\r\n                if (nftBalance > 0) {\r\n                    state.rewardNftId = nft.tokenOfOwnerByIndex(\r\n                        address(this),\r\n                        0\r\n                    );\r\n                    nft.safeTransferFrom(\r\n                        address(this),\r\n                        msg.sender,\r\n                        state.rewardNftId\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        // x1 (no transfer bid)\r\n        else if (state.a == 4 && state.b == 4 && state.c == 4) {\r\n            emit OnWin(msg.sender, 4);\r\n            win = true;\r\n            state.rewardErc20 = bid;\r\n            return;\r\n        }\r\n        // x3\r\n        else if (state.a == 3 && state.b == 3 && state.c == 3) {\r\n            emit OnWin(msg.sender, 3);\r\n            win = true;\r\n            state.rewardErc20 = bid * 3;\r\n        }\r\n        // x5\r\n        else if (state.a == 2 && state.b == 2 && state.c == 2) {\r\n            emit OnWin(msg.sender, 2);\r\n            win = true;\r\n            state.rewardErc20 = bid * 5;\r\n        }\r\n        // x10\r\n        else if (state.a == 1 && state.b == 1 && state.c == 1) {\r\n            emit OnWin(msg.sender, 1);\r\n            win = true;\r\n            state.rewardErc20 = bid * 10;\r\n        }\r\n        // x100\r\n        else if (state.a == 0 && state.b == 0 && state.c == 0) {\r\n            emit OnWin(msg.sender, 0);\r\n            win = true;\r\n            state.rewardErc20 = bid * 100;\r\n        }\r\n\r\n        // correct erc20 reward\r\n        uint256 balance = erc20.balanceOf(address(this));\r\n        if (balance < state.rewardErc20) state.rewardErc20 = balance;\r\n\r\n        // if win - grant reward\r\n        if (win) {\r\n            if (state.rewardErc20 > 0)\r\n                erc20.transfer(msg.sender, state.rewardErc20);\r\n            return;\r\n        }\r\n\r\n        // if not win - transfer to contract\r\n        if (caasbank == address(0)) {\r\n            erc20.transferFrom(msg.sender, address(this), bid);\r\n        } else {\r\n            erc20.transferFrom(msg.sender, address(this), bid / 2);\r\n            bid -= bid / 2;\r\n            erc20.transferFrom(msg.sender, caasbank, bid);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OnWin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"Play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caasbank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caasbankAddress\",\"type\":\"address\"}],\"name\":\"setCaasbank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"setErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newIsStarted\",\"type\":\"bool\"}],\"name\":\"setIsStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newJakpotPercent\",\"type\":\"uint256\"}],\"name\":\"setJackpotPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardErc20\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNftId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StiltMachine", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000006fcbf38e823efc1e609b9491aab546334c6ee69000000000000000000000000d5745fb5cfb5c3b36475042c3cf10e1689412987", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b36a2259a37de71828c68584f84a462fd17aeaa84d6920b683c3db56582f63e"}]}