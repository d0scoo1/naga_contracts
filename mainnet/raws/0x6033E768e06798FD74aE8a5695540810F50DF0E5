{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/FleepToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n// import {IERC20 as UNIERC20} from \\\"@uniswap/v2-core/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract FleepToken is ERC20 {\\n\\n    //state of token\\n    enum State {\\n        INITIAL,\\n        ACTIVE\\n    }\\n\\n    State public state = State.INITIAL;\\n\\n    function getState() public view returns (State) {\\n        return state;\\n    }\\n\\n    function enableToken() public onlyOwner {\\n        state = State.ACTIVE;\\n    }\\n\\n    function disableToken() public onlyOwner {\\n        state = State.INITIAL;\\n    }\\n\\n    function setState(uint256 _value) public onlyOwner {\\n        require(uint256(State.ACTIVE) >= _value);\\n        require(uint256(State.INITIAL) <= _value);\\n        state = State(_value);\\n    }\\n\\n    function requireActiveState() view internal {\\n        require(state == State.ACTIVE, 'Require token enable trading');\\n    }\\n\\n    address public owner = msg.sender;\\n    address public devWallet;\\n    address public rewardWallet;\\n    uint256 initialTime;\\n    uint256 initialPrice; // 1.5$ * 10 ** 18\\n    //price feed uniswap\\n    //if useFeedPrice == false, don't apply tax for token\\n    bool public useFeedPrice = false;\\n    address public pairFeedPrice;\\n    bool public isToken0;\\n    // tax control list\\n    mapping(address => bool) applyTaxList;\\n    mapping(address => bool) ignoreTaxList;\\n\\n    //define event\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    // modifier control\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"This function is restricted to the contract's owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    constructor(\\n        address _devWallet,\\n        address _rewardWallet,\\n        // bool _isToken0,\\n        uint256 _initialTime,\\n        uint256 _initialPrice\\n    ) payable ERC20(\\\"Fleep Token\\\", \\\"FLEEP\\\") {\\n        //initital total supply is 1000.000 tokens\\n        devWallet = _devWallet;\\n        rewardWallet = _rewardWallet;\\n        _mint(msg.sender, 600000 * 10**decimals());\\n        _mint(devWallet, 200000 * 10**decimals());\\n        _mint(rewardWallet, 200000 * 10**decimals());\\n        //-- data feed\\n        pairFeedPrice = address(0);\\n        isToken0 = false;\\n        //-- end datafeed\\n        initialTime = _initialTime;\\n        // explore\\n        initialPrice = _initialPrice;\\n        ignoreTaxList[devWallet] = true;\\n        ignoreTaxList[rewardWallet] = true;\\n    }\\n\\n    // modify transfer function to check tax effect\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        //tax here\\n        address from = _msgSender();\\n        uint256 finalAmount = amount;\\n        if (\\n            ignoreTaxList[from] == true || ignoreTaxList[recipient] == true\\n        ) {} else if (\\n            applyTaxList[from] == true && applyTaxList[recipient] == true\\n        ) {\\n            // not apply tax\\n            // do nothings\\n        } else if (applyTaxList[from] == true) {\\n            if (useFeedPrice) {\\n                int256 deviant = getDeviant();\\n                // if from Effect => user buy token from LP\\n                // [to] buy token, so [to] will receive reward\\n                (uint256 pct, uint256 base) = getBuyerRewardPercent(deviant);\\n                uint256 rewardForBuyer = (amount * pct) / (base * 100);\\n                // finalAmount = finalAmount - rewardForBuyer;\\n                _transfer(rewardWallet, recipient, rewardForBuyer);\\n            }\\n        } else if (applyTaxList[recipient] == true) {\\n            if (useFeedPrice) {\\n                //check max sell token\\n                require(finalAmount <= getMaxSellable(), \\\"Final amount over max sellable amount\\\");\\n                int256 deviant = getDeviant();\\n                // if [to] effect (example: [to] is LP Pool) => [from] sell token\\n                (uint256 pct, uint256 base) = getTaxPercent(deviant);\\n                (uint256 pctReward, uint256 baseReward) = getRewardPercent(\\n                    deviant\\n                );\\n                uint256 tax = (amount * pct) / (base * 100);\\n                uint256 taxToReward = (amount * pctReward) / (baseReward * 100);\\n                require(finalAmount > tax, \\\"tax need smaller than amount\\\");\\n                require(tax > taxToReward, \\\"tax need bigger than taxToReward\\\");\\n                finalAmount = finalAmount - tax;\\n                _transfer(_msgSender(), rewardWallet, taxToReward);\\n                _transfer(_msgSender(), devWallet, tax - taxToReward);\\n            }\\n        } else {\\n            // do nothings\\n        }\\n        //end\\n        //validate state\\n        if (ignoreTaxList[from] != true && ignoreTaxList[recipient] != true) {\\n            requireActiveState();\\n        }\\n        //end\\n        _transfer(_msgSender(), recipient, finalAmount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 finalAmount = amount;\\n        address from = sender;\\n        if (\\n            ignoreTaxList[from] == true || ignoreTaxList[recipient] == true\\n        ) {} else if (\\n            applyTaxList[from] == true && applyTaxList[recipient] == true\\n        ) {\\n            // not apply tax\\n            // do nothings\\n        } else if (applyTaxList[from] == true) {\\n            if (useFeedPrice) {\\n                int256 deviant = getDeviant();\\n                // if from Effect => user buy token from LP\\n                // [to] buy token, so [to] will receive reward\\n                (uint256 pct, uint256 base) = getBuyerRewardPercent(deviant);\\n                uint256 rewardForBuyer = (amount * pct) / (base * 100);\\n                // finalAmount = finalAmount - rewardForBuyer;\\n                _transfer(rewardWallet, recipient, rewardForBuyer);\\n            }\\n        } else if (applyTaxList[recipient] == true) {\\n            if (useFeedPrice) {\\n                //check max sell token\\n                require(finalAmount <= getMaxSellable(), \\\"Final amount over max sellable amount\\\");\\n                int256 deviant = getDeviant();\\n                // if [to] effect (example: [to] is LP Pool) => [from] sell token\\n                (uint256 pct, uint256 base) = getTaxPercent(deviant);\\n                (uint256 pctReward, uint256 baseReward) = getRewardPercent(\\n                    deviant\\n                );\\n                uint256 tax = (amount * pct) / (base * 100);\\n                uint256 taxToReward = (amount * pctReward) / (baseReward * 100);\\n                require(\\n                    balanceOf(sender) >= (amount + tax),\\n                    \\\"Out of token becase tax apply\\\"\\n                );\\n                // require(finalAmount > tax, \\\"tax need smaller than amount\\\");\\n                require(tax > taxToReward, \\\"tax need bigger than taxToReward\\\");\\n                finalAmount = finalAmount - tax;\\n                _transfer(sender, rewardWallet, taxToReward);\\n                _transfer(sender, devWallet, tax - taxToReward);\\n            }\\n        } else {\\n            // do nothings\\n        }\\n        //validate state\\n        if (ignoreTaxList[from] != true && ignoreTaxList[recipient] != true) {\\n            requireActiveState();\\n        }\\n        //end\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function changeInitialTimestamp(uint256 _initialTimestamp)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        initialTime = _initialTimestamp;\\n        return true;\\n    }\\n\\n    function changeInitialPeggedPrice(uint256 _initialPrice)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        initialPrice = _initialPrice;\\n        return true;\\n    }\\n\\n    function setUseFeedPrice(bool _useFeedPrice) public onlyOwner {\\n        useFeedPrice = _useFeedPrice;\\n    }\\n\\n    function setPairForPrice(address _pairFeedPrice, bool _isToken0)\\n        public\\n        onlyOwner\\n    {\\n        pairFeedPrice = _pairFeedPrice;\\n        isToken0 = _isToken0;\\n    }\\n\\n    //apply tax list\\n    function addToApplyTaxList(address _address) public onlyOwner {\\n        applyTaxList[_address] = true;\\n    }\\n\\n    function removeApplyTaxList(address _address) public onlyOwner {\\n        applyTaxList[_address] = false;\\n    }\\n\\n    function isApplyTaxList(address _address) public view returns (bool) {\\n        return applyTaxList[_address];\\n    }\\n\\n    //ignore tax list\\n    function addToIgnoreTaxList(address _address) public onlyOwner {\\n        ignoreTaxList[_address] = true;\\n    }\\n\\n    function removeIgnoreTaxList(address _address) public onlyOwner {\\n        ignoreTaxList[_address] = false;\\n    }\\n\\n    function isIgnoreTaxList(address _address) public view returns (bool) {\\n        return ignoreTaxList[_address];\\n    }\\n\\n    // calculate price based on pair reserves\\n    // numberToken0 x price0 = numberToken1 x price1\\n    function getTokenPrice(\\n        address _pairAddress,\\n        bool _isToken0,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        if (_isToken0) {\\n            return getToken0Price(_pairAddress, amount);\\n        } else {\\n            return getToken1Price(_pairAddress, amount);\\n        }\\n    }\\n\\n    function getTokenPrice() public view returns (uint256) {\\n        if (isToken0) {\\n            return getToken0Price(pairFeedPrice, 1);\\n        } else {\\n            return getToken1Price(pairFeedPrice, 1);\\n        }\\n    }\\n\\n    function getMaxSellable() public view returns (uint256) {\\n        if (isToken0) {\\n            return getMaxSellable0(pairFeedPrice);\\n        } else {\\n            return getMaxSellable1(pairFeedPrice);\\n        }\\n    }\\n\\n    function getMaxSellable0(address pairAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        (uint256 Res0, , ) = pair.getReserves();\\n        return Res0 * 10 / 100;\\n    }\\n\\n    function getMaxSellable1(address pairAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        (, uint256 Res1, ) = pair.getReserves();\\n        return Res1 * 10 / 100;\\n    }\\n\\n    function getToken1Price(address pairAddress, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        ERC20 token1 = ERC20(pair.token1());\\n        (uint256 Res0, uint256 Res1, ) = pair.getReserves();\\n        // decimals\\n        uint256 res0 = Res0 * (10**token1.decimals());\\n        return ((amount * res0) / Res1);\\n        // result = (price_1 /price_0) *  (10 ** token0.decimals())\\n    }\\n\\n    /**\\n    return price of token 0 wall calculate by price of token 1 and GWEN of token 1\\n     */\\n    function getToken0Price(address pairAddress, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        ERC20 token0 = ERC20(pair.token0());\\n        (uint256 Res0, uint256 Res1, ) = pair.getReserves();\\n        //(Res0 / token0.decimals()) * price0 = (Res1 / token1.decimals()) * price1\\n        return (amount * Res1 * (10**token0.decimals())) / Res0;\\n        // result = (price_0 /price_1) *  (10 ** token1.decimals())\\n    }\\n\\n    uint256 SECOND_PER_DAY = 86400; //24 * 60 * 60;\\n    uint256 private A = 0;\\n    uint256 private perA  = 1;\\n    uint256 private B  = 0;\\n    uint256 private perB  = 1;\\n\\n    function setRate(uint256 _A, uint256 _perA, uint256 _B, uint256 _perB)\\n        public\\n        onlyOwner\\n    {\\n        //change initial price and time\\n        initialPrice = getPeggedPrice();\\n        initialTime = block.timestamp;\\n        //change rate\\n        A = _A;\\n        perA  = _perA;\\n        B = _B;\\n        perB = _perB;\\n    }\\n\\n    /**\\n     pegged price increase by day: 0.0002X+0.01 (x is number of day from initialDay)\\n     ==> pegged_price_n = initial_price + n * (0.01) + (n*(n+1)/2 * 0.0002)\\n\\n     increase per day:  X * A / perA + B / perB\\n     */\\n    //return the price of token * 10 ** 18\\n    function getPeggedPrice() public view returns (uint256) {\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime <= initialTime) {\\n            return initialPrice;\\n        }\\n        uint256 daysFromBegin = ceil(\\n            (currentTime - initialTime) / SECOND_PER_DAY,\\n            1\\n        );\\n        uint256 peggedPrice = uint256(\\n            initialPrice +\\n                ((10**decimals()) * daysFromBegin * B) /\\n                perB +\\n                ((10**decimals()) * daysFromBegin * (daysFromBegin + 1) * A) /\\n                (perA * 2)\\n        );\\n        return (peggedPrice);\\n    }\\n\\n    /**\\n    return deviant of price - beetween current price and pegged price\\n     */\\n    function getDeviant() public view returns (int256) {\\n        // calculate with the same measurement\\n        int256 peggedPrice = int256(getPeggedPrice());\\n        int256 currentPrice = int256(getTokenPrice(pairFeedPrice, isToken0, 1));\\n        return ((currentPrice - peggedPrice) * 100) / peggedPrice;\\n    }\\n\\n    uint256 DEVIDE_STEP = 5;\\n\\n    function getTaxPercent() public view returns (uint256, uint256){\\n        int256 deviant = getDeviant();\\n        return getTaxPercent(deviant);\\n    }\\n\\n    function getTaxPercent(int256 deviant)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // 0.93674 ^ -5 = 138645146889 / 10 ** 11\\n        //tax : 0.93674^{x}+3\\n\\n        if (deviant < 0) {\\n            uint256 uDeviant = uint256(-deviant);\\n            uint256 step = uDeviant / DEVIDE_STEP;\\n            uint256 resident = uDeviant - step * DEVIDE_STEP;\\n            uint256 j = 0;\\n            uint256 percent = 10**18;\\n            // return 9 ** uDeviant;\\n            for (j = 0; j < step; j += 1) {\\n                //for loop example\\n                percent = (percent * 138645146889) / 10**11;\\n            }\\n            percent = (percent * (100000**resident)) / (93674**resident);\\n            return (percent / (10**14) + 3 * 10000, 10**4);\\n        } else {\\n            //business\\n            uint256 uDeviant = uint256(deviant);\\n            uint256 step = uDeviant / DEVIDE_STEP;\\n            uint256 resident = uDeviant - step * DEVIDE_STEP;\\n            uint256 j = 0;\\n            uint256 percent = 10**18;\\n            // return 9 ** uDeviant;\\n            for (j = 0; j < step; j += 1) {\\n                //for loop example\\n                percent = (percent * 93674**5) / (100000**5);\\n            }\\n            percent = (percent * (93674**resident)) / (100000**resident);\\n            return (percent / (10**14) + 3 * 10000, 10**4);\\n        }\\n    }\\n\\n    function getRewardPercent() public view returns (uint256, uint256){\\n        int256 deviant = getDeviant();\\n        return getRewardPercent(deviant);\\n    }\\n\\n    function getRewardPercent(int256 deviant)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        //1.0654279291277341544231240477738 = 1/0.93859 ~ 1.0654\\n        // 0.93859 ^ -10 = 1.8846936700630545738235994788055 ~ 188469367 / 10**8\\n        // 0.93859 ^ -5 = 137284145846 / 10 ** 11\\n        // 0.93859 ** x = (1/(0.93859))^ (-x) = (1 + 0.0654279291277341544231240477738) ^ -x ~ = 1 + (-x) *  0.0654279291277341544231240477738\\n        //reward : 0.93859 ^ -x + 0.2\\n\\n        if (deviant < 0) {\\n            uint256 uDeviant = uint256(-deviant);\\n            uint256 step = uDeviant / DEVIDE_STEP;\\n            uint256 resident = uDeviant - step * DEVIDE_STEP;\\n            uint256 j = 0;\\n            uint256 percent = 10**18;\\n            // return 9 ** uDeviant;\\n            for (j = 0; j < step; j += 1) {\\n                //for loop example\\n                percent = (percent * 137284145846) / 10**11;\\n            }\\n            percent = (percent * (100000**resident)) / (93859**resident);\\n            return (percent / (10**14) + 2000, 10**4);\\n        } else {\\n            //business\\n            uint256 uDeviant = uint256(deviant);\\n            uint256 step = uDeviant / DEVIDE_STEP;\\n            uint256 resident = uDeviant - step * DEVIDE_STEP;\\n            uint256 j = 0;\\n            uint256 percent = 10**18;\\n            // return 9 ** uDeviant;\\n            for (j = 0; j < step; j += 1) {\\n                //for loop example\\n                percent = (percent * 93859**5) / (100000**5);\\n            }\\n            percent = (percent * (93859**resident)) / (100000**resident);\\n            return (percent / (10**14) + 2 * 10**3, 10**4);\\n        }\\n    }\\n\\n    function getBuyerRewardPercent() public view returns (uint256, uint256){\\n        int256 deviant = getDeviant();\\n        return getBuyerRewardPercent(deviant);\\n    }\\n\\n\\n    function getBuyerRewardPercent(int256 deviant)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // 0.947 ^ -5 = 1.31295579684  / 10 ** 11\\n        //reward : 0.947^{x}+0.05\\n\\n        if (deviant < 0) {\\n            uint256 uDeviant = uint256(-deviant);\\n            uint256 step = uDeviant / DEVIDE_STEP;\\n            uint256 resident = uDeviant - step * DEVIDE_STEP;\\n            uint256 j = 0;\\n            uint256 percent = 10**18;\\n            // return 9 ** uDeviant;\\n            for (j = 0; j < step; j += 1) {\\n                //for loop example\\n                percent = (percent * 131295579684) / 10**11;\\n            }\\n            percent = (percent * (1000**resident)) / (947**resident);\\n            return (percent / (10**14) + 500, 10**4);\\n        } else {\\n            //business\\n            uint256 uDeviant = uint256(deviant);\\n            uint256 step = uDeviant / DEVIDE_STEP;\\n            uint256 resident = uDeviant - step * DEVIDE_STEP;\\n            uint256 j = 0;\\n            uint256 percent = 10**18;\\n            // return 9 ** uDeviant;\\n            for (j = 0; j < step; j += 1) {\\n                //for loop example\\n                percent = (percent * 947**5) / (1000**5);\\n            }\\n            percent = (percent * (947**resident)) / (1000**resident);\\n            return (percent / (10**14) + 500, 10**4);\\n        }\\n    }\\n\\n    // internal function\\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\\n        return ((a + m - 1) / m) * m;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToApplyTaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToIgnoreTaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"changeInitialPeggedPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeInitialTimestamp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"deviant\",\"type\":\"int256\"}],\"name\":\"getBuyerRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviant\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSellable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeggedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"deviant\",\"type\":\"int256\"}],\"name\":\"getRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum FleepToken.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"deviant\",\"type\":\"int256\"}],\"name\":\"getTaxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isToken0\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isApplyTaxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isIgnoreTaxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFeedPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeApplyTaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeIgnoreTaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairFeedPrice\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isToken0\",\"type\":\"bool\"}],\"name\":\"setPairForPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perB\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useFeedPrice\",\"type\":\"bool\"}],\"name\":\"setUseFeedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum FleepToken.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useFeedPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FleepToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fe1352a15afae3ff65a3502dbcf0e55d293bb049000000000000000000000000dfd594ef27d1a2f31b3b2c6d9671d1619f04b13d0000000000000000000000000000000000000000000000000000000061efae4d0000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}