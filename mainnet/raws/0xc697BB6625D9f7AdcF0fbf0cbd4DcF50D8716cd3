{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mining/EulStakes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Utils.sol\\\";\\n\\ncontract EulStakes {\\n    address public immutable eul;\\n    string public constant name = \\\"EUL Stakes\\\";\\n    mapping(address => mapping(address => uint)) userStaked;\\n\\n    event Stake(address indexed who, address indexed underlying, address sender, uint newAmount);\\n\\n    constructor(address eul_) {\\n        eul = eul_;\\n    }\\n\\n    /// @notice Retrieve current amount staked\\n    /// @param account User address\\n    /// @param underlying Token staked upon\\n    /// @return Amount of EUL token staked\\n    function staked(address account, address underlying) external view returns (uint) {\\n        return userStaked[account][underlying];\\n    }\\n\\n    /// @notice Staking operation item. Positive amount means to increase stake on this underlying, negative to decrease.\\n    struct StakeOp {\\n        address underlying;\\n        int amount;\\n    }\\n\\n    /// @notice Modify stake of a series of underlyings. If the sum of all amounts is positive, then this amount of EUL will be transferred in from the sender's wallet. If negative, EUL will be transferred out to the sender's wallet.\\n    /// @param ops Array of operations to perform\\n    function stake(StakeOp[] memory ops) public {\\n        int delta = 0;\\n\\n        for (uint i = 0; i < ops.length; ++i) {\\n            StakeOp memory op = ops[i];\\n            if (op.amount == 0) continue;\\n\\n            require(op.amount > -1e36 && op.amount < 1e36, \\\"amount out of range\\\");\\n\\n            uint newAmount;\\n\\n            {\\n                int newAmountSigned = int(userStaked[msg.sender][op.underlying]) + op.amount;\\n                require(newAmountSigned >= 0, \\\"insufficient staked\\\");\\n                newAmount = uint(newAmountSigned);\\n            }\\n\\n            userStaked[msg.sender][op.underlying] = newAmount;\\n            emit Stake(msg.sender, op.underlying, msg.sender, newAmount);\\n\\n            delta += op.amount;\\n        }\\n\\n        if (delta > 0) {\\n            Utils.safeTransferFrom(eul, msg.sender, address(this), uint(delta));\\n        } else if (delta < 0) {\\n            Utils.safeTransfer(eul, msg.sender, uint(-delta));\\n        }\\n    }\\n\\n    /// @notice Increase stake on an underlying, and transfer this stake to a beneficiary\\n    /// @param beneficiary Who is given credit for this staked EUL\\n    /// @param underlying The underlying token to be staked upon\\n    /// @param amount How much EUL to stake\\n    function stakeGift(address beneficiary, address underlying, uint amount) external {\\n        require(amount < 1e36, \\\"amount out of range\\\");\\n        if (amount == 0) return;\\n\\n        uint newAmount = userStaked[beneficiary][underlying] + amount;\\n\\n        userStaked[beneficiary][underlying] = newAmount;\\n        emit Stake(beneficiary, underlying, msg.sender, newAmount);\\n\\n        Utils.safeTransferFrom(eul, msg.sender, address(this), amount);\\n    }\\n\\n    /// @notice Applies a permit() signature to EUL and then applies a sequence of staking operations\\n    /// @param ops Array of operations to perform\\n    /// @param value The value field of the permit message\\n    /// @param deadline The deadline field of the permit message\\n    /// @param v Signature field\\n    /// @param r Signature field\\n    /// @param s Signature field\\n    function stakePermit(StakeOp[] memory ops, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        IERC20Permit(eul).permit(msg.sender, address(this), value, deadline, v, r, s);\\n\\n        stake(ops);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Interfaces.sol\\\";\\n\\nlibrary Utils {\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string(data));\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string(data));\\n    }\\n\\n    function safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), string(data));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface IERC20Permit {\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n    function permit(address owner, address spender, uint value, uint deadline, bytes calldata signature) external;\\n}\\n\\ninterface IERC3156FlashBorrower {\\n    function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata data) external returns (bytes32);\\n}\\n\\ninterface IERC3156FlashLender {\\n    function maxFlashLoan(address token) external view returns (uint256);\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n    function flashLoan(IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eul_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eul\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct EulStakes.StakeOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeGift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"internalType\":\"struct EulStakes.StakeOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakePermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EulStakes", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000d9fcd98c322942075a5c3860693e9f4f03aae07b", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cea03225c91569b66802e8346b4b076ecd8b0aabf466e4797ce1f8d510fbaca4"}]}