{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/crossChain/CallProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"./interfaces/ICallProxy.sol\\\";\\nimport \\\"../swap/interfaces/IPool.sol\\\";\\nimport \\\"../assets/interfaces/IWETH.sol\\\";\\nimport \\\"../assets/interfaces/IPToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract CallProxy is ICallProxy, Ownable {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    bool public externalCallEnabled;\\n    address public wethAddress;\\n    address public bridgeAddress;\\n\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    event SetWETH(address wethAddress);\\n    event SetBridge(address bridgeAddress);\\n    event EnableExternalCall();\\n    event DisableExternalCall();\\n\\n    modifier onlyBridge() {\\n        require(msg.sender == bridgeAddress, \\\"CallProxy: only Bridge can do this\\\");\\n        _;\\n    }\\n\\n    function setWETH(address _wethAddress) public onlyOwner {\\n        wethAddress = _wethAddress;\\n        emit SetWETH(_wethAddress);\\n    }\\n\\n    function setBridge(address _bridgeAddress) public onlyOwner {\\n        bridgeAddress = _bridgeAddress;\\n        emit SetBridge(bridgeAddress);\\n    }\\n\\n    function enableExternalCall() public onlyOwner {\\n        externalCallEnabled = true;\\n        emit EnableExternalCall();\\n    }\\n\\n    function disableExternalCall() public onlyOwner {\\n        externalCallEnabled = false;\\n        emit DisableExternalCall();\\n    }\\n\\n    function proxyCall(\\n        address ptoken,\\n        address receiver,\\n        uint256 amount,\\n        bytes memory callData\\n    ) public override onlyBridge returns(bool) {\\n        (bytes1 tag, ) = Utils.NextByte(callData, 0);\\n        if (tag == 0x01) { // swap\\n            // decode data\\n            try this.decodeCallDataForSwap(callData)\\n            returns(address poolAddress,bool unwrapETH,bool swapAll,uint8 tokenIndexFrom, uint8 tokenIndexTo,uint256 dx,uint256 dy,uint256 deadline)\\n            {\\n                // check from token address\\n                if (address(IPool(poolAddress).coins(tokenIndexFrom)) != ptoken) {\\n                    _transferFromContract(ptoken, receiver, amount);\\n                    return true;\\n                }\\n\\n                // check swap amount\\n                if (swapAll) {\\n                    dx = amount;\\n                }\\n\\n                // do swap\\n                dy = _swap(poolAddress, tokenIndexFrom, tokenIndexTo, dx, dy, deadline);\\n\\n                // check if unwrap ETH is needed\\n                if (unwrapETH && address(IPool(poolAddress).coins(tokenIndexTo)) == wethAddress && dy != 0) {\\n                    IWETH(wethAddress).withdraw(dy);\\n                    payable(receiver).transfer(dy);\\n                } else if (dy != 0) {\\n                    IERC20 targetToken = IPool(poolAddress).coins(tokenIndexTo);\\n                    targetToken.safeTransfer(receiver, dy);\\n                }\\n            } catch { /* do nothing if data is invalid*/ }\\n        } else if (tag == 0x02) {\\n            try this.decodeCallDataForWithdraw(callData) returns(address ptokenAddress, address toAddress, uint256 withdrawAmount) {\\n                // check\\n                if (ptokenAddress != ptoken) {\\n                    _transferFromContract(ptoken, receiver, amount);\\n                    return true;\\n                }\\n\\n                if (!IPToken(ptoken).checkIfDepositWithdrawEnabled()) {\\n                    uint256 bridgeFeeRate = IBridge(bridgeAddress).bridgeFeeRate();\\n                    address feeTo = IBridge(bridgeAddress).bridgeFeeCollector();\\n\\n                    if (bridgeFeeRate != 0 && feeTo != address(0)) {\\n                        uint256 bridgeFee = withdrawAmount.mul(bridgeFeeRate).div(FEE_DENOMINATOR);\\n                        withdrawAmount = withdrawAmount.sub(bridgeFee);\\n                        _transferFromContract(ptoken, feeTo, bridgeFee);\\n                    }\\n                } else {\\n                    try IPToken(ptoken).withdraw(toAddress, withdrawAmount) {} catch {}\\n                }\\n            } catch { /* do nothing if data is invalid*/ }\\n        } else if (externalCallEnabled && tag == 0x03) { // external call\\n            try this.decodeCallDataForExternalCall(callData) returns(address callee,bytes memory data) {\\n                // approve ptoken\\n                IERC20(ptoken).safeApprove(callee, 0);\\n                IERC20(ptoken).safeApprove(callee, amount);\\n\\n                // do external call\\n                callee.call(data);\\n            } catch { /* do nothing if data is invalid*/ }\\n        } else { /* unknown tag, do nothing */ }\\n\\n        // transfer the remaining ptoken to receiver\\n        uint256 balance = IERC20(ptoken).balanceOf(address(this));\\n        if (balance != 0) {\\n            _transferFromContract(ptoken, receiver, balance);\\n        }\\n        return true;\\n    }\\n\\n    function _swap(address poolAddress, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) internal returns(uint256 dy) {\\n        IERC20 tokenFrom = IERC20(IPool(poolAddress).coins(tokenIndexFrom));\\n        tokenFrom.safeApprove(poolAddress, 0);\\n        tokenFrom.safeApprove(poolAddress, dx);\\n        try IPool(poolAddress).swap(tokenIndexFrom, tokenIndexTo, dx, minDy, deadline) returns(uint256 _dy) {\\n            dy = _dy;\\n        } catch {\\n            dy = 0;\\n        }\\n    }\\n\\n    function decodeCallDataForSwap(bytes memory callData) public pure returns (\\n        address poolAddress,\\n        bool unwrapETH,\\n        bool swapAll,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ){\\n        bytes memory poolAddressBytes;\\n        uint8 boolPair;\\n        uint256 off = 1; // dismiss tag\\n        (poolAddressBytes, off) = Utils.NextVarBytes(callData, off);\\n        poolAddress = Utils.bytesToAddress(poolAddressBytes);\\n\\n        (boolPair, off) = Utils.NextUint8(callData, off);\\n        (unwrapETH, swapAll) = _uint8ToBoolPair(boolPair);\\n\\n        (tokenIndexFrom, off) = Utils.NextUint8(callData, off);\\n\\n        (tokenIndexTo, off) = Utils.NextUint8(callData, off);\\n\\n        (dx, off) = Utils.NextUint255(callData, off);\\n\\n        (minDy, off) = Utils.NextUint255(callData, off);\\n\\n        (deadline, off) = Utils.NextUint255(callData, off);\\n    }\\n\\n    function encodeArgsForSwap(\\n        bytes memory poolAddress,\\n        bool unwrapETH,\\n        bool swapAll,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) public pure returns(bytes memory) {\\n        bytes memory buff;\\n        buff = abi.encodePacked(\\n            Utils.WriteByte(0x01),\\n            Utils.WriteVarBytes(poolAddress),\\n            Utils.WriteUint8(_boolPairToUint8(unwrapETH, swapAll)),\\n            Utils.WriteUint8(tokenIndexFrom),\\n            Utils.WriteUint8(tokenIndexTo),\\n            Utils.WriteUint255(dx),\\n            Utils.WriteUint255(minDy),\\n            Utils.WriteUint255(deadline)\\n        );\\n        return buff;\\n    }\\n\\n    function decodeCallDataForWithdraw(bytes memory callData) public pure returns(\\n        address ptokenAddress,\\n        address toAddress,\\n        uint256 amount\\n    ){\\n        bytes memory ptokenAddressBytes;\\n        bytes memory toAddressBytes;\\n        uint256 off = 1; // dismiss tag\\n        (ptokenAddressBytes, off) = Utils.NextVarBytes(callData, off);\\n        ptokenAddress = Utils.bytesToAddress(ptokenAddressBytes);\\n\\n        (toAddressBytes, off) = Utils.NextVarBytes(callData, off);\\n        toAddress = Utils.bytesToAddress(toAddressBytes);\\n\\n        (amount, off) = Utils.NextUint255(callData, off);\\n    }\\n\\n    function encodeArgsForWithdraw(\\n        bytes memory ptokenAddress,\\n        bytes memory toAddress,\\n        uint256 amount\\n    ) public pure returns(bytes memory) {\\n        bytes memory buff;\\n        buff = abi.encodePacked(\\n            Utils.WriteByte(0x02),\\n            Utils.WriteVarBytes(ptokenAddress),\\n            Utils.WriteVarBytes(toAddress),\\n            Utils.WriteUint255(amount)\\n        );\\n        return buff;\\n    }\\n\\n    function decodeCallDataForExternalCall(bytes memory callData) public pure returns(\\n        address callee,\\n        bytes memory data\\n    ){\\n        bytes memory calleeAddressBytes;\\n        uint256 off = 1; // dismiss tag\\n        (calleeAddressBytes, off) = Utils.NextVarBytes(callData, off);\\n        callee = Utils.bytesToAddress(calleeAddressBytes);\\n\\n        (data, off) = Utils.NextVarBytes(callData, off);\\n    }\\n\\n    function encodeArgsForExternalCall(\\n        bytes memory callee,\\n        bytes memory data\\n    ) public pure returns(bytes memory) {\\n        bytes memory buff;\\n        buff = abi.encodePacked(\\n            Utils.WriteByte(0x03),\\n            Utils.WriteVarBytes(callee),\\n            Utils.WriteVarBytes(data)\\n        );\\n        return buff;\\n    }\\n\\n    function _transferFromContract(address token, address receiver, uint256 amount) internal {\\n        IERC20(token).safeTransfer(receiver, amount);\\n    }\\n\\n    function _boolPairToUint8(bool flag1, bool flag2) internal pure returns(uint8 res) {\\n        assembly{\\n            res := add(flag1, mul(flag2, 2))\\n        }\\n    }\\n\\n    function _uint8ToBoolPair(uint8 raw) internal pure returns(bool flag1, bool flag2) {\\n        assembly{\\n            flag1 := mod(raw, 2)\\n            flag2 := div(raw, 2)\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"/contracts/swap/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool {\\n    function coins(uint256 index) external view returns(IERC20);\\n    function getA() external view returns (uint256);\\n    function getTokenIndex(address token) external view returns (uint8);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateSwap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) external view returns (uint256 dy);\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n    function calculateWithdrawOneToken(uint256 tokenAmount, uint8 tokenIndex) external view returns (uint256 amount);\\n\\n    function swap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) external returns (uint256);\\n    function addLiquidity(uint256[] memory amounts, uint256 minToMint, uint256 deadline) external returns (uint256);\\n    function removeLiquidity(uint256 amount, uint256[] calldata minAmounts, uint256 deadline) external returns (uint256[] memory);\\n    function removeLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) external returns (uint256);\\n    function removeLiquidityImbalance(uint256[] calldata amounts, uint256 maxBurnAmount, uint256 deadline) external returns (uint256);\\n\\n    function applySwapFee(uint256 newSwapFee) external;\\n    function applyAdminFee(uint256 newAdminFee) external;\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\n    function withdrawAdminFee(address receiver) external;\\n    function rampA(uint256 _futureA, uint256 _futureTime) external;\\n    function stopRampA() external;\\n}\\n\"\r\n    },\r\n    \"/contracts/crossChain/interfaces/ICallProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICallProxy {\\n    function proxyCall(\\n        address ptoken,\\n        address receiver,\\n        uint256 amount,\\n        bytes memory callData\\n    ) external returns(bool);\\n\\n    function encodeArgsForWithdraw(\\n        bytes memory ptokenAddress,\\n        bytes memory toAddress,\\n        uint256 amount\\n    ) external pure returns(bytes memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/crossChain/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    function bridgeFeeRate() external view returns (uint256);\\n    function bridgeFeeCollector() external view returns (address);\\n\\n    function bridgeOut(\\n        address fromAssetHash,\\n        uint64 toChainId,\\n        bytes memory toAddress,\\n        uint256 amount,\\n        bytes memory callData\\n    ) external returns(bool);\\n\\n    function depositAndBridgeOut(\\n        address originalTokenAddress,\\n        address pTokenAddress,\\n        uint64 toChainId,\\n        bytes memory toAddress,\\n        uint256 amount,\\n        bytes memory callData\\n    ) external returns(bool);\\n\\n    function bridgeOutAndWithdraw(\\n        address pTokenAddress,\\n        uint64 toChainId,\\n        bytes memory toAddress,\\n        uint256 amount\\n    ) external returns(bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/crossChain/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Utils {\\n\\n    function WriteByte(bytes1 b) internal pure returns (bytes memory) {\\n        return WriteUint8(uint8(b));\\n    }\\n\\n    function WriteUint8(uint8 v) internal pure returns (bytes memory) {\\n        bytes memory buff;\\n        assembly{\\n            buff := mload(0x40)\\n            mstore(buff, 1)\\n            mstore(add(buff, 0x20), shl(248, v))\\n            // mstore(add(buff, 0x20), byte(0x1f, v))\\n            mstore(0x40, add(buff, 0x21))\\n        }\\n        return buff;\\n    }\\n\\n    function WriteUint16(uint16 v) internal pure returns (bytes memory) {\\n        bytes memory buff;\\n\\n        assembly{\\n            buff := mload(0x40)\\n            let byteLen := 0x02\\n            mstore(buff, byteLen)\\n            for {\\n                let mindex := 0x00\\n                let vindex := 0x1f\\n            } lt(mindex, byteLen) {\\n                mindex := add(mindex, 0x01)\\n                vindex := sub(vindex, 0x01)\\n            }{\\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\\n            }\\n            mstore(0x40, add(buff, 0x22))\\n        }\\n        return buff;\\n    }\\n\\n    function WriteUint32(uint32 v) internal pure returns(bytes memory) {\\n        bytes memory buff;\\n        assembly{\\n            buff := mload(0x40)\\n            let byteLen := 0x04\\n            mstore(buff, byteLen)\\n            for {\\n                let mindex := 0x00\\n                let vindex := 0x1f\\n            } lt(mindex, byteLen) {\\n                mindex := add(mindex, 0x01)\\n                vindex := sub(vindex, 0x01)\\n            }{\\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\\n            }\\n            mstore(0x40, add(buff, 0x24))\\n        }\\n        return buff;\\n    }\\n\\n    function WriteUint64(uint64 v) internal pure returns(bytes memory) {\\n        bytes memory buff;\\n\\n        assembly{\\n            buff := mload(0x40)\\n            let byteLen := 0x08\\n            mstore(buff, byteLen)\\n            for {\\n                let mindex := 0x00\\n                let vindex := 0x1f\\n            } lt(mindex, byteLen) {\\n                mindex := add(mindex, 0x01)\\n                vindex := sub(vindex, 0x01)\\n            }{\\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\\n            }\\n            mstore(0x40, add(buff, 0x28))\\n        }\\n        return buff;\\n    }\\n\\n    function WriteUint255(uint256 v) internal pure returns (bytes memory) {\\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \\\"Value exceeds uint255 range\\\");\\n        bytes memory buff;\\n\\n        assembly{\\n            buff := mload(0x40)\\n            let byteLen := 0x20\\n            mstore(buff, byteLen)\\n            for {\\n                let mindex := 0x00\\n                let vindex := 0x1f\\n            } lt(mindex, byteLen) {\\n                mindex := add(mindex, 0x01)\\n                vindex := sub(vindex, 0x01)\\n            }{\\n                mstore8(add(add(buff, 0x20), mindex), byte(vindex, v))\\n            }\\n            mstore(0x40, add(buff, 0x40))\\n        }\\n        return buff;\\n    }\\n\\n    function WriteVarBytes(bytes memory data) internal pure returns (bytes memory) {\\n        uint64 l = uint64(data.length);\\n        return abi.encodePacked(WriteVarUint(l), data);\\n    }\\n\\n    function WriteVarUint(uint64 v) internal pure returns (bytes memory) {\\n        if (v < 0xFD){\\n    \\t\\treturn WriteUint8(uint8(v));\\n    \\t} else if (v <= 0xFFFF) {\\n    \\t\\treturn abi.encodePacked(WriteByte(0xFD), WriteUint16(uint16(v)));\\n    \\t} else if (v <= 0xFFFFFFFF) {\\n            return abi.encodePacked(WriteByte(0xFE), WriteUint32(uint32(v)));\\n    \\t} else {\\n    \\t\\treturn abi.encodePacked(WriteByte(0xFF), WriteUint64(uint64(v)));\\n    \\t}\\n    }\\n\\n    function NextByte(bytes memory buff, uint256 offset) internal pure returns (bytes1, uint256) {\\n        require(offset + 1 <= buff.length && offset < offset + 1, \\\"NextByte, Offset exceeds maximum\\\");\\n        bytes1 v;\\n        assembly{\\n            v := mload(add(add(buff, 0x20), offset))\\n        }\\n        return (v, offset + 1);\\n    }\\n\\n    function NextUint8(bytes memory buff, uint256 offset) internal pure returns (uint8, uint256) {\\n        require(offset + 1 <= buff.length && offset < offset + 1, \\\"NextUint8, Offset exceeds maximum\\\");\\n        uint8 v;\\n        assembly{\\n            let tmpbytes := mload(0x40)\\n            let bvalue := mload(add(add(buff, 0x20), offset))\\n            mstore8(tmpbytes, byte(0, bvalue))\\n            mstore(0x40, add(tmpbytes, 0x01))\\n            v := mload(sub(tmpbytes, 0x1f))\\n        }\\n        return (v, offset + 1);\\n    }\\n\\n    function NextUint16(bytes memory buff, uint256 offset) internal pure returns (uint16, uint256) {\\n        require(offset + 2 <= buff.length && offset < offset + 2, \\\"NextUint16, offset exceeds maximum\\\");\\n\\n        uint16 v;\\n        assembly {\\n            let tmpbytes := mload(0x40)\\n            let bvalue := mload(add(add(buff, 0x20), offset))\\n            mstore8(tmpbytes, byte(0x01, bvalue))\\n            mstore8(add(tmpbytes, 0x01), byte(0, bvalue))\\n            mstore(0x40, add(tmpbytes, 0x02))\\n            v := mload(sub(tmpbytes, 0x1e))\\n        }\\n        return (v, offset + 2);\\n    }\\n\\n    function NextUint32(bytes memory buff, uint256 offset) internal pure returns (uint32, uint256) {\\n        require(offset + 4 <= buff.length && offset < offset + 4, \\\"NextUint32, offset exceeds maximum\\\");\\n        uint32 v;\\n        assembly {\\n            let tmpbytes := mload(0x40)\\n            let byteLen := 0x04\\n            for {\\n                let tindex := 0x00\\n                let bindex := sub(byteLen, 0x01)\\n                let bvalue := mload(add(add(buff, 0x20), offset))\\n            } lt(tindex, byteLen) {\\n                tindex := add(tindex, 0x01)\\n                bindex := sub(bindex, 0x01)\\n            }{\\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\\n            }\\n            mstore(0x40, add(tmpbytes, byteLen))\\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\\n        }\\n        return (v, offset + 4);\\n    }\\n\\n    function NextUint64(bytes memory buff, uint256 offset) internal pure returns (uint64, uint256) {\\n        require(offset + 8 <= buff.length && offset < offset + 8, \\\"NextUint64, offset exceeds maximum\\\");\\n        uint64 v;\\n        assembly {\\n            let tmpbytes := mload(0x40)\\n            let byteLen := 0x08\\n            for {\\n                let tindex := 0x00\\n                let bindex := sub(byteLen, 0x01)\\n                let bvalue := mload(add(add(buff, 0x20), offset))\\n            } lt(tindex, byteLen) {\\n                tindex := add(tindex, 0x01)\\n                bindex := sub(bindex, 0x01)\\n            }{\\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\\n            }\\n            mstore(0x40, add(tmpbytes, byteLen))\\n            v := mload(sub(tmpbytes, sub(0x20, byteLen)))\\n        }\\n        return (v, offset + 8);\\n    }\\n\\n    function NextUint255(bytes memory buff, uint256 offset) internal pure returns (uint256, uint256) {\\n        require(offset + 32 <= buff.length && offset < offset + 32, \\\"NextUint255, offset exceeds maximum\\\");\\n        uint256 v;\\n        assembly {\\n            let tmpbytes := mload(0x40)\\n            let byteLen := 0x20\\n            for {\\n                let tindex := 0x00\\n                let bindex := sub(byteLen, 0x01)\\n                let bvalue := mload(add(add(buff, 0x20), offset))\\n            } lt(tindex, byteLen) {\\n                tindex := add(tindex, 0x01)\\n                bindex := sub(bindex, 0x01)\\n            }{\\n                mstore8(add(tmpbytes, tindex), byte(bindex, bvalue))\\n            }\\n            mstore(0x40, add(tmpbytes, byteLen))\\n            v := mload(tmpbytes)\\n        }\\n        require(v <= 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, \\\"Value exceeds the range\\\");\\n        return (v, offset + 32);\\n    }\\n\\n    function NextVarBytes(bytes memory buff, uint256 offset) internal pure returns(bytes memory, uint256) {\\n        uint len;\\n        (len, offset) = NextVarUint(buff, offset);\\n        require(offset + len <= buff.length && offset <= offset + len, \\\"NextVarBytes, offset exceeds maximum\\\");\\n        bytes memory tempBytes;\\n        assembly{\\n            switch iszero(len)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(len, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, len)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(buff, lengthmod), mul(0x20, iszero(lengthmod))), offset)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, len)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return (tempBytes, offset + len);\\n    }\\n\\n    function NextVarUint(bytes memory buff, uint256 offset) internal pure returns(uint, uint256) {\\n        bytes1 v;\\n        (v, offset) = NextByte(buff, offset);\\n\\n        uint value;\\n        if (v == 0xFD) {\\n            // return NextUint16(buff, offset);\\n            (value, offset) = NextUint16(buff, offset);\\n            require(value >= 0xFD && value <= 0xFFFF, \\\"NextUint16, value outside range\\\");\\n            return (value, offset);\\n        } else if (v == 0xFE) {\\n            // return NextUint32(buff, offset);\\n            (value, offset) = NextUint32(buff, offset);\\n            require(value > 0xFFFF && value <= 0xFFFFFFFF, \\\"NextVarUint, value outside range\\\");\\n            return (value, offset);\\n        } else if (v == 0xFF) {\\n            // return NextUint64(buff, offset);\\n            (value, offset) = NextUint64(buff, offset);\\n            require(value > 0xFFFFFFFF, \\\"NextVarUint, value outside range\\\");\\n            return (value, offset);\\n        } else{\\n            // return (uint8(v), offset);\\n            value = uint8(v);\\n            require(value < 0xFD, \\\"NextVarUint, value outside range\\\");\\n            return (value, offset);\\n        }\\n    }\\n\\n    function bytesToAddress(bytes memory _bs) internal pure returns (address addr) {\\n        require(_bs.length == 20, \\\"bytes length does not match address\\\");\\n        assembly {\\n            // for _bs, first word store _bs.length, second word store _bs.value\\n            // load 32 bytes from mem[_bs+20], convert it into Uint160, meaning we take last 20 bytes as addr (address).\\n            addr := mload(add(_bs, 0x14))\\n        }\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // fslot can contain both the length and contents of the array\\n                // if slength < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                // slength != 0\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/assets/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/assets/interfaces/IPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPToken {\\n    function mint(address to, uint256 amount) external;\\n    function burn(uint256 amount) external;\\n\\n    function deposit(address to, uint256 amount) external;\\n    function withdraw(address to, uint256 amount) external;\\n\\n    function tokenUnderlying() external view returns(address);\\n\\n    function checkAuthorizedCaller(address caller) external view returns (bool);\\n    function checkIfDepositWithdrawEnabled() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableExternalCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableExternalCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"}],\"name\":\"SetBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"name\":\"SetWETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"decodeCallDataForExternalCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"decodeCallDataForSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAll\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"decodeCallDataForWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ptokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableExternalCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExternalCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callee\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"encodeArgsForExternalCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poolAddress\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"unwrapETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAll\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"encodeArgsForSwap\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ptokenAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"encodeArgsForWithdraw\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalCallEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"proxyCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CallProxy", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}