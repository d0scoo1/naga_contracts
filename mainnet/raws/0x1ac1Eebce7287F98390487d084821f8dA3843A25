{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract Subscribe is Ownable {\r\n    string public name;\r\n    bool public isPaused = false;\r\n    uint public refundPeriod = 7 days;\r\n    uint public lastWithdrawIndex = 0;\r\n    mapping(uint => uint) public plans;\r\n    mapping(string => DiscountedConditions) public discounts;\r\n    mapping(uint => uint[]) public subscribers_by_user_address;\r\n    mapping(address => uint[]) public influencers;\r\n    mapping(address => InfluencerWithdraws[]) public influencer_withdraws;\r\n    mapping(address => string[]) public influencer_promos;\r\n    mapping(uint => UserService) public user_service;\r\n    string[] public discounts_list;\r\n    SubscribedPlan[] public subscribers;\r\n\r\n    struct UserService {\r\n        address user;\r\n        uint user_unique_id;\r\n        uint256 expire_date;\r\n    }\r\n\r\n    struct SubscribedPlan {\r\n        address user;\r\n        uint user_unique_id;\r\n        uint plan_price;\r\n        uint plan;\r\n        uint256 date;\r\n        uint refund_price;\r\n        bool refunded;\r\n        uint256 refund_date;\r\n        string discount_name;\r\n        uint discount_percent;\r\n        address influencer_address;\r\n        uint influencer_percent;\r\n        bool influencer_withdrawed;\r\n        bool withdrawed;\r\n    }\r\n\r\n    struct DiscountedConditions {\r\n        string name;\r\n        uint percent;\r\n        address influencer_address;\r\n        uint influencer_percent;\r\n        uint256 date;\r\n        bool deleted;\r\n        uint256 deleted_date;\r\n        uint used_count;\r\n        uint total_eth_sent;\r\n    }\r\n\r\n    struct InfluencerWithdraws {\r\n        address influencer_address;\r\n        address caller_address;\r\n        uint amount;\r\n        uint256 date;\r\n    }\r\n   \r\n    event PlanCreated(\r\n        uint plan,\r\n        uint price\r\n    );\r\n\r\n    event PlanRemoved(\r\n        uint plan\r\n    );\r\n\r\n    event DiscountCreated(\r\n        string name,\r\n        uint percent,\r\n        address influencer_address,\r\n        uint influencer_percent,\r\n        uint256 date\r\n    );\r\n\r\n    event DiscountRemoved(\r\n        string name\r\n    );\r\n    \r\n    constructor() {\r\n        name = \"CryptoMarketDarts\";\r\n        planCreate(30, 13000000000000000);\r\n        planCreate(180, 67000000000000000);\r\n        planCreate(360, 117000000000000000);\r\n    }\r\n\r\n    function subscribeDeposit(uint _plan, string memory _discount_name, uint user_unique_id) public payable {\r\n        require(!isPaused, \"Subscribtions are paused at the moment\");\r\n        require(_plan > 0, \"Plan does not exist.\");\r\n        require(plans[_plan] > 0, \"Plan does not exist.\");\r\n        require(user_unique_id > 0, \"_unique_subscribe_str can't be empty\");\r\n        \r\n        uint sent_val = msg.value;\r\n        uint price_to_be_paid = plans[_plan];\r\n\r\n        uint __discount_percent = 0;\r\n        address __discount_influencer_address = address(0);\r\n        uint __discount_influencer_percent = 0;\r\n        bool __discount_influencer_withdrawed = false;\r\n        \r\n        if(bytes(_discount_name).length > 0) {\r\n\r\n            DiscountedConditions memory dc = discounts[_discount_name];\r\n            require(bytes(dc.name).length > 0 && dc.percent > 0 && dc.percent <= 100 && !dc.deleted, \"Discount does not exists\");\r\n            price_to_be_paid = plans[_plan] * (100 - dc.percent) / 100;\r\n            __discount_percent = dc.percent;\r\n            __discount_influencer_address = dc.influencer_address;\r\n            __discount_influencer_percent = dc.influencer_percent;\r\n            if(dc.influencer_address != address(0)) {\r\n\r\n                influencers[dc.influencer_address].push(subscribers.length);\r\n            }\r\n            discounts[_discount_name].used_count = discounts[_discount_name].used_count + 1;\r\n            discounts[_discount_name].total_eth_sent = discounts[_discount_name].total_eth_sent + plans[_plan];\r\n        }\r\n        require(sent_val >= price_to_be_paid, \"Insufficient Ether amount for current plan.\");\r\n\r\n        SubscribedPlan memory subscribed_plan;\r\n        subscribed_plan.user = msg.sender;\r\n        subscribed_plan.user_unique_id = user_unique_id;\r\n        subscribed_plan.plan_price = plans[_plan];\r\n        subscribed_plan.plan = _plan;\r\n        subscribed_plan.date = block.timestamp;\r\n        subscribed_plan.refund_price = price_to_be_paid;\r\n        subscribed_plan.refunded = false;\r\n        subscribed_plan.refund_date = 0;\r\n        subscribed_plan.discount_name = _discount_name;\r\n        subscribed_plan.discount_percent = __discount_percent;\r\n        subscribed_plan.influencer_address = __discount_influencer_address;\r\n        subscribed_plan.influencer_percent = __discount_influencer_percent;\r\n        subscribed_plan.influencer_withdrawed = __discount_influencer_withdrawed;\r\n        subscribed_plan.withdrawed = false;\r\n\r\n        subscribers_by_user_address[user_unique_id].push(subscribers.length);\r\n        subscribers.push(subscribed_plan);\r\n\r\n        uint256 plan_days = _plan * 24 * 60 * 60;\r\n        if(user_service[user_unique_id].user == address(0)) {\r\n\r\n            UserService memory _user_service;\r\n            _user_service.user = msg.sender;\r\n            _user_service.user_unique_id = user_unique_id;\r\n            _user_service.expire_date = block.timestamp + plan_days;\r\n\r\n            user_service[user_unique_id] = _user_service;\r\n        } else {\r\n\r\n            if(user_service[user_unique_id].expire_date > block.timestamp) {\r\n            \r\n                user_service[user_unique_id].expire_date = user_service[user_unique_id].expire_date + plan_days;\r\n            } else {\r\n\r\n                user_service[user_unique_id].expire_date = block.timestamp + plan_days;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getInfluencerInvoicesInfo(address user) public view returns(uint, uint, uint) {\r\n\r\n        if(msg.sender != owner()) {\r\n\r\n            require(user == msg.sender, \"You are not an Influencer\");\r\n        }\r\n        uint influencerWithdrawableBalance = 0;\r\n        uint influencerRefundableBalance = 0;\r\n        for (uint i = 0; i < influencers[user].length; i++) {\r\n            SubscribedPlan storage lBid = subscribers[influencers[user][i]];\r\n            if(refundPeriod < block.timestamp - lBid.date && !lBid.refunded && !lBid.influencer_withdrawed) {\r\n\r\n                influencerWithdrawableBalance = influencerWithdrawableBalance + lBid.influencer_percent * lBid.plan_price / 100;\r\n                \r\n            } else {\r\n\r\n                if(!lBid.refunded && !lBid.influencer_withdrawed) {\r\n\r\n                    influencerRefundableBalance = influencerRefundableBalance + lBid.refund_price;\r\n                }\r\n                \r\n            }\r\n        }\r\n        return (influencers[user].length, influencerWithdrawableBalance, influencerRefundableBalance);\r\n    }\r\n\r\n    function getInfluencerInvoicesData(address user) public view returns(SubscribedPlan[] memory) {\r\n\r\n        if(msg.sender != owner()) {\r\n\r\n            require(user == msg.sender, \"You are not an Influencer\");\r\n        }\r\n\r\n        SubscribedPlan[] memory lBids = new SubscribedPlan[](influencers[user].length);\r\n        for (uint i = 0; i < influencers[user].length; i++) {\r\n            SubscribedPlan storage lBid = subscribers[influencers[user][i]];\r\n            lBids[i] = lBid;\r\n        }\r\n        return lBids;\r\n    }\r\n\r\n    function getSubscribersCount() public view returns(uint count) {\r\n        return subscribers.length;\r\n    }\r\n\r\n    function getPromosCount() public view returns(uint count) {\r\n        return discounts_list.length;\r\n    }\r\n\r\n    function getUserSubscribesByAddress(uint user_unique_id) public view returns (SubscribedPlan[] memory){\r\n\r\n        SubscribedPlan[] memory lBids = new SubscribedPlan[](subscribers_by_user_address[user_unique_id].length);\r\n        for (uint i = 0; i < subscribers_by_user_address[user_unique_id].length; i++) {\r\n            SubscribedPlan storage lBid = subscribers[subscribers_by_user_address[user_unique_id][i]];\r\n            lBids[i] = lBid;\r\n        }\r\n        return lBids;\r\n    }\r\n\r\n    function getUserSubscribesCount(uint user_unique_id) public view returns(uint count) {\r\n        return subscribers_by_user_address[user_unique_id].length;\r\n    }\r\n\r\n    function getInfluencerPromoCount(address user) public view returns(uint count) {\r\n\r\n        return influencer_promos[user].length;\r\n    }\r\n\r\n    function getInfluencerPromos(address user) public view returns(DiscountedConditions[] memory) {\r\n        if(msg.sender != owner()) {\r\n\r\n            require(user == msg.sender, \"You are not an Influencer\");\r\n        }\r\n        \r\n        DiscountedConditions[] memory promosArr = new DiscountedConditions[](influencer_promos[user].length);\r\n        for(uint i = 0; i < influencer_promos[user].length; i++) {\r\n\r\n            DiscountedConditions storage lBid = discounts[influencer_promos[user][i]];\r\n            promosArr[i] = lBid;\r\n            \r\n        }\r\n\r\n        return promosArr;\r\n    }\r\n\r\n    function getInfluencerWithdraws(address user) public view returns(InfluencerWithdraws[] memory) {\r\n        if(msg.sender != owner()) {\r\n\r\n            require(user == msg.sender, \"You are not an Influencer\");\r\n        }\r\n        \r\n        InfluencerWithdraws[] memory withdrawsArr = new InfluencerWithdraws[](influencer_withdraws[user].length);\r\n        for(uint i = 0; i < influencer_withdraws[user].length; i++) {\r\n\r\n            InfluencerWithdraws storage lBid = influencer_withdraws[user][i];\r\n            withdrawsArr[i] = lBid;\r\n        }\r\n\r\n        return withdrawsArr;\r\n    }\r\n\r\n    function refund(uint invoice_key, uint user_unique_id) public payable {\r\n\r\n        require(msg.sender != address(0), \"Address cannot be blank\");\r\n        require(getUserSubscribesCount(user_unique_id) > 0, \"User has no outstanding balance\");\r\n        require(getUserSubscribesCount(user_unique_id) > invoice_key, \"Wrong invoice_key parameter\");\r\n        SubscribedPlan storage lBid = subscribers[subscribers_by_user_address[user_unique_id][invoice_key]];\r\n        require(lBid.user == msg.sender, \"This Ethereum wallet is not eligible for refund\");\r\n        require(!lBid.refunded, \"Current invoice has already been refunded\");\r\n        require(refundPeriod >= block.timestamp - lBid.date, \"Refund period has expired\");\r\n\r\n        subscribers[subscribers_by_user_address[user_unique_id][invoice_key]].refunded = true;\r\n        subscribers[subscribers_by_user_address[user_unique_id][invoice_key]].refund_date = block.timestamp;\r\n\r\n        /////////////////////////////////////////////////////////////////\r\n\r\n        uint256 plan_days = lBid.plan * 24 * 60 * 60;\r\n        user_service[user_unique_id].expire_date = user_service[user_unique_id].expire_date - plan_days;\r\n        ///////////////////////////////////////////////////////////////\r\n\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: lBid.refund_price\r\n        }(\"\");\r\n        require(success, \"Refund transfer problem. Please try again later.\");\r\n    }\r\n\r\n    function updateInfluencerInvoicesInfo(address influencer_address) private returns(uint) {\r\n\r\n        require(influencers[influencer_address].length > 0, \"There are no subscriptions created using this promo code.\");\r\n        uint influencerWiithdrawableBalance = 0;\r\n        for (uint i = 0; i < influencers[influencer_address].length; i++) {\r\n            SubscribedPlan storage lBid = subscribers[influencers[influencer_address][i]];\r\n            if(refundPeriod < block.timestamp - lBid.date && !lBid.refunded && !lBid.influencer_withdrawed) {\r\n\r\n                influencerWiithdrawableBalance = influencerWiithdrawableBalance + lBid.influencer_percent * lBid.plan_price / 100;\r\n                subscribers[influencers[influencer_address][i]].influencer_withdrawed = true;\r\n            }\r\n        }\r\n        return influencerWiithdrawableBalance;\r\n    }\r\n\r\n    function withdrawByInfluencer() public payable {\r\n\r\n        uint withdrawSumary = updateInfluencerInvoicesInfo(msg.sender);\r\n        require(withdrawSumary > 0, \"There are no funds to withdraw to this wallet\");\r\n        (bool successVal, ) = payable(msg.sender).call{\r\n            value: withdrawSumary\r\n        }(\"\");\r\n        require(successVal, \"Withdrawal issues with Ethereum network. Please try again later.\");\r\n\r\n        InfluencerWithdraws memory _influencer_withdraws;\r\n        _influencer_withdraws.influencer_address = msg.sender;\r\n        _influencer_withdraws.caller_address = msg.sender;\r\n        _influencer_withdraws.amount = withdrawSumary;\r\n        _influencer_withdraws.date = block.timestamp;\r\n        influencer_withdraws[msg.sender].push(_influencer_withdraws);\r\n    }\r\n    \r\n    //only owner functions\r\n\r\n    function getAllPromos() public view onlyOwner returns(DiscountedConditions[] memory) {\r\n        \r\n        DiscountedConditions[] memory discountsListArr = new DiscountedConditions[](discounts_list.length);\r\n        for(uint i = 0; i < discounts_list.length; i++) {\r\n\r\n            DiscountedConditions storage lBid = discounts[discounts_list[i]];\r\n            discountsListArr[i] = lBid;\r\n        }\r\n\r\n        return discountsListArr;\r\n    }\r\n\r\n    function withdrawInfluencerByAdmin(address influencer_address) public payable onlyOwner {\r\n\r\n        uint withdrawSumary = updateInfluencerInvoicesInfo(influencer_address);\r\n        require(withdrawSumary > 0, \"There are no funds to withdraw to this wallet\");\r\n        (bool successVal, ) = payable(influencer_address).call{\r\n            value: withdrawSumary\r\n        }(\"\");\r\n        require(successVal, \"Withdrawal issues with Ethereum network. Please try again later.\");\r\n\r\n        InfluencerWithdraws memory _influencer_withdraws;\r\n        _influencer_withdraws.influencer_address = influencer_address;\r\n        _influencer_withdraws.caller_address = msg.sender;\r\n        _influencer_withdraws.amount = withdrawSumary;\r\n        _influencer_withdraws.date = block.timestamp;\r\n        influencer_withdraws[influencer_address].push(_influencer_withdraws);\r\n    }\r\n\r\n    function setIsPaused(bool _state) public onlyOwner {\r\n        isPaused = _state;\r\n    }\r\n\r\n    function setRefundPeriod(uint _refundPeriod) public onlyOwner {\r\n        refundPeriod = _refundPeriod;\r\n    }\r\n\r\n    function setLastWithdrawIndex(uint _lastWithdrawIndex) public onlyOwner {\r\n        lastWithdrawIndex = _lastWithdrawIndex;\r\n    }    \r\n\r\n    function refundableBalance() public view onlyOwner returns(uint) {\r\n\r\n        uint refundSumary = 0;\r\n        for(uint i = 0; i < subscribers.length; i++) {\r\n\r\n            if(refundPeriod >= block.timestamp - subscribers[i].date && !subscribers[i].refunded) {\r\n\r\n                refundSumary = refundSumary + subscribers[i].refund_price;\r\n            }\r\n        }\r\n\r\n        return refundSumary;\r\n    }\r\n\r\n    //////////////////////plan create\r\n    function planCreate(uint _plan, uint _price) public onlyOwner {\r\n        // Require valid _plan\r\n        require(_plan > 0 && _plan <= 1080, \"Plan date must be more than 0\");\r\n        \r\n        require(_price > 0, \"Plan date must be more than 0\");\r\n        // Create the plan\r\n        plans[_plan] = _price;\r\n        // Trigger event\r\n        emit PlanCreated(_plan, _price);\r\n    }\r\n    \r\n    //////////////////////plan remove\r\n    function planRemove(uint _plan) public onlyOwner {\r\n        // Require valid address\r\n        require(_plan > 0, \"Plan must be more than 0\");\r\n        \r\n        delete plans[_plan];\r\n        emit PlanRemoved(_plan);\r\n    }\r\n\r\n    //////////////////////dicount create\r\n    function discountCreate(string memory _name, uint _percent, address _influencer_address, uint _influencer_percent) public onlyOwner {\r\n        // Require valid _plan\r\n        require(_percent > 0 && _percent <= 100, \"Discount percent must be between 1 and 100\");\r\n        \r\n        require(bytes(_name).length > 0, \"Discount name cannot be empty\");\r\n        require(bytes(discounts[_name].name).length == 0, \"This discount name is not available\");\r\n        require(_influencer_percent <= 100 - _percent, \"Influencer AND discount percentage cannot be more than 100%\");\r\n        // Create the discount\r\n        if(_influencer_address != address(0)) {\r\n            influencer_promos[_influencer_address].push(_name);\r\n        }\r\n        \r\n        DiscountedConditions memory discounted_conditions;\r\n        discounted_conditions.name = _name;\r\n        discounted_conditions.percent = _percent;\r\n        discounted_conditions.influencer_address = _influencer_address;\r\n        discounted_conditions.influencer_percent = _influencer_percent;\r\n        discounted_conditions.date = block.timestamp;\r\n        discounted_conditions.deleted = false;\r\n        discounted_conditions.deleted_date = 0;\r\n        discounted_conditions.used_count = 0;\r\n        discounted_conditions.total_eth_sent = 0;\r\n        \r\n        discounts[_name] = discounted_conditions;\r\n        discounts_list.push(_name);\r\n        // Trigger event\r\n        emit DiscountCreated(_name, _percent, _influencer_address, _influencer_percent, discounted_conditions.date);\r\n    }\r\n    \r\n    //////////////////////plan remove\r\n    function discountRemove(string memory _name) public onlyOwner {\r\n\r\n        require(bytes(_name).length > 0, \"Discount name cannot be empty\");\r\n        discounts[_name].deleted = true;\r\n        discounts[_name].deleted_date = block.timestamp;\r\n        emit DiscountRemoved(_name);\r\n    }\r\n\r\n    function withdraw() public payable onlyOwner {\r\n\r\n        bool successArr = false;\r\n        uint withdrawSumary = 0;\r\n        uint withdrawOneTransactionSumary = 0;\r\n        \r\n        for (uint i = lastWithdrawIndex; i < subscribers.length; i++) {\r\n            withdrawOneTransactionSumary = 0;\r\n            successArr = false;\r\n            SubscribedPlan storage lBid = subscribers[i];\r\n            if((refundPeriod < block.timestamp - lBid.date) && !lBid.refunded && !lBid.withdrawed) {\r\n\r\n                withdrawOneTransactionSumary = lBid.plan_price - (lBid.influencer_percent + lBid.discount_percent) * lBid.plan_price / 100;\r\n                if(withdrawOneTransactionSumary > 0) {\r\n\r\n                    withdrawSumary = withdrawSumary + withdrawOneTransactionSumary;\r\n                    subscribers[i].withdrawed = true;\r\n                    lastWithdrawIndex = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        require(withdrawSumary > 0, \"Withdrawal amount must be more than 0\");\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: withdrawSumary\r\n        }(\"\");\r\n        require(success, \"Withdrawal issue with Ethereum network. Please try again later.\");\r\n    }\r\n\r\n    function withdrawableBalance() public view onlyOwner returns(uint) {\r\n\r\n        bool successArr = false;\r\n        uint withdrawSumary = 0;\r\n        uint withdrawOneTransactionSumary = 0;\r\n        \r\n        for (uint i = 0; i < subscribers.length; i++) {\r\n            withdrawOneTransactionSumary = 0;\r\n            successArr = false;\r\n            SubscribedPlan storage lBid = subscribers[i];\r\n            if((refundPeriod < block.timestamp - lBid.date) && !lBid.refunded && !lBid.withdrawed) {\r\n\r\n                withdrawOneTransactionSumary = lBid.plan_price - (lBid.influencer_percent + lBid.discount_percent) * lBid.plan_price / 100;\r\n                if(withdrawOneTransactionSumary > 0) {\r\n\r\n                    withdrawSumary = withdrawSumary + withdrawOneTransactionSumary;\r\n                }\r\n            }\r\n        }\r\n\r\n        return withdrawSumary;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"DiscountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"DiscountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"}],\"name\":\"PlanRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_influencer_percent\",\"type\":\"uint256\"}],\"name\":\"discountCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"discountRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"discounts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deleted_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_eth_sent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discounts_list\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPromos\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deleted_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_eth_sent\",\"type\":\"uint256\"}],\"internalType\":\"struct Subscribe.DiscountedConditions[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInfluencerInvoicesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refund_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"refund_date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"discount_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"discount_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"influencer_withdrawed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawed\",\"type\":\"bool\"}],\"internalType\":\"struct Subscribe.SubscribedPlan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInfluencerInvoicesInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInfluencerPromoCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInfluencerPromos\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deleted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deleted_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_eth_sent\",\"type\":\"uint256\"}],\"internalType\":\"struct Subscribe.DiscountedConditions[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInfluencerWithdraws\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct Subscribe.InfluencerWithdraws[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPromosCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscribersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"}],\"name\":\"getUserSubscribesByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refund_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"refund_date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"discount_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"discount_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"influencer_withdrawed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawed\",\"type\":\"bool\"}],\"internalType\":\"struct Subscribe.SubscribedPlan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"}],\"name\":\"getUserSubscribesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"influencer_promos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"influencer_withdraws\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"influencers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWithdrawIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"planCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"planRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invoice_key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawIndex\",\"type\":\"uint256\"}],\"name\":\"setLastWithdrawIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refundPeriod\",\"type\":\"uint256\"}],\"name\":\"setRefundPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_discount_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"}],\"name\":\"subscribeDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refund_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"refund_date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"discount_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"discount_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influencer_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"influencer_withdrawed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscribers_by_user_address\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_service\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user_unique_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire_date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawByInfluencer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"influencer_address\",\"type\":\"address\"}],\"name\":\"withdrawInfluencerByAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Subscribe", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a13a924b89ba2553e1ddc1ebd42dfbf5b0565d22d1e2023542d550149b488700"}]}