{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DeppInu.sol\": {\r\n      \"content\": \"/**\\nThis contract has been written by the legendary SmartPask.\\nThis one works with DEXes that have not replaced WETH with their native currency in their function names\\n*/\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract Auth {\\n    address internal owner;\\n    mapping (address => bool) internal authorizations;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n\\n    /**\\n     * Function modifier to require caller to be contract owner\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n\\n    /**\\n     * Function modifier to require caller to be authorized\\n     */\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\n    }\\n\\n    /**\\n     * Authorize address. Owner only\\n     */\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    /**\\n     * Remove address' authorization. Owner only\\n     */\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    /**\\n     * Check if address is owner\\n     */\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n\\n    /**\\n     * Return address' authorization status\\n     */\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    /**\\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\\n     */\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\\ninterface IUniswapV2Router {\\n\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n}\\n\\ncontract DeppInu is Context, IERC20, Auth {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    address payable public marketingAddress;\\n    address payable public teamAddress;               \\n    address payable public liquidityAddress;\\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\\n        \\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => bool) public _blackListed;\\n    mapping (address => bool) private _liquidityAdders;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcluded;\\n\\n    address[] private _excluded;\\n    \\n    mapping (address => bool) public isFree;\\n    mapping (address => bool) public isTxLimitExempt;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal = 1_000_000_000 * (10**18);\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    uint256 public _maxWalletToken = _tTotal.div(50); // 2% \\n    uint256 public maxTxnAmount = _tTotal.div(50); // 2%\\n\\n    string private constant _name = \\\"Depp Inu\\\";\\n    string private constant _symbol = \\\"DEPP\\\";\\n    uint8 private constant _decimals = 18;\\n\\n    uint256 private _taxFee;\\n    uint256 private _previousTaxFee = _taxFee;\\n\\n    uint256 private _marketingFee;\\n    uint256 private _previousMarketingFee = _marketingFee;\\n    \\n    uint256 private _liquidityFee;\\n    uint256 private _previousLiquidityFee = _liquidityFee;\\n    \\n    uint256 private _burnFee;\\n    uint256 private _previousBurnFee = _burnFee;\\n\\n    uint256 private _teamFee;\\n    uint256 private _previousTeamFee = _teamFee;\\n\\n    uint256 public _buyTaxFee = 7;\\n    uint256 public _buyLiquidityFee = 0;\\n    uint256 public _buyMarketingFee = 0;\\n    uint256 public _buyTeamFee = 0;\\n    uint256 public _buyBurnFee = 0;\\n\\n    uint256 public _sellTaxFee = 1;\\n    uint256 public _sellLiquidityFee = 1;\\n    uint256 public _sellMarketingFee = 5;\\n    uint256 public _sellTeamFee = 0;\\n    uint256 public _sellBurnFee = 0;\\n        \\n    uint256 private _liquidityTokensToSwap;\\n    uint256 private _marketingTokensToSwap;\\n    uint256 private _teamTokensToSwap;\\n    uint256 private _burnTokens;\\n\\n    bool public tradingActive       = false;\\n    bool public _liqHasBeenAdded    = false;\\n    bool public botProtection       = true;\\n    uint256 public _liqAddedBlock   = 0;\\n    uint256 public breathingBlocks  = 12;\\n    uint256 public botsCaught       = 0;\\n    address private botTokensTrapWallet;\\n    \\n    mapping (address => bool) public automatedMarketMakerPairs;\\n    bool public isNetswap = false;\\n\\n    uint256 private minimumTokensBeforeSwap = _tTotal / 50000; // 0.00025%\\n\\n    IUniswapV2Router public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n    event SwapETHForTokens(uint256 amountIn, address[] path);\\n    event SwapTokensForETH(uint256 amountIn, address[] path);\\n    event BlackListToggled(address indexed blacklistedBy, address blacklisted, bool status);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor(address _routerAddress, address _botTrapAddress) Auth(msg.sender) {\\n        _rOwned[_msgSender()]   = _rTotal;\\n        marketingAddress        = payable(owner);\\n        teamAddress             = payable(owner);\\n        liquidityAddress        = payable(owner);\\n        botTokensTrapWallet     = payable(_botTrapAddress);\\n\\n        IUniswapV2Router _uniswapV2Router = IUniswapV2Router(_routerAddress);\\n\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair   = _uniswapV2Pair;\\n        \\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n        \\n        excludeFromReward(deadAddress);\\n        excludeFromReward(address(this));\\n\\n        _isExcludedFromFee[owner]               = true;\\n        _isExcludedFromFee[address(this)]       = true;\\n        _isExcludedFromFee[marketingAddress]    = true;\\n        _isExcludedFromFee[liquidityAddress]    = true;\\n        _isExcludedFromFee[teamAddress]         = true;\\n        \\n        isTxLimitExempt[msg.sender]             = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) external view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function minimumTokensBeforeSwapAmount() external view returns (uint256) {\\n        return minimumTokensBeforeSwap;\\n    }\\n    \\n    function setIsNetswap(bool _isNetswap) public authorized {\\n        isNetswap = _isNetswap;\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value) public authorized {\\n        require(pair != uniswapV2Pair, \\\"The primary pair cannot be removed from automatedMarketMakerPairs\\\");\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        automatedMarketMakerPairs[pair] = value;\\n        if(value){excludeFromReward(pair);}\\n        if(!value){includeInReward(pair);}\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns (uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeFromReward(address account) public authorized {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) public authorized {\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function toggleBlacklist(address _address, bool _status) external onlyOwner {\\n        require(_address != address(0), \\\"DEPP::toggleBlacklist: blacklist cannot be the zero address\\\");\\n        require(_address != deadAddress, \\\"DEPP::toggleBlacklist: blacklist cannot be the burn address\\\");\\n        require(_blackListed[_address] == !_status, \\\"DEPP::toggleBlacklist: account already in the giving status\\\");\\n\\n        _blackListed[_address] = _status;\\n\\n        emit BlackListToggled(msg.sender, _address, _status);\\n    }\\n\\n    function toggleBotProtection(bool _status, uint16 _breathingBlocks, address _botTokensTrapWallet) external onlyOwner {\\n        if (!botProtection && _status && _liqHasBeenAdded) {\\n            revert(\\\"DEPP::toggleProtection : Cannot enable bot protection after launch\\\");\\n        }\\n\\n        botProtection   = _status;\\n        breathingBlocks = _breathingBlocks;\\n        botTokensTrapWallet   = _botTokensTrapWallet;\\n\\n    }\\n\\n    function activateTrading() public onlyOwner {\\n        require(!tradingActive, \\\"DEPP::activateTrading : Trading has already been activated\\\");\\n        require(_liqHasBeenAdded, \\\"DEPP::activateTrading : Liquidity must be added first\\\");\\n\\n        _liqAddedBlock  = block.number;\\n        tradingActive   = true;\\n    }\\n\\n    function _transferHasLimitation(address from, address to) private view returns (bool) {\\n        return from != owner && to != owner && tx.origin != owner // Not the owner\\n        && !_liquidityAdders[to] && !_liquidityAdders[from] // Not initial liquidity adders\\n        && from != address(this) // Not from DEPP contract\\n        && to != deadAddress && to != address(0)\\n        ;\\n    }\\n\\n    function _processProtection(address from, address to) private returns (bool) {\\n        bool hasLimitation = _transferHasLimitation(from, to);\\n\\n        if (hasLimitation && !tradingActive) {\\n            revert(\\\"DEPP::_processProtection : Trading not yet activated\\\");\\n        }\\n\\n        if (!_liqHasBeenAdded) {\\n            require(!hasLimitation, \\\"DEPP::_processProtection : Only admin can transfer tokens for the moment\\\");\\n            if (to == uniswapV2Pair) {\\n                // Adding liquidity\\n                _liqAddedBlock          = block.number;\\n                _liquidityAdders[from]  = true;\\n                _liqHasBeenAdded        = true;\\n                swapAndLiquifyEnabled   = true;\\n            }\\n        } else {\\n            if (_liqAddedBlock > 0 && hasLimitation\\n                && automatedMarketMakerPairs[from]\\n                && (block.number.sub(_liqAddedBlock) < breathingBlocks)\\n            ) {\\n                _blackListed[to] = true;\\n                botsCaught ++;\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(!_blackListed[from] && !_blackListed[to], \\\"DEPP::_transfer : Transfer using blacklisted address\\\");\\n        \\n        if (from != owner && to != owner &&\\n            to != address(0) && to != address(0xdead) &&\\n            !automatedMarketMakerPairs[to]\\n        ) {\\n            \\n            require(amount <= maxTxnAmount || isTxLimitExempt[from] || isTxLimitExempt[to], \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n            \\n            uint256 contractBalanceRecepient = balanceOf(to);\\n            require(contractBalanceRecepient + amount <= _maxWalletToken || isFree[to], \\\"Exceeds maximum wallet token amount.\\\");\\n        }\\n           \\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\\n\\n        // Sell tokens for ETH\\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && (balanceOf(uniswapV2Pair) > 0)) {\\n            if (automatedMarketMakerPairs[to]) {\\n                if (overMinimumTokenBalance) {\\n                    swapBack();\\n                }\\n            }\\n        }\\n\\n        bool takeFee = true;\\n        // Bot protection\\n        bool isBot = botProtection ? _processProtection(from, to) : false;\\n        if (isBot) {\\n            takeFee = false;\\n            to      = botTokensTrapWallet;\\n        } else {\\n            // If any account belongs to _isExcludedFromFee account then remove the fee\\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n                takeFee = false;\\n            } else {\\n                // Buy\\n                if (automatedMarketMakerPairs[from]) {\\n                    removeAllFee();\\n                    _taxFee = _buyTaxFee;\\n                    _liquidityFee = _buyLiquidityFee + _buyMarketingFee + _buyTeamFee + _buyBurnFee;\\n                }\\n                // Sell\\n                else if (automatedMarketMakerPairs[to]) {\\n                    removeAllFee();\\n                    _taxFee = _sellTaxFee;\\n                    _liquidityFee = _sellLiquidityFee + _sellMarketingFee + _sellTeamFee + _sellBurnFee;\\n\\n                // Normal transfers do not get taxed\\n                } else {\\n                    removeAllFee();\\n                }\\n            }\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function swapBack() private lockTheSwap {\\n\\n        // Burn\\n        if(_burnTokens > 0) {\\n            _tokenTransferNoFee(address(this), deadAddress, _burnTokens);\\n        }\\n\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensToSwap = _liquidityTokensToSwap.add(_teamTokensToSwap).add(_marketingTokensToSwap);\\n        \\n        // Halve the amount of liquidity tokens\\n        uint256 tokensForLiquidity = _liquidityTokensToSwap.div(2);\\n        uint256 amountToSwapForETH = contractBalance.sub(tokensForLiquidity);\\n        \\n        uint256 initialETHBalance = address(this).balance;\\n\\n        swapTokensForETH(amountToSwapForETH); \\n        \\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\n        \\n        uint256 ethForOperations = ethBalance.mul(_marketingTokensToSwap).div(totalTokensToSwap);\\n        uint256 ethForTeam = ethBalance.mul(_teamTokensToSwap).div(totalTokensToSwap);\\n\\n        uint256 ethForMarketing = ethForOperations;\\n        uint256 ethForLiquidity = ethBalance.sub(ethForMarketing).sub(ethForTeam);\\n        \\n        _liquidityTokensToSwap = 0;\\n        _marketingTokensToSwap = 0;\\n        _teamTokensToSwap = 0;\\n        _burnTokens = 0;\\n\\n        if(ethForTeam > 0) {\\n            (bool success,) = address(teamAddress).call{value: ethForTeam}(\\\"\\\");\\n        }\\n\\n        if(ethForMarketing > 0) {\\n            (bool success,) = address(marketingAddress).call{value: ethForMarketing}(\\\"\\\");\\n        }\\n        \\n        if(ethForLiquidity > 0) {\\n            addLiquidity(tokensForLiquidity, ethForLiquidity);\\n        }\\n\\n        emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\n        \\n        // any remnants after adding liquidity send to Marketing wallet\\n        if(address(this).balance > 0) {\\n            (bool success,) = address(marketingAddress).call{value: address(this).balance}(\\\"\\\");\\n        }\\n    }\\n    \\n    function swapTokensForETH(uint256 tokenAmount) private {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        \\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                tokenAmount,\\n                0, // accept any amount of ETH\\n                path,\\n                address(this),\\n                block.timestamp\\n        );\\n    }\\n    \\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n            uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n                address(this),\\n                tokenAmount,\\n                0, // slippage is unavoidable\\n                0, // slippage is unavoidable\\n                liquidityAddress,\\n                block.timestamp\\n            );\\n        \\n\\n    }\\n\\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\n        if (!takeFee) removeAllFee();\\n\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    function _transferStandard( address sender, address recipient, uint256 tAmount) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    function _tokenTransferNoFee(address sender, address recipient, uint256 amount) private {        \\n        uint256 currentRate =  _getRate();  \\n        uint256 rAmount = amount.mul(currentRate);   \\n\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount); \\n        \\n        if (_isExcluded[sender]) {\\n            _tOwned[sender] = _tOwned[sender].sub(amount);\\n        } \\n        if (_isExcluded[recipient]) {\\n            _tOwned[recipient] = _tOwned[recipient].add(amount);\\n        } \\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function updatemaxTxnAmount(uint256 maxBuy) public authorized {\\n        maxTxnAmount = maxBuy;\\n    }\\n    \\n    function updateMaxWallet(uint256 maxWallet) public authorized {\\n        _maxWalletToken = maxWallet;\\n    }\\n\\n    function setFree(address holder) public authorized {\\n        isFree[holder] = true;\\n    }\\n    \\n    function unSetFree(address holder) public authorized {\\n        isFree[holder] = false;\\n    }\\n\\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _getValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity\\n        ) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            tLiquidity,\\n            _getRate()\\n        );\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rFee,\\n            tTransferAmount,\\n            tFee,\\n            tLiquidity\\n        );\\n    }\\n\\n    function _getTValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 tFee = calculateTaxFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\n        return (tTransferAmount, tFee, tLiquidity);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tLiquidity,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity) private {\\n\\n        if(tLiquidity == 0) return;\\n\\n        if(_liquidityFee ==  _buyLiquidityFee + _buyMarketingFee + _buyTeamFee + _buyBurnFee){\\n            _liquidityTokensToSwap += tLiquidity * _buyLiquidityFee / _liquidityFee;\\n            _teamTokensToSwap += tLiquidity * _buyTeamFee / _liquidityFee;\\n            _marketingTokensToSwap += tLiquidity * _buyMarketingFee / _liquidityFee;\\n            _burnTokens += tLiquidity * _buyBurnFee / _liquidityFee;\\n        } else if(_liquidityFee == _sellLiquidityFee + _sellMarketingFee + _sellTeamFee + _sellBurnFee){\\n            _liquidityTokensToSwap += tLiquidity * _sellLiquidityFee / _liquidityFee;\\n            _teamTokensToSwap += tLiquidity * _sellTeamFee / _liquidityFee;\\n            _marketingTokensToSwap += tLiquidity * _sellMarketingFee / _liquidityFee;\\n            _burnTokens += tLiquidity * _sellBurnFee / _liquidityFee;\\n        }\\n        uint256 currentRate = _getRate();\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n        if (_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\n    }\\n\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxFee).div(10**2);\\n    }\\n\\n    function calculateLiquidityFee(uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return _amount.mul(_liquidityFee).div(10**2);\\n    }\\n\\n    function removeAllFee() private {\\n        if (_taxFee == 0 && _liquidityFee == 0) return;\\n\\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n\\n        _taxFee = 0;\\n        _liquidityFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _liquidityFee = _previousLiquidityFee;\\n    }\\n\\n    function isExcludedFromFee(address account) external view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function excludeFromFee(address account) external authorized {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) external authorized {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function setBuyFee(uint256 buyTaxFee, uint256 buyLiquidityFee, uint256 buyMarketingFee, uint256 buyTeamFee, uint256 buyBurnFee)\\n        external\\n        authorized\\n    {\\n        _buyTaxFee = buyTaxFee;\\n        _buyLiquidityFee = buyLiquidityFee;\\n        _buyMarketingFee = buyMarketingFee;\\n        _buyTeamFee = buyTeamFee;\\n        _buyBurnFee = buyBurnFee;\\n    }\\n\\n    function setSellFee(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellMarketingFee, uint256 sellTeamFee, uint256 sellBurnFee)\\n        external\\n        authorized\\n    {\\n        _sellTaxFee = sellTaxFee;\\n        _sellLiquidityFee = sellLiquidityFee;\\n        _sellMarketingFee = sellMarketingFee;\\n        _sellTeamFee = sellTeamFee;\\n        _sellBurnFee = sellBurnFee;\\n    }\\n\\n    function setMarketingAddress(address _marketingAddress) external authorized {\\n        marketingAddress = payable(_marketingAddress);\\n        _isExcludedFromFee[marketingAddress] = true;\\n    }\\n    \\n    function setTeamAddress(address _teamAddress) external authorized {\\n        teamAddress = payable(_teamAddress);\\n        _isExcludedFromFee[teamAddress] = true;\\n    }\\n    \\n    function setLiquidityAddress(address _liquidityAddress) external authorized {\\n        liquidityAddress = payable(_liquidityAddress);\\n        _isExcludedFromFee[liquidityAddress] = true;\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled, uint256 _amount) public authorized {\\n        swapAndLiquifyEnabled = _enabled;\\n        minimumTokensBeforeSwap = _amount;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n\\n    function transferToAddressETH(address payable recipient, uint256 amount)\\n        private\\n    {\\n        recipient.transfer(amount);\\n    }\\n\\n    function getPairAddress() external view authorized returns (address) {\\n        return uniswapV2Pair;\\n    }\\n\\n    function changeRouterVersion(address _router)\\n        external\\n        authorized\\n        returns (address _pair)\\n    {\\n        IUniswapV2Router _uniswapV2Router = IUniswapV2Router(_router);\\n\\n        _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\\n                address(this),\\n                _uniswapV2Router.WETH()\\n        );\\n        if (_pair == address(0)) {\\n                // Pair doesn't exist\\n                _pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n                    address(this),\\n                    _uniswapV2Router.WETH()\\n                );\\n        }\\n        uniswapV2Pair = _pair;\\n        \\n\\n        // Set the router of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n    }\\n\\n    // To receive ETH from uniswapV2Router when swapping\\n    receive() external payable {}\\n\\n    function transferForeignToken(address _token, address _to)\\n        external\\n        onlyOwner\\n        returns (bool _sent)\\n    {\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\\n    }\\n\\n    function Sweep() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_botTrapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blacklistedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blacklisted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlackListToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqAddedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqHasBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breathingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNetswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTeamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBurnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"setFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isNetswap\",\"type\":\"bool\"}],\"name\":\"setIsNetswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTeamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"toggleBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_breathingBlocks\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_botTokensTrapWallet\",\"type\":\"address\"}],\"name\":\"toggleBotProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"unSetFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"updatemaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeppInu", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c84a97642366d87c04c0df4ac1703a5e875b67d7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}