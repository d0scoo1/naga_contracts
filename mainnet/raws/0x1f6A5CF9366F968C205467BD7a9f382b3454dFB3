{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RibbitItem.sol\": {\r\n      \"content\": \"// Froggy Friends by Fonzy & Mayan (www.froggyfriendsnft.com) Ribbit Item\\r\\n\\r\\n//...................................................@@@@@........................\\r\\n//.......................%@@@@@@@@@*.............@@@@#///(@@@@@...................\\r\\n//....................@@@&(//(//(/(@@@.........&@@////////////@@@.................\\r\\n//....................@@@//////////////@@@@@@@@@@@@/////@@@@/////@@@..............\\r\\n//..................%@@/////@@@@@(////////////////////%@@@@/////#@@...............\\r\\n//..................@@%//////@@@#///////////////////////////////@@@...............\\r\\n//..................@@@/////////////////////////////////////////@@@@..............\\r\\n//..................@@(///////////////(///////////////(////////////@@@............\\r\\n//...............*@@/(///////////////&@@@@@@(//(@@@@@@/////////////#@@............\\r\\n//...............@@////////////////////////(%&&%(///////////////////@@@...........\\r\\n//..............@@@/////////////////////////////////////////////////&@@...........\\r\\n//..............@@(/////////////////////////////////////////////////@@#...........\\r\\n//..............@@@////////////////////////////////////////////////@@@............\\r\\n//...............@@@/////////////////////////////////////////////#@@/.............\\r\\n//................&@@@//////////////////////////////////////////@@@...............\\r\\n//..................*@@@%////////////////////////////////////@@@@.................\\r\\n//...............@@@@///////////////////////////////////////(@@@..................\\r\\n//............%@@@////////////////............/////////////////@@@................\\r\\n//..........%@@#/////////////..................... (/////////////@@@..............\\r\\n//.........@@@////////////............................////////////@@@.............\\r\\n//........@@(///////(@@@................................(@@&///////&@@............\\r\\n//.......@@////////@@@....................................@@@///////@@@...........\\r\\n//......@@@///////@@@.......................................@@///////@@%..........\\r\\n//.....(@@///////@@@.........................................@@/////(/@@..........\\r\\n\\r\\n// Development help from Lexi\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IErc20 {\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transferFrom(address from,address to,uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IErc721 {\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract RibbitItem is Context, ERC165, IERC1155, IERC1155MetadataURI, Ownable {\\r\\n    using Address for address;\\r\\n\\r\\n    // Variables\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    string private baseUrl;\\r\\n    string private contractUrl;\\r\\n    uint256 decimals = 10**18;\\r\\n    uint256 collabIdCounter = 1;\\r\\n    uint256 idCounter;\\r\\n\\r\\n    // Interfaces\\r\\n    IErc20 ribbit;\\r\\n    IErc721 froggyFriends;\\r\\n\\r\\n    // Maps\\r\\n    mapping(uint256 => uint256) price; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to price\\r\\n    mapping(uint256 => uint256) percent; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to boost percentage\\r\\n    mapping(uint256 => uint256) supply; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to supply\\r\\n    mapping(uint256 => bool) boost; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to boost status (true if boost)\\r\\n    mapping(uint256 => uint256) minted; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to minted supply\\r\\n    mapping(uint256 => bool) onSale; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to sale status (true if on sale)\\r\\n    mapping(uint256 => uint256) walletLimit; \\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to mint cap per wallet\\r\\n    mapping(uint256 => address[]) holders; \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Item ID to list of holder addresses\\r\\n    mapping(uint256 => address) collabAddresses; \\t\\t\\t\\t\\t\\t\\t\\t// Item ID to collab account\\r\\n    mapping(address => bool) approvedBurnAddress; \\t\\t\\t\\t\\t\\t\\t\\t// Address to burn state (true if approved)\\r\\n    mapping(uint256 => mapping(address => uint256)) private _balances; \\t\\t\\t// Token ID to map of address to balance\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;    // Address to map of address to approval status (true if approved)\\r\\n    mapping(uint256 => mapping(address => uint256)) private track; \\t\\t\\t\\t// Item ID to map of address to mint count\\r\\n    mapping(address => mapping(uint256 => uint256)) private mintLimitCounter;\\t// Address to map of item ID to mint count\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, string memory _baseUrl, string memory _contractUrl, address _ribbitAddress, address _froggyAddress) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        baseUrl = _baseUrl;\\r\\n        contractUrl = _contractUrl;\\r\\n        ribbit = IErc20(_ribbitAddress);\\r\\n        froggyFriends = IErc721(_froggyAddress);\\r\\n\\r\\n        // Ribbit Items\\r\\n        listItem(1, 200000, 6, true, 1);             // Golden Lily Pad\\r\\n        listFriend(2, 5, 700, 201, true, true, 1);   // Rabbit Friend\\r\\n        listFriend(3, 10, 1800, 151, true, true, 1); // Bear Friend\\r\\n        listFriend(4, 15, 5000, 76, true, true, 1);  // Red Panda Friend\\r\\n        listFriend(5, 20, 10000, 11, true, true, 1); // Cat Friend\\r\\n        listFriend(6, 30, 100000, 6, true, true, 1); // Unicorn Friend\\r\\n        listFriend(7, 35, 300000, 1, true, true, 1); // Golden Tiger Friend\\r\\n\\r\\n        listCollabFriend(8, 10, 700, 5, true, true, 1, 0xba033D82c64DD514B184e2d1405cD395dfE6e706);   // Bao Society Friend\\r\\n        listCollabFriend(9, 10, 700, 5, true, true, 1, 0x928f072C009727FbAd81bBF3aAa885f9fEa65fcf);   // Roo Troop Friend\\r\\n        listCollabFriend(10, 5, 700, 5, true, true, 1, 0x67421C8622F8E38Fe9868b4636b8dC855347d570);   // Squishiverse Friend\\r\\n        listCollabFriend(11, 5, 700, 5, true, true, 1, 0x1a2F71468F656E97c2F86541E57189F59951efe7);   // CryptoMories Friend\\r\\n        listCollabFriend(12, 10, 1000, 2, true, true, 1, 0x0c2E57EFddbA8c768147D1fdF9176a0A6EBd5d83); // Kaiju Kings Friend\\r\\n\\r\\n        // Froggy Milestones raffle reserved Ribbit Items\\r\\n        adminMint(owner(), 1, 1); // Golden Lily Pad\\r\\n        adminMint(owner(), 2, 1); // Rabbit Friend\\r\\n        adminMint(owner(), 3, 1); // Bear Friend\\r\\n        adminMint(owner(), 4, 1); // Red Panda Friend\\r\\n        adminMint(owner(), 5, 1); // Cat Friend\\r\\n        adminMint(owner(), 6, 1); // Unicorn Friend\\r\\n    }\\r\\n\\r\\n    /// @notice Bundle buy Ribbit Items\\r\\n    /// @param ids list of ribbit item ids to buy\\r\\n    /// @param amount list of ribbit item amounts\\r\\n    function bundleBuy(uint256[] memory ids, uint256[] memory amount) public {\\r\\n        require(ids.length == amount.length, \\\"Ribbit item ID missing\\\");\\r\\n        for (uint256 i; i < ids.length; i++) {\\r\\n            require(ids[i] > 0, \\\"Ribbit item ID must not be zero\\\");\\r\\n            require(price[ids[i]] > 0, \\\"Ribbit item price not set\\\");\\r\\n            uint256 saleAmount = amount[i] * price[ids[i]];\\r\\n            require(ribbit.balanceOf(msg.sender) >= saleAmount, \\\"Insufficient funds for purchase\\\");\\r\\n            require(onSale[ids[i]] == true, \\\"Ribbit item not on sale\\\");\\r\\n            require(supply[ids[i]] > 0, \\\"Ribbit item supply not set\\\");\\r\\n            require(walletLimit[ids[i]] > 0, \\\"Ribbit item wallet limit not set\\\");\\r\\n            require(minted[ids[i]] + amount[i] <= supply[ids[i]], \\\"Ribbit item supply exceeded\\\");\\r\\n            require(mintLimitCounter[msg.sender][ids[i]] + amount[i] <= walletLimit[ids[i]], \\\"Ribbit item wallet limit exceeded\\\");\\r\\n            mintLimitCounter[msg.sender][ids[i]] += amount[i];\\r\\n            if (track[ids[i]][msg.sender] < 1) {\\r\\n                holders[ids[i]].push(msg.sender);\\r\\n                track[ids[i]][msg.sender] = 1;\\r\\n            }\\r\\n            ribbit.transferFrom(msg.sender, address(this), saleAmount);\\r\\n            minted[ids[i]] += amount[i];\\r\\n            _mint(msg.sender, ids[i], amount[i], \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Buy collab friend\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param amount the amount of the ribbit item\\r\\n    /// @param collabId the collab id of the ribbit item\\r\\n    function collabBuy(uint256 id, uint256 amount, uint256 collabId) public {\\r\\n        IErc721 collabNFT = IErc721(collabAddresses[collabId]);\\r\\n        require(collabNFT.balanceOf(msg.sender) > 0, \\\"Collab nft not owned\\\");\\r\\n        require(froggyFriends.balanceOf(msg.sender) > 0, \\\"Froggy friend not owned\\\");\\r\\n        require(id > 0, \\\"Ribbit item ID must not be zero\\\");\\r\\n        require(price[id] > 0, \\\"Ribbit item price not set\\\");\\r\\n        uint256 saleAmount = amount * price[id];\\r\\n        require(ribbit.balanceOf(msg.sender) >= saleAmount, \\\"Insufficient funds for purchase\\\");\\r\\n        require(onSale[id] == true, \\\"Ribbit item not on sale\\\");\\r\\n        require(supply[id] > 0, \\\"Ribbit item supply not set\\\");\\r\\n        require(walletLimit[id] > 0, \\\"Ribbit item wallet limit not set\\\");\\r\\n        require(minted[id] + amount <= supply[id], \\\"Ribbit item supply exceeded\\\");\\r\\n        require(mintLimitCounter[msg.sender][id] + amount <= walletLimit[id], \\\"Ribbit item wallet limit exceeded\\\");\\r\\n        mintLimitCounter[msg.sender][id] += amount;\\r\\n        if (track[id][msg.sender] < 1) {\\r\\n            holders[id].push(msg.sender);\\r\\n            track[id][msg.sender] = 1;\\r\\n        }\\r\\n        ribbit.transferFrom(msg.sender, address(this), saleAmount);\\r\\n        minted[id] += amount;\\r\\n        _mint(msg.sender, id, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice list friend ribbit item\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param _percent the friend boost percentage\\r\\n    /// @param _price the friend price in ether format\\r\\n    /// @param _supply the friend supply\\r\\n    /// @param _boost the friend boost status (true if is a boost)\\r\\n    /// @param _onSale the friend sale status (true if is on sale)\\r\\n    /// @param _walletLimit the friend wallet limit\\r\\n    function listFriend(uint256 id, uint256 _percent, uint256 _price, uint256 _supply, bool _boost, bool _onSale, uint256 _walletLimit) public onlyOwner {\\r\\n        require(id > idCounter, \\\"Ribbit item ID exists\\\");\\r\\n        price[id] = _price * decimals;\\r\\n        percent[id] = _percent;\\r\\n        supply[id] = _supply;\\r\\n        boost[id] = _boost;\\r\\n        onSale[id] = _onSale;\\r\\n        walletLimit[id] = _walletLimit;\\r\\n        idCounter++;\\r\\n    }\\r\\n\\r\\n    /// @notice list collab friend item\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param _percent the collab friend boost percentage\\r\\n    /// @param _price the collab friend price in ether format\\r\\n    /// @param _supply the collab friend supply\\r\\n    /// @param _boost the collab friend boost status (true if is a boost)\\r\\n    /// @param _onSale the collab friend sale status (true if is on sale)\\r\\n    /// @param _walletLimit the collab friend wallet limit\\r\\n    /// @param _collabAddress the collab NFT address\\r\\n    function listCollabFriend(uint256 id, uint256 _percent, uint256 _price, uint256 _supply, bool _boost, bool _onSale, uint256 _walletLimit, address _collabAddress) public onlyOwner {\\r\\n        require(id > idCounter, \\\"Ribbit item ID exists\\\");\\r\\n        price[id] = _price * decimals;\\r\\n        percent[id] = _percent;\\r\\n        supply[id] = _supply;\\r\\n        boost[id] = _boost;\\r\\n        onSale[id] = _onSale;\\r\\n        walletLimit[id] = _walletLimit;\\r\\n        collabAddresses[collabIdCounter] = _collabAddress;\\r\\n        collabIdCounter++;\\r\\n        idCounter++;\\r\\n    }\\r\\n\\r\\n    /// @notice list ribbit item\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param _price the ribbit item price in ether format\\r\\n    /// @param _supply the ribbit item supply\\r\\n    /// @param _onSale the ribbit item sale status (true if is on sale)\\r\\n    /// @param _walletLimit the ribbit item wallet limit\\r\\n    function listItem(uint256 id, uint256 _price, uint256 _supply, bool _onSale, uint256 _walletLimit) public onlyOwner {\\r\\n        require(id > idCounter, \\\"Ribbit item ID exists\\\");\\r\\n        price[id] = _price * decimals;\\r\\n        supply[id] = _supply;\\r\\n        onSale[id] = _onSale;\\r\\n        walletLimit[id] = _walletLimit;\\r\\n        idCounter++;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the ribbit item price\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param _price the ribbit item price in ether format\\r\\n    function setPrice(uint256 id, uint256 _price) public onlyOwner {\\r\\n        require(id <= idCounter, \\\"ID does not exist\\\");\\r\\n        price[id] = _price * decimals;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the ribbit item percent\\r\\n    /// @param id the ribbit item id\\r\\n    function setPercent(uint256 id, uint256 _percent) public onlyOwner {\\r\\n        require(id <= idCounter, \\\"ID does not exist\\\");\\r\\n        percent[id] = _percent;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the ribbit item boost status (true if is boost)\\r\\n    /// @param id the ribbit item id\\r\\n    function setIsBoost(uint256 id, bool _isBoost) public onlyOwner {\\r\\n        require(id <= idCounter, \\\"ID does not exist\\\");\\r\\n        boost[id] = _isBoost;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the ribbit item supply\\r\\n    /// @param id the ribbit item id\\r\\n    function setSupply(uint256 id, uint256 _supply) public onlyOwner {\\r\\n        require(id <= idCounter, \\\"ID does not exist\\\");\\r\\n        supply[id] = _supply;\\r\\n    }\\r\\n\\r\\n    /// @notice sets ribbit item sale status\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param _onSale the ribbit item sale status (true if is on sale)\\r\\n    function setOnSale(uint256 id, bool _onSale) public onlyOwner {\\r\\n        require(id <= idCounter, \\\"ID does not exist\\\");\\r\\n        onSale[id] = _onSale;\\r\\n    }\\r\\n\\r\\n    /// @notice sets ribbit item wallet limit\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param _walletLimit the new wallet limit\\r\\n    function setWalletLimit(uint256 id, uint256 _walletLimit) public onlyOwner {\\r\\n        require(id <= idCounter, \\\"ID does not exist\\\");\\r\\n        walletLimit[id] = _walletLimit;\\r\\n    }\\r\\n\\r\\n    /// @notice sets collab friend address\\r\\n    /// @param collabId the collab friend ribbit item id\\r\\n    /// @param _collabAddress the new collab friend address\\r\\n    function setCollabAddress(uint256 collabId, address _collabAddress) public onlyOwner {\\r\\n        require(collabId <= collabIdCounter, \\\"ID does not exist\\\");\\r\\n        collabAddresses[collabId] = _collabAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice sets address burn permissions\\r\\n    /// @param add the address to update permissions for\\r\\n    /// @param canBurn the permissions to grant (true if is approved for burning)\\r\\n    function setApprovedBurnAddress(address add, bool canBurn) public onlyOwner {\\r\\n        approvedBurnAddress[add] = canBurn;\\r\\n    }\\r\\n\\r\\n    /// @notice burns the amount of ribbit items specified\\r\\n    /// @param from the address to burn the ribbit item from\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param amount the amount of ribbit items to burn\\r\\n    /// @dev burn function called by StakeFroggies.sol\\r\\n    function burn(address from, uint256 id, uint256 amount) external {\\r\\n        require(approvedBurnAddress[msg.sender] == true, \\\"Address not approved for burning\\\");\\r\\n        _burn(from, id, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice admin burns the entire ribbit item supply\\r\\n    /// @param id the ribbit item id\\r\\n    /// @dev only admin can burn the ribbit item supply\\r\\n    /// @dev only use to burn temporary ribbit items\\r\\n    function adminBurn(uint256 id) public onlyOwner {\\r\\n        for (uint256 i; i < holders[id].length; i++) {\\r\\n            _burn(holders[id][i], id, (balanceOf(holders[id][i], id)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice admin mint ribbit item to address\\r\\n    /// @param account the address to mint the ribbit item to\\r\\n    /// @param id the ribbit item id\\r\\n    /// @param amount the amount of ribbit items\\r\\n    function adminMint(address account, uint256 id, uint256 amount) public onlyOwner {\\r\\n        require(minted[id] + amount <= supply[id], \\\"Ribbit item supply exceeded\\\");\\r\\n        minted[id] += amount;\\r\\n        _mint(account, id, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice admin mints remaining ribbit items\\r\\n    /// @param id the ribbit item id\\r\\n    function adminMintAll(uint256 id) public onlyOwner {\\r\\n        uint256 remaining = supply[id] - minted[id];\\r\\n        require(minted[id] + remaining <= supply[id], \\\"\\\");\\r\\n        require(remaining > 0, \\\"Ribbit item supply reached\\\");\\r\\n        minted[id] += remaining;\\r\\n        _mint(msg.sender, id, remaining, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice returns the ribbit item price by id in gwei format\\r\\n    /// @param id the ribbit item id\\r\\n    function getPrice(uint256 id) public view returns (uint256) {\\r\\n        return price[id];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the ribbit item boost percentage\\r\\n    /// @param id the ribbit item id\\r\\n    /// @dev boostPercentage function called by StakeFroggies.sol\\r\\n    function boostPercentage(uint256 id) public view returns (uint256) {\\r\\n        return percent[id];\\r\\n    }\\r\\n\\r\\n\\t/// @notice returns the max supply of a ribbit item\\r\\n    /// @param id the ribbit item id\\r\\n    function maxSupply(uint256 id) public view returns (uint256) {\\r\\n        return supply[id];\\r\\n    }\\r\\n\\r\\n\\t/// @notice returns the ribbit item boost status (true if is boost)\\r\\n    /// @param id the ribbit item id\\r\\n    /// @dev isBoost function called by StakeFroggies.sol\\r\\n    function isBoost(uint256 id) public view returns (bool) {\\r\\n        return boost[id];\\r\\n    }\\r\\n\\r\\n\\t/// @notice returns the minted supply of a ribbit item\\r\\n    /// @param id the ribbit item id\\r\\n    function mintedSupply(uint256 id) public view returns (uint256) {\\r\\n        return minted[id];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the ribbit item sale status (true if is on sale)\\r\\n    /// @param id the ribbit item id\\r\\n    function isOnSale(uint256 id) public view returns (bool) {\\r\\n        return onSale[id];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the ribbit item wallet limit\\r\\n    /// @param id the ribbit item id\\r\\n    function getWalletLimit(uint256 id) public view returns (uint256) {\\r\\n        return walletLimit[id];\\r\\n    }\\r\\n\\r\\n\\t/// @notice returns ribbit item properties by id\\r\\n    /// @param id the ribbit item id\\r\\n    /// @return item properties\\r\\n    function item(uint256 id) public view returns (uint256, uint256, uint256, uint256, uint256, bool, bool) {\\r\\n        return (\\r\\n            getPrice(id), \\r\\n            boostPercentage(id), \\r\\n            mintedSupply(id),\\r\\n            maxSupply(id),\\r\\n            getWalletLimit(id),\\r\\n            isBoost(id), \\r\\n            isOnSale(id)\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n\\t/// @notice returns the total number of ribbit items listed\\r\\n    function totalListed() public view returns (uint256) {\\r\\n        return idCounter;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the number of collab friends listed\\r\\n    function totalCollabs() public view returns (uint256) {\\r\\n        return collabIdCounter-1;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the collab address of a collab friend\\r\\n    /// @param id the ribbit item id\\r\\n    function collabAddress(uint256 id) public view returns (address) {\\r\\n        return collabAddresses[id];\\r\\n    }\\r\\n\\r\\n\\t/// @notice returns the number of ribbit items an account owns\\r\\n    /// @param account the address to check the balance of\\r\\n    /// @param id the ribbit item id\\r\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\r\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\r\\n        return _balances[id][account];\\r\\n    }\\r\\n\\r\\n    /// @notice returns ribbit item holders\\r\\n    /// @param id the ribbit item id\\r\\n    function itemHolders(uint256 id) public view returns (address[] memory) {\\r\\n        return holders[id];\\r\\n    }\\r\\n\\r\\n    /// @notice sets the ribbit contract address\\r\\n    /// @param account the ribbit address\\r\\n    function setRibbitAddress(address account) public onlyOwner {\\r\\n        ribbit = IErc20(account);\\r\\n    }\\r\\n\\r\\n    /// @notice sets the froggy friends contract address\\r\\n    /// @param account the froggy friends address\\r\\n    function setFroggyFriendsAddress(address account) public onlyOwner {\\r\\n        froggyFriends = IErc721(account);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws ribbit balance from this contract to the admin account\\r\\n    function withdrawRibbit() public onlyOwner {\\r\\n        ribbit.transfer(msg.sender, ribbit.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /// @notice returns the contract metdata url\\r\\n    /// @dev i.e.(https://api.froggyfriendsnft.com/items/{_contractUrl})\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return string(abi.encodePacked(baseUrl, contractUrl));\\r\\n    }\\r\\n\\r\\n    /// @notice sets contract metdata uri\\r\\n    /// @param _contractUrl the new contract uri path \\r\\n    /// @dev i.e. contract/metadata (https://api.froggyfriendsnft.com/items/{_contractUrl})\\r\\n    function setContractURI(string memory _contractUrl) public onlyOwner {\\r\\n        contractUrl = _contractUrl;\\r\\n    }\\r\\n\\r\\n    /// @dev uri fills the base url with the supplied item id\\r\\n    /// @dev output format example if hosted on API https://api.froggyfriendsnft.com/item/{id}\\r\\n    function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\r\\n        return string(abi.encodePacked(baseUrl, Strings.toString(_tokenId)));\\r\\n    }\\r\\n\\r\\n    /// @notice sets the metadata base url\\r\\n    /// @param _baseUrl the metadata base url for example 'https://api.froggyfriendsnft.com/item/'\\r\\n    function setURI(string memory _baseUrl) public onlyOwner {\\r\\n        baseUrl = _baseUrl;\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC1155-balanceOfBatch}.\\r\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {\\r\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\r\\n\\r\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\r\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC165-supportsInterface}.\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC1155-setApprovalForAll}.\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC1155-isApprovedForAll}.\\r\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[account][operator];\\r\\n    }\\r\\n\\r\\n    /// @dev See {IERC1155-safeTransferFrom}.\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public virtual override {\\r\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"ERC1155: caller is not owner nor approved\\\");\\r\\n\\r\\n        _safeTransferFrom(from, to, id, amount, data);\\r\\n        if (track[id][to] < 1) {\\r\\n            holders[id].push(to);\\r\\n            track[id][to] = 1;\\r\\n        }\\r\\n\\r\\n        if (balanceOf(from, id) == 0) {\\r\\n            track[id][from] = 0;\\r\\n            for (uint256 j; j < holders[id].length; j++) {\\r\\n                if (holders[id][j] == from) {\\r\\n                    holders[id][j] = holders[id][holders[id].length - 1];\\r\\n                    holders[id].pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //// @dev See {IERC1155-safeBatchTransferFrom}.\\r\\n    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override {\\r\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"ERC1155: transfer caller is not owner nor approved\\\");\\r\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\r\\n        for (uint256 i; i < ids.length; i++) {\\r\\n            if (track[ids[i]][to] < 1) {\\r\\n                holders[ids[i]].push(to);\\r\\n                track[ids[i]][to] = 1;\\r\\n            }\\r\\n\\r\\n            if (balanceOf(from, ids[i]) == 0) {\\r\\n                track[ids[i]][from] = 0;\\r\\n                for (uint256 j; j < holders[ids[i]].length; j++) {\\r\\n                    if (holders[ids[i]][j] == from) {\\r\\n                        holders[ids[i]][j] = holders[ids[i]][holders[ids[i]].length - 1];\\r\\n                        holders[ids[i]].pop();\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\r\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\r\\n\\r\\n        address operator = _msgSender();\\r\\n        uint256[] memory ids = _asSingletonArray(id);\\r\\n        uint256[] memory amounts = _asSingletonArray(amount);\\r\\n\\r\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        uint256 fromBalance = _balances[id][from];\\r\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\r\\n        unchecked {\\r\\n            _balances[id][from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[id][to] += amount;\\r\\n\\r\\n        emit TransferSingle(operator, from, to, id, amount);\\r\\n\\r\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\r\\n    }\\r\\n\\r\\n    function _safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\r\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\r\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\r\\n\\r\\n        address operator = _msgSender();\\r\\n\\r\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; ++i) {\\r\\n            uint256 id = ids[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            uint256 fromBalance = _balances[id][from];\\r\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\r\\n            unchecked {\\r\\n                _balances[id][from] = fromBalance - amount;\\r\\n            }\\r\\n            _balances[id][to] += amount;\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(operator, from, to, ids, amounts);\\r\\n\\r\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\r\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\r\\n\\r\\n        address operator = _msgSender();\\r\\n        uint256[] memory ids = _asSingletonArray(id);\\r\\n        uint256[] memory amounts = _asSingletonArray(amount);\\r\\n\\r\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n        _balances[id][to] += amount;\\r\\n        emit TransferSingle(operator, address(0), to, id, amount);\\r\\n\\r\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\r\\n     * acceptance magic value.\\r\\n     */\\r\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\r\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\r\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\r\\n\\r\\n        address operator = _msgSender();\\r\\n\\r\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            _balances[ids[i]][to] += amounts[i];\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\r\\n\\r\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\r\\n\\r\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `from` must have at least `amount` tokens of token type `id`.\\r\\n     */\\r\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\r\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\r\\n\\r\\n        address operator = _msgSender();\\r\\n        uint256[] memory ids = _asSingletonArray(id);\\r\\n        uint256[] memory amounts = _asSingletonArray(amount);\\r\\n\\r\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n\\r\\n        uint256 fromBalance = _balances[id][from];\\r\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[id][from] = fromBalance - amount;\\r\\n        }\\r\\n\\r\\n        emit TransferSingle(operator, from, address(0), id, amount);\\r\\n\\r\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `ids` and `amounts` must have the same length.\\r\\n     */\\r\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\r\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\r\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\r\\n\\r\\n        address operator = _msgSender();\\r\\n\\r\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < ids.length; i++) {\\r\\n            uint256 id = ids[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            uint256 fromBalance = _balances[id][from];\\r\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\r\\n            unchecked {\\r\\n                _balances[id][from] = fromBalance - amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\r\\n\\r\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits a {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\r\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {}\\r\\n\\r\\n    function _doSafeTransferAcceptanceCheck(address operator, address from, address to, uint256 id, uint256 amount, bytes memory data) private {\\r\\n        if (to.isContract()) {\\r\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\r\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\r\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n                }\\r\\n            } catch Error(string memory reason) {\\r\\n                revert(reason);\\r\\n            } catch {\\r\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _doSafeBatchTransferAcceptanceCheck(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) private {\\r\\n        if (to.isContract()) {\\r\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\r\\n                bytes4 response\\r\\n            ) {\\r\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\r\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\r\\n                }\\r\\n            } catch Error(string memory reason) {\\r\\n                revert(reason);\\r\\n            } catch {\\r\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\r\\n        uint256[] memory array = new uint256[](1);\\r\\n        array[0] = element;\\r\\n\\r\\n        return array;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ribbitAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_froggyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"adminBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"adminMintAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"boostPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"bundleBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collabAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collabId\",\"type\":\"uint256\"}],\"name\":\"collabBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isBoost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isOnSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"item\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"itemHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_boost\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_onSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collabAddress\",\"type\":\"address\"}],\"name\":\"listCollabFriend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_boost\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_onSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"name\":\"listFriend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mintedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBurn\",\"type\":\"bool\"}],\"name\":\"setApprovedBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collabId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collabAddress\",\"type\":\"address\"}],\"name\":\"setCollabAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractUrl\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFroggyFriendsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBoost\",\"type\":\"bool\"}],\"name\":\"setIsBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onSale\",\"type\":\"bool\"}],\"name\":\"setOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRibbitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUrl\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollabs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalListed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRibbit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RibbitItem", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000046898f15f99b8887d87669ab19d633f579939ad90000000000000000000000008f7b5f7845224349ae9ae45b400ebae0051fcd9d000000000000000000000000000000000000000000000000000000000000000b526962626974204974656d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b524942424954204954454d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002768747470733a2f2f6170692e66726f676779667269656e64736e66742e636f6d2f6974656d732f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011636f6e74726163742f6d65746164617461000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}