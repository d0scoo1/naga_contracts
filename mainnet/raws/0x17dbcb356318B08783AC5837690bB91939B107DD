{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Renderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./base64.sol\\\";\\nimport \\\"./DynamicBuffer.sol\\\";\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n\\ncontract Renderer{\\n    \\n    \\n    function render(address addressToRender) public view returns (string memory renderedContract) {\\n        // initialize all variables\\n        bytes memory bytecode; // bytes to contain the contract's bytecode\\n        (, bytes memory uri) = DynamicBuffer.allocate(2**16); // allocate the full size of the bytes URI\\n        // for efficiency purposes we force the BMP size to 56 and thus exclude part of the contract code.\\n\\n        bytes18 header = bytes18(0x424D7C000000000000001A0000000C000000); // standard BMP header\\n\\n        bytecode = _getContractBytecode(addressToRender); // get the code running on the blockchain\\n\\n        // prepare the BMP and embed it inside an SVG (so that marketplaces can render it)\\n        DynamicBuffer.appendBytes(\\n            uri,\\n            abi.encodePacked(\\n                \\\"<?xml version='1.0' encoding='UTF-8'?><svg version='1.1' viewBox='0 0 56 56' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><image style='image-rendering:crisp-edges;image-rendering:pixelated' xlink:href='data:image/bmp;base64,\\\",\\n                Base64.encode(bytes.concat(header,bytes2(uint16(56))<<8,bytes2(uint16(56))<<8,bytes4(0x01001800),bytecode,bytes2(0))),\\\"'/></svg>\\\")\\n            );\\n\\n        return string(Base64.encode(uri));\\n    }\\n\\n      function _getContractBytecode(address _addr) public view returns (bytes memory o_code) {\\n        assembly {\\n            // allocate output byte array - this could also be done without assembly\\n            // by using o_code = new bytes(size)\\n            o_code := mload(0x40)\\n            // new \\\"memory end\\\" including padding\\n            mstore(0x40, add(o_code, and(add(add(9408, 0x20), 0x1f), not(0x1f))))\\n            // store length in memory\\n            mstore(o_code, 9408)\\n            // actually retrieve the code, this needs assembly\\n            extcodecopy(_addr, add(o_code, 0x20), 0, 9408)\\n        }\\n    }\\n\\n\\n    function sqrt(uint x) internal pure returns (uint y) {\\n        uint z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"DynamicBuffer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// @title DynamicBuffer\\n/// @author David Huber (@cxkoda) and Simon Fremaux (@dievardump)\\n///         this library is just putting together code created by David Huber\\n///         that you can find in https://github.com/cxkoda/strange-attractors/\\n///         he gave me the authorization to put it together into a single library\\n/// @notice This library is used to allocate a big amount of memory and then always update the buffer content\\n///         without needing to reallocate memory. This allows to save a lot of gas when manipulating bytes/strings\\n///         tests have allowed to return a bite more than 800k bytes within one call\\n/// @dev First, allocate memory. Then use DynamicBuffer.appendBytes(buffer, theBytes);\\nlibrary DynamicBuffer {\\n    function allocate(uint256 capacity)\\n        internal\\n        pure\\n        returns (bytes memory container, bytes memory buffer)\\n    {\\n        assembly {\\n            // Get next-free memory address\\n            container := mload(0x40)\\n\\n            // Allocate memory by setting a new next-free address\\n            {\\n                // Add 2 x 32 bytes in size for the two length fields\\n                let size := add(capacity, 0x40)\\n                let newNextFree := add(container, size)\\n                mstore(0x40, newNextFree)\\n            }\\n\\n            // Set the correct container length\\n            {\\n                let length := add(capacity, 0x40)\\n                mstore(container, length)\\n            }\\n\\n            // The buffer starts at idx 1 in the container (0 is length)\\n            buffer := add(container, 0x20)\\n\\n            // Init content with length 0\\n            mstore(buffer, 0)\\n        }\\n\\n        return (container, buffer);\\n    }\\n\\n    /// @notice Appends data_ to buffer_, and update buffer_ length\\n    /// @param buffer_ the buffer to append the data to\\n    /// @param data_ the data to append\\n    function appendBytes(bytes memory buffer_, bytes memory data_)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            let length := mload(data_)\\n            for {\\n                let data := add(data_, 32)\\n                let dataEnd := add(data, length)\\n                let buf := add(buffer_, add(mload(buffer_), 32))\\n            } lt(data, dataEnd) {\\n                data := add(data, 32)\\n                buf := add(buf, 32)\\n            } {\\n                // Copy 32B chunks from data to buffer.\\n                // This may read over data array boundaries and copy invalid\\n                // bytes, which doesn't matter in the end since we will\\n                // later set the correct buffer length.\\n                mstore(buf, mload(data))\\n            }\\n\\n            // Update buffer length\\n            mstore(buffer_, add(mload(buffer_), length))\\n        }\\n    }\\n}\"\r\n    },\r\n    \"base64.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"_getContractBytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"o_code\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRender\",\"type\":\"address\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"renderedContract\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Renderer", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}