{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/CurveLpTokenUniv3Callee.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// src/CurveLpTokenUniv3Callee.sol\r\n// Copyright (C) 2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published\r\n// by the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface GemJoinLike_2 {\r\n    function dec() external view returns (uint256);\r\n    function gem() external view returns (address);\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike_1 {\r\n    function dai() external view returns (TokenLike_1);\r\n    function join(address, uint256) external;\r\n}\r\n\r\ninterface TokenLike_1 {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ninterface ManagerLike {\r\n    function exit(address crop, address usr, uint256 val) external;\r\n}\r\n\r\ninterface CurvePoolLike_1 {\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount)\r\n        external returns (uint256);\r\n    function coins(uint256) external view returns (address);\r\n}\r\n\r\ninterface WethLike_1 is TokenLike_1 {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface UniV3RouterLike_1 {\r\n    \r\n    struct ExactInputParams_1 {\r\n        bytes   path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    function exactInput(UniV3RouterLike_1.ExactInputParams_1 calldata params)\r\n        external payable returns (uint256 amountOut);\r\n}\r\n\r\ncontract CurveLpTokenUniv3Callee {\r\n    UniV3RouterLike_1 public immutable uniV3Router;\r\n    DaiJoinLike_1     public immutable daiJoin;\r\n    TokenLike_1       public immutable dai;\r\n    address         public immutable weth;\r\n\r\n    uint256         public constant RAY = 10 ** 27;\r\n    address         public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function _add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function _sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function _divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = _add(x, _sub(y, 1)) / y;\r\n    }\r\n\r\n    struct CurveData {\r\n        address pool;\r\n        uint256 coinIndex;\r\n    }\r\n\r\n    constructor(\r\n        address uniV3Router_,\r\n        address daiJoin_,\r\n        address weth_\r\n    ) public {\r\n        uniV3Router    = UniV3RouterLike_1(uniV3Router_);\r\n        daiJoin        = DaiJoinLike_1(daiJoin_);\r\n        TokenLike_1 dai_ = DaiJoinLike_1(daiJoin_).dai();\r\n        dai            = dai_;\r\n        weth           = weth_;\r\n\r\n        dai_.approve(daiJoin_, type(uint256).max);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _fromWad(address gemJoin, uint256 wad) internal view returns (uint256 amt) {\r\n        amt = wad / 10 ** (_sub(18, GemJoinLike_2(gemJoin).dec()));\r\n    }\r\n\r\n    function clipperCall(\r\n        address sender,            // Clipper caller, pays back the loan\r\n        uint256 owe,               // Dai amount to pay back        [rad]\r\n        uint256 slice,             // Gem amount received           [wad]\r\n        bytes calldata data        // Extra data, see below\r\n    ) external {\r\n        (\r\n            address          to,        // address to send remaining DAI to\r\n            address          gemJoin,   // gemJoin adapter address\r\n            uint256          minProfit, // minimum profit in DAI to make [wad]\r\n            bytes memory     path,      // uniswap v3 path\r\n            address          manager,   // pass address(0) if no manager\r\n            CurveData memory curveData  // curve pool data\r\n        ) = abi.decode(data, (address, address, uint256, bytes, address, CurveData));\r\n\r\n        address gem = GemJoinLike_2(gemJoin).gem();\r\n\r\n        // Convert slice to token precision\r\n        slice = _fromWad(gemJoin, slice);\r\n\r\n        // Exit gem to token\r\n        if(manager != address(0)) {\r\n            ManagerLike(manager).exit(gemJoin, address(this), slice);\r\n        } else {\r\n            GemJoinLike_2(gemJoin).exit(address(this), slice);\r\n        }\r\n\r\n        // curveData used explicitly to avoid stack too deep\r\n        TokenLike_1(gem).approve(curveData.pool, slice);\r\n        slice = CurvePoolLike_1(curveData.pool).remove_liquidity_one_coin({\r\n            _token_amount: slice,\r\n            i:             int128(curveData.coinIndex),\r\n            _min_amount:   0 // minProfit is checked below\r\n        });\r\n\r\n        gem = CurvePoolLike_1(curveData.pool).coins(curveData.coinIndex);\r\n        if (gem == ETH) {\r\n            gem = weth;\r\n            WethLike_1(gem).deposit{\r\n                value: slice\r\n            }();\r\n        }\r\n\r\n        // Approve uniV3 to take gem\r\n        TokenLike_1(gem).approve(address(uniV3Router), slice);\r\n\r\n        // Calculate amount of DAI to Join (as erc20 WAD value)\r\n        uint256 daiToJoin = _divup(owe, RAY);\r\n\r\n        UniV3RouterLike_1.ExactInputParams_1 memory params = UniV3RouterLike_1.ExactInputParams_1({\r\n            path:             path,\r\n            recipient:        address(this),\r\n            deadline:         block.timestamp,\r\n            amountIn:         slice,\r\n            amountOutMinimum: _add(daiToJoin, minProfit)\r\n        });\r\n        uniV3Router.exactInput(params);\r\n\r\n        // Although Uniswap will accept all gems, this check is a sanity check, just in case\r\n        // Transfer any lingering gem to specified address\r\n        if (TokenLike_1(gem).balanceOf(address(this)) > 0) {\r\n            TokenLike_1(gem).transfer(to, TokenLike_1(gem).balanceOf(address(this)));\r\n        }\r\n\r\n        // Convert DAI bought to internal vat value of the msg.sender of Clipper.take\r\n        daiJoin.join(sender, daiToJoin);\r\n\r\n        // Transfer remaining DAI to specified address\r\n        dai.transfer(to, dai.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3Router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"owe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"clipperCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract TokenLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Router\",\"outputs\":[{\"internalType\":\"contract UniV3RouterLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CurveLpTokenUniv3Callee", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://333aaf4ca34c88d7d1bc319bfa1cd913b26184513703ff16a3e3dde28f5661eb"}]}