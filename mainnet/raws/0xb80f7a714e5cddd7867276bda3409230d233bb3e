{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v2/FirstDibsAuctionV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.13;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/security/PullPayment.sol';\\n\\nimport '../interfaces/IOwnable.sol';\\nimport './IFirstDibsMarketSettingsV2.sol';\\nimport '../royaltyEngine/IRoyaltyEngineV1.sol';\\nimport './BidUtils.sol';\\nimport './FirstDibsERC2771Context.sol';\\nimport './IERC721TokenCreatorV2.sol';\\n\\ncontract FirstDibsAuctionV2 is\\n    PullPayment,\\n    AccessControl,\\n    ReentrancyGuard,\\n    IERC721Receiver,\\n    FirstDibsERC2771Context\\n{\\n    using BidUtils for uint256;\\n\\n    bytes32 public constant BIDDER_ROLE = keccak256('BIDDER_ROLE');\\n    /**\\n     * ========================\\n     * #Public state variables\\n     * ========================\\n     */\\n    bool public bidderRoleRequired; // if true, bids require bidder having BIDDER_ROLE role\\n    bool public globalPaused; // flag for pausing all auctions\\n    IFirstDibsMarketSettingsV2 public iFirstDibsMarketSettings;\\n    IERC721TokenCreatorV2 public iERC721TokenCreatorRegistry;\\n    address public manifoldRoyaltyEngineAddress; // address of the manifold royalty engine https://royaltyregistry.xyz\\n    address public auctionV1Address; // address of the V1 auction contract, used as the source of bidder role truth\\n\\n    // Mapping auction id => Auction\\n    mapping(uint256 => Auction) public auctions;\\n    // Map token address => tokenId => auctionId\\n    mapping(address => mapping(uint256 => uint256)) public auctionIds;\\n\\n    /*\\n     * ========================\\n     * #Private state variables\\n     * ========================\\n     */\\n    uint256 private auctionIdsCounter;\\n\\n    /**\\n     * ========================\\n     * #Structs\\n     * ========================\\n     */\\n    struct AuctionSettings {\\n        uint32 buyerPremium; // RBS; added on top of current bid\\n        uint32 duration; // defaults to globalDuration\\n        uint32 minimumBidIncrement; // defaults to globalMinimumBidIncrement\\n        uint32 commissionRate; // percent; defaults to globalMarketCommission\\n    }\\n\\n    struct Bid {\\n        uint256 amount; // current winning bid of the auction\\n        uint256 buyerPremiumAmount; // current buyer premium associated with current bid\\n    }\\n\\n    struct Auction {\\n        uint256 startTime; // auction start timestamp\\n        uint256 pausedTime; // when was the auction paused\\n        uint256 reservePrice; // minimum bid threshold for auction to begin\\n        uint256 tokenId; // id of the token\\n        bool paused; // is individual auction paused\\n        address nftAddress; // address of the token\\n        address tokenOwner; // address of the owner of the token\\n        address payable fundsRecipient; // address of auction proceeds recipient\\n        address payable currentBidder; // current winning bidder of the auction\\n        address auctionCreator; // address of the creator of the auction (whoever called the createAuction method)\\n        AuctionSettings settings;\\n        Bid currentBid;\\n    }\\n\\n    /**\\n     * ========================\\n     * #Modifiers\\n     * ========================\\n     */\\n    function onlyAdmin() internal view {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'caller is not an admin');\\n    }\\n\\n    function notPaused(uint256 auctionId) internal view {\\n        require(!globalPaused && !auctions[auctionId].paused, 'auction paused');\\n    }\\n\\n    function auctionExists(uint256 auctionId) internal view {\\n        require(auctions[auctionId].fundsRecipient != address(0), \\\"auction doesn't exist\\\");\\n    }\\n\\n    function hasBid(uint256 auctionId) internal view {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            // only admin may change state of auction with bids\\n            require(\\n                auctions[auctionId].currentBidder == address(0),\\n                'only admin can update state of auction with bids'\\n            );\\n        }\\n    }\\n\\n    function senderIsAuctionCreatorOrAdmin(uint256 auctionId) internal view {\\n        require(\\n            _msgSender() == auctions[auctionId].auctionCreator ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            'must be auction creator or admin'\\n        );\\n    }\\n\\n    function checkZeroAddress(address addr) internal pure {\\n        require(addr != address(0), '0 address not allowed');\\n    }\\n\\n    /**\\n     * ========================\\n     * #Events\\n     * ========================\\n     */\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address tokenSeller,\\n        address fundsRecipient,\\n        uint256 reservePrice,\\n        bool isPaused,\\n        address auctionCreator,\\n        uint64 duration\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 bidAmount,\\n        uint256 bidBuyerPremium,\\n        uint64 duration,\\n        uint256 startTime\\n    );\\n\\n    event AuctionEnded(\\n        uint256 indexed auctionId,\\n        address indexed tokenSeller,\\n        address indexed winningBidder,\\n        uint256 winningBid,\\n        uint256 winningBidBuyerPremium,\\n        uint256 adminCommissionFee,\\n        uint256 royaltyFee,\\n        uint256 sellerPayment\\n    );\\n\\n    event AuctionPaused(\\n        uint256 indexed auctionId,\\n        address indexed tokenSeller,\\n        address toggledBy,\\n        bool isPaused,\\n        uint64 duration\\n    );\\n\\n    event AuctionCanceled(uint256 indexed auctionId, address canceledBy, uint256 refundedAmount);\\n\\n    event TransferFailed(address to, uint256 amount);\\n\\n    /**\\n     * ========================\\n     * constructor\\n     * ========================\\n     */\\n    constructor(\\n        address _marketSettings,\\n        address _creatorRegistry,\\n        address _trustedForwarder,\\n        address _manifoldRoyaltyEngineAddress,\\n        address _auctionV1Address\\n    ) FirstDibsERC2771Context(_trustedForwarder) {\\n        require(\\n            _marketSettings != address(0) &&\\n                _creatorRegistry != address(0) &&\\n                _manifoldRoyaltyEngineAddress != address(0) &&\\n                _auctionV1Address != address(0),\\n            '0 address for contract ref'\\n        );\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); // deployer of the contract gets admin permissions\\n        iFirstDibsMarketSettings = IFirstDibsMarketSettingsV2(_marketSettings);\\n        iERC721TokenCreatorRegistry = IERC721TokenCreatorV2(_creatorRegistry);\\n        manifoldRoyaltyEngineAddress = _manifoldRoyaltyEngineAddress;\\n        auctionV1Address = _auctionV1Address;\\n        bidderRoleRequired = true;\\n        auctionIdsCounter = 0;\\n    }\\n\\n    /**\\n     * @dev setter for manifold royalty engine address\\n     * @param _manifoldRoyaltyEngineAddress new manifold royalty engine address\\n     */\\n    function setManifoldRoyaltyEngineAddress(address _manifoldRoyaltyEngineAddress) external {\\n        onlyAdmin();\\n        checkZeroAddress(_manifoldRoyaltyEngineAddress);\\n        manifoldRoyaltyEngineAddress = _manifoldRoyaltyEngineAddress;\\n    }\\n\\n    /**\\n     * @dev setter for market settings address\\n     * @param _iFirstDibsMarketSettings address of the FirstDibsMarketSettings contract to set for the auction\\n     */\\n    function setIFirstDibsMarketSettings(address _iFirstDibsMarketSettings) external {\\n        onlyAdmin();\\n        checkZeroAddress(_iFirstDibsMarketSettings);\\n        iFirstDibsMarketSettings = IFirstDibsMarketSettingsV2(_iFirstDibsMarketSettings);\\n    }\\n\\n    /**\\n     * @dev setter for creator registry address\\n     * @param _iERC721TokenCreatorRegistry address of the IERC721TokenCreator contract to set for the auction\\n     */\\n    function setIERC721TokenCreatorRegistry(address _iERC721TokenCreatorRegistry) external {\\n        onlyAdmin();\\n        checkZeroAddress(_iERC721TokenCreatorRegistry);\\n        iERC721TokenCreatorRegistry = IERC721TokenCreatorV2(_iERC721TokenCreatorRegistry);\\n    }\\n\\n    /**\\n     * @dev setter for setting bidder role being required to bid\\n     * @param _bidderRole bool If true, bidder must have bidder role to bid\\n     */\\n    function setBidderRoleRequired(bool _bidderRole) external {\\n        onlyAdmin();\\n        bidderRoleRequired = _bidderRole;\\n    }\\n\\n    /**\\n     * @dev setter for global pause state\\n     * @param _paused true to pause all auctions, false to unpause all auctions\\n     */\\n    function setGlobalPaused(bool _paused) external {\\n        onlyAdmin();\\n        globalPaused = _paused;\\n    }\\n\\n    /**\\n     * @dev External function which creates an auction with a reserve price,\\n     * custom start time, custom duration, and custom minimum bid increment.\\n     *\\n     * @param _nftAddress address of ERC-721 contract\\n     * @param _tokenId uint256\\n     * @param _reservePrice uint256 reserve price in ETH\\n     * @param _pausedArg create the auction in a paused state\\n     * @param _startTimeArg (optional) unix timestamp; allow bidding to start at this time\\n     * @param _auctionDurationArg (optional) auction duration in seconds\\n     * @param _fundsRecipient address to send auction proceeds to\\n     */\\n    function createAuction(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _reservePrice,\\n        bool _pausedArg,\\n        uint64 _startTimeArg,\\n        uint32 _auctionDurationArg,\\n        address _fundsRecipient\\n    ) external {\\n        adminCreateAuction(\\n            _nftAddress,\\n            _tokenId,\\n            _reservePrice,\\n            _pausedArg,\\n            _startTimeArg,\\n            _auctionDurationArg,\\n            _fundsRecipient,\\n            10001 // adminCreateAuction function ignores values > 10000\\n        );\\n    }\\n\\n    /**\\n     * @dev External function which creates an auction with a reserve price,\\n     * custom start time, custom duration, custom minimum bid increment,\\n     * custom commission rate, and custom creator royalty rate.\\n     *\\n     * @param _nftAddress address of ERC-721 contract (latest FirstDibsToken address)\\n     * @param _tokenId uint256\\n     * @param _reservePrice reserve price in ETH\\n     * @param _pausedArg create the auction in a paused state\\n     * @param _startTimeArg (optional) unix timestamp; allow bidding to start at this time\\n     * @param _auctionDurationArg (optional) auction duration in seconds\\n     * @param _fundsRecipient address to send auction proceeds to\\n     * @param _commissionRateArg (optional) admin-only; pass in a custom marketplace commission rate\\n     */\\n    function adminCreateAuction(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _reservePrice,\\n        bool _pausedArg,\\n        uint64 _startTimeArg,\\n        uint32 _auctionDurationArg,\\n        address _fundsRecipient,\\n        uint16 _commissionRateArg\\n    ) public {\\n        notPaused(0);\\n        // May not create auctions unless you are the token owner or\\n        // an admin of this contract\\n        address tokenOwner = IERC721(_nftAddress).ownerOf(_tokenId);\\n        require(\\n            _msgSender() == tokenOwner ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) ||\\n                IERC721(_nftAddress).getApproved(_tokenId) == _msgSender() ||\\n                IERC721(_nftAddress).isApprovedForAll(tokenOwner, _msgSender()),\\n            'must be token owner, admin, or approved'\\n        );\\n\\n        require(_fundsRecipient != address(0), 'must pass funds recipient');\\n\\n        require(auctionIds[_nftAddress][_tokenId] == 0, 'auction already exists');\\n\\n        require(_reservePrice > 0, 'Reserve must be > 0');\\n\\n        Auction memory auction = Auction({\\n            currentBid: Bid({ amount: 0, buyerPremiumAmount: 0 }),\\n            nftAddress: _nftAddress,\\n            tokenId: _tokenId,\\n            tokenOwner: tokenOwner,\\n            fundsRecipient: payable(_fundsRecipient), // pass in the fundsRecipient\\n            auctionCreator: _msgSender(),\\n            reservePrice: _reservePrice, // minimum bid threshold for auction to begin\\n            startTime: 0,\\n            currentBidder: payable(address(0)), // there is no bidder at auction creation\\n            paused: _pausedArg, // is individual auction paused\\n            pausedTime: 0, // when the auction was paused\\n            settings: AuctionSettings({ // Defaults to global market settings; admins may override\\n                buyerPremium: iFirstDibsMarketSettings.globalBuyerPremium(),\\n                duration: iFirstDibsMarketSettings.globalAuctionDuration(),\\n                minimumBidIncrement: iFirstDibsMarketSettings.globalMinimumBidIncrement(),\\n                commissionRate: iFirstDibsMarketSettings.globalMarketCommission()\\n            })\\n        });\\n        if (_auctionDurationArg > 0) {\\n            require(\\n                _auctionDurationArg >= iFirstDibsMarketSettings.globalTimeBuffer(),\\n                'duration must be >= time buffer'\\n            );\\n            auction.settings.duration = _auctionDurationArg;\\n        }\\n\\n        if (_startTimeArg > 0) {\\n            require(block.timestamp < _startTimeArg, 'start time must be in the future');\\n            auction.startTime = _startTimeArg;\\n            // since `bid` is gated by `notPaused` modifier\\n            // and a start time in the future means that a bid\\n            // must be allowed after that time, we can't have\\n            // the auction paused if there is a start time > 0\\n            auction.paused = false;\\n        }\\n\\n        if (hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            if (_commissionRateArg <= 10000) {\\n                auction.settings.commissionRate = _commissionRateArg;\\n            }\\n        }\\n\\n        auctionIdsCounter++;\\n        auctions[auctionIdsCounter] = auction;\\n        auctionIds[_nftAddress][_tokenId] = auctionIdsCounter;\\n\\n        // transfer the NFT to the auction contract to hold in escrow for the duration of the auction\\n        IERC721(_nftAddress).safeTransferFrom(tokenOwner, address(this), _tokenId);\\n\\n        emit AuctionCreated(\\n            auctionIdsCounter,\\n            _nftAddress,\\n            _tokenId,\\n            tokenOwner,\\n            _fundsRecipient,\\n            _reservePrice,\\n            auction.paused,\\n            _msgSender(),\\n            auction.settings.duration\\n        );\\n    }\\n\\n    /**\\n     * @dev external function that can be called by any address which submits a bid to an auction\\n     * @param _auctionId uint256 id of the auction\\n     * @param _amount uint256 bid in WEI\\n     */\\n    function bid(uint256 _auctionId, uint256 _amount) external payable nonReentrant {\\n        auctionExists(_auctionId);\\n        notPaused(_auctionId);\\n\\n        if (bidderRoleRequired == true) {\\n            require(\\n                IAccessControl(auctionV1Address).hasRole(BIDDER_ROLE, _msgSender()),\\n                'bidder role required'\\n            );\\n        }\\n        require(msg.value > 0 && _amount == msg.value, 'invalid bid value');\\n        // Auctions with a start time can't accept bids until now is greater than start time\\n        require(block.timestamp >= auctions[_auctionId].startTime, 'auction not started');\\n        // Auctions with an end time less than now may accept a bid\\n        require(\\n            auctions[_auctionId].startTime == 0 || block.timestamp < _endTime(_auctionId),\\n            'auction expired'\\n        );\\n        require(\\n            auctions[_auctionId].currentBidder != _msgSender() &&\\n                auctions[_auctionId].fundsRecipient != _msgSender() &&\\n                auctions[_auctionId].tokenOwner != _msgSender(),\\n            'invalid bidder'\\n        );\\n\\n        // Validate the amount sent and get sent bid and sent premium\\n        (uint256 _sentBid, uint256 _sentPremium) = _amount.validateAndGetBid(\\n            auctions[_auctionId].settings.buyerPremium,\\n            auctions[_auctionId].reservePrice,\\n            auctions[_auctionId].currentBid.amount,\\n            auctions[_auctionId].settings.minimumBidIncrement,\\n            auctions[_auctionId].currentBidder\\n        );\\n\\n        // bid amount is OK, if not first bid, then transfer funds\\n        // back to previous bidder & update current bidder to the current sender\\n        if (auctions[_auctionId].startTime == 0) {\\n            auctions[_auctionId].startTime = uint64(block.timestamp);\\n        } else if (auctions[_auctionId].currentBidder != address(0)) {\\n            _tryTransferThenEscrow(\\n                auctions[_auctionId].currentBidder, // prior\\n                auctions[_auctionId].currentBid.amount +\\n                    auctions[_auctionId].currentBid.buyerPremiumAmount // refund amount\\n            );\\n        }\\n        auctions[_auctionId].currentBid.amount = _sentBid;\\n        auctions[_auctionId].currentBid.buyerPremiumAmount = _sentPremium;\\n        auctions[_auctionId].currentBidder = payable(_msgSender());\\n\\n        // extend countdown for bids within the time buffer of the auction\\n        if (\\n            // if auction ends less than globalTimeBuffer from now\\n            _endTime(_auctionId) < block.timestamp + iFirstDibsMarketSettings.globalTimeBuffer()\\n        ) {\\n            // increment the duration by the difference between the new end time and the old end time\\n            auctions[_auctionId].settings.duration += uint32(\\n                block.timestamp + iFirstDibsMarketSettings.globalTimeBuffer() - _endTime(_auctionId)\\n            );\\n        }\\n\\n        emit AuctionBid(\\n            _auctionId,\\n            _msgSender(),\\n            _sentBid,\\n            _sentPremium,\\n            auctions[_auctionId].settings.duration,\\n            auctions[_auctionId].startTime\\n        );\\n    }\\n\\n    /**\\n     * @dev method for ending an auction which has expired. Distrubutes payment to all parties & send\\n     * token to winning bidder (or returns it to the auction creator if there was no winner)\\n     * @param _auctionId uint256 id of the token\\n     */\\n    function endAuction(uint256 _auctionId) external nonReentrant {\\n        auctionExists(_auctionId);\\n        notPaused(_auctionId);\\n        require(auctions[_auctionId].currentBidder != address(0), 'no bidders; use cancelAuction');\\n\\n        require(\\n            auctions[_auctionId].startTime > 0 && //  auction has started\\n                block.timestamp >= _endTime(_auctionId), // past the endtime of the auction,\\n            'auction is not complete'\\n        );\\n\\n        Auction memory auction = auctions[_auctionId];\\n        _delete(_auctionId);\\n\\n        // send commission fee & buyer premium to commission address\\n        uint256 commissionFee = (auction.currentBid.amount * auction.settings.commissionRate) /\\n            10000;\\n        // don't attempt to transfer fees if there are none\\n        if (commissionFee + auction.currentBid.buyerPremiumAmount > 0) {\\n            _tryTransferThenEscrow(\\n                iFirstDibsMarketSettings.commissionAddress(),\\n                commissionFee + auction.currentBid.buyerPremiumAmount\\n            );\\n        }\\n\\n        // Find token creator to determine if this is a primary sale\\n        // 1.  Get token creator from 1stDibs token registry;\\n        //     applies to 1stDibs tokens only\\n        address nftCreator = iERC721TokenCreatorRegistry.tokenCreator(\\n            auction.nftAddress,\\n            auction.tokenId\\n        );\\n\\n        // 2. If token creator has not been registered through 1stDibs, check contract owner.\\n        //    We're assuming that creator is the owner, which isn't foolproof. Our primary use-case\\n        //    for non-1D tokens are Manifold ERC721 contracts and it's a reasonable assumption that\\n        //    creator equals contract owner. There are edge cases where this assumption will fail\\n        if (nftCreator == address(0)) {\\n            try IOwnable(auction.nftAddress).owner() returns (address owner) {\\n                nftCreator = owner;\\n            } catch {}\\n        }\\n\\n        uint256 royaltyAmount = 0;\\n        if (nftCreator != auction.tokenOwner && nftCreator != address(0)) {\\n            // creator is not seller, so payout royalties\\n            // get royalty information from manifold royalty engine\\n            // https://royaltyregistry.xyz/\\n            (\\n                address payable[] memory royaltyRecipients,\\n                uint256[] memory amounts\\n            ) = IRoyaltyEngineV1(manifoldRoyaltyEngineAddress).getRoyalty(\\n                    auction.nftAddress,\\n                    auction.tokenId,\\n                    auction.currentBid.amount\\n                );\\n            uint256 arrLength = royaltyRecipients.length;\\n            for (uint256 i = 0; i < arrLength; ) {\\n                if (amounts[i] != 0 && royaltyRecipients[i] != address(0)) {\\n                    royaltyAmount += amounts[i];\\n                    _sendFunds(royaltyRecipients[i], amounts[i]);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n        uint256 sellerFee = auction.currentBid.amount - royaltyAmount - commissionFee;\\n        _sendFunds(auction.fundsRecipient, sellerFee);\\n\\n        // send the NFT to the winning bidder\\n        IERC721(auction.nftAddress).safeTransferFrom(\\n            address(this), // from\\n            auction.currentBidder, // to\\n            auction.tokenId\\n        );\\n        emit AuctionEnded(\\n            _auctionId,\\n            auction.tokenOwner,\\n            auction.currentBidder,\\n            auction.currentBid.amount,\\n            auction.currentBid.buyerPremiumAmount,\\n            commissionFee,\\n            royaltyAmount,\\n            sellerFee\\n        );\\n    }\\n\\n    /**\\n     * @dev external function to cancel an auction & return the NFT to the creator of the auction\\n     * @param _auctionId uint256 auction id\\n     */\\n    function cancelAuction(uint256 _auctionId) external nonReentrant {\\n        senderIsAuctionCreatorOrAdmin(_auctionId);\\n        auctionExists(_auctionId);\\n        hasBid(_auctionId);\\n\\n        Auction memory auction = auctions[_auctionId];\\n        _delete(_auctionId);\\n\\n        // return the token back to the original owner\\n        IERC721(auction.nftAddress).safeTransferFrom(\\n            address(this),\\n            auction.tokenOwner,\\n            auction.tokenId\\n        );\\n\\n        uint256 refundAmount = 0;\\n        if (auction.currentBidder != address(0)) {\\n            // If there's a bidder, return funds to them\\n            refundAmount = auction.currentBid.amount + auction.currentBid.buyerPremiumAmount;\\n            _tryTransferThenEscrow(auction.currentBidder, refundAmount);\\n        }\\n\\n        emit AuctionCanceled(_auctionId, _msgSender(), refundAmount);\\n    }\\n\\n    /**\\n     * @dev external function for pausing / unpausing an auction\\n     * @param _auctionId uint256 auction id\\n     * @param _paused true to pause the auction, false to unpause the auction\\n     */\\n    function setAuctionPause(uint256 _auctionId, bool _paused) external {\\n        senderIsAuctionCreatorOrAdmin(_auctionId);\\n        auctionExists(_auctionId);\\n        hasBid(_auctionId);\\n\\n        if (_paused == auctions[_auctionId].paused) {\\n            revert('auction paused state not updated');\\n        }\\n        if (_paused) {\\n            auctions[_auctionId].pausedTime = uint64(block.timestamp);\\n        } else if (\\n            !_paused && auctions[_auctionId].pausedTime > 0 && auctions[_auctionId].startTime > 0\\n        ) {\\n            if (auctions[_auctionId].currentBidder != address(0)) {\\n                // if the auction has started, increment duration by difference between current time and paused time\\n                // differentiate here between an auction that has started with a bid (increment time) vs an auction that has a start time in the future (do not increment time)\\n                auctions[_auctionId].settings.duration += uint32(\\n                    block.timestamp - auctions[_auctionId].pausedTime\\n                );\\n            }\\n            auctions[_auctionId].pausedTime = 0;\\n        }\\n        auctions[_auctionId].paused = _paused;\\n        emit AuctionPaused(\\n            _auctionId,\\n            auctions[_auctionId].tokenOwner,\\n            _msgSender(),\\n            _paused,\\n            auctions[_auctionId].settings.duration\\n        );\\n    }\\n\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev Per erc721 spec this interface must be implemented to receive NFTs via\\n     *      the safeTransferFrom function. See: https://eips.ethereum.org/EIPS/eip-721 for more.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external view override returns (bytes4) {\\n        return IERC721Receiver(address(this)).onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev utility function for calculating an auctions end time\\n     * @param _auctionId uint256\\n     */\\n    function _endTime(uint256 _auctionId) private view returns (uint256) {\\n        return auctions[_auctionId].startTime + auctions[_auctionId].settings.duration;\\n    }\\n\\n    /**\\n     * @dev Delete auctionId for current auction for token+id & delete auction struct\\n     * @param _auctionId uint256\\n     */\\n    function _delete(uint256 _auctionId) private {\\n        // delete auctionId for current address+id token combo\\n        // only one auction at a time per token allowed\\n        delete auctionIds[auctions[_auctionId].nftAddress][auctions[_auctionId].tokenId];\\n        // Delete auction struct\\n        delete auctions[_auctionId];\\n    }\\n\\n    /**\\n     * @dev Sending ether is not guaranteed complete, and the method used here will\\n     * escrow the value if it fails. For example, a contract can block transfer, or might use\\n     * an excessive amount of gas, thereby griefing a bidder.\\n     * We limit the gas used in transfers, and handle failure with escrowing.\\n     * @param _to address to transfer ETH to\\n     * @param _amount uint256 WEI amount to transfer\\n     */\\n    function _tryTransferThenEscrow(address _to, uint256 _amount) private {\\n        // increase the gas limit a reasonable amount above the default, and try\\n        // to send ether to the recipient.\\n        (bool success, ) = _to.call{ value: _amount, gas: 30000 }('');\\n        if (!success) {\\n            emit TransferFailed(_to, _amount);\\n            _asyncTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev check if funds recipient is a contract. If it is, transfer ETH directly. If not, store in escrow on this contract.\\n     */\\n    function _sendFunds(address _to, uint256 _amount) private {\\n        // check if address is contract\\n        // see reference implementation at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L41\\n        if (_to.code.length > 0) {\\n            _tryTransferThenEscrow(_to, _amount);\\n        } else {\\n            _asyncTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(Context, FirstDibsERC2771Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(Context, FirstDibsERC2771Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/PullPayment.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/IFirstDibsMarketSettingsV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.13;\\n\\ninterface IFirstDibsMarketSettingsV2 {\\n    function globalBuyerPremium() external view returns (uint32);\\n\\n    function globalMarketCommission() external view returns (uint32);\\n\\n    function globalMinimumBidIncrement() external view returns (uint32);\\n\\n    function globalTimeBuffer() external view returns (uint32);\\n\\n    function globalAuctionDuration() external view returns (uint32);\\n\\n    function commissionAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/royaltyEngine/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/// @author: manifold.xyz\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external view returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/BidUtils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.13;\\n\\nlibrary BidUtils {\\n    /**\\n     * @dev Retrieves the bid and buyer premium amount from the _amount based on _buyerPremiumRate\\n     *\\n     * @param _amount The entire amount (bid amount + buyer premium amount)\\n     * @param _buyerPremiumRate The buyer premium RBS used to calculate _amount\\n     * @return The bid sent and the premium sent\\n     */\\n    function _getSentBidAndPremium(uint256 _amount, uint64 _buyerPremiumRate)\\n        private\\n        pure\\n        returns (\\n            uint256, /*sentBid*/\\n            uint256 /*sentPremium*/\\n        )\\n    {\\n        uint256 bpRate = _buyerPremiumRate + 10000;\\n        uint256 _sentBid = uint256((_amount * 10000) / bpRate);\\n        uint256 _sentPremium = uint256(_amount - _sentBid);\\n        return (_sentBid, _sentPremium);\\n    }\\n\\n    /**\\n     * @dev Validates that the total amount sent is valid for the current state of the auction\\n     *  and returns the bid amount and buyer premium amount sent\\n     *\\n     * @param _totalAmount The total amount sent (bid amount + buyer premium amount)\\n     * @param _buyerPremium The current  buyer premium rate\\n     * @param _reservePrice The reserve price of the auction\\n     * @param _currentBidAmount The current bid to validate\\n     * @param _minimumBidIncrement The minimum bid increase threshold\\n     * @param _currentBidder The address of the highest bidder of the auction\\n     * @return boolean true if the amount satisfies the state of the auction; the sent bid; and the sent premium\\n     */\\n    function validateAndGetBid(\\n        uint256 _totalAmount,\\n        uint64 _buyerPremium,\\n        uint256 _reservePrice,\\n        uint256 _currentBidAmount,\\n        uint256 _minimumBidIncrement,\\n        address _currentBidder\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256, /*sentBid*/\\n            uint256 /*sentPremium*/\\n        )\\n    {\\n        (uint256 _sentBid, uint256 _sentPremium) = _getSentBidAndPremium(\\n            _totalAmount,\\n            _buyerPremium\\n        );\\n        if (_currentBidder == address(0)) {\\n            // This is the first bid against reserve price\\n            require(_sentBid >= _reservePrice, 'reserve not met');\\n        } else {\\n            // Subsequent bids must meet minimum bid increment\\n            require(\\n                _sentBid >= _currentBidAmount + (_currentBidAmount * _minimumBidIncrement) / 10000,\\n                'minimum bid not met'\\n            );\\n        }\\n        return (_sentBid, _sentPremium);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/FirstDibsERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n * copy/paste from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n * but added a \\\"setTrustedForwarder\\\" function so we can deploy the forwarder contract after the token contract\\n */\\nabstract contract FirstDibsERC2771Context is Context, Ownable {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/IERC721TokenCreatorV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSD 3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title IERC721 Non-Fungible Token Creator basic interface\\n * @dev Interop with other systems supporting this interface\\n * @notice Original license and source here: https://github.com/Pixura/pixura-contracts\\n */\\ninterface IERC721TokenCreatorV2 {\\n    /**\\n     * @dev Gets the creator of the _tokenId on _nftAddress\\n     * @param _nftAddress address of the ERC721 contract\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(address _nftAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (address payable);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1348\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creatorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manifoldRoyaltyEngineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auctionV1Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidBuyerPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canceledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundsRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winningBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBidBuyerPremium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminCommissionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerPayment\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toggledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"AuctionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIDDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_pausedArg\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_startTimeArg\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_auctionDurationArg\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_fundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_commissionRateArg\",\"type\":\"uint16\"}],\"name\":\"adminCreateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionV1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pausedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"fundsRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionCreator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"buyerPremium\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minimumBidIncrement\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"commissionRate\",\"type\":\"uint32\"}],\"internalType\":\"struct FirstDibsAuctionV2.AuctionSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerPremiumAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FirstDibsAuctionV2.Bid\",\"name\":\"currentBid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidderRoleRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_pausedArg\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_startTimeArg\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_auctionDurationArg\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_fundsRecipient\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iERC721TokenCreatorRegistry\",\"outputs\":[{\"internalType\":\"contract IERC721TokenCreatorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iFirstDibsMarketSettings\",\"outputs\":[{\"internalType\":\"contract IFirstDibsMarketSettingsV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manifoldRoyaltyEngineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setAuctionPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bidderRole\",\"type\":\"bool\"}],\"name\":\"setBidderRoleRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setGlobalPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iERC721TokenCreatorRegistry\",\"type\":\"address\"}],\"name\":\"setIERC721TokenCreatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iFirstDibsMarketSettings\",\"type\":\"address\"}],\"name\":\"setIFirstDibsMarketSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manifoldRoyaltyEngineAddress\",\"type\":\"address\"}],\"name\":\"setManifoldRoyaltyEngineAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FirstDibsAuctionV2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1348", "ConstructorArguments": "0000000000000000000000003fc850f34d55c256937ab34294e68972988ec15f0000000000000000000000002a9699de82f9f057638fcaed65e886847a17c4ef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000385603ab55642cb4dd5de3ae9e306809991804f00000000000000000000000046852869902d9f8a4d76195fc23add15d921abd9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}