{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/extensions/summerExtension/ThePixelsIncSummerExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./../../common/interfaces/IThePixelsIncExtensionStorageV2.sol\\\";\\nimport \\\"./../../common/interfaces/ICoreRewarder.sol\\\";\\n\\ncontract ThePixelsIncSummerExtension is Ownable {\\n    address public immutable extensionStorageAddress;\\n    address public immutable rewarderAddress;\\n\\n    constructor(address _extensionStorageAddress, address _rewarderAddress) {\\n        extensionStorageAddress = _extensionStorageAddress;\\n        rewarderAddress = _rewarderAddress;\\n    }\\n\\n    function extendMultiple(uint256[] memory _tokenIds, uint256[] memory _salts)\\n        public\\n    {\\n        for (uint256 i; i < _tokenIds.length; i++) {\\n            extend(_tokenIds[i], _salts[i]);\\n        }\\n    }\\n\\n    function extend(uint256 _tokenId, uint256 _salt) public {\\n        uint256 currentVariant = IThePixelsIncExtensionStorageV2(\\n            extensionStorageAddress\\n        ).currentVariantIdOf(1, _tokenId);\\n\\n        require(currentVariant == 0, \\\"Token has already summer extension\\\");\\n\\n        uint256 rnd = _rnd(_tokenId, _salt) % 105;\\n        uint256 variant;\\n\\n        if (rnd >= 100 && rnd < 105) {           \\n            variant = 6;                        // 5\\n        } else if (rnd >= 90 && rnd < 100) {\\n            variant = 5;                        // 10\\n        } else if (rnd >= 75 && rnd < 90) {\\n            variant = 4;                        // 15\\n        } else if (rnd >= 55 && rnd < 75) {\\n            variant = 3;                        // 20\\n        } else if (rnd >= 30 && rnd < 55) {\\n            variant = 2;                        // 25\\n        } else if (rnd < 30) {\\n            variant = 1;                        // 30\\n        }\\n\\n        IThePixelsIncExtensionStorageV2(extensionStorageAddress)\\n            .extendWithVariant(msg.sender, 1, _tokenId, variant, false, 0);\\n    }\\n\\n    function _rnd(uint256 _tokenId, uint256 _salt)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.timestamp,\\n                        msg.sender,\\n                        _tokenId,\\n                        _salt\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IThePixelsIncExtensionStorageV2.sol\": {\r\n      \"content\": \"// pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixelsIncExtensionStorageV2 {\\n    struct Variant {\\n        bool isOperatorExecution;\\n        bool isFreeForCollection;\\n        bool isEnabled;\\n        bool isDisabledForSpecialPixels;\\n        uint16 contributerCut;\\n        uint128 cost;\\n        uint128 supply;\\n        uint128 count;\\n        uint128 categoryId;\\n        address contributer;\\n        address collection;\\n    }\\n\\n    struct Category {\\n        uint128 cost;\\n        uint128 supply;\\n    }\\n\\n    struct VariantStatus {\\n        bool isAlreadyClaimed;\\n        uint128 cost;\\n        uint128 supply;\\n    }\\n\\n    function extendWithVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) external;\\n\\n    function extendMultipleWithVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenId,\\n        uint256[] memory collectionTokenIds\\n    ) external;\\n\\n    function detachVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId\\n    ) external;\\n\\n    function detachVariants(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function variantDetail(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256 variantId,\\n        bool useCollectionTokenId,\\n        uint256 collectionTokenId\\n    ) external view returns (Variant memory, VariantStatus memory);\\n\\n    function variantDetails(\\n        address owner,\\n        uint256 extensionId,\\n        uint256[] memory tokenIds,\\n        uint256[] memory variantIds,\\n        bool[] memory useCollectionTokenIds,\\n        uint256[] memory collectionTokenIds\\n    ) external view returns (Variant[] memory, VariantStatus[] memory);\\n\\n    function variantsOfExtension(\\n        uint256 extensionId,\\n        uint256[] memory variantIds\\n    ) external view returns (Variant[] memory);\\n\\n    function transferExtensionVariant(\\n        address owner,\\n        uint256 extensionId,\\n        uint256 variantId,\\n        uint256 fromTokenId,\\n        uint256 toTokenId\\n    ) external;\\n\\n    function pixelExtensions(uint256 tokenId) external view returns (uint256);\\n\\n    function balanceOfToken(\\n        uint256 extensionId,\\n        uint256 tokenId,\\n        uint256[] memory variantIds\\n    ) external view returns (uint256);\\n\\n    function currentVariantIdOf(uint256 extensionId, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currentVariantIdsOf(uint256 extensionId, uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/ICoreRewarder.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\ninterface ICoreRewarder {\\n    function stake(\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function withdraw(\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function claim(uint256[] calldata tokenIds) external;\\n\\n    function earned(uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lastClaimTimesOfTokens(uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isOwner(address owner, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function tokensOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function stakedTokensOfOwner(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extensionStorageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewarderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_salts\",\"type\":\"uint256[]\"}],\"name\":\"extendMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extensionStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThePixelsIncSummerExtension", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "00000000000000000000000082627768d439e13ed58c447a77941415921803da0000000000000000000000002228b2a09ed31aedbf28172e79dc89e681504e98", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}