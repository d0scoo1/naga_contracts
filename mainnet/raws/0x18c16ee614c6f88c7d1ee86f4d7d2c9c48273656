{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Clank.sol\":{\"content\":\" // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"SafeMath.sol\\\";\\r\\n\\r\\nabstract contract ERC20Basic {\\r\\n\\tfunction totalSupply() public view virtual returns (uint256);\\r\\n\\tfunction balanceOf(address who) public view virtual returns (uint256);\\r\\n\\tfunction transfer(address to, uint256 value) public virtual returns (bool);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tmapping(address =\\u003e uint256) balances;\\r\\n\\tuint256 totalSupply_;\\r\\n\\r\\n\\tfunction totalSupply() public view override returns (uint256) {\\r\\n\\t\\treturn totalSupply_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transfer(address _to, uint256 _value) public override virtual returns (bool) {\\r\\n\\t\\trequire(_to != address(0), \\\"Clank:transfer: _to == address(0)\\\");\\r\\n\\t\\trequire(_value \\u003c= balances[msg.sender], \\\"Clank:transfer: _value \\u003e balances[msg.sender]\\\");\\r\\n\\t\\tbalances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n\\t\\tbalances[_to] = balances[_to].add(_value);\\r\\n\\t\\temit Transfer(msg.sender, _to, _value);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction balanceOf(address _owner) public view override returns (uint256) {\\r\\n\\t\\treturn balances[_owner];\\r\\n\\t}\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is ERC20Basic {\\r\\n\\tfunction allowance(address owner, address spender) public view virtual returns (uint256);\\r\\n\\tfunction transferFrom(address from, address to, uint256 value) public virtual returns (bool);\\r\\n\\tfunction approve(address spender, uint256 value) public virtual returns (bool);\\r\\n\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n\\tusing SafeMath for uint256;\\t\\t\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\r\\n\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) public override virtual returns (bool)\\r\\n\\t{\\r\\n\\t\\trequire(_to != address(0), \\\"Clank:transferFrom: _to == address(0)\\\");\\r\\n\\t\\trequire(_value \\u003c= balances[_from], \\\"Clank:transferFrom: _value \\u003e balances[_from]\\\");\\r\\n\\t\\trequire(_value \\u003c= allowed[_from][msg.sender], \\\"Clank:transferFrom: _value \\u003e allowed[_from][msg.sender]\\\");\\r\\n\\r\\n\\t\\tbalances[_from] = balances[_from].sub(_value);\\r\\n\\t\\tbalances[_to] = balances[_to].add(_value);\\r\\n\\t\\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n\\t\\temit Transfer(_from, _to, _value);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction approve(address _spender, uint256 _value) public override virtual returns (bool) {\\r\\n\\t\\tallowed[msg.sender][_spender] = _value;\\r\\n\\t\\temit Approval(msg.sender, _spender, _value);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction allowance(address _owner, address _spender) public view override virtual returns (uint256) {\\r\\n\\t\\treturn allowed[_owner][_spender];\\r\\n\\t}\\r\\n\\r\\n\\tfunction increaseApproval(address _spender, uint _addedValue) public\\treturns (bool) {\\r\\n\\t\\tallowed[msg.sender][_spender] = (\\r\\n\\t\\t\\tallowed[msg.sender][_spender].add(_addedValue));\\r\\n\\t\\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\r\\n\\t\\tuint oldValue = allowed[msg.sender][_spender];\\r\\n\\t\\tif (_subtractedValue \\u003e oldValue) {\\r\\n\\t\\t\\tallowed[msg.sender][_spender] = 0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n\\t\\t}\\r\\n\\t\\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract MultiOwnable {\\r\\n\\tmapping (address =\\u003e bool) owners;\\r\\n\\taddress unremovableOwner;\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\tevent OwnershipExtended(address indexed host, address indexed guest);\\r\\n\\tevent OwnershipRemoved(address indexed removedOwner);\\r\\n\\t\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(owners[msg.sender], \\\"Clank:onlyOwner: not in owners[msg.sender]\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\t\\r\\n\\tconstructor() {\\r\\n\\t\\towners[msg.sender] = true;\\r\\n\\t\\tunremovableOwner = msg.sender;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction addOwner(address guest) onlyOwner public {\\r\\n\\t\\trequire(guest != address(0), \\\"Clank:addOwner: guest == address(0)\\\");\\r\\n\\t\\towners[guest] = true;\\r\\n\\t\\temit OwnershipExtended(msg.sender, guest);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction removeOwner(address removedOwner) onlyOwner public {\\r\\n\\t\\trequire(removedOwner != address(0), \\\"Clank:removeOwner: removedOwner == address(0)\\\");\\r\\n\\t\\trequire(unremovableOwner != removedOwner, \\\"Clank:removeOwner: unremovableOwner != removedOwner\\\");\\r\\n\\t\\tdelete owners[removedOwner];\\r\\n\\t\\temit OwnershipRemoved(removedOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferOwnership(address newOwner) onlyOwner public {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Clank:transferOwnership: newOwner == address(0)\\\");\\r\\n\\t\\trequire(unremovableOwner != msg.sender, \\\"Clank:transferOwnership: unremovableOwner != msg.sender\\\");\\r\\n\\t\\towners[newOwner] = true;\\r\\n\\t\\tdelete owners[msg.sender];\\r\\n\\t\\temit OwnershipTransferred(msg.sender, newOwner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isOwner(address addr) public view returns(bool){\\r\\n\\t\\treturn owners[addr];\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract Clank is StandardToken, MultiOwnable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\t\\r\\n\\tuint256 public constant TOTAL_CAP = 1000000000;\\r\\n\\tstring public constant name = \\\"Clank\\\";\\r\\n\\tstring public constant symbol = \\\"CLNK\\\";\\r\\n\\tuint256 public constant decimals = 18;\\r\\n\\r\\n\\tevent Mint(address indexed _to, uint256 _amount);\\r\\n\\tevent Burn(address indexed _from, uint256 _amount);\\r\\n\\r\\n\\tconstructor() {\\r\\n\\t\\ttotalSupply_ = TOTAL_CAP.mul(10 ** decimals);\\r\\n\\t\\tbalances[msg.sender] = totalSupply_;\\r\\n\\t\\temit Transfer(address(0), msg.sender, balances[msg.sender]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\\r\\n\\t\\treturn super.transferFrom(_from, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transfer(address _to, uint256 _value) public override returns (bool) {\\r\\n\\t\\treturn super.transfer(_to, _value);\\r\\n\\t}\\r\\n \\r\\n\\tfunction mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\\r\\n\\t\\trequire(_to != address(0), \\\"Clank:mint: _to == address(0)\\\");\\r\\n\\t\\ttotalSupply_ = totalSupply_.add(_amount);\\r\\n\\t\\tbalances[_to] = balances[_to].add(_amount);\\r\\n\\t\\temit Mint(_to, _amount);\\r\\n\\t\\temit Transfer(address(0), _to, _amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n \\r\\n\\tfunction burn(uint256 _amount) onlyOwner public {\\r\\n\\t\\trequire(_amount \\u003c= balances[msg.sender], \\\"Clank:burn: _amount \\u003e balances[msg.sender]\\\");\\r\\n\\t\\ttotalSupply_ = totalSupply_.sub(_amount);\\r\\n\\t\\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\\r\\n\\t\\temit Burn(msg.sender, _amount);\\r\\n\\t\\temit Transfer(msg.sender, address(0), _amount);\\r\\n\\t}\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction underflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"}],\"name\":\"OwnershipExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Clank", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://88137ecf9591bf05f54290dd065ad59369546845178537f8ae22b13440e6700a"}]}