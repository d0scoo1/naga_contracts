{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/AlphaDogsAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {Ownable} from \\\"@openzeppelin/access/Ownable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/utils/Strings.sol\\\";\\nimport {MetadataHelpers} from \\\"./libraries/MetadataHelpers.sol\\\";\\nimport {Base64} from \\\"./libraries/Base64.sol\\\";\\nimport {Gene} from \\\"./libraries/Gene.sol\\\";\\nimport {IAlphaDogsAttributes} from \\\"./interfaces/IAlphaDogsAttributes.sol\\\";\\nimport {IAlphaDogs} from \\\"./interfaces/IAlphaDogs.sol\\\";\\n\\n// Generated code. Do not modify!\\ncontract AlphaDogsAttributes is IAlphaDogsAttributes, Ownable {\\n    using Strings for uint256;\\n    using Gene for uint256;\\n\\n    error NotChanged();\\n\\n    bytes32 private constant EMPTY_STRING = keccak256(\\\"\\\");\\n\\n    /// @notice the base URI of the nft image\\n    string public imageBaseURI;\\n\\n    constructor(string memory _imageBaseURI) {\\n        imageBaseURI = _imageBaseURI;\\n    }\\n\\n    function setBaseURI(string calldata _imageBaseURI) external onlyOwner {\\n        if (keccak256(bytes(_imageBaseURI)) == keccak256(bytes(imageBaseURI)))\\n            revert NotChanged();\\n        imageBaseURI = _imageBaseURI;\\n    }\\n\\n    function tokenURI(\\n        uint256 gene,\\n        bytes memory name,\\n        string memory lore\\n    ) public view override returns (string memory) {\\n        string memory metadata = makeMetadata(gene, name, lore);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(bytes(metadata))\\n                )\\n            );\\n    }\\n\\n    function makeMetadata(\\n        uint256 gene,\\n        bytes memory name,\\n        string memory lore\\n    ) internal view returns (string memory) {\\n        if (keccak256(bytes(name)) == EMPTY_STRING) {\\n            name = defaultName(gene);\\n        }\\n\\n        return\\n            MetadataHelpers.makeMetadata(\\n                name,\\n                lore,\\n                abi.encodePacked(imageBaseURI, gene.toString()),\\n                makeAttributes(gene)\\n            );\\n    }\\n\\n    function makeAttributes(uint256 gene)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string[] memory attributes = new string[](8);\\n        attributes[0] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Generation\\\",\\n            gene.isPuppy() ? \\\"Puppy\\\" : \\\"Genesis\\\"\\n        );\\n\\n        attributes[1] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Background\\\",\\n            getBackgroundValue(gene)\\n        );\\n        attributes[2] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Fur\\\",\\n            getFurValue(gene)\\n        );\\n        attributes[3] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Neck\\\",\\n            getNeckValue(gene)\\n        );\\n        attributes[4] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Eyes\\\",\\n            getEyesValue(gene)\\n        );\\n        attributes[5] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Hat\\\",\\n            getHatValue(gene)\\n        );\\n        attributes[6] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Mouth\\\",\\n            getMouthValue(gene)\\n        );\\n        attributes[7] = MetadataHelpers.makeAttributeJSON(\\n            \\\"Nosering\\\",\\n            getNoseringValue(gene)\\n        );\\n\\n        return MetadataHelpers.makeAttributeListJSON(attributes);\\n    }\\n\\n    function defaultName(uint256 gene) internal pure returns (bytes memory) {\\n        if (gene.isPuppy()) {\\n            // Ignore puppy flag\\n            return\\n                abi.encodePacked(\\n                    \\\"Puppy #\\\",\\n                    (gene & 0xFFFFFFFFFFFFFF).toHexString()\\n                );\\n        }\\n\\n        return abi.encodePacked(\\\"Genesis #\\\", gene.toHexString());\\n    }\\n\\n    function getBackgroundValue(uint256 gene)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 chromossome = gene.getBackground();\\n        if (chromossome == 0) {\\n            return \\\"Winter\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"Space\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"Night Forest\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Dreams\\\";\\n        }\\n        if (chromossome == 4) {\\n            return \\\"Snowy Mountains\\\";\\n        }\\n        if (chromossome == 5) {\\n            return \\\"Stars\\\";\\n        }\\n        if (chromossome == 6) {\\n            return \\\"Inferno\\\";\\n        }\\n        if (chromossome == 7) {\\n            return \\\"Woods\\\";\\n        }\\n        if (chromossome == 8) {\\n            return \\\"Alpha System\\\";\\n        }\\n        if (chromossome == 9) {\\n            return \\\"Red Moon\\\";\\n        }\\n        if (chromossome == 10) {\\n            return \\\"Castle\\\";\\n        }\\n        if (chromossome == 11) {\\n            return \\\"Evening\\\";\\n        }\\n        if (chromossome == 12) {\\n            return \\\"Lightining\\\";\\n        }\\n        if (chromossome == 13) {\\n            return \\\"Pink Clouds\\\";\\n        }\\n        if (chromossome == 14) {\\n            return \\\"Night City\\\";\\n        }\\n        if (chromossome == 15) {\\n            return \\\"Underwater\\\";\\n        }\\n        if (chromossome == 16) {\\n            return \\\"Cute Sky\\\";\\n        }\\n        if (chromossome == 17) {\\n            return \\\"Alpha City\\\";\\n        }\\n        if (chromossome == 18) {\\n            return \\\"Cozy Room\\\";\\n        }\\n        if (chromossome == 19) {\\n            return \\\"Clouds\\\";\\n        }\\n        if (chromossome == 20) {\\n            return \\\"Crystal Cave\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getFurValue(uint256 gene) public pure returns (string memory) {\\n        uint256 chromossome = gene.getFur();\\n        if (chromossome == 0) {\\n            return \\\"Golden\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"Red\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"Snow\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Brown\\\";\\n        }\\n        if (chromossome == 4) {\\n            return \\\"Grey\\\";\\n        }\\n        if (chromossome == 5) {\\n            return \\\"Radioactive\\\";\\n        }\\n        if (chromossome == 6) {\\n            return \\\"Pink\\\";\\n        }\\n        if (chromossome == 7) {\\n            return \\\"Purple\\\";\\n        }\\n        if (chromossome == 8) {\\n            return \\\"Orange\\\";\\n        }\\n        if (chromossome == 9) {\\n            return \\\"Black\\\";\\n        }\\n        if (chromossome == 10) {\\n            return \\\"Blue\\\";\\n        }\\n        if (chromossome == 11) {\\n            return \\\"Dark\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getNeckValue(uint256 gene) public pure returns (string memory) {\\n        uint256 chromossome = gene.getNeck();\\n        if (chromossome == 0) {\\n            return \\\"White Polo\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"Black Hoodie\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"Purple Hoodie\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Blue Sports Hoodie\\\";\\n        }\\n        if (chromossome == 4) {\\n            return \\\"None\\\";\\n        }\\n        if (chromossome == 5) {\\n            return \\\"Blue Bowtie\\\";\\n        }\\n        if (chromossome == 6) {\\n            return \\\"Green Jacket\\\";\\n        }\\n        if (chromossome == 7) {\\n            return \\\"Stars\\\";\\n        }\\n        if (chromossome == 8) {\\n            return \\\"Red Scarf\\\";\\n        }\\n        if (chromossome == 9) {\\n            return \\\"Red Hoodie\\\";\\n        }\\n        if (chromossome == 10) {\\n            return \\\"Bronze Medal\\\";\\n        }\\n        if (chromossome == 11) {\\n            return \\\"Pattern\\\";\\n        }\\n        if (chromossome == 12) {\\n            return \\\"Silver Chain\\\";\\n        }\\n        if (chromossome == 13) {\\n            return \\\"Caesar\\\";\\n        }\\n        if (chromossome == 14) {\\n            return \\\"Golden Bowtie\\\";\\n        }\\n        if (chromossome == 15) {\\n            return \\\"Half Hoodie\\\";\\n        }\\n        if (chromossome == 16) {\\n            return \\\"Golden Chain\\\";\\n        }\\n        if (chromossome == 17) {\\n            return \\\"AD Golden Chain\\\";\\n        }\\n        if (chromossome == 18) {\\n            return \\\"Dog Tag\\\";\\n        }\\n        if (chromossome == 19) {\\n            return \\\"Golden Spikes\\\";\\n        }\\n        if (chromossome == 20) {\\n            return \\\"Silver Medal\\\";\\n        }\\n        if (chromossome == 21) {\\n            return \\\"Red Bowtie\\\";\\n        }\\n        if (chromossome == 22) {\\n            return \\\"Army Hoddie\\\";\\n        }\\n        if (chromossome == 23) {\\n            return \\\"Anime\\\";\\n        }\\n        if (chromossome == 24) {\\n            return \\\"Brown Jacket\\\";\\n        }\\n        if (chromossome == 25) {\\n            return \\\"Fire Hoodie\\\";\\n        }\\n        if (chromossome == 26) {\\n            return \\\"Leonhart Jacket\\\";\\n        }\\n        if (chromossome == 27) {\\n            return \\\"Red Polo\\\";\\n        }\\n        if (chromossome == 28) {\\n            return \\\"Red Jacket\\\";\\n        }\\n        if (chromossome == 29) {\\n            return \\\"Golden Medal\\\";\\n        }\\n        if (chromossome == 30) {\\n            return \\\"Tie Dye Hoddie\\\";\\n        }\\n        if (chromossome == 31) {\\n            return \\\"Emo Hoodie\\\";\\n        }\\n        if (chromossome == 32) {\\n            return \\\"AD Silver Chain\\\";\\n        }\\n        if (chromossome == 33) {\\n            return \\\"Purple Scarf\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getEyesValue(uint256 gene) public pure returns (string memory) {\\n        uint256 chromossome = gene.getEyes();\\n        if (chromossome == 0) {\\n            return \\\"3D Glasses\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"ET Sunglasses\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"Embarrassed\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Laser\\\";\\n        }\\n        if (chromossome == 4) {\\n            return \\\"Normal\\\";\\n        }\\n        if (chromossome == 5) {\\n            return \\\"Not Happy\\\";\\n        }\\n        if (chromossome == 6) {\\n            return \\\"Yellow Glasses\\\";\\n        }\\n        if (chromossome == 7) {\\n            return \\\"Purple\\\";\\n        }\\n        if (chromossome == 8) {\\n            return \\\"Gimme Food\\\";\\n        }\\n        if (chromossome == 9) {\\n            return \\\"Very Happy\\\";\\n        }\\n        if (chromossome == 10) {\\n            return \\\"Green Visor\\\";\\n        }\\n        if (chromossome == 11) {\\n            return \\\"Sweat Drop\\\";\\n        }\\n        if (chromossome == 12) {\\n            return \\\"Closed\\\";\\n        }\\n        if (chromossome == 13) {\\n            return \\\"Looking Up\\\";\\n        }\\n        if (chromossome == 14) {\\n            return \\\"Rainbow Glasses\\\";\\n        }\\n        if (chromossome == 15) {\\n            return \\\"Shy\\\";\\n        }\\n        if (chromossome == 16) {\\n            return \\\"Golden Monocle\\\";\\n        }\\n        if (chromossome == 17) {\\n            return \\\"Slim Green Glasses\\\";\\n        }\\n        if (chromossome == 18) {\\n            return \\\"Red Visor\\\";\\n        }\\n        if (chromossome == 19) {\\n            return \\\"High\\\";\\n        }\\n        if (chromossome == 20) {\\n            return \\\"Red Eyes\\\";\\n        }\\n        if (chromossome == 21) {\\n            return \\\"Golden Glasses\\\";\\n        }\\n        if (chromossome == 22) {\\n            return \\\"Angry\\\";\\n        }\\n        if (chromossome == 23) {\\n            return \\\"Shades\\\";\\n        }\\n        if (chromossome == 24) {\\n            return \\\"Crying\\\";\\n        }\\n        if (chromossome == 25) {\\n            return \\\"Golden Sunglasses\\\";\\n        }\\n        if (chromossome == 26) {\\n            return \\\"White Eyes\\\";\\n        }\\n        if (chromossome == 27) {\\n            return \\\"Edgy\\\";\\n        }\\n        if (chromossome == 28) {\\n            return \\\"Purple Glasses\\\";\\n        }\\n        if (chromossome == 29) {\\n            return \\\"Big Eyes\\\";\\n        }\\n        if (chromossome == 30) {\\n            return \\\"Slim Pink Glasses\\\";\\n        }\\n        if (chromossome == 31) {\\n            return \\\"Heart Glasses\\\";\\n        }\\n        if (chromossome == 32) {\\n            return \\\"Moon\\\";\\n        }\\n        if (chromossome == 33) {\\n            return \\\"Black Rim\\\";\\n        }\\n        if (chromossome == 34) {\\n            return \\\"Sleeping\\\";\\n        }\\n        if (chromossome == 35) {\\n            return \\\"Heart Eyes\\\";\\n        }\\n        if (chromossome == 36) {\\n            return \\\"Robot\\\";\\n        }\\n        if (chromossome == 37) {\\n            return \\\"Red Glasses\\\";\\n        }\\n        if (chromossome == 38) {\\n            return \\\"Distrust\\\";\\n        }\\n        if (chromossome == 39) {\\n            return \\\"Anime\\\";\\n        }\\n        if (chromossome == 40) {\\n            return \\\"Eye Patch\\\";\\n        }\\n        if (chromossome == 41) {\\n            return \\\"Scott's\\\";\\n        }\\n        if (chromossome == 42) {\\n            return \\\"VR\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getHatValue(uint256 gene) public pure returns (string memory) {\\n        uint256 chromossome = gene.getHat();\\n        if (chromossome == 0) {\\n            return \\\"Airforce\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"Magical Crown\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"Blue Pirate\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Poke Cap\\\";\\n        }\\n        if (chromossome == 4) {\\n            return \\\"Aviator\\\";\\n        }\\n        if (chromossome == 5) {\\n            return \\\"Purple Cap\\\";\\n        }\\n        if (chromossome == 6) {\\n            return \\\"Pink Pocker\\\";\\n        }\\n        if (chromossome == 7) {\\n            return \\\"Bitten\\\";\\n        }\\n        if (chromossome == 8) {\\n            return \\\"Purple Beanie\\\";\\n        }\\n        if (chromossome == 9) {\\n            return \\\"Goggles\\\";\\n        }\\n        if (chromossome == 10) {\\n            return \\\"Silver Earring\\\";\\n        }\\n        if (chromossome == 11) {\\n            return \\\"None\\\";\\n        }\\n        if (chromossome == 12) {\\n            return \\\"Alpha Cap\\\";\\n        }\\n        if (chromossome == 13) {\\n            return \\\"Trainer Cap\\\";\\n        }\\n        if (chromossome == 14) {\\n            return \\\"Creepy Mage\\\";\\n        }\\n        if (chromossome == 15) {\\n            return \\\"Black Bucket Hat\\\";\\n        }\\n        if (chromossome == 16) {\\n            return \\\"AD Cap\\\";\\n        }\\n        if (chromossome == 17) {\\n            return \\\"Red Mohawk\\\";\\n        }\\n        if (chromossome == 18) {\\n            return \\\"White Bucket Hat\\\";\\n        }\\n        if (chromossome == 19) {\\n            return \\\"Pink Cloth\\\";\\n        }\\n        if (chromossome == 20) {\\n            return \\\"Angel\\\";\\n        }\\n        if (chromossome == 21) {\\n            return \\\"Navy\\\";\\n        }\\n        if (chromossome == 22) {\\n            return \\\"Classic Witch\\\";\\n        }\\n        if (chromossome == 23) {\\n            return \\\"Straw Hat\\\";\\n        }\\n        if (chromossome == 24) {\\n            return \\\"Black Pocker\\\";\\n        }\\n        if (chromossome == 25) {\\n            return \\\"Red Dog Bucket\\\";\\n        }\\n        if (chromossome == 26) {\\n            return \\\"Ninja Bandana\\\";\\n        }\\n        if (chromossome == 27) {\\n            return \\\"Golden Skull\\\";\\n        }\\n        if (chromossome == 28) {\\n            return \\\"Caesar\\\";\\n        }\\n        if (chromossome == 29) {\\n            return \\\"Leprechaun\\\";\\n        }\\n        if (chromossome == 30) {\\n            return \\\"Black Fedora\\\";\\n        }\\n        if (chromossome == 31) {\\n            return \\\"Top Hat\\\";\\n        }\\n        if (chromossome == 32) {\\n            return \\\"Pirate\\\";\\n        }\\n        if (chromossome == 33) {\\n            return \\\"Black Cap\\\";\\n        }\\n        if (chromossome == 34) {\\n            return \\\"Concussion\\\";\\n        }\\n        if (chromossome == 35) {\\n            return \\\"Arrow\\\";\\n        }\\n        if (chromossome == 36) {\\n            return \\\"BrownGreen Cap\\\";\\n        }\\n        if (chromossome == 37) {\\n            return \\\"Yellow Beanie\\\";\\n        }\\n        if (chromossome == 38) {\\n            return \\\"Gray Fedora\\\";\\n        }\\n        if (chromossome == 39) {\\n            return \\\"Fairy\\\";\\n        }\\n        if (chromossome == 40) {\\n            return \\\"Wizzard\\\";\\n        }\\n        if (chromossome == 41) {\\n            return \\\"Red Pocker\\\";\\n        }\\n        if (chromossome == 42) {\\n            return \\\"Frankie\\\";\\n        }\\n        if (chromossome == 43) {\\n            return \\\"BlackRed Cap\\\";\\n        }\\n        if (chromossome == 44) {\\n            return \\\"Blue Cap\\\";\\n        }\\n        if (chromossome == 45) {\\n            return \\\"Black Beanie\\\";\\n        }\\n        if (chromossome == 46) {\\n            return \\\"White Fedora\\\";\\n        }\\n        if (chromossome == 47) {\\n            return \\\"Cowboy\\\";\\n        }\\n        if (chromossome == 48) {\\n            return \\\"Red Beanie\\\";\\n        }\\n        if (chromossome == 49) {\\n            return \\\"Green Beanie\\\";\\n        }\\n        if (chromossome == 50) {\\n            return \\\"Robin\\\";\\n        }\\n        if (chromossome == 51) {\\n            return \\\"Destroyed\\\";\\n        }\\n        if (chromossome == 52) {\\n            return \\\"Red Crown\\\";\\n        }\\n        if (chromossome == 53) {\\n            return \\\"Purple Pocker\\\";\\n        }\\n        if (chromossome == 54) {\\n            return \\\"Black Cloth\\\";\\n        }\\n        if (chromossome == 55) {\\n            return \\\"Golden Earring\\\";\\n        }\\n        if (chromossome == 56) {\\n            return \\\"Officer\\\";\\n        }\\n        if (chromossome == 57) {\\n            return \\\"Blue Beanie\\\";\\n        }\\n        if (chromossome == 58) {\\n            return \\\"Blue Bucket Hat\\\";\\n        }\\n        if (chromossome == 59) {\\n            return \\\"Green Mohawk\\\";\\n        }\\n        if (chromossome == 60) {\\n            return \\\"Red Pirate\\\";\\n        }\\n        if (chromossome == 61) {\\n            return \\\"Golden Egg\\\";\\n        }\\n        if (chromossome == 62) {\\n            return \\\"Green Pocker\\\";\\n        }\\n        if (chromossome == 63) {\\n            return \\\"Big Crown\\\";\\n        }\\n        if (chromossome == 64) {\\n            return \\\"Army Cap\\\";\\n        }\\n        if (chromossome == 65) {\\n            return \\\"Tie Dye Bucket Hat\\\";\\n        }\\n        if (chromossome == 66) {\\n            return \\\"Half Bucket hat\\\";\\n        }\\n        if (chromossome == 67) {\\n            return \\\"Anime Bucket Hat\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getMouthValue(uint256 gene) public pure returns (string memory) {\\n        uint256 chromossome = gene.getMouth();\\n        if (chromossome == 0) {\\n            return \\\"Biscuit\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"Sticking Tongue\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"None\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Premium Cigar\\\";\\n        }\\n        if (chromossome == 4) {\\n            return \\\"Tiny Fang\\\";\\n        }\\n        if (chromossome == 5) {\\n            return \\\"Smoking Pipe\\\";\\n        }\\n        if (chromossome == 6) {\\n            return \\\"Homemade\\\";\\n        }\\n        if (chromossome == 7) {\\n            return \\\"Blood Fangs\\\";\\n        }\\n        if (chromossome == 8) {\\n            return \\\"Ball\\\";\\n        }\\n        if (chromossome == 9) {\\n            return \\\"Vape\\\";\\n        }\\n        if (chromossome == 10) {\\n            return \\\"Coin\\\";\\n        }\\n        if (chromossome == 11) {\\n            return \\\"Steak\\\";\\n        }\\n        if (chromossome == 12) {\\n            return \\\"Bone\\\";\\n        }\\n        if (chromossome == 13) {\\n            return \\\"Drooling\\\";\\n        }\\n        if (chromossome == 14) {\\n            return \\\"Donut\\\";\\n        }\\n        if (chromossome == 15) {\\n            return \\\"Frisbee\\\";\\n        }\\n        if (chromossome == 16) {\\n            return \\\"Fang\\\";\\n        }\\n        if (chromossome == 17) {\\n            return \\\"Cigarrete\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getNoseringValue(uint256 gene)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 chromossome = gene.getNosering();\\n        if (chromossome == 0) {\\n            return \\\"None\\\";\\n        }\\n        if (chromossome == 1) {\\n            return \\\"Golden\\\";\\n        }\\n        if (chromossome == 2) {\\n            return \\\"Bronze\\\";\\n        }\\n        if (chromossome == 3) {\\n            return \\\"Silver\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/MetadataHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\n// solhint-disable quotes\\nlibrary MetadataHelpers {\\n    function makeMetadata(\\n        bytes memory name,\\n        string memory description,\\n        bytes memory image,\\n        string memory attributes\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    description,\\n                    '\\\",\\\"image\\\":\\\"',\\n                    image,\\n                    '\\\",\\\"attributes\\\":',\\n                    attributes,\\n                    \\\"}\\\"\\n                )\\n            );\\n    }\\n\\n    function makeAttributeJSON(string memory traitType, string memory value)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\":\\\"',\\n                    traitType,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function makeAttributeListJSON(string[] memory attributes)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory attributeListBytes = \\\"[\\\";\\n\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            attributeListBytes = abi.encodePacked(\\n                attributeListBytes,\\n                attributes[i],\\n                i != attributes.length - 1 ? \\\",\\\" : \\\"]\\\"\\n            );\\n        }\\n\\n        return string(attributeListBytes);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\n///         Source: https://github.com/Brechtpd/base64/blob/4d85607b18d981acff392d2e99ba654305552a97/base64.sol\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Gene.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\n/// @title  AlphaDogs Gene Library\\n/// @author Aleph Retamal <github.com/alephao>\\n/// @notice Library containing functions for querying info about a gene.\\nlibrary Gene {\\n    /// @notice A gene is puppy if its 8th byte is greater than 0\\n    function isPuppy(uint256 gene) internal pure returns (bool) {\\n        return (gene & 0xFF00000000000000) > 0;\\n    }\\n\\n    /// @notice Get a specific chromossome in a gene, first position is 0\\n    function getChromossome(uint256 gene, uint32 position)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint32 shift = 8 * position;\\n            return (gene & (0xFF << shift)) >> shift;\\n        }\\n    }\\n\\n    function getBackground(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 6);\\n    }\\n\\n    function getFur(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 5);\\n    }\\n\\n    function getNeck(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 4);\\n    }\\n\\n    function getEyes(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 3);\\n    }\\n\\n    function getHat(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 2);\\n    }\\n\\n    function getMouth(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 1);\\n    }\\n\\n    function getNosering(uint256 gene) internal pure returns (uint256) {\\n        return getChromossome(gene, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAlphaDogsAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\ninterface IAlphaDogsAttributes {\\n    function tokenURI(\\n        uint256 id,\\n        bytes memory name,\\n        string memory lore\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAlphaDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {IAlphaDogsEvents} from \\\"./IAlphaDogsEvents.sol\\\";\\nimport {IAlphaDogsErrors} from \\\"./IAlphaDogsErrors.sol\\\";\\n\\ninterface IAlphaDogs is IAlphaDogsEvents, IAlphaDogsErrors {\\n    struct CustomMetadata {\\n        string name;\\n        string lore;\\n    }\\n\\n    struct Stake {\\n        address owner;\\n        uint96 stakedAt;\\n    }\\n\\n    // mapping(uint256 => CustomMetadata) getMetadata;\\n    function getMetadata(uint256 id)\\n        external\\n        view\\n        returns (CustomMetadata memory);\\n\\n    function setName(uint256 id, string calldata newName) external;\\n\\n    function setLore(uint256 id, string calldata newLore) external;\\n\\n    function stake(uint256[] calldata tokenIds) external;\\n\\n    function unstake(uint256[] calldata tokenIds) external;\\n\\n    function claim(uint256[] calldata tokenIds) external;\\n\\n    function premint(bytes32[] calldata proof) external;\\n\\n    function mint() external;\\n\\n    function breed(uint256 mom, uint256 dad) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAlphaDogsEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\ninterface IAlphaDogsEvents {\\n    event NameChanged(uint256 indexed id, string name);\\n    event LoreChanged(uint256 indexed id, string lore);\\n    event Breeded(uint256 indexed child, uint256 mom, uint256 dad);\\n    event Staked(uint256 indexed id);\\n    event Unstaked(uint256 indexed id, uint256 amount);\\n    event ClaimedTokens(uint256 indexed id, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAlphaDogsErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\ninterface IAlphaDogsErrors {\\n    /// @dev 0x2783839d\\n    error InsufficientTokensAvailable();\\n    /// @dev 0x154e0758\\n    error InsufficientReservedTokensAvailable();\\n    /// @dev 0x8152a42e\\n    error InsufficientNonReservedTokensAvailable();\\n    /// @dev 0x53bb24f9\\n    error TokenLimitReached();\\n    /// @dev 0xb05e92fa\\n    error InvalidMerkleProof();\\n    /// @dev 0x2c5211c6\\n    error InvalidAmount();\\n    /// @dev 0x50e55ae1\\n    error InvalidAmountToClaim();\\n    /// @dev 0x6aa2a937\\n    error InvalidTokenID();\\n    /// @dev 0x1ae3550b\\n    error InvalidNameLength();\\n    /// @dev 0x8a0fcaee\\n    error InvalidSameValue();\\n    /// @dev 0x2a7c6b6e\\n    error InvalidTokenOwner();\\n    /// @dev 0x8e8ede30\\n    error FusionWithSameParentsForbidden();\\n    /// @dev 0x6d074376\\n    error FusionWithPuppyForbidden();\\n    /// @dev 0x36a1c33f\\n    error NotChanged();\\n    /// @dev 0x80cb55e2\\n    error NotActive();\\n    /// @dev 0xb4fa3fb3\\n    error InvalidInput();\\n    /// @dev 0xddb5de5e\\n    error InvalidSender();\\n    /// @dev 0x21029e82\\n    error InvalidChar();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"$/=src/\",\r\n      \"@ds-test/=lib/ds-test/src/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@hevm/=lib/hevm/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotChanged\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getBackgroundValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getEyesValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getFurValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getHatValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getMouthValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getNeckValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"getNoseringValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gene\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"lore\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlphaDogsAttributes", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e68747470733a2f2f62322e616c706861646f67736e66742e696f2f66696c652f616c706861646f67732f696d672f000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}