{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pool/PoolV2.sol\": {\r\n      \"content\": \"// Be name Khoda\\n// Bime Abolfazl\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.13;\\npragma abicoder v2;\\n\\n// =================================================================================================================\\n//  _|_|_|    _|_|_|_|  _|    _|    _|_|_|      _|_|_|_|  _|                                                       |\\n//  _|    _|  _|        _|    _|  _|            _|            _|_|_|      _|_|_|  _|_|_|      _|_|_|    _|_|       |\\n//  _|    _|  _|_|_|    _|    _|    _|_|        _|_|_|    _|  _|    _|  _|    _|  _|    _|  _|        _|_|_|_|     |\\n//  _|    _|  _|        _|    _|        _|      _|        _|  _|    _|  _|    _|  _|    _|  _|        _|           |\\n//  _|_|_|    _|_|_|_|    _|_|    _|_|_|        _|        _|  _|    _|    _|_|_|  _|    _|    _|_|_|    _|_|_|     |\\n// =================================================================================================================\\n// ============================= DEIPool =============================\\n// ===================================================================\\n// DEUS Finance: https://github.com/DeusFinance\\n\\n// Primary Author(s)\\n// Vahid: https://github.com/vahid-dev\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../Uniswap/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IPoolLibrary.sol\\\";\\nimport \\\"./interfaces/IPoolV2.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IDEUS.sol\\\";\\nimport \\\"./interfaces/IDEI.sol\\\";\\n\\n/// @title Minter Pool Contract V2\\n/// @author DEUS Finance\\n/// @notice Minter pool of DEI stablecoin\\n/// @dev Uses twap and vwap for DEUS price in DEI redemption by using muon oracles\\n///      Usable for stablecoins as collateral\\ncontract DEIPool is IDEIPool, AccessControl {\\n    /* ========== STATE VARIABLES ========== */\\n    address public collateral;\\n    address private dei;\\n    address private deus;\\n\\n    uint256 public mintingFee;\\n    uint256 public redemptionFee = 10000;\\n    uint256 public buybackFee = 5000;\\n    uint256 public recollatFee = 5000;\\n\\n    mapping(address => uint256) public redeemCollateralBalances;\\n    uint256 public unclaimedPoolCollateral;\\n    mapping(address => uint256) public lastCollateralRedeemed;\\n\\n    // position data\\n    mapping(address => IDEIPool.RedeemPosition[]) public redeemPositions;\\n    mapping(address => uint256) public nextRedeemId;\\n\\n    uint256 public collateralRedemptionDelay;\\n    uint256 public deusRedemptionDelay;\\n\\n    // Constants for various precisions\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n    uint256 private constant COLLATERAL_RATIO_PRECISION = 1e6;\\n    uint256 private constant COLLATERAL_RATIO_MAX = 1e6;\\n    uint256 private constant COLLATERAL_PRICE = 1e6;\\n    uint256 private constant SCALE = 1e6;\\n\\n    // Number of decimals needed to get to 18\\n    uint256 private immutable missingDecimals;\\n\\n    // Pool_ceiling is the total units of collateral that a pool contract can hold\\n    uint256 public poolCeiling;\\n\\n    // Bonus rate on DEUS minted during RecollateralizeDei(); 6 decimals of precision, set to 0.75% on genesis\\n    uint256 public bonusRate = 7500;\\n\\n    uint256 public daoShare = 0; // fees goes to daoWallet\\n\\n    address public poolLibrary; // Pool library contract\\n\\n    address public muon;\\n    uint32 public appId;\\n    uint256 minimumRequiredSignatures;\\n\\n    // AccessControl Roles\\n    bytes32 public constant PARAMETER_SETTER_ROLE =\\n        keccak256(\\\"PARAMETER_SETTER_ROLE\\\");\\n    bytes32 public constant DAO_SHARE_COLLECTOR =\\n        keccak256(\\\"DAO_SHARE_COLLECTOR\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant TRUSTY_ROLE = keccak256(\\\"TRUSTY_ROLE\\\");\\n\\n    // AccessControl state variables\\n    bool public mintPaused = false;\\n    bool public redeemPaused = false;\\n    bool public recollateralizePaused = false;\\n    bool public buyBackPaused = false;\\n\\n    /* ========== MODIFIERS ========== */\\n    modifier notRedeemPaused() {\\n        require(redeemPaused == false, \\\"DEIPool: REDEEM_PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier notMintPaused() {\\n        require(mintPaused == false, \\\"DEIPool: MINTING_PAUSED\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address dei_,\\n        address deus_,\\n        address collateral_,\\n        address muon_,\\n        address library_,\\n        address admin,\\n        uint256 minimumRequiredSignatures_,\\n        uint256 collateralRedemptionDelay_,\\n        uint256 deusRedemptionDelay_,\\n        uint256 poolCeiling_,\\n        uint32 appId_\\n    ) {\\n        require(\\n            (dei_ != address(0)) &&\\n                (deus_ != address(0)) &&\\n                (collateral_ != address(0)) &&\\n                (library_ != address(0)) &&\\n                (admin != address(0)),\\n            \\\"DEIPool: ZERO_ADDRESS_DETECTED\\\"\\n        );\\n        dei = dei_;\\n        deus = deus_;\\n        collateral = collateral_;\\n        muon = muon_;\\n        appId = appId_;\\n        minimumRequiredSignatures = minimumRequiredSignatures_;\\n        collateralRedemptionDelay = collateralRedemptionDelay_;\\n        deusRedemptionDelay = deusRedemptionDelay_;\\n        poolCeiling = poolCeiling_;\\n        poolLibrary = library_;\\n        missingDecimals = uint256(18) - IERC20(collateral).decimals();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Returns dollar value of collateral held in this DEI pool\\n    function collatDollarBalance(uint256 collateralPrice)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        balance =\\n            ((IERC20(collateral).balanceOf(address(this)) -\\n                unclaimedPoolCollateral) *\\n                (10**missingDecimals) *\\n                collateralPrice) /\\n            (PRICE_PRECISION);\\n    }\\n\\n    // Returns the value of excess collateral held in this DEI pool, compared to what is needed to maintain the global collateral ratio\\n    function availableExcessCollatDV(uint256[] memory collateralPrice)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = IDEI(dei).totalSupply();\\n        uint256 globalCollateralRatio = IDEI(dei).global_collateral_ratio();\\n        uint256 globalCollateralValue = IDEI(dei).globalCollateralValue(\\n            collateralPrice\\n        );\\n\\n        if (globalCollateralRatio > COLLATERAL_RATIO_PRECISION)\\n            globalCollateralRatio = COLLATERAL_RATIO_PRECISION; // Handles an overcollateralized contract with CR > 1\\n        uint256 requiredCollateralDollarValued18 = (totalSupply *\\n            globalCollateralRatio) / (COLLATERAL_RATIO_PRECISION); // Calculates collateral needed to back each 1 DEI with $1 of collateral at current collat ratio\\n        if (globalCollateralValue > requiredCollateralDollarValued18)\\n            return globalCollateralValue - requiredCollateralDollarValued18;\\n        else return 0;\\n    }\\n\\n    function positionsLength(address user)\\n        external\\n        view\\n        returns (uint256 length)\\n    {\\n        length = redeemPositions[user].length;\\n    }\\n\\n    function getAllPositions(address user)\\n        external\\n        view\\n        returns (RedeemPosition[] memory positions)\\n    {\\n        positions = redeemPositions[user];\\n    }\\n\\n    function getUnRedeemedPositions(address user)\\n        external\\n        view\\n        returns (RedeemPosition[] memory)\\n    {\\n        uint256 totalRedeemPositions = redeemPositions[user].length;\\n        uint256 redeemId = nextRedeemId[user];\\n\\n        RedeemPosition[] memory positions = new RedeemPosition[](\\n            totalRedeemPositions - redeemId + 1\\n        );\\n        uint256 index = 0;\\n        for (uint256 i = redeemId; i < totalRedeemPositions; i++) {\\n            positions[index] = redeemPositions[user][i];\\n            index++;\\n        }\\n\\n        return positions;\\n    }\\n\\n    function _getChainId() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    // We separate out the 1t1, fractional and algorithmic minting functions for gas efficiency\\n    function mint1t1DEI(uint256 collateralAmount)\\n        external\\n        notMintPaused\\n        returns (uint256 deiAmount)\\n    {\\n        require(\\n            IDEI(dei).global_collateral_ratio() >= COLLATERAL_RATIO_MAX,\\n            \\\"DEIPool: INVALID_COLLATERAL_RATIO\\\"\\n        );\\n        require(\\n            IERC20(collateral).balanceOf(address(this)) -\\n                unclaimedPoolCollateral +\\n                collateralAmount <=\\n                poolCeiling,\\n            \\\"DEIPool: CEILING_REACHED\\\"\\n        );\\n\\n        uint256 collateralAmountD18 = collateralAmount * (10**missingDecimals);\\n        deiAmount = IPoolLibrary(poolLibrary).calcMint1t1DEI(\\n            COLLATERAL_PRICE,\\n            collateralAmountD18\\n        ); //1 DEI for each $1 worth of collateral\\n\\n        deiAmount = (deiAmount * (SCALE - mintingFee)) / SCALE; //remove precision at the end\\n\\n        TransferHelper.safeTransferFrom(\\n            collateral,\\n            msg.sender,\\n            address(this),\\n            collateralAmount\\n        );\\n\\n        daoShare += (deiAmount * mintingFee) / SCALE;\\n        IDEI(dei).pool_mint(msg.sender, deiAmount);\\n    }\\n\\n    // 0% collateral-backed\\n    function mintAlgorithmicDEI(\\n        uint256 deusAmount,\\n        uint256 deusPrice,\\n        uint256 expireBlock,\\n        bytes[] calldata sigs\\n    ) external notMintPaused returns (uint256 deiAmount) {\\n        require(\\n            IDEI(dei).global_collateral_ratio() == 0,\\n            \\\"DEIPool: INVALID_COLLATERAL_RATIO\\\"\\n        );\\n        require(expireBlock >= block.number, \\\"DEIPool: EXPIRED_SIGNATURE\\\");\\n        bytes32 sighash = keccak256(\\n            abi.encodePacked(deus, deusPrice, expireBlock, _getChainId())\\n        );\\n        require(\\n            IDEI(dei).verify_price(sighash, sigs),\\n            \\\"DEIPool: UNVERIFIED_SIGNATURE\\\"\\n        );\\n\\n        deiAmount = IPoolLibrary(poolLibrary).calcMintAlgorithmicDEI(\\n            deusPrice, // X DEUS / 1 USD\\n            deusAmount\\n        );\\n\\n        deiAmount = (deiAmount * (SCALE - (mintingFee))) / SCALE;\\n        daoShare += (deiAmount * mintingFee) / SCALE;\\n\\n        IDEUS(deus).pool_burn_from(msg.sender, deusAmount);\\n        IDEI(dei).pool_mint(msg.sender, deiAmount);\\n    }\\n\\n    // Will fail if fully collateralized or fully algorithmic\\n    // > 0% and < 100% collateral-backed\\n    function mintFractionalDEI(\\n        uint256 collateralAmount,\\n        uint256 deusAmount,\\n        uint256 deusPrice,\\n        uint256 expireBlock,\\n        bytes[] calldata sigs\\n    ) external notMintPaused returns (uint256 mintAmount) {\\n        uint256 globalCollateralRatio = IDEI(dei).global_collateral_ratio();\\n        require(\\n            globalCollateralRatio < COLLATERAL_RATIO_MAX &&\\n                globalCollateralRatio > 0,\\n            \\\"DEIPool: INVALID_COLLATERAL_RATIO\\\"\\n        );\\n        require(\\n            IERC20(collateral).balanceOf(address(this)) -\\n                unclaimedPoolCollateral +\\n                collateralAmount <=\\n                poolCeiling,\\n            \\\"DEIPool: CEILING_REACHED\\\"\\n        );\\n\\n        require(expireBlock >= block.number, \\\"DEIPool: EXPIRED_SIGNATURE\\\");\\n        bytes32 sighash = keccak256(\\n            abi.encodePacked(deus, deusPrice, expireBlock, _getChainId())\\n        );\\n        require(\\n            IDEI(dei).verify_price(sighash, sigs),\\n            \\\"DEIPool: UNVERIFIED_SIGNATURE\\\"\\n        );\\n\\n        IPoolLibrary.MintFractionalDeiParams memory inputParams;\\n\\n        // Blocking is just for solving stack depth problem\\n        {\\n            uint256 collateralAmountD18 = collateralAmount *\\n                (10**missingDecimals);\\n            inputParams = IPoolLibrary.MintFractionalDeiParams(\\n                deusPrice,\\n                COLLATERAL_PRICE,\\n                collateralAmountD18,\\n                globalCollateralRatio\\n            );\\n        }\\n\\n        uint256 deusNeeded;\\n        (mintAmount, deusNeeded) = IPoolLibrary(poolLibrary)\\n            .calcMintFractionalDEI(inputParams);\\n        require(deusNeeded <= deusAmount, \\\"INSUFFICIENT_DEUS_INPUTTED\\\");\\n\\n        mintAmount = (mintAmount * (SCALE - mintingFee)) / SCALE;\\n\\n        IDEUS(deus).pool_burn_from(msg.sender, deusNeeded);\\n\\n        TransferHelper.safeTransferFrom(\\n            collateral,\\n            msg.sender,\\n            address(this),\\n            collateralAmount\\n        );\\n\\n        daoShare += (mintAmount * mintingFee) / SCALE;\\n        IDEI(dei).pool_mint(msg.sender, mintAmount);\\n    }\\n\\n    // Redeem collateral. 100% collateral-backed\\n    function redeem1t1DEI(uint256 deiAmount) external notRedeemPaused {\\n        require(\\n            IDEI(dei).global_collateral_ratio() == COLLATERAL_RATIO_MAX,\\n            \\\"DEIPool: INVALID_COLLATERAL_RATIO\\\"\\n        );\\n\\n        // Need to adjust for decimals of collateral\\n        uint256 deiAmountPrecision = deiAmount / (10**missingDecimals);\\n        uint256 collateralNeeded = IPoolLibrary(poolLibrary).calcRedeem1t1DEI(\\n            COLLATERAL_PRICE,\\n            deiAmountPrecision\\n        );\\n\\n        collateralNeeded = (collateralNeeded * (SCALE - redemptionFee)) / SCALE;\\n        require(\\n            collateralNeeded <=\\n                IERC20(collateral).balanceOf(address(this)) -\\n                    unclaimedPoolCollateral,\\n            \\\"DEIPool: INSUFFICIENT_COLLATERAL_BALANCE\\\"\\n        );\\n\\n        redeemCollateralBalances[msg.sender] =\\n            redeemCollateralBalances[msg.sender] +\\n            collateralNeeded;\\n        unclaimedPoolCollateral = unclaimedPoolCollateral + collateralNeeded;\\n        lastCollateralRedeemed[msg.sender] = block.number;\\n\\n        daoShare += (deiAmount * redemptionFee) / SCALE;\\n        // Move all external functions to the end\\n        IDEI(dei).pool_burn_from(msg.sender, deiAmount);\\n    }\\n\\n    // Will fail if fully collateralized or algorithmic\\n    // Redeem DEI for collateral and DEUS. > 0% and < 100% collateral-backed\\n    function redeemFractionalDEI(uint256 deiAmount) external notRedeemPaused {\\n        uint256 globalCollateralRatio = IDEI(dei).global_collateral_ratio();\\n        require(\\n            globalCollateralRatio < COLLATERAL_RATIO_MAX &&\\n                globalCollateralRatio > 0,\\n            \\\"DEIPool: INVALID_COLLATERAL_RATIO\\\"\\n        );\\n\\n        // Blocking is just for solving stack depth problem\\n        uint256 collateralAmount;\\n        {\\n            uint256 deiAmountPostFee = (deiAmount * (SCALE - redemptionFee)) /\\n                (PRICE_PRECISION);\\n            uint256 deiAmountPrecision = deiAmountPostFee /\\n                (10**missingDecimals);\\n            collateralAmount =\\n                (deiAmountPrecision * globalCollateralRatio) /\\n                PRICE_PRECISION;\\n        }\\n        require(\\n            collateralAmount <=\\n                IERC20(collateral).balanceOf(address(this)) -\\n                    unclaimedPoolCollateral,\\n            \\\"DEIPool: NOT_ENOUGH_COLLATERAL\\\"\\n        );\\n\\n        redeemCollateralBalances[msg.sender] += collateralAmount;\\n        lastCollateralRedeemed[msg.sender] = block.timestamp;\\n        unclaimedPoolCollateral = unclaimedPoolCollateral + collateralAmount;\\n\\n        {\\n            uint256 deiAmountPostFee = (deiAmount * (SCALE - redemptionFee)) /\\n                SCALE;\\n            uint256 deusDollarAmount = (deiAmountPostFee *\\n                (SCALE - globalCollateralRatio)) / SCALE;\\n\\n            redeemPositions[msg.sender].push(\\n                RedeemPosition({\\n                    amount: deusDollarAmount,\\n                    timestamp: block.timestamp\\n                })\\n            );\\n        }\\n\\n        daoShare += (deiAmount * redemptionFee) / SCALE;\\n\\n        IDEI(dei).pool_burn_from(msg.sender, deiAmount);\\n    }\\n\\n    // Redeem DEI for DEUS. 0% collateral-backed\\n    function redeemAlgorithmicDEI(uint256 deiAmount) external notRedeemPaused {\\n        require(\\n            IDEI(dei).global_collateral_ratio() == 0,\\n            \\\"DEIPool: INVALID_COLLATERAL_RATIO\\\"\\n        );\\n\\n        uint256 deusDollarAmount = (deiAmount * (SCALE - redemptionFee)) /\\n            (PRICE_PRECISION);\\n        redeemPositions[msg.sender].push(\\n            RedeemPosition({\\n                amount: deusDollarAmount,\\n                timestamp: block.timestamp\\n            })\\n        );\\n        daoShare += (deiAmount * redemptionFee) / SCALE;\\n        IDEI(dei).pool_burn_from(msg.sender, deiAmount);\\n    }\\n\\n    function collectCollateral() external {\\n        require(\\n            (lastCollateralRedeemed[msg.sender] + collateralRedemptionDelay) <=\\n                block.timestamp,\\n            \\\"DEIPool: COLLATERAL_REDEMPTION_DELAY\\\"\\n        );\\n\\n        if (redeemCollateralBalances[msg.sender] > 0) {\\n            uint256 collateralAmount = redeemCollateralBalances[msg.sender];\\n            redeemCollateralBalances[msg.sender] = 0;\\n            TransferHelper.safeTransfer(\\n                collateral,\\n                msg.sender,\\n                collateralAmount\\n            );\\n            unclaimedPoolCollateral =\\n                unclaimedPoolCollateral -\\n                collateralAmount;\\n        }\\n    }\\n\\n    function collectDeus(\\n        uint256 price,\\n        bytes calldata _reqId,\\n        SchnorrSign[] calldata sigs\\n    ) external {\\n        require(\\n            sigs.length >= minimumRequiredSignatures,\\n            \\\"DEIPool: INSUFFICIENT_SIGNATURES\\\"\\n        );\\n\\n        uint256 redeemId = nextRedeemId[msg.sender]++;\\n\\n        require(\\n            redeemPositions[msg.sender][redeemId].timestamp +\\n                deusRedemptionDelay <=\\n                block.timestamp,\\n            \\\"DEIPool: DEUS_REDEMPTION_DELAY\\\"\\n        );\\n\\n        {\\n            bytes32 hash = keccak256(\\n                abi.encodePacked(\\n                    appId,\\n                    msg.sender,\\n                    redeemId,\\n                    price,\\n                    _getChainId()\\n                )\\n            );\\n            require(\\n                IMuonV02(muon).verify(_reqId, uint256(hash), sigs),\\n                \\\"DEIPool: UNVERIFIED_SIGNATURES\\\"\\n            );\\n        }\\n\\n        uint256 deusAmount = (redeemPositions[msg.sender][redeemId].amount *\\n            1e18) / price;\\n\\n        IDEUS(deus).pool_mint(msg.sender, deusAmount);\\n    }\\n\\n    // When the protocol is recollateralizing, we need to give a discount of DEUS to hit the new CR target\\n    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get DEUS for adding collateral\\n    // This function simply rewards anyone that sends collateral to a pool with the same amount of DEUS + the bonus rate\\n    // Anyone can call this function to recollateralize the protocol and take the extra DEUS value from the bonus rate as an arb opportunity\\n    function RecollateralizeDei(RecollateralizeDeiParams memory inputs)\\n        external\\n    {\\n        require(\\n            recollateralizePaused == false,\\n            \\\"DEIPool: RECOLLATERALIZE_PAUSED\\\"\\n        );\\n\\n        require(\\n            inputs.expireBlock >= block.number,\\n            \\\"DEIPool: EXPIRE_SIGNATURE\\\"\\n        );\\n        bytes32 sighash = keccak256(\\n            abi.encodePacked(\\n                deus,\\n                inputs.deusPrice,\\n                inputs.expireBlock,\\n                _getChainId()\\n            )\\n        );\\n        require(\\n            IDEI(dei).verify_price(sighash, inputs.sigs),\\n            \\\"DEIPool: UNVERIFIED_SIGNATURES\\\"\\n        );\\n\\n        uint256 collateralAmountD18 = inputs.collateralAmount *\\n            (10**missingDecimals);\\n\\n        uint256 deiTotalSupply = IDEI(dei).totalSupply();\\n        uint256 globalCollateralRatio = IDEI(dei).global_collateral_ratio();\\n        uint256 globalCollateralValue = IDEI(dei).globalCollateralValue(\\n            inputs.collateralPrice\\n        );\\n\\n        (uint256 collateralUnits, uint256 amountToRecollat) = IPoolLibrary(\\n            poolLibrary\\n        ).calcRecollateralizeDEIInner(\\n                collateralAmountD18,\\n                inputs.collateralPrice[inputs.collateralPrice.length - 1], // pool collateral price exist in last index\\n                globalCollateralValue,\\n                deiTotalSupply,\\n                globalCollateralRatio\\n            );\\n\\n        uint256 collateralUnitsPrecision = collateralUnits /\\n            (10**missingDecimals);\\n\\n        uint256 deusPaidBack = (amountToRecollat *\\n            (SCALE + bonusRate - recollatFee)) / inputs.deusPrice;\\n\\n        TransferHelper.safeTransferFrom(\\n            collateral,\\n            msg.sender,\\n            address(this),\\n            collateralUnitsPrecision\\n        );\\n        IDEUS(deus).pool_mint(msg.sender, deusPaidBack);\\n    }\\n\\n    // Function can be called by an DEUS holder to have the protocol buy back DEUS with excess collateral value from a desired collateral pool\\n    // This can also happen if the collateral ratio > 1\\n    function buyBackDeus(\\n        uint256 deusAmount,\\n        uint256[] memory collateralPrice,\\n        uint256 deusPrice,\\n        uint256 expireBlock,\\n        bytes[] calldata sigs\\n    ) external {\\n        require(buyBackPaused == false, \\\"DEIPool: BUYBACK_PAUSED\\\");\\n        require(expireBlock >= block.number, \\\"DEIPool: EXPIRED_SIGNATURE\\\");\\n        bytes32 sighash = keccak256(\\n            abi.encodePacked(\\n                collateral,\\n                collateralPrice,\\n                deus,\\n                deusPrice,\\n                expireBlock,\\n                _getChainId()\\n            )\\n        );\\n        require(\\n            IDEI(dei).verify_price(sighash, sigs),\\n            \\\"DEIPool: UNVERIFIED_SIGNATURE\\\"\\n        );\\n\\n        IPoolLibrary.BuybackDeusParams memory inputParams = IPoolLibrary\\n            .BuybackDeusParams(\\n                availableExcessCollatDV(collateralPrice),\\n                deusPrice,\\n                collateralPrice[collateralPrice.length - 1], // pool collateral price exist in last index\\n                deusAmount\\n            );\\n\\n        uint256 collateralEquivalentD18 = (IPoolLibrary(poolLibrary)\\n            .calcBuyBackDEUS(inputParams) * (SCALE - buybackFee)) / SCALE;\\n        uint256 collateralPrecision = collateralEquivalentD18 /\\n            (10**missingDecimals);\\n\\n        // Give the sender their desired collateral and burn the DEUS\\n        IDEUS(deus).pool_burn_from(msg.sender, deusAmount);\\n        TransferHelper.safeTransfer(\\n            collateral,\\n            msg.sender,\\n            collateralPrecision\\n        );\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function collectDaoShare(uint256 amount, address to)\\n        external\\n        onlyRole(DAO_SHARE_COLLECTOR)\\n    {\\n        require(amount <= daoShare, \\\"DEIPool: INVALID_AMOUNT\\\");\\n\\n        IDEI(dei).pool_mint(to, amount);\\n        daoShare -= amount;\\n\\n        emit daoShareCollected(amount, to);\\n    }\\n\\n    function emergencyWithdrawERC20(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyRole(TRUSTY_ROLE) {\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    function toggleMinting() external onlyRole(PAUSER_ROLE) {\\n        mintPaused = !mintPaused;\\n        emit MintingToggled(mintPaused);\\n    }\\n\\n    function toggleRedeeming() external onlyRole(PAUSER_ROLE) {\\n        redeemPaused = !redeemPaused;\\n        emit RedeemingToggled(redeemPaused);\\n    }\\n\\n    function toggleRecollateralize() external onlyRole(PAUSER_ROLE) {\\n        recollateralizePaused = !recollateralizePaused;\\n        emit RecollateralizeToggled(recollateralizePaused);\\n    }\\n\\n    function toggleBuyBack() external onlyRole(PAUSER_ROLE) {\\n        buyBackPaused = !buyBackPaused;\\n        emit BuybackToggled(buyBackPaused);\\n    }\\n\\n    // Combined into one function due to 24KiB contract memory limit\\n    function setPoolParameters(\\n        uint256 poolCeiling_,\\n        uint256 bonusRate_,\\n        uint256 collateralRedemptionDelay_,\\n        uint256 deusRedemptionDelay_,\\n        uint256 mintingFee_,\\n        uint256 redemptionFee_,\\n        uint256 buybackFee_,\\n        uint256 recollatFee_,\\n        address muon_,\\n        uint32 appId_,\\n        uint256 minimumRequiredSignatures_\\n    ) external onlyRole(PARAMETER_SETTER_ROLE) {\\n        poolCeiling = poolCeiling_;\\n        bonusRate = bonusRate_;\\n        collateralRedemptionDelay = collateralRedemptionDelay_;\\n        deusRedemptionDelay = deusRedemptionDelay_;\\n        mintingFee = mintingFee_;\\n        redemptionFee = redemptionFee_;\\n        buybackFee = buybackFee_;\\n        recollatFee = recollatFee_;\\n        muon = muon_;\\n        appId = appId_;\\n        minimumRequiredSignatures = minimumRequiredSignatures_;\\n\\n        emit PoolParametersSet(\\n            poolCeiling_,\\n            bonusRate_,\\n            collateralRedemptionDelay_,\\n            deusRedemptionDelay_,\\n            mintingFee_,\\n            redemptionFee_,\\n            buybackFee_,\\n            recollatFee_,\\n            muon_,\\n            appId_,\\n            minimumRequiredSignatures_\\n        );\\n    }\\n}\\n\\n//Dar panah khoda\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Uniswap/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"contracts/Pool/interfaces/IPoolLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IPoolLibrary {\\n     struct MintFractionalDeiParams {\\n        uint256 deusPrice;\\n        uint256 collateralPrice;\\n        uint256 collateralAmount;\\n        uint256 collateralRatio;\\n    }\\n\\n    struct BuybackDeusParams {\\n        uint256 excessCollateralValueD18;\\n        uint256 deusPrice;\\n        uint256 collateralPrice;\\n        uint256 deusAmount;\\n    }\\n\\n    function calcMint1t1DEI(uint256 col_price, uint256 collateral_amount_d18)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function calcMintAlgorithmicDEI(\\n        uint256 deus_price_usd,\\n        uint256 deus_amount_d18\\n    ) external pure returns (uint256);\\n\\n    function calcMintFractionalDEI(MintFractionalDeiParams memory params)\\n        external\\n        pure\\n        returns (uint256, uint256);\\n\\n    function calcRedeem1t1DEI(uint256 col_price_usd, uint256 DEI_amount)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function calcBuyBackDEUS(BuybackDeusParams memory params)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function recollateralizeAmount(\\n        uint256 total_supply,\\n        uint256 global_collateral_ratio,\\n        uint256 global_collat_value\\n    ) external pure returns (uint256);\\n\\n    function calcRecollateralizeDEIInner(\\n        uint256 collateral_amount,\\n        uint256 col_price,\\n        uint256 global_collat_value,\\n        uint256 dei_total_supply,\\n        uint256 global_collateral_ratio\\n    ) external pure returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interfaces/IPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// =================================================================================================================\\n//  _|_|_|    _|_|_|_|  _|    _|    _|_|_|      _|_|_|_|  _|                                                       |\\n//  _|    _|  _|        _|    _|  _|            _|            _|_|_|      _|_|_|  _|_|_|      _|_|_|    _|_|       |\\n//  _|    _|  _|_|_|    _|    _|    _|_|        _|_|_|    _|  _|    _|  _|    _|  _|    _|  _|        _|_|_|_|     |\\n//  _|    _|  _|        _|    _|        _|      _|        _|  _|    _|  _|    _|  _|    _|  _|        _|           |\\n//  _|_|_|    _|_|_|_|    _|_|    _|_|_|        _|        _|  _|    _|    _|_|_|  _|    _|    _|_|_|    _|_|_|     |\\n// =================================================================================================================\\n// ============================= Oracle =============================\\n// ==================================================================\\n// DEUS Finance: https://github.com/DeusFinance\\n\\n// Primary Author(s)\\n// Sina: https://github.com/spsina\\n// Vahid: https://github.com/vahid-dev\\n\\nimport \\\"./IMuonV02.sol\\\";\\n\\ninterface IDEIPool {\\n    struct RecollateralizeDeiParams {\\n        uint256 collateralAmount;\\n        uint256 poolCollateralPrice;\\n        uint256[] collateralPrice;\\n        uint256 deusPrice;\\n        uint256 expireBlock;\\n        bytes[] sigs;\\n    }\\n\\n    struct RedeemPosition {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    /* ========== PUBLIC VIEWS ========== */\\n\\n    function collatDollarBalance(uint256 collateralPrice)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function positionsLength(address user)\\n        external\\n        view\\n        returns (uint256 length);\\n\\n    function getAllPositions(address user)\\n        external\\n        view\\n        returns (RedeemPosition[] memory positinos);\\n\\n    function getUnRedeemedPositions(address user)\\n        external\\n        view\\n        returns (RedeemPosition[] memory positions);\\n\\n    function mint1t1DEI(uint256 collateralAmount)\\n        external\\n        returns (uint256 deiAmount);\\n\\n    function mintAlgorithmicDEI(\\n        uint256 deusAmount,\\n        uint256 deusPrice,\\n        uint256 expireBlock,\\n        bytes[] calldata sigs\\n    ) external returns (uint256 deiAmount);\\n\\n    function mintFractionalDEI(\\n        uint256 collateralAmount,\\n        uint256 deusAmount,\\n        uint256 deusPrice,\\n        uint256 expireBlock,\\n        bytes[] calldata sigs\\n    ) external returns (uint256 mintAmount);\\n\\n    function redeem1t1DEI(uint256 deiAmount) external;\\n\\n    function redeemFractionalDEI(uint256 deiAmount) external;\\n\\n    function redeemAlgorithmicDEI(uint256 deiAmount) external;\\n\\n    function collectCollateral() external;\\n\\n    function collectDeus(\\n        uint256 price,\\n        bytes calldata _reqId,\\n        SchnorrSign[] calldata sigs\\n    ) external;\\n\\n    function RecollateralizeDei(RecollateralizeDeiParams memory inputs)\\n        external;\\n\\n    function buyBackDeus(\\n        uint256 deusAmount,\\n        uint256[] memory collateralPrice,\\n        uint256 deusPrice,\\n        uint256 expireBlock,\\n        bytes[] calldata sigs\\n    ) external;\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n    function collectDaoShare(uint256 amount, address to) external;\\n\\n    function emergencyWithdrawERC20(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function toggleMinting() external;\\n\\n    function toggleRedeeming() external;\\n\\n    function toggleRecollateralize() external;\\n\\n    function toggleBuyBack() external;\\n\\n    function setPoolParameters(\\n        uint256 poolCeiling_,\\n        uint256 bonusRate_,\\n        uint256 collateralRedemptionDelay_,\\n        uint256 deusRedemptionDelay_,\\n        uint256 mintingFee_,\\n        uint256 redemptionFee_,\\n        uint256 buybackFee_,\\n        uint256 recollatFee_,\\n        address muon_,\\n        uint32 appId_,\\n        uint256 minimumRequiredSignatures_\\n    ) external;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event PoolParametersSet(\\n        uint256 poolCeiling,\\n        uint256 bonusRate,\\n        uint256 collateralRedemptionDelay,\\n        uint256 deusRedemptionDelay,\\n        uint256 mintingFee,\\n        uint256 redemptionFee,\\n        uint256 buybackFee,\\n        uint256 recollatFee,\\n        address muon,\\n        uint32 appId,\\n        uint256 minimumRequiredSignatures\\n    );\\n    event daoShareCollected(uint256 daoShare, address to);\\n    event MintingToggled(bool toggled);\\n    event RedeemingToggled(bool toggled);\\n    event RecollateralizeToggled(bool toggled);\\n    event BuybackToggled(bool toggled);\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interfaces/IDEUS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IDEUS {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function pool_burn_from(address b_address, uint256 b_amount) external;\\n    function pool_mint(address m_address, uint256 m_amount) external;\\n    function mint(address to, uint256 amount) external;\\n    function setDEIAddress(address dei_contract_address) external;\\n    function setNameAndSymbol(string memory _name, string memory _symbol) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interfaces/IDEI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IDEI {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function totalSupply() external view returns (uint256);\\n    function global_collateral_ratio() external view returns (uint256);\\n    function dei_pools(address _address) external view returns (bool);\\n    function dei_pools_array() external view returns (address[] memory);\\n    function verify_price(bytes32 sighash, bytes[] calldata sigs) external view returns (bool);\\n    function dei_info(uint256[] memory collat_usd_price) external view returns (uint256, uint256, uint256);\\n    function getChainID() external view returns (uint256);\\n    function globalCollateralValue(uint256[] memory collat_usd_price) external view returns (uint256);\\n    function refreshCollateralRatio(uint deus_price, uint dei_price, uint256 expire_block, bytes[] calldata sigs) external;\\n    function useGrowthRatio(bool _use_growth_ratio) external;\\n    function setGrowthRatioBands(uint256 _GR_top_band, uint256 _GR_bottom_band) external;\\n    function setPriceBands(uint256 _top_band, uint256 _bottom_band) external;\\n    function activateDIP(bool _activate) external;\\n    function pool_burn_from(address b_address, uint256 b_amount) external;\\n    function pool_mint(address m_address, uint256 m_amount) external;\\n    function addPool(address pool_address) external;\\n    function removePool(address pool_address) external;\\n    function setNameAndSymbol(string memory _name, string memory _symbol) external;\\n    function setOracle(address _oracle) external;\\n    function setDEIStep(uint256 _new_step) external;\\n    function setReserveTracker(address _reserve_tracker_address) external;\\n    function setRefreshCooldown(uint256 _new_cooldown) external;\\n    function setDEUSAddress(address _deus_address) external;\\n    function toggleCollateralRatio() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interfaces/IMuonV02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\nstruct SchnorrSign {\\n    uint256 signature;\\n    address owner;\\n    address nonce;\\n}\\n\\ninterface IMuonV02 {\\n    function verify(\\n        bytes calldata reqId,\\n        uint256 hash,\\n        SchnorrSign[] calldata _sigs\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dei_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deus_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"muon_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"library_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumRequiredSignatures_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRedemptionDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusRedemptionDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolCeiling_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"appId_\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggled\",\"type\":\"bool\"}],\"name\":\"BuybackToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggled\",\"type\":\"bool\"}],\"name\":\"MintingToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRedemptionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deusRedemptionDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recollatFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"muon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"appId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumRequiredSignatures\",\"type\":\"uint256\"}],\"name\":\"PoolParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggled\",\"type\":\"bool\"}],\"name\":\"RecollateralizeToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toggled\",\"type\":\"bool\"}],\"name\":\"RedeemingToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"daoShareCollected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO_SHARE_COLLECTOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARAMETER_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolCollateralPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deusPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IDEIPool.RecollateralizeDeiParams\",\"name\":\"inputs\",\"type\":\"tuple\"}],\"name\":\"RecollateralizeDei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collateralPrice\",\"type\":\"uint256[]\"}],\"name\":\"availableExcessCollatDV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deusAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deusPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"buyBackDeus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralPrice\",\"type\":\"uint256\"}],\"name\":\"collatDollarBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRedemptionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"collectDaoShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_reqId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonce\",\"type\":\"address\"}],\"internalType\":\"struct SchnorrSign[]\",\"name\":\"sigs\",\"type\":\"tuple[]\"}],\"name\":\"collectDeus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deusRedemptionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IDEIPool.RedeemPosition[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnRedeemedPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IDEIPool.RedeemPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCollateralRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"mint1t1DEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deiAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deusAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"mintAlgorithmicDEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deiAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"mintFractionalDEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextRedeemId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"positionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollateralizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deiAmount\",\"type\":\"uint256\"}],\"name\":\"redeem1t1DEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deiAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAlgorithmicDEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemCollateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deiAmount\",\"type\":\"uint256\"}],\"name\":\"redeemFractionalDEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"redeemPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolCeiling_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRedemptionDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusRedemptionDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recollatFee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"muon_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"appId_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"minimumRequiredSignatures_\",\"type\":\"uint256\"}],\"name\":\"setPoolParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRecollateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DEIPool", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000de12c7959e1a72bbe8a5f7a1dc8f8eef9ab011b3000000000000000000000000de5ed76e7c05ec5e4572cfc88d1acea165109e44000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e4f8d9a30936a6f8b17a73dc6feb51a3bbabd51a00000000000000000000000070de3200eff47a1ee1fc9a6b588799533cc5f49c000000000000000000000000e5227f141575dce74721f4a9be2d7d636f9230440000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000070800000000000000000000000000000000000000000000000000000048c273950000000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}