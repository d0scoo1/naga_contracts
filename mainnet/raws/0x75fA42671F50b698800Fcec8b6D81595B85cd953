{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/core/Raid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport {IConfetti} from \\\"../interfaces/IConfetti.sol\\\";\\r\\nimport {IParty} from \\\"../interfaces/IParty.sol\\\";\\r\\nimport {IRaid} from \\\"../interfaces/IRaid.sol\\\";\\r\\nimport {ISeeder} from \\\"../interfaces/ISeeder.sol\\\";\\r\\nimport {Seedable} from \\\"../randomness/Seedable.sol\\\";\\r\\n\\r\\n/// @title RaidParty Raid Contract\\r\\n/// @author Hasan Gondal <hasan@afraidlabs.com>\\r\\n/// @notice RAIDOOOOOOOOOOOOOOOOOOOOOOOOOOOOR\\r\\n\\r\\n/**\\r\\n *   ___      _    _ ___          _\\r\\n *  | _ \\\\__ _(_)__| | _ \\\\__ _ _ _| |_ _  _\\r\\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\\r\\n *  |_|_\\\\__,_|_\\\\__,_|_| \\\\__,_|_|  \\\\__|\\\\_, |\\r\\n *                                    |__/\\r\\n */\\r\\n\\r\\ncontract Raid is IRaid, Initializable, AccessControlUpgradeable, Seedable {\\r\\n    bool public started;\\r\\n    bool public halted;\\r\\n    bool public bossesCreated;\\r\\n\\r\\n    uint32 private roundId;\\r\\n    uint32 public weightTotal;\\r\\n    uint64 public lastSnapshotTime;\\r\\n    uint64 private constant PRECISION = 1e18;\\r\\n\\r\\n    uint256 public seed;\\r\\n    uint256 public seedId;\\r\\n\\r\\n    IParty public party;\\r\\n    ISeeder public seeder;\\r\\n    IConfetti public confetti;\\r\\n\\r\\n    Boss[] public bosses;\\r\\n    Snapshot[] public snapshots;\\r\\n\\r\\n    mapping(uint32 => Round) public rounds;\\r\\n    mapping(address => Raider) public raiders;\\r\\n\\r\\n    modifier notHalted() {\\r\\n        require(!halted, \\\"Raid: HALT_ACTIVE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier raidActive() {\\r\\n        require(started, \\\"Raid: NOT_STARTED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier partyCaller() {\\r\\n        require(msg.sender == address(party), \\\"Raid: NOT_PARTY_CALLER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address admin,\\r\\n        IParty _party,\\r\\n        ISeeder _seeder,\\r\\n        IConfetti _confetti\\r\\n    ) external initializer {\\r\\n        __AccessControl_init();\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n\\r\\n        party = _party;\\r\\n        seeder = _seeder;\\r\\n        confetti = _confetti;\\r\\n    }\\r\\n\\r\\n    function setParty(IParty _party) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        party = _party;\\r\\n    }\\r\\n\\r\\n    function setSeeder(ISeeder _seeder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        seeder = _seeder;\\r\\n    }\\r\\n\\r\\n    function setHalted(bool _halted) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        halted = _halted;\\r\\n    }\\r\\n\\r\\n    function updateSeed() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        if (started) {\\r\\n            _syncRounds(uint32(block.number));\\r\\n        }\\r\\n\\r\\n        seed = seeder.getSeedSafe(address(this), seedId);\\r\\n    }\\r\\n\\r\\n    function requestSeed() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        seedId += 1;\\r\\n        seeder.requestSeed(seedId);\\r\\n    }\\r\\n\\r\\n    function createBosses(Boss[] calldata _bosses)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        delete bosses;\\r\\n        delete weightTotal;\\r\\n\\r\\n        for (uint256 i; i < _bosses.length; i++) {\\r\\n            Boss calldata boss = _bosses[i];\\r\\n            weightTotal += boss.weight;\\r\\n            bosses.push(boss);\\r\\n        }\\r\\n\\r\\n        bossesCreated = true;\\r\\n    }\\r\\n\\r\\n    function updateBoss(uint32 id, Boss calldata boss)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        require(bosses.length > id, \\\"Raid::updateBoss: INVALID_BOSS\\\");\\r\\n\\r\\n        if (started) {\\r\\n            _syncRounds(uint32(block.number));\\r\\n        }\\r\\n\\r\\n        weightTotal -= bosses[id].weight;\\r\\n        weightTotal += boss.weight;\\r\\n        bosses[id] = boss;\\r\\n    }\\r\\n\\r\\n    function appendBoss(Boss calldata boss)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        if (started) {\\r\\n            _syncRounds(uint32(block.number));\\r\\n        }\\r\\n\\r\\n        weightTotal += boss.weight;\\r\\n        bosses.push(boss);\\r\\n    }\\r\\n\\r\\n    function manualSync(uint32 maxBlock) external {\\r\\n        require(\\r\\n            maxBlock > rounds[roundId].finalBlock,\\r\\n            \\\"Raid::manualSync: CANNOT_SYNC_PAST\\\"\\r\\n        );\\r\\n\\r\\n        _syncRounds(maxBlock);\\r\\n    }\\r\\n\\r\\n    function start() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(!started, \\\"Raid::start: NOT_STARTED\\\");\\r\\n        require(bossesCreated, \\\"Raid::start: NO_BOSSES_CREATED\\\");\\r\\n\\r\\n        seed = seeder.getSeedSafe(address(this), seedId);\\r\\n        rounds[roundId] = _rollRound(seed, uint32(block.number));\\r\\n\\r\\n        started = true;\\r\\n        lastSnapshotTime = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function commitSnapshot() external raidActive {\\r\\n        require(\\r\\n            block.timestamp >= lastSnapshotTime + 23 hours,\\r\\n            \\\"Raid::commitSnapshot: SNAPSHOT_TOO_RECENT\\\"\\r\\n        );\\r\\n\\r\\n        _syncRounds(uint32(block.number));\\r\\n\\r\\n        Snapshot memory snapshot = _createSnapshot();\\r\\n        snapshots.push(snapshot);\\r\\n\\r\\n        lastSnapshotTime = uint64(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function getRaidData() external view returns (RaidData memory data) {\\r\\n        uint256 _seed = seed;\\r\\n        uint32 _roundId = roundId;\\r\\n        Round memory round = rounds[_roundId];\\r\\n        while (block.number > round.finalBlock) {\\r\\n            _roundId += 1;\\r\\n            _seed = _rollSeed(_seed);\\r\\n            round = _rollRound(_seed, round.finalBlock + 1);\\r\\n        }\\r\\n\\r\\n        data.boss = round.boss;\\r\\n        data.roundId = _roundId;\\r\\n        data.health = uint32(round.finalBlock - block.number);\\r\\n        data.maxHealth = bosses[round.boss].blockHealth;\\r\\n        data.seed = _seed;\\r\\n    }\\r\\n\\r\\n    function getPendingRewards(address user) external view returns (uint256) {\\r\\n        Raider memory raider = raiders[user];\\r\\n        (, uint256 rewards) = _fetchRewards(raider);\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n    function updateDamage(address user, uint32 _dpb)\\r\\n        external\\r\\n        notHalted\\r\\n        raidActive\\r\\n        partyCaller\\r\\n    {\\r\\n        Raider storage raider = raiders[user];\\r\\n        if (raider.startedAt == 0) {\\r\\n            raider.dpb = _dpb;\\r\\n            raider.startedAt = uint32(block.number);\\r\\n            raider.startBlock = uint32(block.number);\\r\\n            raider.startRound = _lazyFetchRoundId(uint32(block.number));\\r\\n            raider.startSnapshot = uint32(snapshots.length + 1);\\r\\n\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        (uint32 _roundId, uint256 rewards) = _fetchRewards(raider);\\r\\n\\r\\n        raider.startRound = _roundId;\\r\\n        raider.pendingRewards = rewards;\\r\\n        raider.dpb = _dpb;\\r\\n        raider.startBlock = uint32(block.number);\\r\\n        raider.startSnapshot = uint32(snapshots.length + 1);\\r\\n    }\\r\\n\\r\\n    function claimRewards(address user) external notHalted {\\r\\n        Raider storage raider = raiders[user];\\r\\n\\r\\n        (uint32 _roundId, uint256 rewards) = _fetchRewards(raider);\\r\\n\\r\\n        raider.startRound = _roundId;\\r\\n        raider.pendingRewards = 0;\\r\\n        raider.startBlock = uint32(block.number);\\r\\n        raider.startSnapshot = uint32(snapshots.length + 1);\\r\\n\\r\\n        if (rewards > 0) {\\r\\n            confetti.mint(user, rewards);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Internal */\\r\\n\\r\\n    function _rollSeed(uint256 oldSeed) internal pure returns (uint256 rolled) {\\r\\n        assembly {\\r\\n            mstore(0x00, oldSeed)\\r\\n            rolled := keccak256(0x00, 0x20)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _rollRound(uint256 _seed, uint32 startBlock)\\r\\n        internal\\r\\n        view\\r\\n        returns (Round memory round)\\r\\n    {\\r\\n        // FIXME: check if we will overflow\\r\\n        unchecked {\\r\\n            uint32 roll = uint32(_seed % weightTotal);\\r\\n            uint256 weight = 0;\\r\\n            uint32 _bossWeight;\\r\\n\\r\\n            for (uint16 bossId; bossId < bosses.length; bossId++) {\\r\\n                _bossWeight = bosses[bossId].weight;\\r\\n\\r\\n                if (roll <= weight + _bossWeight) {\\r\\n                    round.boss = bossId;\\r\\n                    round.roll = roll;\\r\\n                    round.startBlock = startBlock;\\r\\n                    round.finalBlock = startBlock + bosses[bossId].blockHealth;\\r\\n\\r\\n                    return round;\\r\\n                }\\r\\n\\r\\n                weight += _bossWeight;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _syncRounds(uint32 maxBlock) internal {\\r\\n        // FIXME: check if we will overflow\\r\\n        unchecked {\\r\\n            Round memory round = rounds[roundId];\\r\\n\\r\\n            while (\\r\\n                block.number > round.finalBlock && maxBlock > round.finalBlock\\r\\n            ) {\\r\\n                roundId += 1;\\r\\n                seed = _rollSeed(seed);\\r\\n                round = _rollRound(seed, round.finalBlock + 1);\\r\\n                rounds[roundId] = round;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _createSnapshot()\\r\\n        internal\\r\\n        view\\r\\n        returns (Snapshot memory snapshot)\\r\\n    {\\r\\n        uint32 _roundId;\\r\\n\\r\\n        if (snapshots.length > 0) {\\r\\n            _roundId = snapshots[snapshots.length - 1].finalRound + 1;\\r\\n        }\\r\\n\\r\\n        snapshot.initialRound = _roundId;\\r\\n        snapshot.initialBlock = rounds[_roundId].startBlock;\\r\\n\\r\\n        while (_roundId < roundId) {\\r\\n            Round memory round = rounds[_roundId];\\r\\n            Boss memory boss = bosses[round.boss];\\r\\n\\r\\n            snapshot.attackDealt +=\\r\\n                uint256(boss.blockHealth) *\\r\\n                uint256(boss.multiplier);\\r\\n\\r\\n            _roundId += 1;\\r\\n        }\\r\\n\\r\\n        snapshot.finalRound = _roundId - 1;\\r\\n        snapshot.finalBlock = rounds[_roundId - 1].finalBlock;\\r\\n    }\\r\\n\\r\\n    function _fetchRewards(Raider memory raider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32, uint256)\\r\\n    {\\r\\n        if (raider.dpb > 0) {\\r\\n            if (snapshots.length > raider.startSnapshot) {\\r\\n                (\\r\\n                    uint32 _roundId,\\r\\n                    uint256 rewards\\r\\n                ) = _fetchNewRewardsWithSnapshot(raider);\\r\\n                rewards += raider.pendingRewards;\\r\\n                return (_roundId, rewards);\\r\\n            } else {\\r\\n                (uint32 _roundId, uint256 rewards) = _fetchNewRewards(raider);\\r\\n                rewards += raider.pendingRewards;\\r\\n                return (_roundId, rewards);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (_lazyFetchRoundId(uint32(block.number)), raider.pendingRewards);\\r\\n    }\\r\\n\\r\\n    function _fetchNewRewards(Raider memory raider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 _roundId, uint256 rewards)\\r\\n    {\\r\\n        // FIXME: check if we will overflow\\r\\n        unchecked {\\r\\n            Boss memory boss;\\r\\n            Round memory round;\\r\\n\\r\\n            uint256 _seed = seed;\\r\\n\\r\\n            if (raider.startRound <= roundId) {\\r\\n                _roundId = raider.startRound;\\r\\n                for (_roundId; _roundId <= roundId; _roundId++) {\\r\\n                    round = rounds[_roundId];\\r\\n                    boss = bosses[round.boss];\\r\\n                    rewards += _roundReward(raider, round, boss);\\r\\n                }\\r\\n                _roundId -= 1;\\r\\n            } else {\\r\\n                _roundId = roundId;\\r\\n                round = rounds[_roundId];\\r\\n            }\\r\\n\\r\\n            while (block.number > round.finalBlock) {\\r\\n                _roundId += 1;\\r\\n                _seed = _rollSeed(_seed);\\r\\n                round = _rollRound(_seed, round.finalBlock + 1);\\r\\n                boss = bosses[round.boss];\\r\\n\\r\\n                if (_roundId >= raider.startRound) {\\r\\n                    if (round.finalBlock < raider.startBlock) {\\r\\n                        _roundId = roundId;\\r\\n                        round = rounds[_roundId];\\r\\n                        _seed = seed;\\r\\n                        while (round.finalBlock < raider.startBlock) {\\r\\n                            _roundId += 1;\\r\\n                            _seed = _rollSeed(_seed);\\r\\n                            round = _rollRound(_seed, round.finalBlock + 1);\\r\\n                            boss = bosses[round.boss];\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    rewards += _roundReward(raider, round, boss);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _fetchNewRewardsWithSnapshot(Raider memory raider)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 _roundId, uint256 rewards)\\r\\n    {\\r\\n        // FIXME: check if we will overflow\\r\\n        unchecked {\\r\\n            Boss memory boss;\\r\\n            Round memory round;\\r\\n\\r\\n            _roundId = raider.startRound;\\r\\n            uint256 _snapshotId = raider.startSnapshot;\\r\\n            uint32 _lastRound = snapshots[_snapshotId].initialRound;\\r\\n\\r\\n            for (_roundId; _roundId < _lastRound; _roundId++) {\\r\\n                round = rounds[_roundId];\\r\\n                boss = bosses[round.boss];\\r\\n                if (round.finalBlock < raider.startBlock) {\\r\\n                    while (round.finalBlock < raider.startBlock) {\\r\\n                        _roundId += 1;\\r\\n                        round = rounds[roundId];\\r\\n                        boss = bosses[round.boss];\\r\\n                    }\\r\\n                }\\r\\n                rewards += _roundReward(raider, round, boss);\\r\\n            }\\r\\n\\r\\n            for (_snapshotId; _snapshotId < snapshots.length; _snapshotId++) {\\r\\n                rewards += snapshots[_snapshotId].attackDealt * raider.dpb;\\r\\n                _roundId = snapshots[_snapshotId].finalRound;\\r\\n                round = rounds[_roundId];\\r\\n            }\\r\\n\\r\\n            _roundId += 1;\\r\\n            round = rounds[_roundId];\\r\\n            rewards += _roundReward(raider, round, boss);\\r\\n\\r\\n            uint256 _seed = seed;\\r\\n            while (block.number > round.finalBlock) {\\r\\n                _roundId += 1;\\r\\n                _seed = _rollSeed(_seed);\\r\\n                round = _rollRound(_seed, round.finalBlock + 1);\\r\\n                boss = bosses[round.boss];\\r\\n                rewards += _roundReward(raider, round, boss);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _lazyFetchRoundId(uint32 maxBlock)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint32 _roundId)\\r\\n    {\\r\\n        // FIXME: check if we will overflow\\r\\n        unchecked {\\r\\n            _roundId = roundId;\\r\\n            Round memory round = rounds[_roundId];\\r\\n            uint256 _seed = seed;\\r\\n            while (maxBlock > round.finalBlock) {\\r\\n                _roundId += 1;\\r\\n                _seed = _rollSeed(_seed);\\r\\n                round = _rollRound(_seed, round.finalBlock + 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _roundReward(\\r\\n        Raider memory raider,\\r\\n        Round memory round,\\r\\n        Boss memory boss\\r\\n    ) internal view returns (uint256 reward) {\\r\\n        // cases -\\r\\n        // User lasts the entire round [XXXXXXXXX];\\r\\n        // User joins mid round [000XXXXXX];\\r\\n        // User joins and leaves mid round [000XXX000];\\r\\n        // User leaves mid round [XXXXXX000];\\r\\n\\r\\n        require(\\r\\n            round.finalBlock >= raider.startBlock,\\r\\n            \\\"Raid::_roundReward: ERROR\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            uint256 blocksDefeated = boss.blockHealth;\\r\\n\\r\\n            if (\\r\\n                block.number > round.finalBlock &&\\r\\n                raider.startBlock > round.startBlock\\r\\n            ) {\\r\\n                blocksDefeated = round.finalBlock - raider.startBlock;\\r\\n            } else if (\\r\\n                round.finalBlock > block.number &&\\r\\n                raider.startBlock > round.startBlock\\r\\n            ) {\\r\\n                blocksDefeated = block.number - raider.startBlock;\\r\\n            } else if (\\r\\n                round.finalBlock > block.number &&\\r\\n                round.startBlock >= raider.startBlock\\r\\n            ) {\\r\\n                blocksDefeated = block.number - round.startBlock;\\r\\n            }\\r\\n\\r\\n            reward =\\r\\n                (1e18 *\\r\\n                    uint256(blocksDefeated) *\\r\\n                    uint256(boss.multiplier) *\\r\\n                    uint256(raider.dpb)) /\\r\\n                PRECISION;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfetti.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IConfetti is IERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../lib/Stats.sol\\\";\\r\\n\\r\\ninterface IParty {\\r\\n    event Equipped(address indexed user, uint8 item, uint8 slot, uint256 id);\\r\\n\\r\\n    event Unequipped(address indexed user, uint8 item, uint8 slot, uint256 id);\\r\\n\\r\\n    event DamageUpdated(address indexed user, uint32 damageCurr);\\r\\n\\r\\n    struct PartyData {\\r\\n        uint256 hero;\\r\\n        mapping(uint256 => uint256) fighters;\\r\\n    }\\r\\n\\r\\n    struct Action {\\r\\n        ActionType action;\\r\\n        uint256 id;\\r\\n        uint8 slot;\\r\\n    }\\r\\n\\r\\n    enum Property {\\r\\n        HERO,\\r\\n        FIGHTER\\r\\n    }\\r\\n\\r\\n    enum ActionType {\\r\\n        UNEQUIP,\\r\\n        EQUIP\\r\\n    }\\r\\n\\r\\n    function act(\\r\\n        Action[] calldata heroActions,\\r\\n        Action[] calldata fighterActions\\r\\n    ) external;\\r\\n\\r\\n    function equip(\\r\\n        Property item,\\r\\n        uint256 id,\\r\\n        uint8 slot\\r\\n    ) external;\\r\\n\\r\\n    function unequip(Property item, uint8 slot) external;\\r\\n\\r\\n    function enhance(\\r\\n        Property item,\\r\\n        uint8 slot,\\r\\n        uint256 burnTokenId\\r\\n    ) external;\\r\\n\\r\\n    function getUserHero(address user) external view returns (uint256);\\r\\n\\r\\n    function getUserFighters(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function getDamage(address user) external view returns (uint32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRaid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRaid {\\r\\n    struct Round {\\r\\n        uint16 boss;\\r\\n        uint32 roll;\\r\\n        uint32 startBlock;\\r\\n        uint32 finalBlock;\\r\\n    }\\r\\n\\r\\n    struct Raider {\\r\\n        uint32 dpb;\\r\\n        uint32 startedAt;\\r\\n        uint32 startBlock;\\r\\n        uint32 startRound;\\r\\n        uint32 startSnapshot;\\r\\n        uint256 pendingRewards;\\r\\n    }\\r\\n\\r\\n    struct Boss {\\r\\n        uint32 weight;\\r\\n        uint32 blockHealth;\\r\\n        uint128 multiplier;\\r\\n    }\\r\\n\\r\\n    struct Snapshot {\\r\\n        uint32 initialBlock;\\r\\n        uint32 initialRound;\\r\\n        uint32 finalBlock;\\r\\n        uint32 finalRound;\\r\\n        uint256 attackDealt;\\r\\n    }\\r\\n\\r\\n    struct RaidData {\\r\\n        uint16 boss;\\r\\n        uint32 roundId;\\r\\n        uint32 health;\\r\\n        uint32 maxHealth;\\r\\n        uint256 seed;\\r\\n    }\\r\\n\\r\\n    function updateDamage(address user, uint32 _dpb) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../lib/Randomness.sol\\\";\\r\\n\\r\\ninterface ISeeder {\\r\\n    event Requested(address indexed origin, uint256 indexed identifier);\\r\\n\\r\\n    event Seeded(bytes32 identifier, uint256 randomness);\\r\\n\\r\\n    function getIdReferenceCount(\\r\\n        bytes32 randomnessId,\\r\\n        address origin,\\r\\n        uint256 startIdx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getIdentifiers(\\r\\n        bytes32 randomnessId,\\r\\n        address origin,\\r\\n        uint256 startIdx,\\r\\n        uint256 count\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function requestSeed(uint256 identifier) external;\\r\\n\\r\\n    function getSeed(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getSeedSafe(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function executeRequestMulti() external;\\r\\n\\r\\n    function isSeeded(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function setFee(uint256 fee) external;\\r\\n\\r\\n    function getFee() external view returns (uint256);\\r\\n\\r\\n    function getData(address origin, uint256 identifier)\\r\\n        external\\r\\n        view\\r\\n        returns (Randomness.SeedData memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Randomness.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Randomness {\\r\\n    struct SeedData {\\r\\n        uint256 batch;\\r\\n        bytes32 randomnessId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Stats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Stats {\\r\\n    struct HeroStats {\\r\\n        uint8 dmgMultiplier;\\r\\n        uint8 partySize;\\r\\n        uint8 enhancement;\\r\\n    }\\r\\n\\r\\n    struct FighterStats {\\r\\n        uint32 dmg;\\r\\n        uint8 enhancement;\\r\\n    }\\r\\n\\r\\n    struct EquipmentStats {\\r\\n        uint32 dmg;\\r\\n        uint8 dmgMultiplier;\\r\\n        uint8 slot;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/randomness/Seedable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @title RaidParty Helper Contract for Seedability\\r\\n\\r\\n/**\\r\\n *   ___      _    _ ___          _\\r\\n *  | _ \\\\__ _(_)__| | _ \\\\__ _ _ _| |_ _  _\\r\\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\\r\\n *  |_|_\\\\__,_|_\\\\__,_|_| \\\\__,_|_|  \\\\__|\\\\_, |\\r\\n *                                    |__/\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Seedable {\\r\\n    function _validateSeed(uint256 id) internal pure {\\r\\n        require(id != 0, \\\"Seedable: not seeded\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct IRaid.Boss\",\"name\":\"boss\",\"type\":\"tuple\"}],\"name\":\"appendBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bosses\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bossesCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confetti\",\"outputs\":[{\"internalType\":\"contract IConfetti\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct IRaid.Boss[]\",\"name\":\"_bosses\",\"type\":\"tuple[]\"}],\"name\":\"createBosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaidData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"boss\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"roundId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"health\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"internalType\":\"struct IRaid.RaidData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IParty\",\"name\":\"_party\",\"type\":\"address\"},{\"internalType\":\"contract ISeeder\",\"name\":\"_seeder\",\"type\":\"address\"},{\"internalType\":\"contract IConfetti\",\"name\":\"_confetti\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSnapshotTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxBlock\",\"type\":\"uint32\"}],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"party\",\"outputs\":[{\"internalType\":\"contract IParty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"raiders\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dpb\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startedAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startSnapshot\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"boss\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"roll\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeder\",\"outputs\":[{\"internalType\":\"contract ISeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"setHalted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IParty\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"setParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISeeder\",\"name\":\"_seeder\",\"type\":\"address\"}],\"name\":\"setSeeder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"initialBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initialRound\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalRound\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"attackDealt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct IRaid.Boss\",\"name\":\"boss\",\"type\":\"tuple\"}],\"name\":\"updateBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dpb\",\"type\":\"uint32\"}],\"name\":\"updateDamage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightTotal\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Raid", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}