{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RepaymentController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./InstallmentsCalc.sol\\\";\\nimport \\\"./libraries/LoanLibrary.sol\\\";\\nimport \\\"./interfaces/IPromissoryNote.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/IRepaymentController.sol\\\";\\n\\nimport { RC_CannotDereference, RC_InvalidState, RC_NoPaymentDue, RC_OnlyLender, RC_BeforeStartDate, RC_NoInstallments, RC_NoMinPaymentDue, RC_RepayPartZero, RC_RepayPartLTMin, RC_HasInstallments } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title RepaymentController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Repayment Controller is the entry point for all loan lifecycle\\n * operations in the Arcade.xyz lending protocol once a loan has begun.\\n * This contract allows a caller to calculate an amount due on a loan,\\n * make a payment (either in full or part, for installment loans), and\\n * claim collateral on a defaulted loan. It is this contract's responsibility\\n * to verify loan conditions before calling LoanCore.\\n */\\ncontract RepaymentController is IRepaymentController, InstallmentsCalc, Context {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ===============================================\\n\\n    ILoanCore private loanCore;\\n    IPromissoryNote private lenderNote;\\n\\n    constructor(\\n        ILoanCore _loanCore\\n    ) {\\n        loanCore = _loanCore;\\n        lenderNote = loanCore.lenderNote();\\n    }\\n\\n    // ==================================== LIFECYCLE OPERATIONS ========================================\\n\\n    /**\\n     * @notice Repay an active loan, referenced by borrower note ID (equivalent to loan ID). The interest for a loan\\n     *         is calculated, and the principal plus interest is withdrawn from the borrower.\\n     *         Control is passed to LoanCore to complete repayment.\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function repay(uint256 loanId) external override {\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        if (data.state == LoanLibrary.LoanState.DUMMY_DO_NOT_USE) revert RC_CannotDereference(loanId);\\n        if (data.state != LoanLibrary.LoanState.Active) revert RC_InvalidState(data.state);\\n\\n        LoanLibrary.LoanTerms memory terms = data.terms;\\n\\n        //cannot use for installment loans, call repayPart or repayPartMinimum\\n        if (terms.numInstallments != 0) revert RC_HasInstallments(terms.numInstallments);\\n\\n        // withdraw principal plus interest from borrower and send to loan core\\n        uint256 total = getFullInterestAmount(terms.principal, terms.interestRate);\\n        if (total == 0) revert RC_NoPaymentDue();\\n\\n        IERC20(terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), total);\\n        IERC20(terms.payableCurrency).approve(address(loanCore), total);\\n\\n        // call repay function in loan core\\n        loanCore.repay(loanId);\\n    }\\n\\n    /**\\n     * @notice Claim collateral on an active loan, referenced by lender note ID (equivalent to loan ID).\\n     *        The loan must be past the due date, or, in the case of an installment, the amount\\n     *         overdue must be beyond the liquidation threshold. No funds are collected\\n     *         from the borrower.\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function claim(uint256 loanId) external override {\\n        // make sure that caller owns lender note\\n        // Implicitly checks if loan is active - if inactive, note will not exist\\n        address lender = lenderNote.ownerOf(loanId);\\n        if (lender != msg.sender) revert RC_OnlyLender(msg.sender);\\n        // get LoanData to check the current installment period, then send this value as a parameter to LoanCore.\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        if (data.terms.numInstallments > 0) {\\n            // get the current installment period\\n            uint256 _installmentPeriod = currentInstallmentPeriod(\\n                data.startDate,\\n                data.terms.durationSecs,\\n                data.terms.numInstallments\\n            );\\n            // call claim function in loan core\\n            loanCore.claim(loanId, _installmentPeriod);\\n        } else {\\n            // call claim function in loan core indicating a legacy loan type with 0 as the installment period\\n            // installment loans cannot have an installment period of 0\\n            loanCore.claim(loanId, 0);\\n        }\\n    }\\n\\n    // =========================== INSTALLMENT SPECIFIC OPERATIONS ===============================\\n\\n    /**\\n     * @notice Call _calcAmountsDue publicly to determine the amount of the payable currency\\n     *         must be approved for the payment. Returns minimum balance due, late fees, and number\\n     *         of missed payments.\\n     *\\n     * @dev Calls _calcAmountsDue similar to repayPart and repayPartMinimum, but does not call LoanCore.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     *\\n     * @return minInterestDue                   The amount of interest due, compounded over missed payments.\\n     * @return lateFees                         The amount of late fees due, compounded over missed payments.\\n     * @return _installmentsMissed              The number of overdue installment periods since the last payment.\\n     */\\n    function getInstallmentMinPayment(uint256 loanId)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // loan terms from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // get loan from borrower note\\n        if (data.state == LoanLibrary.LoanState.DUMMY_DO_NOT_USE) revert RC_CannotDereference(loanId);\\n        if (data.state != LoanLibrary.LoanState.Active) revert RC_InvalidState(data.state);\\n\\n        uint256 installments = data.terms.numInstallments;\\n        if (installments == 0) revert RC_NoInstallments(installments);\\n\\n        // get the current minimum balance due for the installment\\n        (uint256 minInterestDue, uint256 lateFees, uint256 numMissedPayments) = _calcAmountsDue(\\n            data.balance,\\n            data.startDate,\\n            data.terms.durationSecs,\\n            installments,\\n            data.numInstallmentsPaid,\\n            data.terms.interestRate\\n        );\\n\\n        return (minInterestDue, lateFees, numMissedPayments);\\n    }\\n\\n    /**\\n     * @notice Called when paying back installment loan with the minimum amount due.\\n     *         Do not call for single payment loan types. Calling this function does not\\n     *         reduce the loans principal.\\n     *\\n     * @dev Only pay off the current interest amount and, if applicable, any late fees accrued.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     */\\n    function repayPartMinimum(uint256 loanId) external override {\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // total amount due equals interest amount plus any late fees\\n        uint256 _minAmount = minBalanceDue + lateFees;\\n        // cannot call repayPartMinimum twice in the same installment period\\n        if (_minAmount == 0) revert RC_NoPaymentDue();\\n\\n        // load terms from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // gather minimum payment from _msgSender()\\n        IERC20(data.terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), _minAmount);\\n        // approve loanCore to take minBalanceDue\\n        IERC20(data.terms.payableCurrency).approve(address(loanCore), _minAmount);\\n        // call repayPart function in loanCore\\n        loanCore.repayPart(loanId, numMissedPayments, 0, minBalanceDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Called when paying back installment loan with an amount greater than the minimum amount due.\\n     *         Do not call for single payment loan types. If one wishes to repay the minimum, use\\n     *         repayPartMinimum.\\n     *\\n     * @dev Pay off the current interest and, if applicable any late fees accrued, and an additional\\n     *      amount to be deducted from the loan principal.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     * @param amount                            Amount = minBalDue + lateFees + amountToPayOffPrincipal\\n     *                                          value must be greater than minBalDue + latefees returned\\n     *                                          from getInstallmentMinPayment function call.\\n     */\\n    function repayPart(uint256 loanId, uint256 amount) external override {\\n        if (amount == 0) revert RC_RepayPartZero();\\n\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // total minimum amount due, interest amount plus any late fees\\n        uint256 _minAmount = minBalanceDue + lateFees;\\n        // require amount taken from the _msgSender() to be larger than or equal to minBalanceDue\\n        if (amount < _minAmount) revert RC_RepayPartLTMin(amount, _minAmount);\\n        // loan data from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // calculate the payment toward principal after subtracting (minBalanceDue + lateFees)\\n        uint256 _totalPaymentToPrincipal = amount - (_minAmount);\\n        // collect amount specified in function call params from _msgSender()\\n        IERC20(data.terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), amount);\\n        // approve loanCore to take amount\\n        IERC20(data.terms.payableCurrency).approve(address(loanCore), amount);\\n        // call repayPart function in loanCore\\n        loanCore.repayPart(loanId, numMissedPayments, _totalPaymentToPrincipal, minBalanceDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Called when the user wants to close an installment loan without needing to determine the\\n     *         amount to pass to the repayPart function. This is done by paying the remaining principal\\n     *         and any interest or late fees due.\\n     *\\n     * @dev Pay off the current interest and, if applicable any late fees accrued, and the remaining principal\\n     *      left on the loan.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     */\\n    function closeLoan(uint256 loanId) external override {\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // loan data from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        // total amount to close loan (remaining balance + current interest + late fees)\\n        uint256 _totalAmount = data.balance + minBalanceDue + lateFees;\\n        // collect amount specified in function call params from _msgSender()\\n        IERC20(data.terms.payableCurrency).safeTransferFrom(_msgSender(), address(this), _totalAmount);\\n        // approve loanCore to take minBalanceDue\\n        IERC20(data.terms.payableCurrency).approve(address(loanCore), _totalAmount);\\n        // Call repayPart function in loanCore.\\n        loanCore.repayPart(loanId, numMissedPayments, data.balance, minBalanceDue, lateFees);\\n    }\\n\\n    // ========================================= VIEW FUNCTIONS =========================================\\n\\n    /**\\n     * @notice Called when the user wants to determine the remaining balance for closing the loan.\\n     *\\n     * @dev View the current interest and, if applicable any late fees accrued, in addition to any\\n     *      remaining principal left on the loan.\\n     *\\n     * @param loanId                            LoanId, used to locate terms.\\n     *\\n     * @return amountDue                        The total amount due to close the loan, including principal, interest,\\n     *                                          and late fees.\\n     * @return numMissedPayments                The number of missed payments.\\n     */\\n    function amountToCloseLoan(uint256 loanId) external view override returns (uint256, uint256) {\\n        // get current minimum balance due for the installment repayment, based on specific loanId.\\n        (uint256 minBalanceDue, uint256 lateFees, uint256 numMissedPayments) = getInstallmentMinPayment(loanId);\\n        // loan data from loanId\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n\\n        // the required total amount needed to close the loan (remaining balance + current interest + late fees)\\n        return ((data.balance + minBalanceDue + lateFees), numMissedPayments);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InstallmentsCalc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IInstallmentsCalc.sol\\\";\\n\\nimport { FIAC_InterestRate } from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title OriginationController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for a calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InstallmentsCalc is IInstallmentsCalc {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n    /// @dev The denominator to express the final interest in terms of basis ponits.\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 10_000;\\n    // Interest rate parameter\\n    uint256 public constant INSTALLMENT_PERIOD_MULTIPLIER = 1_000_000;\\n    // 50 / BASIS_POINTS_DENOMINATOR = 0.5%\\n    uint256 public constant LATE_FEE = 50;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     *\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                  Principal amount in the loan terms.\\n     * @param interestRate               Interest rate in the loan terms.\\n     *\\n     * @return interest                  The amount of interest due.\\n     */\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) public pure virtual returns (uint256) {\\n        // Interest rate to be greater than or equal to 0.01%\\n        if (interestRate / INTEREST_RATE_DENOMINATOR < 1) revert FIAC_InterestRate(interestRate);\\n\\n        return principal + principal * interestRate / INTEREST_RATE_DENOMINATOR / BASIS_POINTS_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the current installment period relative to the loan's startDate,\\n     *         durationSecs, and numInstallments. Using these three parameters and the blocks current timestamp\\n     *         we are able to determine the current timeframe relative to the total number of installments.\\n     *\\n     * @dev Get current installment using the startDate, duration, and current time.\\n     *      In the section titled 'Get Timestamp Multiplier' DurationSecs must be greater\\n     *      than 10 seconds (10%10 = 0) and less than 1e18 seconds, this checked in\\n     *      _validateLoanTerms function in Origination Controller.\\n     *\\n     * @param startDate                    The start date of the loan as a timestamp.\\n     * @param durationSecs                 The duration of the loan in seconds.\\n     * @param numInstallments              The total number of installments in the loan terms.\\n     */\\n    function currentInstallmentPeriod(\\n        uint256 startDate,\\n        uint256 durationSecs,\\n        uint256 numInstallments\\n    ) internal view returns (uint256) {\\n        // *** Local State\\n        uint256 _currentTime = block.timestamp;\\n        uint256 _installmentPeriod = 1; // can only be called after the loan has started\\n        uint256 _relativeTimeInLoan = 0; // initial value\\n        uint256 _timestampMultiplier = 1e20; // inital value\\n\\n        // *** Get Timestamp Mulitpier\\n        for (uint256 i = 1e18; i >= 10; i = i / 10) {\\n            if (durationSecs % i != durationSecs) {\\n                if (_timestampMultiplier == 1e20) {\\n                    _timestampMultiplier = (1e18 / i);\\n                }\\n            }\\n        }\\n\\n        // *** Time Per Installment\\n        uint256 _timePerInstallment = durationSecs / numInstallments;\\n\\n        // *** Relative Time In Loan\\n        _relativeTimeInLoan = (_currentTime - startDate) * _timestampMultiplier;\\n\\n        // *** Check to see when _timePerInstallment * i is greater than _relativeTimeInLoan\\n        // Used to determine the current installment period. (j+1 to account for the current period)\\n        uint256 j = 1;\\n        while ((_timePerInstallment * j) * _timestampMultiplier <= _relativeTimeInLoan) {\\n            _installmentPeriod = j + 1;\\n            j++;\\n        }\\n        // *** Return\\n        return (_installmentPeriod);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the compounded fees and minimum balance for all the missed payments\\n     *\\n     * @dev Get minimum installment payment due, and any late fees accrued due to payment being late\\n     *\\n     * @param balance                           Current balance of the loan\\n     * @param _interestRatePerInstallment       Interest rate per installment period\\n     * @param _installmentsMissed               Number of missed installment periods\\n     */\\n    function _getFees(\\n        uint256 balance,\\n        uint256 _interestRatePerInstallment,\\n        uint256 _installmentsMissed\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 minInterestDue = 0; // initial state\\n        uint256 currentBal = balance; // remaining principal\\n        uint256 lateFees = 0; // initial state\\n        // calculate the late fees based on number of installments missed\\n        // late fees compound on any installment periods missed. For consecutive missed payments\\n        // late fees of first installment missed are added to the principal of the next late fees calculation\\n        for (uint256 i = 0; i < _installmentsMissed; i++) {\\n            // interest due per period based on currentBal value\\n            uint256 intDuePerPeriod = (((currentBal * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n                BASIS_POINTS_DENOMINATOR);\\n            // update local state, next interest payment and late fee calculated off updated currentBal variable\\n            minInterestDue += intDuePerPeriod;\\n            lateFees += ((currentBal * LATE_FEE) / BASIS_POINTS_DENOMINATOR);\\n            currentBal += intDuePerPeriod + lateFees;\\n        }\\n\\n        // one additional interest period added to _installmentsMissed for the current payment being made.\\n        // no late fees added to this payment. currentBal compounded.\\n        minInterestDue +=\\n            ((currentBal * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n            BASIS_POINTS_DENOMINATOR;\\n\\n        return (minInterestDue, lateFees);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the minimum interest balance on loan, current late fees,\\n     *         and the current number of payments missed. If called twice in the same installment\\n     *         period, will return all zeros the second call.\\n     *\\n     * @dev Get minimum installment payment due, any late fees accrued, and\\n     *      the number of missed payments since the last installment payment.\\n     *\\n     *      1. Calculate relative time values to determine the number of installment periods missed.\\n     *      2. Is the repayment late based on the number of installment periods missed?\\n     *          Y. Calculate minimum balance due with late fees.\\n     *          N. Return only interest rate payment as minimum balance due.\\n     *\\n     * @param balance                           Current balance of the loan\\n     * @param startDate                         Timestamp of the start of the loan duration\\n     * @param durationSecs                      Duration of the loan in seconds\\n     * @param numInstallments                   Total number of installments in the loan\\n     * @param numInstallmentsPaid               Total number of installments paid, not including this current payment\\n     * @param interestRate                      The total interest rate for the loans duration from the loan terms\\n     */\\n    function _calcAmountsDue(\\n        uint256 balance,\\n        uint256 startDate,\\n        uint256 durationSecs,\\n        uint256 numInstallments,\\n        uint256 numInstallmentsPaid,\\n        uint256 interestRate\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // *** Installment Time\\n        uint256 _installmentPeriod = currentInstallmentPeriod(startDate, durationSecs, numInstallments);\\n\\n        // *** Time related to number of installments paid\\n        if (numInstallmentsPaid >= _installmentPeriod) {\\n            // When numInstallmentsPaid is greater than or equal to the _installmentPeriod\\n            // this indicates that the minimum interest and any late fees for this installment period\\n            // have already been repaid. Any additional amount sent in this installment period goes to principal\\n            return (0, 0, 0);\\n        }\\n\\n        // +1 for current install payment\\n        uint256 _installmentsMissed = _installmentPeriod - (numInstallmentsPaid + 1);\\n\\n        // ** Installment Interest - using mulitpier of 1 million.\\n        // There should not be loan with more than 1 million installment periods. Checked in LoanCore.\\n        uint256 _interestRatePerInstallment = ((interestRate / INTEREST_RATE_DENOMINATOR) *\\n            INSTALLMENT_PERIOD_MULTIPLIER) / numInstallments;\\n\\n        // ** Determine if late fees are added and if so, how much?\\n        // Calulate number of payments missed based on _latePayment, _pastDueDate\\n\\n        // * If payment on time...\\n        if (_installmentsMissed == 0) {\\n            // Minimum balance due calculation. Based on interest per installment period\\n            uint256 minBalDue = ((balance * _interestRatePerInstallment) / INSTALLMENT_PERIOD_MULTIPLIER) /\\n                BASIS_POINTS_DENOMINATOR;\\n\\n            return (minBalDue, 0, 0);\\n        }\\n        // * If payment is late, or past the loan duration...\\n        else {\\n            // get late fees based on number of payments missed and current principal due\\n            (uint256 minInterestDue, uint256 lateFees) = _getFees(\\n                balance,\\n                _interestRatePerInstallment,\\n                _installmentsMissed\\n            );\\n\\n            return (minInterestDue, lateFees, _installmentsMissed);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        /// @dev Must be an AssetVault for LoanTermsWithItems\\n        address collateralAddress;\\n        // An encoded list of predicates\\n        bytes items;\\n        // The payable currency for the loan principal and interest\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract\\n        bytes data;\\n        // The verifier contract\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan\\n        LoanState state;\\n        // Number of installment payments made on the loan\\n        uint24 numInstallmentsPaid;\\n        // installment loan specific\\n        // Start date of the loan, using block.timestamp - for determining installment period\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan\\n        LoanTerms terms;\\n        // Remaining balance of the loan. Starts as equal to principal. Can reduce based on\\n        // payments made, can increased based on compounded interest from missed payments and late fees\\n        uint256 balance;\\n        // Amount paid in total by the borrower\\n        uint256 balancePaid;\\n        // Total amount of late fees accrued\\n        uint256 lateFeesAccrued;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPromissoryNote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPromissoryNote is IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setPaused(bool paused) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoanCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\nimport \\\"./IPromissoryNote.sol\\\";\\nimport \\\"./IFeeController.sol\\\";\\nimport \\\"./ILoanCore.sol\\\";\\n\\ninterface ILoanCore {\\n    // ================ Events =================\\n\\n    event LoanCreated(LoanLibrary.LoanTerms terms, uint256 loanId);\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event InstallmentPaymentReceived(uint256 loanId, uint256 repaidAmount, uint256 remBalance);\\n    event LoanClaimed(uint256 loanId);\\n    event FeesClaimed(address token, address to, uint256 amount);\\n    event SetFeeController(address feeController);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms\\n    ) external returns (uint256 loanId);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function repayPart(\\n        uint256 _loanId,\\n        uint256 _currentMissedPayments,\\n        uint256 _paymentToPrincipal,\\n        uint256 _paymentToInterest,\\n        uint256 _paymentToLateFees\\n    ) external;\\n\\n    function claim(uint256 loanId, uint256 currentInstallmentPeriod) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external returns (IPromissoryNote);\\n\\n    function lenderNote() external returns (IPromissoryNote);\\n\\n    function feeController() external returns (IFeeController);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRepaymentController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRepaymentController {\\n    // ============== Lifeycle Operations ==============\\n\\n    function repay(uint256 loanId) external;\\n\\n    function claim(uint256 loanId) external;\\n\\n    function repayPartMinimum(uint256 loanId) external;\\n\\n    function repayPart(uint256 loanId, uint256 amount) external;\\n\\n    function closeLoan(uint256 loanId) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getInstallmentMinPayment(uint256 loanId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function amountToCloseLoan(uint256 loanId) external returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Lending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror OC_ZeroAddress();\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice Number of installment periods must be greater than 1 and less than or equal to 1000.\\n *\\n * @param numInstallments               Number of installment periods in loan.\\n */\\nerror OC_NumberInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param verifier                      The address of the verifier contract.\\n * @param data                          The verification data (to be parsed by verifier).\\n * @param vault                         The user's vault subject to verification.\\n */\\nerror OC_PredicateFailed(address verifier, bytes data, address vault);\\n\\n/**\\n * @notice The predicates array is empty.\\n */\\nerror OC_PredicatesArrayEmpty();\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount1155(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided ERC1155 signature item is requiring an invalid token ID.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId1155(address asset, int256 tokenId);\\n\\n/**\\n * @notice Provided ERC20 signature item is requiring a non-positive amount.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NonPositiveAmount20(address asset, uint256 amount);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror RC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Repayment has already been completed for this loan without installments.\\n */\\nerror RC_NoPaymentDue();\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address caller);\\n\\n/**\\n * @notice Loan has not started yet.\\n *\\n * @param startDate                 block timestamp of the startDate of loan stored in LoanData.\\n */\\nerror RC_BeforeStartDate(uint256 startDate);\\n\\n/**\\n * @notice Loan terms do not have any installments, use repay for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_NoInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice Loan terms have installments, use repaypart or repayPartMinimum for repayments.\\n *\\n * @param numInstallments           Number of installments returned from LoanTerms.\\n */\\nerror RC_HasInstallments(uint256 numInstallments);\\n\\n/**\\n * @notice No interest payment or late fees due.\\n *\\n * @param amount                    Minimum interest plus late fee amount returned\\n *                                  from minimum payment calculation.\\n */\\nerror RC_NoMinPaymentDue(uint256 amount);\\n\\n/**\\n * @notice Repaid amount must be larger than zero.\\n */\\nerror RC_RepayPartZero();\\n\\n/**\\n * @notice Amount paramater less than the minimum amount due.\\n *\\n * @param amount                    Amount function call parameter.\\n * @param minAmount                 The minimum amount due.\\n */\\nerror RC_RepayPartLTMin(uint256 amount, uint256 minAmount);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/// @notice Zero address passed in where not allowed.\\nerror LC_ZeroAddress();\\n\\n/// @notice Borrower address is same as lender address.\\nerror LC_ReusedNote();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice User address and the specified nonce have already been used.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Installment loan has not defaulted.\\n */\\nerror LC_LoanNotDefaulted();\\n\\n// ================================== Full Insterest Amount Calc ====================================\\n/// @notice All errors prefixed with FIAC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Interest must be greater than 0.01%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror FIAC_InterestRate(uint256 interestRate);\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deployer is allowed to initialize roles. Caller is not deployer.\\n */\\nerror PN_CannotInitialize();\\n\\n/**\\n * @notice Roles have been initialized.\\n */\\nerror PN_AlreadyInitialized();\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice No token transfers while contract is in paused state.\\n */\\nerror PN_ContractPaused();\\n\\n// ==================================== Fee Controller ======================================\\n/// @notice All errors prefixed with FC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Caller attempted to set a fee which is larger than the global maximum.\\n */\\nerror FC_FeeTooLarge();\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInstallmentsCalc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IInstallmentsCalc {\\n    // ================ View Functions ================\\n\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IFeeController {\\n    // ================ Events =================\\n\\n    event UpdateOriginationFee(uint256 _newFee);\\n    event UpdateRolloverFee(uint256 _newFee);\\n\\n    // ================ Fee Setters =================\\n\\n    function setOriginationFee(uint256 _originationFee) external;\\n\\n    function setRolloverFee(uint256 _rolloverFee) external;\\n\\n    // ================ Fee Getters =================\\n\\n    function getOriginationFee() external view returns (uint256);\\n\\n    function getRolloverFee() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILoanCore\",\"name\":\"_loanCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"FIAC_InterestRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"RC_CannotDereference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numInstallments\",\"type\":\"uint256\"}],\"name\":\"RC_HasInstallments\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum LoanLibrary.LoanState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"RC_InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numInstallments\",\"type\":\"uint256\"}],\"name\":\"RC_NoInstallments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RC_NoPaymentDue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RC_OnlyLender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"RC_RepayPartLTMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RC_RepayPartZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTALLMENT_PERIOD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LATE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"amountToCloseLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"getFullInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getInstallmentMinPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repayPartMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepaymentController", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000081b2f8fc75bab64a6b144aa6d2faa127b4fa7fd9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}