{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SmartWalletChecker.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n/***\\n *@title SmartWalletChecker\\n *@author InsureDAO\\n * SPDX-License-Identifier: MIT\\n *@notice Whitelist manager for VotingEscrow\\n */\\n\\nimport \\\"./test/interfaces/dao/ISmartWalletChecker.sol\\\";\\nimport \\\"./test/interfaces/pool/IOwnership.sol\\\";\\n\\ncontract SmartWalletChecker is ISmartWalletChecker{\\n\\n    IOwnership public immutable ownership;\\n    mapping(address => bool) whitelisted;\\n\\n    modifier onlyOwner() {\\n        require(\\n            ownership.owner() == msg.sender,\\n            \\\"Caller is not allowed to operate\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _ownership){\\n        ownership = IOwnership(_ownership);\\n    }\\n\\n    function check(address _addr) external view returns (bool){\\n        /***\\n        * @notice check if the address is whitelisted or not\\n        * @param _addr address to check\\n        * @return bool true if passed address is whitelisted\\n        */\\n\\n        return whitelisted[_addr];\\n    }\\n\\n    function setWhitelist(address _target, bool _bool)external onlyOwner{\\n        /***\\n        * @notice set address's status. this can both set to and remove from whitelist\\n        * @param _target whitelisting address\\n        * @return _bool true when whitelisting the _target\\n        * @dev this is managed by DAO\\n        */\\n\\n        whitelisted[_target] = _bool;\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/interfaces/dao/ISmartWalletChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface ISmartWalletChecker {\\n    function check(address _addr) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/test/interfaces/pool/IOwnership.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n//SPDX-License-Identifier: MIT\\n\\ninterface IOwnership {\\n    function owner() external view returns (address);\\n\\n    function futureOwner() external view returns (address);\\n\\n    function commitTransferOwnership(address newOwner) external;\\n\\n    function acceptTransferOwnership() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"contract IOwnership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartWalletChecker", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "00000000000000000000000056246e83f3148b05ce2d90b44fbb4e9fa9eaf5bb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}