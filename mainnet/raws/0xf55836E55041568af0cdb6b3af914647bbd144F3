{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EverApe.sol\": {\r\n      \"content\": \"pragma solidity 0.8.11;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nlibrary SafeMathInt {\\r\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n\\r\\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\\r\\n\\r\\n    int256 c = a * b;\\r\\n    require((b == 0) || (c / b == a));\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n\\r\\n    require(!(a == - 2**255 && b == -1) && (b > 0));\\r\\n\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\\r\\n\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n    int256 c = a + b;\\r\\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n    require(a >= 0);\\r\\n    return uint256(a);\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b >= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IDividendPayingTokenOptional {\\r\\n\\r\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IDividendPayingToken {\\r\\n\\r\\n  function dividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  function distributeDividends(address _owner, uint256 amount) external payable returns(uint256);\\r\\n\\r\\n  function withdrawDividend() external;\\r\\n\\r\\n  event DividendsDistributed(\\r\\n    address indexed from,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n\\r\\n  event DividendWithdrawn(\\r\\n    address indexed to,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n}\\r\\n\\r\\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMathUint for uint256;\\r\\n  using SafeMathInt for int256;\\r\\n\\r\\n  uint256 constant internal magnitude = 2**128;\\r\\n  uint256 public tokenSupply;\\r\\n\\r\\n  uint256 internal magnifiedDividendPerShare;\\r\\n  uint256 internal lastAmount;\\r\\n\\r\\n  address public dividendToken;\\r\\n\\r\\n  mapping(address => int256) internal magnifiedDividendCorrections;\\r\\n  mapping(address => uint256) internal withdrawnDividends;\\r\\n  mapping(address => uint256) internal dividendHolderAmount;\\r\\n\\r\\n  uint256 public totalDividendsDistributed;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol, address _token) ERC20 (_name, _symbol) {\\r\\n        dividendToken = _token;\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n  }\\r\\n  \\r\\n  function updateDividendToken(address _dividendToken) public onlyOwner {\\r\\n      dividendToken = _dividendToken;\\r\\n  }\\r\\n\\r\\n  function distributeDividends(address account, uint256 amount) public payable onlyOwner returns(uint256) {\\r\\n\\r\\n    if (amount > 0) {\\r\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\r\\n        (amount).mul(magnitude) / tokenSupply\\r\\n      );\\r\\n      emit DividendsDistributed(account, amount);\\r\\n\\r\\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\\r\\n    }\\r\\n\\r\\n    return(amount);\\r\\n  }\\r\\n\\r\\n  function withdrawDividend() public virtual override onlyOwner {\\r\\n    _withdrawDividendOfUser(payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\r\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\r\\n    if (_withdrawableDividend > 0) {\\r\\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\r\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\r\\n      bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\\r\\n\\r\\n      if(!success) {\\r\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\r\\n        return 0;\\r\\n      }\\r\\n\\r\\n      return _withdrawableDividend;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function dividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawableDividendOf(_owner);\\r\\n  }\\r\\n\\r\\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\r\\n  }\\r\\n\\r\\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawnDividends[_owner];\\r\\n  }\\r\\n\\r\\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return magnifiedDividendPerShare.mul(dividendHolderAmount[_owner]).toInt256Safe()\\r\\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\r\\n  }\\r\\n\\r\\n  function _transfer(address from, address to, uint256 value) internal virtual override {\\r\\n      require(false);\\r\\n\\r\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\r\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\\r\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\\r\\n  }\\r\\n\\r\\n  function _setBalance(address account, uint256 newBalance) internal returns(uint256) {\\r\\n    uint256 currentBalance = dividendHolderAmount[account];\\r\\n\\r\\n        if(newBalance > currentBalance) {\\r\\n            uint256 newAmount = newBalance.add(currentBalance);\\r\\n            dividendHolderAmount[account] = newAmount;\\r\\n            tokenSupply = tokenSupply.add(newBalance);\\r\\n            return(newAmount);\\r\\n        } else {\\r\\n            tokenSupply = tokenSupply.sub(currentBalance);\\r\\n            dividendHolderAmount[account] = newBalance;\\r\\n            tokenSupply = tokenSupply.add(newBalance);\\r\\n            return(newBalance);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract EverApe is Context, ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n\\r\\n    address public DividendsToken = address(0x4d224452801ACEd8B2F0aebE155379bb5D594381);\\r\\n\\r\\n    bool private swapping;\\r\\n\\tbool private trading;\\r\\n    bool private starting;\\r\\n\\r\\n   DividendTracker public dividendTracker;\\r\\n\\r\\n\\taddress public marketingWallet;\\r\\n    address private liquidityWallet;\\r\\n    address public deadAddress;\\r\\n    address private deployer;\\r\\n    address private developmentWallet1;\\r\\n    address private developmentWallet2;\\r\\n\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    uint256 private buyBackTimes;\\r\\n\\r\\n    uint256 private _buyLiquidityFee;\\r\\n    uint256 private _buyRewardsFee;\\r\\n    uint256 private _buyMarketingFee;\\r\\n    uint256 private _buyBurnFee;\\r\\n    uint256 private _buyDevFee;\\r\\n\\r\\n    uint256 private _sellRewardsFee;\\r\\n    uint256 private _sellLiquidityFee;\\r\\n\\tuint256 private _sellMarketingFee;\\r\\n    uint256 private _sellBurnFee;\\r\\n    uint256 private _sellDevFee;\\r\\n\\r\\n    uint256 private _elonRent;\\r\\n\\r\\n    uint256 public _maxWallet;\\r\\n    uint256 public _maxBuy;\\r\\n    uint256 public _maxSell;\\r\\n    uint256 private _previousMaxWallet;\\r\\n    uint256 private _previousMaxSell;\\r\\n    uint256 private _previousMaxBuy;\\r\\n\\r\\n    uint256 public totalBuyFees;\\r\\n    uint256 public totalSellFees;\\r\\n\\r\\n\\tuint256 public contractTokenBalanceAmount;\\r\\n\\r\\n    uint256 public gasForProcessing = 300000;\\r\\n\\r\\n    uint256 private DefaultTime;\\r\\n\\r\\n    mapping (address => bool) private _isExcludedFromFees;\\r\\n    mapping (address => bool) public automatedMarketMakerPairs;\\r\\n    mapping (address => bool) public _isElon;\\r\\n\\r\\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n    event UpdateDividendsToken(address indexed newAddress, address indexed oldAddress);\\r\\n    event isElon(address indexed account, bool isExcluded);\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event blacklist(address indexed account, bool isBlacklisted);\\r\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\r\\n    event Rewards(bool _enabled);\\r\\n    event tradingUpdated(bool _enabled);\\r\\n    event burningUpdated(bool _enabled);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\\r\\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\\r\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    event SendDividends(\\r\\n    \\tuint256 tokensSwapped,\\r\\n    \\tuint256 amount\\r\\n    );\\r\\n\\r\\n    event ProcessedDividendTracker(\\r\\n    \\tuint256 iterations,\\r\\n    \\tuint256 claims,\\r\\n        uint256 lastProcessedIndex,\\r\\n    \\tbool indexed automatic,\\r\\n    \\tuint256 gas,\\r\\n    \\taddress indexed processor\\r\\n    );\\r\\n\\r\\n    constructor() ERC20 (\\\"EverApe\\\", \\\"EAPE\\\") {\\r\\n        _buyRewardsFee = 1;\\r\\n        _buyLiquidityFee = 1;\\r\\n\\t\\t_buyMarketingFee = 1;\\r\\n        _buyBurnFee = 1;\\r\\n        _buyDevFee = 1;\\r\\n\\r\\n        _sellRewardsFee = 1;\\r\\n        _sellLiquidityFee = 1;\\r\\n\\t\\t_sellMarketingFee = 1;\\r\\n        _sellBurnFee = 1;\\r\\n        _sellDevFee = 1;\\r\\n\\r\\n        _elonRent = 99;\\r\\n\\r\\n\\t\\tcontractTokenBalanceAmount = totalSupply().mul(25).div(10000);\\r\\n\\r\\n        swapTokensAtAmount = totalSupply().mul(25).div(10000);\\r\\n        _maxWallet = 2000000000000 * (10**18);\\r\\n        _maxBuy = 20000000000000 * (10**18);\\r\\n        _maxSell = 10000000000000 * (10**18);\\r\\n\\r\\n        totalBuyFees = _buyRewardsFee.add(_buyLiquidityFee).add(_buyMarketingFee).add(_buyBurnFee).add(_buyDevFee);\\r\\n        totalSellFees = _sellRewardsFee.add(_sellLiquidityFee).add(_sellMarketingFee).add(_sellBurnFee).add(_sellDevFee);\\r\\n\\r\\n    \\tdividendTracker = new DividendTracker();\\r\\n\\r\\n    \\tliquidityWallet = owner();\\r\\n\\t\\tmarketingWallet = address(payable(0xd7cE2EeC83ce6015D2EE30acC46986EEaA9f1dcD));\\r\\n        developmentWallet1 = address(payable(0xF7F2c1668e9e2818A571c8E09D1aC7A12EA64067));\\r\\n        developmentWallet2 = address(payable(0x14A5114204b7a27a9d87de029cA16364cA0D72Da));\\r\\n        deadAddress = payable(0x000000000000000000000000000000000000dEaD);\\r\\n        deployer = owner();\\r\\n\\r\\n    \\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    \\t//0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3 Testnet\\r\\n    \\t//0x10ED43C718714eb63d5aA57B78B54704E256024E Mainnet\\r\\n    \\t//0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D Ropsten\\r\\n    \\t//0xCDe540d7eAFE93aC5fE6233Bee57E1270D3E330F BakerySwap\\r\\n         // Create a uniswap pair for this new token\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n\\r\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n\\r\\n        // exclude from receiving dividends\\r\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\r\\n        dividendTracker.excludeFromDividends(address(this));\\r\\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\\r\\n        dividendTracker.excludeFromDividends(address(deadAddress));\\r\\n\\r\\n        // exclude from paying fees or having max transaction amount\\r\\n        excludeFromFees(liquidityWallet, true);\\r\\n        excludeFromFees(marketingWallet, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        \\r\\n        /*\\r\\n            _mint is an internal function in ERC20.sol that is only called here,\\r\\n            and CANNOT be called ever again\\r\\n        */\\r\\n        _mint(owner(), 1000000000000000 * (10**18));\\r\\n        \\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n  \\t}\\r\\n\\r\\n    function excludeFromDividends(address _toExclude) public onlyOwner {\\r\\n        if(!dividendTracker.IsExcludedFromDividends(_toExclude)) {\\r\\n            dividendTracker.excludeFromDividends(address(_toExclude));\\r\\n        }\\r\\n      }\\r\\n\\r\\n\\tfunction updateSwapAmount(uint256 amount) public onlyOwner {\\r\\n\\t    contractTokenBalanceAmount = amount * (10**18);\\r\\n\\t    swapTokensAtAmount = amount * (10**18);\\r\\n\\t}\\r\\n\\r\\n    function updatedividendTracker(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(dividendTracker), \\\"EverApe The dividend tracker already has that address\\\");\\r\\n\\r\\n        DividendTracker newdividendTracker = DividendTracker(payable(newAddress));\\r\\n\\r\\n        require(newdividendTracker.owner() == address(this), \\\"EverApe: The new dividend tracker must be owned by the EverApe token contract\\\");\\r\\n\\r\\n        newdividendTracker.excludeFromDividends(address(newdividendTracker));\\r\\n        newdividendTracker.excludeFromDividends(address(this));\\r\\n        newdividendTracker.excludeFromDividends(address(uniswapV2Router));\\r\\n\\r\\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\\r\\n\\r\\n        dividendTracker = newdividendTracker;\\r\\n    }\\r\\n\\r\\n    function updateDividendToken(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(DividendsToken), \\\"EverApe: The router already has that address\\\");\\r\\n        emit UpdateDividendsToken(newAddress, address(DividendsToken));\\r\\n        DividendsToken = address(newAddress);\\r\\n        dividendTracker.updateDividendToken(newAddress);\\r\\n    }\\r\\n    \\r\\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(uniswapV2Router), \\\"EverApe: The router already has that address\\\");\\r\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        require(_isExcludedFromFees[account] != excluded, \\\"EverApe: Account is already the value of 'excluded'\\\");\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"EverApe: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(automatedMarketMakerPairs[pair] != value, \\\"EverApe: Automated market maker pair is already set to that value\\\");\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        if(value) {\\r\\n            dividendTracker.excludeFromDividends(pair);\\r\\n        }\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n    \\r\\n    address private _liquidityTokenAddress;\\r\\n    //Sets up the LP-Token Address required for LP Release\\r\\n    function SetupLiquidityTokenAddress(address liquidityTokenAddress) public onlyOwner{\\r\\n        _liquidityTokenAddress=liquidityTokenAddress;\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultTime;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Liquidity Lock////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //the timestamp when Liquidity unlocks\\r\\n     uint256 private _liquidityUnlockTime;\\r\\n\\r\\n    //Sets Liquidity Release to 20% at a time and prolongs liquidity Lock for a Week after Release.\\r\\n    //Should be called once start was successful.\\r\\n    bool public liquidityRelease20Percent;\\r\\n    function TeamlimitLiquidityReleaseTo20Percent() public onlyOwner{\\r\\n        liquidityRelease20Percent=true;\\r\\n    }\\r\\n\\r\\n    function TeamUnlockLiquidityInSeconds(uint256 secondsUntilUnlock) public onlyOwner{\\r\\n        _prolongLiquidityLock(secondsUntilUnlock+block.timestamp);\\r\\n    }\\r\\n    function _prolongLiquidityLock(uint256 newUnlockTime) private{\\r\\n        // require new unlock time to be longer than old one\\r\\n        require(newUnlockTime>_liquidityUnlockTime);\\r\\n        _liquidityUnlockTime=newUnlockTime;\\r\\n    }\\r\\n\\r\\n    //Release Liquidity Tokens once unlock time is over\\r\\n    function TeamReleaseLiquidity() public {\\r\\n        require(msg.sender == address(deployer), \\\"Only the deployer can trigger this function\\\");\\r\\n\\r\\n\\r\\n        //Only callable if liquidity Unlock time is over\\r\\n        require(block.timestamp >= _liquidityUnlockTime, \\\"Not yet unlocked\\\");\\r\\n\\r\\n        IERC20 liquidityToken = IERC20(_liquidityTokenAddress);\\r\\n        uint256 amount = liquidityToken.balanceOf(address(this));\\r\\n        if(liquidityRelease20Percent)\\r\\n        {\\r\\n            _liquidityUnlockTime=block.timestamp+DefaultTime;\\r\\n            //regular liquidity release, only releases 20% at a time and locks liquidity for another week\\r\\n            amount=amount*2/10;\\r\\n            liquidityToken.transfer(liquidityWallet, amount);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            //Liquidity release if something goes wrong at start\\r\\n            //liquidityRelease20Percent should be called once everything is clear\\r\\n            liquidityToken.transfer(liquidityWallet, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateLiquidityWallet(address newLiquidityWallet) public onlyOwner {\\r\\n        require(newLiquidityWallet != liquidityWallet, \\\"EverApe: The liquidity wallet is already this address\\\");\\r\\n        excludeFromFees(newLiquidityWallet, true);\\r\\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\\r\\n        liquidityWallet = newLiquidityWallet;\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address newMarketingWallet) public onlyOwner {\\r\\n        require(newMarketingWallet != marketingWallet, \\\"EverApe: The marketing wallet is already this address\\\");\\r\\n        excludeFromFees(newMarketingWallet, true);\\r\\n        emit MarketingWalletUpdated(newMarketingWallet, marketingWallet);\\r\\n        marketingWallet = newMarketingWallet;\\r\\n    }\\r\\n\\r\\n    function getLiquidityReleaseTimeInSeconds() public view returns (uint256){\\r\\n        if(block.timestamp<_liquidityUnlockTime){\\r\\n            return _liquidityUnlockTime-block.timestamp;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\\r\\n        require(newValue >= 200000 && newValue <= 500000, \\\"EverApe: gasForProcessing must be between 200,000 and 500,000\\\");\\r\\n        require(newValue != gasForProcessing, \\\"EverApe: Cannot update gasForProcessing to same value\\\");\\r\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\r\\n        gasForProcessing = newValue;\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\\r\\n        dividendTracker.updateClaimWait(claimWait);\\r\\n    }\\r\\n    \\r\\n    function updateMinimumTokenRequirement(uint256 minimumTokenBalanceForDividends) external onlyOwner {\\r\\n        dividendTracker.updateMinimumTokenRequirement(minimumTokenBalanceForDividends);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n\\tfunction processDividendTracker(uint256 gas) external {\\r\\n\\t\\t(uint256 iterationsFirst, uint256 claimsFirst, uint256 lastProcessedIndexFirst) = dividendTracker.process(gas);\\r\\n\\t\\temit ProcessedDividendTracker(iterationsFirst, claimsFirst, lastProcessedIndexFirst, false, gas, tx.origin);\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns(uint256) {\\r\\n    \\treturn (dividendTracker.getLastProcessedIndex());\\r\\n    }\\r\\n\\r\\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\\r\\n        return (dividendTracker.getNumberOfTokenHolders());\\r\\n    }\\r\\n\\t\\r\\n\\tfunction tradingEnabled(bool _enabled) public onlyOwner {\\r\\n        trading = _enabled;\\r\\n        \\r\\n        emit tradingUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(msg.sender, amount * 10 ** decimals());\\r\\n    }\\r\\n\\r\\n    function updateIsElon(address account, bool elon) public onlyOwner {\\r\\n        require(_isElon[account] != elon, \\\"MetaBET: Account is already the value of 'elon'\\\");\\r\\n        _isElon[account] = elon;\\r\\n\\r\\n        emit isElon(account, elon);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && to != uniswapV2Pair && !_isExcludedFromFees[to] && !_isExcludedFromFees[from]) \\r\\n        {\\r\\n            require(trading == true);\\r\\n            require(amount <= _maxBuy, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n            uint256 contractBalanceRecepient = balanceOf(to);\\r\\n            require(contractBalanceRecepient + amount <= _maxWallet, \\\"Exceeds maximum wallet token amount.\\\");\\r\\n\\r\\n            if(starting && !_isElon[to] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] && !dividendTracker.excludedFromDividends(to)) {\\r\\n                _isElon[to] = true;\\r\\n                dividendTracker.excludeFromDividends(to);\\r\\n                }\\r\\n        }\\r\\n            \\r\\n        if(amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if(!swapping && automatedMarketMakerPairs[to] && from != address(uniswapV2Router) && from != owner() && to != owner() && !_isExcludedFromFees[to] && !_isExcludedFromFees[from])\\r\\n        {\\r\\n            require(trading == true);\\r\\n\\r\\n            require(amount <= _maxSell, \\\"Sell transfer amount exceeds the maxSellTransactionAmount.\\\");\\r\\n        }\\r\\n\\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\t\\t\\r\\n\\t\\tif(canSwap && !swapping && !automatedMarketMakerPairs[from] && from != liquidityWallet && to != liquidityWallet && from != marketingWallet && to != marketingWallet && !_isExcludedFromFees[to] && !_isExcludedFromFees[from]) {\\r\\n\\t\\t    \\r\\n\\t\\t    contractTokenBalance = contractTokenBalanceAmount;\\r\\n\\r\\n\\t\\t    uint256 swapTokens;\\r\\n\\t\\t\\tuint256 swapAmount = totalSellFees;\\r\\n\\t\\t\\tuint256 liquidityAmount = contractTokenBalance.mul(_sellLiquidityFee).div(swapAmount);\\r\\n            uint256 burnAmount = contractTokenBalance.mul(_sellBurnFee).div(swapAmount);\\r\\n\\t\\t\\tuint256 half = liquidityAmount.div(2);\\r\\n\\t\\t\\tuint256 otherHalf = liquidityAmount.sub(half);\\r\\n            \\r\\n            swapping = true;\\r\\n\\r\\n            if (swapAmount > 0) {\\r\\n            swapTokens = contractTokenBalance.sub(half).sub(burnAmount);\\r\\n            swapTokensForEth(swapTokens);\\r\\n            }\\r\\n            \\r\\n            if (_sellMarketingFee > 0) {\\r\\n\\r\\n            uint256 marketingAmount = address(this).balance.mul(_sellMarketingFee).div(swapAmount);\\r\\n            (bool success, ) = marketingWallet.call{value: marketingAmount}(\\\"\\\");\\r\\n            require(success, \\\"Failed to send marketing amount\\\");\\r\\n            }\\r\\n\\r\\n            if (_sellDevFee > 0) {\\r\\n\\r\\n            uint256 developmentAmount = address(this).balance.mul(_sellDevFee).div(swapAmount);\\r\\n            developmentAmount = developmentAmount.div(2);\\r\\n\\r\\n            (bool success, ) = developmentWallet1.call{value: developmentAmount}(\\\"\\\");\\r\\n            require(success, \\\"Failed to send development amount\\\");\\r\\n            (success, ) = developmentWallet2.call{value: developmentAmount}(\\\"\\\");\\r\\n            require(success, \\\"Failed to send development amount\\\");\\r\\n            }\\r\\n\\r\\n            if (_sellBurnFee > 0) {\\r\\n                _burn(address(this), burnAmount);\\r\\n                contractTokenBalanceAmount = totalSupply().mul(25).div(10000);\\r\\n                swapTokensAtAmount = totalSupply().mul(25).div(10000);\\r\\n            }\\r\\n\\r\\n\\t\\t\\tif (_sellLiquidityFee > 0) {\\r\\n\\t\\t\\t    \\r\\n\\t\\t    uint256 newBalance = address(this).balance.mul(_sellLiquidityFee).div(swapAmount);\\r\\n\\t\\t\\t\\r\\n            // add liquidity to uniswap\\r\\n             addLiquidity(half, newBalance);\\r\\n\\r\\n             emit SwapAndLiquify(otherHalf, newBalance, half);\\r\\n            }\\t\\t\\t\\r\\n\\r\\n            if (_sellRewardsFee > 0) {\\r\\n                \\r\\n            uint256 sellTokens = address(this).balance.mul(_sellRewardsFee).div(swapAmount);\\r\\n            swapAndSendDividends(sellTokens, DividendsToken, address(dividendTracker));\\r\\n            }\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = !swapping;\\r\\n\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n            super._transfer(from, to, amount);\\r\\n        }\\r\\n\\r\\n        // No fee on Wallet to Wallet transfer\\r\\n        else if(!automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] && !_isElon[from] && !_isElon[to]) {\\r\\n        takeFee = false;\\r\\n        super._transfer(from, to, amount);\\r\\n        }\\r\\n\\r\\n        if(takeFee) {\\r\\n            uint256 BuyFees = amount.mul(totalBuyFees).div(100);\\r\\n            uint256 SellFees = amount.mul(totalSellFees).div(100);\\r\\n            uint256 ElonRent = amount.mul(_elonRent).div(100);\\r\\n\\r\\n            if(_isElon[to] && automatedMarketMakerPairs[from]) {\\r\\n                amount = amount.sub(ElonRent);\\r\\n                super._transfer(from, address(this), ElonRent);\\r\\n                super._transfer(from, to, amount);\\r\\n            }\\r\\n\\r\\n            // if sell\\r\\n            else if(automatedMarketMakerPairs[to] && totalSellFees > 0) {\\r\\n                amount = amount.sub(SellFees);\\r\\n                super._transfer(from, address(this), SellFees);\\r\\n                super._transfer(from, to, amount);\\r\\n            }\\r\\n\\r\\n            // if buy or wallet to wallet transfer\\r\\n            else if(automatedMarketMakerPairs[from] && totalBuyFees > 0) {\\r\\n                amount = amount.sub(BuyFees);\\r\\n                super._transfer(from, address(this), BuyFees);\\r\\n                super._transfer(from, to, amount);\\r\\n                \\r\\n                if(starting && !_isElon[to] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] && !dividendTracker.excludedFromDividends(to)) {\\r\\n                _isElon[to] = true;\\r\\n                dividendTracker.excludeFromDividends(to);\\r\\n                }\\r\\n                }\\r\\n        }\\r\\n\\r\\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\\r\\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\r\\n\\r\\n        if(!swapping) {\\r\\n            uint256 gas = gasForProcessing;\\r\\n\\r\\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\r\\n            }\\r\\n            catch {}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapETHForRewards(address recipient, address rewardToken, uint256 amount) private {\\r\\n\\r\\n        // generate the uniswap pair path of weth -> Rewards\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = rewardToken;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), address(this).balance);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount} (\\r\\n            0,\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp.add(300)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n       uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapAndSendDividends(uint256 tokens, address rewardToken, address DividendTrackerAddress) private {\\r\\n        swapETHForRewards(address(DividendTrackerAddress), address(rewardToken), tokens);\\r\\n        uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\\r\\n        bool success = IERC20(rewardToken).transfer(address(DividendTrackerAddress), dividends);\\r\\n\\r\\n        if (success) {\\r\\n            emit SendDividends(tokens, dividends);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLP() external onlyOwner() {\\r\\n        updateBuyFees(0,0,0,0,0);\\r\\n        updateSellFees(0,0,0,0,0);\\r\\n\\r\\n\\t\\ttrading = false;\\r\\n\\r\\n        updateMaxWallet(1000000000000000);\\r\\n        updateMaxBuySell((1000000000000000), (1000000000000000));\\r\\n    }\\r\\n    \\r\\n\\tfunction letsGetStarted() external onlyOwner() {\\r\\n        updateBuyFees(1,1,1,1,1);\\r\\n        updateSellFees(1,1,1,1,1);\\r\\n\\r\\n        updateMaxWallet(20000000000000);\\r\\n        updateMaxBuySell(20000000000000, 10000000000000);\\r\\n\\r\\n\\t\\ttrading = true;\\r\\n        starting = false;\\r\\n    }\\r\\n\\r\\n    function letsGoLive() external onlyOwner() {\\r\\n        updateBuyFees(20,20,20,20,19);\\r\\n        updateSellFees(1,1,1,1,1);\\r\\n\\r\\n        updateMaxWallet(20000000000000);\\r\\n        updateMaxBuySell(20000000000000, 10000000000000);\\r\\n\\r\\n\\t\\ttrading = true;\\r\\n        starting = true;\\r\\n    }\\r\\n    \\r\\n    function updateBuyFees(uint8 newBuyLiquidityFee, uint8 newBuyMarketingFee, uint8 newBuyRewardsFee, uint8 newBuyBackFee, uint8 newBuyDevFee) public onlyOwner {\\r\\n        _buyLiquidityFee = newBuyLiquidityFee;\\r\\n        _buyMarketingFee = newBuyMarketingFee;\\r\\n        _buyRewardsFee = newBuyRewardsFee;\\r\\n        _buyBurnFee = newBuyBackFee;\\r\\n        _buyDevFee = newBuyDevFee;\\r\\n        \\r\\n        totalFees();\\r\\n    }\\r\\n\\r\\n    function updateSellFees(uint8 newSellLiquidityFee, uint8 newSellMarketingFee, uint8 newSellRewardsFee, uint newSellBackFee, uint8 newSellDevFee) public onlyOwner {\\r\\n        _sellLiquidityFee = newSellLiquidityFee;\\r\\n        _sellMarketingFee = newSellMarketingFee;\\r\\n        _sellRewardsFee = newSellRewardsFee;\\r\\n        _sellBurnFee = newSellBackFee;\\r\\n        _sellDevFee = newSellDevFee;\\r\\n        \\r\\n        totalFees();\\r\\n    }\\r\\n\\r\\n    function updateMaxWallet(uint256 newMaxWallet) public onlyOwner {\\r\\n        _maxWallet = newMaxWallet * (10**18);\\r\\n    }\\r\\n\\r\\n    function updateMaxBuySell(uint256 newMaxBuy, uint256 newMaxSell) public onlyOwner {\\r\\n        _maxBuy = newMaxBuy * (10**18);\\r\\n        _maxSell = newMaxSell * (10**18);\\r\\n    }\\r\\n\\r\\n    function totalFees() private {\\r\\n        totalBuyFees = _buyRewardsFee.add(_buyLiquidityFee).add(_buyMarketingFee).add(_buyBurnFee).add(_buyDevFee);\\r\\n        totalSellFees = _sellRewardsFee.add(_sellLiquidityFee).add(_sellMarketingFee).add(_sellBurnFee).add(_sellDevFee);\\r\\n    }\\r\\n\\r\\n    function withdrawRemainingETH(address account, uint256 percent) public onlyOwner {\\r\\n        require(percent > 0 && percent <= 100);\\r\\n        uint256 percentage = percent.div(100);\\r\\n        uint256 balance = address(this).balance.mul(percentage);\\r\\n        super._transfer(address(this), account, balance);\\r\\n    }\\r\\n\\r\\n    function withdrawRemainingToken(address account) public onlyOwner {\\r\\n        uint256 balance = balanceOf(address(this));\\r\\n        super._transfer(address(this), account, balance);\\r\\n    }\\r\\n\\r\\n    function withdrawRemainingBEP20Token(address bep20, address account) public onlyOwner {\\r\\n        ERC20 BEP20 = ERC20(bep20);\\r\\n        uint256 balance = BEP20.balanceOf(address(this));\\r\\n        BEP20.transfer(account, balance);\\r\\n    }\\r\\n\\r\\n    function burnRemainingToken() public onlyOwner {\\r\\n        uint256 balance = balanceOf(address(this));\\r\\n        _burn(address(this), balance);\\r\\n    }\\r\\n\\r\\n    function holderAirdrop(address[] calldata accounts, uint256[] calldata balances) external onlyOwner {\\r\\n        require(accounts.length < 501, \\\"GAS Error, Max airdrop limit is 500 addresses\\\");\\r\\n        require(accounts.length == balances.length, \\\"Both arrays must be the same size\\\");\\r\\n\\r\\n        for(uint i = 0; i < accounts.length;) {\\r\\n            super._transfer(msg.sender, accounts[i], balances[i]);\\r\\n            i++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DividendTracker is Ownable, DividendPayingToken {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n\\r\\n    uint256 public lastProcessedIndex;\\r\\n\\r\\n    mapping (address => bool) public excludedFromDividends;\\r\\n    mapping (address => bool) private isAuth;\\r\\n\\r\\n    mapping (address => uint256) public lastClaimTimes;\\r\\n    mapping (address => uint256) public dividendHolderIndex;\\r\\n    mapping(address => uint256) internal dividendHolderAmounts;\\r\\n    address[] public dividendHolder;\\r\\n\\r\\n    uint256 public claimWait;\\r\\n    uint256 public minimumTokenBalanceForDividends;\\r\\n\\r\\n    address private DividendToken = address(0x4d224452801ACEd8B2F0aebE155379bb5D594381);\\r\\n\\r\\n    event ExcludeFromDividends(address indexed account);\\r\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n    event MinimumTokenRequirementUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\r\\n\\r\\n    constructor() DividendPayingToken(\\\"Dividend_Tracker\\\", \\\"Dividend_Tracker\\\", DividendToken) {\\r\\n    \\tclaimWait = 0;\\r\\n        minimumTokenBalanceForDividends = 1 * (10**18);\\r\\n        isAuth[owner()] = true;\\r\\n        isAuth[address(this)] = true;\\r\\n    }\\r\\n\\r\\n    function addToAuth(address newAuth) public {\\r\\n        require(isAuth[msg.sender]);\\r\\n        require(isAuth[newAuth] != true);\\r\\n\\r\\n        isAuth[newAuth] = true;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        require(isAuth[msg.sender], \\\"You do not have permission to transfer\\\");\\r\\n\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawDividend() public pure override {\\r\\n        require(false, \\\"Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main First contract.\\\");\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account) external onlyOwner {\\r\\n    \\tif(excludedFromDividends[account]) {return;}\\r\\n        _setBalance(payable(account), 0);\\r\\n    \\texcludedFromDividends[account] = true;\\r\\n\\r\\n    \\temit ExcludeFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\r\\n        require(newClaimWait >= 0 && newClaimWait <= 86400, \\\"Dividend_Tracker: claimWait must not exceed 24 hours\\\");\\r\\n        require(newClaimWait != claimWait, \\\"Dividend_Tracker: Cannot update claimWait to same value\\\");\\r\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\r\\n        claimWait = newClaimWait;\\r\\n    }\\r\\n\\r\\n    function updateMinimumTokenRequirement(uint256 newMinimumTokenBalanceForDividends) external onlyOwner {\\r\\n        emit MinimumTokenRequirementUpdated(newMinimumTokenBalanceForDividends, minimumTokenBalanceForDividends);\\r\\n        minimumTokenBalanceForDividends = newMinimumTokenBalanceForDividends;\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns(uint256) {\\r\\n    \\treturn lastProcessedIndex;\\r\\n    }\\r\\n\\r\\n    function IsExcludedFromDividends(address from) external view returns(bool) {\\r\\n        return excludedFromDividends[from];\\r\\n    }\\r\\n\\r\\n    function getNumberOfTokenHolders() external view returns(uint256) {\\r\\n        return dividendHolder.length;\\r\\n    }\\r\\n\\r\\n    function getAccount(address _account)\\r\\n        public view returns (\\r\\n            address account,\\r\\n            uint256 index,\\r\\n            int256 iterationsUntilProcessed,\\r\\n            uint256 withdrawableDividends,\\r\\n            uint256 totalDividends,\\r\\n            uint256 lastClaimTime,\\r\\n            uint256 nextClaimTime,\\r\\n            uint256 secondsUntilAutoClaimAvailable) {\\r\\n        account = _account;\\r\\n\\r\\n        index = dividendHolderIndex[_account];\\r\\n\\r\\n        iterationsUntilProcessed = -1;\\r\\n\\r\\n        if(index >= 0) {\\r\\n            if(uint256(index) > lastProcessedIndex) {\\r\\n                iterationsUntilProcessed = int256(index).sub(int256(lastProcessedIndex));\\r\\n            }\\r\\n            else {\\r\\n                uint256 processesUntilEndOfArray = dividendHolder.length > lastProcessedIndex ?\\r\\n                                                        dividendHolder.length.sub(lastProcessedIndex) :\\r\\n                                                        0;\\r\\n\\r\\n\\r\\n                iterationsUntilProcessed = int256(index).add(int256(processesUntilEndOfArray));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        withdrawableDividends = withdrawableDividendOf(account);\\r\\n        totalDividends = accumulativeDividendOf(account);\\r\\n\\r\\n        lastClaimTime = lastClaimTimes[account];\\r\\n\\r\\n        nextClaimTime = lastClaimTime > 0 ?\\r\\n                                    lastClaimTime.add(claimWait) :\\r\\n                                    0;\\r\\n\\r\\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\\r\\n                                                    nextClaimTime.sub(block.timestamp) :\\r\\n                                                    0;\\r\\n    }\\r\\n\\r\\n    function getAccountAtIndex(uint256 index)\\r\\n        public view returns (\\r\\n            address,\\r\\n            uint256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n    \\tif(index >= dividendHolder.length) {\\r\\n            return (0x0000000000000000000000000000000000000000, 0, 0, 0, 0, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        address account = dividendHolder[index];\\r\\n\\r\\n        return getAccount(account);\\r\\n    }\\r\\n\\r\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\r\\n    \\tif(lastClaimTime > block.timestamp)  {\\r\\n    \\t\\treturn false;\\r\\n    \\t}\\r\\n\\r\\n    \\treturn block.timestamp.sub(lastClaimTime) >= claimWait;\\r\\n    }\\r\\n\\r\\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\\r\\n    \\tif(excludedFromDividends[account] && dividendHolderAmounts[account] > 0) {\\r\\n            dividendHolderAmounts[account] = _setBalance(account, 0);\\r\\n            dividendHolder[dividendHolderIndex[account]] = dividendHolder[dividendHolder.length.sub(1)];\\r\\n            dividendHolderIndex[dividendHolder[dividendHolder.length.sub(1)]] = dividendHolderIndex[account];\\r\\n    \\t}\\r\\n\\r\\n        else if(excludedFromDividends[account] && dividendHolderAmounts[account] == 0) {\\r\\n            return;\\r\\n    \\t}\\r\\n\\r\\n        else if(dividendHolderAmounts[account] == 0 && newBalance >= minimumTokenBalanceForDividends) {\\r\\n            dividendHolderAmounts[account] = _setBalance(account, newBalance);\\r\\n            dividendHolderIndex[account] = dividendHolder.length;\\r\\n            dividendHolder.push(account);\\r\\n        }\\r\\n\\r\\n    \\telse if(newBalance >= minimumTokenBalanceForDividends) {\\r\\n            dividendHolderAmounts[account] = _setBalance(account, newBalance);\\r\\n    \\t}\\r\\n    \\telse {\\r\\n            dividendHolderAmounts[account] = _setBalance(account, 0);\\r\\n            dividendHolder[dividendHolderIndex[account]] = dividendHolder[dividendHolder.length - 1];\\r\\n            dividendHolderIndex[dividendHolder[dividendHolder.length - 1]] = dividendHolderIndex[account];\\r\\n            dividendHolder.pop();\\r\\n    \\t}\\r\\n\\r\\n    \\tprocessAccount(account, true);\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\\r\\n    \\tuint256 _lastProcessedIndex = lastProcessedIndex;\\r\\n    \\tuint256 claims = 0;\\r\\n        uint256 numberOfTokenHolders = dividendHolder.length;\\r\\n        uint256 iterations = 0;\\r\\n\\r\\n        if(numberOfTokenHolders == 0) {\\r\\n            return(iterations, claims, lastProcessedIndex);\\r\\n        }\\r\\n\\r\\n        uint256 dividendAmount = ERC20(dividendToken).balanceOf(address(this));\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 amount = distributeDividends(msg.sender, dividendAmount);\\r\\n        lastClaimTimes[msg.sender] = block.timestamp;\\r\\n        emit Claim(msg.sender, amount, true);\\r\\n    \\tuint256 gasLeft = gasleft();\\r\\n\\r\\n    \\twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\\r\\n    \\t\\t_lastProcessedIndex++;\\r\\n\\r\\n    \\t\\tif(_lastProcessedIndex >= dividendHolder.length) {\\r\\n    \\t\\t\\t_lastProcessedIndex = 0;\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\taddress account = dividendHolder[_lastProcessedIndex];\\r\\n\\r\\n    \\t\\tif(canAutoClaim(lastClaimTimes[account])) {\\r\\n                if(processAccount(payable(account), true)) {\\r\\n                    claims++;\\r\\n                }\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\titerations++;\\r\\n\\r\\n    \\t\\tuint256 newGasLeft = gasleft();\\r\\n\\r\\n    \\t\\tif(gasLeft > newGasLeft) {\\r\\n    \\t\\t\\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\tgasLeft = newGasLeft;\\r\\n    \\t}\\r\\n\\r\\n    \\tlastProcessedIndex = _lastProcessedIndex;\\r\\n\\r\\n    \\treturn (iterations, claims, lastProcessedIndex);\\r\\n    }\\r\\n\\r\\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\r\\n        uint256 amount = _withdrawDividendOfUser(account);\\r\\n\\r\\n    \\tif(amount > 0) {\\r\\n    \\t\\tlastClaimTimes[account] = block.timestamp;\\r\\n            emit Claim(account, amount, automatic);\\r\\n    \\t\\treturn true;\\r\\n    \\t}\\r\\n\\r\\n    \\treturn false;\\r\\n    }\\r\\n\\r\\n    function withdrawRemainingBEP20Token(address bep20, address account) public onlyOwner {\\r\\n        require(isAuth[msg.sender]);\\r\\n        ERC20 BEP20 = ERC20(bep20);\\r\\n        uint256 balance = BEP20.balanceOf(address(this));\\r\\n        BEP20.transfer(account, balance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"Rewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendsToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"burningUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"isElon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"tradingUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DividendsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"SetupLiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamReleaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"TeamUnlockLiquidityInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamlimitLiquidityReleaseTo20Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isElon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTokenBalanceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toExclude\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"holderAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"letsGetStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"letsGoLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRelease20Percent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"tradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newBuyRewardsFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newBuyBackFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newBuyDevFee\",\"type\":\"uint8\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"elon\",\"type\":\"bool\"}],\"name\":\"updateIsElon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForDividends\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellRewardsFee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newSellBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newSellDevFee\",\"type\":\"uint8\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatedividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bep20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawRemainingBEP20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"withdrawRemainingETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverApe", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}