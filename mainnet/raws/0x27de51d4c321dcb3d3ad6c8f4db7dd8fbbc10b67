{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: Interfaces/IMyobuDistributor.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMyobuDistributor {\r\n    struct DistributeTo {\r\n        address addr;\r\n        uint256 percentage;\r\n    }\r\n    event DistributeToChanged(DistributeTo[] _distributeTo);\r\n\r\n    function distributeTo(uint256 index)\r\n        external\r\n        view\r\n        returns (DistributeTo memory);\r\n\r\n    function distributeToCount() external view returns (uint256);\r\n\r\n    event Distributed(uint256 amount, address sender);\r\n\r\n    function distribute() external;\r\n}\r\n// File: Utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Utils/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: MyobuDistributor.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract MyobuDistributor is IMyobuDistributor, Ownable {\r\n    mapping(address => bool) public isCallData;\r\n    mapping(uint256 => DistributeTo) private distributeTo_;\r\n    \r\n    function distributeTo(uint256 index)\r\n        external\r\n        view\r\n        override\r\n        returns (DistributeTo memory)\r\n    {\r\n        return distributeTo_[index];\r\n    }\r\n\r\n    uint256 public override distributeToCount;\r\n\r\n    function addArrayToMapping(DistributeTo[] memory array) private {\r\n        distributeToCount = array.length;\r\n        for (uint256 i; i < array.length; i++) {\r\n            distributeTo_[i] = array[i];\r\n        }\r\n    }\r\n\r\n    function setDistributeTo(DistributeTo[] calldata toDistributeTo)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (distributeToCount != 0) distribute();\r\n        uint256 totalPercentage;\r\n        for (uint256 i; i < toDistributeTo.length; i++) {\r\n            totalPercentage += toDistributeTo[i].percentage;\r\n        }\r\n        require(totalPercentage == 100, \"Total percentage must equal to 100\");\r\n\r\n        addArrayToMapping(toDistributeTo);\r\n        emit DistributeToChanged(toDistributeTo);\r\n    }\r\n\r\n    function setisCallData(address _address, bool onoff) external onlyOwner {\r\n        isCallData[_address] = onoff;\r\n    }\r\n\r\n    function distribute() public override {\r\n        require(distributeToCount != 0, \"Must have distribution set\");\r\n        if (address(this).balance == 0) return;\r\n        uint256 totalBalance = address(this).balance;\r\n\r\n        for (uint256 i; i < distributeToCount; i++) {\r\n            address to = distributeTo_[i].addr;\r\n            uint256 amount = totalBalance * distributeTo_[i].percentage / 100;\r\n            if (isCallData[to]) {\r\n            // Calls with non empty calldata to trigger fallback()\r\n                payable(to).call{value: amount} (\"a\"); \r\n            }\r\n            else {\r\n                payable(to).call{value: amount} (\"\");\r\n            }\r\n        }\r\n        emit Distributed(totalBalance, _msgSender());\r\n    }\r\n\r\n    // solhint-disable-next-line\r\n    receive() external payable {}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMyobuDistributor.DistributeTo[]\",\"name\":\"_distributeTo\",\"type\":\"tuple[]\"}],\"name\":\"DistributeToChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"distributeTo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IMyobuDistributor.DistributeTo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeToCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCallData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IMyobuDistributor.DistributeTo[]\",\"name\":\"toDistributeTo\",\"type\":\"tuple[]\"}],\"name\":\"setDistributeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setisCallData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MyobuDistributor", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9dd6834be45840f8c8fb136bb60556d5e6bd73a05c6eb363df806ac57832ba8"}]}