{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/metadata-provider.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\r\\nimport \\\"./interfaces/IENSToken.sol\\\";\\r\\nimport \\\"./interfaces/IManager.sol\\\";\\r\\nimport \\\"./interfaces/IMetadata.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ncontract MetadataProviderV1 is IMetadata {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    IManager public Manager;\\r\\n    ENS private ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e); \\r\\n    IENSToken public ensToken = IENSToken(0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85);\\r\\n    string public DefaultImage = 'ipfs://QmYWSU93qnqDvAwHGEpJbEEghGa7w7RbsYo9mYYroQnr1D'; //QmaTFCsJ9jsPEQq9zgJt9F38TJ5Ys3KwVML3mN1sZLZbxE\\r\\n\\r\\n    constructor(IManager _manager){\\r\\n        Manager = _manager;\\r\\n    }\\r\\n\\r\\n   function tokenURI(uint256 tokenId) public view returns(string memory){\\r\\n        \\r\\n        string memory label = Manager.IdToLabelMap(tokenId);\\r\\n\\r\\n        uint256 ownerId = Manager.IdToOwnerId(tokenId);\\r\\n        string memory parentName = Manager.IdToDomain(ownerId);\\r\\n        string memory ensName = string(abi.encodePacked(label, \\\".\\\", parentName, \\\".eth\\\"));\\r\\n        string memory locked = (ensToken.ownerOf(ownerId) == address(Manager)) && (Manager.TokenLocked(ownerId)) ? \\\"True\\\" : \\\"False\\\";\\r\\n        string memory image = Manager.IdImageMap(ownerId);\\r\\n\\r\\n        bytes32 hashed = Manager.IdToHashMap(tokenId);\\r\\n        string memory avatar = Manager.text(hashed, \\\"avatar\\\");\\r\\n        address resolver = ens.resolver(hashed);\\r\\n        string memory active = resolver == address(Manager) ? \\\"True\\\" : \\\"False\\\";\\r\\n\\r\\n        uint256 expiry = ensToken.nameExpires(ownerId);\\r\\n        \\r\\n        return string(  \\r\\n            abi.encodePacked(\\r\\n                'data:application/json;utf8,{\\\"name\\\": \\\"'\\r\\n                , ensName\\r\\n                , '\\\",\\\"description\\\": \\\"Transferable '\\r\\n                , parentName\\r\\n                , '.eth sub-domain\\\",\\\"image\\\":\\\"'\\r\\n                , bytes(avatar).length == 0 ? \\r\\n                    (bytes(image).length == 0 ? DefaultImage : image)\\r\\n                    : avatar\\r\\n                , '\\\",\\\"attributes\\\":[{\\\"trait_type\\\" : \\\"parent name\\\", \\\"value\\\" : \\\"'\\r\\n                , parentName\\r\\n                , '.eth\\\"},{\\\"trait_type\\\" : \\\"parent locked\\\", \\\"value\\\" : \\\"'\\r\\n                , locked\\r\\n                , '\\\"},{\\\"trait_type\\\" : \\\"active\\\", \\\"value\\\" : \\\"'\\r\\n                , active\\r\\n                , '\\\" },{\\\"trait_type\\\" : \\\"parent expiry\\\", \\\"display_type\\\": \\\"date\\\",\\\"value\\\": ', expiry.toString(), '}]}'\\r\\n                        )\\r\\n                            );               \\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"@ensdomains/ens-contracts/contracts/registry/ENS.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IENSToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n\\r\\ninterface IENSToken {\\r\\n    function nameExpires(uint256 id) external view returns(uint256);\\r\\n    function reclaim(uint256 id, address addr) external;\\r\\n    function setResolver(address _resolverAddress) external;\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IManager {\\r\\n\\r\\nfunction IdToLabelMap( uint256 _tokenId) external view returns (string memory label);\\r\\nfunction IdToOwnerId( uint256 _tokenId) external view returns (uint256 ownerId);\\r\\nfunction IdToDomain( uint256 _tokenId) external view returns (string memory domain);\\r\\nfunction TokenLocked( uint256 _tokenId) external view returns (bool locked);\\r\\nfunction IdImageMap( uint256 _tokenId) external view returns (string memory image);\\r\\nfunction IdToHashMap(uint256 _tokenId) external view returns (bytes32 _hash);\\r\\nfunction text(bytes32 node, string calldata key) external view returns (string memory _value);\\r\\nfunction DefaultMintPrice(uint256 _tokenId) external view returns (uint256 _priceInWei);\\r\\nfunction transferDomainOwnership(uint256 _id, address _newOwner) external;\\r\\nfunction TokenOwnerMap(uint256 _id) external view returns(address); \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMetadata {\\r\\n    function tokenURI(uint256 tokenId) external view returns(string memory);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DefaultImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensToken\",\"outputs\":[{\"internalType\":\"contract IENSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetadataProviderV1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000dcbf49bdb92b2aa84de4e428fd5b2c9c58412bc5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}