{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n//Use 0.8.3\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract UniswapContract {\r\n    function transfer(address recipient, uint256 amount) external returns (bool){}\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool){}\r\n}\r\n\r\n\r\ncontract LiquidityLock is Context {\r\n\r\n    address public liquidityOwner;\r\n\r\n    UniswapContract public immutable uniswapToken;\r\n\r\n    uint256 public timeAdded = 1642020492;\r\n    uint256 public beginUnlockingTime = 1657572492;\r\n    uint256 public fullyUnlockedTime = 1673577444;\r\n    uint256 public initiallyLockedTokens;\r\n    uint256 public multiplierForDateCheck;\r\n    uint256 public withdrawnTokens;\r\n\r\n    constructor (address tokenAddress) {\r\n        liquidityOwner = _msgSender();\r\n        uniswapToken = UniswapContract(tokenAddress);\r\n    }\r\n\r\n    function lockLiquidity(uint256 amountToLock) external onlyLProvider() {\r\n        initiallyLockedTokens = amountToLock;\r\n        uint256 tokensToSetMultiplier = amountToLock / 10**18;\r\n        multiplierForDateCheck = (fullyUnlockedTime - beginUnlockingTime) / tokensToSetMultiplier; \r\n        uniswapToken.transferFrom(_msgSender(), address(this), amountToLock);\r\n\r\n    }\r\n\r\n    function withdrawTokens(uint256 amountToWithdraw) external onlyLProvider() {\r\n        uint256 currentTime = block.timestamp;\r\n        require(currentTime >= beginUnlockingTime, \"Liquidity has not started unlocking yet\");\r\n\r\n        if(currentTime < fullyUnlockedTime) {\r\n            require(currentTime >= withdrawDate(amountToWithdraw), \"Withdrawing more liquidity than is unlocked\");\r\n        }\r\n\r\n        uniswapToken.transfer(liquidityOwner, amountToWithdraw);\r\n        withdrawnTokens += amountToWithdraw;\r\n\r\n    }\r\n\r\n    function withdrawDate(uint256 amountToWithdraw) public view returns (uint256){\r\n        uint256 tokensNoDecimals = (amountToWithdraw / 10**18) + (withdrawnTokens / 10**18);\r\n        return (tokensNoDecimals * multiplierForDateCheck) + beginUnlockingTime;\r\n    }\r\n\r\n    modifier onlyLProvider() {\r\n        require(_msgSender() == liquidityOwner, \"Caller is not the liquidity provider\");\r\n        _;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"beginUnlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullyUnlockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiallyLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToLock\",\"type\":\"uint256\"}],\"name\":\"lockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierForDateCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapToken\",\"outputs\":[{\"internalType\":\"contract UniswapContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidityLock", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000056606d52e8f4186c80cf94a6230986bacba8b6b5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c991e97abe7fd2207c5f4b3f734c84f5cbcc67d9f39b3f1407fc8d4189529931"}]}