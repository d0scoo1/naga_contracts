{"status": "1", "message": "OK", "result": [{"SourceCode": "// File contracts/library/SeedRand.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.1;\r\n\r\nlibrary SeedRand {\r\n  function rand(\r\n    uint256 _seed,\r\n    uint256 _index\r\n  ) internal pure returns (uint256 val) {\r\n    unchecked {\r\n      val = uint256(keccak256(abi.encodePacked(\r\n        _seed, _index\r\n      )));\r\n    }\r\n  }\r\n\r\n  function randUint256(\r\n    uint256 _seed,\r\n    uint256 _index,\r\n    uint256 n\r\n  ) internal pure returns (uint256) {\r\n    require(n > 0, \"SeedRand#randUint256: n must be positive\");\r\n    uint256 val;\r\n    uint256 div = type(uint256).max / n;\r\n\r\n    do {\r\n      val = rand(_seed, _index);\r\n    } while (val >= div * n);\r\n\r\n    return val % n;\r\n  }\r\n\r\n  function range(\r\n    uint256 _seed,\r\n    uint256 _index,\r\n    uint256 min,\r\n    uint256 max\r\n  ) internal pure returns (uint256) {\r\n    return min + randUint256(_seed, _index, max - min);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/interface/IShogunate.sol\r\n\r\ninterface IShogunate is IERC721, IERC721Metadata {\r\n  /**\r\n    * Method to return the soul of a Shogunate NFT. The soul contains all of the\r\n    * attributes of the Shogunate NFT.\r\n    * @param _tokenId - The ID of the token to return the soul of.\r\n   */\r\n  function soulOf(uint256 _tokenId) external view returns (bytes32);\r\n\r\n  /**\r\n    * Method to return the clan of a Shogunate NFT.\r\n    * @param _tokenId - The ID of the token to return the clan of.\r\n   */\r\n  function clanOf(uint256 _tokenId) external view returns (uint8);\r\n\r\n  /**\r\n    * Method to return the token ID of the shogun of a clan.\r\n    * @param _clanId - The ID of the clan to return the shogun of.\r\n   */\r\n  function shogunOf(uint8 _clanId) external view returns (uint256);\r\n\r\n  /**\r\n    * Method to check if a token is a shogun or not\r\n    * @param _tokenId = The ID of the token to test\r\n   */\r\n   function isShogun(uint256 _tokenId) external view returns (bool);\r\n\r\n   /**\r\n     * Method to check if tokenId exists\r\n    */\r\n    function exists(uint256 _tokenId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interface/IERC721Subscriber.sol\r\n\r\ninterface IERC721Subscriber {\r\n  /**\r\n    * Method called when a token is transferred\r\n    * @param from - The address the token is being transferred from\r\n    * @param to - The address the token is being transferrd to\r\n    * @param tokenId - The token ID being transferred\r\n   */\r\n  function onERC721Transferred(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/ERC721Transmitter.sol\r\n\r\nabstract contract ERC721Transmitter is ERC721 {\r\n  // Subscriber to transmit data to\r\n  IERC721Subscriber public subscriber;\r\n\r\n  // Contract-wide transmission toggle\r\n  bool public contractDataTransmissionPaused = false;\r\n\r\n  // Token specific transmission opt-out choices\r\n  mapping(uint256 => bool) public dataTransmissionPaused;\r\n\r\n  /**\r\n    * @dev Internal method to pause a token data transmission\r\n    * @param tokenId - The token ID to pause the data transmission of\r\n    * @param paused - True to pause, false to unpause\r\n   */\r\n  function _pauseTokenDataTransmission(uint256 tokenId, bool paused) internal {\r\n    dataTransmissionPaused[tokenId] = paused;\r\n  }\r\n\r\n  /**\r\n    * @dev Internal method to pause data transmission for the whole contract.\r\n    * @param paused - True to pause, false to unpause\r\n   */\r\n  function _pauseContractDataTransmission(bool paused) internal {\r\n    contractDataTransmissionPaused = paused;\r\n  }\r\n\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual override {\r\n    super._afterTokenTransfer(from, to, tokenId);\r\n\r\n    if (\r\n      !contractDataTransmissionPaused\r\n      && !dataTransmissionPaused[tokenId]\r\n      && address(subscriber) != address(0)\r\n    ) {\r\n      subscriber.onERC721Transferred(from, to, tokenId);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/AbstractShogunate.sol\r\n\r\nabstract contract AbstractShogunate is IShogunate,\r\n  ERC721, ERC721URIStorage, ERC721Transmitter, Ownable, ReentrancyGuard\r\n{\r\n  using ECDSA for bytes32;\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  // Max commits per transaction\r\n  uint256 constant public MAX_COMMIT_PER_TX = 10;\r\n  // Max reveals per transaction\r\n  uint256 constant public MAX_REVEAL_PER_TX = 10;\r\n\r\n  // Next ID to generate\r\n  uint256 public nextId = 1;\r\n  // Total Shogunate supply, including both Samurai and Shoguns\r\n  uint256 public totalSupply = 0;\r\n\r\n  // Mapping from tokenId to soul\r\n  mapping(uint256 => bytes32) souls;\r\n\r\n  // Mapping from clan to shogun tokenId\r\n  mapping(uint8 => uint256) internal shogunIds;\r\n\r\n  // Open time of the reveal phase\r\n  uint256 public revealOpen;\r\n  // Max supply\r\n  uint256 immutable public maxTokens;\r\n\r\n  /**\r\n    * Event emitted when a tokenId is comitted in exchange for a mint pass\r\n    * @param account - Account that comitted the token\r\n    * @param tokenId - The ID of the comitted token\r\n   */\r\n  event Commited(address indexed account, uint256 tokenId);\r\n\r\n  /**\r\n    * Event emitted when a tokenId is revealed.\r\n    * Can be called by anyone, but token always goes to the user who committed\r\n    * it.\r\n    * @param tokenId - The revealed token ID\r\n    * @param soul - The soul of the revealed token\r\n   */\r\n  event NewSoul(uint256 indexed tokenId, bytes32 soul);\r\n\r\n  // Address that can allow metadata migrations\r\n  address public migrator;\r\n\r\n  // Default base URI for all Samurai and Shoguns\r\n  string public defaultURI;\r\n\r\n  // keccak256 hash of the probability tables to use.\r\n  bytes32 public tablesHash;\r\n\r\n  /**\r\n    * Represents a commit.\r\n   */\r\n  struct RevealCommit {\r\n    // User that committed the token, and will receive it once revealed.\r\n    address receiver;\r\n    // Block number that the commit has been done at.\r\n    uint256 blockNumber;\r\n  }\r\n\r\n  // Mapping from tokenId to commit data\r\n  mapping(uint256 => RevealCommit) public revealCommits;\r\n  // Mapping from block number to block hash\r\n  mapping(uint256 => bytes32) public blockhashesStore;\r\n  // Last block that a commit was done at\r\n  uint256 public lastCommitBlock;\r\n\r\n  constructor(\r\n    string memory _defaultURI,\r\n    uint256 _revealOpen,\r\n    uint256 _maxTokens,\r\n    address _migrator,\r\n    bytes32 _tablesHash\r\n  ) {\r\n    defaultURI = _defaultURI;\r\n    revealOpen = _revealOpen;\r\n    maxTokens = _maxTokens;\r\n    migrator = _migrator;\r\n    tablesHash = _tablesHash;\r\n  }\r\n\r\n  /**\r\n    * Method to update the transfer subscriber.\r\n    * The transfer subscriber receives data on transfers in the contract.\r\n    * Owner only.\r\n    * @param _newSubscriber - The new subscriber to send data to\r\n   */\r\n  function updateTransferSubscriber(\r\n    IERC721Subscriber _newSubscriber\r\n  ) external onlyOwner {\r\n    subscriber = _newSubscriber;\r\n  }\r\n\r\n  /**\r\n    * Method to update the migrator.\r\n    * The migrator is the account able to sign authorization for owners to \r\n    * migrate individual token metadata.\r\n    * Owner only.\r\n    * @param _newMigrator - New migrator to validate authorizations.\r\n   */\r\n  function updateMigrator(address _newMigrator) external onlyOwner {\r\n    migrator = _newMigrator;\r\n  }\r\n\r\n  /**\r\n    * Method to update the beginning of the reveal phase.\r\n    * Owner only.\r\n    * @param _newRevealOpen - New open time\r\n   */\r\n  function updateRevealOpen(uint256 _newRevealOpen) external onlyOwner {\r\n    require(\r\n      block.timestamp < revealOpen,\r\n      \"Shogunate: Cannot change reveal open time when reveal is open.\"\r\n    );\r\n    require(\r\n      _newRevealOpen > block.timestamp,\r\n      \"Shogunate: Reveal open time cannot be set in the past.\"\r\n    );\r\n    revealOpen = _newRevealOpen;\r\n  }\r\n\r\n  /**\r\n    * @dev Internal method to generate a soul\r\n    * @param _soulEssence - Soul seed\r\n    * @param pTable - Probability table - Used in generation\r\n    * @param aTable - Alias table - Used in generation\r\n   */\r\n  function _generateSoul(\r\n    uint256 _soulEssence,\r\n    bytes32[] calldata pTable,\r\n    bytes32[] calldata aTable\r\n  ) virtual internal returns(bytes32);\r\n\r\n  /**\r\n    * @dev Internal method to authorize minting a new Samurai.\r\n    * Does all logic and actions necessary to authorize a mint.\r\n    * @param _amount - The amount of mints to authorize\r\n   */\r\n  function _authorizeMint(uint256 _amount) virtual internal;\r\n\r\n  /**\r\n    * @dev Internal method to hash the probability and alias tables.\r\n    * This hash can then be compared to 'tablesHash' to validate the tables.\r\n    * @param pTable - The probability table\r\n    * @param aTable - The alias table\r\n   */\r\n  function _hashTables(\r\n    bytes32[] calldata pTable,\r\n    bytes32[] calldata aTable\r\n  ) pure internal returns (bytes32) {\r\n    return keccak256(abi.encodePacked(pTable, aTable));\r\n  }\r\n\r\n  /**\r\n    * Method to store the lastest needed block hash.\r\n    * That method can be called by anyone, and will store the blockhash of the\r\n    * latest block a commit was done at, therefore freezing its randomness and\r\n    * bypassing the 256 block limit to fetch a previous block hash.\r\n    * \r\n    * It is called:\r\n    * - Everytime a commit, reveal, or recommit is done.\r\n    * - By external Shogunate systems to enforce the randomness and fairness of\r\n    *   the generation process.\r\n    * It can be called by anyone who wishes to enforce it :)\r\n    * \r\n    * Never reverts, simply does nothing if there is nothing to store.\r\n   */\r\n  function storeLatestNeededBlockHash() public {\r\n    if (\r\n      lastCommitBlock > 0\r\n      && lastCommitBlock < block.number\r\n      && blockhashesStore[lastCommitBlock] == 0x0\r\n    ) {\r\n      bytes32 lastCommitBlockHash = blockhash(lastCommitBlock);\r\n      if (lastCommitBlockHash != 0x0) {\r\n        blockhashesStore[lastCommitBlock] = lastCommitBlockHash;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Method to commit a mint pass to the generation of a specific token ID,\r\n    * using the blockhash of the current block as a source of randomness for a\r\n    * future reveal.\r\n    * User calling it will be authorized through the authorizeMint method.\r\n    * @param _amount - The amount to commit - Must be less than MAX_COMMIT_PER_TX\r\n   */\r\n  function commit(\r\n    uint256 _amount\r\n  ) external nonReentrant {\r\n    require(\r\n      _amount <= MAX_COMMIT_PER_TX,\r\n      \"Shogunate#commit: Too many commits at once.\"\r\n    );\r\n\r\n    // Freeze the randomness of previous commits if necessary\r\n    storeLatestNeededBlockHash();\r\n\r\n    uint256 _nextId = nextId;\r\n    require(\r\n      !msg.sender.isContract(),\r\n      \"Shogunate#commit: Caller cannot be a contract.\"\r\n    );\r\n    require(\r\n      block.timestamp >= revealOpen,\r\n      \"Shogunate#commit: Reveal is not open.\"\r\n    );\r\n    require(\r\n      _nextId - 1 + _amount <= maxTokens,\r\n      \"Shogunate#commit: Not enough tokens available.\"\r\n    );\r\n    _authorizeMint(_amount);\r\n\r\n    for (uint256 i = 0; i < _amount; i++) {\r\n      revealCommits[_nextId + i] = RevealCommit(\r\n        msg.sender,\r\n        block.number\r\n      );\r\n      emit Commited(msg.sender, _nextId + i);\r\n    }\r\n    lastCommitBlock = block.number;\r\n    nextId += _amount;\r\n  }\r\n\r\n  /**\r\n    * Method to reset a previous commit with the current block number.\r\n    * Can only be called when the block linked to the commit has an unreachable\r\n    * block.\r\n    * This method is intended as an emergency measure in case Shogunate external\r\n    * systems go down.\r\n    * Can be called by anyone.\r\n    * @param tokenId - The token ID to recommi\r\n   */\r\n  function recommit(\r\n    uint256 tokenId\r\n  ) external nonReentrant {\r\n    // Freeze the randomness of previous commits if necessary\r\n    storeLatestNeededBlockHash();\r\n    \r\n    RevealCommit storage revealCommit = revealCommits[tokenId];\r\n    require(\r\n      revealCommit.receiver != address(0) &&\r\n      revealCommit.blockNumber < block.number,\r\n      \"Shogunate#recommit: tokenId not ready to be revealed.\"\r\n    );\r\n\r\n    bytes32 commitBlockHash = blockhashesStore[revealCommit.blockNumber];\r\n    require(\r\n      commitBlockHash == 0x0,\r\n      \"Shogunate#recommit: Commit block hash is reachable.\"\r\n    );\r\n\r\n    revealCommit.blockNumber = block.number;\r\n    lastCommitBlock = block.number;\r\n  }\r\n\r\n  /**\r\n    * Method to reveal a maximum of MAX_REVEAL_PER_TX tokens.\r\n    * Can be called by anyone for any ready-to-reveal token, but minted token\r\n    * will obviously always go to the committer.\r\n    * \r\n    * Provided tables are hashed and matched with the contract's tablesHash\r\n    * @param tokenIds - Array of token IDs to reveal\r\n    * @param pTable - Probability table to reveal with\r\n    * @param aTable - Alias table to reveal with\r\n   */\r\n  function reveal(\r\n    uint256[] calldata tokenIds,\r\n    bytes32[] calldata pTable,\r\n    bytes32[] calldata aTable\r\n  ) external nonReentrant {\r\n    require(\r\n      tokenIds.length <= MAX_REVEAL_PER_TX,\r\n      \"Shogunate#reveal: Too many reveals at once.\"\r\n    );\r\n\r\n    // Freeze the randomness of previous commits if necessary\r\n    storeLatestNeededBlockHash();\r\n\r\n    require(\r\n      _hashTables(pTable, aTable) == tablesHash,\r\n      \"Shogunate#reveal: Invalid tables.\"\r\n    );\r\n\r\n    for (uint256 i = 0; i < tokenIds.length; i++) {\r\n      uint256 tokenId = tokenIds[i];\r\n      RevealCommit memory revealCommit = revealCommits[tokenId];\r\n      require(\r\n        revealCommit.receiver != address(0),\r\n        \"Shogunate#reveal: tokenId not ready to be revealed\"\r\n      );\r\n\r\n      bytes32 commitBlockHash = blockhashesStore[revealCommit.blockNumber];\r\n      require(\r\n        commitBlockHash != 0x0,\r\n        \"Shogunate#reveal: Commit block hash is unreachable.\"\r\n      );\r\n\r\n      uint256 soulEssence = uint256(keccak256(abi.encodePacked(\r\n        revealCommit.receiver,\r\n        commitBlockHash,\r\n        tokenId\r\n      )));\r\n      bytes32 soul = _generateSoul(soulEssence, pTable, aTable);\r\n      souls[tokenId] = soul;\r\n      _mint(revealCommit.receiver, tokenId);\r\n      emit NewSoul(tokenId, soul);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Method to get the soul of the given token ID.\r\n    * Reverts ig token does not exist.\r\n    * @param _tokenId - The token ID to get the soul of\r\n   */\r\n  function soulOf(uint256 _tokenId) external view returns (bytes32) {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Shogunate#soulOf: tokenId does not exist.\"\r\n    );\r\n    return souls[_tokenId];\r\n  }\r\n\r\n  /**\r\n    * Method to check if a token exists.\r\n    * @param _tokenId - The token ID to check\r\n   */\r\n  function exists(uint256 _tokenId) external view returns (bool) {\r\n    return _exists(_tokenId);\r\n  }\r\n\r\n  /**\r\n    * Method to get the URI of the given token ID.\r\n    * Returns the default URI concatenated with the token ID or a URI specific\r\n    * to the given tokenId if present.\r\n   */\r\n  function tokenURI(\r\n    uint256 tokenId\r\n  ) public view virtual override(ERC721, IERC721Metadata, ERC721URIStorage) returns (string memory) {\r\n    require(_exists(tokenId), \"Shogunate#tokenURI: URI query for nonexistent token\");\r\n\r\n    string memory tmpURI = super.tokenURI(tokenId);\r\n    \r\n    if (bytes(tmpURI).length == 0) {\r\n      return string(abi.encodePacked(defaultURI, tokenId.toString()));\r\n    }\r\n    return tmpURI;\r\n  }\r\n\r\n  /**\r\n    * Method to update default URI.\r\n    * Owner only.\r\n    * @param _defaultURI - NEw default URI\r\n   */\r\n  function updateDefaultURI(string calldata _defaultURI) external onlyOwner {\r\n    defaultURI = _defaultURI;\r\n  }\r\n\r\n  /**\r\n    * Method to migrate token URI.\r\n    * Must be called by token owner and contain a valid signature signed by\r\n    * migrator.\r\n    * @param _tokenId - Token ID to migrate\r\n    * @param _validUntil - Signature expiration\r\n    * @param _tokenURI - New token specific URI\r\n    * @param _signature- Signature\r\n   */\r\n  function migrateTokenURI(\r\n    uint256 _tokenId,\r\n    uint256 _validUntil,\r\n    string calldata _tokenURI,\r\n    bytes calldata _signature\r\n  ) external nonReentrant {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Shogunate#migrateTokenURI: Token does not exist.\"\r\n    );\r\n    require(\r\n      ownerOf(_tokenId) == _msgSender(),\r\n      \"Shogunate#migrateTokenURI: Sender does not own token.\"\r\n    );\r\n    require(\r\n      _validUntil >= block.timestamp,\r\n      \"Shogunate#migrateTokenURI: Signature is expired.\"\r\n    );\r\n    require(\r\n      _isValidSignature(\r\n        keccak256(abi.encodePacked(_tokenId, _msgSender(), _validUntil, _tokenURI)),\r\n        _signature\r\n      ),\r\n      \"Shogunate#migrateTokenURI: Invalid signature.\"\r\n    );\r\n\r\n    _setTokenURI(_tokenId, _tokenURI);\r\n  }\r\n\r\n  /**\r\n    * @dev Internal method to test the validity of a signature\r\n   */\r\n  function _isValidSignature(bytes32 _hash, bytes memory _signature) internal view returns (bool) {\r\n    bytes32 signedHash = _hash.toEthSignedMessageHash();\r\n    return signedHash.recover(_signature) == migrator;\r\n  }\r\n\r\n  function supportsInterface(\r\n    bytes4 interfaceId\r\n  ) public view virtual override(IERC165, ERC721) returns (bool) {\r\n    return super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  function _burn(\r\n    uint256 tokenId\r\n  ) internal virtual override(ERC721, ERC721URIStorage) {\r\n    super._burn(tokenId);\r\n  }\r\n\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual override(ERC721, ERC721Transmitter) {\r\n    super._afterTokenTransfer(from, to, tokenId);\r\n    if (from == address(0)) {\r\n      totalSupply += 1;\r\n    }\r\n    if (to == address(0)) {\r\n      totalSupply -= 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Method to pause data transmission of a specific token.\r\n    * Intended as a way for owners to opt out of synchronization with L2.\r\n    * @param tokenId - Token ID to stop the transmission of.\r\n    * @param paused - True to pause, false to unpause\r\n   */\r\n  function pauseTokenDataTransmission(\r\n    uint256 tokenId,\r\n    bool paused\r\n  ) external nonReentrant {\r\n    require(\r\n      ownerOf(tokenId) == _msgSender(),\r\n      \"Shogunate#pauseTokenDataTransmission: Caller does not own token.\"\r\n    );\r\n    _pauseTokenDataTransmission(tokenId, paused);\r\n  }\r\n\r\n  /**\r\n    * Method to pause data transmission of the whole contract.\r\n    * Owner only.\r\n    * @param paused - True to pause, false to unpause\r\n   */\r\n  function pauseContractDataTransmission(bool paused) external onlyOwner {\r\n    _pauseContractDataTransmission(paused);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interface/IMintPass.sol\r\n\r\ninterface IMintPass is IERC1155 {\r\n  /**\r\n    * Method to redeem (burn) mint passes.\r\n    * Can only be calledby the redeemer.\r\n    * @param id - The ID of the mint pass to redeem\r\n    * @param account - The account to redeem from\r\n    * @param amount - The amount to redeem\r\n   */\r\n  function redeem(uint256 id, address account, uint256 amount) external;\r\n\r\n  /**\r\n    * Method to mint new mint passes.\r\n    * Can only be called by the minter.\r\n    * @param id - The ID of the mint pass to mint\r\n    * @param account - The account to mint to\r\n    * @param amount - The amount of mint passes to mint\r\n   */\r\n  function mint(uint256 id, address account, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/Shogunate.sol\r\n\r\ncontract Shogunate is AbstractShogunate {\r\n  // Mint pass contract\r\n  IMintPass public mintPass;\r\n  // Mint pass ID\r\n  uint256 public mintPassId;\r\n\r\n  // Clans amount (attribute 1)\r\n  uint256 constant CLANS = 5;\r\n\r\n  // Max probability value (200 means steps in .5%)\r\n  uint256 constant PMAX = 200;\r\n\r\n  // Structure to hold generation data to pass around\r\n  struct GenerationData {\r\n    bytes32[] pTable;\r\n    bytes32[] aTable;\r\n    uint256 soulEssence;\r\n  }\r\n\r\n  constructor(\r\n    IMintPass _mintPass,\r\n    uint256 _mintPassId,\r\n    string memory _defaultURI,\r\n    uint256 _revealOpen,\r\n    uint256 _maxTokens,\r\n    address _migrator,\r\n    bytes32 _tablesHash\r\n  ) AbstractShogunate(\r\n    _defaultURI,\r\n    _revealOpen,\r\n    _maxTokens,\r\n    _migrator,\r\n    _tablesHash\r\n  ) ERC721(\"Shogunate\", \"SGN\") {\r\n    mintPass = _mintPass;\r\n    mintPassId = _mintPassId;\r\n  }\r\n\r\n  /**\r\n    * @dev Internal method to authorize a mint.\r\n    * Redeems mint passes.\r\n    * @param _amount - Amount of mints to authorize\r\n   */\r\n  function _authorizeMint(uint256 _amount) internal override {\r\n    mintPass.redeem(mintPassId, msg.sender, _amount);\r\n  }\r\n\r\n  /**\r\n    * @dev Internal method to generate an attribute with an identical\r\n    * probability to select each variation\r\n   */\r\n  function _generateUniformAttribute(\r\n    GenerationData memory _gd,\r\n    uint256 _attributeIndex,\r\n    uint256 _variationsCount\r\n  ) internal pure returns (bytes1) {\r\n    uint256 soulShard = uint256(keccak256(\r\n      abi.encodePacked(_gd.soulEssence, _attributeIndex)\r\n    ));\r\n    return bytes1(uint8(SeedRand.randUint256(\r\n      soulShard,\r\n      0,\r\n      _variationsCount\r\n    )));\r\n  }\r\n  \r\n  /**\r\n    * @dev Internal method to generate an attribute according to a probability\r\n    * table.\r\n   */\r\n  function _generateAttribute(\r\n    GenerationData memory _gd,\r\n    uint256 _attributeIndex,\r\n    uint256 _tablesIndex\r\n  ) internal pure returns (bytes1) {\r\n    uint256 soulShard = uint256(keccak256(\r\n      abi.encodePacked(_gd.soulEssence, _attributeIndex)\r\n    ));\r\n    uint256 pIndex = SeedRand.randUint256(\r\n      soulShard,\r\n      0,\r\n      uint8(_gd.pTable[_tablesIndex][0])\r\n    );\r\n    uint256 biasedCoinFlip = SeedRand.randUint256(\r\n      soulShard,\r\n      1,\r\n      PMAX\r\n    );\r\n    if (biasedCoinFlip < uint8(_gd.pTable[_tablesIndex][pIndex + 1])) {\r\n      return bytes1(uint8(pIndex));\r\n    }\r\n    return bytes1(_gd.aTable[_tablesIndex][pIndex + 1]);\r\n  }\r\n\r\n  /**\r\n    * @dev Generates a master samurai\r\n   */\r\n  function _generateMasterSamuraiSoul(\r\n    GenerationData memory _gd,\r\n    bytes memory _soul\r\n  ) internal pure {\r\n    _soul[2] = _generateAttribute(_gd, 2, 21); // Head\r\n    _soul[4] = _generateAttribute(_gd, 4, 22); // Outfit\r\n    _soul[5] = _generateAttribute(_gd, 5, 23); // Armor Color\r\n    _soul[6] = _generateAttribute(_gd, 6, 24); // Weapon\r\n    _soul[7] = _generateAttribute(_gd, 7, 25); // Eyes\r\n    _soul[14] = _generateAttribute(_gd, 14, 26); // Datemono\r\n    _soul[15] = _generateAttribute(_gd, 15, 27); // Mask\r\n    _soul[16] = _generateAttribute(_gd, 16, 28); // Mustache\r\n  }\r\n\r\n  /**\r\n    * @dev Generates a female apprentice\r\n   */\r\n  function _generateFemaleApprentice(\r\n    GenerationData memory _gd,\r\n    bytes memory _soul\r\n  ) internal pure {\r\n    _soul[2] = _generateAttribute(_gd, 2, 11); // Head\r\n    _soul[3] = _generateAttribute(_gd, 3, 12); // Outfit Type\r\n    if (_soul[3] == 0) {\r\n      // Outfit Type is Armor\r\n      _soul[4] = _generateAttribute(_gd, 4, 13); // Armor\r\n      _soul[5] = _generateAttribute(_gd, 5, 15); // Armor Color\r\n    } else {\r\n      // Outfit Type is Kimono\r\n      _soul[4] = _generateAttribute(_gd, 4, 14); // Kimono\r\n    }\r\n    _soul[6] = _generateAttribute(_gd, 6, 16); // Weapon\r\n    _soul[7] = _generateAttribute(_gd, 7, 17); // Eyes\r\n    _soul[8] = _generateAttribute(_gd, 8, 18); // Necklace\r\n    _soul[9] = _generateAttribute(_gd, 9, 19); // Eyebrows\r\n    _soul[10] = _generateUniformAttribute(_gd, 10, 4); // Nose\r\n    _soul[11] = _generateUniformAttribute(_gd, 11, 3); // Mouth\r\n    _soul[12] = _generateAttribute(_gd, 12, 20); // Face Paint\r\n  }\r\n\r\n  /**\r\n    * @dev Generates a male apprentice\r\n   */\r\n  function _generateMaleApprentice(\r\n    GenerationData memory _gd,\r\n    bytes memory _soul\r\n  ) internal pure {\r\n    _soul[2] = _generateAttribute(_gd, 2, 1); // Head\r\n    _soul[3] = _generateAttribute(_gd, 3, 2); // Outfit Type\r\n    if (_soul[3] == 0) {\r\n      // Outfit Type is Armor\r\n      _soul[4] = _generateAttribute(_gd, 4, 3); // Armor\r\n      _soul[5] = _generateAttribute(_gd, 5, 5); // Armor Color\r\n    } else {\r\n      // Outfit Type is Kimono\r\n      _soul[4] = _generateAttribute(_gd, 4, 4); // Kimono\r\n    }\r\n    _soul[6] = _generateAttribute(_gd, 6, 6); // Weapon\r\n    _soul[7] = _generateAttribute(_gd, 7, 7); // Eyes\r\n    _soul[8] = _generateAttribute(_gd, 8, 8); // Necklace\r\n    _soul[9] = _generateAttribute(_gd, 9, 9); // Eyebrows\r\n    _soul[10] = _generateUniformAttribute(_gd, 10, 4); // Nose\r\n    _soul[11] = _generateUniformAttribute(_gd, 11, 3); // Mouth\r\n    _soul[13] = _generateAttribute(_gd, 13, 10); // Beard\r\n  }\r\n\r\n  /**\r\n    * @dev Internal method to generate a new soul\r\n   */\r\n  function _generateSoul(\r\n    uint256 _soulEssence,\r\n    bytes32[] calldata pTable,\r\n    bytes32[] calldata aTable\r\n  ) internal pure override returns(bytes32) {\r\n    GenerationData memory gd = GenerationData(pTable, aTable, _soulEssence);\r\n    bytes memory soul = new bytes(17);\r\n\r\n    soul[0] = _generateAttribute(gd, 0, 0); // Base\r\n    soul[1] = _generateUniformAttribute(gd, 1, 5); // Clan\r\n    if (soul[0] == 0) {\r\n      _generateMasterSamuraiSoul(gd, soul);\r\n    } else if (uint8(soul[0]) == 0x1) {\r\n      _generateFemaleApprentice(gd, soul);\r\n    } else {\r\n      _generateMaleApprentice(gd, soul);\r\n    }\r\n\r\n    return bytes32(soul);\r\n  }\r\n\r\n  /**\r\n    * Method to get the clan of a given tokenId.\r\n    * @param _tokenId - Token ID to check the clan of\r\n   */\r\n  function clanOf(uint256 _tokenId) external view returns(uint8) {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Shogunate#soulOf: tokenId does not exist.\"\r\n    );\r\n    return uint8(souls[_tokenId][1]);\r\n  }\r\n\r\n  /**\r\n    * Method to get the shogun of a specific clan.\r\n    * @param _clanId - Clan ID to get the shogun of\r\n   */\r\n  function shogunOf(uint8 _clanId) public view returns(uint256) {\r\n    require(_clanId < CLANS, \"Shogunate#shogunOf: Clan does not exist.\");\r\n    return shogunIds[_clanId];\r\n  }\r\n\r\n  /**\r\n    * Method to check is a tokenId is a shogun\r\n    @param _tokenId - Token ID to check\r\n   */\r\n  function isShogun(uint256 _tokenId) external view returns(bool) {\r\n    require(\r\n      _exists(_tokenId),\r\n      \"Shogunate#isShogun: tokenId does not exist.\"\r\n    );\r\n    return souls[_tokenId][0] == 0xFF;\r\n  }\r\n\r\n  /**\r\n    * Method to generate a Shogun.\r\n    * Owner only.\r\n    * Once a shogun has been minted for a specific clan, it cannot be minted\r\n    * again.\r\n    * A shogun token cannot collide with a potential Samurai ID\r\n    * @param _tokenId - The token to give the shogun\r\n    * @param _clanId - The clan this shogun will lead\r\n   */\r\n  function mintShogun(uint256 _tokenId, uint8 _clanId) external onlyOwner {\r\n    require(_tokenId > maxTokens, \"Shogunate#mintShogun: Token is reserved.\");\r\n    require(\r\n      shogunOf(_clanId) == 0,\r\n      \"Shogunate#mintShogun: Clan already has a shogun.\"\r\n    );\r\n    bytes32 soul = bytes32(abi.encodePacked(\r\n      uint8(0xFF),\r\n      _clanId\r\n    ));\r\n    souls[_tokenId] = soul;\r\n    shogunIds[_clanId] = _tokenId;\r\n    _mint(msg.sender, _tokenId);\r\n\r\n    emit NewSoul(_tokenId, soul);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMintPass\",\"name\":\"_mintPass\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintPassId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_defaultURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_revealOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tablesHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Commited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"soul\",\"type\":\"bytes32\"}],\"name\":\"NewSoul\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_COMMIT_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REVEAL_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockhashesStore\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"clanOf\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDataTransmissionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataTransmissionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isShogun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCommitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validUntil\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"migrateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPass\",\"outputs\":[{\"internalType\":\"contract IMintPass\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPassId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_clanId\",\"type\":\"uint8\"}],\"name\":\"mintShogun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"pauseContractDataTransmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"pauseTokenDataTransmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"recommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pTable\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"aTable\",\"type\":\"bytes32[]\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revealCommits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_clanId\",\"type\":\"uint8\"}],\"name\":\"shogunOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"soulOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeLatestNeededBlockHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriber\",\"outputs\":[{\"internalType\":\"contract IERC721Subscriber\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tablesHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_defaultURI\",\"type\":\"string\"}],\"name\":\"updateDefaultURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMigrator\",\"type\":\"address\"}],\"name\":\"updateMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRevealOpen\",\"type\":\"uint256\"}],\"name\":\"updateRevealOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Subscriber\",\"name\":\"_newSubscriber\",\"type\":\"address\"}],\"name\":\"updateTransferSubscriber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Shogunate", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000071a536c83b7e24cff6c0e4bef906cd26ee7ffd67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000006273f4800000000000000000000000000000000000000000000000000000000000001e61000000000000000000000000f13a04e4b90fa8c83b249d89ee2cb94e11457441743631e1298e0516065e4d5b57837597661bf7f414a0a1fd89af9d5b9a62dc38000000000000000000000000000000000000000000000000000000000000002c68747470733a2f2f30786172742e7465616d3a323039362f636f6c6c656374696f6e2f6d657461646174612f0000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://076a6799a81bb9062fc433fdbf70a0d28f3b43518de32e4e0751a5d1a68374bf"}]}