{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Signature {\\n  function recoverSigner(bytes32 message, bytes memory sig)\\n    internal\\n    pure\\n    returns (address){\\n    \\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n    (v, r, s) = splitSignature(sig);\\n    return ecrecover(message, v, r, s);\\n  }\\n  \\n  function splitSignature(bytes memory sig)\\n    internal\\n    pure\\n    returns (uint8, bytes32, bytes32){\\n    \\n    require(sig.length == 65, \\\"Invalid Signature\\\");\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n    r := mload(add(sig, 32))\\n        s := mload(add(sig, 64))\\n        v := byte(0, mload(add(sig, 96)))\\n        }\\n    return (v, r, s);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[]", "ContractName": "Signature", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}