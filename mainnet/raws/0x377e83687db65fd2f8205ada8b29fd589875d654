{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: src/contracts/interfaces/ITransferRules.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface ITransferRules {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    function detectTransferRestriction(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    function messageForTransferRestriction(uint8 restrictionCode)\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    function checkSuccess(uint8 restrictionCode) external view returns (bool);\r\n\r\n}\r\n// File: src/contracts/RORATransferRules.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\ninterface IRORA {\r\n    function getTimeLock(address account) external view returns (uint256);\r\n    function getPermission(address account) external view returns (uint256);\r\n}\r\n\r\ncontract RORATransferRules is ITransferRules {\r\n  \r\n    mapping(uint8 => string) internal errorMessage;\r\n\r\n    uint8 private constant SUCCESS = 0;\r\n    uint8 private constant DO_NOT_SEND_TO_EMPTY_ADDRESS = 1;\r\n    uint8 private constant DO_NOT_SEND_TO_TOKEN_CONTRACT = 2;\r\n    uint8 private constant NO_ZERO_AMOUNT = 3;\r\n    uint8 private constant SENDER_TOKENS_TIME_LOCKED = 4;\r\n    uint8 private constant SENDER_ADDRESS_FROZEN = 5;\r\n    uint8 private constant RECIPIENT_ADDRESS_FROZEN = 6;\r\n    uint8 private constant FROZEN = 0x4;\r\n\r\nconstructor() {\r\n\r\n    errorMessage[SUCCESS] = \"SUCCESS\";\r\n    errorMessage[DO_NOT_SEND_TO_EMPTY_ADDRESS] = \"DO NOT SEND TO EMPTY ADDRESS\";\r\n    errorMessage[DO_NOT_SEND_TO_TOKEN_CONTRACT] = \"DO NOT SEND TO TOKEN CONTRACT\";\r\n    errorMessage[NO_ZERO_AMOUNT] = \"AMOUNT CAN NOT BE 0\";\r\n    errorMessage[SENDER_TOKENS_TIME_LOCKED] = \"SENDER TOKENS TIME LOCKED\";\r\n    errorMessage[SENDER_ADDRESS_FROZEN] = \"SENDER ADDRESS FROZEN\";\r\n    errorMessage[RECIPIENT_ADDRESS_FROZEN] = \"RECIPIENT ADDRESS FROZEN\";\r\n}\r\n\r\n  function detectTransferRestriction(\r\n    address _token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns(uint8)\r\n  {\r\n    IRORA token = IRORA(_token);\r\n\r\n    if (to == address(0)) return DO_NOT_SEND_TO_EMPTY_ADDRESS;\r\n    if (to == address(token)) return DO_NOT_SEND_TO_TOKEN_CONTRACT;\r\n    if (value == 0) return NO_ZERO_AMOUNT;\r\n    if (block.timestamp < token.getTimeLock(from)) return SENDER_TOKENS_TIME_LOCKED;\r\n    if (token.getPermission(from) & FROZEN == FROZEN) return SENDER_ADDRESS_FROZEN;\r\n    if (token.getPermission(to) & FROZEN == FROZEN) return RECIPIENT_ADDRESS_FROZEN;\r\n\r\n    return SUCCESS;\r\n  }\r\n\r\n  function messageForTransferRestriction(uint8 restrictionCode)\r\n    external\r\n    override\r\n    view\r\n    returns(string memory)\r\n  {\r\n    require(restrictionCode <= 6, \"BAD RESTRICTION CODE\");\r\n    return errorMessage[restrictionCode];\r\n  }\r\n\r\n  function checkSuccess(uint8 restrictionCode) external override pure returns (bool isSuccess) {\r\n    return restrictionCode == SUCCESS;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"checkSuccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RORATransferRules", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a0f86ef9e9fedf69a333bba26beae82dd25b0155bbe5b2e6cd7d5fff96043b7"}]}