{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BoredBoxNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n//          +--------------------------------------------------+\\n//         /|                                                 /|\\n//        / |                                                / |\\n//       *--+-----------------------------------------------*  |\\n//       |  |                                               |  |\\n//       |  |                                               |  |\\n//       |  |                                               |  |\\n//       |  |   \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557    |  |\\n//       |  |   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557   |  |\\n//       |  |   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551  \u2588\u2588\u2551   |  |\\n//       |  |   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551  \u2588\u2588\u2551   |  |\\n//       |  |   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   |  |\\n//       |  |   \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d    |  |\\n//       |  |                                               |  |\\n//       |  |                                               |  |\\n//       |  |                                               |  |\\n//       |  +-----------------------------------------------+--+\\n//       | /                                                | /\\n//       |/                                                 |/\\n//       *--------------------------------------------------*\\n\\nimport { BoredBoxStorage } from \\\"@boredbox-solidity-contracts/bored-box-storage/contracts/BoredBoxStorage.sol\\\";\\nimport { IBoredBoxNFT_Functions } from \\\"@boredbox-solidity-contracts/interface-bored-box-nft/contracts/IBoredBoxNFT.sol\\\";\\nimport { IValidateMint } from \\\"@boredbox-solidity-contracts/interface-validate-mint/contracts/IValidateMint.sol\\\";\\nimport { Ownable } from \\\"@boredbox-solidity-contracts/ownable/contracts/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { ERC721 } from \\\"../contracts/token/ERC721/ERC721.sol\\\";\\n\\n/// @title Tracks BoredBox token ownership and coordinates minting\\n/// @author S0AndS0\\n/// @custom:link https://boredbox.io/\\ncontract BoredBoxNFT is IBoredBoxNFT_Functions, BoredBoxStorage, ERC721, Ownable, ReentrancyGuard {\\n    uint256 public constant VALIDATE_STATUS__NA = 0;\\n    uint256 public constant VALIDATE_STATUS__PASS = 1;\\n    uint256 public constant VALIDATE_STATUS__FAIL = 2;\\n\\n    /// Emitted after validateMint checks pass\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n\\n    /// Emitted after assets are fully distributed\\n    // @param tokenId pointer into `token__owner`, `token__opened_timestamp`, `token__status`, `token__generation`\\n    event Opened(uint256 indexed tokenId);\\n\\n    /// Emitted when client requests a Box to be opened\\n    // @param from address of `msg.sender`\\n    // @param to address of `token__owner[tokenId]`\\n    // @param tokenId pointer into storage; `token__owner`, `token__opened_timestamp`, `token__status`, `token__generation`\\n    event RequestOpen(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            msg.sender == this.owner() || (coordinator != address(0) && msg.sender == coordinator),\\n            \\\"Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /// Called via `new BoredBoxNFT(/* ... */)`\\n    /// @param name_ NFT name to store in `name`\\n    /// @param symbol_ NFT symbol to pass to `ERC721` parent contract\\n    /// @param coordinator_ Address to store in `coordinator`\\n    /// @param uri_root string pointing to IPFS directory of JSON metadata files\\n    /// @param quantity Amount of tokens available for first generation\\n    /// @param price Exact `{ value: _price_ }` required by `mint()` function\\n    /// @param sale_time The `block.timestamp` to allow general requests to `mint()` function\\n    /// @param ref_validators List of addresses referencing `ValidateMint` contracts\\n    /// @param cool_down Time to add to current `block.timestamp` after `token__status` is set to `TOKEN_STATUS__OPENED`\\n    /// @custom:throw \\\"Open time must be after sale time\\\"\\n    constructor(\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_,\\n        address coordinator_,\\n        string memory uri_root,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 sale_time,\\n        uint256 open_time,\\n        address[] memory ref_validators,\\n        uint256 cool_down\\n    ) ERC721(name_, symbol_) Ownable(owner_) {\\n        require(open_time >= sale_time, \\\"Open time must be after sale time\\\");\\n\\n        coordinator = coordinator_;\\n\\n        box__uri_root[1] = uri_root;\\n        box__lower_bound[1] = 1;\\n        box__upper_bound[1] = quantity;\\n        box__quantity[1] = quantity;\\n        box__price[1] = price;\\n        box__sale_time[1] = sale_time;\\n        box__cool_down[1] = cool_down;\\n        box__open_time[1] = open_time;\\n        box__validators[1] = ref_validators;\\n\\n        current_box = 1;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-mint}\\n    function mint(uint256 boxId, bytes memory auth) external payable {\\n        require(msg.value == box__price[boxId], \\\"Incorrect amount sent\\\");\\n        return _mintBox(msg.sender, boxId, auth);\\n    }\\n\\n    /// Mutates `token__status` storage if checks pass\\n    /// @dev See {IBoredBoxNFT_Functions-setPending}\\n    function setPending(uint256[] memory tokenIds) external payable onlyAuthorized {\\n        uint256 length = tokenIds.length;\\n        require(length > 0, \\\"No token IDs provided\\\");\\n\\n        uint256 tokenId;\\n        uint256 current__token__status;\\n        uint256 boxId;\\n        for (uint256 i; i < length; ) {\\n            tokenId = tokenIds[i];\\n            require(tokenId > 0, \\\"Invalid token ID\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n\\n            current__token__status = token__status[tokenId];\\n            if (current__token__status == TOKEN_STATUS__PENDING) {\\n                continue;\\n            }\\n\\n            require(current__token__status != TOKEN_STATUS__OPENED, \\\"Already opened\\\");\\n\\n            boxId = token__generation[tokenId];\\n            require(boxId > 0, \\\"Box does not exist\\\");\\n            require(block.timestamp >= box__open_time[boxId], \\\"Not time yet\\\");\\n\\n            token__status[tokenId] = TOKEN_STATUS__PENDING;\\n            emit RequestOpen(msg.sender, token__owner[tokenId], tokenId);\\n        }\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-box__allValidators}\\n    function box__allValidators(uint256 boxId) external view virtual returns (address[] memory) {\\n        return box__validators[boxId];\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-setOpened}\\n    function setOpened(uint256[] memory tokenIds) external payable onlyAuthorized {\\n        uint256 length = tokenIds.length;\\n        require(length > 0, \\\"No token IDs provided\\\");\\n\\n        uint256 tokenId;\\n        for (uint256 i; i < length; ) {\\n            tokenId = tokenIds[i];\\n            require(tokenId > 0, \\\"Invalid token ID\\\");\\n\\n            require(token__generation[tokenId] > 0, \\\"Box does not exist\\\");\\n\\n            require(token__status[tokenId] == TOKEN_STATUS__PENDING, \\\"Not yet pending delivery\\\");\\n\\n            token__status[tokenId] = 1;\\n            token__opened_timestamp[tokenId] = block.timestamp;\\n\\n            emit Opened(tokenId);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-setOpened}\\n    function setBoxURI(uint256 boxId, string memory uri_root) external payable onlyAuthorized {\\n        require(boxId > 0, \\\"Box does not exist\\\");\\n        box__uri_root[boxId] = uri_root;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-setIsPaused}\\n    function setIsPaused(uint256 boxId, bool is_paused) external payable onlyAuthorized {\\n        box__is_paused[boxId] = is_paused;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-setAllPaused}\\n    function setAllPaused(bool is_paused) external payable onlyAuthorized {\\n        all_paused = is_paused;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-setAllPaused}\\n    function setCoordinator(address coordinator_) external payable onlyOwner {\\n        coordinator = coordinator_;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-setValidator}\\n    function setValidator(\\n        uint256 boxId,\\n        uint256 index,\\n        address ref_validator\\n    ) external payable onlyOwner {\\n        require(all_paused || box__is_paused[boxId], \\\"Not paused\\\");\\n        box__validators[boxId][index] = ref_validator;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-newBox}\\n    function newBox(\\n        string memory uri_root,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 sale_time,\\n        uint256 open_time,\\n        address[] memory ref_validators,\\n        uint256 cool_down\\n    ) external payable onlyOwner {\\n        require(!all_paused, \\\"New boxes are paused\\\");\\n        require(open_time >= sale_time, \\\"Open time must be after sale time\\\");\\n\\n        uint256 last_boxId = current_box;\\n        uint256 next_boxId = 1 + last_boxId;\\n        uint256 last_upper_bound = box__upper_bound[last_boxId];\\n\\n        box__lower_bound[next_boxId] += 1 + last_upper_bound;\\n        box__upper_bound[next_boxId] = last_upper_bound + quantity;\\n        box__quantity[next_boxId] = quantity;\\n        box__price[next_boxId] = price;\\n        box__uri_root[next_boxId] = uri_root;\\n        box__validators[next_boxId] = ref_validators;\\n        box__sale_time[next_boxId] = sale_time;\\n        box__open_time[next_boxId] = open_time;\\n        box__cool_down[next_boxId] = cool_down;\\n\\n        current_box = next_boxId;\\n    }\\n\\n    /// @dev See {IBoredBoxNFT_Functions-withdraw}\\n    function withdraw(address payable to, uint256 amount) external payable onlyOwner nonReentrant {\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /// @dev See {IERC721Metadata-tokenURI}\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(token__owner[tokenId] != address(0), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        uint256 boxId = token__generation[tokenId];\\n\\n        string memory uri_root = box__uri_root[boxId];\\n        require(bytes(uri_root).length > 0, \\\"URI not set\\\");\\n\\n        uint256 current__token__status = token__status[tokenId];\\n        string memory uri_path;\\n\\n        if (current__token__status == TOKEN_STATUS__CLOSED) {\\n            uri_path = \\\"closed\\\";\\n        } else if (current__token__status == TOKEN_STATUS__OPENED) {\\n            uri_path = \\\"opened\\\";\\n        } else if (current__token__status == TOKEN_STATUS__PENDING) {\\n            uri_path = \\\"pending\\\";\\n        }\\n\\n        return string(abi.encodePacked(\\\"ipfs://\\\", uri_root, \\\"/\\\", uri_path, \\\".json\\\"));\\n    }\\n\\n    /// @dev See {ERC721-_beforeTokenTransfer}\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        if (from == address(0)) {\\n            return;\\n        }\\n\\n        uint256 current__token__status = token__status[tokenId];\\n        require(current__token__status != TOKEN_STATUS__PENDING, \\\"Pending delivery\\\");\\n\\n        if (to == address(0)) {\\n            require(current__token__status == TOKEN_STATUS__OPENED, \\\"Cannot burn un-opened Box\\\");\\n            return;\\n        }\\n\\n        if (current__token__status == TOKEN_STATUS__OPENED) {\\n            uint256 boxId = token__generation[tokenId];\\n            require(\\n                block.timestamp >= token__opened_timestamp[tokenId] + box__cool_down[boxId],\\n                \\\"Need to let things cool down\\\"\\n            );\\n        }\\n    }\\n\\n    function _mintBox(\\n        address to,\\n        uint256 boxId,\\n        bytes memory auth\\n    ) internal nonReentrant {\\n        require(boxId > 0, \\\"validateMint: boxId must be greater than zero\\\");\\n        require(!all_paused && !box__is_paused[boxId], \\\"Minting is paused\\\");\\n\\n        bytes32 hash_of_auth = sha256(auth);\\n        require(hash__auth_token[hash_of_auth] == 0, \\\"Auth already used\\\");\\n\\n        uint256 quantity = box__quantity[boxId];\\n        require(quantity > 0, \\\"No more for this round\\\");\\n        uint256 tokenId = (box__upper_bound[boxId] + 1) - quantity;\\n\\n        uint256 original_owner = token__original_owner[boxId][to];\\n        require(\\n            original_owner < box__lower_bound[boxId] || original_owner > box__upper_bound[boxId],\\n            \\\"Limited to one mint per address\\\"\\n        );\\n\\n        bool all_validators_passed;\\n        uint256 validate_status;\\n        address[] memory _ref_validators = box__validators[boxId];\\n        uint256 length = _ref_validators.length;\\n\\n        for (uint256 i; i < length; ) {\\n            if (_ref_validators[i] == address(0)) {\\n                all_validators_passed = false;\\n                break;\\n            }\\n\\n            validate_status = IValidateMint(_ref_validators[i]).validate(to, boxId, tokenId, auth);\\n            unchecked {\\n                ++i;\\n            }\\n\\n            if (validate_status == VALIDATE_STATUS__NA) {\\n                continue;\\n            } else if (validate_status == VALIDATE_STATUS__FAIL) {\\n                all_validators_passed = false;\\n                break;\\n            } else if (validate_status == VALIDATE_STATUS__PASS && length == i + 1) {\\n                all_validators_passed = true;\\n            }\\n        }\\n\\n        if (!all_validators_passed) {\\n            require(box__sale_time[boxId] <= block.timestamp, \\\"Please wait till sale time\\\");\\n        }\\n\\n        super._safeMint(to, tokenId);\\n        box__quantity[boxId] -= 1;\\n        hash__auth_token[hash_of_auth] = tokenId;\\n        token__generation[tokenId] = boxId;\\n        token__original_owner[boxId][to] = tokenId;\\n        emit Mint(to, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Collection name\\n    string public name;\\n\\n    // Collection symbol\\n    string public symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) public token__owner;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) public balanceOf;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        name = name_;\\n        symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = token__owner[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return token__owner[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        balanceOf[to] += 1;\\n        token__owner[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        balanceOf[owner] -= 1;\\n        delete token__owner[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        balanceOf[from] -= 1;\\n        balanceOf[to] += 1;\\n        token__owner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/ownable/contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IOwnable_Variables {\\n    function owner() external view returns (address);\\n}\\n\\ninterface IOwnable_Functions {\\n    function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IOwnable is IOwnable_Functions, IOwnable_Variables {}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/ownable/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Inspired by OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport { IOwnable_Functions } from \\\"./interfaces/IOwnable.sol\\\";\\n\\nabstract contract Ownable is IOwnable_Functions {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address owner_) {\\n        owner = owner_ == address(0) ? msg.sender : owner_;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/interface-validate-mint/contracts/IValidateMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// Completely optional contract that customizes mint requirements\\ninterface IValidateMint {\\n    /// Throws `revert` or `require` error message to halt execution\\n    /// Returns 0 VALIDATE_STATUS__NA\\n    /// Returns 1 VALIDATE_STATUS__PASS\\n    /// Returns 2 VALIDATE_STATUS__FAIL\\n    /// It is up to caller to figure out what to do with returned `bool`\\n    /// @param to Address that will receive NFT if operation is valid\\n    /// @param boxId Generation key to possibly use internally or by checking calling contract strage\\n    /// @param tokenId Specific token ID that needs to be minted\\n    /// @param auth Optional extra data to require for validation process\\n    function validate(\\n        address to,\\n        uint256 boxId,\\n        uint256 tokenId,\\n        bytes memory auth\\n    ) external view returns (uint256 validate_status);\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/interface-bored-box-nft/contracts/IBoredBoxNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { IBoredBoxStorage } from \\\"@boredbox-solidity-contracts/bored-box-storage/contracts/interfaces/IBoredBoxStorage.sol\\\";\\nimport { IOwnable } from \\\"@boredbox-solidity-contracts/ownable/contracts/interfaces/IOwnable.sol\\\";\\n\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n/* Function definitions */\\ninterface IBoredBoxNFT_Functions {\\n\\n    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\\n\\n    /// Attempt to mint new token for `current_box` generation\\n    /// @dev Sets `boxId` to `current_box` before passing execution to `_mintBox()` function\\n    /// @param auth Forwarded to any `ValidateMint` contract references set at `box__validators[boxId]`\\n    /// @custom:throw \\\"Incorrect amount sent\\\"\\n    function mint(\\n        uint256 boxId,\\n        bytes memory auth\\n    ) external payable;\\n\\n    /// Bulk request array of `tokenIds` to have assets delivered\\n    /// @dev See {IBoredBoxNFT_Functions-open}\\n    /// @custom:throw \\\"No token IDs provided\\\"\\n    /// @custom:throw \\\"Not authorized\\\" if `msg.sender` is not contract owner\\n    /// @custom:throw \\\"Invalid token ID\\\" if `tokenId` is not greater than `0`\\n    /// @custom:throw \\\"Not time yet\\\" if `block.timestamp` is less than `box__open_time[boxId]`\\n    /// @custom:throw \\\"Already opened\\\"\\n    /// @custom:throw \\\"Pending delivery\\\"\\n    /// @custom:throw \\\"Box does not exist\\\"\\n    function setPending(uint256[] memory tokenIds) external payable;\\n\\n    /// Attempt to set `token__status` and `token__opened_timestamp` storage\\n    /// @dev See {IBoredBoxNFT_Functions-setOpened}\\n    /// @custom:throw \\\"No token IDs provided\\\"\\n    /// @custom:throw \\\"Not authorized\\\"\\n    /// @custom:throw \\\"Invalid token ID\\\"\\n    /// @custom:throw \\\"Box does not exist\\\"\\n    /// @custom:throw \\\"Not yet pending delivery\\\"\\n    /// @custom:emit Opened\\n    /// @custom:emit PermanentURI\\n    function setOpened(uint256[] memory tokenIds) external payable;\\n\\n    /// Set `box__uri_root` for given `tokenId` to `uri_root` value\\n    /// @custom:throw \\\"Not authorized\\\" if `msg.sender` is not contract owner\\n    /// @custom:throw \\\"Box does not exist\\\"\\n    function setBoxURI(uint256 boxId, string memory uri_root) external payable;\\n\\n    /// Attempt to set `all__paused` storage\\n    /// @param is_paused Value to assign to storage\\n    /// @custom:throw \\\"Not authorized\\\"\\n    function setAllPaused(bool is_paused) external payable;\\n\\n    /// Attempt to set `box__is_paused` storage\\n    /// @custom:throw \\\"Not authorized\\\"\\n    function setIsPaused(uint256 boxId, bool is_paused) external payable;\\n\\n    /// Overwrite `coordinator` address\\n    /// @custom:throw \\\"Ownable: caller is not the owner\\\"\\n    function setCoordinator(address coordinator_) external payable;\\n\\n    /// Insert reference address to validat-mint contract\\n    /// @param boxId Generation to insert data within `box__validators` mapping\\n    /// @param index Where in array of `box__validators[boxId]` to set reference\\n    /// @param ref_validator Address for ValidateMint contract\\n    /// @custom:throw \\\"Ownable: caller is not the owner\\\"\\n    /// @dev See {IValidateMint}\\n    function setValidator(\\n        uint256 boxId,\\n        uint256 index,\\n        address ref_validator\\n    ) external payable;\\n\\n    /// @param uri_root String pointing to IPFS directory of JSON metadata files\\n    /// @param quantity Amount of tokens available for first generation\\n    /// @param price Exact `{ value: _price_ }` required by `mint()` function\\n    /// @param sale_time The `block.timestamp` to allow general requests to `mint()` function\\n    /// @param open_time The `block.timestamp` to allow `open` requests\\n    /// @param ref_validators List of addresses referencing `ValidateMint` contracts\\n    /// @param cool_down Add time to `block.timestamp` to prevent `transferFrom` after opening\\n    /// @custom:throw \\\"Not authorized\\\"\\n    /// @custom:throw \\\"New boxes are paused\\\"\\n    /// @custom:throw \\\"Open time must be after sale time\\\"\\n    function newBox(\\n        string memory uri_root,\\n        uint256 quantity,\\n        uint256 price,\\n        uint256 sale_time,\\n        uint256 open_time,\\n        address[] memory ref_validators,\\n        uint256 cool_down\\n    ) external payable;\\n\\n    /// Helper function to return Array of all validation contract addresses for `boxId`\\n    /// @param boxId Generation key to get array from `box__validators` storage\\n    function box__allValidators(uint256 boxId) external view returns (address[] memory);\\n\\n    /// Send amount of Ether from `this.balance` to some address\\n    /// @custom:throw \\\"Ownable: caller is not the owner\\\"\\n    /// @custom:throw \\\"Transfer failed\\\"\\n    function withdraw(address payable to, uint256 amount) external payable;\\n}\\n\\n///\\ninterface IBoredBoxNFT is IBoredBoxNFT_Functions, IBoredBoxStorage, IOwnable, IERC721Metadata {\\n    /* From ERC721 */\\n    // function balanceOf(address owner) external view returns (uint256 balance);\\n    // function ownerOf(uint256 tokenId) external view returns (address);\\n    // function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    // @dev See {IERC721Metadata-tokenURI}.\\n    // function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /// Attempt to retrieve `name` from storage\\n    /// @return Name for given `boxId` generation\\n    function name() external view returns (string memory);\\n\\n    /* Function definitions from @openzeppelin/contracts/access/Ownable.sol */\\n    // function owner() external view returns (address);\\n\\n    // function transferOwnership(address newOwner) external;\\n\\n    /* Variable getters from contracts/tokens/ERC721/ERC721.sol */\\n    function token__owner(uint256) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/bored-box-storage/contracts/interfaces/IBoredBoxStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// vim: textwidth=119\\npragma solidity 0.8.11;\\n\\n/* Variable getters */\\ninterface IBoredBoxStorage {\\n    function current_box() external view returns (uint256);\\n\\n    function coordinator() external view returns (address);\\n\\n    function all_paused() external view returns (bool);\\n\\n    /// Get paused state for given `boxId`\\n    function box__is_paused(uint256) external view returns (bool);\\n\\n    /// Get latest URI root/hash for given `boxId`\\n    function box__uri_root(uint256) external view returns (string memory);\\n\\n    /// Get first token ID allowed to be minted for given `boxId`\\n    function box__lower_bound(uint256) external view returns (uint256);\\n\\n    /// Get last token ID allowed to be minted for given `boxId`\\n    function box__upper_bound(uint256) external view returns (uint256);\\n\\n    /// Get remaining quantity of tokens for given `boxId`\\n    function box__quantity(uint256) external view returns (uint256);\\n\\n    /// Get price for given `boxId`\\n    function box__price(uint256) external view returns (uint256);\\n\\n    /// Get address to Validate contract for given `boxId` and array index\\n    function box__validators(uint256, uint256) external view returns (address);\\n\\n    /// Get `block.timestamp` given `boxId` generation allows tokens to be sold\\n    function box__sale_time(uint256) external view returns (uint256);\\n\\n    /// Get `block.timestamp` given `boxId` generation allows tokens to be opened\\n    function box__open_time(uint256) external view returns (uint256);\\n\\n    /// Get amount of time added to `block.timestamp` for `boxId` when token is opened\\n    function box__cool_down(uint256) external view returns (uint256);\\n\\n    /// Get token ID for given hash of auth\\n    function hash__auth_token(bytes32) external view returns (uint256);\\n\\n    /// Get `block.timestamp` a given `tokenId` was opened\\n    function token__opened_timestamp(uint256) external view returns (uint256);\\n\\n    /// Get _TokenStatus_ value for given `tokenId`\\n    function token__status(uint256) external view returns (uint256);\\n\\n    /// Get `boxId` for given `tokenId`\\n    function token__generation(uint256) external view returns (uint256);\\n\\n    /// Get `tokenId` for given `boxId` and owner\\n    function token__original_owner(uint256, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@boredbox-solidity-contracts/bored-box-storage/contracts/BoredBoxStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// vim: textwidth=119\\npragma solidity 0.8.11;\\n\\n/// Define additional data storage for BoredBoxNFT\\nabstract contract BoredBoxStorage {\\n    uint256 public constant TOKEN_STATUS__CLOSED = 0;\\n    uint256 public constant TOKEN_STATUS__OPENED = 1;\\n    uint256 public constant TOKEN_STATUS__PENDING = 2;\\n\\n    // TODO: rename to something like `box__current_generation`\\n    uint256 public current_box;\\n\\n    // Authorized to preform certain actions\\n    address public coordinator;\\n\\n    bool public all_paused;\\n\\n    // Mapping boxId to is paused state\\n    mapping(uint256 => bool) public box__is_paused;\\n\\n    // Mapping boxId to URI IPFS root\\n    mapping(uint256 => string) public box__uri_root;\\n\\n    // Mapping boxId to tokenId bounds\\n    mapping(uint256 => uint256) public box__lower_bound;\\n    mapping(uint256 => uint256) public box__upper_bound;\\n\\n    // Mapping boxId to quantity\\n    mapping(uint256 => uint256) public box__quantity;\\n\\n    // Mapping boxId to price\\n    mapping(uint256 => uint256) public box__price;\\n\\n    // Mapping boxId to array of Validate contract references\\n    mapping(uint256 => address[]) public box__validators;\\n\\n    // Mapping boxId to open sale\\n    mapping(uint256 => uint256) public box__sale_time;\\n\\n    // Mapping boxId to open time\\n    mapping(uint256 => uint256) public box__open_time;\\n\\n    // Mapping boxId to cool down after mint\\n    mapping(uint256 => uint256) public box__cool_down;\\n\\n    // Mapping hash of auth to tokenId\\n    mapping(bytes32 => uint256) public hash__auth_token;\\n\\n    // Mapping tokenId to opened timestamp\\n    mapping(uint256 => uint256) public token__opened_timestamp;\\n\\n    // Mapping from tokenId to TokenStatus_{Closed,Opened,Pending} states\\n    mapping(uint256 => uint256) public token__status;\\n\\n    // Mapping boxId to owner to tokenId\\n    mapping(uint256 => mapping(address => uint256)) public token__original_owner;\\n\\n    // Mapping from tokenId to boxId\\n    mapping(uint256 => uint256) public token__generation;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"coordinator_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sale_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open_time\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ref_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"cool_down\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Opened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RequestOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_STATUS__CLOSED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_STATUS__OPENED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_STATUS__PENDING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATE_STATUS__FAIL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATE_STATUS__NA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATE_STATUS__PASS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"all_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"box__allValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__cool_down\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__is_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__lower_bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__open_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__quantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__sale_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__upper_bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__uri_root\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"box__validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_box\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hash__auth_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"auth\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sale_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open_time\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"ref_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"cool_down\",\"type\":\"uint256\"}],\"name\":\"newBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is_paused\",\"type\":\"bool\"}],\"name\":\"setAllPaused\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_root\",\"type\":\"string\"}],\"name\":\"setBoxURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinator_\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_paused\",\"type\":\"bool\"}],\"name\":\"setIsPaused\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setOpened\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"setPending\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref_validator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token__generation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token__opened_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token__original_owner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token__owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token__status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BoredBoxNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000935a6162f6830ed6b67715194a2702c5b4f8d115000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000932175ae3b682cd0cefa61b34748e6eca14843b500000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000006283d49000000000000000000000000000000000000000000000000000000000628d0f1000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000b426f726564426f784e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d58434d35735a475a746f5138794d4174754262566d334b434844566e726d7a667870465370475734374869500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ca8060d34f7f1c9a76012d460564595717cb8838", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}