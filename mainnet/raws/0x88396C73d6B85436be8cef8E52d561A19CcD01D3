{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/InfinityOrderBookComplication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport {OrderTypes} from '../libs/OrderTypes.sol';\\nimport {IComplication} from '../interfaces/IComplication.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title InfinityOrderBookComplication\\n * @notice Complication to execute orderbook orders\\n */\\ncontract InfinityOrderBookComplication is IComplication, Ownable {\\n  uint256 public PROTOCOL_FEE;\\n\\n  event NewProtocolFee(uint256 protocolFee);\\n  event NewErrorbound(uint256 errorBound);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _protocolFee protocol fee (200 --> 2%, 400 --> 4%)\\n   */\\n  constructor(uint256 _protocolFee) {\\n    PROTOCOL_FEE = _protocolFee;\\n  }\\n\\n  // ======================================================= EXTERNAL FUNCTIONS ==================================================\\n\\n  function canExecMatchOrder(\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy,\\n    OrderTypes.OrderItem[] calldata constructedNfts\\n  ) external view override returns (bool, uint256) {\\n    (bool _isPriceValid, uint256 execPrice) = isPriceValid(sell, buy);\\n    return (\\n      isTimeValid(sell, buy) &&\\n        _isPriceValid &&\\n        areNumItemsValid(sell, buy, constructedNfts) &&\\n        doItemsIntersect(sell.nfts, constructedNfts) &&\\n        doItemsIntersect(buy.nfts, constructedNfts) &&\\n        doItemsIntersect(sell.nfts, buy.nfts),\\n      execPrice\\n    );\\n  }\\n\\n  function canExecMatchOneToMany(\\n    OrderTypes.MakerOrder calldata makerOrder,\\n    OrderTypes.MakerOrder[] calldata manyMakerOrders\\n  ) external view override returns (bool) {\\n    uint256 numItems;\\n    bool isOrdersTimeValid = true;\\n    bool itemsIntersect = true;\\n    uint256 ordersLength = manyMakerOrders.length;\\n    for (uint256 i = 0; i < ordersLength; ) {\\n      if (!isOrdersTimeValid || !itemsIntersect) {\\n        return false; // short circuit\\n      }\\n\\n      uint256 nftsLength = manyMakerOrders[i].nfts.length;\\n      for (uint256 j = 0; j < nftsLength; ) {\\n        numItems += manyMakerOrders[i].nfts[j].tokens.length;\\n        unchecked {\\n          ++j;\\n        }\\n      }\\n\\n      isOrdersTimeValid =\\n        isOrdersTimeValid &&\\n        manyMakerOrders[i].constraints[3] <= block.timestamp &&\\n        manyMakerOrders[i].constraints[4] >= block.timestamp;\\n\\n      itemsIntersect = itemsIntersect && doItemsIntersect(makerOrder.nfts, manyMakerOrders[i].nfts);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    bool _isTimeValid = isOrdersTimeValid &&\\n      makerOrder.constraints[3] <= block.timestamp &&\\n      makerOrder.constraints[4] >= block.timestamp;\\n\\n    uint256 currentMakerOrderPrice = _getCurrentPrice(makerOrder);\\n    uint256 sumCurrentOrderPrices = _sumCurrentPrices(manyMakerOrders);\\n\\n    bool _isPriceValid = false;\\n    if (makerOrder.isSellOrder) {\\n      _isPriceValid = sumCurrentOrderPrices >= currentMakerOrderPrice;\\n    } else {\\n      _isPriceValid = sumCurrentOrderPrices <= currentMakerOrderPrice;\\n    }\\n\\n    return (numItems == makerOrder.constraints[0]) && _isTimeValid && itemsIntersect && _isPriceValid;\\n  }\\n\\n  function canExecMatchOneToOne(OrderTypes.MakerOrder calldata makerOrder1, OrderTypes.MakerOrder calldata makerOrder2)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    bool numItemsValid = makerOrder2.constraints[0] == makerOrder1.constraints[0] &&\\n      makerOrder2.constraints[0] == 1 &&\\n      makerOrder2.nfts.length == 1 &&\\n      makerOrder2.nfts[0].tokens.length == 1 &&\\n      makerOrder1.nfts.length == 1 &&\\n      makerOrder1.nfts[0].tokens.length == 1;\\n    bool _isTimeValid = makerOrder2.constraints[3] <= block.timestamp &&\\n      makerOrder2.constraints[4] >= block.timestamp &&\\n      makerOrder1.constraints[3] <= block.timestamp &&\\n      makerOrder1.constraints[4] >= block.timestamp;\\n    bool _isPriceValid = false;\\n    if (makerOrder1.isSellOrder) {\\n      _isPriceValid = _getCurrentPrice(makerOrder2) >= _getCurrentPrice(makerOrder1);\\n    } else {\\n      _isPriceValid = _getCurrentPrice(makerOrder2) <= _getCurrentPrice(makerOrder1);\\n    }\\n    return numItemsValid && _isTimeValid && doItemsIntersect(makerOrder1.nfts, makerOrder2.nfts) && _isPriceValid;\\n  }\\n\\n  function canExecTakeOrder(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.TakerOrder calldata takerOrder)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return (makerOrder.constraints[3] <= block.timestamp &&\\n      makerOrder.constraints[4] >= block.timestamp &&\\n      areTakerNumItemsValid(makerOrder, takerOrder) &&\\n      doItemsIntersect(makerOrder.nfts, takerOrder.nfts));\\n  }\\n\\n  // ======================================================= PUBLIC FUNCTIONS ==================================================\\n\\n  function isTimeValid(OrderTypes.MakerOrder calldata sell, OrderTypes.MakerOrder calldata buy)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return\\n      sell.constraints[3] <= block.timestamp &&\\n      sell.constraints[4] >= block.timestamp &&\\n      buy.constraints[3] <= block.timestamp &&\\n      buy.constraints[4] >= block.timestamp;\\n  }\\n\\n  function isPriceValid(OrderTypes.MakerOrder calldata sell, OrderTypes.MakerOrder calldata buy)\\n    public\\n    view\\n    returns (bool, uint256)\\n  {\\n    (uint256 currentSellPrice, uint256 currentBuyPrice) = (_getCurrentPrice(sell), _getCurrentPrice(buy));\\n    return (currentBuyPrice >= currentSellPrice, currentBuyPrice);\\n  }\\n\\n  function areNumItemsValid(\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy,\\n    OrderTypes.OrderItem[] calldata constructedNfts\\n  ) public pure returns (bool) {\\n    uint256 numConstructedItems = 0;\\n    uint256 nftsLength = constructedNfts.length;\\n    for (uint256 i = 0; i < nftsLength; ) {\\n      unchecked {\\n        numConstructedItems += constructedNfts[i].tokens.length;\\n        ++i;\\n      }\\n    }\\n    return numConstructedItems >= buy.constraints[0] && buy.constraints[0] <= sell.constraints[0];\\n  }\\n\\n  function areTakerNumItemsValid(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.TakerOrder calldata takerOrder)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 numTakerItems = 0;\\n    uint256 nftsLength = takerOrder.nfts.length;\\n    for (uint256 i = 0; i < nftsLength; ) {\\n      unchecked {\\n        numTakerItems += takerOrder.nfts[i].tokens.length;\\n        ++i;\\n      }\\n    }\\n    return makerOrder.constraints[0] == numTakerItems;\\n  }\\n\\n  function doItemsIntersect(OrderTypes.OrderItem[] calldata order1Nfts, OrderTypes.OrderItem[] calldata order2Nfts)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 order1NftsLength = order1Nfts.length;\\n    uint256 order2NftsLength = order2Nfts.length;\\n    // case where maker/taker didn't specify any items\\n    if (order1NftsLength == 0 || order2NftsLength == 0) {\\n      return true;\\n    }\\n\\n    uint256 numCollsMatched = 0;\\n    // check if taker has all items in maker\\n    for (uint256 i = 0; i < order2NftsLength; ) {\\n      for (uint256 j = 0; j < order1NftsLength; ) {\\n        if (order1Nfts[j].collection == order2Nfts[i].collection) {\\n          // increment numCollsMatched\\n          unchecked {\\n            ++numCollsMatched;\\n          }\\n          // check if tokenIds intersect\\n          bool tokenIdsIntersect = doTokenIdsIntersect(order1Nfts[j], order2Nfts[i]);\\n          require(tokenIdsIntersect, 'tokenIds dont intersect');\\n          // short circuit\\n          break;\\n        }\\n        unchecked {\\n          ++j;\\n        }\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return numCollsMatched == order2NftsLength;\\n  }\\n\\n  function doTokenIdsIntersect(OrderTypes.OrderItem calldata item1, OrderTypes.OrderItem calldata item2)\\n    public\\n    pure\\n    returns (bool)\\n  {\\n    uint256 item1TokensLength = item1.tokens.length;\\n    uint256 item2TokensLength = item2.tokens.length;\\n    // case where maker/taker didn't specify any tokenIds for this collection\\n    if (item1TokensLength == 0 || item2TokensLength == 0) {\\n      return true;\\n    }\\n    uint256 numTokenIdsPerCollMatched = 0;\\n    for (uint256 k = 0; k < item2TokensLength; ) {\\n      for (uint256 l = 0; l < item1TokensLength; ) {\\n        if (\\n          item1.tokens[l].tokenId == item2.tokens[k].tokenId && item1.tokens[l].numTokens == item2.tokens[k].numTokens\\n        ) {\\n          // increment numTokenIdsPerCollMatched\\n          unchecked {\\n            ++numTokenIdsPerCollMatched;\\n          }\\n          // short circuit\\n          break;\\n        }\\n        unchecked {\\n          ++l;\\n        }\\n      }\\n      unchecked {\\n        ++k;\\n      }\\n    }\\n\\n    return numTokenIdsPerCollMatched == item2TokensLength;\\n  }\\n\\n  /**\\n   * @notice Return protocol fee for this complication\\n   * @return protocol fee\\n   */\\n  function getProtocolFee() external view override returns (uint256) {\\n    return PROTOCOL_FEE;\\n  }\\n\\n  // ============================================== INTERNAL FUNCTIONS ===================================================\\n\\n  function _sumCurrentPrices(OrderTypes.MakerOrder[] calldata orders) internal view returns (uint256) {\\n    uint256 sum = 0;\\n    uint256 ordersLength = orders.length;\\n    for (uint256 i = 0; i < ordersLength; ) {\\n      sum += _getCurrentPrice(orders[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return sum;\\n  }\\n\\n  function _getCurrentPrice(OrderTypes.MakerOrder calldata order) internal view returns (uint256) {\\n    (uint256 startPrice, uint256 endPrice) = (order.constraints[1], order.constraints[2]);\\n    uint256 duration = order.constraints[4] - order.constraints[3];\\n    uint256 priceDiff = startPrice > endPrice ? startPrice - endPrice : endPrice - startPrice;\\n    if (priceDiff == 0 || duration == 0) {\\n      return startPrice;\\n    }\\n    uint256 elapsedTime = block.timestamp - order.constraints[3];\\n    uint256 PRECISION = 10**4; // precision for division; similar to bps\\n    uint256 portionBps = elapsedTime > duration ? PRECISION : ((elapsedTime * PRECISION) / duration);\\n    priceDiff = (priceDiff * portionBps) / PRECISION;\\n    return startPrice > endPrice ? startPrice - priceDiff : startPrice + priceDiff;\\n  }\\n\\n  // ====================================== ADMIN FUNCTIONS ======================================\\n\\n  function setProtocolFee(uint256 _protocolFee) external onlyOwner {\\n    PROTOCOL_FEE = _protocolFee;\\n    emit NewProtocolFee(_protocolFee);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/OrderTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n/**\\n * @title OrderTypes\\n */\\nlibrary OrderTypes {\\n  struct TokenInfo {\\n    uint256 tokenId;\\n    uint256 numTokens;\\n  }\\n\\n  struct OrderItem {\\n    address collection;\\n    TokenInfo[] tokens;\\n  }\\n\\n  struct MakerOrder {\\n    // is order sell or buy\\n    bool isSellOrder;\\n    address signer;\\n    // total length: 7\\n    // in order:\\n    // numItems - min/max number of items in the order\\n    // start and end prices in wei\\n    // start and end times in block.timestamp\\n    // minBpsToSeller\\n    // nonce\\n    uint256[] constraints;\\n    // collections and tokenIds\\n    OrderItem[] nfts;\\n    // address of complication for trade execution (e.g. OrderBook), address of the currency (e.g., WETH)\\n    address[] execParams;\\n    // additional parameters like rarities, private sale buyer etc\\n    bytes extraParams;\\n    // uint8 v: parameter (27 or 28), bytes32 r, bytes32 s\\n    bytes sig;\\n  }\\n\\n  struct TakerOrder {\\n    bool isSellOrder;\\n    OrderItem[] nfts;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IComplication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport {OrderTypes} from '../libs/OrderTypes.sol';\\n\\ninterface IComplication {\\n  function canExecMatchOrder(\\n    OrderTypes.MakerOrder calldata sell,\\n    OrderTypes.MakerOrder calldata buy,\\n    OrderTypes.OrderItem[] calldata constructedNfts\\n  ) external view returns (bool, uint256);\\n\\n  function canExecMatchOneToMany(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.MakerOrder[] calldata manyMakerOrders)\\n    external\\n    view\\n    returns (bool);\\n\\n  function canExecMatchOneToOne(OrderTypes.MakerOrder calldata makerOrder1, OrderTypes.MakerOrder calldata makerOrder2)\\n    external\\n    view\\n    returns (bool);\\n\\n  function canExecTakeOrder(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.TakerOrder calldata takerOrder)\\n    external\\n    view\\n    returns (bool);\\n\\n  function getProtocolFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"errorBound\",\"type\":\"uint256\"}],\"name\":\"NewErrorbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"constructedNfts\",\"type\":\"tuple[]\"}],\"name\":\"areNumItemsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerOrder\",\"type\":\"tuple\"}],\"name\":\"areTakerNumItemsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder[]\",\"name\":\"manyMakerOrders\",\"type\":\"tuple[]\"}],\"name\":\"canExecMatchOneToMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder2\",\"type\":\"tuple\"}],\"name\":\"canExecMatchOneToOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"constructedNfts\",\"type\":\"tuple[]\"}],\"name\":\"canExecMatchOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerOrder\",\"type\":\"tuple\"}],\"name\":\"canExecTakeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"order1Nfts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"order2Nfts\",\"type\":\"tuple[]\"}],\"name\":\"doItemsIntersect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem\",\"name\":\"item1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem\",\"name\":\"item2\",\"type\":\"tuple\"}],\"name\":\"doTokenIdsIntersect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"isPriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"sell\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSellOrder\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"constraints\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderTypes.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OrderTypes.OrderItem[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"execParams\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"buy\",\"type\":\"tuple\"}],\"name\":\"isTimeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InfinityOrderBookComplication", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "99999999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000fa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}