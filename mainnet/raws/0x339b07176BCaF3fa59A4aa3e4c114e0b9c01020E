{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/NFTsBatchReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"../managers/firework/interfaces/ISimpleERC721Project.sol\\\";\\n\\ninterface IERC721 {\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev totalSupply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\ninterface IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n}\\n\\ncontract NFTsBatchReader {\\n    constructor() {}\\n\\n    function balancesOf(IERC721 nft, address[] calldata owners) external view returns (uint256[] memory) {\\n        uint256[] memory balances = new uint256[](owners.length);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            balances[i] = nft.balanceOf(owners[i]);\\n        }\\n        return balances;\\n    }\\n\\n    function tokenURIs(IERC721 nft, uint256[] calldata tokenIds) external view returns (string[] memory) {\\n        string[] memory res = new string[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            try nft.tokenURI(tokenIds[i]) returns (string memory uri) {\\n                res[i] = uri;\\n            } catch Error(\\n                string memory /*reason*/\\n            ) {\\n                res[i] = \\\"\\\";\\n            }\\n        }\\n        return res;\\n    }\\n\\n    function totalSupplies(IERC721[] calldata nfts) external view returns (uint256[] memory) {\\n        uint256[] memory supplies = new uint256[](nfts.length);\\n        for (uint256 i = 0; i < nfts.length; i++) {\\n            supplies[i] = nfts[i].totalSupply();\\n        }\\n        return supplies;\\n    }\\n\\n    function totalSupplies1155(IERC1155 nft, uint256[] calldata tokenIds) external view returns (uint256[] memory) {\\n        uint256[] memory supplies = new uint256[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            supplies[i] = nft.totalSupply(tokenIds[i]);\\n        }\\n        return supplies;\\n    }\\n\\n    function uris(IERC1155 nft1155, uint256[] calldata tokenIds) external view returns (string[] memory) {\\n        string[] memory res = new string[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            try nft1155.uri(tokenIds[i]) returns (string memory u) {\\n                res[i] = u;\\n            } catch Error(\\n                string memory /*reason*/\\n            ) {\\n                res[i] = \\\"\\\";\\n            }\\n        }\\n        return res;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/managers/firework/interfaces/ISimpleERC721Project.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface ISimpleERC721Project {\\n    /**\\n     * @dev mint a token. Can only be called by a registered manager. set uri to \\\"\\\" to use default uri\\n     * Returns tokenId minted\\n     */\\n    function managerMint(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered manager.\\n     * Returns tokenIds minted\\n     */\\n    function managerMintBatch(address[] calldata recipients, string[] calldata uris)\\n        external\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be manager) gets approval\\n     * from the manager before transferring\\n     */\\n    function managerSetApproveTransfer(bool enabled) external;\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function managerBurnBatch(address caller, uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev totalSupply\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"balancesOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"nfts\",\"type\":\"address[]\"}],\"name\":\"totalSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"totalSupplies1155\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"nft1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"uris\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTsBatchReader", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}