{"status": "1", "message": "OK", "result": [{"SourceCode": "// Litentry: Modified based on\r\n// https://solidity-by-example.org/app/multi-sig-wallet/\r\n\r\n// data:template\r\n//\r\n// (1) 0xcb10f215\r\n    /**\r\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\r\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param handlerAddress Address of handler resource will be set for.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n// Function: adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress)\r\n// MethodID: 0xcb10f215\r\n// [0]:  00000000000000000000000050272b13efbb3da7c25cf5b98339efbd19a2a855\r\n// [1]:  0000000000000000000000000000000000000000000000000000000000000001\r\n// [2]:  00000000000000000000000027b981dd46ae0bfdda6677ddc75bce6995fca5bc\r\n//\r\n//\r\n//\r\n// (2) 0x4e056005\r\n    /**\r\n        @notice Modifies the number of votes required for a proposal to be considered passed.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param newThreshold Value {_relayerThreshold} will be changed to.\r\n        @notice Emits {RelayerThresholdChanged} event.\r\n     */\r\n// Function: adminChangeRelayerThreshold(uint256 newThreshold)\r\n// MethodID: 0x4e056005\r\n// [0]:  0000000000000000000000000000000000000000000000000000000000000001\r\n//\r\n//\r\n//\r\n// (3) 0xcdb0f73a\r\n    /**\r\n        @notice Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param relayerAddress Address of relayer to be added.\r\n        @notice Emits {RelayerAdded} event.\r\n     */\r\n// Function: adminAddRelayer(address relayerAddress)\r\n// MethodID: 0xcdb0f73a\r\n// [0]:  0000000000000000000000002aa87a1dd75df16a6b22dd1d94ae6c3d3be40e88\r\n//\r\n//\r\n//\r\n// (4) 0x9d82dd63\r\n    /**\r\n        @notice Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param relayerAddress Address of relayer to be removed.\r\n        @notice Emits {RelayerRemoved} event.\r\n     */\r\n// Function: adminRemoveRelayer(address relayerAddress)\r\n// MethodID: 0x9d82dd63\r\n// [0]:  0000000000000000000000002aa87a1dd75df16a6b22dd1d94ae6c3d3be40e88\r\n//\r\n//\r\n//\r\n// (5) 0x80ae1c28\r\n    /**\r\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\r\n        @notice Only callable by an address that currently has the admin role.\r\n     */\r\n// Function adminPauseTransfers()\r\n// MethodID: 0x80ae1c28\r\n//\r\n//\r\n//\r\n// (6) 0xffaac0eb\r\n    /**\r\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\r\n        @notice Only callable by an address that currently has the admin role.\r\n     */\r\n// Function adminUnpauseTransfers()\r\n// MethodID: 0xffaac0eb\r\n//\r\n//\r\n//\r\n// (7) 0x5e1fab0f\r\n    /**\r\n        @notice Removes admin role from {msg.sender} and grants it to {newAdmin}.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param newAdmin Address that admin role will be granted to.\r\n     */\r\n// Function renounceAdmin(address newAdmin)\r\n// MethodID: 0x5e1fab0f\r\n// [0]:  0000000000000000000000002aa87a1dd75df16a6b22dd1d94ae6c3d3be40e88\r\n//\r\n//\r\n//\r\n// (8) 0x17f03ce5\r\n    /**\r\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n        @param chainID ID of chain deposit originated from.\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n        @param dataHash Hash of data originally provided when deposit was made.\r\n        @notice Proposal must be past expiry threshold.\r\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\r\n     */\r\n// Function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash)\r\n// MethodID: 0x17f03ce5\r\n// [0]:  0000000000000000000000000000000000000000000000000000000000000003\r\n// [1]:  0000000000000000000000000000000000000000000000000000000000000007\r\n// [2]:  00000000000000000000000000000063a7e2be78898ba83824b0c0cc8dfb6001\r\n//\r\n//\r\n//\r\n// (9) 0xc2d0c12d\r\n    /**\r\n        @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\r\n        This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\r\n        @param addrs Array of addresses to transfer {amounts} to.\r\n        @param amounts Array of amonuts to transfer to {addrs}.\r\n     */\r\n// Function transferFunds(address payable[] calldata addrs, uint[] calldata amounts)\r\n// MethodID: 0xc2d0c12d\r\n// Too complicated. See official document for reference\r\n// https://docs.soliditylang.org/en/develop/abi-spec.html#use-of-dynamic-types\r\n//\r\n//\r\n//\r\n// (10) 0x780cf004\r\n    /**\r\n        @notice Used to manually withdraw funds from ERC safes.\r\n        @param handlerAddress Address of handler to withdraw from.\r\n        @param tokenAddress Address of token to withdraw.\r\n        @param recipient Address to withdraw tokens to.\r\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.\r\n     */\r\n// Function adminWithdraw(address handlerAddress, address tokenAddress, address recipient, uint256 amountOrTokenID)\r\n// MethodID: 0x780cf004\r\n// [0]:  00000000000000000000000050272b13efbb3da7c25cf5b98339efbd19a2a855\r\n// [1]:  00000000000000000000000027b981dd46ae0bfdda6677ddc75bce6995fca5bc\r\n// [2]:  0000000000000000000000002aa87a1dd75df16a6b22dd1d94ae6c3d3be40e88\r\n// [3]:  00000000000000000000000000000000000000000000000053444835ec580000\r\n//\r\n//\r\n//\r\n// (11) 0x7f3e3744\r\n    /**\r\n        @notice Changes deposit fee.\r\n        @notice Only callable by admin.\r\n        @param newFee Value {_fee} will be updated to.\r\n     */\r\n// Function adminChangeFee(uint newFee)\r\n// MethodID: 0x7f3e3744\r\n// [0]:  00000000000000000000000000000000000000000000000053444835ec580000\r\n//\r\n//\r\n//\r\n// (12) 0x8c0c2631\r\n    /**\r\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param handlerAddress Address of handler resource will be set for.\r\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n// Function adminSetBurnable(address handlerAddress, address tokenAddress)\r\n// MethodID: 0x8c0c2631\r\n// [0]:  00000000000000000000000050272b13efbb3da7c25cf5b98339efbd19a2a855\r\n// [1]:  00000000000000000000000027b981dd46ae0bfdda6677ddc75bce6995fca5bc\r\n//\r\n//\r\n//\r\n// (13) 0xe8437ee7\r\n    /**\r\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\r\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param handlerAddress Address of handler resource will be set for.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n// Function adminSetGenericResource(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig)\r\n// MethodID: 0xe8437ee7\r\n// [0]:  00000000000000000000000050272b13efbb3da7c25cf5b98339efbd19a2a855\r\n// [1]:  00000000000000000000000000000063a7e2be78898ba83824b0c0cc8dfb6001\r\n// [2]:  00000000000000000000000027b981dd46ae0bfdda6677ddc75bce6995fca5bc\r\n// [3]:  ****************************************************************\r\n// [4]:  ****************************************************************\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ncontract MultiSigWallet {\r\n    event Deposit(address indexed sender, uint amount, uint balance);\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint indexed txIndex,\r\n        address indexed to,\r\n        uint value,\r\n        bytes data\r\n    );\r\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\r\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\r\n    event addProposer(address indexed proposer,address indexed owner);\r\n    event removeProposer(address indexed proposer, address indexed owner);\r\n\r\n    address[] public owners;\r\n    mapping(address => bool) public isOwner;\r\n    mapping(address => bool) public isProposer;\r\n    uint public numConfirmationsRequired;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n        uint numConfirmations;\r\n    }\r\n\r\n    // mapping from tx index => owner => bool\r\n    mapping(uint => mapping(address => bool)) public isConfirmed;\r\n\r\n    Transaction[] public transactions;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint _txIndex) {\r\n        require(_txIndex < transactions.length, \"tx does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _owners, uint _numConfirmationsRequired) {\r\n        require(_owners.length > 0, \"owners required\");\r\n        require(\r\n            _numConfirmationsRequired > 0 &&\r\n                _numConfirmationsRequired <= _owners.length,\r\n            \"invalid number of required confirmations\"\r\n        );\r\n\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            address owner = _owners[i];\r\n\r\n            require(owner != address(0), \"invalid owner\");\r\n            require(!isOwner[owner], \"owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n        }\r\n\r\n        numConfirmationsRequired = _numConfirmationsRequired;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Deposit(msg.sender, msg.value, address(this).balance);\r\n    }\r\n\r\n    function addProposers(address[] calldata _proposers) public onlyOwner {\r\n        for (uint i = 0; i < _proposers.length; i++) {\r\n            require(!isProposer[_proposers[i]], \"proposer already\");\r\n            isProposer[_proposers[i]] = true;\r\n            emit addProposer(_proposers[i], msg.sender);\r\n        }\r\n    }\r\n    \r\n    function removeProposers(address[] calldata _proposers) public onlyOwner {\r\n        for (uint i = 0; i < _proposers.length; i++) {\r\n            require(isProposer[_proposers[i]], \"not proposer already\");\r\n            isProposer[_proposers[i]] = false;\r\n            emit removeProposer(_proposers[i], msg.sender);\r\n        }\r\n    }\r\n\r\n    function submitTransaction(\r\n        address _to,\r\n        uint _value,\r\n        bytes memory _data\r\n    ) public {\r\n        require(isOwner[msg.sender] || isProposer[msg.sender], \"not owner/proposer\");\r\n\r\n\r\n        uint txIndex = transactions.length;\r\n\r\n        transactions.push(\r\n            Transaction({\r\n                to: _to,\r\n                value: _value,\r\n                data: _data,\r\n                executed: false,\r\n                numConfirmations: 0\r\n            })\r\n        );\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\r\n    }\r\n\r\n    function confirmTransaction(uint _txIndex)\r\n        public\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n        notConfirmed(_txIndex)\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n        transaction.numConfirmations += 1;\r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function executeTransaction(uint _txIndex)\r\n        public\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(\r\n            transaction.numConfirmations >= numConfirmationsRequired,\r\n            \"cannot execute tx\"\r\n        );\r\n\r\n        transaction.executed = true;\r\n\r\n        (bool success, ) = transaction.to.call{value: transaction.value}(\r\n            transaction.data\r\n        );\r\n        require(success, \"tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    function revokeConfirmation(uint _txIndex)\r\n        public\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\r\n\r\n        transaction.numConfirmations -= 1;\r\n        isConfirmed[_txIndex][msg.sender] = false;\r\n\r\n        emit RevokeConfirmation(msg.sender, _txIndex);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() public view returns (uint) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function getTransaction(uint _txIndex)\r\n        public\r\n        view\r\n        returns (\r\n            address to,\r\n            uint value,\r\n            bytes memory data,\r\n            bool executed,\r\n            uint numConfirmations\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.numConfirmations\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addProposer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeProposer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_proposers\",\"type\":\"address[]\"}],\"name\":\"addProposers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_proposers\",\"type\":\"address[]\"}],\"name\":\"removeProposers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSigWallet", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000006d8cb537b96c6969f9b42fda95ee3e08b6c4fbc9000000000000000000000000360c15d7f56f29e310d61d67c660c05b406f3041000000000000000000000000676a808f7273f9af4fd6b08ca24fe1206acd9e80", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://819667106229afc6f4fb509a505554174ddbafd2785e237d5f1ea4e311a840bd"}]}