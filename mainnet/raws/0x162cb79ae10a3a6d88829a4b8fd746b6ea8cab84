{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/price/PriceModuleV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.13;\\r\\n\\r\\nimport \\\"./ChainlinkService.sol\\\";\\r\\nimport \\\"../interfaces/IPriceModule.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../interfaces/curve/IAddressProvider.sol\\\";\\r\\nimport \\\"../interfaces/curve/IRegistry.sol\\\";\\r\\nimport \\\"../interfaces/yearn/IVault.sol\\\";\\r\\nimport \\\"../interfaces/yieldster/IYieldsterVault.sol\\\";\\r\\nimport \\\"../interfaces/compound/IUniswapAnchoredView.sol\\\";\\r\\nimport \\\"../interfaces/aave/Iatoken.sol\\\";\\r\\n\\r\\ncontract PriceModuleV5 is ChainlinkService, Initializable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public priceModuleManager; // Address of the Price Module Manager\\r\\n    address public curveAddressProvider; // Address of the Curve Address provider contract.\\r\\n    address public uniswapAnchoredView; // Address of the Uniswap Anchored view. Used by Compound.\\r\\n\\r\\n    struct Token {\\r\\n        address feedAddress;\\r\\n        uint256 tokenType;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    mapping(address => Token) tokens; // Mapping from address to Token Information\\r\\n    mapping(address => address) wrappedToUnderlying; // Mapping from wrapped token to underlying\\r\\n\\r\\n    /// @dev Function to initialize priceModuleManager and curveAddressProvider.\\r\\n    function initialize() public {\\r\\n        priceModuleManager = msg.sender;\\r\\n        curveAddressProvider = 0x0000000022D53366457F9d5E68Ec105046FC4383;\\r\\n        uniswapAnchoredView = 0x65c816077C29b557BEE980ae3cC2dCE80204A0C5;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to change the address of UniswapAnchoredView Address provider contract.\\r\\n    /// @param _uniswapAnchoredView Address of new UniswapAnchoredView provider contract.\\r\\n    function changeUniswapAnchoredView(address _uniswapAnchoredView) external {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        uniswapAnchoredView = _uniswapAnchoredView;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to change the address of Curve Address provider contract.\\r\\n    /// @param _crvAddressProvider Address of new Curve Address provider contract.\\r\\n    function changeCurveAddressProvider(address _crvAddressProvider) external {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        curveAddressProvider = _crvAddressProvider;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set new Price Module Manager.\\r\\n    /// @param _manager Address of new Manager.\\r\\n    function setManager(address _manager) external {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        priceModuleManager = _manager;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add a token to Price Module.\\r\\n    /// @param _tokenAddress Address of the token.\\r\\n    /// @param _feedAddress Chainlink feed address of the token if it has a Chainlink price feed.\\r\\n    /// @param _tokenType Type of token.\\r\\n    function addToken(\\r\\n        address _tokenAddress,\\r\\n        address _feedAddress,\\r\\n        uint256 _tokenType\\r\\n    ) external {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        Token memory newToken = Token({\\r\\n            feedAddress: _feedAddress,\\r\\n            tokenType: _tokenType,\\r\\n            created: true\\r\\n        });\\r\\n        tokens[_tokenAddress] = newToken;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add tokens to Price Module in batch.\\r\\n    /// @param _tokenAddress Address List of the tokens.\\r\\n    /// @param _feedAddress Chainlink feed address list of the tokens if it has a Chainlink price feed.\\r\\n    /// @param _tokenType Type of token list.\\r\\n    function addTokenInBatches(\\r\\n        address[] memory _tokenAddress,\\r\\n        address[] memory _feedAddress,\\r\\n        uint256[] memory _tokenType\\r\\n    ) external {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        for (uint256 i = 0; i < _tokenAddress.length; i++) {\\r\\n            Token memory newToken = Token({\\r\\n                feedAddress: address(_feedAddress[i]),\\r\\n                tokenType: _tokenType[i],\\r\\n                created: true\\r\\n            });\\r\\n            tokens[address(_tokenAddress[i])] = newToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to retrieve price of a token from Chainlink price feed.\\r\\n    /// @param _feedAddress Chainlink feed address the tokens.\\r\\n    function getPriceFromChainlink(address _feedAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (int256 price, , uint8 decimals) = getLatestPrice(_feedAddress);\\r\\n        if (decimals < 18) {\\r\\n            return (uint256(price)).mul(10**uint256(18 - decimals));\\r\\n        } else if (decimals > 18) {\\r\\n            return (uint256(price)).div(uint256(decimals - 18));\\r\\n        } else {\\r\\n            return uint256(price);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to get price of a token.\\r\\n    ///     Token Types\\r\\n    ///     1 = Token with a Chainlink price feed.\\r\\n    ///     2 = USD based Curve Liquidity Pool token.\\r\\n    ///     3 = Yearn Vault Token.\\r\\n    ///     4 = Yieldster Strategy Token.\\r\\n    ///     5 = Yieldster Vault Token.\\r\\n    ///     6 = Ether based Curve Liquidity Pool Token.\\r\\n    ///     7 = Euro based Curve Liquidity Pool Token.\\r\\n    ///     8 = BTC based Curve Liquidity Pool Token.\\r\\n    ///     9 = Compound based Token.\\r\\n    /// @param _tokenAddress Address of the token..\\r\\n\\r\\n    function getUSDPrice(address _tokenAddress) public view returns (uint256) {\\r\\n        require(tokens[_tokenAddress].created, \\\"Token not present\\\");\\r\\n\\r\\n        if (tokens[_tokenAddress].tokenType == 1) {\\r\\n            return getPriceFromChainlink(tokens[_tokenAddress].feedAddress);\\r\\n        } else if (tokens[_tokenAddress].tokenType == 2) {\\r\\n            return\\r\\n                IRegistry(IAddressProvider(curveAddressProvider).get_registry())\\r\\n                    .get_virtual_price_from_lp_token(_tokenAddress);\\r\\n        } else if (tokens[_tokenAddress].tokenType == 3) {\\r\\n            address token = IVault(_tokenAddress).token();\\r\\n            uint256 tokenPrice = getUSDPrice(token);\\r\\n            return\\r\\n                (tokenPrice.mul(IVault(_tokenAddress).pricePerShare())).div(\\r\\n                    1e18\\r\\n                );\\r\\n        } else if (tokens[_tokenAddress].tokenType == 5) {\\r\\n            return IYieldsterVault(_tokenAddress).tokenValueInUSD();\\r\\n        } else if (tokens[_tokenAddress].tokenType == 6) {\\r\\n            uint256 priceInEther = getPriceFromChainlink(\\r\\n                tokens[_tokenAddress].feedAddress\\r\\n            );\\r\\n            uint256 etherToUSD = getUSDPrice(address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));\\r\\n            return (priceInEther.mul(etherToUSD)).div(1e18);\\r\\n        } else if (tokens[_tokenAddress].tokenType == 7) {\\r\\n            uint256 lpPriceEuro = IRegistry(\\r\\n                IAddressProvider(curveAddressProvider).get_registry()\\r\\n            ).get_virtual_price_from_lp_token(_tokenAddress);\\r\\n            uint256 euroToUSD = getUSDPrice(\\r\\n                address(0xb49f677943BC038e9857d61E7d053CaA2C1734C1) // Address representing Euro.\\r\\n            );\\r\\n            return (lpPriceEuro.mul(euroToUSD)).div(1e18);\\r\\n        } else if (tokens[_tokenAddress].tokenType == 8) {\\r\\n            uint256 lpPriceBTC = IRegistry(\\r\\n                IAddressProvider(curveAddressProvider).get_registry()\\r\\n            ).get_virtual_price_from_lp_token(_tokenAddress);\\r\\n            uint256 btcToUSD = getUSDPrice(\\r\\n                address(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c) // Address representing BTC.\\r\\n            );\\r\\n            return (lpPriceBTC.mul(btcToUSD)).div(1e18);\\r\\n        }\\r\\n        else if (tokens[_tokenAddress].tokenType == 9) {\\r\\n            return\\r\\n                IUniswapAnchoredView(uniswapAnchoredView).getUnderlyingPrice(\\r\\n                    _tokenAddress\\r\\n                ); // Address of cToken (compound )\\r\\n        } else if (tokens[_tokenAddress].tokenType == 10) {\\r\\n            address underlyingAsset = Iatoken(_tokenAddress)\\r\\n                .UNDERLYING_ASSET_ADDRESS();\\r\\n            return getUSDPrice(underlyingAsset);\\r\\n            // Address of aToken (aave)\\r\\n        } else if (tokens[_tokenAddress].tokenType == 11) {\\r\\n            address underlyingAsset = wrappedToUnderlying[_tokenAddress];\\r\\n            return getUSDPrice(underlyingAsset); // Address of generalized underlying token. Eg, Convex\\r\\n        } else revert(\\\"Token not present\\\");\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add wrapped token to Price Module\\r\\n    /// @param _wrappedToken Address of wrapped token\\r\\n    /// @param _underlying Address of underlying token\\r\\n    function addWrappedToken(address _wrappedToken, address _underlying)\\r\\n        external\\r\\n    {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        wrappedToUnderlying[_wrappedToken] = _underlying;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add wrapped token to Price Module in batches\\r\\n    /// @param _wrappedTokens Address of wrapped tokens\\r\\n    /// @param _underlyings Address of underlying tokens\\r\\n    \\r\\n    function addWrappedTokenInBatches(\\r\\n        address[] memory _wrappedTokens,\\r\\n        address[] memory _underlyings\\r\\n    ) external {\\r\\n        require(msg.sender == priceModuleManager, \\\"Not Authorized\\\");\\r\\n        for (uint256 i = 0; i < _wrappedTokens.length; i++) {\\r\\n            wrappedToUnderlying[address(_wrappedTokens[i])] = address(\\r\\n                _underlyings[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/price/ChainlinkService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.13;\\r\\nimport \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract ChainlinkService {  \\r\\n  \\r\\n    function getLatestPrice(address feedAddress) \\r\\n        public \\r\\n        view \\r\\n        returns (int, uint, uint8) \\r\\n    {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(feedAddress);\\r\\n        ( ,int price, ,uint timeStamp, ) = priceFeed.latestRoundData();\\r\\n        uint8 decimal = priceFeed.decimals();\\r\\n        return (price, timeStamp, decimal);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/yieldster/IYieldsterVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IYieldsterVault {\\r\\n    function tokenValueInUSD() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/yearn/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IVault {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function pricePerShare() external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256) external;\\r\\n\\r\\n    function depositAll() external;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/curve/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function get_virtual_price_from_lp_token(address)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/curve/IAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IAddressProvider {\\r\\n    function get_registry() external view returns (address);\\r\\n    function get_address(uint256) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/compound/IUniswapAnchoredView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n\\r\\ninterface IUniswapAnchoredView {\\r\\n    function getUnderlyingPrice(address) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/aave/Iatoken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface Iatoken {\\r\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPriceModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IPriceModule {\\r\\n    function getUSDPrice(address) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feedAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenType\",\"type\":\"uint256[]\"}],\"name\":\"addTokenInBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"addWrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"addWrappedTokenInBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crvAddressProvider\",\"type\":\"address\"}],\"name\":\"changeCurveAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapAnchoredView\",\"type\":\"address\"}],\"name\":\"changeUniswapAnchoredView\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveAddressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceModuleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAnchoredView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PriceModuleV5", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "petersburg", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}