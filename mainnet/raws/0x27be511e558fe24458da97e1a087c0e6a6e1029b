{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\n// If you'd like to support me, send ETH here. Thank you for your support! ETH address: 0x88e76a35f42ee076B06356fEB1e9586123166fe6\r\n// \u5982\u679c\u4f60\u60f3\u652f\u6301\u6211\uff0c\u8bf7\u53d1\u9001\u4e00\u4e9bETH\u7ed9\u6211\u3002\u8c22\u8c22\u4f60\u7684\u652f\u6301\uff01\u4ee5\u592a\u574a\u5730\u5740: 0x88e76a35f42ee076B06356fEB1e9586123166fe6\r\n\r\n// Telegram: https://t.me/SophonGo\r\n// \u7535    \u62a5\uff1ahttps://t.me/SophonGo\r\n\r\ninterface ERC20 { \r\n\r\n    function claim() external;\r\n\r\n    function transfer(address recipient, uint256 amount) external;\r\n}\r\n\r\ncontract BatchClaim {\r\n\r\n    address public owner;\r\n\r\n    constructor() payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* Batch claim (Note: before calling, please make sure that the manual claim can be received normally. \r\n       When the total number of claims exceeds 101010, please do not use the claim of this contract)*/\r\n    /* 0x00 \u6279\u91cfClaim(\u6ce8: \u8c03\u7528\u524d\uff0c\u8bf7\u52a1\u5fc5\u786e\u4fdd\u624b\u52a8Claim\u80fd\u6b63\u5e38\u9886\u53d6, \u5f53\u603b\u7684\u9886\u53d6\u6b21\u6570\u8d85\u8fc7: 101010\u6b21, \u8bf7\u4e0d\u8981\u5728\u4f7f\u7528\u672c\u5408\u7ea6Claim) */\r\n\r\n    function batchClaim(uint amount) external {\r\n        for(uint i = 0; i < amount; i++){\r\n            new Claim(msg.sender);\r\n        }\r\n    }\r\n\r\n    function kill() external onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, 'You are not owner');\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Claim {\r\n    \r\n    constructor(address _owner) payable {\r\n\r\n        /* 0x01 Build token instance */\r\n        /* 0x01 \u6784\u5efaToken\u5b9e\u4f8b */\r\n\r\n        // Goerli Testnet Network Token: 0x27be511e558fe24458da97e1a087c0e6a6e1029b\r\n        // Goerli \u6d4b\u8bd5\u7f51 \u4ee3\u5e01: 0x27be511e558fe24458da97e1a087c0e6a6e1029b\r\n\r\n        // Eth Main Network Token: 0x1c7E83f8C581a967940DBfa7984744646AE46b29\r\n        // Eth \u4e3b\u7f51 \u4ee3\u5e01: 0x1c7E83f8C581a967940DBfa7984744646AE46b29\r\n\r\n        ERC20 randromToken = ERC20(0x1c7E83f8C581a967940DBfa7984744646AE46b29);\r\n\r\n        /* 0x02 Execute claim to receive airdrop */\r\n        /* 0x02 \u6267\u884cClaim\u9886\u53d6\u7a7a\u6295 */\r\n\r\n        randromToken.claim();\r\n\r\n        /* 0x03 Transfer tokens to the caller's account number\r\n           (Note: to save gas fees, cancel the query of token balance, and the number of tokens transferred directly is 151200000) */\r\n        /* 0x03 \u8f6c\u79fb\u4ee3\u5e01\u5230\u8c03\u7528\u8005\u8d26\u53f7(\u6ce8: \u4e3a\u8282\u7701Gas\u8d39, \u53d6\u6d88\u67e5\u8be2\u4ee3\u5e01\u4f59\u989d, \u76f4\u63a5\u8f6c\u79fb\u4ee3\u5e01\u6570\u91cf\u4e3a: 151,200,000) */\r\n\r\n        randromToken.transfer(_owner, 151200000000000000000000000);\r\n\r\n        /* 0x04 Destroy contract */\r\n        /* 0x04 \u9500\u6bc1\u5408\u7ea6 */\r\n\r\n        selfdestruct(payable(_owner));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BatchClaim", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e78acde43e0eb3b3731bb6f2299254cc8373732304c63b777b34140cedcce066"}]}