{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.4;\r\n\r\n// ERC20-compliant wrapper token for SOX\r\ninterface TokenInterface {\r\n    function balanceOf(address _owner)  external  returns (uint256 balance);\r\n    function transfer(address _to, uint256 _amount) external  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool success);\r\n    function approve(address _spender, uint256 _amount) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external  returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n}\r\n\r\ncontract DepositSlot {\r\n    address public wrapper;\r\n    modifier onlyWrapper {\r\n        require(msg.sender == wrapper);\r\n        _;\r\n    }\r\n\r\n    constructor (address _wrapper) public {\r\n        wrapper = _wrapper;\r\n    }\r\n\r\n    function collect(address token) public onlyWrapper returns(uint256) {\r\n        uint256 amount = TokenInterface(token).balanceOf(address(this));\r\n        require(amount >= 0, \"WSOX: have no enough token.\");\r\n        TokenInterface(token).transfer(wrapper, amount);\r\n        return amount;\r\n    }\r\n}\r\n\r\ncontract SOXTokenWrapped {\r\n    string public constant version = \"0.1\";\r\n    string public constant name = \"SOX Token Wrapped\";\r\n    uint256 public totalSwap_GDO = 0;\r\n    uint256 public totalSwap_SOC = 0;\r\n    \r\n    address public owner;\r\n    mapping (address => address) public depositSlots;\r\n\r\n    // 10 : 1\r\n    address public SOX = 0xEb6026D3BEAA308D5822C44cDd2Ca8c7714237EC;\r\n    address public constant GDO = 0x16F78145AD0B9Af58747e9A97EBd99175378bd3D;\r\n    address public constant SOC = 0x2d0E95bd4795D7aCe0da3C0Ff7b706a5970eb9D3;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateSwapToken(address _swapToken) public returns(address){\r\n        require(msg.sender == owner, \"WSOX: only owner.\");\r\n        require(_swapToken != address(0), \"WSOC: Invalid token address.\");\r\n        SOX = _swapToken;\r\n    }\r\n\r\n    function createPersonalDepositAddress() public returns (address depositAddress) {\r\n        if (depositSlots[msg.sender] == 0) {\r\n            depositSlots[msg.sender] = new DepositSlot(address(this));\r\n        }\r\n\r\n        return depositSlots[msg.sender];\r\n    }\r\n\r\n    function getPersonalDepositAddress(address depositer) public view returns (address depositAddress) {\r\n        return depositSlots[depositer];\r\n    }\r\n\r\n    function processDeposit() public {\r\n        withdrawToken(SOC);\r\n        withdrawToken(GDO);\r\n    }\r\n\r\n    function withdrawToken(address token) internal{\r\n        address depositSlot = depositSlots[msg.sender];\r\n        require(depositSlot != 0, \"WSOX: msg.sender have no swap slot.\");\r\n        \r\n        uint256 fresh = DepositSlot(depositSlot).collect(token);\r\n        uint256 balance = TokenInterface(token).balanceOf(address(this));\r\n        \r\n        if(token == GDO && fresh > 0){\r\n            //SWAP GDO : SOX ==> 120000 : 1\r\n            require((balance >= (totalSwap_GDO + fresh)), \"WSOX: invlid GDO balance.\");\r\n            totalSwap_GDO += fresh;\r\n            swapSOX(fresh/120000);\r\n        } else if(token == SOC && fresh > 0){\r\n            //SWAP SOC : SOX ==> 1 : 1\r\n            require((balance >= (totalSwap_SOC + fresh)), \"WSOX: invlid SOC balance.\");\r\n            totalSwap_SOC += fresh;\r\n            swapSOX(fresh);\r\n        }\r\n    }\r\n\r\n    function swapSOX(uint256 amount) internal {\r\n        uint256 balance = TokenInterface(SOX).balanceOf(owner);\r\n        require(balance >= amount, \"WSOX: have no enough SOX.\");\r\n        \r\n        TokenInterface(SOX).transferFrom(owner, msg.sender, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GDO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"getPersonalDepositAddress\",\"outputs\":[{\"name\":\"depositAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSwap_SOC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOX\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapToken\",\"type\":\"address\"}],\"name\":\"updateSwapToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPersonalDepositAddress\",\"outputs\":[{\"name\":\"depositAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSwap_GDO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSlots\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "SOXTokenWrapped", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fae7d64962e8a973cf5ac883c2aae7d9a6f298f8fc7ac92c3bbb968d01d308f0"}]}