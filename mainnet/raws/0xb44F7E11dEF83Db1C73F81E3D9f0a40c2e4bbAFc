{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CryptoCitizenLiveMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT-BROUGKR\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n */\\npragma solidity 0.8.14;\\nimport {IERC721} from '@openzeppelin/contracts/interfaces/IERC721.sol';\\nimport {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {Pausable} from '@openzeppelin/contracts/security/Pausable.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport {IArtBlocks} from './IArtBlocks.sol';\\nimport {IRandomEdition} from './IRandomEdition.sol';\\ncontract CryptoCitizenLiveMint is Ownable, Pausable, ReentrancyGuard\\n{   \\n    /*-------------------*/\\n    /*  STATE VARIABLES  */\\n    /*-------------------*/\\n\\n    bytes32 private immutable _MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");                                  // Minter Role\\n    bytes32 private immutable _DEACTIVATED_ROLE = keccak256(\\\"DELISTED_ROLE\\\");                           // Deactivated Role\\n    address public immutable _BRTMULTISIG = 0xB96E81f80b3AEEf65CB6d0E280b15FD5DBE71937;                 // BRT Multisig Address (brightmoments.eth)\\n    address public _ERC20_BRT_Token = 0x9EaFE760bC0eb62f0f9c5DCa18012478d9d8B2D2;                       // BRT ERC-20 Contract Address   \\n    address public _ArtBlocksMintingContractCitizens = 0xDd06d8483868Cd0C5E69C24eEaA2A5F2bEaFd42b;      // ArtBlocks Minting Contract Citizens\\n    address public _ArtBlocksMintingContractArtists = 0x7b9a45E278b5B374bb2d96C65665d4360C97BF01;       // ArtBlocks Minting Contract Artists\\n    address public _ArtBlocksCoreContractCitizens = 0xbDdE08BD57e5C9fD563eE7aC61618CB2ECdc0ce0;         // ArtBlocks Citizen NFT Collection Contract Address\\n    address public _ArtBlocksCoreContractArtists = 0x0A1BBD57033F57E7B6743621b79fCB9Eb2CE3676;          // ArtBlocks Artist NFT Collection Contract Address \\n    address public _GoldenToken = 0xc22266Fa49E15BbE2f9622B8EEF652C5f8628A29;                           // Golden Token Contract Address\\n    uint public _ArtBlocksProjectID = 4;                                                                // ArtBlocks Project ID\\n    uint public _CurrentCityIndex;                                                                      // Current City Index\\n    uint _QRIndex = 333;                                                                                // QR Code Index\\n    bytes32 public Root;                                                                                // Merkle Root\\n\\n    /*-------------------*/\\n    /*     MAPPINGS      */\\n    /*-------------------*/\\n\\n    mapping(uint => mapping(address => bool)) public RedeemedQR;                                    // Returns If User Has BrightList Minted NFT\\n    mapping(uint => mapping(address => uint)) public QRAllocation;                                  // Returns User's QR Code Allocation\\n    mapping(uint => mapping(uint => mapping(uint => address))) public BrightListArtist;             // Returns Address Of Minting Receiver For Artist Mint \\n    mapping(uint => mapping(uint => mapping(uint => uint))) public SelectedTimeSlotArtistMintPass;  // Returns Selected TimeSlot Corresponding To Artist Mint Pass\\n    mapping(uint => mapping(uint => mapping(uint => bool))) public DelegateStatusArtist;            // Returns Delegate Status Of Artist TicketID\\n    mapping(uint => mapping(uint => mapping(uint => bool))) public MintedArtist;                    // Returns Boolean If Artist MintPass ID Has Minted Or Not\\n    mapping(uint => mapping(uint => address)) public BrightListCitizen;                             // Returns Address Of Minting Receiver For CryptoCitizen Mint\\n    mapping(uint => mapping(uint => address)) public ArtistMintPasses;                              // Returns Contract Address Of Artist Mint Pass NFT \\n    mapping(uint => mapping(uint => address)) public ArtistContracts;                               // Returns Contract Address Of Artist Collection NFT\\n    mapping(uint => mapping(uint => bool)) public MintType;                                         // Artist Mint Type (true for ArtBlocks | false for Random Edition)\\n    mapping(uint => mapping(uint => uint)) public BookingsAvailable;                                // Returns Amount Of Bookings Available For Input TimeSlot\\n    mapping(uint => mapping(uint => uint)) public SelectedTimeSlotGoldenTicket;                     // Returns Selected TimeSlot Corresponding To Golden Ticket\\n    mapping(uint => mapping(uint => bool)) public MintedCitizen;                                    // Returns Boolean If Golden Ticket ID Has Minted Or Not\\n    mapping(uint => mapping(uint => bool)) public DelegateStatusCitizen;                            // Returns Delegate Status Of Citizen TicketID\\n    mapping(address => bytes32) private Role;                                                       // BRT Minter Role Mapping\\n\\n    /*-------------------*/\\n    /*      EVENTS       */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Emitted When `Redeemer` IRL-mints CryptoCitizen Corresponding To Their Redeemed `TicketID`.\\n     **/\\n    event LiveMintComplete(address indexed Redeemer, uint TicketID, uint TokenID, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` IRL-Mints Artist Corresponding To `ArtistID`\\n     */\\n    event LiveMintCompleteArtist(address indexed Redeemer, uint ArtistID, uint TicketID, uint TokenID, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` Redeems Golden Token Corresponding To `TicketID` \\n     **/\\n    event GoldenTokenRedeemed(address indexed Redeemer, uint TicketID, uint Slot, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` Redeems Golden Token Corresponding To `TicketID` \\n     **/\\n    event QRRedeemed(address indexed Redeemer, uint TicketID, uint Slot);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` Redeems Artist Mint Pass Corresponding To `TicketID`\\n     */\\n    event ArtistMintPassRedeemed(address indexed Redeemer, uint ArtistID, uint TicketID, uint Slot, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `NewMinter` Is Added To BRT Minter List\\n     */\\n    event MinterAdded(address NewMinter);\\n\\n    /**\\n     * @dev Emitted When `RemovedMinter` Is Removed From BRT Minter List\\n     */\\n    event MinterRemoved(address RemovedMinter);\\n\\n    /**\\n     * @dev Emitted When `NewProjectID` Replaces `OldProjectID`\\n     */\\n    event ModifiedProjectID(uint OldProjectID, uint NewProjectID);\\n\\n    /**\\n     * @dev Emitted When `NewMintingAddress` Replaces `OldMintingAddress`\\n     */\\n    event ArtBlocksMintingAddressChanged(address OldMintingAddress, address NewMintingAddress);\\n\\n    /**\\n     * @dev Emitted When `NewCoreAddress` Replaces `OldCoreAddress` For ArtBlocks Citizen Mints\\n     */\\n    event ArtBlocksCoreAddressChanged(address OldCoreAddress, address NewCoreAddress);\\n\\n    /**\\n     * @dev Emitted When `NewCoreAddress` Replaces `OldCoreAddress` For ArtBlocks Artist Mints\\n     */\\n    event ArtBlocksCoreAddressChangedArtist(address OldCoreAddress, address NewCoreAddress);\\n\\n    /**\\n     * @dev Emitted When `NewGTAddress` Replaces `OldGTAddress`\\n     */\\n    event GoldenTokenAddressChanged(address OldGTAddress, address NewGTAddress);\\n\\n    /**\\n     * @dev Emitted When `NewERC20Address` Replaces `OldERC20Address`\\n     */\\n    event ERC20AddressChanged(address OldERC20Address, address NewERC20Address);\\n\\n    /**\\n     * @dev Emitted When `NewIndex` Replaces `OldIndex`\\n     */\\n    event CurrentCityIndexChanged(uint OldIndex, uint NewIndex);\\n\\n    /**\\n     * @dev Emitted When Singular Timeslot Changes From `OldAmount` to `NewAmount`\\n     */\\n    event TimeSlotChanged(uint OldAmount, uint NewAmount);\\n\\n    /**\\n     * @dev Emitted When Multiple Timeslot Changes Occur\\n     */\\n    event TimeSlotsChanged(uint[] Slots, uint[] Amounts);\\n\\n    /**\\n     * @dev Emitted When Artist Contract Address Changes\\n     */\\n    event ArtistContractAddressChanged(address OldContractAddress, address NewContractAddress);\\n\\n    /**\\n     * @dev Emitted When Artist Mint Type Changes\\n     */\\n    event ArtistMintTypeChanged(bool OldMintType, bool NewMintType);\\n\\n    /**\\n     * @dev Emitted When Multisig Address Changes\\n     */\\n    event MultisigAddressChanged(address OldAddress, address NewAddress);\\n\\n    /**\\n     * @dev Emitted When New City State Variables Are Modified \\n     */\\n    event NewCityStarted(\\n        address ERC20_BRT_TokenAddress,\\n        address ArtBlocksMintingContractAddress,\\n        address ArtBlocksCoreContractAddressCitizen,\\n        address ArtBlocksCoreContractAddressArtist,\\n        address GoldenTokenAddress,\\n        uint ArtBlocksProjectID,\\n        uint CurrentCityIndex,\\n        uint QRIndex\\n    );\\n\\n    /**\\n     * @dev Emitted When New Artists Are Seeded Into The Contract\\n     */\\n    event NewArtists(uint[] ArtistIDs, address[] MintPasses, address[] MintingAddresses, bool[] MintTypes);\\n\\n    /**\\n     * @dev Emitted When Merkle Root Is Changed\\n     */\\n    event MerkleRootChanged(bytes32 OldRoot, bytes32 NewRoot);\\n\\n    /*-------------------*/\\n    /*    CONSTRUCTOR    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Pre-Approves 1000 BRT For Purchasing, Grants BRT Minter Roles, & Transfers Ownership To BRT Multisig\\n     **/\\n    constructor() \\n    { \\n        Role[0x1A0a3E3AE390a0710f8A6d00587082273eA8F6C9] = _MINTER_ROLE; // BRT Minter #1\\n        Role[0x4d8013b0c264034CBf22De9DF33e22f58D52F207] = _MINTER_ROLE; // BRT Minter #2\\n        Role[0x4D9A8CF2fE52b8D49C7F7EAA87b2886c2bCB4160] = _MINTER_ROLE; // BRT Minter #3\\n        Role[0x124fd966A0D83aA020D3C54AE2c9f4800b46F460] = _MINTER_ROLE; // BRT Minter #4\\n        Role[0x100469feA90Ac1Fe1073E1B2b5c020A8413635c4] = _MINTER_ROLE; // BRT Minter #5\\n        Role[0x756De4236373fd17652b377315954ca327412bBA] = _MINTER_ROLE; // BRT Minter #6\\n        Role[0xc5Dfba6ef7803665C1BDE478B51Bd7eB257A2Cb9] = _MINTER_ROLE; // BRT Minter #7\\n        Role[0xFBF32b29Bcf8fEe32d43a4Bfd3e7249daec457C0] = _MINTER_ROLE; // BRT Minter #8\\n        Role[0xF2A15A83DEE7f03C70936449037d65a1C100FF27] = _MINTER_ROLE; // BRT Minter #9\\n        Role[0x1D2BAB965a4bB72f177Cd641C7BacF3d8257230D] = _MINTER_ROLE; // BRT Minter #10\\n        Role[0x2e51E8b950D72BDf003b58E357C2BA28FB77c7fB] = _MINTER_ROLE; // BRT Minter #11\\n        Role[0x8a7186dECb91Da854090be8226222eA42c5eeCb6] = _MINTER_ROLE; // BRT Minter #12\\n        BookingsAvailable[_CurrentCityIndex][20220630] = 200; \\n        BookingsAvailable[_CurrentCityIndex][20220702] = 200; \\n        BookingsAvailable[_CurrentCityIndex][20220707] = 200; \\n        BookingsAvailable[_CurrentCityIndex][20220714] = 200; \\n        BookingsAvailable[_CurrentCityIndex][20220721] = 200; \\n        BookingsAvailable[_CurrentCityIndex][20220728] = 200; \\n        IERC20(_ERC20_BRT_Token).approve( // CryptoCitizens\\n            _ArtBlocksMintingContractCitizens, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff // Maximum Approval\\n        );\\n        IERC20(0x3dF1a91Fa71c24C8c52afcE62dbA54351CBA7a63).approve( // MPLC\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff // Maximum Approval\\n        );\\n    }\\n\\n    /*-------------------*/\\n    /*  PUBLIC FUNCTIONS */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Redeems Golden Token & BrightLists Address To Receive CryptoCitizen\\n     **/\\n    function RedeemGT(uint TicketID, uint TimeSlot, bool Delegate) public nonReentrant whenNotPaused\\n    {\\n        require(BookingsAvailable[_CurrentCityIndex][TimeSlot] > 0, \\\"LiveMint: TimeSlot Fully Booked\\\");\\n        require(IERC721(_GoldenToken).ownerOf(TicketID) == msg.sender, \\\"ERC721: Sender Does Not Own Token With The Input Token ID\\\");\\n        IERC721(_GoldenToken).transferFrom(msg.sender, _BRTMULTISIG, TicketID);\\n        require(IERC721(_GoldenToken).ownerOf(TicketID) == _BRTMULTISIG, \\\"ERC721: Golden Token Redemption Failed\\\");\\n        BookingsAvailable[_CurrentCityIndex][TimeSlot]--;\\n        SelectedTimeSlotGoldenTicket[_CurrentCityIndex][TicketID] = TimeSlot;\\n        BrightListCitizen[_CurrentCityIndex][TicketID] = msg.sender;\\n        DelegateStatusCitizen[_CurrentCityIndex][TicketID] = Delegate;\\n        emit GoldenTokenRedeemed(msg.sender, TicketID, TimeSlot, Delegate);\\n    }\\n\\n    /**\\n     * @dev Redeems Artist Mint Pass & BrightLists Address To Receive Artist Mint\\n     **/\\n    function RedeemArtistPass(uint ArtistID, uint TicketID, uint TimeSlot, bool Delegate) public nonReentrant whenNotPaused\\n    {\\n        require(BookingsAvailable[_CurrentCityIndex][TimeSlot] > 0, \\\"LiveMint: TimeSlot Fully Booked\\\");\\n        address ArtistMintPass = resolveArtistMintPass(ArtistID);\\n        require(IERC721(ArtistMintPass).ownerOf(TicketID) == msg.sender, \\\"ERC721: Sender Does Not Own Token With The Input Token ID\\\");\\n        IERC721(ArtistMintPass).transferFrom(msg.sender, _BRTMULTISIG, TicketID);\\n        require(IERC721(ArtistMintPass).ownerOf(TicketID) == _BRTMULTISIG, \\\"ERC721: Golden Token Redemption Failed\\\");\\n        BrightListArtist[_CurrentCityIndex][ArtistID][TicketID] = msg.sender;\\n        BookingsAvailable[_CurrentCityIndex][TimeSlot]--;\\n        SelectedTimeSlotArtistMintPass[_CurrentCityIndex][ArtistID][TicketID] = TimeSlot;\\n        DelegateStatusArtist[_CurrentCityIndex][ArtistID][TicketID] = Delegate;\\n        emit ArtistMintPassRedeemed(msg.sender, ArtistID, TicketID, TimeSlot, Delegate);\\n    }\\n\\n    /**\\n     * @dev Redeems Spot For IRL Minting\\n     */\\n    function RedeemQR(uint TimeSlot, bytes32[] calldata Proof) public nonReentrant whenNotPaused\\n    {\\n        require(BookingsAvailable[_CurrentCityIndex][TimeSlot] > 0, \\\"LiveMint: TimeSlot Fully Booked\\\");\\n        require(!RedeemedQR[_CurrentCityIndex][msg.sender], \\\"LiveMint: User Has Already Redeemed\\\");\\n        require(QRAllocation[_CurrentCityIndex][msg.sender] == 0, \\\"LiveMint: Use RedeemQRAllocation() Function\\\");\\n        require(readBrightListMerkle(msg.sender, Proof), \\\"LiveMint: User Is Not On BrightList\\\"); \\n        if(!RedeemedQR[_CurrentCityIndex][msg.sender]) { RedeemedQR[_CurrentCityIndex][msg.sender] = true; }\\n        BookingsAvailable[_CurrentCityIndex][TimeSlot]--;\\n        SelectedTimeSlotGoldenTicket[_CurrentCityIndex][_QRIndex] = TimeSlot;\\n        BrightListCitizen[_CurrentCityIndex][_QRIndex] = msg.sender;\\n        emit QRRedeemed(msg.sender, _QRIndex, TimeSlot);\\n        _QRIndex++;\\n    }\\n\\n    /**\\n     * @dev Redeems QR Codes If User Has More Than 1 Allocation\\n     */\\n    function RedeemQRAllocation(uint TimeSlot, bytes32[] calldata Proof) public nonReentrant whenNotPaused\\n    {\\n        require(BookingsAvailable[_CurrentCityIndex][TimeSlot] > 0, \\\"LiveMint: TimeSlot Fully Booked\\\");\\n        require(QRAllocation[_CurrentCityIndex][msg.sender] > 0, \\\"LiveMint: User Has No QR Allocation To Redeem\\\");\\n        require(readBrightListMerkle(msg.sender, Proof), \\\"LiveMint: User Is Not On BrightList\\\"); \\n        if(!RedeemedQR[_CurrentCityIndex][msg.sender]) { RedeemedQR[_CurrentCityIndex][msg.sender] = true; }\\n        QRAllocation[_CurrentCityIndex][msg.sender]--;\\n        BookingsAvailable[_CurrentCityIndex][TimeSlot]--;\\n        SelectedTimeSlotGoldenTicket[_CurrentCityIndex][_QRIndex] = TimeSlot;\\n        BrightListCitizen[_CurrentCityIndex][_QRIndex] = msg.sender;\\n        emit QRRedeemed(msg.sender, _QRIndex, TimeSlot);\\n        _QRIndex++;\\n    }\\n\\n    /*-------------------*/\\n    /*     BRT STAFF     */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev IRL Minting Function Available Only At Bright Moments NFT Art Gallery \\n     **/\\n    function _LiveMint(uint TicketID) public onlyMinter whenNotPaused \\n    {\\n        address Recipient = readBrightListCitizen(TicketID);\\n        require(!MintedCitizen[_CurrentCityIndex][TicketID], \\\"LiveMint: Golden Token Already Minted\\\");\\n        require(Recipient != address(0), \\\"LiveMint: Golden Token Entered Is Not Brightlisted\\\");\\n        BrightListCitizen[_CurrentCityIndex][TicketID] = address(0);\\n        MintedCitizen[_CurrentCityIndex][TicketID] = true;\\n        uint TokenID = IArtBlocks(_ArtBlocksMintingContractCitizens).purchase(_ArtBlocksProjectID);\\n        IERC721(_ArtBlocksCoreContractCitizens).transferFrom(address(this), Recipient, TokenID);\\n        emit LiveMintComplete(Recipient, TicketID, TokenID, DelegateStatusCitizen[_CurrentCityIndex][TicketID]);\\n    }\\n\\n    /**\\n     * @dev IRL Minting Function Available Only At Bright Moments NFT Art Gallery \\n     **/\\n    function _LiveMintArtist(uint ArtistID, uint TicketID) public onlyMinter whenNotPaused \\n    {\\n        address Recipient = readBrightListArtist(ArtistID, TicketID);\\n        require(!MintedArtist[_CurrentCityIndex][ArtistID][TicketID], \\\"LiveMint: Artist Mint Pass Already Minted\\\");\\n        require(Recipient != address(0), \\\"LiveMint: Mint Pass Entered Is Not Brightlisted\\\");\\n        BrightListArtist[_CurrentCityIndex][ArtistID][TicketID] = address(0);\\n        MintedArtist[_CurrentCityIndex][ArtistID][TicketID] = true;\\n        address ArtistMintingContractAddress = resolveArtistContract(ArtistID);\\n        bool ArtBlocksMint = resolveArtistMint(ArtistID);\\n        if(ArtBlocksMint)\\n        {\\n            uint TokenID = IArtBlocks(ArtistMintingContractAddress).purchase(ArtistID);\\n            IERC721(_ArtBlocksCoreContractArtists).transferFrom(address(this), Recipient, TokenID);\\n            emit LiveMintCompleteArtist(Recipient, ArtistID, TicketID, TokenID, DelegateStatusArtist[_CurrentCityIndex][ArtistID][TicketID]);\\n        }\\n        else \\n        { \\n            uint TokenID = IRandomEdition(ArtistMintingContractAddress)._Mint(Recipient, 1); \\n            emit LiveMintCompleteArtist(Recipient, ArtistID, TicketID, TokenID, DelegateStatusArtist[_CurrentCityIndex][ArtistID][TicketID]);\\n        }\\n    }\\n\\n    /*-------------------*/\\n    /*  ADMIN FUNCTIONS  */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Approves BRT For Purchasing On ArtBlocks Contract\\n     **/\\n    function __ApproveERC20(address BRT, address Operator, uint Amount) external onlyOwner { IERC20(BRT).approve(Operator, Amount); }\\n\\n    /**\\n     * @dev Batch Approves BRT For Purchasing\\n     */\\n    function __BatchApproveERC20(address[] calldata ERC20s, address[] calldata Operators, uint[] calldata Amounts) external onlyOwner\\n    {\\n        require(ERC20s.length == Operators.length && Operators.length == Amounts.length, \\\"LiveMint: Arrays Must Be Equal Length\\\");\\n        for(uint i; i < ERC20s.length; i++)\\n        {\\n            IERC20(ERC20s[i]).approve(Operators[i], Amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Grants Address BRT Minter Role\\n     **/\\n    function __MinterAdd(address Minter) external onlyOwner \\n    { \\n        Role[Minter] = _MINTER_ROLE; \\n        emit MinterAdded(Minter);\\n    }\\n\\n    /**\\n     * @dev Deactivates Address From BRT Minter Role\\n     **/\\n    function __MinterRemove(address Minter) external onlyOwner \\n    { \\n        Role[Minter] = _DEACTIVATED_ROLE; \\n        emit MinterRemoved(Minter);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Minting Address Citizens\\n     */\\n    function __ChangeArtBlocksMintingAddress(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksMintingContractCitizens;\\n        _ArtBlocksMintingContractCitizens = NewMintingAddress;\\n        emit ArtBlocksMintingAddressChanged(OldMintingAddress, _ArtBlocksMintingContractCitizens);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Minting Address Artists\\n     */\\n    function __ChangeArtBlocksMintingAddressArtists(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksMintingContractArtists;\\n        _ArtBlocksMintingContractArtists = NewMintingAddress;\\n        emit ArtBlocksMintingAddressChanged(OldMintingAddress, _ArtBlocksMintingContractArtists);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Core Address Citizens\\n     */\\n    function __ChangeArtBlocksCoreAddress(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksCoreContractCitizens;\\n        _ArtBlocksCoreContractCitizens = NewMintingAddress;\\n        emit ArtBlocksCoreAddressChanged(OldMintingAddress, _ArtBlocksCoreContractCitizens);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Core Address Artists\\n     */\\n    function __ChangeArtBlocksCoreAddressArtist(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksCoreContractArtists;\\n        _ArtBlocksCoreContractArtists = NewMintingAddress;\\n        emit ArtBlocksCoreAddressChangedArtist(OldMintingAddress, _ArtBlocksCoreContractArtists);\\n    }\\n\\n    /**\\n     * @dev Modifies Artist Contract Addresses\\n     */\\n    function __ChangeArtistContractAddresses(uint[] calldata ArtistIDs, address[] calldata NewContractAddresses) external onlyOwner\\n    {\\n        require(ArtistIDs.length == NewContractAddresses.length, \\\"Arrays Must Be Of Equal Length\\\");\\n        for(uint ArtistID; ArtistID < ArtistIDs.length; ArtistID++)\\n        {\\n            address OldArtistContractAddress = resolveArtistContract(ArtistIDs[ArtistID]);\\n            ArtistContracts[_CurrentCityIndex][ArtistIDs[ArtistID]] = NewContractAddresses[ArtistID];\\n            emit ArtistContractAddressChanged(OldArtistContractAddress, NewContractAddresses[ArtistID]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes Artist Mint Passes\\n     */\\n    function __ChangeArtistMintPasses(uint[] calldata ArtistIDs, address[] calldata NewContractAddresses) external onlyOwner\\n    {\\n        require(ArtistIDs.length == NewContractAddresses.length, \\\"Arrays Must Be Of Equal Length\\\");\\n        for(uint x; x < ArtistIDs.length; x++)\\n        {\\n            address OldArtistContractAddress = ArtistMintPasses[_CurrentCityIndex][ArtistIDs[x]];\\n            ArtistMintPasses[_CurrentCityIndex][ArtistIDs[x]] = NewContractAddresses[x];\\n            emit ArtistContractAddressChanged(OldArtistContractAddress, NewContractAddresses[x]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifies Artist Mint Types\\n     * note: True For ArtBlocks | False For Random Edition\\n     */\\n    function __ChangeArtistMintTypes(uint[] calldata ArtistIDs, bool[] calldata NewMintTypes) external onlyOwner\\n    {\\n        for(uint x; x < ArtistIDs.length; x++)\\n        {\\n            bool OldMintType = resolveArtistMint(ArtistIDs[x]);\\n            MintType[_CurrentCityIndex][ArtistIDs[x]] = NewMintTypes[x];\\n            emit ArtistMintTypeChanged(OldMintType, NewMintTypes[x]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifies The Current ArtBlocks ProjectID\\n     **/\\n    function __ChangeArtBlocksProjectID(uint ArtBlocksProjectID) external onlyOwner \\n    { \\n        uint OldProjectID = _ArtBlocksProjectID;\\n        _ArtBlocksProjectID = ArtBlocksProjectID; \\n        emit ModifiedProjectID(OldProjectID, _ArtBlocksProjectID);\\n    }\\n\\n    /**\\n     * @dev Modifies Golden Token Address\\n     */\\n    function __ChangeGoldenTokenAddress(address NewGTAddress) external onlyOwner\\n    {\\n        address OldAddress = _GoldenToken;\\n        _GoldenToken = NewGTAddress;\\n        emit GoldenTokenAddressChanged(OldAddress, _GoldenToken);\\n    }\\n\\n    /**\\n     * @dev Modifies ERC20 BRT Minting Token Address\\n     */\\n    function __ChangeERC20Address(address NewERC20Address) external onlyOwner\\n    {\\n        address OldAddress = _ERC20_BRT_Token;\\n        _ERC20_BRT_Token = NewERC20Address;\\n        emit ERC20AddressChanged(OldAddress, _ERC20_BRT_Token);\\n    }\\n\\n    /**\\n     * @dev Modifies Current City Index\\n     */\\n    function __ChangeCityIndex(uint Index) external onlyOwner\\n    {\\n        uint OldIndex = _CurrentCityIndex;\\n        _CurrentCityIndex = Index;\\n        emit CurrentCityIndexChanged(OldIndex, _CurrentCityIndex);\\n    }\\n\\n    /**\\n     * @dev Changes TimeSlot At Index `Slot` \\n     * note: Slot is denoted in YYYY-DD-MM with no -'s (20220101) for Jan 1st\\n     */\\n    function __ChangeTimeSlot(uint Slot, uint Amount) external onlyOwner \\n    { \\n        uint OldAmount = BookingsAvailable[_CurrentCityIndex][Slot];\\n        BookingsAvailable[_CurrentCityIndex][Slot] = Amount; \\n        emit TimeSlotChanged(OldAmount, Amount);\\n    }\\n\\n    /**\\n     * @dev Changes Multiple TimeSlots \\n     * note: Slot is denoted in YYYY-DD-MM with no -'s (20220101) for Jan 1st\\n     */\\n    function __ChangeTimeSlots(uint[] calldata Slots, uint[] calldata Amounts) external onlyOwner\\n    {\\n        require(Slots.length == Amounts.length, \\\"Arrays Must Match Length\\\");\\n        for(uint i; i < Slots.length; i++)\\n        {\\n            BookingsAvailable[_CurrentCityIndex][Slots[i]] = Amounts[i];\\n        }\\n        emit TimeSlotsChanged(Slots, Amounts);\\n    }\\n\\n    /**\\n     * @dev Sets QR Allocation\\n     */\\n    function __ChangeQRAllocations(address[] calldata Addresses, uint[] calldata Amounts) external onlyOwner\\n    {\\n        for(uint x; x < Addresses.length; x++)\\n        {\\n            QRAllocation[_CurrentCityIndex][Addresses[x]] = Amounts[x];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets QR Index\\n     */\\n    function __ChangeQRIndex(uint NewIndex) external onlyOwner { _QRIndex = NewIndex; }\\n\\n    /**\\n     * @dev Batch Changes State Variables For LiveMint\\n     * note: __ApproveBRT(_ERC20_BRT_Token) Will Need To Be Called On This Contract After This Function\\n     * note: This Is So That Variables Can Be Double Checked & Mint Will Not Be Active Until That Is Complete\\n     */\\n    function __NewCity(\\n        address ERC20TokenAddress,\\n        address ArtBlocksMintingContractAddress,\\n        address ArtBlocksCoreContractAddress,\\n        address ArtBlocksCoreContractAddressArtist,\\n        address GoldenTokenAddress,\\n        uint ArtBlocksProjectID,\\n        uint CurrentCityIndex,\\n        uint QRIndex\\n    ) \\n    external onlyOwner \\n    {\\n        _ERC20_BRT_Token = ERC20TokenAddress;\\n        _ArtBlocksMintingContractCitizens = ArtBlocksMintingContractAddress;\\n        _ArtBlocksCoreContractCitizens = ArtBlocksCoreContractAddress;\\n        _ArtBlocksCoreContractArtists = ArtBlocksCoreContractAddressArtist;\\n        _GoldenToken = GoldenTokenAddress;\\n        _ArtBlocksProjectID = ArtBlocksProjectID;\\n        _CurrentCityIndex = CurrentCityIndex;\\n        _QRIndex = QRIndex;\\n        emit NewCityStarted(\\n            _ERC20_BRT_Token,\\n            _ArtBlocksMintingContractCitizens,\\n            _ArtBlocksCoreContractCitizens, \\n            _ArtBlocksCoreContractArtists,\\n            _GoldenToken, \\n            _ArtBlocksProjectID, \\n            _CurrentCityIndex,\\n            _QRIndex\\n        );\\n    }\\n\\n    /**\\n     * @dev Instantiates New Artists At `CurrentCityIndex` => `ArtistID[i]`\\n     * @dev note: ArtistIDs = uint[]\\n     * @dev note: MintPasses = address[] (this is the MintPass contract addresses)\\n     * @dev note: MintingAddresses = address[] (this is the NFTs to be Minted)\\n     * @dev note: MintTypes = bool[] (true for ArtBlocks) | (false for Random Edition)\\n     */\\n    function __NewArtists(\\n        uint[] calldata ArtistIDs, \\n        address[] calldata MintPasses, \\n        address[] calldata MintingAddresses,\\n        bool[] calldata MintTypes\\n    ) external onlyOwner {\\n        require(\\n            ArtistIDs.length == MintPasses.length \\n            && MintPasses.length == MintingAddresses.length \\n            && MintingAddresses.length == MintTypes.length, \\n            \\\"LiveMint: Array Lengths Must Be Of Equal Value\\\"\\n        );\\n        for(uint i; i < ArtistIDs.length; i++)\\n        {\\n            ArtistMintPasses[_CurrentCityIndex][ArtistIDs[i]] = MintPasses[i];\\n            ArtistContracts[_CurrentCityIndex][ArtistIDs[i]] = MintingAddresses[i];\\n            MintType[_CurrentCityIndex][ArtistIDs[i]] = MintTypes[i];\\n        }\\n        emit NewArtists(ArtistIDs, MintPasses, MintingAddresses, MintTypes);\\n    }\\n\\n    /**\\n     * @dev Changes Merkle Root\\n     */\\n    function __NewRoot(bytes32 NewRoot) external onlyOwner\\n    {\\n        bytes32 OldRoot = Root;\\n        Root = NewRoot;\\n        emit MerkleRootChanged(OldRoot, NewRoot);\\n    }\\n\\n    /**\\n     * @dev Withdraws Any Ether Mistakenly Sent to Contract to Multisig\\n     **/\\n    function __WithdrawEther() external onlyOwner { payable(msg.sender).transfer(address(this).balance); }\\n\\n    /**\\n     * @dev Withdraws ERC20 Tokens to Multisig\\n     **/\\n    function __WithdrawERC20(address tokenAddress) external onlyOwner \\n    { \\n        IERC20 erc20Token = IERC20(tokenAddress);\\n        uint balance = erc20Token.balanceOf(address(this));\\n        require(balance > 0, \\\"0 ERC20 Balance At `tokenAddress`\\\");\\n        erc20Token.transfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @dev Withdraws Any NFT Mistakenly Sent To This Contract.\\n     */\\n    function __WithdrawERC721(address ContractAddress, address Recipient, uint TokenID) external onlyOwner\\n    {\\n        IERC721(ContractAddress).transferFrom(address(this), Recipient, TokenID);\\n    }\\n\\n    /*-------------------*/\\n    /*    PUBLIC VIEW    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Returns BrightListed Address Corresponding to Golden Ticket `TicketID`\\n     **/\\n    function readBrightListCitizen(uint TicketID) public view returns(address)\\n    { \\n        return BrightListCitizen[_CurrentCityIndex][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns BrightListed Address Corresponding to Mint Pass `ArtistID` & `TicketID`\\n     */\\n    function readBrightListArtist(uint ArtistID, uint TicketID) public view returns(address) \\n    { \\n        return BrightListArtist[_CurrentCityIndex][ArtistID][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns Artist NFT Contract Address Correpsonding To ArtistID (1 through 10)\\n     */\\n    function resolveArtistContract(uint ArtistID) public view returns(address) \\n    { \\n        return ArtistContracts[_CurrentCityIndex][ArtistID]; \\n    }\\n\\n    /**\\n     * @dev Returns Artist Mint Pass Contract Address Correpsonding To ArtistID\\n     */\\n    function resolveArtistMintPass(uint ArtistID) public view returns(address) \\n    { \\n        return ArtistMintPasses[_CurrentCityIndex][ArtistID]; \\n    }\\n\\n    /**\\n     * @dev Batch Returns Owned Artist Mint Passes\\n     */\\n    function resolveArtistMintPasses(uint[] calldata ArtistIDs) public view returns(address[] memory)\\n    {\\n        address[] memory MintPasses = new address[](ArtistIDs.length);\\n        for(uint i; i < ArtistIDs.length; i++)\\n        {\\n            address x = resolveArtistMintPass(ArtistIDs[i]);\\n            MintPasses[i] = x;\\n        }\\n        return MintPasses;\\n    }\\n\\n    /**\\n     * @dev Returns Artist ArtBlocks Mint Type (true for ArtBlocks Mint) | (false for Random Edition Mint)\\n     */\\n    function resolveArtistMint(uint ArtistID) public view returns(bool) \\n    { \\n        return MintType[_CurrentCityIndex][ArtistID]; \\n    }\\n\\n    /**\\n     * @dev Returns Booked TimeSlot For Golden Ticket Corresponding `TicketID`\\n     */\\n    function readTimeSlotGoldenTicket(uint TicketID) public view returns(uint) \\n    { \\n        return SelectedTimeSlotGoldenTicket[_CurrentCityIndex][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns Booked TimeSlot For Artist Mint Pass Corresponding To `TicketID`\\n     */\\n    function readTimeSlotArtistMintPass(uint ArtistID, uint TicketID) public view returns(uint) \\n    { \\n        return SelectedTimeSlotArtistMintPass[_CurrentCityIndex][ArtistID][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns If Golden Token Corresponding To `TicketID` Has Been Minted\\n     */\\n    function readMintedCitizen(uint TicketID) public view returns(bool)\\n    {\\n        return MintedCitizen[_CurrentCityIndex][TicketID];\\n    }\\n\\n    /**\\n     * @dev Returns If Artist Mint Pass Corresponding To `TicketID` Has Been Minted\\n     */\\n    function readMintedArtist(uint ArtistID, uint TicketID) public view returns(bool)\\n    {\\n        return MintedArtist[_CurrentCityIndex][ArtistID][TicketID];\\n    }\\n\\n    /**\\n     * @dev Returns Owner Of Mint Pass Corresponding To `TicketID`\\n     */\\n    function readOwnerOfMintPass(uint ArtistID, uint TicketID) public view returns(address)\\n    {\\n        return IERC721(resolveArtistMintPass(ArtistID)).ownerOf(TicketID);\\n    }\\n\\n    /**\\n     * @dev Returns Owner Of Golden Token Corresponding To `TicketID`\\n     */\\n    function readOwnerOfGoldenToken(uint TicketID) public view returns(address)\\n    {\\n        return IERC721(_GoldenToken).ownerOf(TicketID);\\n    }\\n\\n    /**\\n     * @dev Returns Artist Metadata\\n     */\\n    function readMetadataArtist(uint ArtistID, uint TokenID) public view returns(string memory)\\n    {\\n        if(!resolveArtistMint(ArtistID))\\n        {\\n            return IRandomEdition(resolveArtistContract(ArtistID)).tokenURI(TokenID);\\n        }\\n        else if(resolveArtistMint(ArtistID))\\n        {\\n            return IArtBlocks(resolveArtistContract(ArtistID)).tokenURI(TokenID);\\n        }\\n        else { return \\\"Artist NFT Corresponding To `TicketID` Not Minted\\\"; }\\n    }\\n\\n    /**\\n     * @dev Returns Citizen Metadata\\n     */\\n    function readMetadataCitizen(uint TokenID) public view returns (string memory)\\n    {\\n        return IArtBlocks(_ArtBlocksCoreContractCitizens).tokenURI(TokenID);\\n    }\\n\\n    /**\\n     * @dev Returns If Recipient Address Is BrightListed\\n     */\\n    function readBrightListMerkle(address Recipient, bytes32[] memory Proof) public view returns(bool)\\n    { \\n        bytes32 Leaf = keccak256(abi.encodePacked(Recipient));\\n        return MerkleProof.verify(Proof, Root, Leaf);\\n    }\\n\\n    /**\\n     * @dev Returns If User Is On BrightList & Has Not Redeemed QR Code\\n     */\\n    function readQREligibility(address Recipient, bytes32[] memory Proof) public view returns(bool)\\n    {\\n        bytes32 Leaf = keccak256(abi.encodePacked(Recipient));\\n        if(\\n            MerkleProof.verify(Proof, Root, Leaf) \\n            && \\n            !RedeemedQR[_CurrentCityIndex][Recipient]\\n        ) { return true; }\\n        else { return false; }\\n    }\\n\\n    /**\\n     * @dev Returns If User Is On BrightList & Has More Than One Allocation For QR Code\\n     */\\n    function readQRAllocationEligibility(address Recipient, bytes32[] memory Proof) public view returns(bool)\\n    {\\n        bytes32 Leaf = keccak256(abi.encodePacked(Recipient));\\n        if(\\n            MerkleProof.verify(Proof, Root, Leaf) \\n            && \\n            QRAllocation[_CurrentCityIndex][Recipient] > 0\\n        ) { return true; }\\n        else { return false; }\\n    }\\n\\n    /**\\n     * @dev Returns # Of Available Timeslots\\n     */\\n    function readTimeSlotAvailable(uint TimeSlot) public view returns(uint)\\n    {\\n        return BookingsAvailable[_CurrentCityIndex][TimeSlot];\\n    }\\n\\n    /**\\n     * @dev Batch Returns If Wallet Owns Multiple TokenIDs Of Multiple NFTs\\n     */\\n    function readNFTsOwnedTokenIDs(\\n        address Wallet, \\n        address[] calldata NFTAddresses, \\n        uint Range\\n    ) public view returns (uint[][] memory) {\\n        uint[][] memory OwnedIDs = new uint[][](NFTAddresses.length);\\n        for(uint x; x < NFTAddresses.length; x++)\\n        {\\n            IERC721 NFT = IERC721(NFTAddresses[x]);\\n            uint[] memory temp = new uint[](Range);\\n            uint counter;\\n            for(uint y; y <= Range; y++)\\n            {\\n                try NFT.ownerOf(y) \\n                {\\n                    if(NFT.ownerOf(y) == Wallet)\\n                    {\\n                        temp[counter] = y;\\n                        counter++;   \\n                    }\\n                } catch { }\\n            }\\n            uint[] memory FormattedOwnedIDs = new uint[](counter);\\n            uint index;\\n            for(uint z; z < counter; z++)\\n            {\\n                if(temp[z] != 0 || (z == 0 && temp[z] == 0))\\n                {\\n                    FormattedOwnedIDs[index] = temp[z];\\n                    index++;\\n                }\\n            }\\n            OwnedIDs[x] = FormattedOwnedIDs;\\n        }\\n        return OwnedIDs;\\n    }\\n\\n    /**\\n     * @dev Returns Batch Metadata\\n     */\\n    function readBatchMetadata(\\n        address[] calldata ContractAddresses, \\n        uint[][] calldata TokenIDs\\n    ) public view returns(string[][] memory) {\\n        string[][] memory Metadata = new string[][](TokenIDs.length);\\n        for(uint ProjectID; ProjectID < ContractAddresses.length; ProjectID++)\\n        {\\n            string[] memory ProjectMetadata = new string[](TokenIDs[ProjectID].length);\\n            for(uint TokenID; TokenID < TokenIDs[ProjectID].length; TokenID++)\\n            {\\n                ProjectMetadata[TokenID] = ERC721(ContractAddresses[ProjectID]).tokenURI(TokenIDs[ProjectID][TokenID]);\\n            }\\n            Metadata[ProjectID] = ProjectMetadata;\\n        }\\n        return Metadata;\\n    }\\n\\n    /*-------------------*/\\n    /*      MODIFIERS    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Function Modifier That Allows Only BrightListed BRT Minters To Access\\n     **/\\n    modifier onlyMinter() \\n    {\\n        require(Role[msg.sender] == _MINTER_ROLE, \\\"OnlyMinter: Caller Is Not Approved BRT Minter\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IArtBlocks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\ninterface IArtBlocks \\n{ \\n    function purchase(uint256 _projectId) payable external returns (uint tokenID); \\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/IRandomEdition.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\ninterface IRandomEdition \\n{ \\n    function _Mint(address Recipient, uint Amount) external returns(uint tokenID); //Mints Random Edition\\n    function tokenURI(uint256 tokenId) external view returns (string memory); //Returns IPFS Metadata\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldCoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewCoreAddress\",\"type\":\"address\"}],\"name\":\"ArtBlocksCoreAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldCoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewCoreAddress\",\"type\":\"address\"}],\"name\":\"ArtBlocksCoreAddressChangedArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldMintingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"ArtBlocksMintingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewContractAddress\",\"type\":\"address\"}],\"name\":\"ArtistContractAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"ArtistMintPassRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"OldMintType\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"NewMintType\",\"type\":\"bool\"}],\"name\":\"ArtistMintTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewIndex\",\"type\":\"uint256\"}],\"name\":\"CurrentCityIndexChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldERC20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewERC20Address\",\"type\":\"address\"}],\"name\":\"ERC20AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldGTAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewGTAddress\",\"type\":\"address\"}],\"name\":\"GoldenTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"GoldenTokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"LiveMintComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"LiveMintCompleteArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"OldRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"NewRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"RemovedMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewProjectID\",\"type\":\"uint256\"}],\"name\":\"ModifiedProjectID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"MultisigAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"MintPasses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"MintingAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"MintTypes\",\"type\":\"bool[]\"}],\"name\":\"NewArtists\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20_BRT_TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ArtBlocksMintingContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddressCitizen\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddressArtist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"GoldenTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtBlocksProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CurrentCityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"QRIndex\",\"type\":\"uint256\"}],\"name\":\"NewCityStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"}],\"name\":\"QRRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewAmount\",\"type\":\"uint256\"}],\"name\":\"TimeSlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Slots\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"TimeSlotsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArtistContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArtistMintPasses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BookingsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BrightListArtist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BrightListCitizen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DelegateStatusArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DelegateStatusCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintedArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintedCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"QRAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"RedeemArtistPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"RedeemGT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"RedeemQR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"RedeemQRAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RedeemedQR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SelectedTimeSlotArtistMintPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SelectedTimeSlotGoldenTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksCoreContractArtists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksCoreContractCitizens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksMintingContractArtists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksMintingContractCitizens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksProjectID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BRTMULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CurrentCityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ERC20_BRT_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GoldenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"_LiveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"_LiveMintArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BRT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"__ApproveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ERC20s\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"Operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__BatchApproveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksCoreAddressArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksMintingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksMintingAddressArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtBlocksProjectID\",\"type\":\"uint256\"}],\"name\":\"__ChangeArtBlocksProjectID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"NewContractAddresses\",\"type\":\"address[]\"}],\"name\":\"__ChangeArtistContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"NewContractAddresses\",\"type\":\"address[]\"}],\"name\":\"__ChangeArtistMintPasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"NewMintTypes\",\"type\":\"bool[]\"}],\"name\":\"__ChangeArtistMintTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Index\",\"type\":\"uint256\"}],\"name\":\"__ChangeCityIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewERC20Address\",\"type\":\"address\"}],\"name\":\"__ChangeERC20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewGTAddress\",\"type\":\"address\"}],\"name\":\"__ChangeGoldenTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__ChangeQRAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewIndex\",\"type\":\"uint256\"}],\"name\":\"__ChangeQRIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"__ChangeTimeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"Slots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__ChangeTimeSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__MinterAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__MinterRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"MintPasses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"MintingAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"MintTypes\",\"type\":\"bool[]\"}],\"name\":\"__NewArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtBlocksMintingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddressArtist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"GoldenTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CurrentCityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"QRIndex\",\"type\":\"uint256\"}],\"name\":\"__NewCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"NewRoot\",\"type\":\"bytes32\"}],\"name\":\"__NewRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"__WithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"__WithdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__WithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"TokenIDs\",\"type\":\"uint256[][]\"}],\"name\":\"readBatchMetadata\",\"outputs\":[{\"internalType\":\"string[][]\",\"name\":\"\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readBrightListArtist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readBrightListCitizen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"readBrightListMerkle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"readMetadataArtist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"readMetadataCitizen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readMintedArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readMintedCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"NFTAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"Range\",\"type\":\"uint256\"}],\"name\":\"readNFTsOwnedTokenIDs\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readOwnerOfGoldenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readOwnerOfMintPass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"readQRAllocationEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"readQREligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readTimeSlotArtistMintPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"}],\"name\":\"readTimeSlotAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readTimeSlotGoldenTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"resolveArtistContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"resolveArtistMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"resolveArtistMintPass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"}],\"name\":\"resolveArtistMintPasses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoCitizenLiveMint", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}