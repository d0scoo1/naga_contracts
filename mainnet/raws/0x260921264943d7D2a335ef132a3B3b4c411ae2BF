{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ProposalRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract ProposalRegistry {\\n    enum VotingType {\\n        Single,\\n        Weighted\\n    }\\n\\n    // proposal data\\n    struct Proposal {\\n        uint256 deadline;\\n        uint256 maxIndex;\\n        VotingType _type;\\n    }\\n\\n    address public governance;\\n\\n    // bytes32 of snapshot IPFS hash id for a given proposal\\n    mapping(bytes32 => Proposal) public proposalInfo;\\n\\n    /* ========== EVENT ========== */\\n    event Initiated(bytes32 _proposal);\\n\\n    constructor(address _governance) {\\n        governance = _governance;\\n    }\\n\\n    /***************************************\\n                    MODIFIER\\n    ****************************************/\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"not-governance!\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n               ADMIN - GOVERNANCE\\n    ****************************************/\\n\\n    function initiateProposal(\\n        bytes32 _proposal,\\n        uint256 _deadline,\\n        uint256 _maxIndex,\\n        uint8 _type\\n    ) public onlyGovernance {\\n        require(proposalInfo[_proposal].deadline == 0, \\\"exists\\\");\\n        require(_deadline > block.timestamp, \\\"invalid deadline\\\");\\n        require(_type <= uint8(VotingType.Weighted), \\\"out range\\\");\\n\\n        proposalInfo[_proposal].deadline = _deadline;\\n        proposalInfo[_proposal].maxIndex = _maxIndex;\\n\\n        emit Initiated(_proposal);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"}],\"name\":\"Initiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposal\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"initiateProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum ProposalRegistry.VotingType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProposalRegistry", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ef42d748e09a2d9ef89238c053ce0b6f00236210", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}