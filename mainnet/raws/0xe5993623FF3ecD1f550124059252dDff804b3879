{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/mainnet/Adapter03.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../IAdapter.sol\\\";\\nimport \\\"../../lib/aavee/Aavee.sol\\\";\\nimport \\\"../../lib/chai/ChaiExchange.sol\\\";\\nimport \\\"../../lib/bprotocol/BProtocolAMM.sol\\\";\\nimport \\\"../../lib/bzx/BZX.sol\\\";\\nimport \\\"../../lib/smoothy/SmoothyV1.sol\\\";\\nimport \\\"../../lib/uniswap/UniswapV1.sol\\\";\\nimport \\\"../../lib/kyberdmm/KyberDmm.sol\\\";\\nimport \\\"../../lib/jarvis/Jarvis.sol\\\";\\nimport \\\"../../lib/lido/Lido.sol\\\";\\nimport \\\"../../lib/makerpsm/MakerPsm.sol\\\";\\nimport \\\"../../lib/augustus-rfq/AugustusRFQ.sol\\\";\\n\\n/**\\n * @dev This contract will route call to:\\n * 0- ChaiExchange\\n * 1- UniswapV1\\n * 2- SmoothyV1\\n * 3- BZX\\n * 4- BProtocol\\n * 5- Aave\\n * 6- KyberDMM\\n * 7- Jarvis\\n * 8 - Lido\\n * 9 - MakerPsm\\n * 10 - AugustusRFQ\\n * The above are the indexes\\n */\\n\\ncontract Adapter03 is\\n    IAdapter,\\n    ChaiExchange,\\n    UniswapV1,\\n    SmoothyV1,\\n    BZX,\\n    BProtocol,\\n    Aavee,\\n    KyberDmm,\\n    Jarvis,\\n    Lido,\\n    MakerPsm,\\n    AugustusRFQ\\n{\\n    using SafeMath for uint256;\\n\\n    /*solhint-disable no-empty-blocks*/\\n    constructor(\\n        uint16 aaveeRefCode,\\n        address aaveeSpender,\\n        address uniswapFactory,\\n        address chai,\\n        address dai,\\n        address weth,\\n        address stETH\\n    )\\n        public\\n        WethProvider(weth)\\n        Aavee(aaveeRefCode, aaveeSpender)\\n        UniswapV1(uniswapFactory)\\n        ChaiExchange(chai, dai)\\n        Lido(stETH)\\n        MakerPsm(dai)\\n    {}\\n\\n    /*solhint-enable no-empty-blocks*/\\n\\n    function initialize(bytes calldata) external override {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256,\\n        Utils.Route[] calldata route\\n    ) external payable override {\\n        for (uint256 i = 0; i < route.length; i++) {\\n            if (route[i].index == 0) {\\n                //swap on ChaiExchange\\n                swapOnChai(fromToken, toToken, fromAmount.mul(route[i].percent).div(10000));\\n            } else if (route[i].index == 1) {\\n                //swap on Uniswap\\n                swapOnUniswapV1(fromToken, toToken, fromAmount.mul(route[i].percent).div(10000));\\n            } else if (route[i].index == 2) {\\n                //swap on Smoothy\\n                swapOnSmoothyV1(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 3) {\\n                //swap on BZX\\n                swapOnBzx(fromToken, toToken, fromAmount.mul(route[i].percent).div(10000), route[i].payload);\\n            } else if (route[i].index == 4) {\\n                //swap on BProtocol\\n                swapOnBProtocol(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 5) {\\n                //swap on aavee\\n                swapOnAavee(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 6) {\\n                //swap on KyberDmm\\n                swapOnKyberDmm(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 7) {\\n                //swap on Jarvis\\n                swapOnJarvis(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 8) {\\n                //swap on Lido\\n                swapOnLido(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 9) {\\n                //swap on MakerPsm\\n                swapOnMakerPsm(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 10) {\\n                //swap on augustusRFQ\\n                swapOnAugustusRFQ(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else {\\n                revert(\\\"Index not supported\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../lib/Utils.sol\\\";\\n\\ninterface IAdapter {\\n    /**\\n     * @dev Certain adapters needs to be initialized.\\n     * This method will be called from Augustus\\n     */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n     * @dev The function which performs the swap on an exchange.\\n     * @param fromToken Address of the source token\\n     * @param toToken Address of the destination token\\n     * @param fromAmount Amount of source tokens to be swapped\\n     * @param networkFee NOT USED - Network fee to be used in this router\\n     * @param route Route to be followed\\n     */\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/aavee/Aavee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IAavee.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\ncontract Aavee {\\n    struct AaveeDataV1 {\\n        address aToken;\\n    }\\n\\n    uint16 public immutable refCodeV1;\\n    address public immutable spender;\\n\\n    constructor(uint16 _refCode, address _spender) public {\\n        refCodeV1 = _refCode;\\n        spender = _spender;\\n    }\\n\\n    function swapOnAavee(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        _swapOnAavee(fromToken, toToken, fromAmount, exchange, payload);\\n    }\\n\\n    function buyOnAavee(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        _swapOnAavee(fromToken, toToken, fromAmount, exchange, payload);\\n    }\\n\\n    function _swapOnAavee(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes memory payload\\n    ) private {\\n        AaveeDataV1 memory data = abi.decode(payload, (AaveeDataV1));\\n\\n        Utils.approve(spender, address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == address(data.aToken)) {\\n            require(IAaveToken(data.aToken).underlyingAssetAddress() == address(toToken), \\\"Invalid to token\\\");\\n\\n            IAaveToken(data.aToken).redeem(fromAmount);\\n        } else if (address(toToken) == address(data.aToken)) {\\n            require(IAaveToken(data.aToken).underlyingAssetAddress() == address(fromToken), \\\"Invalid to token\\\");\\n            if (address(fromToken) == Utils.ethAddress()) {\\n                IAaveV1LendingPool(exchange).deposit{ value: fromAmount }(fromToken, fromAmount, refCodeV1);\\n            } else {\\n                IAaveV1LendingPool(exchange).deposit(fromToken, fromAmount, refCodeV1);\\n            }\\n        } else {\\n            revert(\\\"Invalid aToken\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/chai/ChaiExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IChai.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\ncontract ChaiExchange {\\n    address public immutable chai;\\n    address public immutable dai;\\n\\n    constructor(address _chai, address _dai) public {\\n        chai = _chai;\\n        dai = _dai;\\n    }\\n\\n    function swapOnChai(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    ) internal {\\n        _swapOnChai(fromToken, toToken, fromAmount);\\n    }\\n\\n    function buyOnChai(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    ) internal {\\n        _swapOnChai(fromToken, toToken, fromAmount);\\n    }\\n\\n    function _swapOnChai(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    ) private {\\n        Utils.approve(address(chai), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == chai) {\\n            require(address(toToken) == dai, \\\"Destination token should be dai\\\");\\n            IChai(chai).exit(address(this), fromAmount);\\n        } else if (address(fromToken) == dai) {\\n            require(address(toToken) == chai, \\\"Destination token should be chai\\\");\\n            IChai(chai).join(address(this), fromAmount);\\n        } else {\\n            revert(\\\"Invalid fromToken\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/bprotocol/BProtocolAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./IBProtocolAMM.sol\\\";\\n\\ncontract BProtocol {\\n    function swapOnBProtocol(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n        IBProtocolAMM(exchange).swap(fromAmount, 1, payable(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/bzx/BZX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./IBZX.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\n\\nabstract contract BZX is WethProvider {\\n    struct BZXData {\\n        address iToken;\\n    }\\n\\n    function swapOnBzx(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes calldata payload\\n    ) internal {\\n        _swapOnBZX(fromToken, toToken, fromAmount, payload);\\n    }\\n\\n    function buyOnBzx(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes calldata payload\\n    ) internal {\\n        _swapOnBZX(fromToken, toToken, fromAmount, payload);\\n    }\\n\\n    function _swapOnBZX(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes memory payload\\n    ) private {\\n        BZXData memory data = abi.decode(payload, (BZXData));\\n\\n        Utils.approve(address(data.iToken), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == address(data.iToken)) {\\n            if (address(toToken) == Utils.ethAddress()) {\\n                require(IBZX(data.iToken).loanTokenAddress() == WETH, \\\"Invalid to token\\\");\\n                IBZX(data.iToken).burnToEther(payable(address(this)), fromAmount);\\n            } else {\\n                require(IBZX(data.iToken).loanTokenAddress() == address(toToken), \\\"Invalid to token\\\");\\n                IBZX(data.iToken).burn(address(this), fromAmount);\\n            }\\n        } else if (address(toToken) == address(data.iToken)) {\\n            if (address(fromToken) == Utils.ethAddress()) {\\n                require(IBZX(data.iToken).loanTokenAddress() == WETH, \\\"Invalid from token\\\");\\n\\n                IBZX(data.iToken).mintWithEther{ value: fromAmount }(address(this));\\n            } else {\\n                require(IBZX(data.iToken).loanTokenAddress() == address(fromToken), \\\"Invalid from token\\\");\\n                IBZX(data.iToken).mint(address(this), fromAmount);\\n            }\\n        } else {\\n            revert(\\\"Invalid token pair!!\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/smoothy/SmoothyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./ISmoothyV1.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\n\\ncontract SmoothyV1 {\\n    struct SmoothyV1Data {\\n        uint256 i;\\n        uint256 j;\\n    }\\n\\n    function swapOnSmoothyV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        SmoothyV1Data memory data = abi.decode(payload, (SmoothyV1Data));\\n\\n        Utils.approve(exchange, address(fromToken), fromAmount);\\n\\n        ISmoothyV1(exchange).swap(data.i, data.j, fromAmount, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/UniswapV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./IUniswapExchange.sol\\\";\\nimport \\\"./IUniswapFactory.sol\\\";\\n\\ncontract UniswapV1 {\\n    using SafeMath for uint256;\\n\\n    address public immutable factory;\\n\\n    constructor(address _factory) public {\\n        factory = _factory;\\n    }\\n\\n    function swapOnUniswapV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount\\n    ) internal {\\n        _swapOnUniswapV1(fromToken, toToken, fromAmount, 1);\\n    }\\n\\n    function buyOnUniswapV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    ) internal {\\n        address exchange = getExchange(fromToken, toToken);\\n\\n        Utils.approve(address(exchange), address(fromToken), fromAmount);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IUniswapExchange(exchange).ethToTokenSwapOutput{ value: fromAmount }(toAmount, block.timestamp);\\n        } else if (address(toToken) == Utils.ethAddress()) {\\n            IUniswapExchange(exchange).tokenToEthSwapOutput(toAmount, fromAmount, block.timestamp);\\n        } else {\\n            IUniswapExchange(exchange).tokenToTokenSwapOutput(\\n                toAmount,\\n                fromAmount,\\n                Utils.maxUint(),\\n                block.timestamp,\\n                address(toToken)\\n            );\\n        }\\n    }\\n\\n    function getExchange(IERC20 fromToken, IERC20 toToken) private view returns (address) {\\n        address exchangeAddress = address(fromToken) == Utils.ethAddress() ? address(toToken) : address(fromToken);\\n\\n        return IUniswapFactory(factory).getExchange(exchangeAddress);\\n    }\\n\\n    function _swapOnUniswapV1(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    ) private returns (uint256) {\\n        address exchange = getExchange(fromToken, toToken);\\n\\n        Utils.approve(exchange, address(fromToken), fromAmount);\\n\\n        uint256 receivedAmount = 0;\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            receivedAmount = IUniswapExchange(exchange).ethToTokenSwapInput{ value: fromAmount }(\\n                toAmount,\\n                block.timestamp\\n            );\\n        } else if (address(toToken) == Utils.ethAddress()) {\\n            receivedAmount = IUniswapExchange(exchange).tokenToEthSwapInput(fromAmount, toAmount, block.timestamp);\\n        } else {\\n            receivedAmount = IUniswapExchange(exchange).tokenToTokenSwapInput(\\n                fromAmount,\\n                toAmount,\\n                1,\\n                block.timestamp,\\n                address(toToken)\\n            );\\n        }\\n\\n        return receivedAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/kyberdmm/KyberDmm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\nimport \\\"./IKyberDmmRouter.sol\\\";\\n\\nabstract contract KyberDmm is WethProvider {\\n    uint256 constant MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n\\n    struct KyberDMMData {\\n        address[] poolPath;\\n        IERC20[] path;\\n    }\\n\\n    function swapOnKyberDmm(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        KyberDMMData memory data = abi.decode(payload, (KyberDMMData));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        IDMMExchangeRouter(exchange).swapExactTokensForTokens(\\n            fromAmount,\\n            1,\\n            data.poolPath,\\n            data.path,\\n            address(this),\\n            MAX_INT // deadline\\n        );\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/jarvis/Jarvis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\ninterface IJarvisPool {\\n    struct MintParams {\\n        // Derivative to use\\n        address derivative;\\n        // Minimum amount of synthetic tokens that a user wants to mint using collateral (anti-slippage)\\n        uint256 minNumTokens;\\n        // Amount of collateral that a user wants to spend for minting\\n        uint256 collateralAmount;\\n        // Maximum amount of fees in percentage that user is willing to pay\\n        uint256 feePercentage;\\n        // Expiration time of the transaction\\n        uint256 expiration;\\n        // Address to which send synthetic tokens minted\\n        address recipient;\\n    }\\n\\n    struct RedeemParams {\\n        // Derivative to use\\n        address derivative;\\n        // Amount of synthetic tokens that user wants to use for redeeming\\n        uint256 numTokens;\\n        // Minimium amount of collateral that user wants to redeem (anti-slippage)\\n        uint256 minCollateral;\\n        // Maximum amount of fees in percentage that user is willing to pay\\n        uint256 feePercentage;\\n        // Expiration time of the transaction\\n        uint256 expiration;\\n        // Address to which send collateral tokens redeemed\\n        address recipient;\\n    }\\n\\n    struct ExchangeParams {\\n        // Derivative of source pool\\n        address derivative;\\n        // Destination pool\\n        address destPool;\\n        // Derivative of destination pool\\n        address destDerivative;\\n        // Amount of source synthetic tokens that user wants to use for exchanging\\n        uint256 numTokens;\\n        // Minimum Amount of destination synthetic tokens that user wants to receive (anti-slippage)\\n        uint256 minDestNumTokens;\\n        // Maximum amount of fees in percentage that user is willing to pay\\n        uint256 feePercentage;\\n        // Expiration time of the transaction\\n        uint256 expiration;\\n        // Address to which send synthetic tokens exchanged\\n        address recipient;\\n    }\\n\\n    function mint(MintParams memory mintParams) external returns (uint256 syntheticTokensMinted, uint256 feePaid);\\n\\n    function redeem(RedeemParams memory redeemParams) external returns (uint256 collateralRedeemed, uint256 feePaid);\\n\\n    function exchange(ExchangeParams memory exchangeParams)\\n        external\\n        returns (uint256 destNumTokensMinted, uint256 feePaid);\\n}\\n\\ncontract Jarvis {\\n    enum MethodType {\\n        mint,\\n        redeem,\\n        exchange\\n    }\\n\\n    struct JarvisData {\\n        uint256 opType;\\n        address derivatives;\\n        address destDerivatives;\\n        uint128 fee;\\n        address destPool;\\n        uint128 expiration;\\n    }\\n\\n    function swapOnJarvis(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        JarvisData memory data = abi.decode(payload, (JarvisData));\\n        Utils.approve(exchange, address(fromToken), fromAmount);\\n\\n        if (data.opType == uint256(MethodType.mint)) {\\n            IJarvisPool.MintParams memory mintParam = IJarvisPool.MintParams(\\n                data.derivatives,\\n                1,\\n                fromAmount,\\n                data.fee,\\n                data.expiration,\\n                address(this)\\n            );\\n\\n            IJarvisPool(exchange).mint(mintParam);\\n        } else if (data.opType == uint256(MethodType.redeem)) {\\n            IJarvisPool.RedeemParams memory redeemParam = IJarvisPool.RedeemParams(\\n                data.derivatives,\\n                fromAmount,\\n                1,\\n                data.fee,\\n                data.expiration,\\n                address(this)\\n            );\\n\\n            IJarvisPool(exchange).redeem(redeemParam);\\n        } else if (data.opType == uint256(MethodType.exchange)) {\\n            IJarvisPool.ExchangeParams memory exchangeParam = IJarvisPool.ExchangeParams(\\n                data.derivatives,\\n                data.destPool,\\n                data.destDerivatives,\\n                fromAmount,\\n                1,\\n                data.fee,\\n                data.expiration,\\n                address(this)\\n            );\\n\\n            IJarvisPool(exchange).exchange(exchangeParam);\\n        } else {\\n            revert(\\\"Invalid opType\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/lido/Lido.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./IstETH.sol\\\";\\n\\ncontract Lido {\\n    address public immutable stETH;\\n\\n    constructor(address _stETH) public {\\n        stETH = _stETH;\\n    }\\n\\n    function swapOnLido(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        require(address(fromToken) == Utils.ethAddress(), \\\"srcToken should be ETH\\\");\\n        require(address(toToken) == stETH, \\\"destToken should be stETH\\\");\\n\\n        IstETH(stETH).submit{ value: fromAmount }(address(0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/makerpsm/MakerPsm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IPsm.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\ncontract MakerPsm {\\n    using SafeMath for uint256;\\n    address immutable daiMaker; // dai name has collision with chai\\n    uint256 constant WAD = 1e18;\\n\\n    struct MakerPsmData {\\n        address gemJoinAddress;\\n        uint256 toll;\\n        uint256 to18ConversionFactor;\\n    }\\n\\n    constructor(address _dai) public {\\n        daiMaker = _dai;\\n    }\\n\\n    function swapOnMakerPsm(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        MakerPsmData memory makerPsmData = abi.decode(payload, (MakerPsmData));\\n\\n        if (address(fromToken) == daiMaker) {\\n            uint256 gemAmt = fromAmount.mul(WAD).div(WAD.add(makerPsmData.toll).mul(makerPsmData.to18ConversionFactor));\\n            Utils.approve(exchange, address(fromToken), fromAmount);\\n            IPsm(exchange).buyGem(address(this), gemAmt);\\n        } else {\\n            Utils.approve(makerPsmData.gemJoinAddress, address(fromToken), fromAmount);\\n            IPsm(exchange).sellGem(address(this), fromAmount);\\n        }\\n    }\\n\\n    function buyOnMakerPsm(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        MakerPsmData memory makerPsmData = abi.decode(payload, (MakerPsmData));\\n\\n        if (address(fromToken) == daiMaker) {\\n            Utils.approve(exchange, address(fromToken), fromAmount);\\n            IPsm(exchange).buyGem(address(this), toAmount);\\n        } else {\\n            uint256 a = toAmount.mul(WAD);\\n            uint256 b = WAD.sub(makerPsmData.toll).mul(makerPsmData.to18ConversionFactor);\\n            // ceil division to handle rounding error\\n            uint256 gemAmt = (a.add(b).sub(1)).div(b);\\n            Utils.approve(makerPsmData.gemJoinAddress, address(fromToken), fromAmount);\\n            IPsm(exchange).sellGem(address(this), gemAmt);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/augustus-rfq/AugustusRFQ.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IAugustusRFQ.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\n\\nabstract contract AugustusRFQ is WethProvider {\\n    using SafeMath for uint256;\\n\\n    struct AugustusRFQData {\\n        IAugustusRFQ.OrderInfo[] orderInfos;\\n    }\\n\\n    function swapOnAugustusRFQ(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        AugustusRFQData memory data = abi.decode(payload, (AugustusRFQData));\\n\\n        for (uint256 i = 0; i < data.orderInfos.length; ++i) {\\n            address userAddress = address(uint160(data.orderInfos[i].order.nonceAndMeta));\\n            require(userAddress == address(0) || userAddress == msg.sender, \\\"unauthorized user\\\");\\n        }\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n            Utils.approve(exchange, WETH, fromAmount);\\n        } else {\\n            Utils.approve(exchange, address(fromToken), fromAmount);\\n        }\\n\\n        IAugustusRFQ(exchange).tryBatchFillOrderTakerAmount(data.orderInfos, fromAmount, address(this));\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            uint256 amount = IERC20(WETH).balanceOf(address(this));\\n            IWETH(WETH).withdraw(amount);\\n        }\\n    }\\n\\n    function buyOnAugustusRFQ(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmountMax,\\n        uint256 toAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        AugustusRFQData memory data = abi.decode(payload, (AugustusRFQData));\\n\\n        for (uint256 i = 0; i < data.orderInfos.length; ++i) {\\n            address userAddress = address(uint160(data.orderInfos[i].order.nonceAndMeta));\\n            require(userAddress == address(0) || userAddress == msg.sender, \\\"unauthorized user\\\");\\n        }\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmountMax }();\\n            Utils.approve(exchange, WETH, fromAmountMax);\\n        } else {\\n            Utils.approve(exchange, address(fromToken), fromAmountMax);\\n        }\\n\\n        IAugustusRFQ(exchange).tryBatchFillOrderMakerAmount(data.orderInfos, toAmount, address(this));\\n\\n        if (address(fromToken) == Utils.ethAddress() || address(toToken) == Utils.ethAddress()) {\\n            uint256 amount = IERC20(WETH).balanceOf(address(this));\\n            IWETH(WETH).withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Utils.sol\": {\r\n      \"content\": \"/*solhint-disable avoid-low-level-calls */\\n// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../ITokenTransferProxy.sol\\\";\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IERC20PermitLegacy {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    uint256 private constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct BuyData {\\n        address adapter;\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Route[] route;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee; //NOT USED\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index; //Adapter at which index needs to be used\\n        address targetExchange;\\n        uint256 percent;\\n        bytes payload;\\n        uint256 networkFee; //NOT USED - Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee; //NOT USED - Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {\\n        return ETH_ADDRESS;\\n    }\\n\\n    function maxUint() internal pure returns (uint256) {\\n        return MAX_UINT;\\n    }\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint256 allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{ value: amount, gas: 10000 }(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            } else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n    }\\n\\n    function tokenBalance(address token, address account) internal view returns (uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(address token, bytes memory permit) internal {\\n        if (permit.length == 32 * 7) {\\n            (bool success, ) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n\\n        if (permit.length == 32 * 8) {\\n            (bool success, ) = token.call(abi.encodePacked(IERC20PermitLegacy.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n    function transferETH(address payable destination, uint256 amount) internal {\\n        if (amount > 0) {\\n            (bool result, ) = destination.call{ value: amount, gas: 10000 }(\\\"\\\");\\n            require(result, \\\"Transfer ETH failed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITokenTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface ITokenTransferProxy {\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/aavee/IAavee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAaveToken {\\n    function redeem(uint256 amount) external;\\n\\n    function underlyingAssetAddress() external view returns (address);\\n}\\n\\ninterface IAaveV1LendingPool {\\n    function deposit(\\n        IERC20 token,\\n        uint256 amount,\\n        uint16 refCode\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/chai/IChai.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IChai {\\n    function join(address dst, uint256 wad) external;\\n\\n    function exit(address src, uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/bprotocol/IBProtocolAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IBProtocolAMM {\\n    function swap(\\n        uint256 lusdAmount,\\n        uint256 minEthReturn,\\n        address payable dest\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/bzx/IBZX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IBZX {\\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\\n\\n    function mintWithEther(address receiver) external payable returns (uint256 mintAmount);\\n\\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\\n\\n    function burnToEther(address payable receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\\n\\n    function loanTokenAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/WethProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ncontract WethProvider {\\n    /*solhint-disable var-name-mixedcase*/\\n    address public immutable WETH;\\n\\n    /*solhint-enable var-name-mixedcase*/\\n\\n    constructor(address weth) public {\\n        WETH = weth;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/smoothy/ISmoothyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface ISmoothyV1 {\\n    function swap(\\n        uint256 bTokenIdxIn,\\n        uint256 bTokenIdxOut,\\n        uint256 bTokenInAmount,\\n        uint256 bTokenOutMin\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/weth/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external payable virtual;\\n\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IUniswapExchange {\\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline) external payable returns (uint256 tokensBought);\\n\\n    function ethToTokenSwapOutput(uint256 tokensBought, uint256 deadline) external payable returns (uint256 ethSold);\\n\\n    function tokenToEthSwapInput(\\n        uint256 tokensSold,\\n        uint256 minEth,\\n        uint256 deadline\\n    ) external returns (uint256 ethBought);\\n\\n    function tokenToEthSwapOutput(\\n        uint256 ethBought,\\n        uint256 maxTokens,\\n        uint256 deadline\\n    ) external returns (uint256 tokensSold);\\n\\n    function tokenToTokenSwapInput(\\n        uint256 tokensSold,\\n        uint256 minTokensBought,\\n        uint256 minEthBought,\\n        uint256 deadline,\\n        address tokenAddr\\n    ) external returns (uint256 tokensBought);\\n\\n    function tokenToTokenSwapOutput(\\n        uint256 tokensBought,\\n        uint256 maxTokensSold,\\n        uint256 maxEthSold,\\n        uint256 deadline,\\n        address toToken\\n    ) external returns (uint256 tokensSold);\\n\\n    function ethToTokenTransferInput(\\n        uint256 min_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external payable returns (uint256 tokens_bought);\\n\\n    function ethToTokenTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 deadline,\\n        address recipient\\n    ) external payable returns (uint256 eth_sold);\\n\\n    function tokenToEthTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external returns (uint256 eth_bought);\\n\\n    function tokenToEthTransferOutput(\\n        uint256 eth_bought,\\n        uint256 max_tokens,\\n        uint256 deadline,\\n        address recipient\\n    ) external returns (uint256 tokens_sold);\\n\\n    function tokenToTokenTransferInput(\\n        uint256 tokens_sold,\\n        uint256 min_tokens_bought,\\n        uint256 min_eth_bought,\\n        uint256 deadline,\\n        address recipient,\\n        address token_addr\\n    ) external returns (uint256 tokens_bought);\\n\\n    function tokenToTokenTransferOutput(\\n        uint256 tokens_bought,\\n        uint256 max_tokens_sold,\\n        uint256 max_eth_sold,\\n        uint256 deadline,\\n        address recipient,\\n        address token_addr\\n    ) external returns (uint256 tokens_sold);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"./IUniswapExchange.sol\\\";\\n\\ninterface IUniswapFactory {\\n    function getExchange(address token) external view returns (address exchange);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/kyberdmm/IKyberDmmRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDMMExchangeRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata poolsPath,\\n        IERC20[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/lido/IstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IstETH {\\n    function submit(address _referral) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/makerpsm/IPsm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IPsm {\\n    function sellGem(address usr, uint256 gemAmt) external;\\n\\n    function buyGem(address usr, uint256 gemAmt) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/augustus-rfq/IAugustusRFQ.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\ninterface IAugustusRFQ {\\n    struct Order {\\n        uint256 nonceAndMeta; // first 160 bits is user address and then nonce\\n        uint128 expiry;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address taker; // zero address on orders executable by anyone\\n        uint256 makerAmount;\\n        uint256 takerAmount;\\n    }\\n\\n    // makerAsset and takerAsset are Packed structures\\n    // 0 - 159 bits are address\\n    // 160 - 161 bits are tokenType (0 ERC20, 1 ERC1155, 2 ERC721)\\n    struct OrderNFT {\\n        uint256 nonceAndMeta; // first 160 bits is user address and then nonce\\n        uint128 expiry;\\n        uint256 makerAsset;\\n        uint256 makerAssetId; // simply ignored in case of ERC20s\\n        uint256 takerAsset;\\n        uint256 takerAssetId; // simply ignored in case of ERC20s\\n        address maker;\\n        address taker; // zero address on orders executable by anyone\\n        uint256 makerAmount;\\n        uint256 takerAmount;\\n    }\\n\\n    struct OrderInfo {\\n        Order order;\\n        bytes signature;\\n        uint256 takerTokenFillAmount;\\n        bytes permitTakerAsset;\\n        bytes permitMakerAsset;\\n    }\\n\\n    struct OrderNFTInfo {\\n        OrderNFT order;\\n        bytes signature;\\n        uint256 takerTokenFillAmount;\\n        bytes permitTakerAsset;\\n        bytes permitMakerAsset;\\n    }\\n\\n    /**\\n     @dev Allows taker to fill complete RFQ order\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n    */\\n    function fillOrder(Order calldata order, bytes calldata signature) external;\\n\\n    /**\\n     @dev Allows taker to fill Limit order\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n    */\\n    function fillOrderNFT(OrderNFT calldata order, bytes calldata signature) external;\\n\\n    /**\\n     @dev Same as fillOrder but allows sender to specify the target\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param target Address of the receiver\\n    */\\n    function fillOrderWithTarget(\\n        Order calldata order,\\n        bytes calldata signature,\\n        address target\\n    ) external;\\n\\n    /**\\n     @dev Same as fillOrderNFT but allows sender to specify the target\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param target Address of the receiver\\n    */\\n    function fillOrderWithTargetNFT(\\n        OrderNFT calldata order,\\n        bytes calldata signature,\\n        address target\\n    ) external;\\n\\n    /**\\n     @dev Allows taker to partially fill an order\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    */\\n    function partialFillOrder(\\n        Order calldata order,\\n        bytes calldata signature,\\n        uint256 takerTokenFillAmount\\n    ) external returns (uint256 makerTokenFilledAmount);\\n\\n    /**\\n     @dev Allows taker to partially fill an NFT order\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param takerTokenFillAmount Maximum taker token to fill this order with.\\n    */\\n    function partialFillOrderNFT(\\n        OrderNFT calldata order,\\n        bytes calldata signature,\\n        uint256 takerTokenFillAmount\\n    ) external returns (uint256 makerTokenFilledAmount);\\n\\n    /**\\n     @dev Same as `partialFillOrder` but it allows to specify the destination address\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param takerTokenFillAmount Maximum taker token to fill this order with.\\n     @param target Address that will receive swap funds\\n    */\\n    function partialFillOrderWithTarget(\\n        Order calldata order,\\n        bytes calldata signature,\\n        uint256 takerTokenFillAmount,\\n        address target\\n    ) external returns (uint256 makerTokenFilledAmount);\\n\\n    /**\\n     @dev Same as `partialFillOrderWithTarget` but it allows to pass permit\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param takerTokenFillAmount Maximum taker token to fill this order with.\\n     @param target Address that will receive swap funds\\n     @param permitTakerAsset Permit calldata for taker\\n     @param permitMakerAsset Permit calldata for maker\\n    */\\n    function partialFillOrderWithTargetPermit(\\n        Order calldata order,\\n        bytes calldata signature,\\n        uint256 takerTokenFillAmount,\\n        address target,\\n        bytes calldata permitTakerAsset,\\n        bytes calldata permitMakerAsset\\n    ) external returns (uint256 makerTokenFilledAmount);\\n\\n    /**\\n     @dev Same as `partialFillOrderNFT` but it allows to specify the destination address\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param takerTokenFillAmount Maximum taker token to fill this order with.\\n     @param target Address that will receive swap funds\\n    */\\n    function partialFillOrderWithTargetNFT(\\n        OrderNFT calldata order,\\n        bytes calldata signature,\\n        uint256 takerTokenFillAmount,\\n        address target\\n    ) external returns (uint256 makerTokenFilledAmount);\\n\\n    /**\\n     @dev Same as `partialFillOrderWithTargetNFT` but it allows to pass token permits\\n     @param order Order quote to fill\\n     @param signature Signature of the maker corresponding to the order\\n     @param takerTokenFillAmount Maximum taker token to fill this order with.\\n     @param target Address that will receive swap funds\\n     @param permitTakerAsset Permit calldata for taker\\n     @param permitMakerAsset Permit calldata for maker\\n    */\\n    function partialFillOrderWithTargetPermitNFT(\\n        OrderNFT calldata order,\\n        bytes calldata signature,\\n        uint256 takerTokenFillAmount,\\n        address target,\\n        bytes calldata permitTakerAsset,\\n        bytes calldata permitMakerAsset\\n    ) external returns (uint256 makerTokenFilledAmount);\\n\\n    /**\\n     @dev Partial fill multiple orders\\n     @param orderInfos OrderInfo to fill\\n     @param target Address of receiver\\n    */\\n    function batchFillOrderWithTarget(OrderInfo[] calldata orderInfos, address target) external;\\n\\n    /**\\n     @dev batch fills orders until the takerFillAmount is swapped\\n     @dev skip the order if it fails\\n     @param orderInfos OrderInfo to fill\\n     @param takerFillAmount total taker amount to fill\\n     @param target Address of receiver\\n    */\\n    function tryBatchFillOrderTakerAmount(\\n        OrderInfo[] calldata orderInfos,\\n        uint256 takerFillAmount,\\n        address target\\n    ) external;\\n\\n    /**\\n     @dev batch fills orders until the makerFillAmount is swapped\\n     @dev skip the order if it fails\\n     @param orderInfos OrderInfo to fill\\n     @param makerFillAmount total maker amount to fill\\n     @param target Address of receiver\\n    */\\n    function tryBatchFillOrderMakerAmount(\\n        OrderInfo[] calldata orderInfos,\\n        uint256 makerFillAmount,\\n        address target\\n    ) external;\\n\\n    /**\\n     @dev Partial fill multiple NFT orders\\n     @param orderInfos Info about each order to fill\\n     @param target Address of receiver\\n    */\\n    function batchFillOrderWithTargetNFT(OrderNFTInfo[] calldata orderInfos, address target) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"aaveeRefCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"aaveeSpender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refCodeV1\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Adapter03", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000003dfd23a6c5e8bbcfc9581d2e864a68feb6a076d3000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d9500000000000000000000000006af07097c9eeb7fd685c692751d5c66db49c2150000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe84", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}