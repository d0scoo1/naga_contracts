{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/BFF.sol\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-06-21\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value;\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n     \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n }\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidityETH(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountToken, uint amountETH); \r\n}\r\n\r\nlibrary Referrals {\r\n\r\n    struct Data {\r\n        uint256 tokensNeededForRefferalNumber;\r\n        mapping(uint256 => address) registeredReferrersByCode;\r\n        mapping(address => uint256) registeredReferrersByAddress;\r\n        uint256 currentRefferralCode;\r\n    }\r\n\r\n    event RefferalCodeGenerated(address account, uint256 code, uint256 inc1, uint256 inc2);\r\n\r\n\r\n    event UpdateTokensNeededForReferralNumber(uint256 value);\r\n\r\n\r\n    function init(Data storage data) public {\r\n        updateTokensNeededForReferralNumber(data, 10000 * (10**18)); //10000 tokens needed\r\n\r\n        data.currentRefferralCode = 10000;\r\n    }\r\n\r\n    function updateTokensNeededForReferralNumber(Data storage data, uint256 value) public {\r\n        data.tokensNeededForRefferalNumber = value;\r\n        emit UpdateTokensNeededForReferralNumber(value);\r\n    }\r\n\r\n    function random(Data storage data, uint256 min, uint256 max) private view returns (uint256) {\r\n        return min + uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, data.currentRefferralCode))) % (max - min + 1);\r\n    }\r\n\r\n    function handleNewBalance(Data storage data, address account, uint256 balance) public {\r\n        //already registered\r\n        if(data.registeredReferrersByAddress[account] != 0) {\r\n            return;\r\n        }\r\n        //not enough tokens\r\n        if(balance < data.tokensNeededForRefferalNumber) {\r\n            return;\r\n        }\r\n        //randomly increment referral code \r\n        //cannot be guessed easily\r\n        uint256 inc1 = random(data, 1, 7);\r\n        uint256 inc2 = random(data, 1, 9);\r\n        data.currentRefferralCode += inc1;\r\n\r\n        //don't allow referral code to end in 0,\r\n        //so that ambiguous codes do not exist (ie, 420 and 4200)\r\n        if(data.currentRefferralCode % 10 == 0) {\r\n            data.currentRefferralCode += inc2;\r\n        }\r\n\r\n        if(data.currentRefferralCode < 10000) {\r\n            uint256 inc3 = random(data, 51, 35156);\r\n            data.currentRefferralCode = 10000;\r\n            data.currentRefferralCode += inc3;\r\n\r\n            if(data.currentRefferralCode % 10 == 0) {\r\n            data.currentRefferralCode += inc2;\r\n        }\r\n        }\r\n        \r\n        if(data.currentRefferralCode > 99999) {\r\n            uint256 inc4 = random(data, 111, 65644);\r\n            data.currentRefferralCode = 10000;\r\n            data.currentRefferralCode += inc4;\r\n\r\n            if(data.currentRefferralCode % 10 == 0) {\r\n            data.currentRefferralCode += inc2;\r\n        }\r\n        }\r\n\r\n        if(data.registeredReferrersByCode[data.currentRefferralCode] != address(0)) {\r\n            data.currentRefferralCode += inc2;\r\n        }\r\n        \r\n        data.registeredReferrersByCode[data.currentRefferralCode] = account;\r\n        data.registeredReferrersByAddress[account] = data.currentRefferralCode;\r\n\r\n        emit RefferalCodeGenerated(account, data.currentRefferralCode, inc1, inc2);\r\n    }\r\n\r\n    function getReferralCode(Data storage referrals, address account) public view returns (uint256) {\r\n        return referrals.registeredReferrersByAddress[account];\r\n    }\r\n\r\n    function getReferrer(Data storage referrals, uint256 referralCode) public view returns (address) {\r\n        return referrals.registeredReferrersByCode[referralCode];\r\n    }\r\n\r\n    function getReferralCodeFromTokenAmount(uint256 tokenAmount) private pure returns (uint256) {\r\n\r\n        return (tokenAmount % (10**18))/(10**(13));\r\n\r\n    }\r\n\r\n    function getReferrerFromTokenAmount(Data storage referrals, uint256 tokenAmount) public view returns (address) {\r\n        uint256 referralCode = getReferralCodeFromTokenAmount(tokenAmount);\r\n\r\n        return referrals.registeredReferrersByCode[referralCode];\r\n    }\r\n\r\n    function isValidReferrer(Data storage referrals, address referrer, uint256 referrerBalance, address transferTo) public view returns (bool) {\r\n        if(referrer == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 tokensNeeded = referrals.tokensNeededForRefferalNumber;\r\n\r\n        return referrerBalance >= tokensNeeded && referrer != transferTo;\r\n    }\r\n}\r\n\r\nlibrary SignedSafeMath {\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        return a - b;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\nlibrary UniswapV2PriceImpactCalculator {\r\n    function calculateSellPriceImpact(address tokenAddress, address pairAddress, uint256 value) public view returns (uint256) {\r\n        value = value * 998 / 1000;\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n\r\n        (uint256 r0, uint256 r1,) = pair.getReserves();\r\n\r\n        IERC20Metadata token0 = IERC20Metadata(pair.token0());\r\n        IERC20Metadata token1 = IERC20Metadata(pair.token1());\r\n\r\n        if(address(token1) == tokenAddress) {\r\n            IERC20Metadata tokenTemp = token0;\r\n            token0 = token1;\r\n            token1 = tokenTemp;\r\n\r\n            uint256 rTemp = r0;\r\n            r0 = r1;\r\n            r1 = rTemp;\r\n        }\r\n\r\n        uint256 product = r0 * r1;\r\n\r\n        uint256 r0After = r0 + value;\r\n        uint256 r1After = product / r0After;\r\n\r\n        return (10000 - (r1After * 10000 / r1)) * 998 / 1000;\r\n    }\r\n}\r\n\r\nlibrary SafeCast {\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(\r\n            value <= type(uint224).max,\r\n            \"SafeCast: value doesn't fit in 224 bits\"\r\n        );\r\n        return uint224(value);\r\n    }\r\n\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(\r\n            value <= type(uint128).max,\r\n            \"SafeCast: value doesn't fit in 128 bits\"\r\n        );\r\n        return uint128(value);\r\n    }\r\n\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(\r\n            value <= type(uint96).max,\r\n            \"SafeCast: value doesn't fit in 96 bits\"\r\n        );\r\n        return uint96(value);\r\n    }\r\n\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(\r\n            value <= type(uint64).max,\r\n            \"SafeCast: value doesn't fit in 64 bits\"\r\n        );\r\n        return uint64(value);\r\n    }\r\n\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(\r\n            value <= type(uint32).max,\r\n            \"SafeCast: value doesn't fit in 32 bits\"\r\n        );\r\n        return uint32(value);\r\n    }\r\n\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(\r\n            value <= type(uint16).max,\r\n            \"SafeCast: value doesn't fit in 16 bits\"\r\n        );\r\n        return uint16(value);\r\n    }\r\n\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(\r\n            value <= type(uint8).max,\r\n            \"SafeCast: value doesn't fit in 8 bits\"\r\n        );\r\n        return uint8(value);\r\n    }\r\n\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(\r\n            value >= type(int128).min && value <= type(int128).max,\r\n            \"SafeCast: value doesn't fit in 128 bits\"\r\n        );\r\n        return int128(value);\r\n    }\r\n\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(\r\n            value >= type(int64).min && value <= type(int64).max,\r\n            \"SafeCast: value doesn't fit in 64 bits\"\r\n        );\r\n        return int64(value);\r\n    }\r\n\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(\r\n            value >= type(int32).min && value <= type(int32).max,\r\n            \"SafeCast: value doesn't fit in 32 bits\"\r\n        );\r\n        return int32(value);\r\n    }\r\n\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(\r\n            value >= type(int16).min && value <= type(int16).max,\r\n            \"SafeCast: value doesn't fit in 16 bits\"\r\n        );\r\n        return int16(value);\r\n    }\r\n\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(\r\n            value >= type(int8).min && value <= type(int8).max,\r\n            \"SafeCast: value doesn't fit in 8 bits\"\r\n        );\r\n        return int8(value);\r\n    }\r\n\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(\r\n            value <= uint256(type(int256).max),\r\n            \"SafeCast: value doesn't fit in an int256\"\r\n        );\r\n        return int256(value);\r\n    }\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    function distributeDividends() external payable;\r\n\r\n    function withdrawDividend() external;\r\n\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event DividendWithdrawn(\r\n        address indexed to,\r\n        uint256 weiAmount,\r\n        address received\r\n    );\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function accumulativeDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\nabstract contract DividendPayingToken is\r\n    ERC20,\r\n    DividendPayingTokenInterface,\r\n    DividendPayingTokenOptionalInterface\r\n{\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n    uint256 internal constant magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    function distributeDividends() public payable override {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(\r\n                msg.value\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender), payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user, address payable to)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            emit DividendWithdrawn(user, _withdrawableDividend, to);\r\n            (bool success, ) = to.call{value: _withdrawableDividend}(\"\");\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256() / magnitude;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256());\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public\r\n        view\r\n        returns (uint256 _withdrawableDividends, uint256 _withdrawnDividends)\r\n    {\r\n        _withdrawableDividends = withdrawableDividendOf(_account);\r\n        _withdrawnDividends = withdrawnDividends[_account];\r\n    }\r\n}\r\n\r\ncontract BFFDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private tokenHoldersCount;\r\n    mapping(address => bool) private tokenHoldersMap;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n\r\n    constructor()\r\n        DividendPayingToken(\r\n            \"BFF_Dividend_Tracker\",\r\n            \"BFF_Dividend_Tracker\"\r\n        )\r\n    {\r\n        minimumTokenBalanceForDividends = 10000 * 10**18;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function _approve(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(false, \"BFF_Dividend_Tracker: No approvals allowed\");\r\n    }\r\n\r\n    function _transfer(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(false, \"BFF_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(\r\n            false,\r\n            \"BFF_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main BFF contract.\"\r\n        );\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n\r\n        if (tokenHoldersMap[account] == true) {\r\n            tokenHoldersMap[account] = false;\r\n            tokenHoldersCount.decrement();\r\n        }\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function includeFromDividends(address account, uint256 balance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        excludedFromDividends[account] = false;\r\n\r\n        if (balance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, balance);\r\n\r\n            if (tokenHoldersMap[account] == false) {\r\n                tokenHoldersMap[account] = true;\r\n                tokenHoldersCount.increment();\r\n            }\r\n        }\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function isExcludeFromDividends(address account)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return excludedFromDividends[account];\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersCount.current();\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if (newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n\r\n            if (tokenHoldersMap[account] == false) {\r\n                tokenHoldersMap[account] = true;\r\n                tokenHoldersCount.increment();\r\n            }\r\n        } else {\r\n            _setBalance(account, 0);\r\n\r\n            if (tokenHoldersMap[account] == true) {\r\n                tokenHoldersMap[account] = false;\r\n                tokenHoldersCount.decrement();\r\n            }\r\n        }\r\n    }\r\n\r\n    function processAccount(address account, address toAccount)\r\n        public\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        uint256 amount = _withdrawDividendOfUser(\r\n            payable(account),\r\n            payable(toAccount)\r\n        );\r\n        return amount;\r\n    }\r\n}\r\n\r\ncontract BFF is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Counters for Counters.Counter;\r\n    using Referrals for Referrals.Data;\r\n\r\n    string private constant _name = \"By Frens For Frens\";\r\n    string private constant _symbol = \"BFF\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 1e12 * 10**18;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    bool private tradingOpen = false;\r\n    bool private allowClaims = false;\r\n    uint256 private launchBlock = 0;\r\n    address private uniswapV2Pair;\r\n\r\n    IERC20 private PreSaleTokenAddress;\r\n    uint256 private minimumPreSaleTokens;\r\n    uint256 private preSaleTimestamp;\r\n    uint256 private minutesForPreSale;\r\n    uint256 private publicSaleTimestamp;\r\n    bool private preSaleActive = false;\r\n\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n    mapping(address => bool) public isExcludeFromFee;\r\n    mapping(address => bool) public isBlacklist;\r\n    mapping(address => bool) public isAllowedToClaim;\r\n    mapping(address => bool) public isBot;\r\n    mapping(address => bool) public isExcludeFromMaxWalletAmount;\r\n\r\n    uint256 public maxWalletAmount;\r\n\r\n    uint256 public baseBuyTax = 10;\r\n    uint256 public baseSellTax = 5;\r\n    uint256 public referralBuyTax = 5;\r\n    uint256 public referrerBonus = 25; // 2.5% division in tenths to support\r\n    uint256 public referredBonus = 25; // 2.5% division in tenths to support\r\n\r\n    uint256 private autoLP = 20;\r\n    uint256 private devFee = 10;\r\n    uint256 private marketingFee = 70;\r\n\r\n    uint256 public minContractTokensToSwap = 2e9 * 10**18;\r\n\r\n    struct PriceImpactRangeTax {\r\n        uint256 from;\r\n        uint256 to;\r\n        uint256 tax;\r\n    }\r\n\r\n    mapping(address => uint256) public initialBuyTimestamp;\r\n    mapping(uint256 => PriceImpactRangeTax) public priceImpactRangeTaxes;\r\n    uint8 public maxIndexImpactRange;\r\n\r\n    address private devWalletAddress;\r\n    address private marketingWalletAddress;\r\n\r\n    BFFDividendTracker public dividendTracker;\r\n    uint256 minimumTokenBalanceForDividends = 1000 * 10**18;\r\n    mapping(address => uint256) public lastTransfer;\r\n\r\n    uint256 public pendingTokensForReward;\r\n    uint256 public minRewardTokensToSwap = 10000 * 10**18;\r\n\r\n    uint256 public pendingEthReward;\r\n\r\n    struct ClaimedEth {\r\n        uint256 ethAmount;\r\n        uint256 tokenAmount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    Counters.Counter private claimedHistoryIds;\r\n    Referrals.Data private _storage;\r\n\r\n    mapping(uint256 => ClaimedEth) private claimedEthMap;\r\n    mapping(address => uint256[]) private userClaimedIds;\r\n\r\n    event BuyFees(address from, address to, uint256 amountTokens);\r\n    event SellFees(address from, address to, uint256 amountTokens);\r\n    event AddLiquidity(uint256 amountTokens, uint256 amountEth);\r\n    event SwapTokensForEth(uint256 sentTokens, uint256 receivedEth);\r\n    event SwapEthForTokens(uint256 sentEth, uint256 receivedTokens);\r\n    event DistributeFees(uint256 devEth, uint256 remarketingEth);\r\n    event AddRewardPool(uint256 _ethAmount);\r\n\r\n    event SendDividends(uint256 amount);\r\n\r\n    event DividendClaimed(\r\n        uint256 ethAmount,\r\n        uint256 tokenAmount,\r\n        address account\r\n    );\r\n\r\n    constructor(\r\n        address _devWalletAddress,\r\n        address _marketingWalletAddress\r\n    ) ERC20(_name, _symbol) {\r\n        devWalletAddress = _devWalletAddress;\r\n        marketingWalletAddress = _marketingWalletAddress;\r\n\r\n        maxWalletAmount = (_tTotal * 25) / 10000; // 0.25% maxWalletAmount (initial limit)\r\n\r\n        dividendTracker = new BFFDividendTracker();\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(owner());\r\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n        isExcludeFromFee[owner()] = true;\r\n        isExcludeFromFee[address(this)] = true;\r\n        isExcludeFromFee[address(dividendTracker)] = true;\r\n        isExcludeFromFee[devWalletAddress] = true;\r\n        isExcludeFromFee[marketingWalletAddress] = true;\r\n        isExcludeFromMaxWalletAmount[owner()] = true;\r\n        isExcludeFromMaxWalletAmount[address(this)] = true;\r\n        isExcludeFromMaxWalletAmount[address(uniswapV2Router)] = true;\r\n        isExcludeFromMaxWalletAmount[devWalletAddress] = true;\r\n        isExcludeFromMaxWalletAmount[marketingWalletAddress] = true;\r\n        priceImpactRangeTaxes[1].from = 0;\r\n        priceImpactRangeTaxes[1].to = 99;\r\n        priceImpactRangeTaxes[1].tax = 5;\r\n        priceImpactRangeTaxes[2].from = 100;\r\n        priceImpactRangeTaxes[2].to = 149;\r\n        priceImpactRangeTaxes[2].tax = 10;\r\n        priceImpactRangeTaxes[3].from = 150;\r\n        priceImpactRangeTaxes[3].to = 199;\r\n        priceImpactRangeTaxes[3].tax = 15;\r\n        priceImpactRangeTaxes[4].from = 200;\r\n        priceImpactRangeTaxes[4].to = 249;\r\n        priceImpactRangeTaxes[4].tax = 20;\r\n        priceImpactRangeTaxes[5].from = 250;\r\n        priceImpactRangeTaxes[5].to = 5000;\r\n        priceImpactRangeTaxes[5].tax = 25;\r\n\r\n        maxIndexImpactRange = 5;\r\n\r\n        _mint(owner(), _tTotal);\r\n\r\n        _storage.init();\r\n\r\n    }\r\n\r\n    // withdraw ETH if stuck before launch\r\n    function withdrawStuckETH() external onlyOwner {\r\n        require(!tradingOpen, \"Can only withdraw if trading hasn't started\");\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{ value: address(this).balance }(\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function enablePreSale (uint256 _minutesForPreSale, address _preSaleTokenAddress, uint256 _minimumPreSaleTokens) external onlyOwner {\r\n        require(!tradingOpen, \"BFF: Can only enable PreSale before Trading has been opened.\");\r\n        minutesForPreSale = _minutesForPreSale;\r\n        PreSaleTokenAddress = IERC20(_preSaleTokenAddress);\r\n        minimumPreSaleTokens = _minimumPreSaleTokens * 10**18;\r\n        preSaleActive = true;\r\n    }\r\n\r\n    function openTrading()\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(!tradingOpen, \"BFF: Trading is already open\");\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n        isExcludeFromMaxWalletAmount[address(uniswapV2Pair)] = true;\r\n\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n        dividendTracker.excludeFromDividends(uniswapV2Pair);\r\n\r\n        addLiquidity(balanceOf(address(this)), address(this).balance);\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n\r\n        tradingOpen = true;\r\n        if (preSaleActive) {\r\n            uint256 _launchTime;\r\n            _launchTime = block.timestamp;\r\n\r\n            preSaleTimestamp = _launchTime;\r\n            publicSaleTimestamp = _launchTime.add(\r\n                minutesForPreSale.mul(1 minutes)\r\n            );\r\n        }\r\n        launchBlock = block.number;\r\n    }\r\n\r\n    function alowClaims(bool _alowClaims) external onlyOwner{\r\n        allowClaims = _alowClaims;\r\n    }\r\n\r\n    function updateReferrals(uint256 _referralBuyTax, uint256 _referrerBonus, uint256 _referredBonus, uint256 tokensNeeded) public onlyOwner {\r\n        referralBuyTax = _referralBuyTax;\r\n        referrerBonus = _referrerBonus;\r\n        referredBonus = _referredBonus;\r\n        _storage.updateTokensNeededForReferralNumber(tokensNeeded);\r\n    }\r\n    \r\n    function getReferralCode(address account) public view returns (uint256 referralCode) {\r\n        referralCode = _storage.getReferralCode(account);\r\n    }\r\n\r\n    function getReferralCodeAddress(uint256 referralCode) public view returns (address referrerAddress) {\r\n        referrerAddress = _storage.getReferrer(referralCode);\r\n    }\r\n\r\n    function getReferralAddressByTokenAmount(uint256 _amount) public view returns (address referrerAddress) {\r\n        referrerAddress = _storage.getReferrerFromTokenAmount(_amount);\r\n    }\r\n\r\n    function isReferralValid(address referrer, address _to) public view returns (bool) {\r\n        if(referrer == address(0)) {\r\n            return false;\r\n        }\r\n        uint256 neededTokens = _storage.tokensNeededForRefferalNumber;\r\n\r\n        return balanceOf(referrer) >= neededTokens && referrer != _to;\r\n    }\r\n\r\n    function handleNewBalanceForReferrals(address account) private {\r\n        if(isExcludeFromFee[account] || isBlacklist[account]) {\r\n            return;\r\n        }\r\n\r\n        if(account == address(uniswapV2Pair)) {\r\n            return;\r\n        }\r\n\r\n        _storage.handleNewBalance(account, balanceOf(account));\r\n    }\r\n\r\n    function manualSwap() external onlyOwner {\r\n        uint256 totalTokens = balanceOf(address(this)).sub(\r\n            pendingTokensForReward\r\n        );\r\n\r\n        swapTokensForEth(totalTokens);\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        uint256 totalEth = address(this).balance.sub(pendingEthReward);\r\n\r\n        uint256 devFeesToSend = totalEth.mul(devFee).div(\r\n            uint256(100).sub(autoLP)\r\n        );\r\n        uint256 marketingFeesToSend = totalEth.mul(marketingFee).div(\r\n            uint256(100).sub(autoLP)\r\n        );\r\n        uint256 remainingEthForFees = totalEth.sub(devFeesToSend).sub(\r\n            marketingFeesToSend);\r\n        devFeesToSend = devFeesToSend.add(remainingEthForFees);\r\n\r\n        sendEthToWallets(devFeesToSend, marketingFeesToSend);\r\n    }\r\n\r\n    function getPriceImpactTax(address _ad, uint256 _amount) public view returns (uint256) {\r\n        uint256 tax = baseSellTax;\r\n\r\n        uint256 priceImpact = UniswapV2PriceImpactCalculator.calculateSellPriceImpact(address(_ad), uniswapV2Pair, _amount);\r\n\r\n        for (uint8 x =1; x <= maxIndexImpactRange; x++) {\r\n            if (\r\n                (priceImpact >= priceImpactRangeTaxes[x].from &&\r\n                    priceImpact <= priceImpactRangeTaxes[x].to)\r\n            ) {\r\n                tax = priceImpactRangeTaxes[x].tax;\r\n                return tax;\r\n            }\r\n        }\r\n        return tax;\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function withdrawableDividendOf(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(_account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address _account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.balanceOf(_account);\r\n    }\r\n\r\n    function claim() external {\r\n        _claim(payable(msg.sender), false);\r\n    }\r\n\r\n    function reinvest() external {\r\n        _claim(payable(msg.sender), true);\r\n    }\r\n\r\n    function _claim(address payable _account, bool _reinvest) private {\r\n        uint256 withdrawableAmount = dividendTracker.withdrawableDividendOf(\r\n            _account\r\n        );\r\n        require(\r\n            withdrawableAmount > 0,\r\n            \"BFF: Claimer has no withdrawable dividends\"\r\n        );\r\n        uint256 ethAmount;\r\n        uint256 tokenAmount;\r\n\r\n        if (!_reinvest) {\r\n            require(\r\n                allowClaims || isAllowedToClaim[_account],\r\n                \"BFF: Claimer not allowed to claim dividends, can only re-invest.\"\r\n            );\r\n            ethAmount = dividendTracker.processAccount(_account, _account);\r\n        } else if (_reinvest) {\r\n            ethAmount = dividendTracker.processAccount(_account, address(this));\r\n            if (ethAmount > 0) {\r\n                tokenAmount = swapEthForTokens(ethAmount, _account);\r\n            }\r\n        }\r\n        if (ethAmount > 0) {\r\n            claimedHistoryIds.increment();\r\n            uint256 hId = claimedHistoryIds.current();\r\n            claimedEthMap[hId].ethAmount = ethAmount;\r\n            claimedEthMap[hId].tokenAmount = tokenAmount;\r\n            claimedEthMap[hId].timestamp = block.timestamp;\r\n\r\n            userClaimedIds[_account].push(hId);\r\n\r\n            emit DividendClaimed(ethAmount, tokenAmount, _account);\r\n        }\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 withdrawableDividends,\r\n            uint256 withdrawnDividends,\r\n            uint256 balance\r\n        )\r\n    {\r\n        (withdrawableDividends, withdrawnDividends) = dividendTracker\r\n            .getAccount(_account);\r\n        return (withdrawableDividends, withdrawnDividends, balanceOf(_account));\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal virtual override {\r\n        require(!isBot[_from] && !isBot[_to]);\r\n        require(!isBlacklist[_from] && !isBlacklist[_to]);\r\n\r\n        uint256 transferAmount = _amount;\r\n        if (\r\n            tradingOpen &&\r\n            (automatedMarketMakerPairs[_from] ||\r\n                automatedMarketMakerPairs[_to]) &&\r\n            !isExcludeFromFee[_from] &&\r\n            !isExcludeFromFee[_to]\r\n        ) {\r\n            if (preSaleActive &&\r\n                preSaleTimestamp <= block.timestamp &&\r\n                publicSaleTimestamp > block.timestamp\r\n            ) {\r\n                require(\r\n                    PreSaleTokenAddress.balanceOf(_to) >= minimumPreSaleTokens,\r\n                    \"PreSale: Not enough PreSale token balance.\"\r\n                );\r\n            }\r\n\r\n            address _referrer; \r\n            _referrer = _storage.getReferrerFromTokenAmount(_amount);\r\n\r\n            if(!_storage.isValidReferrer(_referrer, balanceOf(_referrer), _to)) {\r\n                _referrer = address(0);\r\n            }\r\n            \r\n            transferAmount = takeFees(_from, _to, _amount, _referrer);\r\n            \r\n        }\r\n        if (initialBuyTimestamp[_to] == 0) {\r\n            initialBuyTimestamp[_to] = block.timestamp;\r\n        }\r\n        if (!automatedMarketMakerPairs[_to] && !isExcludeFromMaxWalletAmount[_to]) {\r\n            require(balanceOf(_to) + transferAmount <= maxWalletAmount,\r\n                \"BFF: Wallet balance limit reached\"\r\n            );\r\n        }\r\n\r\n        super._transfer(_from, _to, transferAmount);\r\n\r\n        handleNewBalanceForReferrals(_to);\r\n\r\n        if (!dividendTracker.isExcludeFromDividends(_from)) {\r\n            try\r\n                dividendTracker.setBalance(payable(_from), balanceOf(_from))\r\n            {} catch {}\r\n        }\r\n        if (!dividendTracker.isExcludeFromDividends(_to)) {\r\n            try\r\n                dividendTracker.setBalance(payable(_to), balanceOf(_to))\r\n            {} catch {}\r\n        }\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address _pair, bool _value) private {\r\n        require(\r\n            automatedMarketMakerPairs[_pair] != _value,\r\n            \"BFF: Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n\r\n        if (_value) {\r\n            dividendTracker.excludeFromDividends(_pair);\r\n        }\r\n    }\r\n\r\n    function setBlacklist(address _address, bool _isBlaklist)\r\n        external onlyOwner {\r\n        isBlacklist[_address] = _isBlaklist;\r\n    }\r\n\r\n    function isAlowedToClaim(address _address, bool _isAlowedToClaim)\r\n        external onlyOwner {\r\n        isAllowedToClaim[_address] = _isAlowedToClaim;\r\n    }\r\n\r\n    function setExcludeFromFee(address _address, bool _isExludeFromFee)\r\n        external onlyOwner {\r\n        isExcludeFromFee[_address] = _isExludeFromFee;\r\n    }\r\n\r\n    function setExcludeFromMaxWalletAmount(address _address, bool _isExludeFromMaxWalletAmount)\r\n        external onlyOwner {\r\n        isExcludeFromMaxWalletAmount[_address] = _isExludeFromMaxWalletAmount;\r\n    }\r\n\r\n    function setExludeFromDividends(address _address, bool _isExludeFromDividends)\r\n        external onlyOwner {\r\n        if (_isExludeFromDividends) {\r\n            dividendTracker.excludeFromDividends(_address);\r\n        } else {\r\n            dividendTracker.includeFromDividends(_address, balanceOf(_address));\r\n        }\r\n    }\r\n\r\n    function setMultipleExludeFromDividends(address[] calldata _isMultipleExludeFromDividends) public onlyOwner {\r\n        for (uint256 i = 0; i < _isMultipleExludeFromDividends.length; i++) {\r\n                dividendTracker.excludeFromDividends(_isMultipleExludeFromDividends[i]);\r\n            }\r\n    }\r\n\r\n    function setMaxWallet(uint256 newMaxWallet) external onlyOwner {\r\n        require(newMaxWallet >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxWallet lower than 0.1%\");\r\n        maxWalletAmount = newMaxWallet * (10**18);\r\n    }\r\n    \r\n\r\n    function setTaxes(\r\n        uint256 _baseBuyTax,\r\n        uint256 _baseSellTax,\r\n        uint256 _autoLP,\r\n        uint256 _devFee,\r\n        uint256 _marketingFee\r\n    ) external onlyOwner {\r\n        require(_baseBuyTax <= 10 && baseSellTax <= 10);\r\n\r\n        baseBuyTax = _baseBuyTax;\r\n        baseSellTax = _baseSellTax;\r\n        autoLP = _autoLP;\r\n        devFee = _devFee;\r\n        marketingFee = _marketingFee;\r\n    }\r\n\r\n    function setMinContractTokensToSwap(uint256 _numToken) public onlyOwner {\r\n        minContractTokensToSwap = _numToken;\r\n    }\r\n\r\n    function setMinRewardTokensToSwap(uint256 _numToken) public onlyOwner {\r\n        minRewardTokensToSwap = _numToken;\r\n    }\r\n\r\n    function setPriceImpactRangeTax(\r\n        uint8 _index,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _tax\r\n    ) external onlyOwner {\r\n        priceImpactRangeTaxes[_index].from = _from;\r\n        priceImpactRangeTaxes[_index].to = _to;\r\n        priceImpactRangeTaxes[_index].tax = _tax;\r\n    }\r\n\r\n    function setMaxIndexImpactRange(uint8 _maxIndex) external onlyOwner {\r\n        maxIndexImpactRange = _maxIndex;\r\n    }\r\n\r\n    function setBots(address[] calldata _bots) public onlyOwner {\r\n        for (uint256 i = 0; i < _bots.length; i++) {\r\n            if (\r\n                _bots[i] != uniswapV2Pair &&\r\n                _bots[i] != address(uniswapV2Router)\r\n            ) {\r\n                isBot[_bots[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setWalletAddress(address _devWallet, address _marketingWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        devWalletAddress = _devWallet;\r\n        marketingWalletAddress = _marketingWallet;\r\n    }\r\n\r\n    function takeFees(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        address _referrer\r\n    ) private returns (uint256) {\r\n        uint256 fees;\r\n        uint256 remainingAmount;\r\n        require(\r\n            automatedMarketMakerPairs[_from] || automatedMarketMakerPairs[_to],\r\n            \"BFF: No market makers found\"\r\n        );\r\n\r\n        if (automatedMarketMakerPairs[_from]) {\r\n            uint256 totalBuyTax;\r\n            uint256 referrerFees;\r\n            uint256 referredFees;\r\n            if (block.number == launchBlock && !preSaleActive) {\r\n                totalBuyTax = 90;\r\n            } else if (block.number == launchBlock + 1 && !preSaleActive) {\r\n                totalBuyTax = 50;\r\n            } else if (_referrer != address(0)) {\r\n                totalBuyTax = referralBuyTax.add(referrerBonus.add(referredBonus).div(10));\r\n            } else {\r\n                totalBuyTax = baseBuyTax;\r\n            }\r\n\r\n            fees = _amount.mul(totalBuyTax).div(100);\r\n            \r\n            if(_referrer != address(0)) {\r\n                fees = _amount.mul(referralBuyTax).div(100);\r\n\r\n                referrerFees = _amount.mul(referrerBonus).div(1000);\r\n                referredFees = _amount.mul(referredBonus).div(1000);\r\n\r\n                uint256 totalReferralFees = referrerFees.add(referredFees);\r\n\r\n                remainingAmount = _amount.sub(fees).sub(totalReferralFees).add(referredFees);\r\n\r\n                super._transfer(_from, address(this), fees);\r\n\r\n                super._transfer(_from, _referrer, referrerFees);\r\n\r\n                emit BuyFees(_from, address(this), fees);\r\n\r\n                emit BuyFees(_from, _referrer, referrerFees);\r\n\r\n            } else {\r\n\r\n            remainingAmount = _amount.sub(fees);\r\n\r\n            super._transfer(_from, address(this), fees);\r\n\r\n            emit BuyFees(_from, address(this), fees);\r\n            }\r\n        } else {\r\n            uint256 totalSellTax;\r\n            if (block.number == launchBlock) {\r\n                totalSellTax = 90;\r\n            } else if (block.number == launchBlock + 1) {\r\n                totalSellTax = 50;\r\n            } else {\r\n                uint256 increaseSellFee = getPriceImpactTax(address(this), _amount);\r\n\r\n                totalSellTax = baseSellTax + increaseSellFee;\r\n\r\n                if(totalSellTax >= 30) {\r\n                    totalSellTax = 30;\r\n                }\r\n            }\r\n\r\n            fees = _amount.mul(totalSellTax).div(100);\r\n            uint256 rewardTokens = _amount\r\n                .mul(totalSellTax.sub(baseSellTax))\r\n                .div(100);\r\n            pendingTokensForReward = pendingTokensForReward.add(rewardTokens);\r\n\r\n            remainingAmount = _amount.sub(fees);\r\n\r\n            super._transfer(_from, address(this), fees);\r\n            uint256 tokensToSwap = balanceOf(address(this)).sub(\r\n                pendingTokensForReward);\r\n\r\n            if (tokensToSwap > minContractTokensToSwap) {\r\n                distributeTokensEth(tokensToSwap);\r\n            }\r\n            if (pendingTokensForReward > minRewardTokensToSwap) {\r\n                swapAndSendDividends(pendingTokensForReward);\r\n            }\r\n\r\n            emit SellFees(_from, address(this), fees);\r\n        }\r\n\r\n        return remainingAmount;\r\n    }\r\n\r\n    function distributeTokensEth(uint256 _tokenAmount) private {\r\n        uint256 tokensForLiquidity = _tokenAmount.mul(autoLP).div(100);\r\n\r\n        uint256 halfLiquidity = tokensForLiquidity.div(2);\r\n        uint256 tokensForSwap = _tokenAmount.sub(halfLiquidity);\r\n\r\n        uint256 totalEth = swapTokensForEth(tokensForSwap);\r\n\r\n        uint256 ethForAddLP = totalEth.mul(autoLP).div(100);\r\n        uint256 devFeesToSend = totalEth.mul(devFee).div(100);\r\n        uint256 marketingFeesToSend = totalEth.mul(marketingFee).div(100);\r\n        uint256 remainingEthForFees = totalEth\r\n            .sub(ethForAddLP)\r\n            .sub(devFeesToSend)\r\n            .sub(marketingFeesToSend);\r\n        devFeesToSend = devFeesToSend.add(remainingEthForFees);\r\n\r\n        sendEthToWallets(devFeesToSend, marketingFeesToSend);\r\n\r\n        if (halfLiquidity > 0 && ethForAddLP > 0) {\r\n            addLiquidity(halfLiquidity, ethForAddLP);\r\n        }\r\n    }\r\n\r\n    function sendEthToWallets(uint256 _devFees, uint256 _marketingFees)\r\n        private\r\n    {\r\n        if (_devFees > 0) {\r\n            payable(devWalletAddress).transfer(_devFees);\r\n        }\r\n        if (_marketingFees > 0) {\r\n            payable(marketingWalletAddress).transfer(_marketingFees);\r\n        }\r\n        emit DistributeFees(_devFees, _marketingFees);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 _tokenAmount) private returns (uint256) {\r\n        uint256 initialEthBalance = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 receivedEth = address(this).balance.sub(initialEthBalance);\r\n\r\n        emit SwapTokensForEth(_tokenAmount, receivedEth);\r\n        return receivedEth;\r\n    }\r\n\r\n    function swapEthForTokens(uint256 _ethAmount, address _to)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 initialTokenBalance = balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: _ethAmount\r\n        }(0, path, _to, block.timestamp);\r\n\r\n        uint256 receivedTokens = balanceOf(address(this)).sub(\r\n            initialTokenBalance\r\n        );\r\n\r\n        emit SwapEthForTokens(_ethAmount, receivedTokens);\r\n        return receivedTokens;\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenAmount, uint256 _ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: _ethAmount}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        emit AddLiquidity(_tokenAmount, _ethAmount);\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 _tokenAmount) private {\r\n        uint256 dividends = swapTokensForEth(_tokenAmount);\r\n\r\n        pendingTokensForReward = pendingTokensForReward.sub(_tokenAmount);\r\n        uint256 totalEthToSend = dividends.add(pendingEthReward);\r\n\r\n        (bool success, ) = address(dividendTracker).call{value: totalEthToSend}(\r\n            \"\"\r\n        );\r\n\r\n        if (success) {\r\n            emit SendDividends(dividends);\r\n        } else {\r\n            pendingEthReward = pendingEthReward.add(dividends);\r\n        }\r\n    }\r\n\r\n    function canHolderClaim(address _address) public view returns (uint256) {\r\n        uint256 holderCanClaim;\r\n        if(isAllowedToClaim[_address] || allowClaims) {\r\n            holderCanClaim = 1000000;\r\n        } else {\r\n            holderCanClaim = 0;\r\n        }\r\n\r\n        return holderCanClaim;\r\n    }\r\n\r\n    function availableContractTokenBalance() public view returns (uint256) {\r\n        return balanceOf(address(this)).sub(pendingTokensForReward);\r\n    }\r\n\r\n    function getHistory(\r\n        address _account,\r\n        uint256 _limit,\r\n        uint256 _pageNumber\r\n    ) external view returns (ClaimedEth[] memory) {\r\n        require(_limit > 0 && _pageNumber > 0, \"BFF: Invalid arguments\");\r\n        uint256 userClaimedCount = userClaimedIds[_account].length;\r\n        uint256 end = _pageNumber * _limit;\r\n        uint256 start = end - _limit;\r\n        require(start < userClaimedCount, \"BFF: Out of range\");\r\n        uint256 limit = _limit;\r\n        if (end > userClaimedCount) {\r\n            end = userClaimedCount;\r\n            limit = userClaimedCount % _limit;\r\n        }\r\n\r\n        ClaimedEth[] memory myClaimedEth = new ClaimedEth[](limit);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = start; i < end; i++) {\r\n            uint256 hId = userClaimedIds[_account][i];\r\n            myClaimedEth[currentIndex] = claimedEthMap[hId];\r\n            currentIndex += 1;\r\n        }\r\n        return myClaimedEth;\r\n    }\r\n\r\n    function getHistoryCount(address _account) external view returns (uint256) {\r\n        return userClaimedIds[_account].length;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"AddRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"BuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remarketingEth\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DividendClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"SellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"SwapEthForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedEth\",\"type\":\"uint256\"}],\"name\":\"SwapTokensForEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_alowClaims\",\"type\":\"bool\"}],\"name\":\"alowClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"canHolderClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract BFFDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minutesForPreSale\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_preSaleTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPreSaleTokens\",\"type\":\"uint256\"}],\"name\":\"enablePreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageNumber\",\"type\":\"uint256\"}],\"name\":\"getHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BFF.ClaimedEth[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getHistoryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceImpactTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReferralAddressByTokenAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferralCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"getReferralCodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialBuyTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedToClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAlowedToClaim\",\"type\":\"bool\"}],\"name\":\"isAlowedToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromMaxWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isReferralValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIndexImpactRange\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minContractTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRewardTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEthReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTokensForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceImpactRangeTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referredBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlaklist\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bots\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExludeFromFee\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExludeFromMaxWalletAmount\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExludeFromDividends\",\"type\":\"bool\"}],\"name\":\"setExludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxIndex\",\"type\":\"uint8\"}],\"name\":\"setMaxIndexImpactRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setMinContractTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numToken\",\"type\":\"uint256\"}],\"name\":\"setMinRewardTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_isMultipleExludeFromDividends\",\"type\":\"address[]\"}],\"name\":\"setMultipleExludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setPriceImpactRangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referredBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensNeeded\",\"type\":\"uint256\"}],\"name\":\"updateReferrals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BFF", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a377aecf9b9deaf61ab116fe14ed56a3f4b4a7e00000000000000000000000058782fc478221bfb381ce8d61560eb0f9f8402a8", "EVMVersion": "Default", "Library": "Referrals:a636249ba25ece6f11e5c1f5130da90a90c41789;UniswapV2PriceImpactCalculator:89e3e1fee6b040e095965189094419d41184d9e9", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80e5a226483e0df38603cebf1c96fe2aa9aff63f4de330b288983c933263bbbb"}]}