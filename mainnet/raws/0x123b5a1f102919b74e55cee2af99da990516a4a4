{"status": "1", "message": "OK", "result": [{"SourceCode": "// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n//\r\n// SPDX-License-Identifier: LGPL-3.0-only\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;\r\n    string tokenType;  // \"ERC20\" by default\r\n    uint256 rate;  // price per full share (1e18)\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n     * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n     * struct Component {\r\n     *     address token;    // Address of token contract\r\n     *     string tokenType; // Token type (\"ERC20\" by default)\r\n     *     uint256 rate;     // Price per share (1e18)\r\n     * }\r\n     */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Angle StableMasterFront contract interface.\r\n * The StableMasterFront contract is available here\r\n * https://github.com/AngleProtocol/angle-core/blob/main/contracts/stableMaster/StableMasterFront.sol\r\n */\r\ninterface StableMasterFront {\r\n    function collateralMap(address) external view returns (\r\n        address,\r\n        address,\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Angle SanToken contract interface.\r\n * The SanToken contract is available here\r\n * https://github.com/AngleProtocol/angle-core/blob/main/contracts/sanToken/SanToken.sol\r\n */\r\ninterface SanToken {\r\n    function poolManager() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for Angle sanToken.\r\n * @dev Implementation of TokenAdapter abstract contract.\r\n */\r\ncontract AngleTokenAdapter is TokenAdapter {\r\n    address internal constant STABLE_MASTER = 0x5adDc89785D75C86aB939E9e15bfBBb7Fc086A87;\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: ERC20(token).name(),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given sanToken.\r\n     * @dev Implementation of TokenAdapter abstract contract function.\r\n     */\r\n    function getComponents(address token) external view override returns (Component[] memory) {\r\n        Component[] memory components = new Component[](1);\r\n\r\n        address poolManager = SanToken(token).poolManager();\r\n        (address underlyingToken, , , , , uint256 rate) =\r\n            StableMasterFront(STABLE_MASTER).collateralMap(poolManager);\r\n\r\n        components[0] = Component({ token: underlyingToken, tokenType: \"ERC20\", rate: rate });\r\n\r\n        return components;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AngleTokenAdapter", "CompilerVersion": "v0.6.5+commit.f956cc89", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d02b05571b5bbc2d9da74eb1ffaa6932add2fa55d408a68fce403e23f6e3ac44"}]}