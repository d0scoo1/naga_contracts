{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\n// pragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* // pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n    function setAuthority(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface DogLike {\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external returns (uint256);\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function setChangelogAddress(bytes32 _key, address _val) public {}\n    function setChangelogVersion(string memory _version) public {}\n    function setAuthority(address _base, address _authority) public {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {}\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {}\n    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {}\n    function removeIlkFromAutoLine(bytes32 _ilk) public {}\n    function setD3MTargetInterestRate(address _d3m, uint256 _pct_bps) public {}\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// src/DssSpellCollateralOnboarding.sol\n// SPDX-FileCopyrightText: \u00a9 2021-2022 Dai Foundation <www.daifoundation.org>\n//\n// Copyright (C) 2021-2022 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n\n/* import \"dss-exec-lib/DssExecLib.sol\"; */\n\ncontract DssSpellCollateralOnboardingAction {\n\n    // --- Rates ---\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmPgPVrVxDCGyNR5rGp9JC5AUxppLzUAqvncRJDcxQnX1u\n    //\n    // uint256 constant NUMBER_PCT = 1000000001234567890123456789;\n\n    // --- Math ---\n    // uint256 constant THOUSAND   = 10 ** 3;\n    // uint256 constant MILLION    = 10 ** 6;\n    // uint256 constant BILLION    = 10 ** 9;\n\n    // --- DEPLOYED COLLATERAL ADDRESSES ---\n    // address constant XXX                  = 0x0000000000000000000000000000000000000000;\n    // address constant PIP_XXX              = 0x0000000000000000000000000000000000000000;\n    // address constant MCD_JOIN_XXX_A       = 0x0000000000000000000000000000000000000000;\n    // address constant MCD_CLIP_XXX_A       = 0x0000000000000000000000000000000000000000;\n    // address constant MCD_CLIP_CALC_XXX_A  = 0x0000000000000000000000000000000000000000;\n\n    function onboardNewCollaterals() internal {\n        // ----------------------------- Collateral onboarding -----------------------------\n        //  Add ______________ as a new Vault Type\n        //  Poll Link:\n\n        // DssExecLib.addNewCollateral(\n        //     CollateralOpts({\n        //         ilk:                   \"XXX-A\",\n        //         gem:                   XXX,\n        //         join:                  MCD_JOIN_XXX_A,\n        //         clip:                  MCD_CLIP_XXX_A,\n        //         calc:                  MCD_CLIP_CALC_XXX_A,\n        //         pip:                   PIP_XXX,\n        //         isLiquidatable:        BOOL,\n        //         isOSM:                 BOOL,\n        //         whitelistOSM:          BOOL,\n        //         ilkDebtCeiling:        line,\n        //         minVaultAmount:        dust,\n        //         maxLiquidationAmount:  hole,\n        //         liquidationPenalty:    chop,\n        //         ilkStabilityFee:       duty,\n        //         startingPriceFactor:   buf,\n        //         breakerTolerance:      tolerance,\n        //         auctionDuration:       tail,\n        //         permittedDrop:         cusp,\n        //         liquidationRatio:      mat,\n        //         kprFlatReward:         tip,\n        //         kprPctReward:          chip\n        //     })\n        // );\n\n        // DssExecLib.setStairstepExponentialDecrease(\n        //     CALC_ADDR,\n        //     DURATION,\n        //     PCT_BPS\n        // );\n\n        // DssExecLib.setIlkAutoLineParameters(\n        //     \"XXX-A\",\n        //     AMOUNT,\n        //     GAP,\n        //     TTL\n        // );\n\n        // ChainLog Updates\n        // DssExecLib.setChangelogAddress(\"XXX\", XXX);\n        // DssExecLib.setChangelogAddress(\"PIP_XXX\", PIP_XXX);\n        // DssExecLib.setChangelogAddress(\"MCD_JOIN_XXX_A\", MCD_JOIN_XXX_A);\n        // DssExecLib.setChangelogAddress(\"MCD_CLIP_XXX_A\", MCD_CLIP_XXX_A);\n        // DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_XXX_A\", MCD_CLIP_CALC_XXX_A);\n    }\n}\n\n////// src/DssSpell.sol\n// SPDX-FileCopyrightText: \u00a9 2021-2022 Dai Foundation <www.daifoundation.org>\n//\n// Copyright (C) 2021-2022 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n\n// Enable ABIEncoderV2 when onboarding collateral\n// // pragma experimental ABIEncoderV2;\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n\n/* import { DssSpellCollateralOnboardingAction } from \"./DssSpellCollateralOnboarding.sol\"; */\n\ninterface VatLike {\n    function Line() external view returns (uint256);\n    function file(bytes32, uint256) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n}\n\ninterface DssVestLike {\n    function create(address, uint256, uint256, uint256, uint256, address) external returns (uint256);\n    function restrict(uint256) external;\n}\n\ninterface StarknetLike_1 {\n    function setCeiling(uint256) external;\n}\n\ncontract DssSpellAction is DssAction, DssSpellCollateralOnboardingAction {\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: cast keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/428d97b75ec8bdb4f2b87e69dcc917ad750b8c76/governance/votes/Executive%20vote%20-%20June%208%2C%202022.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2022-06-08 MakerDAO Executive Spell | Hash: 0xf962d424ea3663316d9d91fc3854d8864b7b45165d949688117ffba9798e90b9\";\n\n    VatLike     immutable vat                   = VatLike(DssExecLib.vat());\n\n    DssVestLike immutable MCD_VEST_DAI          = DssVestLike(DssExecLib.getChangelogAddress(\"MCD_VEST_DAI\"));\n    DssVestLike immutable MCD_VEST_MKR_TREASURY = DssVestLike(DssExecLib.getChangelogAddress(\"MCD_VEST_MKR_TREASURY\"));\n\n    address constant STARKNET_ESCROW_MOM    = 0xc238E3D63DfD677Fa0FA9985576f0945C581A266;\n    address constant STARKNET_ESCROW        = 0x0437465dfb5B79726e35F08559B0cBea55bb585C;\n    address constant STARKNET_DAI_BRIDGE    = 0x659a00c33263d9254Fed382dE81349426C795BB6;\n    address constant STARKNET_GOV_RELAY     = 0x9eed6763BA8D89574af1478748a7FDF8C5236fE0;\n\n    address constant SH_MULTISIG            = 0xc657aC882Fb2D6CcF521801da39e910F8519508d;\n    address constant SH_WALLET              = 0x955993Df48b0458A01cfB5fd7DF5F5DCa6443550;\n\n    address constant FLIPFLOPFLAP_WALLET    = 0x688d508f3a6B0a377e266405A1583B3316f9A2B3;\n    address constant SCHUPPI_WALLET         = 0xCCffDBc38B1463847509dCD95e0D9AAf54D1c167;\n    address constant FEEDBLACKLOOPS_WALLET  = 0x80882f2A36d49fC46C3c654F7f9cB9a2Bf0423e1;\n    address constant MAKERMAN_WALLET        = 0x9AC6A6B24bCd789Fa59A175c0514f33255e1e6D0;\n    address constant ACREINVEST_WALLET      = 0x5b9C98e8A3D9Db6cd4B4B4C1F92D0A551D06F00D;\n    address constant MONETSUPPLY_WALLET     = 0x4Bd73eeE3d0568Bb7C52DFCad7AD5d47Fff5E2CF;\n    address constant JUSTINCASE_WALLET      = 0xE070c2dCfcf6C6409202A8a210f71D51dbAe9473;\n    address constant GFXLABS_WALLET         = 0xa6e8772af29b29B9202a073f8E36f447689BEef6;\n    address constant DOO_WALLET             = 0x3B91eBDfBC4B78d778f62632a4004804AC5d2DB0;\n    address constant FLIPSIDECRYPTO_WALLET  = 0x62a43123FE71f9764f26554b3F5017627996816a;\n    address constant PENNBLOCKCHAIN_WALLET  = 0x070341aA5Ed571f0FB2c4a5641409B1A46b4961b;\n\n\n    // Wed 01 Jun 2022 12:00:00 AM UTC\n    uint256 constant JUN_01_2022 = 1654041600;\n    // Wed 15 Mar 2023 12:00:00 AM UTC\n    uint256 constant MAR_15_2023 = 1678838400;\n    // Thu 23 Nov 2023 12:00:00 AM UTC\n    uint256 constant NOV_23_2023 = 1700697600;\n\n\n    // Math\n    uint256 constant MILLION = 10 ** 6;\n    uint256 constant WAD     = 10 ** 18;\n    uint256 constant RAD     = 10 ** 45;\n\n    function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"sub-underflow\");\n    }\n\n    // Many of the settings that change weekly rely on the rate accumulator\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n    // To check this yourself, use the following rate calculation (example 8%):\n    //\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n    //\n    // A table of rates can be found at\n    //    https://ipfs.io/ipfs/QmPgPVrVxDCGyNR5rGp9JC5AUxppLzUAqvncRJDcxQnX1u\n    //\n\n    // Turn office hours off\n    function officeHours() public override returns (bool) {\n        return false;\n    }\n\n    function actions() public override {\n        // ---------------------------------------------------------------------\n        // Includes changes from the DssSpellCollateralOnboardingAction\n        // onboardNewCollaterals();\n\n\n        // Core Unit Budget DAI Transfer\n        // https://mips.makerdao.com/mips/details/MIP40c3SP67#budget-request-up-front\n        //\n        //    SH-001 - 230,000 DAI - 0xc657aC882Fb2D6CcF521801da39e910F8519508d\n        DssExecLib.sendPaymentFromSurplusBuffer(SH_MULTISIG, 230_000);\n\n        // Core Unit DAI Budget Stream\n        // https://mips.makerdao.com/mips/details/MIP40c3SP67#budget-request-up-front\n        //\n        //    SH-001 | 2022-06-01 to 2023-03-15 | 540,000 DAI | 0xc657aC882Fb2D6CcF521801da39e910F8519508d\n        MCD_VEST_DAI.restrict(\n            MCD_VEST_DAI.create(\n                SH_MULTISIG,\n                540_000 * WAD,\n                JUN_01_2022,\n                MAR_15_2023 - JUN_01_2022,\n                0,\n                address(0)\n            )\n        );\n\n        // Core Unit MKR Budget Stream\n        // https://mips.makerdao.com/mips/details/MIP40c3SP67#budget-request-up-front\n        //\n        //    SH-001 | 2022-06-01 to 2026-06-01 | Cliff 2023-11-23 | 250 MKR | 0x955993Df48b0458A01cfB5fd7DF5F5DCa6443550\n        MCD_VEST_MKR_TREASURY.restrict(\n            MCD_VEST_MKR_TREASURY.create(\n                SH_WALLET,\n                250 * WAD,\n                JUN_01_2022,\n                4 * 365 days,\n                NOV_23_2023 - JUN_01_2022,\n                SH_WALLET\n            )\n        );\n\n\n        // MOMC Proposal\n        // https://vote.makerdao.com/polling/QmYx9e3k#poll-detail\n        //\n        // Maximum Debt Ceiling Decreases\n        //\n        //    Decrease WSTETH-A Maximum Debt Ceiling from 300 million to 200 million\n        DssExecLib.setIlkAutoLineDebtCeiling(\"WSTETH-A\", 200 * MILLION);\n\n        //    Reduce Aave D3M Maximum Debt Ceiling from 300 million to 100 million\n        DssExecLib.setIlkAutoLineDebtCeiling(\"DIRECT-AAVEV2-DAI\", 100 * MILLION);\n\n        //    Reduce LINK-A Maximum Debt Ceiling from 100 million DAI to 50 million DAI\n        DssExecLib.setIlkAutoLineDebtCeiling(\"LINK-A\", 50 * MILLION);\n\n        // Maximum Debt Ceiling Increase\n        //\n        //    Increase MANA-A Maximum Debt Ceiling from 10 million DAI to 15 million DAI\n        DssExecLib.setIlkAutoLineDebtCeiling(\"MANA-A\", 15 * MILLION);\n\n        // D3M Target Borrow Rate Decrease\n        //\n        //    Reduce DIRECT-AAVEV2-DAI Target Borrow Rate from 3.5% to 2.75%\n        DssExecLib.setD3MTargetInterestRate(DssExecLib.getChangelogAddress(\"MCD_JOIN_DIRECT_AAVEV2_DAI\"), 275);\n\n        // Target Available Debt Increase\n        //\n        //    Increase WSTETH-B Target Available Debt from 15 million DAI to 30 million DAI\n        DssExecLib.setIlkAutoLineParameters(\"WSTETH-B\", 150 * MILLION, 30 * MILLION, 8 hours);\n\n\n        // 1st Stage of Collateral Offboarding Process\n        // https://forum.makerdao.com/t/signal-request-offboard-uni-univ2daieth-univ2wbtceth-univ2unieth-and-univ2wbtcdai/15160\n        //\n        uint256 line;\n        uint256 lineReduction;\n\n        //    Set UNI-A Maximum Debt Ceiling to 0\n        (,,,line,) = vat.ilks(\"UNI-A\");\n        lineReduction += line;\n        DssExecLib.removeIlkFromAutoLine(\"UNI-A\");\n        DssExecLib.setIlkDebtCeiling(\"UNI-A\", 0);\n\n        //    Set UNIV2DAIETH-A Maximum Debt Ceiling to 0\n        (,,,line,) = vat.ilks(\"UNIV2DAIETH-A\");\n        lineReduction += line;\n        DssExecLib.removeIlkFromAutoLine(\"UNIV2DAIETH-A\");\n        DssExecLib.setIlkDebtCeiling(\"UNIV2DAIETH-A\", 0);\n\n        //    Set UNIV2WBTCETH-A Maximum Debt Ceiling to 0\n        (,,,line,) = vat.ilks(\"UNIV2WBTCETH-A\");\n        lineReduction += line;\n        DssExecLib.removeIlkFromAutoLine(\"UNIV2WBTCETH-A\");\n        DssExecLib.setIlkDebtCeiling(\"UNIV2WBTCETH-A\", 0);\n\n        //    Set UNIV2UNIETH-A Maximum Debt Ceiling to 0\n        (,,,line,) = vat.ilks(\"UNIV2UNIETH-A\");\n        lineReduction += line;\n        DssExecLib.removeIlkFromAutoLine(\"UNIV2UNIETH-A\");\n        DssExecLib.setIlkDebtCeiling(\"UNIV2UNIETH-A\", 0);\n\n        //    Set UNIV2WBTCDAI-A Maximum Debt Ceiling to 0\n        (,,,line,) = vat.ilks(\"UNIV2WBTCDAI-A\");\n        lineReduction += line;\n        DssExecLib.removeIlkFromAutoLine(\"UNIV2WBTCDAI-A\");\n        DssExecLib.setIlkDebtCeiling(\"UNIV2WBTCDAI-A\", 0);\n\n        // Decrease Global Debt Ceiling by total amount of offboarded ilks\n        vat.file(\"Line\", _sub(vat.Line(), lineReduction));\n\n\n        // Recognized Delegate Compensation\n        //    https://forum.makerdao.com/t/recognized-delegate-compensation-breakdown-may-2022/15536\n        //\n        //    Flip Flop Flap Delegate LLC - 12000 DAI - 0x688d508f3a6B0a377e266405A1583B3316f9A2B3\n        DssExecLib.sendPaymentFromSurplusBuffer(FLIPFLOPFLAP_WALLET, 12_000);\n        //    schuppi - 12000 DAI - 0xCCffDBc38B1463847509dCD95e0D9AAf54D1c167\n        DssExecLib.sendPaymentFromSurplusBuffer(SCHUPPI_WALLET, 12_000);\n        //    Feedblack Loops LLC - 12000 DAI - 0x80882f2A36d49fC46C3c654F7f9cB9a2Bf0423e1\n        DssExecLib.sendPaymentFromSurplusBuffer(FEEDBLACKLOOPS_WALLET, 12_000);\n        //    MakerMan - 11025 DAI - 0x9AC6A6B24bCd789Fa59A175c0514f33255e1e6D0\n        DssExecLib.sendPaymentFromSurplusBuffer(MAKERMAN_WALLET, 11025);\n        //    ACREInvest - 9372 DAI - 0x5b9C98e8A3D9Db6cd4B4B4C1F92D0A551D06F00D\n        DssExecLib.sendPaymentFromSurplusBuffer(ACREINVEST_WALLET, 9372);\n        //    monetsupply - 6275 DAI - 0x4Bd73eeE3d0568Bb7C52DFCad7AD5d47Fff5E2CF\n        DssExecLib.sendPaymentFromSurplusBuffer(MONETSUPPLY_WALLET, 6275);\n        //    JustinCase - 7626 DAI - 0xE070c2dCfcf6C6409202A8a210f71D51dbAe9473\n        DssExecLib.sendPaymentFromSurplusBuffer(JUSTINCASE_WALLET, 7626);\n        //    GFX Labs - 6607 DAI - 0xa6e8772af29b29B9202a073f8E36f447689BEef6\n        DssExecLib.sendPaymentFromSurplusBuffer(GFXLABS_WALLET, 6607);\n        //    Doo - 622 DAI - 0x3B91eBDfBC4B78d778f62632a4004804AC5d2DB0\n        DssExecLib.sendPaymentFromSurplusBuffer(DOO_WALLET, 622);\n        //    Flipside Crypto - 270 DAI - 0x62a43123FE71f9764f26554b3F5017627996816a\n        DssExecLib.sendPaymentFromSurplusBuffer(FLIPSIDECRYPTO_WALLET, 270);\n        //    Penn Blockchain - 265 DAI - 0x070341aA5Ed571f0FB2c4a5641409B1A46b4961b\n        DssExecLib.sendPaymentFromSurplusBuffer(PENNBLOCKCHAIN_WALLET, 265);\n\n\n        // Starknet Bridge Changes\n        // https://forum.makerdao.com/t/details-about-spells-to-be-included-in-june-8th-2022-executive-vote/15532\n        //\n        //    Increase Starknet Bridge Limit from 100,000 DAI to 200,000 DAI\n        StarknetLike_1(STARKNET_DAI_BRIDGE).setCeiling(200_000 * WAD);\n        //    Give DSChief control over L1EscrowMom\n        DssExecLib.setAuthority(STARKNET_ESCROW_MOM, DssExecLib.getChangelogAddress(\"MCD_ADM\"));\n\n\n        // Changelog\n        DssExecLib.setChangelogAddress(\"STARKNET_ESCROW_MOM\", STARKNET_ESCROW_MOM);\n        DssExecLib.setChangelogAddress(\"STARKNET_ESCROW\", STARKNET_ESCROW);\n        DssExecLib.setChangelogAddress(\"STARKNET_DAI_BRIDGE\", STARKNET_DAI_BRIDGE);\n        DssExecLib.setChangelogAddress(\"STARKNET_GOV_RELAY\", STARKNET_GOV_RELAY);\n        DssExecLib.setChangelogVersion(\"1.13.1\");\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:8de6ddbcd5053d32292aaa0d2105a32d108484a6", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}