{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pipeline.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./PipelineProxy.sol\\\";\\r\\n\\r\\n/// @notice Used for entering the pool from any token(swap + enter pool)\\r\\n/// @dev User can pass any CallParams, and call any arbitrary contract\\r\\ncontract Pipeline {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\tstruct CallParams {\\r\\n\\t\\taddress inToken; // Address of token contract\\r\\n\\t\\tuint256 amount; // Amount of tokens\\r\\n\\t\\taddress target; // Address of contract to be called\\r\\n\\t\\tbytes callData; // callData with wich `target` token would be called\\r\\n\\t}\\r\\n\\r\\n\\tstruct CallParamsWithChunks {\\r\\n\\t\\taddress inToken; // Address of token contract\\r\\n\\t\\taddress target; // Address of contract to be called\\r\\n\\t\\tbytes[] callDataChunks; // CallParams without amount. Amount will be added between chunks\\r\\n\\t}\\r\\n\\r\\n\\taddress public pipelineProxy; // User approve for this address. And we take user tokens from this address\\r\\n\\tmapping(address => mapping(address => bool)) approved; // Contract => token => approved\\r\\n\\r\\n\\taddress constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; \\r\\n\\tuint256 constant MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n\\tevent PipelineProxyChanged(address indexed newPipelineProxy);\\r\\n\\r\\n\\tconstructor() {\\r\\n\\t\\tPipelineProxy proxy = new PipelineProxy(address(this));\\r\\n\\t\\tproxy.transferOwnership(msg.sender);\\r\\n\\t\\tpipelineProxy = address(proxy);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev call to swapper should swap tokens and transfer them to this contract\\r\\n\\t///\\t\\t This function can call any other function. So contract should not have any assets, or they will be lost!!!\\r\\n\\t/// @param swapData data to call swapper\\r\\n\\t/// @param targetData data to call target\\r\\n\\t/// @param distToken address of token that user will gain\\r\\n\\t/// @param minAmount minimum amount of distToken that user will gain(revert if less)\\r\\n\\t/// @param checkFinalBalance If true - send remaining distTokens from contract to caller\\r\\n\\tfunction run(\\r\\n\\t\\tCallParams memory swapData,\\r\\n\\t\\tCallParamsWithChunks memory targetData,\\r\\n\\t\\taddress distToken,\\r\\n\\t\\tuint256 minAmount,\\r\\n\\t\\tbool checkFinalBalance\\r\\n\\t) external payable {\\r\\n\\t\\trequire(swapData.target != pipelineProxy, \\\"Swapper can't be PipelineProxy\\\");\\r\\n\\t\\trequire(targetData.target != pipelineProxy, \\\"Target can't be PipelineProxy\\\");\\r\\n\\r\\n\\t\\tuint256 amountBeforeSwap = getBalance(distToken, msg.sender);\\r\\n\\r\\n\\t\\tif (swapData.inToken != ETH_ADDRESS) {\\r\\n\\t\\t\\tPipelineProxy(pipelineProxy).transfer(swapData.inToken, msg.sender, swapData.amount);\\r\\n\\t\\t\\tapproveIfNecessary(swapData.target, swapData.inToken);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t(bool success,) = swapData.target.call{value: msg.value}(swapData.callData);\\r\\n\\t\\trequire(success, \\\"Can't swap\\\");\\r\\n\\r\\n\\t\\tuint256 erc20Balance;\\r\\n\\t\\tuint256 ethBalance;\\r\\n\\r\\n\\t\\tif (targetData.inToken != ETH_ADDRESS) {\\r\\n\\t\\t\\terc20Balance = IERC20(targetData.inToken).balanceOf(address(this));\\r\\n\\t\\t\\trequire(erc20Balance > 0, \\\"Zero token balance after swap\\\");\\r\\n\\t\\t\\tapproveIfNecessary(targetData.target, targetData.inToken);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tethBalance = address(this).balance;\\r\\n\\t\\t\\trequire(ethBalance > 0, \\\"Zero eth balance after swap\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t(success,) = callFunctionUsingChunks(targetData.target, targetData.callDataChunks, erc20Balance, ethBalance);\\r\\n\\t\\trequire(success, \\\"Can't mint\\\");\\r\\n\\r\\n\\t\\tuint256 distTokenAmount;\\r\\n\\r\\n\\t\\tif (checkFinalBalance) {\\r\\n\\t\\t\\tif (distToken != ETH_ADDRESS) {\\r\\n\\t\\t\\t\\tdistTokenAmount = IERC20(distToken).balanceOf(address(this));\\r\\n\\r\\n\\t\\t\\t\\tif (distTokenAmount > 0) {\\r\\n\\t\\t\\t\\t\\tIERC20(distToken).safeTransfer(msg.sender, distTokenAmount);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tdistTokenAmount = address(this).balance;\\r\\n\\r\\n\\t\\t\\t\\tif (distTokenAmount > 0) {\\r\\n\\t\\t\\t\\t\\t(success, ) = payable(msg.sender).call{value: distTokenAmount}('');\\r\\n\\t\\t\\t\\t\\trequire(success, \\\"Can't transfer eth\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 amountAfterSwap = getBalance(distToken, msg.sender);\\r\\n\\t\\trequire(amountAfterSwap - amountBeforeSwap >= minAmount, \\\"Not enough token received\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Same as zipIn, but have extra intermediate step\\r\\n\\t///      Call to swapper should swap tokens and transfer them to this contract\\r\\n\\t///\\t\\t This function can call any other function. So contract should not have any assets, or they will be lost!!!\\r\\n\\t/// @param swapData data to call swapper\\r\\n\\t/// @param poolData data to call pool\\r\\n\\t/// @param targetData data to call target\\r\\n\\t/// @param distToken address of token that user will gain\\r\\n\\t/// @param minAmount minimum amount of distToken that user will gain(revert if less)\\r\\n\\t/// @param checkFinalBalance If true - send remaining distTokens from contract to caller\\r\\n\\tfunction runWithPool(\\r\\n\\t\\tCallParams memory swapData,\\r\\n\\t\\tCallParamsWithChunks memory poolData,\\r\\n\\t\\tCallParamsWithChunks memory targetData,\\r\\n\\t\\taddress distToken,\\r\\n\\t\\tuint256 minAmount,\\r\\n\\t\\tbool checkFinalBalance\\r\\n\\t) external payable {\\r\\n\\t\\trequire(swapData.target != pipelineProxy, \\\"Swap address can't be equal to PipelineProxy\\\");\\r\\n\\t\\trequire(poolData.target != pipelineProxy, \\\"Pool address can't be equal to PipelineProxy\\\");\\r\\n\\t\\trequire(targetData.target != pipelineProxy, \\\"Target address can't be equal to PipelineProxy\\\");\\r\\n\\r\\n\\t\\tuint256 amountBeforeSwap = getBalance(distToken, msg.sender);\\r\\n\\r\\n\\t\\tif (swapData.inToken != ETH_ADDRESS) {\\r\\n\\t\\t\\tPipelineProxy(pipelineProxy).transfer(swapData.inToken, msg.sender, swapData.amount);\\r\\n\\t\\t\\tapproveIfNecessary(swapData.target, swapData.inToken);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t(bool success, ) = swapData.target.call{value: msg.value}(swapData.callData);\\r\\n\\t\\trequire(success, \\\"Can't swap\\\");\\r\\n\\r\\n\\t\\tuint256 erc20Balance;\\r\\n\\t\\tuint256 ethBalance;\\r\\n\\r\\n\\t\\tif (poolData.inToken != ETH_ADDRESS) {\\r\\n\\t\\t\\terc20Balance = IERC20(poolData.inToken).balanceOf(address(this));\\r\\n\\t\\t\\trequire(erc20Balance > 0, \\\"Zero token balance after swap\\\");\\r\\n\\t\\t\\tapproveIfNecessary(poolData.target, poolData.inToken);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tethBalance = address(this).balance;\\r\\n\\t\\t\\trequire(ethBalance > 0, \\\"Zero eth balance after swap\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t(success, ) = callFunctionUsingChunks(poolData.target, poolData.callDataChunks, erc20Balance, ethBalance); \\r\\n\\t\\trequire(success, \\\"Can't call pool\\\");\\r\\n\\r\\n\\t\\tif (targetData.inToken != ETH_ADDRESS) {\\r\\n\\t\\t\\terc20Balance = IERC20(targetData.inToken).balanceOf(address(this));\\r\\n\\t\\t\\tethBalance = 0;\\r\\n\\t\\t\\trequire(erc20Balance > 0, \\\"Zero token balance after pool\\\");\\r\\n\\t\\t\\tapproveIfNecessary(targetData.target, targetData.inToken);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tethBalance = address(this).balance;\\r\\n\\t\\t\\trequire(ethBalance > 0, \\\"Zero eth balance after pool\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t(success, ) = callFunctionUsingChunks(targetData.target, targetData.callDataChunks, erc20Balance, ethBalance);\\r\\n\\t\\trequire(success, \\\"Can't mint\\\");\\r\\n\\r\\n\\t\\tuint256 distTokenAmount;\\r\\n\\r\\n\\t\\tif (checkFinalBalance) {\\r\\n\\t\\t\\tif (distToken != ETH_ADDRESS) {\\r\\n\\t\\t\\t\\tdistTokenAmount = IERC20(distToken).balanceOf(address(this));\\r\\n\\r\\n\\t\\t\\t\\tif (distTokenAmount > 0) {\\r\\n\\t\\t\\t\\t\\tIERC20(distToken).safeTransfer(msg.sender, distTokenAmount);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tdistTokenAmount = address(this).balance;\\r\\n\\r\\n\\t\\t\\t\\tif (distTokenAmount > 0) {\\r\\n\\t\\t\\t\\t\\t(success, ) = payable(msg.sender).call{value: distTokenAmount}('');\\r\\n\\t\\t\\t\\t\\trequire(success, \\\"Can't transfer eth\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 amountAfterSwap = getBalance(distToken, msg.sender);\\r\\n\\t\\trequire(amountAfterSwap - amountBeforeSwap >= minAmount, \\\"Not enough token received\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Create CallParams using `packCallData` and call contract using it\\r\\n\\t/// @param _contract Contract address to be called\\r\\n\\t/// @param _chunks Chunks of call data without value paraeters. Value will be added between chunks \\r\\n\\t/// @param _value Value of word to which it will change \\r\\n\\t/// @param _ethValue How much ether we should send with call\\r\\n\\t/// @return success - standart return from call\\r\\n\\t/// @return result - standart return from call\\r\\n\\tfunction callFunctionUsingChunks(\\r\\n\\t\\taddress _contract,\\r\\n\\t\\tbytes[] memory _chunks,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tuint256 _ethValue\\r\\n\\t)\\r\\n\\t\\tinternal\\r\\n\\t\\treturns (bool success, bytes memory result)\\r\\n\\t{\\r\\n\\t\\t(success, result) = _contract.call{value: _ethValue}(packCallData(_chunks, _value));\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Approve infinite token approval to target if it hasn't done earlier \\r\\n\\t/// @param target Address for which we give approval\\r\\n\\t/// @param token Token address\\r\\n\\tfunction approveIfNecessary(address target, address token) internal {\\r\\n\\t\\tif (!approved[target][token]) {\\r\\n\\t\\t\\tIERC20(token).safeApprove(target, MAX_INT);\\r\\n\\t\\t\\tapproved[target][token] = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Return eth balance if token == ETH_ADDRESS, and erc20 balance otherwise\\r\\n\\tfunction getBalance(address token, address addr) internal view returns(uint256 res) {\\r\\n\\t\\tif (token == ETH_ADDRESS) {\\r\\n\\t\\t\\tres = addr.balance;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tres = IERC20(token).balanceOf(addr);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/// @dev Create single bytes array by concatenation of chunks, using value as delimiter\\r\\n\\t/// \\t Trying to do concatenation with one command, \\r\\n\\t///\\t\\t \\tbut if num of chunks > 6, do it through many operations(not gas efficient) \\r\\n\\t/// @param _chunks Bytes chanks. Obtained by omitting value from callDat\\r\\n\\t/// @param _value Number, that will be used as delimiter\\r\\n\\tfunction packCallData(\\r\\n\\t\\tbytes[] memory _chunks, \\r\\n\\t\\tuint256 _value\\r\\n\\t) \\r\\n\\t\\tinternal \\r\\n\\t\\tpure \\r\\n\\t\\treturns(bytes memory callData) \\r\\n\\t{\\r\\n        uint256 n = _chunks.length;\\r\\n\\r\\n        if (n == 1) {\\r\\n            callData = abi.encodePacked(_chunks[0]);\\r\\n        } else if (n == 2) {\\r\\n            callData = abi.encodePacked(_chunks[0], _value, _chunks[1]);\\r\\n        } else if (n == 3) {\\r\\n            callData = abi.encodePacked(_chunks[0], _value, _chunks[1], _value, _chunks[2]);\\r\\n        } else if (n == 4) {\\r\\n            callData = abi.encodePacked(_chunks[0], _value, _chunks[1], _value, _chunks[2], _value, _chunks[3]);\\r\\n        } else if (n == 5) {\\r\\n            callData = abi.encodePacked(\\r\\n            \\t_chunks[0], _value, \\r\\n            \\t_chunks[1], _value, \\r\\n            \\t_chunks[2], _value, \\r\\n            \\t_chunks[3], _value, \\r\\n            \\t_chunks[4]\\r\\n            );\\r\\n        } else if (n == 6) {\\r\\n            callData = abi.encodePacked(\\r\\n            \\t_chunks[0], _value, \\r\\n            \\t_chunks[1], _value, \\r\\n            \\t_chunks[2], _value, \\r\\n            \\t_chunks[3], _value, \\r\\n            \\t_chunks[4], _value, \\r\\n            \\t_chunks[5]);\\r\\n        } else {\\r\\n            callData = packCallDataAny(_chunks, _value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Do same as `packCallData`, but for arbitrary amount of chunks. Not gas efficient\\r\\n    function packCallDataAny(\\r\\n    \\tbytes[] memory _chunks, \\r\\n    \\tuint256 _value\\r\\n    ) \\r\\n    \\tinternal \\r\\n    \\tpure \\r\\n    \\treturns(bytes memory callData) \\r\\n    {\\r\\n        uint i;\\r\\n\\r\\n        for (i = 0; i < _chunks.length - 1; i++) {\\r\\n            callData = abi.encodePacked(callData, _chunks[i], _value);\\r\\n        }\\r\\n\\r\\n        callData = abi.encodePacked(callData, _chunks[i]);\\r\\n    }\\r\\n\\r\\n\\t// We need this function for swap from token to ether\\r\\n\\treceive() external payable {}\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PipelineProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/// @dev Contract stores users approvals. Can transfer tokens from user to main account. \\r\\ncontract PipelineProxy is Ownable, Pausable {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\taddress trusted;\\r\\n\\r\\n\\tevent TrustedChanged(address indexed newTrusted);\\r\\n\\r\\n\\tmodifier onlyTrusted() {\\r\\n\\t\\trequire(msg.sender == trusted);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(address _trusted) {\\r\\n\\t\\t_setTrusted(_trusted);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Transfer tokens to main contract\\r\\n\\t/// @param token Address of token that should be transfered\\r\\n\\t/// @param from User from who token should be transfered\\r\\n\\t/// @param amount Amount of tokens that should be transfered\\r\\n\\tfunction transfer(address token, address from, uint256 amount) onlyTrusted whenNotPaused external {\\r\\n\\t\\tIERC20(token).safeTransferFrom(from, msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setTrusted(address _trusted) internal {\\r\\n\\t\\ttrusted = _trusted;\\r\\n\\t\\temit TrustedChanged(_trusted);\\r\\n\\t}\\r\\n\\r\\n\\tfunction pause() onlyOwner external {\\r\\n\\t\\t_pause();\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause() onlyOwner external {\\r\\n\\t\\t_unpause();\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPipelineProxy\",\"type\":\"address\"}],\"name\":\"PipelineProxyChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pipelineProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Pipeline.CallParams\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDataChunks\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Pipeline.CallParamsWithChunks\",\"name\":\"targetData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"distToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkFinalBalance\",\"type\":\"bool\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Pipeline.CallParams\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDataChunks\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Pipeline.CallParamsWithChunks\",\"name\":\"poolData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"callDataChunks\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Pipeline.CallParamsWithChunks\",\"name\":\"targetData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"distToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkFinalBalance\",\"type\":\"bool\"}],\"name\":\"runWithPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pipeline", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}