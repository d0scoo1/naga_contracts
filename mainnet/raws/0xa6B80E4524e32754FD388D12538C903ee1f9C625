{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/YieldsterVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\nimport \\\"./storage/VaultStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract YieldsterVault is VaultStorage {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n    event Response(address feeAddress, string message);\\r\\n    event CallStatus(string message);\\r\\n\\r\\n    /// @dev Function to upgrade the mastercopy of Yieldster Vault.\\r\\n    /// @param _mastercopy Address of new mastercopy of Yieldster Vault.\\r\\n    function upgradeMasterCopy(address _mastercopy) external {\\r\\n        _isYieldsterGOD();\\r\\n        (bool result, ) = address(this).call(\\r\\n            abi.encodeWithSignature(\\\"changeMasterCopy(address)\\\", _mastercopy)\\r\\n        );\\r\\n        revertDelegate(result);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set APS Address.\\r\\n    /// @param _APContract Address of Yieldster APS contract.\\r\\n    function setAPS(address _APContract) external {\\r\\n        _isYieldsterGOD();\\r\\n        APContract = _APContract;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to toggle Emergency Break feature of the Vault.\\r\\n    function toggleEmergencyBreak() external {\\r\\n        _isYieldsterGOD();\\r\\n        if (emergencyConditions == 1) emergencyConditions = 0;\\r\\n        else if (emergencyConditions == 0) emergencyConditions = 1;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to enable emergency exit.\\r\\n    function enableEmergencyExit() external {\\r\\n        _isYieldsterGOD();\\r\\n        emergencyConditions = 2;\\r\\n        for (uint256 i = 0; i < assetList.length; i++) {\\r\\n            if (assetList[i] == eth) {\\r\\n                uint256 tokenBalance = address(this).balance;\\r\\n                if (tokenBalance > 0) {\\r\\n                    address payable to = payable(\\r\\n                        emergencyVault\\r\\n                    );\\r\\n                    // to.transfer replaced here\\r\\n                    (bool success, ) = to.call{value: tokenBalance}(\\\"\\\");\\r\\n                    if (success == false) {\\r\\n                        emit CallStatus(\\\"call failed\\\");\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                IERC20 token = IERC20(assetList[i]);\\r\\n                uint256 tokenBalance = token.balanceOf(address(this));\\r\\n                if (tokenBalance > 0) {\\r\\n                    token.safeTransfer(\\r\\n                        emergencyVault,\\r\\n                        tokenBalance\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function that checks if the user is whitelisted.\\r\\n    function _isWhiteListed() private view {\\r\\n        if (whiteListGroups.length == 0) {\\r\\n            return;\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < whiteListGroups.length; i++) {\\r\\n                if (isWhiteListGroupPresent[whiteListGroups[i]]) {\\r\\n                    if (\\r\\n                        IWhitelist(IAPContract(APContract).whitelistModule())\\r\\n                            .isMember(whiteListGroups[i], msg.sender)\\r\\n                    ) {\\r\\n                        return;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            revert(\\\"Only Whitelisted\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function that is called once after vault creation to Register the Vault with APS.\\r\\n    function registerVaultWithAPS() external onlyNormalMode {\\r\\n        require(msg.sender == owner, \\\"unauthorized\\\");\\r\\n        require(!vaultRegistrationCompleted, \\\"Vault is already registered\\\");\\r\\n        vaultRegistrationCompleted = true;\\r\\n        IAPContract(APContract).addVault(vaultAdmin, whiteListGroups);\\r\\n    }\\r\\n\\r\\n    /// @dev Setup function sets initial storage of contract.\\r\\n    /// @param _APContract Address of apcontract.\\r\\n    /// @param _vaultAdmin Address of the Vault APS Manager.\\r\\n    /// @param _emergencyVault Address of the emergency vault.\\r\\n    function setup(address _APContract, address _vaultAdmin,address _emergencyVault) external {\\r\\n        require(!vaultSetupCompleted, \\\"Vault is already setup\\\");\\r\\n        vaultSetupCompleted = true;\\r\\n        vaultAdmin = _vaultAdmin;\\r\\n        APContract = _APContract;\\r\\n        owner = _vaultAdmin;\\r\\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n        emergencyVault=_emergencyVault;\\r\\n        tokenBalances = new TokenBalanceStorage();\\r\\n    }\\r\\n\\r\\n    /// @dev Function to transfer ownership.\\r\\n    /// @param _owner Address of the new owner.\\r\\n    function transferOwnership(address _owner) external {\\r\\n        require(msg.sender == owner, \\\"unauthorized\\\");\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add whiteListGroups.\\r\\n    /// @param _whiteListGroups List of whiteListGroups to be added.\\r\\n    function addWhiteListGroups(uint256[] memory _whiteListGroups) external {\\r\\n        _isVaultAdmin();\\r\\n        for (uint256 i = 0; i < _whiteListGroups.length; i++) {\\r\\n            if (!isWhiteListGroupPresent[_whiteListGroups[i]]) {\\r\\n                whiteListGroups.push(_whiteListGroups[i]);\\r\\n                isWhiteListGroupPresent[_whiteListGroups[i]] = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to remove whiteListGroups.\\r\\n    /// @param _whiteListGroups List of whiteListGroups to be removed.\\r\\n    function removeWhiteListGroups(uint256[] memory _whiteListGroups) external {\\r\\n        _isVaultAdmin();\\r\\n        for (uint256 i = 0; i < _whiteListGroups.length; i++) {\\r\\n            isWhiteListGroupPresent[_whiteListGroups[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set TokenDetails.\\r\\n    /// @param _tokenName Token Name.\\r\\n    /// @param _symbol Token Symbol.\\r\\n    function setTokenDetails(string memory _tokenName, string memory _symbol)\\r\\n        external\\r\\n    {\\r\\n        require(msg.sender == owner, \\\"unauthorized\\\");\\r\\n        setupToken(_tokenName, _symbol);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set Slippage percentage of the vault.\\r\\n    /// @param _slippage Slippage percentage.\\r\\n    function setVaultSlippage(uint256 _slippage) external onlyNormalMode {\\r\\n        require(msg.sender == vaultAdmin, \\\"unauthorized\\\");\\r\\n        IAPContract(APContract).setVaultSlippage(_slippage);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to manage the assets supported by the vaults.\\r\\n    /// @param _enabledDepositAsset List of assets to be enabled in Deposit assets.\\r\\n    /// @param _enabledWithdrawalAsset List of assets to be enabled in Withdrawal assets.\\r\\n    /// @param _disabledDepositAsset List of assets to be disabled in Deposit assets.\\r\\n    /// @param _disabledWithdrawalAsset List of assets to be disabled in Withdrawal assets.\\r\\n    function setVaultAssets(\\r\\n        address[] calldata _enabledDepositAsset,\\r\\n        address[] calldata _enabledWithdrawalAsset,\\r\\n        address[] calldata _disabledDepositAsset,\\r\\n        address[] calldata _disabledWithdrawalAsset\\r\\n    ) external onlyNormalMode {\\r\\n        require(msg.sender == vaultAdmin, \\\"unauthorized\\\");\\r\\n        IAPContract(APContract).setVaultAssets(\\r\\n            _enabledDepositAsset,\\r\\n            _enabledWithdrawalAsset,\\r\\n            _disabledDepositAsset,\\r\\n            _disabledWithdrawalAsset\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Function to change the APS Manager of the Vault.\\r\\n    /// @param _vaultAdmin Address of the new APS Manager.\\r\\n    function changeVaultAdmin(address _vaultAdmin) external onlyNormalMode {\\r\\n        require(\\r\\n            IAPContract(APContract).yieldsterDAO() == msg.sender ||\\r\\n                vaultAdmin == msg.sender,\\r\\n            \\\"unauthorized\\\"\\r\\n        );\\r\\n        vaultAdmin = _vaultAdmin;\\r\\n        IAPContract(APContract).changeVaultAdmin(_vaultAdmin);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set smart strategies to vault.\\r\\n    /// @param _smartStrategyAddress Address of smart Strategy.\\r\\n    /// @param _type Type of smart strategy.\\r\\n    function setVaultSmartStrategy(address _smartStrategyAddress, uint256 _type)\\r\\n        public\\r\\n    {\\r\\n        _isVaultAdmin();\\r\\n        IAPContract(APContract).setVaultSmartStrategy(\\r\\n            _smartStrategyAddress,\\r\\n            _type\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set threshold Vaule.\\r\\n    /// @param _threshold minimum threshold of an asset in vault.\\r\\n    function setThreshold(uint256 _threshold) external {\\r\\n        _isVaultAdmin();\\r\\n        threshold = _threshold;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to Deposit assets into the Vault.\\r\\n    /// @param _tokenAddress Address of the deposit token.\\r\\n    /// @param _amount Amount of deposit token.\\r\\n    function deposit(address _tokenAddress, uint256 _amount)\\r\\n        external\\r\\n        payable\\r\\n        onlyNormalMode\\r\\n        whenNotPaused\\r\\n    {\\r\\n        _isWhiteListed();\\r\\n        require(\\r\\n            IAPContract(APContract).isDepositAsset(_tokenAddress),\\r\\n            \\\"Not an approved deposit asset\\\"\\r\\n        );\\r\\n\\r\\n        if (_tokenAddress == eth) {\\r\\n            require(_amount == msg.value, \\\"incorrect value\\\");\\r\\n        }\\r\\n\\r\\n        managementFeeCleanUp(_tokenAddress);\\r\\n\\r\\n        (bool result, ) = IAPContract(APContract)\\r\\n            .getDepositStrategy()\\r\\n            .delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"deposit(address,uint256)\\\",\\r\\n                    _tokenAddress,\\r\\n                    _amount\\r\\n                )\\r\\n            );\\r\\n        revertDelegate(result);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to Withdraw assets from the Vault.\\r\\n    /// @param _tokenAddress Address of the withdraw token.\\r\\n    /// @param _shares Amount of Vault token shares.\\r\\n    function withdraw(address _tokenAddress, uint256 _shares)\\r\\n        external\\r\\n        onlyNormalMode\\r\\n        whenNotPaused\\r\\n    {\\r\\n        _isWhiteListed();\\r\\n        require(\\r\\n            IAPContract(APContract).isWithdrawalAsset(_tokenAddress),\\r\\n            \\\"Not an approved Withdrawal asset\\\"\\r\\n        );\\r\\n        require(\\r\\n            balanceOf(msg.sender) >= _shares,\\r\\n            \\\"You don't have enough shares\\\"\\r\\n        );\\r\\n\\r\\n        managementFeeCleanUp(_tokenAddress);\\r\\n\\r\\n        (bool result, ) = IAPContract(APContract)\\r\\n            .getWithdrawStrategy()\\r\\n            .delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"withdraw(address,uint256)\\\",\\r\\n                    _tokenAddress,\\r\\n                    _shares\\r\\n                )\\r\\n            );\\r\\n        revertDelegate(result);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set Beneficiary Address and Percentage.\\r\\n    /// @param _beneficiary strategy beneficiary to which profit fee is given.\\r\\n    /// @param _percentage percentage of profit fee to be given.\\r\\n    function setBeneficiaryAndPercentage(\\r\\n        address _beneficiary,\\r\\n        uint256 _percentage\\r\\n    ) external onlyNormalMode {\\r\\n        _isVaultAdmin();\\r\\n        strategyBeneficiary = _beneficiary;\\r\\n        strategyPercentage = _percentage;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to return balance amount in vault.\\r\\n    /// @param _token Address of token whose balance amount has to be returned.\\r\\n    function returnBalance(address _token) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n        if (_token == eth) {\\r\\n            amount = address(this).balance;\\r\\n        } else if (_token != address(0)) {\\r\\n            amount = IERC20(_token).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to deposit/withdraw vault assets to protocol\\r\\n    /// @param _poolAddress Address of the protocol\\r\\n    /// @param _instruction Encoded instruction to perform protocol deposit of vault tokens\\r\\n    /// @param _amount Amount to be deposited to the protocol\\r\\n    /// @param _fromToken Deposit token address\\r\\n    /// @param _returnToken Address of the token returned by the protocol\\r\\n    function protocolInteraction(\\r\\n        address _poolAddress,\\r\\n        bytes calldata _instruction,\\r\\n        uint256[] calldata _amount,\\r\\n        address[] calldata _fromToken,\\r\\n        address[] calldata _returnToken\\r\\n    ) external onlyNormalMode whenPaused {\\r\\n        require(\\r\\n            IAPContract(APContract).sdkContract() == msg.sender,\\r\\n            \\\"only through sdk\\\"\\r\\n        );\\r\\n        bool operationSatisfied;\\r\\n\\r\\n        if (_instruction.length > 0) operationSatisfied = true;\\r\\n        else if (_poolAddress == IAPContract(APContract).sdkContract())\\r\\n            operationSatisfied = true;\\r\\n        else operationSatisfied = false;\\r\\n\\r\\n        require(operationSatisfied, \\\"Not supported operation\\\");\\r\\n\\r\\n        uint256[] memory returnTokenBalance = new uint256[](\\r\\n            _returnToken.length\\r\\n        );\\r\\n\\r\\n        if (_returnToken.length > 0) {\\r\\n            for (uint256 i = 0; i < _returnToken.length; i++) {\\r\\n                returnTokenBalance[i] = returnBalance(_returnToken[i]);\\r\\n                if (_returnToken[i] != address(0))\\r\\n                    addToAssetList(_returnToken[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 fromTokenEthAmount;\\r\\n\\r\\n        if (_fromToken.length > 0) {\\r\\n            require(_fromToken.length == _amount.length, \\\"require same\\\");\\r\\n            for (uint256 i = 0; i < _fromToken.length; i++) {\\r\\n                require(\\r\\n                    _amount[i] <= tokenBalances.getTokenBalance(_fromToken[i]),\\r\\n                    \\\"Not enough token present\\\"\\r\\n                );\\r\\n                if (_fromToken[i] != eth)\\r\\n                    _approveToken(_fromToken[i], _poolAddress, _amount[i]);\\r\\n                else if (_fromToken[i] == eth)\\r\\n                    fromTokenEthAmount = fromTokenEthAmount.add(_amount[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bool result;\\r\\n\\r\\n        if (fromTokenEthAmount != 0) {\\r\\n            (result, ) = _poolAddress.call{value: fromTokenEthAmount}(\\r\\n                _instruction\\r\\n            );\\r\\n        } else if (_fromToken.length > 0) {\\r\\n            if (_instruction.length > 0)\\r\\n                (result, ) = _poolAddress.call(_instruction);\\r\\n            else result = true;\\r\\n        } else {\\r\\n            (result, ) = _poolAddress.call(_instruction);\\r\\n        }\\r\\n\\r\\n        if (_fromToken.length > 0) {\\r\\n            for (uint256 i; i < _fromToken.length; i++) {\\r\\n                if (_fromToken[i] != address(0))\\r\\n                    tokenBalances.setTokenBalance(\\r\\n                        _fromToken[i],\\r\\n                        tokenBalances.getTokenBalance(_fromToken[i]).sub(\\r\\n                            _amount[i]\\r\\n                        )\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_returnToken.length > 0)\\r\\n            for (uint256 i = 0; i < _returnToken.length; i++) {\\r\\n                if (_returnToken[i] != address(0)) {\\r\\n                    uint256 returnTokenAmountAfter = returnBalance(\\r\\n                        _returnToken[i]\\r\\n                    );\\r\\n                    tokenBalances.setTokenBalance(\\r\\n                        _returnToken[i],\\r\\n                        tokenBalances.getTokenBalance(_returnToken[i]).add(\\r\\n                            returnTokenAmountAfter.sub(returnTokenBalance[i])\\r\\n                        )\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n        revertDelegate(result);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to get list of all the assets deposited to the vault\\r\\n    function getAssetList() public view returns (address[] memory) {\\r\\n        return assetList;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to exchange token using Yieldster exchanges\\r\\n    /// @param _fromToken Address of the exchange from token\\r\\n    /// @param _toToken Address of the exchange to token\\r\\n    /// @param _amount Exchange amount\\r\\n    /// @param _slippageSwap Acceptable slippage percentage(50 == 0.5%)\\r\\n    function exchangeToken(\\r\\n        address _fromToken,\\r\\n        address _toToken,\\r\\n        uint256 _amount,\\r\\n        uint256 _slippageSwap\\r\\n    ) public whenPaused returns (uint256) {\\r\\n        require(\\r\\n            _amount <= tokenBalances.getTokenBalance(_fromToken),\\r\\n            \\\"Not enough token present\\\"\\r\\n        );\\r\\n        require(\\r\\n            IAPContract(APContract).sdkContract() == msg.sender,\\r\\n            \\\"only through sdk\\\"\\r\\n        );\\r\\n        uint256 exchangeReturn;\\r\\n        IExchangeRegistry exchangeRegistry = IExchangeRegistry(\\r\\n            IAPContract(APContract).exchangeRegistry()\\r\\n        );\\r\\n        address exchange = exchangeRegistry.getPair(_fromToken, _toToken);\\r\\n        require(exchange != address(0), \\\"Exchange pair not present\\\");\\r\\n        addToAssetList(_toToken);\\r\\n        uint256 minReturn = IAPContract(APContract).calculateSlippage(\\r\\n            _fromToken,\\r\\n            _toToken,\\r\\n            _amount,\\r\\n            _slippageSwap\\r\\n        );\\r\\n\\r\\n        _approveToken(_fromToken, exchange, _amount);\\r\\n        exchangeReturn = IExchange(exchange).swap(\\r\\n            _fromToken,\\r\\n            _toToken,\\r\\n            _amount,\\r\\n            minReturn\\r\\n        );\\r\\n        tokenBalances.setTokenBalance(\\r\\n            _fromToken,\\r\\n            tokenBalances.getTokenBalance(_fromToken).sub(_amount)\\r\\n        );\\r\\n\\r\\n        tokenBalances.setTokenBalance(\\r\\n            _toToken,\\r\\n            tokenBalances.getTokenBalance(_toToken).add(exchangeReturn)\\r\\n        );\\r\\n        return exchangeReturn;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to perform Management fee Calculations in the Vault.\\r\\n    /// @param _tokenAddress Address of token on which managementFeeCleanUp has to be performed\\r\\n    function managementFeeCleanUp(address _tokenAddress) public {\\r\\n        address[] memory managementFeeStrategies = IAPContract(APContract)\\r\\n            .getVaultManagementFee();\\r\\n        for (uint256 i = 0; i < managementFeeStrategies.length; i++) {\\r\\n            (bool result, ) = managementFeeStrategies[i].delegatecall(\\r\\n                abi.encodeWithSignature(\\r\\n                    \\\"executeSafeCleanUp(address)\\\",\\r\\n                    _tokenAddress\\r\\n                )\\r\\n            );\\r\\n            if (result == false) {\\r\\n                emit Response(\\r\\n                    managementFeeStrategies[i],\\r\\n                    \\\"Failed in managementFeeCleanUp\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyNormalMode() {\\r\\n        _onlyNormalMode();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to check if msg.sender is VaultAdmin.\\r\\n    function _isVaultAdmin() private view {\\r\\n        require(msg.sender == vaultAdmin, \\\"not vaultAdmin\\\");\\r\\n    }\\r\\n\\r\\n    /// @dev Function to check if msg.sender is yieldsterGOD.\\r\\n    function _isYieldsterGOD() private view {\\r\\n        require(\\r\\n            msg.sender == IAPContract(APContract).yieldsterGOD(),\\r\\n            \\\"unauthorized\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Function that Disables vault interactions in case of Emergency Break and Emergency Exit.\\r\\n    function _onlyNormalMode() private view {\\r\\n        if (emergencyConditions == 1) {\\r\\n            _isYieldsterGOD();\\r\\n        } else if (emergencyConditions == 2) {\\r\\n            revert(\\\"safe inactive\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        etherDepositors.push(msg.sender);\\r\\n        userEtherBalance[msg.sender] = userEtherBalance[msg.sender] + msg.value;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to perform operation on Receival of ERC1155 token from Yieldster Strategy Minter.\\r\\n    /// @param id Number denoting the type of instruction. 0 = safe Minter,2 = deposit strategy minter, 3 = withdrawal strategy minter.\\r\\n    /// @param data Bytes containing encoded function call.\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256 id,\\r\\n        uint256,\\r\\n        bytes calldata data\\r\\n    ) external virtual override onlyNormalMode returns (bytes4) {\\r\\n        // managementFeeCleanUp();\\r\\n        if (id == 0) {\\r\\n            require(\\r\\n                IAPContract(APContract).safeMinter() == msg.sender,\\r\\n                \\\"Only Safe Minter\\\"\\r\\n            );\\r\\n            (bool success, ) = IAPContract(APContract).safeUtils().delegatecall(\\r\\n                data\\r\\n            );\\r\\n            revertDelegate(success);\\r\\n        } else if (id == 2 || id == 3) {\\r\\n            require(\\r\\n                (IAPContract(APContract).getStrategyFromMinter(msg.sender) ==\\r\\n                    IAPContract(APContract).getDepositStrategy()) ||\\r\\n                    (IAPContract(APContract).getStrategyFromMinter(\\r\\n                        msg.sender\\r\\n                    ) == IAPContract(APContract).getWithdrawStrategy()),\\r\\n                \\\"Neither Deposit nor Withdraw strategy\\\"\\r\\n            );\\r\\n            (bool success, ) = IAPContract(APContract)\\r\\n                .getStrategyFromMinter(msg.sender)\\r\\n                .delegatecall(data);\\r\\n            revertDelegate(success);\\r\\n        }\\r\\n\\r\\n        return\\r\\n            bytes4(\\r\\n                keccak256(\\r\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Function to pause a function.\\r\\n    function toPause() external {\\r\\n        require(\\r\\n            msg.sender == vaultAdmin ||\\r\\n                IAPContract(APContract).checkWalletAddress(msg.sender),\\r\\n            \\\"Unauthorized\\\"\\r\\n        );\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @dev Function to unpause a function.\\r\\n    function unPause() external {\\r\\n        require(\\r\\n            msg.sender == vaultAdmin ||\\r\\n                IAPContract(APContract).checkWalletAddress(msg.sender),\\r\\n            \\\"Unauthorized\\\"\\r\\n        );\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @dev Function to getVaultSlippage.\\r\\n    function getVaultSlippage() external view returns (uint256) {\\r\\n        return IAPContract(APContract).getVaultSlippage();\\r\\n    }\\r\\n\\r\\n    /// @dev Function to change emergency vault\\r\\n    /// @param _emergencyVault  address of the emergency vault\\r\\n    function changeEmergencyVault(address _emergencyVault) public {\\r\\n        _isVaultAdmin();\\r\\n        emergencyVault = _emergencyVault;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/token/ERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n */\\r\\ncontract ERC20Detailed is IERC20 {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    //function to setup name and symbol of the safe token once during safe creation\\r\\n    function setupToken(string memory __name, string memory __symbol) internal {\\r\\n        require(\\r\\n            keccak256(abi.encodePacked((_name))) ==\\r\\n                keccak256(abi.encodePacked((\\\"\\\"))),\\r\\n            \\\"Token Name already assigned\\\"\\r\\n        );\\r\\n        require(\\r\\n            keccak256(abi.encodePacked((_symbol))) ==\\r\\n                keccak256(abi.encodePacked((\\\"\\\"))),\\r\\n            \\\"Token Symbol already assigned\\\"\\r\\n        );\\r\\n\\r\\n        _name = __name;\\r\\n        _symbol = __symbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint256 currentAllowance = allowance(from, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(from, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _transfer(from, to, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n       \\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/token/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev _Available since v3.1._\\r\\n */\\r\\ncontract ERC1155Receiver is ERC165, IERC1155Receiver {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function onERC1155Received (\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) override\\r\\n    external\\r\\n    virtual\\r\\n    returns(bytes4)\\r\\n    {\\r\\n   \\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived (\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) override\\r\\n    external\\r\\n    returns(bytes4)\\r\\n    {\\r\\n \\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/storage/VaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"../common/MasterCopy.sol\\\";\\r\\nimport \\\"../token/ERC20Detailed.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../token/ERC1155Receiver.sol\\\";\\r\\nimport \\\"../interfaces/IAPContract.sol\\\";\\r\\nimport \\\"../interfaces/IHexUtils.sol\\\";\\r\\nimport \\\"../interfaces/IWhitelist.sol\\\";\\r\\nimport \\\"./TokenBalanceStorage.sol\\\";\\r\\nimport \\\"../interfaces/IExchangeRegistry.sol\\\";\\r\\nimport \\\"../interfaces/IExchange.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract VaultStorage is MasterCopy, ERC20Detailed, ERC1155Receiver, Pausable,ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 constant arrSize = 200;\\r\\n    uint8 public emergencyConditions;\\r\\n    bool internal vaultSetupCompleted;\\r\\n    bool internal vaultRegistrationCompleted;\\r\\n    address public APContract;\\r\\n    address public owner;\\r\\n    address public vaultAdmin;\\r\\n    uint256[] internal whiteListGroups;\\r\\n    mapping(uint256 => bool) isWhiteListGroupPresent;\\r\\n    address[] public assetList;\\r\\n    mapping(address => bool) internal isAssetPresent;\\r\\n    address public strategyBeneficiary;\\r\\n    uint256 public strategyPercentage;\\r\\n    uint256 public threshold;\\r\\n    address public eth;\\r\\n    mapping(address=>uint256) userEtherBalance;\\r\\n    address[] public etherDepositors;\\r\\n    address public emergencyVault;\\r\\n    TokenBalanceStorage tokenBalances;\\r\\n\\r\\n    //TODO verify if this code has to be used for this fn\\r\\n    /// @dev Function to revert in case of low level call fail.\\r\\n    /// @param _delegateStatus Boolean indicating the status of low level call.\\r\\n    function revertDelegate(bool _delegateStatus) internal pure {\\r\\n        if (!_delegateStatus) {\\r\\n            assembly {\\r\\n                let ptr := mload(0x40)\\r\\n                let size := returndatasize()\\r\\n                returndatacopy(ptr, 0, size)\\r\\n                revert(ptr, size)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to get the balance of token from tokenBalances.\\r\\n    /// @param _tokenAddress Address of the token.\\r\\n    function getTokenBalance(address _tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return tokenBalances.getTokenBalance(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add a token to assetList.\\r\\n    /// @param _asset Address of the asset.\\r\\n    function addToAssetList(address _asset) internal {\\r\\n        require(_asset != address(0), \\\"invalid asset address\\\");\\r\\n        if (!isAssetPresent[_asset]) {\\r\\n            checkLength(1);\\r\\n            assetList.push(_asset);\\r\\n            isAssetPresent[_asset] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to return the NAV of the Vault.\\r\\n    function getVaultNAV() public view returns (uint256) {\\r\\n        uint256 nav = 0;\\r\\n        address wEth = IAPContract(APContract).getWETH();\\r\\n        for (uint256 i = 0; i < assetList.length; i++) {\\r\\n            if (tokenBalances.getTokenBalance(assetList[i]) > 0) {\\r\\n                uint256 tokenUSD = IAPContract(APContract).getUSDPrice(\\r\\n                    assetList[i]\\r\\n                );\\r\\n                if (assetList[i] == eth) {\\r\\n                    nav += IHexUtils(IAPContract(APContract).stringUtils())\\r\\n                        .toDecimals(\\r\\n                            wEth,\\r\\n                            tokenBalances.getTokenBalance(assetList[i])\\r\\n                        )\\r\\n                        .mul(tokenUSD);\\r\\n                } else {\\r\\n                    nav += IHexUtils(IAPContract(APContract).stringUtils())\\r\\n                        .toDecimals(\\r\\n                            assetList[i],\\r\\n                            tokenBalances.getTokenBalance(assetList[i])\\r\\n                        )\\r\\n                        .mul(tokenUSD);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return nav.div(1e18);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to approve ERC20 token to the spendor.\\r\\n    /// @param _token Address of the Token.\\r\\n    /// @param _spender Address of the Spendor.\\r\\n    /// @param _amount Amount of the tokens.\\r\\n    function _approveToken(\\r\\n        address _token,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        if (IERC20(_token).allowance(address(this), _spender) > 0) {\\r\\n            IERC20(_token).safeApprove(_spender, 0);\\r\\n            IERC20(_token).safeApprove(_spender, _amount);\\r\\n        } else IERC20(_token).safeApprove(_spender, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to return NAV for Deposit token and amount.\\r\\n    /// @param _tokenAddress Address of the deposit Token.\\r\\n    /// @param _amount Amount of the Deposit tokens.\\r\\n    function getDepositNAV(address _tokenAddress, uint256 _amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 tokenUSD = IAPContract(APContract).getUSDPrice(_tokenAddress);\\r\\n        address tokenAddress = _tokenAddress;\\r\\n        if (tokenAddress == eth)\\r\\n            tokenAddress = IAPContract(APContract).getWETH();\\r\\n        return\\r\\n            (\\r\\n                IHexUtils(IAPContract(APContract).stringUtils())\\r\\n                    .toDecimals(tokenAddress, _amount)\\r\\n                    .mul(tokenUSD)\\r\\n            ).div(1e18);\\r\\n    }\\r\\n\\r\\n    /// @dev Function to get the amount of Vault Tokens to be minted for the deposit NAV.\\r\\n    /// @param depositNAV NAV of the Deposit Amount.\\r\\n    function getMintValue(uint256 depositNAV) internal view returns (uint256) {\\r\\n        return (depositNAV.mul(totalSupply())).div(getVaultNAV());\\r\\n    }\\r\\n\\r\\n    /// @dev Function to return Value of the Vault Token.\\r\\n    function tokenValueInUSD() public view returns (uint256) {\\r\\n        if (getVaultNAV() == 0 || totalSupply() == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return (getVaultNAV().mul(1e18)).div(totalSupply());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to update token balance in tokenBalances.\\r\\n    /// @param tokenAddress Address of the Token.\\r\\n    /// @param tokenAmount Amount of the tokens.\\r\\n    /// @param isAddition Boolean indicating if token addition or substraction.\\r\\n    function updateTokenBalance(\\r\\n        address tokenAddress,\\r\\n        uint256 tokenAmount,\\r\\n        bool isAddition\\r\\n    ) internal {\\r\\n        if (isAddition) {\\r\\n            tokenBalances.setTokenBalance(\\r\\n                tokenAddress,\\r\\n                tokenBalances.getTokenBalance(tokenAddress).add(tokenAmount)\\r\\n            );\\r\\n        } else {\\r\\n            tokenBalances.setTokenBalance(\\r\\n                tokenAddress,\\r\\n                tokenBalances.getTokenBalance(tokenAddress).sub(tokenAmount)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Function to check if assetList length is <1000\\r\\n    /// @param _increments The maximum size the assetList.length can be incremented by\\r\\n    function checkLength(uint256 _increments) internal view {\\r\\n        require(\\r\\n            assetList.length + _increments <= arrSize,\\r\\n            \\\"Exceeds safe assetList length\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Function to return mapping details of ether depositors\\r\\n    /// @param _address address to be queried\\r\\n    function getEtherDepositor(address _address) external view returns(uint256){\\r\\n        return userEtherBalance[_address];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/storage/TokenBalanceStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ncontract TokenBalanceStorage {\\r\\n\\r\\n    uint256 public blockNumber;\\r\\n    uint256 public lastTransactionNAV;\\r\\n    address private owner;\\r\\n    mapping(address=>uint256) tokenBalance;\\r\\n\\r\\n    constructor(){\\r\\n        // blockNumber = block.number;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set the balance of a token.\\r\\n    /// @param _tokenAddress Address of the token.\\r\\n    /// @param _balance Balance of the token.\\r\\n    function setTokenBalance(address _tokenAddress, uint256 _balance) public {\\r\\n        require(msg.sender == owner, \\\"only Owner\\\");\\r\\n        tokenBalance[_tokenAddress] = _balance;\\r\\n    }\\r\\n    \\r\\n    /// @dev Function to get the balance of a token.\\r\\n    /// @param _token Address of the token.\\r\\n   function getTokenBalance(address _token) public view returns (uint256) {\\r\\n        return tokenBalance[_token];\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set the block Number of the current transaction.\\r\\n    function setLastTransactionBlockNumber() public{\\r\\n        require(msg.sender==owner,\\\"not authorized\\\");\\r\\n        blockNumber = block.number;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set the NAV of the vault in last transaction.\\r\\n    /// @param _nav Nav of the vault.\\r\\n    function setLastTransactionNAV(uint256 _nav) public{\\r\\n        require(msg.sender==owner,\\\"not authorized\\\");\\r\\n        lastTransactionNAV = _nav;\\r\\n    }\\r\\n    \\r\\n    /// @dev Function to get the block Number of the last transaction.\\r\\n    function getLastTransactionBlockNumber() public view returns (uint256) {\\r\\n        return blockNumber;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to get the NAV of the last transaction.\\r\\n    function getLastTransactionNav() public view returns (uint256) {\\r\\n        return lastTransactionNAV;\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IWhitelist {\\r\\n    function isMember(uint256, address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IHexUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IHexUtils {\\r\\n    function fromHex(bytes calldata) external pure returns (bytes memory);\\r\\n\\r\\n    function toDecimals(address, uint256) external view returns (uint256);\\r\\n\\r\\n    function fromDecimals(address, uint256) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IExchangeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IExchangeRegistry {\\r\\n    function getPair(address, address) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IExchange {\\r\\n    function swap(\\r\\n        address, //from\\r\\n        address, //to\\r\\n        uint256, //amount\\r\\n        uint256 //minAmount\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAPContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IAPContract {\\r\\n    \\r\\n\\r\\n    function getUSDPrice(address) external view returns (uint256);\\r\\n    function stringUtils() external view returns (address);\\r\\n    function yieldsterGOD() external view returns (address);\\r\\n    function emergencyVault() external view returns (address);\\r\\n    function whitelistModule() external view returns (address);\\r\\n    function addVault(address,uint256[] calldata) external;\\r\\n    function setVaultSlippage(uint256) external;\\r\\n    function setVaultAssets(address[] calldata,address[] calldata,address[] calldata,address[] calldata) external;\\r\\n    function changeVaultAdmin(address _vaultAdmin) external;\\r\\n    function yieldsterDAO() external view returns (address);\\r\\n    function exchangeRegistry() external view returns (address);\\r\\n    function getVaultSlippage() external view returns (uint256);\\r\\n    function _isVaultAsset(address) external view returns (bool);\\r\\n    function yieldsterTreasury() external view returns (address);\\r\\n    function setVaultStatus(address) external;\\r\\n    function setVaultSmartStrategy(address, uint256) external;\\r\\n    function getWithdrawStrategy() external returns (address);\\r\\n    function getDepositStrategy() external returns (address);\\r\\n    function isDepositAsset(address) external view returns (bool);\\r\\n    function isWithdrawalAsset(address) external view returns (bool);\\r\\n    function getVaultManagementFee() external returns (address[] memory);\\r\\n    function safeMinter() external returns (address);\\r\\n    function safeUtils() external returns (address);\\r\\n    function getStrategyFromMinter(address) external view returns (address);\\r\\n    function sdkContract() external returns (address);\\r\\n    function getWETH()external view returns(address);\\r\\n    function calculateSlippage(address ,address, uint256, uint256)external view returns(uint256);\\r\\n    function vaultsCount(address) external view returns(uint256);\\r\\n    function getPlatformFeeStorage() external view returns(address);\\r\\n    function checkWalletAddress(address _walletAddress) external view returns(bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/common/MasterCopy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n\\r\\n/// @title MasterCopy - Base for master copy contracts (should always be first super contract)\\r\\n///         This contract is tightly coupled to our proxy contract (see `proxies/YieldsterVaultProxy.sol`)\\r\\n/// @author Richard Meissner - <richard@gnosis.io>\\r\\ncontract MasterCopy  {\\r\\n    event ChangedMasterCopy(address masterCopy);\\r\\n\\r\\n    modifier authorized() {\\r\\n        require(\\r\\n            msg.sender == address(this),\\r\\n            \\\"Method can only be called from this contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\r\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\r\\n    address private masterCopy;\\r\\n\\r\\n    /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\\r\\n    /// @param _masterCopy New contract address.\\r\\n    function changeMasterCopy(address _masterCopy) public authorized {\\r\\n        // Master copy address cannot be null.\\r\\n        require(\\r\\n            _masterCopy != address(0),\\r\\n            \\\"Invalid master copy address provided\\\"\\r\\n        );\\r\\n        masterCopy = _masterCopy;\\r\\n        emit ChangedMasterCopy(_masterCopy);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"CallStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"masterCopy\",\"type\":\"address\"}],\"name\":\"ChangedMasterCopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_whiteListGroups\",\"type\":\"uint256[]\"}],\"name\":\"addWhiteListGroups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyVault\",\"type\":\"address\"}],\"name\":\"changeEmergencyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"changeMasterCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAdmin\",\"type\":\"address\"}],\"name\":\"changeVaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyConditions\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"etherDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageSwap\",\"type\":\"uint256\"}],\"name\":\"exchangeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEtherDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"managementFeeCleanUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_instruction\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_fromToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_returnToken\",\"type\":\"address[]\"}],\"name\":\"protocolInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerVaultWithAPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_whiteListGroups\",\"type\":\"uint256[]\"}],\"name\":\"removeWhiteListGroups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_APContract\",\"type\":\"address\"}],\"name\":\"setAPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBeneficiaryAndPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_enabledDepositAsset\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_enabledWithdrawalAsset\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_disabledDepositAsset\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_disabledWithdrawalAsset\",\"type\":\"address[]\"}],\"name\":\"setVaultAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setVaultSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setVaultSmartStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_APContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergencyVault\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEmergencyBreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenValueInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"}],\"name\":\"upgradeMasterCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YieldsterVault", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "petersburg", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}