{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IGate.sol\\\";\\nimport \\\"./UsingHelpers.sol\\\";\\n\\n/**\\n * @notice Gate contract between Boson router for conditional commits\\n *\\n * Enables conditional commit, where the user must be a\\n * holder of a specific token, which can be either ERC20,\\n * ERC721, or ERC1155\\n */\\n\\n\\ninterface Token {\\n    function balanceOf(address account) external view returns (uint256); //ERC-721 and ERC-20\\n    function ownerOf(uint256 _tokenId) external view returns (address); //ERC-721\\n}\\n\\ninterface MultiToken {\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n}\\n\\ncontract Gate is IGate, Ownable, Pausable {\\n\\n    enum TokenType {FUNGIBLE_TOKEN, NONFUNGIBLE_TOKEN, MULTI_TOKEN} // ERC20, ERC721, ERC1155\\n\\n    event LogConditionalContractSet(\\n        address indexed _conditionalToken,\\n        TokenType indexed _conditionalTokenType,\\n        address indexed _triggeredBy\\n    );\\n\\n    event LogBosonRouterSet(\\n        address indexed _bosonRouter,\\n        address indexed _triggeredBy\\n    );\\n\\n    event LogVoucherSetRegistered(\\n        uint256 indexed _tokenIdSupply,\\n        uint256 indexed _conditionalTokenId,\\n        Condition _condition,\\n        uint256 threshold\\n    );\\n\\n    event LogUserVoucherDeactivated(\\n        address indexed _user,\\n        uint256 indexed _tokenIdSupply\\n    );\\n\\n    mapping(uint256 => ConditionalCommitInfo) private voucherSetToConditionalCommit;\\n    mapping(address => mapping(uint256 => bool)) private isDeactivated; // user => voucherSet => bool\\n\\n    TokenType private conditionalTokenType;\\n    address private conditionalTokenContract;\\n    address private bosonRouterAddress;\\n  \\n    /**\\n     * @notice Constructor\\n     * @param _bosonRouterAddress - address of the associated BosonRouter contract instance\\n     * @param _conditionalToken - address of the conditional token\\n     * @param _conditionalTokenType - the type of the conditional token\\n     */\\n    constructor(\\n        address _bosonRouterAddress,\\n        address _conditionalToken,\\n        TokenType _conditionalTokenType\\n    )\\n    notZeroAddress(_conditionalToken)\\n    notZeroAddress(_bosonRouterAddress)\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n        conditionalTokenContract = _conditionalToken;\\n        conditionalTokenType = _conditionalTokenType;\\n\\n        emit LogBosonRouterSet(_bosonRouterAddress, msg.sender);\\n        emit LogConditionalContractSet(_conditionalToken, _conditionalTokenType, msg.sender);\\n    }\\n\\n    modifier onlyFromRouter() {\\n        require(msg.sender == bosonRouterAddress, \\\"UNAUTHORIZED_BR\\\"); \\n        _;\\n    }\\n\\n    modifier onlyRouterOrOwner() {\\n        require(msg.sender == bosonRouterAddress || msg.sender == owner(), \\\"UNAUTHORIZED_O_BR\\\"); \\n        _;\\n    }\\n\\n    /**\\n     * @notice  Checking if a non-zero address is provided, otherwise reverts.\\n     */\\n    modifier notZeroAddress(address _tokenAddress) {\\n        require(_tokenAddress != address(0), \\\"0A\\\"); //zero address\\n        _;\\n    }\\n\\n    /**\\n     * @notice Get the token ID and Condition associated with the supply token ID (voucherSetID)\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return conditional token ID if one is associated with a voucher set. Zero could be a valid token ID\\n     * @return condition that will be checked when a user commits using a conditional token\\n     * @return threshold that may be checked when a user commits using a conditional token\\n     */\\n    function getConditionalCommitInfo(uint256 _tokenIdSupply) external view returns (uint256, Condition, uint256) {\\n        ConditionalCommitInfo storage conditionalCommitInfo = voucherSetToConditionalCommit[_tokenIdSupply];\\n        return (\\n            conditionalCommitInfo.conditionalTokenId,\\n            conditionalCommitInfo.condition,\\n            conditionalCommitInfo.threshold\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the contract, where gate contract checks if user holds conditional token\\n     * @param _conditionalToken address of a conditional token contract\\n     * @param _conditionalTokenType type of token\\n     */\\n    function setConditionalTokenContract(\\n        address _conditionalToken,\\n        TokenType _conditionalTokenType\\n    ) external onlyOwner notZeroAddress(_conditionalToken) whenPaused {\\n        conditionalTokenContract = _conditionalToken;\\n        conditionalTokenType = _conditionalTokenType;\\n        emit LogConditionalContractSet(_conditionalToken, _conditionalTokenType, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the contract address, where gate contract checks if user holds conditional token\\n     * @return address of conditional token contract\\n     * @return type of conditional token contract\\n     */\\n    function getConditionalTokenContract() external view returns (address, TokenType) {\\n        return (\\n            conditionalTokenContract,\\n            conditionalTokenType\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the Boson router contract address, from which deactivate is accepted\\n     * @param _bosonRouterAddress address of the boson router contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress)\\n        external\\n        onlyOwner\\n        notZeroAddress(_bosonRouterAddress)\\n        whenPaused\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n        emit LogBosonRouterSet(_bosonRouterAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Registers connection between setID and specific MultiToken tokenID\\n     *\\n     * Not necessary if the conditional token is not MultiToken (i.e, ERC1155)\\n     *\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @param _conditionalCommitInfo struct that contains data pertaining to conditional commit:\\n     *\\n     * uint256 conditionalTokenId - Id of the conditional token, ownership of which is a condition for committing to redeem a voucher\\n     * in the voucher set created by this function.\\n     *\\n     * uint256 threshold - the number that the balance of a tokenId must be greater than or equal to. Not used for OWNERSHIP condition\\n     *\\n     * Condition condition - condition that will be checked when a user commits using a conditional token\\n     *\\n     * address gateAddress - address of a gate contract that will handle the interaction between the BosonRouter contract and the conditional token,\\n     * ownership of which is a condition for committing to redeem a voucher in the voucher set created by this function.\\n     *\\n     * bool registerConditionalCommit - indicates whether Gate.registerVoucherSetId should be called. Gate.registerVoucherSetId can also be called separately\\n     */\\n    function registerVoucherSetId(uint256 _tokenIdSupply, ConditionalCommitInfo calldata _conditionalCommitInfo)\\n        external\\n        override\\n        whenNotPaused\\n        onlyRouterOrOwner\\n    {\\n        require(_tokenIdSupply != 0, \\\"INVALID_TOKEN_SUPPLY\\\");\\n        \\n        \\n        if(_conditionalCommitInfo.condition == Condition.OWNERSHIP) {\\n            require(conditionalTokenType == TokenType.NONFUNGIBLE_TOKEN, \\\"CONDITION_NOT_AVAILABLE_FOR_TOKEN_TYPE\\\");\\n        } else {\\n            require(_conditionalCommitInfo.threshold != 0, \\\"INVALID_THRESHOLD\\\");\\n        }\\n\\n        voucherSetToConditionalCommit[_tokenIdSupply] = _conditionalCommitInfo;\\n\\n        emit LogVoucherSetRegistered(_tokenIdSupply, _conditionalCommitInfo.conditionalTokenId, _conditionalCommitInfo.condition, _conditionalCommitInfo.threshold);\\n    }\\n\\n    /**\\n     * @notice Checks if user possesses the required conditional token for given voucher set\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return true if user possesses conditional token, and the token is not deactivated\\n     */\\n    function check(address _user, uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n       ConditionalCommitInfo memory conditionalCommitInfo = voucherSetToConditionalCommit[_tokenIdSupply];\\n\\n        if(conditionalCommitInfo.condition == Condition.NOT_SET) {\\n            return false;\\n        }\\n\\n        return conditionalCommitInfo.condition == Condition.OWNERSHIP\\n                ? checkOwnership(_user, _tokenIdSupply, conditionalCommitInfo.conditionalTokenId)\\n                : checkBalance(_user, _tokenIdSupply, conditionalCommitInfo.conditionalTokenId, conditionalCommitInfo.threshold);\\n\\n\\n    }\\n\\n    /**\\n     * @notice Stores information that certain user already claimed\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     */\\n    function deactivate(address _user, uint256 _tokenIdSupply)\\n        external\\n        override\\n        whenNotPaused\\n        onlyFromRouter\\n    {\\n        isDeactivated[_user][_tokenIdSupply] = true;\\n\\n        emit LogUserVoucherDeactivated(_user, _tokenIdSupply);\\n    }\\n\\n    /**\\n     * @notice Pause register and deactivate\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract and allows register and deactivate\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Checks if user possesses the required balance of the conditional token for given voucher set\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @param _conditionalTokenId an ID of a conditional token\\n     * @param _threshold the number that the balance must be greater than or equal to\\n     * @return true if user possesses conditional token, and the token is not deactivated\\n     */\\n    function checkBalance(address _user, uint256 _tokenIdSupply, uint256 _conditionalTokenId, uint256 _threshold)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            !isDeactivated[_user][_tokenIdSupply] &&\\n            ((conditionalTokenType == TokenType.MULTI_TOKEN)\\n                ? MultiToken(conditionalTokenContract).balanceOf(_user, _conditionalTokenId)\\n                : Token(conditionalTokenContract).balanceOf(_user)\\n            ) >= _threshold;\\n    }\\n\\n     /**\\n     * @notice Checks if user owns a specific token Id. Only for ERC-721 tokens\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @param _conditionalTokenId an ID of a conditional token\\n     * @return true if user possesses conditional token, and the token is not deactivated\\n     */\\n    function checkOwnership(address _user, uint256 _tokenIdSupply, uint256 _conditionalTokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            !isDeactivated[_user][_tokenIdSupply] &&\\n            (Token(conditionalTokenContract).ownerOf(_conditionalTokenId) == _user);\\n         \\n    }\\n        \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../UsingHelpers.sol\\\";\\n\\ninterface IGate {\\n    /**\\n     * @notice Registers connection between setID and tokenID\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155)\\n     * @param _conditionalCommitInfo struct that contains data pertaining to conditional commit:\\n     *\\n     * uint256 conditionalTokenId - Id of the conditional token, ownership of which is a condition for committing to redeem a voucher\\n     * in the voucher set created by this function.\\n     *\\n     * uint256 threshold - the number that the balance of a tokenId must be greater than or equal to. Not used for OWNERSHIP condition\\n     *\\n     * Condition condition - condition that will be checked when a user commits using a conditional token\\n     *\\n     * address gateAddress - address of a gate contract that will handle the interaction between the BosonRouter contract and the conditional token,\\n     * ownership of which is a condition for committing to redeem a voucher in the voucher set created by this function.\\n     *\\n     * bool registerConditionalCommit - indicates whether Gate.registerVoucherSetId should be called. Gate.registerVoucherSetId can also be called separately\\n     */\\n    function registerVoucherSetId(\\n        uint256 _tokenIdSupply,\\n        ConditionalCommitInfo calldata _conditionalCommitInfo\\n    ) external;\\n\\n    /**\\n     * @notice Checks if user possesses the required conditional token for given voucher set\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return true if user possesses conditional token, and the token is not deactivated\\n     */\\n    function check(address _user, uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Stores information that certain user already claimed\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     */\\n    function deactivate(address _user, uint256 _tokenIdSupply) external;\\n}\\n\"\r\n    },\r\n    \"contracts/UsingHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n// Those are the payment methods we are using throughout the system.\\n// Depending on how to user choose to interact with it's funds we store the method, so we could distribute its tokens afterwise\\nenum PaymentMethod {\\n    ETHETH,\\n    ETHTKN,\\n    TKNETH,\\n    TKNTKN\\n}\\n\\nenum Entity {ISSUER, HOLDER, POOL}\\n\\nenum VoucherState {FINAL, CANCEL_FAULT, COMPLAIN, EXPIRE, REFUND, REDEEM, COMMIT}\\n/*  Status of the voucher in 8 bits:\\n    [6:COMMITTED] [5:REDEEMED] [4:REFUNDED] [3:EXPIRED] [2:COMPLAINED] [1:CANCELORFAULT] [0:FINAL]\\n*/\\n\\nenum Condition {NOT_SET, BALANCE, OWNERSHIP} //Describes what kind of condition must be met for a conditional commit\\n\\nstruct ConditionalCommitInfo {\\n    uint256 conditionalTokenId;\\n    uint256 threshold;\\n    Condition condition;\\n    address gateAddress;\\n    bool registerConditionalCommit;\\n}\\n\\nuint8 constant ONE = 1;\\n\\nstruct VoucherDetails {\\n    uint256 tokenIdSupply;\\n    uint256 tokenIdVoucher;\\n    address issuer;\\n    address holder;\\n    uint256 price;\\n    uint256 depositSe;\\n    uint256 depositBu;\\n    PaymentMethod paymentMethod;\\n    VoucherStatus currStatus;\\n}\\n\\nstruct VoucherStatus {\\n    address seller;\\n    uint8 status;\\n    bool isPaymentReleased;\\n    bool isDepositsReleased;\\n    DepositsReleased depositReleased;\\n    uint256 complainPeriodStart;\\n    uint256 cancelFaultPeriodStart;\\n}\\n\\nstruct DepositsReleased {\\n    uint8 status;\\n    uint248 releasedAmount;\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Committed state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateCommitted(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(0, VoucherState.COMMIT);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in RedemptionSigned state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRedemptionSigned(uint8 _status)\\n    pure\\n    returns (bool)\\n{\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REDEEM);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Refunded state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateRefunded(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.REFUND);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks whether a voucher is in Expired state.\\n    * @param _status current status of a voucher.\\n    */\\nfunction isStateExpired(uint8 _status) pure returns (bool) {\\n    return _status == determineStatus(determineStatus(0, VoucherState.COMMIT), VoucherState.EXPIRE);\\n}\\n\\n/**\\n    * @notice Based on its lifecycle, voucher can have many different statuses. Checks the current status a voucher is at.\\n    * @param _status current status of a voucher.\\n    * @param _idx status to compare.\\n    */\\nfunction isStatus(uint8 _status, VoucherState _idx) pure returns (bool) {\\n    return (_status >> uint8(_idx)) & ONE == 1;\\n}\\n\\n/**\\n    * @notice Set voucher status.\\n    * @param _status previous status.\\n    * @param _changeIdx next status.\\n    */\\nfunction determineStatus(uint8 _status, VoucherState _changeIdx)\\n    pure\\n    returns (uint8)\\n{\\n    return _status | (ONE << uint8(_changeIdx));\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_conditionalToken\",\"type\":\"address\"},{\"internalType\":\"enum Gate.TokenType\",\"name\":\"_conditionalTokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bosonRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogBosonRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_conditionalToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum Gate.TokenType\",\"name\":\"_conditionalTokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogConditionalContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"LogUserVoucherDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_conditionalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Condition\",\"name\":\"_condition\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"LogVoucherSetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getConditionalCommitInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Condition\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConditionalTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum Gate.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"conditionalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"enum Condition\",\"name\":\"condition\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"gateAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"registerConditionalCommit\",\"type\":\"bool\"}],\"internalType\":\"struct ConditionalCommitInfo\",\"name\":\"_conditionalCommitInfo\",\"type\":\"tuple\"}],\"name\":\"registerVoucherSetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"}],\"name\":\"setBosonRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_conditionalToken\",\"type\":\"address\"},{\"internalType\":\"enum Gate.TokenType\",\"name\":\"_conditionalTokenType\",\"type\":\"uint8\"}],\"name\":\"setConditionalTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gate", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a393aef6dbcd7e7088acf323f9d28b093b9ab5a000000000000000000000000bad188ec8b4e168df2a39c462a7293955ef04bf80000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}