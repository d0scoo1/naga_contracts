{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ChonkyMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {UintUtils} from \\\"@solidstate/contracts/utils/UintUtils.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {ChonkyGenomeLib} from \\\"./lib/ChonkyGenomeLib.sol\\\";\\nimport {ChonkyAttributes} from \\\"./ChonkyAttributes.sol\\\";\\nimport {ChonkySet} from \\\"./ChonkySet.sol\\\";\\n\\nimport {IChonkyMetadata} from \\\"./interface/IChonkyMetadata.sol\\\";\\nimport {IChonkySet} from \\\"./interface/IChonkySet.sol\\\";\\n\\ncontract ChonkyMetadata is IChonkyMetadata {\\n    using UintUtils for uint256;\\n\\n    function buildTokenURI(\\n        uint256 id,\\n        uint256 genomeId,\\n        uint256 genome,\\n        string memory CID,\\n        address chonkyAttributes,\\n        address chonkySet\\n    ) public pure returns (string memory) {\\n        string\\n            memory description = \\\"A collection of 7777 mischievous Chonky's ready to wreak havoc on the ETH blockchain.\\\";\\n        string memory attributes = _buildAttributes(\\n            genome,\\n            chonkyAttributes,\\n            chonkySet\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                \\\"{\\\",\\n                                '\\\"image\\\":\\\"ipfs://',\\n                                CID,\\n                                \\\"/\\\",\\n                                _buildPaddedID(genomeId),\\n                                '.png\\\",',\\n                                '\\\"description\\\":\\\"',\\n                                description,\\n                                '\\\",',\\n                                '\\\"name\\\":\\\"Chonky',\\n                                \\\"'s #\\\",\\n                                _buildPaddedID(id),\\n                                '\\\",',\\n                                attributes,\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _buildPaddedID(uint256 id) internal pure returns (string memory) {\\n        if (id == 0) return \\\"0000\\\";\\n        if (id < 10) return string(abi.encodePacked(\\\"000\\\", id.toString()));\\n        if (id < 100) return string(abi.encodePacked(\\\"00\\\", id.toString()));\\n        if (id < 1000) return string(abi.encodePacked(\\\"0\\\", id.toString()));\\n\\n        return id.toString();\\n    }\\n\\n    ////\\n\\n    function _getBGBase(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Aqua\\\";\\n        if (id == 2) return \\\"Black\\\";\\n        if (id == 3) return \\\"Brown\\\";\\n        if (id == 4) return \\\"Dark Purple\\\";\\n        if (id == 5) return \\\"Dark Red\\\";\\n        if (id == 6) return \\\"Gold\\\";\\n        if (id == 7) return \\\"Green\\\";\\n        if (id == 8) return \\\"Green Apple\\\";\\n        if (id == 9) return \\\"Grey\\\";\\n        if (id == 10) return \\\"Ice Blue\\\";\\n        if (id == 11) return \\\"Kaki\\\";\\n        if (id == 12) return \\\"Orange\\\";\\n        if (id == 13) return \\\"Pink\\\";\\n        if (id == 14) return \\\"Purple\\\";\\n        if (id == 15) return \\\"Rainbow\\\";\\n        if (id == 16) return \\\"Red\\\";\\n        if (id == 17) return \\\"Sky Blue\\\";\\n        if (id == 18) return \\\"Yellow\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getBGRare(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"HamHam\\\";\\n        if (id == 2) return \\\"Japan\\\";\\n        if (id == 3) return \\\"Skulls\\\";\\n        if (id == 4) return \\\"Stars\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getWings(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Angel\\\";\\n        if (id == 2) return \\\"Bat\\\";\\n        if (id == 3) return \\\"Bee\\\";\\n        if (id == 4) return \\\"Crystal\\\";\\n        if (id == 5) return \\\"Devil\\\";\\n        if (id == 6) return \\\"Dragon\\\";\\n        if (id == 7) return \\\"Fairy\\\";\\n        if (id == 8) return \\\"Plant\\\";\\n        if (id == 9) return \\\"Robot\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getSkin(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Almond\\\";\\n        if (id == 2) return \\\"Aqua\\\";\\n        if (id == 3) return \\\"Blue\\\";\\n        if (id == 4) return \\\"Brown\\\";\\n        if (id == 5) return \\\"Cream\\\";\\n        if (id == 6) return \\\"Dark\\\";\\n        if (id == 7) return \\\"Dark Blue\\\";\\n        if (id == 8) return \\\"Gold\\\";\\n        if (id == 9) return \\\"Green\\\";\\n        if (id == 10) return \\\"Grey\\\";\\n        if (id == 11) return \\\"Ice\\\";\\n        if (id == 12) return \\\"Indigo\\\";\\n        if (id == 13) return \\\"Light Brown\\\";\\n        if (id == 14) return \\\"Light Purple\\\";\\n        if (id == 15) return \\\"Neon Blue\\\";\\n        if (id == 16) return \\\"Orange\\\";\\n        if (id == 17) return \\\"Pink\\\";\\n        if (id == 18) return \\\"Purple\\\";\\n        if (id == 19) return \\\"Rose White\\\";\\n        if (id == 20) return \\\"Salmon\\\";\\n        if (id == 21) return \\\"Skye Blue\\\";\\n        if (id == 22) return \\\"Special Red\\\";\\n        if (id == 23) return \\\"White\\\";\\n        if (id == 24) return \\\"Yellow\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getPattern(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"3 Dots\\\";\\n        if (id == 2) return \\\"3 Triangles\\\";\\n        if (id == 3) return \\\"Corner\\\";\\n        if (id == 4) return \\\"Dalmatian\\\";\\n        if (id == 5) return \\\"Half\\\";\\n        if (id == 6) return \\\"Tiger Stripes\\\";\\n        if (id == 7) return \\\"Triangle\\\";\\n        if (id == 8) return \\\"White Reversed V\\\";\\n        if (id == 9) return \\\"Zombie\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getPaint(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Beard\\\";\\n        if (id == 2) return \\\"Board\\\";\\n        if (id == 3) return \\\"Earrings\\\";\\n        if (id == 4) return \\\"Face Tattoo\\\";\\n        if (id == 5) return \\\"Happy Cheeks\\\";\\n        if (id == 6) return \\\"Pink Star\\\";\\n        if (id == 7) return \\\"Purple Star\\\";\\n        if (id == 8) return \\\"Scar\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getBody(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Retro Shirt\\\";\\n        if (id == 2) return \\\"Angel Wings\\\";\\n        if (id == 3) return \\\"Aqua Monster\\\";\\n        if (id == 4) return \\\"Astronaut\\\";\\n        if (id == 5) return \\\"Bag\\\";\\n        if (id == 6) return \\\"Baron Samedi\\\";\\n        if (id == 7) return \\\"Bee\\\";\\n        if (id == 8) return \\\"Black Samurai\\\";\\n        if (id == 9) return \\\"Black Wizard\\\";\\n        if (id == 10) return \\\"Blue Football\\\";\\n        if (id == 11) return \\\"Blue Parka\\\";\\n        if (id == 12) return \\\"Blue Kimono\\\";\\n        if (id == 13) return \\\"Blue Hoodie\\\";\\n        if (id == 14) return \\\"Blue Wizard\\\";\\n        if (id == 15) return \\\"Jester\\\";\\n        if (id == 16) return \\\"Bubble Tea\\\";\\n        if (id == 17) return \\\"Captain\\\";\\n        if (id == 18) return \\\"Caveman\\\";\\n        if (id == 19) return \\\"Chef\\\";\\n        if (id == 20) return \\\"Chinese Shirt\\\";\\n        if (id == 21) return \\\"Cloth Monster\\\";\\n        if (id == 22) return \\\"Color Shirt\\\";\\n        if (id == 23) return \\\"Cowboy Shirt\\\";\\n        if (id == 24) return \\\"Cyber Assassin\\\";\\n        if (id == 25) return \\\"Devil Wings\\\";\\n        if (id == 26) return \\\"Scuba\\\";\\n        if (id == 27) return \\\"Doreamon\\\";\\n        if (id == 28) return \\\"Dracula\\\";\\n        if (id == 29) return \\\"Gold Chain\\\";\\n        if (id == 30) return \\\"Green Cyber\\\";\\n        if (id == 31) return \\\"Green Parka\\\";\\n        if (id == 32) return \\\"Green Kimono\\\";\\n        if (id == 33) return \\\"Green Hoodie\\\";\\n        if (id == 34) return \\\"Hamsterdam Shirt\\\";\\n        if (id == 35) return \\\"Hazard\\\";\\n        if (id == 36) return \\\"Hiding Hamster\\\";\\n        if (id == 37) return \\\"Pink Punk Girl\\\";\\n        if (id == 38) return \\\"Japanese Worker\\\";\\n        if (id == 39) return \\\"King\\\";\\n        if (id == 40) return \\\"Leather Jacket\\\";\\n        if (id == 41) return \\\"Leaves\\\";\\n        if (id == 42) return \\\"Lobster\\\";\\n        if (id == 43) return \\\"Luffy\\\";\\n        if (id == 44) return \\\"Magenta Cyber\\\";\\n        if (id == 45) return \\\"Sailor\\\";\\n        if (id == 46) return \\\"Mario Pipe\\\";\\n        if (id == 47) return \\\"Mommy\\\";\\n        if (id == 48) return \\\"Ninja\\\";\\n        if (id == 49) return \\\"Old Grandma\\\";\\n        if (id == 50) return \\\"Orange Jumpsuit\\\";\\n        if (id == 51) return \\\"Chili\\\";\\n        if (id == 52) return \\\"Chili Fire\\\";\\n        if (id == 53) return \\\"Pharaoh\\\";\\n        if (id == 54) return \\\"Pink Football\\\";\\n        if (id == 55) return \\\"Pink Ruff\\\";\\n        if (id == 56) return \\\"Pink Jumpsuit\\\";\\n        if (id == 57) return \\\"Pink Kimono\\\";\\n        if (id == 58) return \\\"Pink Polo\\\";\\n        if (id == 59) return \\\"Pirate\\\";\\n        if (id == 60) return \\\"Plague Doctor\\\";\\n        if (id == 61) return \\\"Poncho\\\";\\n        if (id == 62) return \\\"Purple Cyber\\\";\\n        if (id == 63) return \\\"Purple Polo\\\";\\n        if (id == 64) return \\\"Mystery Hoodie\\\";\\n        if (id == 65) return \\\"Rainbow Snake\\\";\\n        if (id == 66) return \\\"Red Ruff\\\";\\n        if (id == 67) return \\\"Red Punk Girl\\\";\\n        if (id == 68) return \\\"Red Samurai\\\";\\n        if (id == 69) return \\\"Referee\\\";\\n        if (id == 70) return \\\"Robotbod\\\";\\n        if (id == 71) return \\\"Robot Cyber\\\";\\n        if (id == 72) return \\\"Rocker\\\";\\n        if (id == 73) return \\\"Roman Legionary\\\";\\n        if (id == 74) return \\\"Safari\\\";\\n        if (id == 75) return \\\"Scout\\\";\\n        if (id == 76) return \\\"Sherlock\\\";\\n        if (id == 77) return \\\"Shirt\\\";\\n        if (id == 78) return \\\"Snow Coat\\\";\\n        if (id == 79) return \\\"Sparta\\\";\\n        if (id == 80) return \\\"Steampunk\\\";\\n        if (id == 81) return \\\"Suit\\\";\\n        if (id == 82) return \\\"Tie\\\";\\n        if (id == 83) return \\\"Tire\\\";\\n        if (id == 84) return \\\"Toga\\\";\\n        if (id == 85) return \\\"Tron\\\";\\n        if (id == 86) return \\\"Valkyrie\\\";\\n        if (id == 87) return \\\"Viking\\\";\\n        if (id == 88) return \\\"Wereham\\\";\\n        if (id == 89) return \\\"White Cloak\\\";\\n        if (id == 90) return \\\"Yellow Jumpsuit\\\";\\n        if (id == 91) return \\\"Zombie\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getMouth(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Black Gas Mask Ninja\\\";\\n        if (id == 2) return \\\"Black Ninja Mask\\\";\\n        if (id == 3) return \\\"Shocked\\\";\\n        if (id == 4) return \\\"Creepy\\\";\\n        if (id == 5) return \\\"=D\\\";\\n        if (id == 6) return \\\"Drawing\\\";\\n        if (id == 7) return \\\"Duck\\\";\\n        if (id == 8) return \\\"Elegant Moustache\\\";\\n        if (id == 9) return \\\"Fire\\\";\\n        if (id == 10) return \\\"Gold Teeth\\\";\\n        if (id == 11) return \\\"Grey Futuristic Gas Mask\\\";\\n        if (id == 12) return \\\"Happy Open\\\";\\n        if (id == 13) return \\\"Goatee\\\";\\n        if (id == 14) return \\\"Honey\\\";\\n        if (id == 15) return \\\"Jack-O-Lantern\\\";\\n        if (id == 16) return \\\"Lipstick\\\";\\n        if (id == 17) return \\\"Little Moustache\\\";\\n        if (id == 18) return \\\"Luffy Smile\\\";\\n        if (id == 19) return \\\"Sanitary Mask\\\";\\n        if (id == 20) return \\\"Robot Mask\\\";\\n        if (id == 21) return \\\"Mega Happy\\\";\\n        if (id == 22) return \\\"Mega Tongue Out\\\";\\n        if (id == 23) return \\\"Meh\\\";\\n        if (id == 24) return \\\"Mexican Moustache\\\";\\n        if (id == 25) return \\\"Monster\\\";\\n        if (id == 26) return \\\"Moustache\\\";\\n        if (id == 27) return \\\"Drunk\\\";\\n        if (id == 28) return \\\"Fake Moustache\\\";\\n        if (id == 29) return \\\"Full\\\";\\n        if (id == 30) return \\\"Piece\\\";\\n        if (id == 31) return \\\"Stretch\\\";\\n        if (id == 32) return \\\"Ninja\\\";\\n        if (id == 33) return \\\"Normal\\\";\\n        if (id == 34) return \\\"Ohhhh\\\";\\n        if (id == 35) return \\\"Chili\\\";\\n        if (id == 36) return \\\"Purple Futuristic Gas Mask\\\";\\n        if (id == 37) return \\\"Red Gas Mask Ninja\\\";\\n        if (id == 38) return \\\"Red Ninja Mask\\\";\\n        if (id == 39) return \\\"Robot Mouth\\\";\\n        if (id == 40) return \\\"Scream\\\";\\n        if (id == 41) return \\\"Cigarette\\\";\\n        if (id == 42) return \\\"Smoking Pipe\\\";\\n        if (id == 43) return \\\"Square\\\";\\n        if (id == 44) return \\\"Steampunk\\\";\\n        if (id == 45) return \\\"Stitch\\\";\\n        if (id == 46) return \\\"Super Sad\\\";\\n        if (id == 47) return \\\"Thick Moustache\\\";\\n        if (id == 48) return \\\"Tongue\\\";\\n        if (id == 49) return \\\"Tongue Out\\\";\\n        if (id == 50) return \\\"Triangle\\\";\\n        if (id == 51) return \\\"Vampire\\\";\\n        if (id == 52) return \\\"Wave\\\";\\n        if (id == 53) return \\\"What\\\";\\n        if (id == 54) return \\\"YKWIM\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getEyes(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"^_^\\\";\\n        if (id == 2) return \\\">_<\\\";\\n        if (id == 3) return \\\"=_=\\\";\\n        if (id == 4) return \\\"3D\\\";\\n        if (id == 5) return \\\"Angry\\\";\\n        if (id == 6) return \\\"Button\\\";\\n        if (id == 7) return \\\"Confused\\\";\\n        if (id == 8) return \\\"Crazy\\\";\\n        if (id == 9) return \\\"Cute\\\";\\n        if (id == 10) return \\\"Cyber Glasses\\\";\\n        if (id == 11) return \\\"Cyclops\\\";\\n        if (id == 12) return \\\"Depressed\\\";\\n        if (id == 13) return \\\"Determined\\\";\\n        if (id == 14) return \\\"Diving Mask\\\";\\n        if (id == 15) return \\\"Drawing\\\";\\n        if (id == 16) return \\\"Morty\\\";\\n        if (id == 17) return \\\"Eyepatch\\\";\\n        if (id == 18) return \\\"Fake Moustache\\\";\\n        if (id == 19) return \\\"Flower Glasses\\\";\\n        if (id == 20) return \\\"Frozen\\\";\\n        if (id == 21) return \\\"Furious\\\";\\n        if (id == 22) return \\\"Gengar\\\";\\n        if (id == 23) return \\\"Glasses Depressed\\\";\\n        if (id == 24) return \\\"Goku\\\";\\n        if (id == 25) return \\\"Green Underwear\\\";\\n        if (id == 26) return \\\"Hippie\\\";\\n        if (id == 27) return \\\"Kawaii\\\";\\n        if (id == 28) return \\\"Line Glasses\\\";\\n        if (id == 29) return \\\"Looking Up\\\";\\n        if (id == 30) return \\\"Looking Up Happy\\\";\\n        if (id == 31) return \\\"Mini Sunglasses\\\";\\n        if (id == 32) return \\\"Monocle\\\";\\n        if (id == 33) return \\\"Monster\\\";\\n        if (id == 34) return \\\"Ninja\\\";\\n        if (id == 35) return \\\"Normal\\\";\\n        if (id == 36) return \\\"Not Impressed\\\";\\n        if (id == 37) return \\\"o_o\\\";\\n        if (id == 38) return \\\"Orange Underwear\\\";\\n        if (id == 39) return \\\"Pink Star Sunglasses\\\";\\n        if (id == 40) return \\\"Pissed\\\";\\n        if (id == 41) return \\\"Pixel Glasses\\\";\\n        if (id == 42) return \\\"Plague Doctor Mask\\\";\\n        if (id == 43) return \\\"Proud\\\";\\n        if (id == 44) return \\\"Raccoon\\\";\\n        if (id == 45) return \\\"Red Dot\\\";\\n        if (id == 46) return \\\"Red Star Sunglasses\\\";\\n        if (id == 47) return \\\"Robot Eyes\\\";\\n        if (id == 48) return \\\"Scared Eyes\\\";\\n        if (id == 49) return \\\"Snorkel\\\";\\n        if (id == 50) return \\\"Serious Japan\\\";\\n        if (id == 51) return \\\"Seriously\\\";\\n        if (id == 52) return \\\"Star\\\";\\n        if (id == 53) return \\\"Steampunk Glasses\\\";\\n        if (id == 54) return \\\"Sunglasses\\\";\\n        if (id == 55) return \\\"Sunglasses Triangle\\\";\\n        if (id == 56) return \\\"Surprised\\\";\\n        if (id == 57) return \\\"Thick Eyebrows\\\";\\n        if (id == 58) return \\\"Troubled\\\";\\n        if (id == 59) return \\\"UniBrow\\\";\\n        if (id == 60) return \\\"Weird\\\";\\n        if (id == 61) return \\\"X_X\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getLostKing(uint256 _id) internal pure returns (string memory) {\\n        if (_id == 1) return \\\"The Glitch King\\\";\\n        if (_id == 2) return \\\"The Gummy King\\\";\\n        if (_id == 3) return \\\"King Diamond\\\";\\n        if (_id == 4) return \\\"The King of Gold\\\";\\n        if (_id == 5) return \\\"King Unicorn\\\";\\n        if (_id == 6) return \\\"The Last King\\\";\\n        if (_id == 7) return \\\"The Monkey King\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getHonorary(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Crunchies\\\";\\n        if (id == 2) return \\\"Chuckle\\\";\\n        if (id == 3) return \\\"ChainLinkGod\\\";\\n        if (id == 4) return \\\"Crypt0n1c\\\";\\n        if (id == 5) return \\\"Bigdham\\\";\\n        if (id == 6) return \\\"Cyclopeape\\\";\\n        if (id == 7) return \\\"Elmo\\\";\\n        if (id == 8) return \\\"Caustik\\\";\\n        if (id == 9) return \\\"Churby\\\";\\n        if (id == 10) return \\\"Chonko\\\";\\n        if (id == 11) return \\\"Hamham\\\";\\n        if (id == 12) return \\\"Icebergy\\\";\\n        if (id == 13) return \\\"IronHam\\\";\\n        if (id == 14) return \\\"RatWell\\\";\\n        if (id == 15) return \\\"VangogHam\\\";\\n        if (id == 16) return \\\"Boneham\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    function _getHat(uint256 id) internal pure returns (string memory) {\\n        if (id == 1) return \\\"Retro\\\";\\n        if (id == 2) return \\\"Aqua Monster\\\";\\n        if (id == 3) return \\\"Astronaut\\\";\\n        if (id == 4) return \\\"Baby Hamster\\\";\\n        if (id == 5) return \\\"Baron Samedi\\\";\\n        if (id == 6) return \\\"Bear Skin\\\";\\n        if (id == 7) return \\\"Bee\\\";\\n        if (id == 8) return \\\"Beanie\\\";\\n        if (id == 9) return \\\"Beret\\\";\\n        if (id == 10) return \\\"Biker Helmet\\\";\\n        if (id == 11) return \\\"Black Afro\\\";\\n        if (id == 12) return \\\"Black Hair JB\\\";\\n        if (id == 13) return \\\"Black Kabuki Mask\\\";\\n        if (id == 14) return \\\"Black Kabuto\\\";\\n        if (id == 15) return \\\"Black Magician\\\";\\n        if (id == 16) return \\\"Black Toupee\\\";\\n        if (id == 17) return \\\"Bolts\\\";\\n        if (id == 18) return \\\"Jester\\\";\\n        if (id == 19) return \\\"Brain\\\";\\n        if (id == 20) return \\\"Brown Hair JB\\\";\\n        if (id == 21) return \\\"Candle\\\";\\n        if (id == 22) return \\\"Captain\\\";\\n        if (id == 23) return \\\"Cheese\\\";\\n        if (id == 24) return \\\"Chef\\\";\\n        if (id == 25) return \\\"Cloth Monster\\\";\\n        if (id == 26) return \\\"Cone\\\";\\n        if (id == 27) return \\\"Cowboy\\\";\\n        if (id == 28) return \\\"Crown\\\";\\n        if (id == 29) return \\\"Devil Horns\\\";\\n        if (id == 30) return \\\"Dracula\\\";\\n        if (id == 31) return \\\"Duck\\\";\\n        if (id == 32) return \\\"Elvis\\\";\\n        if (id == 33) return \\\"Fish\\\";\\n        if (id == 34) return \\\"Fan\\\";\\n        if (id == 35) return \\\"Fire\\\";\\n        if (id == 36) return \\\"Fluffy Beanie\\\";\\n        if (id == 37) return \\\"Pigskin\\\";\\n        if (id == 38) return \\\"Futuristic Crown\\\";\\n        if (id == 39) return \\\"Golden Horns\\\";\\n        if (id == 40) return \\\"Green Fire\\\";\\n        if (id == 41) return \\\"Green Knot\\\";\\n        if (id == 42) return \\\"Green Punk\\\";\\n        if (id == 43) return \\\"Green Visor\\\";\\n        if (id == 44) return \\\"Halo\\\";\\n        if (id == 45) return \\\"Headband\\\";\\n        if (id == 46) return \\\"Ice\\\";\\n        if (id == 47) return \\\"Injury\\\";\\n        if (id == 48) return \\\"Kabuto\\\";\\n        if (id == 49) return \\\"Leaf\\\";\\n        if (id == 50) return \\\"Lion Head\\\";\\n        if (id == 51) return \\\"Long Hair Front\\\";\\n        if (id == 52) return \\\"Magician\\\";\\n        if (id == 53) return \\\"Mario Flower\\\";\\n        if (id == 54) return \\\"Mini Cap\\\";\\n        if (id == 55) return \\\"Ninja Band\\\";\\n        if (id == 56) return \\\"Mushroom\\\";\\n        if (id == 57) return \\\"Ninja\\\";\\n        if (id == 58) return \\\"Noodle Cup\\\";\\n        if (id == 59) return \\\"Octopus\\\";\\n        if (id == 60) return \\\"Old Lady\\\";\\n        if (id == 61) return \\\"Pancakes\\\";\\n        if (id == 62) return \\\"Paper Hat\\\";\\n        if (id == 63) return \\\"Pharaoh\\\";\\n        if (id == 64) return \\\"Pink Exploding Hair\\\";\\n        if (id == 65) return \\\"Pink Hair Girl\\\";\\n        if (id == 66) return \\\"Pink Mini Cap\\\";\\n        if (id == 67) return \\\"Pink Punk\\\";\\n        if (id == 68) return \\\"Pink Visor\\\";\\n        if (id == 69) return \\\"Pirate\\\";\\n        if (id == 70) return \\\"Plague Doctor\\\";\\n        if (id == 71) return \\\"Plant\\\";\\n        if (id == 72) return \\\"Punk Helmet\\\";\\n        if (id == 73) return \\\"Purple Mini Cap\\\";\\n        if (id == 74) return \\\"Purple Top Hat\\\";\\n        if (id == 75) return \\\"Rainbow Afro\\\";\\n        if (id == 76) return \\\"Rainbow Ice Cream\\\";\\n        if (id == 77) return \\\"Red Black Hair Girl\\\";\\n        if (id == 78) return \\\"Red Knot\\\";\\n        if (id == 79) return \\\"Red Punk\\\";\\n        if (id == 80) return \\\"Red Top Hat\\\";\\n        if (id == 81) return \\\"Robot Head\\\";\\n        if (id == 82) return \\\"Roman Legionary\\\";\\n        if (id == 83) return \\\"Safari\\\";\\n        if (id == 84) return \\\"Sherlock\\\";\\n        if (id == 85) return \\\"Sombrero\\\";\\n        if (id == 86) return \\\"Sparta\\\";\\n        if (id == 87) return \\\"Steampunk\\\";\\n        if (id == 88) return \\\"Straw\\\";\\n        if (id == 89) return \\\"Straw Hat\\\";\\n        if (id == 90) return \\\"Teapot\\\";\\n        if (id == 91) return \\\"Tin Hat\\\";\\n        if (id == 92) return \\\"Toupee\\\";\\n        if (id == 93) return \\\"Valkyrie\\\";\\n        if (id == 94) return \\\"Viking\\\";\\n        if (id == 95) return \\\"White Kabuki Mask\\\";\\n        if (id == 96) return \\\"Yellow Exploding Hair\\\";\\n\\n        return \\\"\\\";\\n    }\\n\\n    ////\\n\\n    function _buildAttributes(\\n        uint256 genome,\\n        address chonkyAttributes,\\n        address chonkySet\\n    ) internal pure returns (string memory result) {\\n        uint256[12] memory attributes = ChonkyGenomeLib.parseGenome(genome);\\n\\n        bytes memory buffer = abi.encodePacked(\\n            '\\\"attributes\\\":[',\\n            '{\\\"trait_type\\\":\\\"Background\\\",',\\n            '\\\"value\\\":\\\"',\\n            _getBGBase(attributes[0]),\\n            '\\\"}'\\n        );\\n\\n        if (attributes[1] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ', {\\\"trait_type\\\":\\\"Rare Background\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getBGRare(attributes[1]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[2] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Wings\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getWings(attributes[2]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[3] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Skin\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getSkin(attributes[3]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[4] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Pattern\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getPattern(attributes[4]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[5] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Paint\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getPaint(attributes[5]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[6] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Body\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getBody(attributes[6]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[7] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Mouth\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getMouth(attributes[7]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[8] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Eyes\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getEyes(attributes[8]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[9] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Hat\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getHat(attributes[9]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[10] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Lost King\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getLostKing(attributes[10]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        if (attributes[11] > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Honorary\\\",',\\n                '\\\"value\\\":\\\"',\\n                _getHonorary(attributes[11]),\\n                '\\\"}'\\n            );\\n        }\\n\\n        uint256 setId = IChonkySet(chonkySet).getSetId(genome);\\n\\n        if (setId > 0) {\\n            buffer = abi.encodePacked(\\n                buffer,\\n                ',{\\\"trait_type\\\":\\\"Full Set\\\",',\\n                '\\\"value\\\":\\\"',\\n                IChonkySet(chonkySet).getSetFromId(setId),\\n                '\\\"}'\\n            );\\n        }\\n\\n        uint256[4] memory attributeValues = ChonkyAttributes(chonkyAttributes)\\n            .getAttributeValues(attributes, setId);\\n\\n        buffer = abi.encodePacked(\\n            buffer,\\n            ',{\\\"trait_type\\\":\\\"Brain\\\",',\\n            '\\\"value\\\":',\\n            attributeValues[0].toString(),\\n            \\\"}\\\"\\n        );\\n\\n        buffer = abi.encodePacked(\\n            buffer,\\n            ',{\\\"trait_type\\\":\\\"Cute\\\",',\\n            '\\\"value\\\":',\\n            attributeValues[1].toString(),\\n            \\\"}\\\"\\n        );\\n\\n        buffer = abi.encodePacked(\\n            buffer,\\n            ',{\\\"trait_type\\\":\\\"Power\\\",',\\n            '\\\"value\\\":',\\n            attributeValues[2].toString(),\\n            \\\"}\\\"\\n        );\\n\\n        buffer = abi.encodePacked(\\n            buffer,\\n            ',{\\\"trait_type\\\":\\\"Wicked\\\",',\\n            '\\\"value\\\":',\\n            attributeValues[3].toString(),\\n            \\\"}\\\"\\n        );\\n\\n        return string(abi.encodePacked(buffer, \\\"]\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UintUtils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ChonkyGenomeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ChonkyGenomeLib {\\n    function parseGenome(uint256 _genome)\\n        internal\\n        pure\\n        returns (uint256[12] memory result)\\n    {\\n        assembly {\\n            mstore(result, sub(_genome, shl(5, shr(5, _genome))))\\n\\n            mstore(\\n                add(result, 0x20),\\n                sub(shr(5, _genome), shl(3, shr(8, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0x40),\\n                sub(shr(8, _genome), shl(4, shr(12, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0x60),\\n                sub(shr(12, _genome), shl(5, shr(17, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0x80),\\n                sub(shr(17, _genome), shl(4, shr(21, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0xA0),\\n                sub(shr(21, _genome), shl(4, shr(25, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0xC0),\\n                sub(shr(25, _genome), shl(7, shr(32, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0xE0),\\n                sub(shr(32, _genome), shl(6, shr(38, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0x100),\\n                sub(shr(38, _genome), shl(6, shr(44, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0x120),\\n                sub(shr(44, _genome), shl(7, shr(51, _genome)))\\n            )\\n\\n            mstore(\\n                add(result, 0x140),\\n                sub(shr(51, _genome), shl(3, shr(54, _genome)))\\n            )\\n\\n            mstore(add(result, 0x160), shr(54, _genome))\\n        }\\n    }\\n\\n    function formatGenome(uint256[12] memory _attributes)\\n        internal\\n        pure\\n        returns (uint256 genome)\\n    {\\n        genome =\\n            (_attributes[0]) +\\n            (_attributes[1] << 5) +\\n            (_attributes[2] << 8) +\\n            (_attributes[3] << 12) +\\n            (_attributes[4] << 17) +\\n            (_attributes[5] << 21) +\\n            (_attributes[6] << 25) +\\n            (_attributes[7] << 32) +\\n            (_attributes[8] << 38) +\\n            (_attributes[9] << 44) +\\n            (_attributes[10] << 51) +\\n            (_attributes[11] << 54);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChonkyAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IChonkyAttributes} from \\\"./interface/IChonkyAttributes.sol\\\";\\n\\ncontract ChonkyAttributes is IChonkyAttributes {\\n    function _getBodyAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 59) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 60) return (IChonkyAttributes.AttributeType.WICKED, 9);\\n        if (_id == 61) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 62) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 63) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 64) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 65) return (IChonkyAttributes.AttributeType.CUTE, 10);\\n        if (_id == 66) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 67) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 68) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 69) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 70) return (IChonkyAttributes.AttributeType.BRAIN, 10);\\n        if (_id == 71) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 72) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 73) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 74) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 75) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 76) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 77) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 78) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 79) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 80) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 81) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 82) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 83) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 84) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 85) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 86) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 87) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 88) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 89) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 90) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 91) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getEyesAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.WICKED, 9);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 59) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 60) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 61) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getMouthAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.NONE, 0);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getHatAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.WICKED, 9);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.WICKED, 10);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.WICKED, 7);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.POWER, 10);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.WICKED, 6);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.BRAIN, 7);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.BRAIN, 4);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.CUTE, 8);\\n        if (_id == 59) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 60) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 61) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 62) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 63) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 64) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 65) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 66) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 67) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 68) return (IChonkyAttributes.AttributeType.BRAIN, 6);\\n        if (_id == 69) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 70) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 71) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 72) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 73) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 74) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 75) return (IChonkyAttributes.AttributeType.CUTE, 10);\\n        if (_id == 76) return (IChonkyAttributes.AttributeType.CUTE, 9);\\n        if (_id == 77) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 78) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 79) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 80) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 81) return (IChonkyAttributes.AttributeType.BRAIN, 10);\\n        if (_id == 82) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 83) return (IChonkyAttributes.AttributeType.POWER, 8);\\n        if (_id == 84) return (IChonkyAttributes.AttributeType.BRAIN, 8);\\n        if (_id == 85) return (IChonkyAttributes.AttributeType.POWER, 6);\\n        if (_id == 86) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 87) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n        if (_id == 88) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 89) return (IChonkyAttributes.AttributeType.POWER, 7);\\n        if (_id == 90) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 91) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 92) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 93) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 94) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 95) return (IChonkyAttributes.AttributeType.CUTE, 10);\\n        if (_id == 96) return (IChonkyAttributes.AttributeType.POWER, 2);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getWingsAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.CUTE, 6);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.WICKED, 8);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.CUTE, 4);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.POWER, 9);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.WICKED, 4);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.POWER, 4);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.CUTE, 7);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.BRAIN, 9);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _getSetAttribute(uint256 _id)\\n        internal\\n        pure\\n        returns (IChonkyAttributes.AttributeType, uint256)\\n    {\\n        if (_id == 0) return (IChonkyAttributes.AttributeType.NONE, 0);\\n\\n        if (_id == 1) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 2) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 3) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 4) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 5) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 6) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 7) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 8) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 9) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 10) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 11) return (IChonkyAttributes.AttributeType.BRAIN, 1);\\n        if (_id == 12) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 13) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 14) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 15) return (IChonkyAttributes.AttributeType.BRAIN, 2);\\n        if (_id == 16) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 17) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 18) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 19) return (IChonkyAttributes.AttributeType.WICKED, 1);\\n        if (_id == 20) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 21) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 22) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 23) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 24) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 25) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 26) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 27) return (IChonkyAttributes.AttributeType.WICKED, 2);\\n        if (_id == 28) return (IChonkyAttributes.AttributeType.CUTE, 2);\\n        if (_id == 29) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 30) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 31) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 32) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 33) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 34) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 35) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 36) return (IChonkyAttributes.AttributeType.POWER, 1);\\n        if (_id == 37) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 38) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 39) return (IChonkyAttributes.AttributeType.WICKED, 5);\\n        if (_id == 40) return (IChonkyAttributes.AttributeType.CUTE, 5);\\n        if (_id == 41) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 42) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 43) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 44) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 45) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 46) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 47) return (IChonkyAttributes.AttributeType.POWER, 5);\\n        if (_id == 48) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 49) return (IChonkyAttributes.AttributeType.BRAIN, 5);\\n        if (_id == 50) return (IChonkyAttributes.AttributeType.CUTE, 3);\\n        if (_id == 51) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 52) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 53) return (IChonkyAttributes.AttributeType.CUTE, 1);\\n        if (_id == 54) return (IChonkyAttributes.AttributeType.BRAIN, 3);\\n        if (_id == 55) return (IChonkyAttributes.AttributeType.POWER, 3);\\n        if (_id == 56) return (IChonkyAttributes.AttributeType.POWER, 2);\\n        if (_id == 57) return (IChonkyAttributes.AttributeType.WICKED, 3);\\n        if (_id == 58) return (IChonkyAttributes.AttributeType.CUTE, 0);\\n\\n        return (IChonkyAttributes.AttributeType.NONE, 0);\\n    }\\n\\n    function _addAttributeValue(\\n        uint256[4] memory _array,\\n        uint256 _value,\\n        IChonkyAttributes.AttributeType _valueType\\n    ) internal pure returns (uint256[4] memory) {\\n        if (_valueType != IChonkyAttributes.AttributeType.NONE) {\\n            _array[uint256(_valueType) - 1] += _value;\\n        }\\n\\n        return _array;\\n    }\\n\\n    function getAttributeValues(uint256[12] memory _attributes, uint256 _setId)\\n        public\\n        pure\\n        returns (uint256[4] memory result)\\n    {\\n        uint256 value;\\n        IChonkyAttributes.AttributeType valueType;\\n\\n        (valueType, value) = _getWingsAttribute(_attributes[2]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getBodyAttribute(_attributes[6]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getMouthAttribute(_attributes[7]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getEyesAttribute(_attributes[8]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getHatAttribute(_attributes[9]);\\n        result = _addAttributeValue(result, value, valueType);\\n\\n        (valueType, value) = _getSetAttribute(_setId);\\n        result = _addAttributeValue(result, value, valueType);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChonkySet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IChonkySet} from \\\"./interface/IChonkySet.sol\\\";\\n\\ncontract ChonkySet is IChonkySet {\\n    function getSetId(uint256 _genome) external pure returns (uint256) {\\n        return _getSetId(_genome);\\n    }\\n\\n    function getSetFromGenome(uint256 _genome)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        return _getSetFromId(_getSetId(_genome));\\n    }\\n\\n    function getSetFromId(uint256 _setId)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        return _getSetFromId(_setId);\\n    }\\n\\n    function _getSetId(uint256 _genome) internal pure returns (uint256) {\\n        if (_genome == 0x025e716c06d02c) return 1;\\n        if (_genome == 0x02c8cca802518f) return 2;\\n        if (_genome == 0x38e108027089) return 3;\\n        if (_genome == 0x51ad0c0d7065) return 4;\\n        if (_genome == 0x704e0ea50332) return 5;\\n        if (_genome == 0xec821004d052) return 6;\\n        if (_genome == 0x0398a060045048) return 7;\\n        if (_genome == 0x05836b2008d04c) return 8;\\n        if (_genome == 0x016daf22043029) return 9;\\n        if (_genome == 0x635b242d4063) return 10;\\n        if (_genome == 0x018ac826022089) return 11;\\n        if (_genome == 0x035edd5c064089) return 12;\\n        if (_genome == 0x0190002a000049) return 13;\\n        if (_genome == 0x01bcda2e0e8083) return 14;\\n        if (_genome == 0x028e4d4608d068) return 15;\\n        if (_genome == 0x0402a45842e02c) return 16;\\n        if (_genome == 0x04f16530657022) return 17;\\n        if (_genome == 0x013bd48e40f02e) return 18;\\n        if (_genome == 0xf15712212084) return 19;\\n        if (_genome == 0x01de0966016582) return 20;\\n        if (_genome == 0x03b39e3407208f) return 21;\\n        if (_genome == 0x0228cc3608304a) return 22;\\n        if (_genome == 0x01eb7338017065) return 23;\\n        if (_genome == 0x055e587a084032) return 24;\\n        if (_genome == 0x04a81aa20e3029) return 25;\\n        if (_genome == 0x8dca3a044022) return 26;\\n        if (_genome == 0x01504f2c07006c) return 27;\\n        if (_genome == 0x02d6224c10304a) return 28;\\n        if (_genome == 0x012d101e0b2084) return 29;\\n        if (_genome == 0x01c7954e028086) return 30;\\n        if (_genome == 0x251906042067) return 31;\\n        if (_genome == 0x059e125704d065) return 32;\\n        if (_genome == 0x0510008c000049) return 33;\\n        if (_genome == 0x038974520c408b) return 34;\\n        if (_genome == 0x0326df280cd086) return 35;\\n        if (_genome == 0x03ca296204d050) return 36;\\n        if (_genome == 0x03ff216a058092) return 37;\\n        if (_genome == 0x04545a76104062) return 38;\\n        if (_genome == 0x046a8078041067) return 39;\\n        if (_genome == 0x04b6d18200508f) return 40;\\n        if (_genome == 0x030ca68808d042) return 41;\\n        if (_genome == 0x168502c5802f) return 42;\\n        if (_genome == 0x052e28920ea089) return 43;\\n        if (_genome == 0x05380894022085) return 44;\\n        if (_genome == 0x054cea9808d023) return 45;\\n        if (_genome == 0x02ea56160eb08a) return 46;\\n        if (_genome == 0x0560009e02a082) return 47;\\n        if (_genome == 0x023f63680b0090) return 48;\\n        if (_genome == 0x057d6ca0044983) return 49;\\n        if (_genome == 0x01fc6ba6aa502d) return 50;\\n        if (_genome == 0x031b320a00104b) return 51;\\n        if (_genome == 0x05bd27480ea089) return 52;\\n        if (_genome == 0x40db5e110028) return 53;\\n        if (_genome == 0x02b157aa0eb021) return 54;\\n        if (_genome == 0x05dae8aca25192) return 55;\\n        if (_genome == 0x05e568ae048023) return 56;\\n        if (_genome == 0x011875b6129067) return 57;\\n\\n        return 0;\\n    }\\n\\n    function _getSetFromId(uint256 _id) internal pure returns (string memory) {\\n        if (_id == 1) return \\\"American Football\\\";\\n        if (_id == 2) return \\\"Angel\\\";\\n        if (_id == 3) return \\\"Astronaut\\\";\\n        if (_id == 4) return \\\"Baron Samedi\\\";\\n        if (_id == 5) return \\\"Bee\\\";\\n        if (_id == 6) return \\\"Black Kabuto\\\";\\n        if (_id == 7) return \\\"Blue Ninja\\\";\\n        if (_id == 8) return \\\"Bubble Tea\\\";\\n        if (_id == 9) return \\\"Captain\\\";\\n        if (_id == 10) return \\\"Caveman\\\";\\n        if (_id == 11) return \\\"Chef\\\";\\n        if (_id == 12) return \\\"Chonky Plant\\\";\\n        if (_id == 13) return \\\"Cloth Monster\\\";\\n        if (_id == 14) return \\\"Cowboy\\\";\\n        if (_id == 15) return \\\"Crazy Scientist\\\";\\n        if (_id == 16) return \\\"Cyber Hacker\\\";\\n        if (_id == 17) return \\\"Cyberpunk\\\";\\n        if (_id == 18) return \\\"Cyborg\\\";\\n        if (_id == 19) return \\\"Dark Magician\\\";\\n        if (_id == 20) return \\\"Devil\\\";\\n        if (_id == 21) return \\\"Diver\\\";\\n        if (_id == 22) return \\\"Doraemon\\\";\\n        if (_id == 23) return \\\"Dracula\\\";\\n        if (_id == 24) return \\\"Ese Sombrero\\\";\\n        if (_id == 25) return \\\"Gentleman\\\";\\n        if (_id == 26) return \\\"Golden Tooth\\\";\\n        if (_id == 27) return \\\"Jack-O-Lantern\\\";\\n        if (_id == 28) return \\\"Japanese Drummer\\\";\\n        if (_id == 29) return \\\"Jester\\\";\\n        if (_id == 30) return \\\"King\\\";\\n        if (_id == 31) return \\\"Lake Monster\\\";\\n        if (_id == 32) return \\\"Luffy\\\";\\n        if (_id == 33) return \\\"Mr Roboto\\\";\\n        if (_id == 34) return \\\"Mushroom Guy\\\";\\n        if (_id == 35) return \\\"New Year Outfit\\\";\\n        if (_id == 36) return \\\"Old Lady\\\";\\n        if (_id == 37) return \\\"Pharaoh\\\";\\n        if (_id == 38) return \\\"Pirate\\\";\\n        if (_id == 39) return \\\"Plague Doctor\\\";\\n        if (_id == 40) return \\\"Rainbow Love\\\";\\n        if (_id == 41) return \\\"Red Samurai\\\";\\n        if (_id == 42) return \\\"Retro\\\";\\n        if (_id == 43) return \\\"Roman\\\";\\n        if (_id == 44) return \\\"Safari Hunter\\\";\\n        if (_id == 45) return \\\"Sherlock\\\";\\n        if (_id == 46) return \\\"Snow Dude\\\";\\n        if (_id == 47) return \\\"Sparta\\\";\\n        if (_id == 48) return \\\"Spicy Man\\\";\\n        if (_id == 49) return \\\"Steampunk\\\";\\n        if (_id == 50) return \\\"Swimmer\\\";\\n        if (_id == 51) return \\\"Tanuki\\\";\\n        if (_id == 52) return \\\"Tin Man\\\";\\n        if (_id == 53) return \\\"Tired Dad\\\";\\n        if (_id == 54) return \\\"Tron Boy\\\";\\n        if (_id == 55) return \\\"Valkyrie\\\";\\n        if (_id == 56) return \\\"Viking\\\";\\n        if (_id == 57) return \\\"Zombie\\\";\\n\\n        return \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IChonkyMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChonkyMetadata {\\n    function buildTokenURI(\\n        uint256 id,\\n        uint256 genomeId,\\n        uint256 genome,\\n        string memory CID,\\n        address chonkySet,\\n        address chonkyAttributes\\n    ) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IChonkySet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChonkySet {\\n    function getSetId(uint256 _genome) external pure returns (uint256);\\n\\n    function getSetFromGenome(uint256 _genome)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    function getSetFromId(uint256 _setId) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IChonkyAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChonkyAttributes {\\n    enum AttributeType {\\n        NONE,\\n        BRAIN,\\n        CUTE,\\n        POWER,\\n        WICKED\\n    }\\n\\n    function getAttributeValues(uint256[12] memory _attributes, uint256 _setId)\\n        external\\n        pure\\n        returns (uint256[4] memory result);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genomeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genome\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"CID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"chonkyAttributes\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chonkySet\",\"type\":\"address\"}],\"name\":\"buildTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ChonkyMetadata", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}