{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GTCStaking.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4 <0.9.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror INVALID_AMOUNT();\\nerror NOT_OWNER();\\nerror TOKENS_ALREADY_RELAEASED();\\n\\n/**\\n@title GTCStaking Contract\\n@notice Vote on gitcoin grants powered by conviction voting off-chain by staking your gtc.\\n*/\\ncontract GTCStaking {\\n    event VoteCasted(\\n        uint56 voteId,\\n        address indexed voter,\\n        uint152 amount,\\n        uint48 grantId\\n    );\\n\\n    event TokensReleased(\\n        uint56 voteId,\\n        address indexed voter,\\n        uint152 amount,\\n        uint48 grantId\\n    );\\n\\n    /// @notice gtc token contract instance.\\n    IERC20 immutable public gtcToken;\\n\\n    /// @notice vote struct array.\\n    Vote[] public votes;\\n\\n    /// @notice mapping which tracks the votes for a particular user.\\n    mapping(address => uint56[]) public voterToVoteIds;\\n\\n    /// @notice Vote struct.\\n    struct Vote {\\n        bool released;\\n        address voter;\\n        uint152 amount;\\n        uint48 grantId;\\n        uint56 voteId;\\n    }\\n\\n    /// @notice BatchVote struct.\\n    struct BatchVoteParam {\\n        uint48 grantId;\\n        uint152 amount;\\n    }\\n\\n    /**\\n    @dev Constructor.\\n    @param tokenAddress gtc token address.\\n    */\\n    constructor(address tokenAddress) {\\n        gtcToken = IERC20(tokenAddress);\\n    }\\n\\n    /**\\n    @dev Get Current Timestamp.\\n    @return current timestamp.\\n    */\\n    function currentTimestamp() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n    @dev Checks if tokens are locked or not.\\n    @return status of the tokens.\\n    */\\n    function areTokensLocked(uint56 _voteId) external view returns (bool) {\\n        return !votes[_voteId].released;\\n    }\\n\\n    /**\\n    @dev Vote Info for a user.\\n    @param _voter address of voter\\n    @return Vote struct for the particular user id.\\n    */\\n    function getVotesForAddress(address _voter)\\n        external\\n        view\\n        returns (Vote[] memory)\\n    {\\n        uint56[] memory voteIds = voterToVoteIds[_voter];\\n        Vote[] memory votesForAddress = new Vote[](voteIds.length);\\n        for (uint256 i = 0; i < voteIds.length; i++) {\\n            votesForAddress[i] = votes[voteIds[i]];\\n        }\\n        return votesForAddress;\\n    }\\n\\n    /**\\n    @dev Stake and get Voting rights.\\n    @param _grantId gitcoin grant id.\\n    @param _amount amount of tokens to lock.\\n    */\\n    function _vote(uint48 _grantId, uint152 _amount) internal {\\n        if (_amount == 0) {\\n            revert INVALID_AMOUNT();\\n        }\\n\\n        gtcToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        uint56 voteId = uint56(votes.length);\\n\\n        votes.push(\\n            Vote({\\n                voteId: voteId,\\n                voter: msg.sender,\\n                amount: _amount,\\n                grantId: _grantId,\\n                released: false\\n            })\\n        );\\n\\n        voterToVoteIds[msg.sender].push(voteId);\\n\\n        emit VoteCasted(voteId, msg.sender, _amount, _grantId);\\n    }\\n\\n    /**\\n    @dev Stake and get Voting rights in barch.\\n    @param _batch array of struct to stake into multiple grants.\\n    */\\n    function vote(BatchVoteParam[] calldata _batch) external {\\n        for (uint256 i = 0; i < _batch.length; i++) {\\n            _vote(_batch[i].grantId, _batch[i].amount);\\n        }\\n    }\\n\\n    /**\\n    @dev Release tokens and give up votes.\\n    @param _voteIds array of vote ids in order to release tokens.\\n    */\\n    function releaseTokens(uint256[] calldata _voteIds) external {\\n        for (uint256 i = 0; i < _voteIds.length; i++) {\\n            if (votes[_voteIds[i]].voter != msg.sender) {\\n                revert NOT_OWNER();\\n            }\\n            if (votes[_voteIds[i]].released) {\\n                // UI can send the same vote multiple times, ignore it\\n                continue;\\n            }\\n            votes[_voteIds[i]].released = true;\\n            gtcToken.transfer(msg.sender, votes[_voteIds[i]].amount);\\n\\n            emit TokensReleased(uint56(_voteIds[i]), msg.sender, votes[_voteIds[i]].amount, votes[_voteIds[i]]\\n                .grantId);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INVALID_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_OWNER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint56\",\"name\":\"voteId\",\"type\":\"uint56\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint152\",\"name\":\"amount\",\"type\":\"uint152\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"grantId\",\"type\":\"uint48\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint56\",\"name\":\"voteId\",\"type\":\"uint56\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint152\",\"name\":\"amount\",\"type\":\"uint152\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"grantId\",\"type\":\"uint48\"}],\"name\":\"VoteCasted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"_voteId\",\"type\":\"uint56\"}],\"name\":\"areTokensLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVotesForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint152\",\"name\":\"amount\",\"type\":\"uint152\"},{\"internalType\":\"uint48\",\"name\":\"grantId\",\"type\":\"uint48\"},{\"internalType\":\"uint56\",\"name\":\"voteId\",\"type\":\"uint56\"}],\"internalType\":\"struct GTCStaking.Vote[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gtcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_voteIds\",\"type\":\"uint256[]\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"grantId\",\"type\":\"uint48\"},{\"internalType\":\"uint152\",\"name\":\"amount\",\"type\":\"uint152\"}],\"internalType\":\"struct GTCStaking.BatchVoteParam[]\",\"name\":\"_batch\",\"type\":\"tuple[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterToVoteIds\",\"outputs\":[{\"internalType\":\"uint56\",\"name\":\"\",\"type\":\"uint56\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint152\",\"name\":\"amount\",\"type\":\"uint152\"},{\"internalType\":\"uint48\",\"name\":\"grantId\",\"type\":\"uint48\"},{\"internalType\":\"uint56\",\"name\":\"voteId\",\"type\":\"uint56\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GTCStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000de30da39c46104798bb5aa3fe8b9e0e1f348163f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}