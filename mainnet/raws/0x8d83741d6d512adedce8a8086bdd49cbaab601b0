{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n \r\n//Safe Math Interface\r\n \r\ncontract SafeMath {\r\n \r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n \r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n \r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n \r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n \r\n \r\n//ERC Token Standard #20 Interface\r\n \r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n \r\n \r\n//Contract function to receive approval and execute function in one call\r\n \r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n \r\n//agsilverdojo coin token contract\r\n \r\ncontract safeMath is ERC20Interface, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n \r\n     constructor() public {\r\n        symbol = \"AGSD\";\r\n        name = \"AGSILVERDOJO COIN\";\r\n        decimals = 18;\r\n        _totalSupply  = 1000000000000000000000000000;\r\n        balances[0x43F86Fc41205A55a5a71a68350fe24d1464BA91b] = _totalSupply;\r\n        emit Transfer(address(0),0x43F86Fc41205A55a5a71a68350fe24d1464BA91b, _totalSupply);\r\n    }\r\n \r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n \r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n \r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n \r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n \r\n    function () public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n\r\n   * @dev Throws if called by any account other than the owner.\r\n\r\n   */\r\n\r\n  modifier onlyOwner() {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\r\n   * @param newOwner The address to transfer ownership to.\r\n\r\n   */\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n    require(newOwner != address(0));\r\n\r\n    emit OwnershipTransferred(owner, newOwner);\r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n\r\n  event Pause();\r\n\r\n  event Unpause();\r\n\r\n\r\n  bool public paused = false;\r\n\r\n\r\n\r\n  /**\r\n\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n\r\n   */\r\n\r\n  modifier whenNotPaused() {\r\n\r\n    require(!paused);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n\r\n   */\r\n\r\n  modifier whenPaused() {\r\n\r\n    require(paused);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n\r\n   * @dev called by the owner to pause, triggers stopped state\r\n\r\n   */\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n\r\n    paused = true;\r\n\r\n    emit Pause();\r\n\r\n  }\r\n\r\n\r\n  /**\r\n\r\n   * @dev called by the owner to unpause, returns to normal state\r\n\r\n   */\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n\r\n    paused = false;\r\n\r\n    emit Unpause();\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SafeMath", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://105e4d55dcf8e36bb555ad25d8f1ca6d2b49770942334bef59fef3ef2413ce83"}]}