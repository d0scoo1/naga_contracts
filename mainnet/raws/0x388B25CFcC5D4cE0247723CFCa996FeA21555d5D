{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: SimPL-2.0\r\npragma solidity ^0.8.6;\r\n\r\ninterface Bridge {\r\n    function withdraw(uint toChainId, address toToken, address recipient, uint256 value, bytes memory hash) external;\r\n\r\n    function withdrawNative(uint toChainId, address payable recipient, bool isMain, uint256 value, bytes memory hash) external;\r\n}\r\n\r\ncontract BridgeManager {\r\n\r\n    address public owner;\r\n\r\n    address public bridgeAddress;\r\n\r\n    // \u786e\u8ba4\u4e8b\u4ef6\uff0c\u524d\u7aef\u53ef\u7528\u4e8e\u6355\u83b7\u81ea\u5df1\u7684\u8de8\u94fe\u8fdb\u5ea6\r\n    event Confirmation(uint fromChainId, bytes txHash, address toToken, address recipient, uint256 amount, bytes32 transactionId, address sender);\r\n\r\n    address[] public Managers;\r\n    mapping(address => bool) public isManager;\r\n    mapping(bytes32 => mapping(address => bool)) public confirmations;\r\n    mapping(bytes32 => Transaction) public transactions;\r\n\r\n\r\n    // \u9700\u8981\u591a\u7b7e\u6570\u91cf\r\n    uint public signLimit;\r\n\r\n    //\u8de8\u94fe\u4ea4\u6613\r\n    struct Transaction {\r\n        uint fromChainId;//\u76ee\u6807\u94fe\r\n        bytes txHash;//\u8de8\u94fehash\r\n        address toToken; //\u4ee3\u5e01\r\n        address recipient;//\u63a5\u6536\r\n        uint amount;//\u6570\u91cf\r\n        bool isNative;// \u662f\u5426\u4e3b\u7f51\u5e01\r\n        bool isMain;// \u662f\u5426\u4e3b\u94fe\r\n        bool executed;//\u662f\u5426\u6267\u884c\r\n    }\r\n\r\n    // multiSigns[networkID][txHash] = managers[]\r\n    mapping(uint => mapping(bytes => address[])) public multiSigns;\r\n\r\n    constructor(uint _signLimit, address _bridgeAddress, address _owner) {\r\n        owner = _owner;\r\n        signLimit = _signLimit;\r\n        bridgeAddress = _bridgeAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Bridge Manager: only use owner to call\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager {\r\n        require(isManager[msg.sender], \"Bridge Manager: only manager can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address payable _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function setBridgeAddress(address _bridgeAddress) public onlyOwner {\r\n        bridgeAddress = _bridgeAddress;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u591a\u7b7e\u6570\u91cf\r\n    function setSignLimit(uint num) public onlyOwner {\r\n        signLimit = num;\r\n    }\r\n\r\n    // \u6dfb\u52a0\u7ba1\u7406\u5458\r\n    function managerAdd(address _address) public onlyOwner {\r\n        bool push = true;\r\n        uint256 i = 0;\r\n        while (push && i < Managers.length) {\r\n            if (Managers[i] == _address) push = false;\r\n            i++;\r\n        }\r\n        if (push) Managers.push(_address);\r\n        isManager[_address] = true;\r\n    }\r\n\r\n    // \u5220\u9664\u7ba1\u7406\u5458\r\n    function managerDel(address _address) public onlyOwner {\r\n        address[] memory newManagers;\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < Managers.length; i++) {\r\n            if (Managers[i] != _address) {\r\n                newManagers[j] = Managers[i];\r\n                j++;\r\n            }\r\n        }\r\n        Managers = newManagers;\r\n        isManager[_address] = false;\r\n    }\r\n\r\n\r\n    function allManagersLength() public view returns (uint){\r\n        return Managers.length;\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(bytes32 transactionId)\r\n    public view\r\n    returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i = 0; i < Managers.length; i++) {\r\n            if (confirmations[transactionId][Managers[i]])\r\n                count += 1;\r\n            if (count == signLimit)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //\u67e5\u8be2id\r\n    function getTransactionId(uint fromChainId, bytes memory txHash, address toToken, address recipient, uint256 amount) pure public returns (bytes32){\r\n        // \u6839\u636e\u6765\u6e90\u8de8\u94fe\u4ea4\u6613\u751f\u6210\u552f\u4e00hash id\uff0c\u4f5c\u4e3a\u8fd9\u7b14\u8de8\u94fe\u7684id\r\n        bytes32 transactionId = keccak256(abi.encodePacked(fromChainId, txHash, toToken, recipient, amount));\r\n\r\n        return transactionId;\r\n    }\r\n\r\n\r\n    // \u67e5\u8be2\u4e00\u7b14\u4ea4\u6613\u662f\u5426\u8de8\u94fe\u6210\u529f\r\n    function isExecuted(uint fromChainId, bytes memory txHash, address toToken, address recipient, uint256 amount) view public returns (bool){\r\n        // \u6839\u636e\u6765\u6e90\u8de8\u94fe\u4ea4\u6613\u751f\u6210\u552f\u4e00hash id\uff0c\u4f5c\u4e3a\u8fd9\u7b14\u8de8\u94fe\u7684id\r\n        bytes32 transactionId = keccak256(abi.encodePacked(fromChainId, txHash, toToken, recipient, amount));\r\n\r\n        if (transactions[transactionId].executed)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /// @dev \u63d0\u4ea4\u4e00\u4e2a\u8de8\u94fe\u8bf7\u6c42\r\n    /// @param fromChainId \u6765\u6e90\u94feid\r\n    /// @param txHash      \u6765\u6e90\u94fe\u4ea4\u6613hash\r\n    /// @param toToken     \u76ee\u6807token\r\n    /// @param recipient   \u63a5\u6536\u5730\u5740\r\n    /// @param amount      \u6570\u91cf\r\n    function submitTransaction(uint fromChainId, bytes memory txHash, address toToken, address recipient, uint256 amount, bool isNative, bool isMain) public onlyManager returns (bool) {\r\n        // \u6839\u636e\u6765\u6e90\u8de8\u94fe\u4ea4\u6613\u751f\u6210\u552f\u4e00hash id\uff0c\u4f5c\u4e3a\u8fd9\u7b14\u8de8\u94fe\u7684id\r\n        bytes32 transactionId = keccak256(abi.encodePacked(fromChainId, txHash, toToken, recipient, amount));\r\n        if (confirmations[transactionId][msg.sender])\r\n            return true;\r\n\r\n        //\u5982\u679c\u5df2\u7ecf\u6210\u529f\u8de8\u94fe\uff0c\u76f4\u63a5\u8fd4\u56de\u6210\u529f\r\n        if (transactions[transactionId].executed)\r\n            return true;\r\n\r\n        transactions[transactionId] = Transaction({\r\n        fromChainId : fromChainId,\r\n        txHash : txHash,\r\n        toToken : toToken,\r\n        recipient : recipient,\r\n        amount : amount,\r\n        isNative : isNative,\r\n        isMain : isMain,\r\n        executed : false\r\n        });\r\n\r\n        confirmations[transactionId][msg.sender] = true;\r\n\r\n        // \u5f39\u51fa\u4e8b\u4ef6\uff0c\u7528\u4e8e\u5176\u5b83\u7a0b\u5e8f\u6355\u83b7\uff0c\u4f8b\u5982\u524d\u7aef\u53ef\u4ee5\u6355\u83b7\u81ea\u5df1\u8de8\u94fe\r\n        emit Confirmation(fromChainId, txHash, toToken, recipient, amount, transactionId, msg.sender);\r\n\r\n        if (isConfirmed(transactionId))\r\n        {\r\n            executeTransaction(transactionId);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // \u6267\u884c\u8de8\u94fe\u64cd\u4f5c\uff0c\u4efb\u610f\u8d26\u53f7\u5747\u53ef\r\n    function executeTransaction(bytes32 transactionId) public {\r\n        Transaction storage txn = transactions[transactionId];\r\n        bool _confirmed = isConfirmed(transactionId);\r\n        if (_confirmed && txn.executed == false) {\r\n            txn.executed = true;\r\n            if (txn.isNative) {\r\n                withdrawNative(txn.fromChainId, txn.isMain, payable(txn.recipient), txn.amount, txn.txHash);\r\n            } else {\r\n                withdraw(txn.fromChainId, txn.toToken, txn.recipient, txn.amount, txn.txHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw(uint fromChainId, address toToken, address recipient, uint256 amount, bytes memory depositHash) private {\r\n        Bridge bridge = Bridge(bridgeAddress);\r\n        bridge.withdraw(fromChainId, toToken, recipient, amount, depositHash);\r\n\r\n    }\r\n\r\n    function withdrawNative(uint fromChainId, bool isMain, address payable recipient, uint256 amount, bytes memory depositHash) private {\r\n        Bridge bridge = Bridge(bridgeAddress);\r\n        bridge.withdrawNative(fromChainId, recipient, isMain, amount, depositHash);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_signLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txHash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Managers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allManagersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txHash\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTransactionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txHash\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"managerAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"managerDel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiSigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"}],\"name\":\"setBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setSignLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txHash\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMain\",\"type\":\"bool\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txHash\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMain\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BridgeManager", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000006adb725cc265de37d86374a4d6e6d524b393087a00000000000000000000000037288455c59fc8ad8fc9e227ae30d69223ed2b53", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58543e2418f3458bbb1670c2633a9dc1ef134ce49851628ae7be19dfc00eb062"}]}