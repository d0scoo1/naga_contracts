{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than contract itself or owner.\r\n    */\r\n    modifier onlyRelevantSender() {\r\n        // proxy owner if used through proxy, address(0) otherwise\r\n        require(\r\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\r\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\r\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\r\n        );\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interfaces/ERC677.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ERC677 is ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function transferAndCall(address, uint256, bytes) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\r\n}\r\n\r\ncontract LegacyERC20 {\r\n    function transfer(address _spender, uint256 _value) public; // returns (bool);\r\n    function transferFrom(address _owner, address _spender, uint256 _value) public; // returns (bool);\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Helper methods for safe token transfers.\r\n * Functions perform additional checks to be sure that token transfer really happened.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Same as ERC20.transfer(address,uint256) but with extra consistency checks.\r\n    * @param _token address of the token contract\r\n    * @param _to address of the receiver\r\n    * @param _value amount of tokens to send\r\n    */\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        LegacyERC20(_token).transfer(_to, _value);\r\n        assembly {\r\n            if returndatasize {\r\n                returndatacopy(0, 0, 32)\r\n                if iszero(mload(0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Same as ERC20.transferFrom(address,address,uint256) but with extra consistency checks.\r\n    * @param _token address of the token contract\r\n    * @param _from address of the sender\r\n    * @param _value amount of tokens to send\r\n    */\r\n    function safeTransferFrom(address _token, address _from, uint256 _value) internal {\r\n        LegacyERC20(_token).transferFrom(_from, address(this), _value);\r\n        assembly {\r\n            if returndatasize {\r\n                returndatacopy(0, 0, 32)\r\n                if iszero(mload(0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Address\r\n * @dev Helper methods for Address type.\r\n */\r\nlibrary Address {\r\n    /**\r\n    * @dev Try to send native tokens to the address. If it fails, it will force the transfer by creating a selfdestruct contract\r\n    * @param _receiver address that will receive the native tokens\r\n    * @param _value the amount of native tokens to send\r\n    */\r\n    function safeSendValue(address _receiver, uint256 _value) internal {\r\n        if (!_receiver.send(_value)) {\r\n            (new Sacrifice).value(_value)(_receiver);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Blocklist.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Blocklist is Initializable, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC677;\r\n    using AddressUtils for address;\r\n\r\n    address public constant F_ADDR = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\r\n    uint256 internal constant MAX_BRIDGEMEDIATORS = 20;\r\n    bytes32 internal constant BRIDGEMEDIATOR_COUNT = 0xb7fa4d5bbcd3a784aacd24904ed0ffd56beb9bc5524e6264358cca799576a4dc; // keccak256(abi.encodePacked(\"bridgeMediatroCount\"))\r\n\r\n    event AccountBlockStatusChanged(address account, bool block);\r\n    event Blocked(address token, address account, uint256 value, bytes32 messageId);\r\n    event BridgeMediatorAdded(address mediator);\r\n    event BridgeMediatorRemoved(address mediator);\r\n\r\n    modifier onlyBridgeMediator() {\r\n        require(isBridgeMediator(msg.sender), \"onlyBridgeMediator\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _owner,\r\n        address _bridgeMediator\r\n    ) external onlyRelevantSender returns (bool) {\r\n        require(!isInitialized());\r\n        require(_owner != address(0));\r\n        require(_bridgeMediator != address(0) && _bridgeMediator != F_ADDR);\r\n        require(!isBridgeMediator(_bridgeMediator));\r\n\r\n        setOwner(_owner);\r\n        setNextBridgeMediator(F_ADDR, _bridgeMediator);\r\n        setNextBridgeMediator(_bridgeMediator, F_ADDR);\r\n        emit BridgeMediatorAdded(_bridgeMediator);\r\n\r\n        setBridgeMediatorCount(1);\r\n\r\n        setInitialize();\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function addBridgeMediator(address _mediator) external onlyOwner {\r\n        _addBridgeMediator(_mediator);\r\n        emit BridgeMediatorAdded(_mediator);\r\n    }\r\n\r\n    function removeBridgeMediator(address _mediator) external onlyOwner {\r\n        _removeBridgeMediator(_mediator);\r\n        emit BridgeMediatorRemoved(_mediator);\r\n    }\r\n\r\n    function setBlock(address _account, bool _block) external onlyOwner {\r\n        require(_account != address(0), \"Blocklist: invalid parameter\");\r\n        boolStorage[keccak256(abi.encodePacked(\"blocklist\", _account))] = _block;\r\n        emit AccountBlockStatusChanged(_account, _block);\r\n    }\r\n\r\n    function isBlocked(address _account) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"blocklist\", _account))];\r\n    }\r\n\r\n    function setBlockedMessageAccount(bytes32 _messageId, address _account) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"blockedAccount\", _messageId))] = _account;\r\n    }\r\n\r\n    function blockedMessageAccount(bytes32 _messageId) external view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"blockedAccount\", _messageId))];\r\n    }\r\n\r\n    function setBlockedMessageToken(bytes32 _messageId, address _token) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"blockedToken\", _messageId))] = _token;\r\n    }\r\n\r\n    function blockedMessageToken(bytes32 _messageId) external view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"blockedToken\", _messageId))];\r\n    }\r\n\r\n    function setBlockedMessageValue(bytes32 _messageId, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"blockedValue\", _messageId))] = _value;\r\n    }\r\n\r\n    function blockedMessageValue(bytes32 _messageId) external view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"blockedValue\", _messageId))];\r\n    }\r\n\r\n    function blockERC20(address _token, address _account, uint256 _value, bytes32 _messageId) public onlyBridgeMediator {\r\n        ERC677(_token).safeTransferFrom(msg.sender, _value);\r\n\r\n        if (_messageId == 0) {\r\n            _messageId = keccak256(abi.encodePacked(_account, _token, _value, block.number));\r\n        }\r\n        setBlockedMessageAccount(_messageId, _account);\r\n        setBlockedMessageToken(_messageId, _token);\r\n        setBlockedMessageValue(_messageId, _value);\r\n\r\n        emit Blocked(_token, _account, _value, _messageId);\r\n    }\r\n\r\n    function blockNative(address _account, bytes32 _messageId) public payable onlyBridgeMediator {\r\n        if (_messageId == 0) {\r\n            _messageId = keccak256(abi.encodePacked(_account, address(0), msg.value, block.number));\r\n        }\r\n        setBlockedMessageAccount(_messageId, _account);\r\n        setBlockedMessageValue(_messageId, msg.value);\r\n\r\n        emit Blocked(address(0), _account, msg.value, _messageId);\r\n    }\r\n\r\n    function checkAndBlockERC20(address _from, address _recipient,\r\n            address _token, uint256 _value, bytes32 _messageId) public onlyBridgeMediator returns (bool blocked) {\r\n\r\n        if (_from != address(0) && isBlocked(_from)) {\r\n            blockERC20(_token, _from, _value, _messageId);\r\n            blocked = true;\r\n            return;\r\n        }\r\n\r\n        if (_recipient != address(0) && isBlocked(_recipient)) {\r\n            blockERC20(_token, _recipient, _value, _messageId);\r\n            blocked = true;\r\n        }\r\n    }\r\n\r\n    function withdraw(address _token, address _to, uint256 _amount) external onlyOwner {\r\n        uint256 balance = ERC677(_token).balanceOf(address(this));\r\n        ERC677(_token).safeTransfer(_to, _amount > balance ? balance : _amount);\r\n    }\r\n\r\n    function withdraw(address _to, uint256 _amount) external onlyOwner {\r\n        Address.safeSendValue(_to, _amount > address(this).balance ? address(this).balance : _amount);\r\n    }\r\n\r\n    function bridgeMediatorList() external view returns (address[]) {\r\n        address[] memory list = new address[](bridgeMediatorCount());\r\n        uint256 counter = 0;\r\n        address nextMediator = getNextBridgeMediator(F_ADDR);\r\n        require(nextMediator != address(0));\r\n\r\n        while (nextMediator != F_ADDR) {\r\n            list[counter] = nextMediator;\r\n            nextMediator = getNextBridgeMediator(nextMediator);\r\n            counter++;\r\n\r\n            require(nextMediator != address(0));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    function _addBridgeMediator(address _bridgeMediator) internal {\r\n        require(_bridgeMediator != address(0) && _bridgeMediator != F_ADDR);\r\n        require(!isBridgeMediator(_bridgeMediator));\r\n\r\n        address firstMediator = getNextBridgeMediator(F_ADDR);\r\n        require(firstMediator != address(0));\r\n        setNextBridgeMediator(_bridgeMediator, firstMediator);\r\n        setNextBridgeMediator(F_ADDR, _bridgeMediator);\r\n        setBridgeMediatorCount(bridgeMediatorCount().add(1));\r\n    }\r\n\r\n    function _removeBridgeMediator(address _bridgeMediator) internal {\r\n        require(isBridgeMediator(_bridgeMediator));\r\n        address mediatorsNext = getNextBridgeMediator(_bridgeMediator);\r\n        address index = F_ADDR;\r\n        address next = getNextBridgeMediator(index);\r\n        require(next != address(0));\r\n\r\n        while (next != _bridgeMediator) {\r\n            index = next;\r\n            next = getNextBridgeMediator(index);\r\n\r\n            require(next != F_ADDR && next != address(0));\r\n        }\r\n\r\n        setNextBridgeMediator(index, mediatorsNext);\r\n        deleteItemFromAddressStorage(\"bridgeMediatorsList\", _bridgeMediator);\r\n        setBridgeMediatorCount(bridgeMediatorCount().sub(1));\r\n    }\r\n\r\n    function bridgeMediatorCount() public view returns (uint256) {\r\n        return uintStorage[BRIDGEMEDIATOR_COUNT];\r\n    }\r\n\r\n    function isBridgeMediator(address _bridgeMediator) public view returns (bool) {\r\n        return _bridgeMediator != F_ADDR && getNextBridgeMediator(_bridgeMediator) != address(0);\r\n    }\r\n\r\n    function getNextBridgeMediator(address _address) public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\"bridgeMediatorsList\", _address))];\r\n    }\r\n\r\n    function deleteItemFromAddressStorage(string _mapName, address _address) internal {\r\n        delete addressStorage[keccak256(abi.encodePacked(_mapName, _address))];\r\n    }\r\n\r\n    function setBridgeMediatorCount(uint256 _bridgeMediatorCount) internal {\r\n        require(_bridgeMediatorCount <= MAX_BRIDGEMEDIATORS);\r\n        uintStorage[BRIDGEMEDIATOR_COUNT] = _bridgeMediatorCount;\r\n    }\r\n\r\n    function setNextBridgeMediator(address _prevMediator, address _bridgeMediator) internal {\r\n        addressStorage[keccak256(abi.encodePacked(\"bridgeMediatorsList\", _prevMediator))] = _bridgeMediator;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"bridgeMediatorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"blockedMessageToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_bridgeMediator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"blockedMessageAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"blockERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"blockNative\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mediator\",\"type\":\"address\"}],\"name\":\"addBridgeMediator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNextBridgeMediator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"blockedMessageValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeMediatorList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bridgeMediator\",\"type\":\"address\"}],\"name\":\"isBridgeMediator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"F_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"checkAndBlockERC20\",\"outputs\":[{\"name\":\"blocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mediator\",\"type\":\"address\"}],\"name\":\"removeBridgeMediator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"block\",\"type\":\"bool\"}],\"name\":\"AccountBlockStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"Blocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"BridgeMediatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"BridgeMediatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Blocklist", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://810ddc876a1327c31fbd5395a9b2d76bad2257024e07753d7cbc7c32797c63a1"}]}