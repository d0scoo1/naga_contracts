{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract BetEscrow {\r\n\r\n    event BetOffered(uint betId);\r\n\r\n    enum Status {\r\n        Offered,\r\n        Accepted,\r\n        Settled\r\n    }\r\n\r\n    enum Outcome {\r\n        A,\r\n        B,\r\n        Neutral\r\n    }\r\n\r\n    struct Bet {\r\n        uint id;\r\n        address playerA;\r\n        address playerB;\r\n        address oracle;\r\n        IERC20 token;\r\n        uint amount;\r\n        Status status;\r\n    }\r\n\r\n    mapping(uint => Bet) public bets;\r\n\r\n    uint public nextBetId = 0;\r\n\r\n    function offerBet(address _playerB, address _oracle, IERC20 token, uint amount) external {\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n\r\n        Bet memory bet = Bet({\r\n            id: nextBetId,\r\n            playerA: msg.sender,\r\n            playerB: _playerB,\r\n            oracle: _oracle,\r\n            token: token,\r\n            amount: amount,\r\n            status: Status.Offered\r\n        });\r\n\r\n        bets[nextBetId] = bet;\r\n        emit BetOffered(nextBetId);\r\n        nextBetId += 1;\r\n    }\r\n\r\n    function withdrawOffer(uint betId) external {\r\n        Bet memory bet = bets[betId];\r\n        require(msg.sender == bet.playerA, \"Not the offer creator\");\r\n        require(bet.status == Status.Offered, \"Not offered\");\r\n        // Cache values before deleting\r\n        IERC20 _token = bet.token;\r\n        uint _amount = bet.amount;\r\n        // Delete bet before refunding to prevent reentrancy\r\n        delete bets[betId];\r\n        // Refund\r\n        _token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function acceptBet(uint betId) external {\r\n        Bet memory bet = bets[betId];\r\n        require(msg.sender == bet.playerB, \"Not the offer recipient\");\r\n        require(bet.status == Status.Offered, \"Not offered\");\r\n\r\n        bet.token.transferFrom(msg.sender, address(this), bet.amount);\r\n        bets[betId].status = Status.Accepted;\r\n    }\r\n\r\n    function settleBet(uint betId, Outcome outcome) external {\r\n        Bet memory bet = bets[betId];\r\n        require(msg.sender == bet.oracle, \"Not the oracle\");\r\n        require(bet.status == Status.Accepted, \"Not accepted\");\r\n\r\n        bets[betId].status = Status.Settled;\r\n\r\n        if (outcome == Outcome.A) {\r\n            bet.token.transfer(bet.playerA, 2 * bet.amount);\r\n        } else if (outcome == Outcome.B) {\r\n            bet.token.transfer(bet.playerB, 2 * bet.amount);\r\n        } else if (outcome == Outcome.Neutral) {\r\n            bet.token.transfer(bet.playerA, bet.amount);\r\n            bet.token.transfer(bet.playerB, bet.amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetOffered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"acceptBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"playerA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"playerB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum BetEscrow.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"offerBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"enum BetEscrow.Outcome\",\"name\":\"outcome\",\"type\":\"uint8\"}],\"name\":\"settleBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"withdrawOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BetEscrow", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3a790877dfc6298352363149d55c94f464e727b4d52b3ac37fc1536b55864f9e"}]}