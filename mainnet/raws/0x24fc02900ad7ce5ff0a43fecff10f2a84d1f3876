{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EvaFlowController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"./interfaces/IEvaFlowController.sol\\\";\\nimport {IEvaSafesFactory} from \\\"./interfaces/IEvaSafesFactory.sol\\\";\\nimport {FlowStatus, KeepNetWork} from \\\"./lib/EvabaseHelper.sol\\\";\\nimport \\\"./lib/MathConv.sol\\\";\\nimport {TransferHelper} from \\\"./lib/TransferHelper.sol\\\";\\nimport {IEvaSafes} from \\\"./interfaces/IEvaSafes.sol\\\";\\nimport \\\"./interfaces/IEvabaseConfig.sol\\\";\\nimport \\\"./interfaces/IEvaFlowExecutor.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract EvaFlowController is IEvaFlowController, OwnableUpgradeable {\\n    EvaFlowMeta[] private _flowMetas;\\n    MinConfig public minConfig;\\n    mapping(address => EvaUserMeta) public userMetaMap;\\n\\n    //need exec flows\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    mapping(KeepNetWork => EnumerableSetUpgradeable.UintSet) private _vaildFlows;\\n\\n    uint256 private constant _REGISTRY_GAS_OVERHEAD = 80_000;\\n    bytes32 private constant _FLOW_EXECUTOR = keccak256(\\\"FLOW_EXECUTOR\\\");\\n\\n    IEvaSafesFactory public evaSafesFactory;\\n    IEvabaseConfig public config;\\n    mapping(address => bool) public flowOperators;\\n\\n    function initialize(address _config, address _evaSafesFactory) external initializer {\\n        require(_evaSafesFactory != address(0), \\\"addess is 0x\\\");\\n        require(_config != address(0), \\\"addess is 0x\\\");\\n        __Ownable_init();\\n        evaSafesFactory = IEvaSafesFactory(_evaSafesFactory);\\n        config = IEvabaseConfig(_config);\\n\\n        EvaFlowMeta memory f;\\n        _flowMetas.push(f); //storage a solt, flow id starts with 1.\\n\\n        flowOperators[msg.sender] = true;\\n    }\\n\\n    function setMinConfig(MinConfig memory _minConfig) external onlyOwner {\\n        require(_minConfig.ppb >= 10000 && _minConfig.ppb <= 15000, \\\"invalid ppb\\\");\\n        minConfig = _minConfig;\\n        emit SetMinConfig(\\n            msg.sender,\\n            _minConfig.feeRecived,\\n            _minConfig.feeToken,\\n            _minConfig.minGasFundForUser,\\n            _minConfig.minGasFundOneFlow,\\n            _minConfig.ppb,\\n            _minConfig.blockCountPerTurn\\n        );\\n    }\\n\\n    function setFlowOperators(address op, bool isAdd) external onlyOwner {\\n        if (isAdd) {\\n            flowOperators[op] = true;\\n        } else {\\n            delete flowOperators[op];\\n        }\\n        emit FlowOperatorChanged(op, isAdd);\\n    }\\n\\n    function _beforeCreateFlow(KeepNetWork _keepNetWork) internal view {\\n        require(_keepNetWork <= KeepNetWork.Others, \\\"invalid network\\\");\\n        require(IEvaSafes(msg.sender).isEvaSafes(), \\\"should be safes\\\");\\n    }\\n\\n    function isValidFlow(address flow) public view returns (bool) {\\n        require(flow != address(0), \\\"flow is 0x\\\");\\n        require(flow != address(this), \\\"invalid flow\\\");\\n        return true; //TODO: Valid Flows\\n    }\\n\\n    function _changeFund(uint256 amount, bool withdraw) private {\\n        if (withdraw) {\\n            userMetaMap[msg.sender].ethBal -= MathConv.toU120(amount);\\n        } else {\\n            userMetaMap[msg.sender].ethBal += MathConv.toU120(amount);\\n        }\\n        EvaUserMeta memory user = userMetaMap[msg.sender];\\n\\n        //after fee check\\n        //Check if the Gas fee balance is sufficient\\n        bool isEnoughGas = (user.ethBal >= minConfig.minGasFundForUser) &&\\n            (user.ethBal >= user.vaildFlowsNum * minConfig.minGasFundOneFlow);\\n        require(isEnoughGas, \\\"not enough fund\\\");\\n    }\\n\\n    function registerFlow(\\n        string memory name,\\n        KeepNetWork network,\\n        address flow,\\n        bytes memory checkdata\\n    ) external payable override returns (uint256 flowId) {\\n        require(isValidFlow(flow), \\\"invalid flow\\\");\\n        _beforeCreateFlow(network);\\n        userMetaMap[msg.sender].vaildFlowsNum += uint8(1); // Error if overflow\\n        _changeFund(msg.value, false);\\n\\n        _flowMetas.push(\\n            EvaFlowMeta({\\n                flowStatus: FlowStatus.Active,\\n                keepNetWork: network,\\n                maxVaildBlockNumber: type(uint256).max,\\n                admin: msg.sender,\\n                lastKeeper: address(0),\\n                lastExecNumber: 0,\\n                lastVersionflow: flow,\\n                flowName: name,\\n                checkData: checkdata\\n            })\\n        );\\n        flowId = _flowMetas.length - 1;\\n        _vaildFlows[network].add(flowId);\\n        emit FlowCreated(msg.sender, flowId, flow, checkdata, msg.value);\\n    }\\n\\n    function closeFlow(uint256 flowId) external override {\\n        closeFlowWithGas(flowId, 0);\\n    }\\n\\n    function closeFlowWithGas(uint256 flowId, uint256 before) public override {\\n        EvaFlowMeta memory meta = _flowMetas[flowId];\\n        require(meta.flowStatus != FlowStatus.Closed, \\\"has closed\\\");\\n        _requireFlowOperator(meta.admin);\\n        _closeFlow(flowId, meta);\\n        if (before > 0) {\\n            _updateUserFund(meta.admin, before - gasleft());\\n        }\\n    }\\n\\n    function _closeFlow(uint256 flowId, EvaFlowMeta memory meta) internal {\\n        // remove from valid when flow is active.\\n        if (meta.flowStatus == FlowStatus.Active) {\\n            userMetaMap[meta.admin].vaildFlowsNum -= 1;\\n            _vaildFlows[meta.keepNetWork].remove(flowId);\\n        }\\n        _flowMetas[flowId].flowStatus = FlowStatus.Closed;\\n        emit FlowClosed(meta.admin, flowId);\\n    }\\n\\n    function depositFund(address flowAdmin) public payable override {\\n        userMetaMap[flowAdmin].ethBal += MathConv.toU120(msg.value);\\n    }\\n\\n    function withdrawFund(address recipient, uint256 amount) external override {\\n        require(recipient != address(0), \\\"invalid address\\\");\\n        _changeFund(amount, true);\\n        TransferHelper.safeTransferETH(recipient, amount);\\n    }\\n\\n    function withdrawPayment(uint256 amount) external override onlyOwner {\\n        TransferHelper.safeTransferETH(msg.sender, amount);\\n    }\\n\\n    function getIndexVaildFlow(uint256 index, KeepNetWork keepNetWork) external view override returns (uint256 value) {\\n        return _vaildFlows[keepNetWork].at(index);\\n    }\\n\\n    function getAllVaildFlowSize(KeepNetWork keepNetWork) external view override returns (uint256 size) {\\n        return _vaildFlows[keepNetWork].length();\\n    }\\n\\n    function getFlowMetas(uint256 index) external view override returns (EvaFlowMeta memory) {\\n        return _flowMetas[index];\\n    }\\n\\n    function getFlowMetaSize() external view override returns (uint256) {\\n        return _flowMetas.length;\\n    }\\n\\n    function batchExecFlow(address keeper, bytes memory data) external override {\\n        (uint256[] memory arr, bytes[] memory executeDataArray) = abi.decode(data, (uint256[], bytes[]));\\n        require(arr.length == executeDataArray.length, \\\"invalid array len\\\");\\n\\n        KeepInfo memory ks = config.getKeepBot(msg.sender);\\n        require(ks.isActive, \\\"exect keeper is not whitelist\\\");\\n\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] > 0) {\\n                _execFlow(ks, keeper, arr[i], executeDataArray[i]);\\n            }\\n        }\\n    }\\n\\n    function execFlow(\\n        address keeper,\\n        uint256 flowId,\\n        bytes memory execData\\n    ) public override {\\n        _execFlow(config.getKeepBot(msg.sender), keeper, flowId, execData);\\n    }\\n\\n    function _execFlow(\\n        KeepInfo memory ks,\\n        address keeper,\\n        uint256 flowId,\\n        bytes memory execData\\n    ) private {\\n        EvaFlowMeta memory flow = _flowMetas[flowId];\\n\\n        // solhint-disable avoid-tx-origin\\n        bool isOffChain = tx.origin == address(0);\\n        // Let pre-execution pass\\n\\n        if (!isOffChain) {\\n            // Check if the flow's network matches the keeper\\n            require(flow.keepNetWork == ks.keepNetWork, \\\"invalid keepNetWork\\\");\\n        }\\n\\n        uint256 before = gasleft();\\n\\n        if (flow.keepNetWork != KeepNetWork.Evabase) {\\n            require((keeper != flow.lastKeeper), \\\"expect next keeper\\\");\\n        }\\n\\n        // update first.\\n        _flowMetas[flowId].lastExecNumber = block.number;\\n        _flowMetas[flowId].lastKeeper = keeper;\\n\\n        bool success;\\n        bool needClose;\\n        string memory failedReason;\\n        {\\n            address executor = config.getAddressItem(_FLOW_EXECUTOR);\\n            try IEvaFlowExecutor(executor).execute(flow, execData) returns (bool needCloseFlow) {\\n                needClose = needCloseFlow;\\n                success = true;\\n            } catch Error(string memory reason) {\\n                failedReason = reason; // revert or require\\n            } catch {\\n                failedReason = \\\"Reverted\\\"; //assert\\n            }\\n        }\\n\\n        uint256 usedGas = before - gasleft();\\n\\n        uint120 payAmountByETH = _updateUserFund(flow.admin, usedGas);\\n\\n        if (success) {\\n            emit FlowExecuteSuccess(flow.admin, flowId, payAmountByETH, 0, usedGas);\\n        } else {\\n            if (isOffChain) {\\n                revert(failedReason);\\n            }\\n            emit FlowExecuteFailed(flow.admin, flowId, payAmountByETH, 0, usedGas, failedReason);\\n        }\\n\\n        if (needClose && !isOffChain) {\\n            // don't close flow when try execute on off-chain\\n            _closeFlow(flowId, flow);\\n        }\\n    }\\n\\n    function _updateUserFund(address admin, uint256 usedGas) internal returns (uint120 payAmountByETH) {\\n        payAmountByETH = _calculatePaymentAmount(usedGas);\\n        uint120 bal = userMetaMap[admin].ethBal;\\n\\n        //offchain\\n        // solhint-disable avoid-tx-origin\\n        if (tx.origin == address(0)) {\\n            uint256 minPay = payAmountByETH > minConfig.minGasFundOneFlow\\n                ? payAmountByETH\\n                : minConfig.minGasFundOneFlow;\\n            require(bal >= minPay, \\\"insufficient fund\\\");\\n        }\\n        if (bal < payAmountByETH) {\\n            payAmountByETH = bal;\\n        }\\n        userMetaMap[admin].ethBal -= payAmountByETH;\\n    }\\n\\n    function _calculatePaymentAmount(uint256 gasLimit) private view returns (uint120 payment) {\\n        uint256 price = tx.gasprice == 0 ? 1 gwei : tx.gasprice;\\n        uint256 weiForGas = price * (gasLimit + _REGISTRY_GAS_OVERHEAD);\\n        uint256 total = (weiForGas * minConfig.ppb) / 10000;\\n        return uint120(total);\\n    }\\n\\n    function getFlowCheckInfo(uint256 flowId) external view override returns (address flow, bytes memory checkData) {\\n        flow = _flowMetas[flowId].lastVersionflow;\\n        checkData = _flowMetas[flowId].checkData;\\n    }\\n\\n    function _requireFlowOperator(address flowAdmin) private view {\\n        require(flowAdmin == msg.sender || flowOperators[msg.sender], \\\"only for op/admin\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaFlowController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\nimport {FlowStatus, KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\n\\n//struct\\nstruct EvaFlowMeta {\\n    FlowStatus flowStatus;\\n    KeepNetWork keepNetWork;\\n    address admin;\\n    address lastKeeper;\\n    address lastVersionflow;\\n    uint256 lastExecNumber;\\n    uint256 maxVaildBlockNumber;\\n    string flowName;\\n    bytes checkData;\\n}\\n\\nstruct EvaUserMeta {\\n    uint120 ethBal;\\n    uint120 gasTokenBal; //keep\\n    uint8 vaildFlowsNum;\\n}\\n\\nstruct MinConfig {\\n    address feeRecived;\\n    address feeToken;\\n    uint64 minGasFundForUser;\\n    uint64 minGasFundOneFlow;\\n    uint16 ppb;\\n    uint16 blockCountPerTurn;\\n}\\n\\ninterface IEvaFlowController {\\n    event FlowOperatorChanged(address op, bool removed);\\n    event FlowCreated(address indexed user, uint256 indexed flowId, address flowAdd, bytes checkData, uint256 fee);\\n    event FlowUpdated(address indexed user, uint256 flowId, address flowAdd);\\n    event FlowClosed(address indexed user, uint256 flowId);\\n    event FlowExecuteSuccess(\\n        address indexed user,\\n        uint256 indexed flowId,\\n        uint120 payAmountByETH,\\n        uint120 payAmountByFeeToken,\\n        uint256 gasUsed\\n    );\\n    event FlowExecuteFailed(\\n        address indexed user,\\n        uint256 indexed flowId,\\n        uint120 payAmountByETH,\\n        uint120 payAmountByFeeToken,\\n        uint256 gasUsed,\\n        string reason\\n    );\\n\\n    event SetMinConfig(\\n        address indexed user,\\n        address feeRecived,\\n        address feeToken,\\n        uint64 minGasFundForUser,\\n        uint64 minGasFundOneFlow,\\n        uint16 ppb,\\n        uint16 blockCountPerTurn\\n    );\\n\\n    function registerFlow(\\n        string memory name,\\n        KeepNetWork keepNetWork,\\n        address flow,\\n        bytes memory checkdata\\n    ) external payable returns (uint256 flowId);\\n\\n    function closeFlow(uint256 flowId) external;\\n\\n    function closeFlowWithGas(uint256 flowId, uint256 before) external;\\n\\n    function execFlow(\\n        address keeper,\\n        uint256 flowId,\\n        bytes memory inputData\\n    ) external;\\n\\n    function depositFund(address flowAdmin) external payable;\\n\\n    function withdrawFund(address recipient, uint256 amount) external;\\n\\n    function withdrawPayment(uint256 amount) external;\\n\\n    function getIndexVaildFlow(uint256 index, KeepNetWork keepNetWork) external view returns (uint256 value);\\n\\n    function getAllVaildFlowSize(KeepNetWork keepNetWork) external view returns (uint256 size);\\n\\n    function getFlowMetas(uint256 index) external view returns (EvaFlowMeta memory);\\n\\n    function getFlowMetaSize() external view returns (uint256);\\n\\n    function batchExecFlow(address keeper, bytes memory data) external;\\n\\n    function getFlowCheckInfo(uint256 flowId) external view returns (address flow, bytes memory checkData);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaSafesFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\ninterface IEvaSafesFactory {\\n    event ConfigChanged(address indexed newConfig);\\n\\n    event WalletCreated(address indexed user, address wallet);\\n\\n    function get(address user) external view returns (address wallet);\\n\\n    function create(address user) external returns (address wallet);\\n\\n    function calcSafes(address user) external view returns (address wallet);\\n\\n    function changeConfig(address _config) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/EvabaseHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\nenum CompareOperator {\\n    Eq,\\n    Ne,\\n    Ge,\\n    Gt,\\n    Le,\\n    Lt\\n}\\n\\nenum FlowStatus {\\n    Active, //\u53ef\u6267\u884c\\n    Closed,\\n    Expired,\\n    Completed,\\n    Unknown\\n}\\n\\nenum KeepNetWork {\\n    ChainLink,\\n    Evabase,\\n    Gelato,\\n    Others\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MathConv.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\n/* solhint-disable */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary MathConv {\\n    function toU120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"to120-overflow\\\");\\n        return uint120(value);\\n    }\\n\\n    function toU96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"to96-overflow\\\");\\n        return uint96(value);\\n    }\\n\\n    function toU64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"to64-overflow\\\");\\n        return uint64(value);\\n    }\\n\\n    function toU8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"to8-overflow\\\");\\n        return uint8(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Copy from https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /* solhint-disable */\\n    address internal constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SA\\\");\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n\\n    /**\\n     * @notice Get the account's balance of token or ETH\\n     * @param token - Address of the token\\n     * @param addr - Address of the account\\n     * @return uint256 - Account's balance of token or ETH\\n     */\\n    function balanceOf(address token, address addr) internal view returns (uint256) {\\n        if (ETH_ADDRESS == address(token)) {\\n            return addr.balance;\\n        }\\n        return IERC20(token).balanceOf(addr);\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransferTokenOrETH(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (ETH_ADDRESS == token) {\\n            safeTransferETH(to, value);\\n            return;\\n        }\\n        safeTransfer(token, to, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaSafes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\n\\nenum HowToCall {\\n    Call,\\n    DelegateCall\\n}\\n\\ninterface IEvaSafes {\\n    function owner() external view returns (address);\\n\\n    function initialize(address admin, address agent) external;\\n\\n    function proxy(\\n        address dest,\\n        HowToCall howToCall,\\n        bytes memory data\\n    ) external payable returns (bytes memory);\\n\\n    function isEvaSafes() external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvabaseConfig.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//Create by evabase.network core team.\\npragma solidity ^0.8.0;\\nimport {KeepNetWork} from \\\"../lib/EvabaseHelper.sol\\\";\\n\\nstruct KeepInfo {\\n    bool isActive;\\n    KeepNetWork keepNetWork;\\n}\\n\\ninterface IEvabaseConfig {\\n    event AddKeeper(address indexed user, address keeper, KeepNetWork keepNetWork);\\n    event RemoveKeeper(address indexed user, address keeper);\\n    event AddBatchKeeper(address indexed user, address[] keeper, KeepNetWork[] keepNetWork);\\n    event RemoveBatchKeeper(address indexed user, address[] keeper);\\n\\n    event SetControl(address indexed user, address control);\\n    event SetBatchFlowNum(address indexed user, uint32 num);\\n\\n    function getBytes32Item(bytes32 key) external view returns (bytes32);\\n\\n    function getAddressItem(bytes32 key) external view returns (address);\\n\\n    function control() external view returns (address);\\n\\n    function isKeeper(address query) external view returns (bool);\\n\\n    function batchFlowNum() external view returns (uint32);\\n\\n    function keepBotSizes(KeepNetWork keepNetWork) external view returns (uint32);\\n\\n    function getKeepBot(address add) external view returns (KeepInfo memory);\\n\\n    function isActiveControler(address add) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEvaFlowExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n//author: Evabase core team\\n\\npragma solidity ^0.8.0;\\n\\nimport {EvaFlowMeta} from \\\"./IEvaFlowController.sol\\\";\\n\\ninterface IEvaFlowExecutor {\\n    function execute(EvaFlowMeta memory flow, bytes memory executeData) external returns (bool needCloseFlow);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"}],\"name\":\"FlowClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flowAdd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FlowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"payAmountByETH\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"payAmountByFeeToken\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FlowExecuteFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"payAmountByETH\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"payAmountByFeeToken\",\"type\":\"uint120\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"name\":\"FlowExecuteSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"removed\",\"type\":\"bool\"}],\"name\":\"FlowOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flowAdd\",\"type\":\"address\"}],\"name\":\"FlowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecived\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minGasFundForUser\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minGasFundOneFlow\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"ppb\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"blockCountPerTurn\",\"type\":\"uint16\"}],\"name\":\"SetMinConfig\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchExecFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"}],\"name\":\"closeFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"before\",\"type\":\"uint256\"}],\"name\":\"closeFlowWithGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IEvabaseConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flowAdmin\",\"type\":\"address\"}],\"name\":\"depositFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evaSafesFactory\",\"outputs\":[{\"internalType\":\"contract IEvaSafesFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"execData\",\"type\":\"bytes\"}],\"name\":\"execFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flowOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"}],\"name\":\"getAllVaildFlowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"}],\"name\":\"getFlowCheckInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlowMetaSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFlowMetas\",\"outputs\":[{\"components\":[{\"internalType\":\"enum FlowStatus\",\"name\":\"flowStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastKeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lastVersionflow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastExecNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVaildBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"flowName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"internalType\":\"struct EvaFlowMeta\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum KeepNetWork\",\"name\":\"keepNetWork\",\"type\":\"uint8\"}],\"name\":\"getIndexVaildFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_evaSafesFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"}],\"name\":\"isValidFlow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeRecived\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minGasFundForUser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minGasFundOneFlow\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"ppb\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountPerTurn\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"enum KeepNetWork\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"flow\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"checkdata\",\"type\":\"bytes\"}],\"name\":\"registerFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"flowId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"op\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"setFlowOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeRecived\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minGasFundForUser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minGasFundOneFlow\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"ppb\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountPerTurn\",\"type\":\"uint16\"}],\"internalType\":\"struct MinConfig\",\"name\":\"_minConfig\",\"type\":\"tuple\"}],\"name\":\"setMinConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMetaMap\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"ethBal\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"gasTokenBal\",\"type\":\"uint120\"},{\"internalType\":\"uint8\",\"name\":\"vaildFlowsNum\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvaFlowController", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}