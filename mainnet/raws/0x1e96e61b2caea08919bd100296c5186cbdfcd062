{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            'Ownable: new owner is the zero address'\r\n        );\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Wrapper {\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    IERC20 public stakedToken;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    string constant _transferErrorMessage = 'Staked token transfer failed';\r\n\r\n    function stakeFor(address forWhom, uint128 amount) public payable virtual {\r\n        IERC20 st = stakedToken;\r\n        if (st == IERC20(address(0))) {\r\n            unchecked {\r\n                totalSupply += msg.value;\r\n                _balances[forWhom] += msg.value;\r\n            }\r\n        } else {\r\n            require(msg.value == 0, 'Non-zero eth');\r\n            require(amount > 0, 'Cannot stake 0');\r\n            require(\r\n                st.transferFrom(msg.sender, address(this), amount),\r\n                _transferErrorMessage\r\n            );\r\n            unchecked {\r\n                totalSupply += amount;\r\n                _balances[forWhom] += amount;\r\n            }\r\n        }\r\n        emit Staked(forWhom, amount);\r\n    }\r\n\r\n    function withdraw(uint128 amount) public virtual {\r\n        require(amount <= _balances[msg.sender], 'You cannot withdraw more tokens than you have staked.');\r\n        unchecked {\r\n            _balances[msg.sender] -= amount;\r\n            totalSupply = totalSupply - amount;\r\n        }\r\n        IERC20 st = stakedToken;\r\n        if (st == IERC20(address(0))) {\r\n            (bool success, ) = msg.sender.call{ value: amount }('');\r\n            require(success, 'ETH transfer failure');\r\n        } else {\r\n            require(\r\n                stakedToken.transfer(msg.sender, amount),\r\n                _transferErrorMessage\r\n            );\r\n        }\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract TokenStaking is Wrapper, Ownable {\r\n    IERC20 public rewardToken;\r\n    uint256 public rewardRate;\r\n    uint64 public periodFinish;\r\n    uint64 public lastUpdateTime;\r\n    uint128 public rewardPerTokenStored;\r\n    struct UserRewards {\r\n        uint128 userRewardPerTokenPaid;\r\n        uint128 rewards;\r\n    }\r\n    mapping(address => UserRewards) public userRewards;\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor(IERC20 _rewardToken, IERC20 _stakedToken) {\r\n        rewardToken = _rewardToken;\r\n        stakedToken = _stakedToken;\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        uint128 _rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        rewardPerTokenStored = _rewardPerTokenStored;\r\n        userRewards[account].rewards = earned(account);\r\n        userRewards[account].userRewardPerTokenPaid = _rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint64) {\r\n        uint64 blockTimestamp = uint64(block.timestamp);\r\n        return blockTimestamp < periodFinish ? blockTimestamp : periodFinish;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint128) {\r\n        uint256 totalStakedSupply = totalSupply;\r\n        if (totalStakedSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        unchecked {\r\n            uint256 rewardDuration = lastTimeRewardApplicable() - lastUpdateTime;\r\n            return uint128(rewardPerTokenStored + (rewardDuration * rewardRate) / totalStakedSupply);\r\n        }\r\n    }\r\n\r\n    // Calculate $HNY rewards earned\r\n    function earned(address account) public view returns (uint128) {\r\n        unchecked {\r\n            return uint128((balanceOf(account) * (rewardPerToken() - userRewards[account].userRewardPerTokenPaid)) / 1e18 + userRewards[account].rewards);\r\n        }\r\n    }\r\n\r\n    // Stake LP tokens\r\n    function stake(uint128 amount) external payable {\r\n        stakeFor(msg.sender, amount);\r\n    }\r\n\r\n    // Stake LP for an address\r\n    function stakeFor(address forWhom, uint128 amount) public payable override updateReward(forWhom) {\r\n        super.stakeFor(forWhom, amount);\r\n    }\r\n\r\n    // Unstake tokens\r\n    function withdraw(uint128 amount) public override updateReward(msg.sender) {\r\n        super.withdraw(amount);\r\n    }\r\n\r\n    // Claim rewards and unstake tokens\r\n    function exit() external {\r\n        claimHoney();\r\n        withdraw(uint128(balanceOf(msg.sender)));\r\n    }\r\n\r\n    // Claim accumulated $HNY rewards\r\n    function claimHoney() public updateReward(msg.sender) {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            userRewards[msg.sender].rewards = 0;\r\n            require(rewardToken.transfer(msg.sender, reward), 'reward transfer failed');\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    // Set reward limit, reward rate, and duration\r\n    function setRewardParams(uint128 rewardLimit, uint64 duration, uint256 rr) external onlyOwner {\r\n        unchecked {\r\n            require(rewardLimit > 0);\r\n            rewardPerTokenStored = rewardPerToken();\r\n            uint64 blockTimestamp = uint64(block.timestamp);\r\n            uint256 maxRewardSupply = rewardToken.balanceOf(address(this));\r\n            if (rewardToken == stakedToken) maxRewardSupply -= totalSupply;\r\n            uint256 leftover = 0;\r\n            if (blockTimestamp >= periodFinish) {\r\n                rewardRate = rr;\r\n            } else {\r\n                uint256 remaining = periodFinish - blockTimestamp;\r\n                leftover = remaining * rewardRate;\r\n                rewardRate = rr;\r\n            }\r\n            //require(rewardLimit + leftover <= maxRewardSupply, 'There is not enough $HNY in the contract.');\r\n            lastUpdateTime = blockTimestamp;\r\n            periodFinish = blockTimestamp + duration;\r\n            emit RewardAdded(rewardLimit);\r\n        }\r\n    }\r\n\r\n    // Withdraw $HNY from the contract\r\n    function withdrawHoney() external onlyOwner {\r\n        uint256 rewardSupply = rewardToken.balanceOf(address(this));\r\n        if (rewardToken == stakedToken) rewardSupply -= totalSupply;\r\n        require(rewardToken.transfer(msg.sender, rewardSupply));\r\n        rewardRate = 0;\r\n        periodFinish = uint64(block.timestamp);\r\n    }\r\n\r\n\r\n}\r\n\r\n/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Synthetix: YFIRewards.sol\r\n*\r\n* Docs: https://docs.synthetix.io/\r\n*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimHoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"rr\",\"type\":\"uint256\"}],\"name\":\"setRewardParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forWhom\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"userRewardPerTokenPaid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f0c5042a11830feaba227840402e2409b0fc9dc0000000000000000000000001566e68c6f1144d29d1dc610277930316457f968", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09e78877605afd459a4e8ab03dbc65845015da02181f59d1e22c6f94337022c0"}]}