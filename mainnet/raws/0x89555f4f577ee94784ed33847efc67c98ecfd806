{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File contracts/utils/introspection/IERC165.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /* function ownerOf(uint256 id) external view returns (address); */\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n     /**\r\n      * @dev Returns the token collection name.\r\n      */\r\n     function name() external view returns (string memory);\r\n\r\n     /**\r\n      * @dev Returns the token collection symbol.\r\n      */\r\n     function symbol() external view returns (string memory);\r\n\r\n\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n/* import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to minter\r\n    mapping(uint256 => address) internal _tokenMinter;\r\n\r\n    // Mapping from token ID to creator\r\n    mapping(uint256 => address) internal _tokenCreator;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    /* constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    } */\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_,string memory name_, string memory symbol_) {\r\n        _setURI(uri_);\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    function minterOf(uint256 id) public view virtual returns (address) {\r\n      address tokenMinter = _tokenMinter[id];\r\n      require(tokenMinter != address(0), \"ERC1155: owner query for nonexistent token\");\r\n\r\n      return tokenMinter;\r\n    }\r\n\r\n    /* function ownerOf(uint256 id) public view virtual returns (address) {\r\n      address tokenOwner = _tokenMinter[id];\r\n      require(tokenOwner != address(0), \"ERC1155: owner query for nonexistent token\");\r\n\r\n      return tokenOwner;\r\n    } */\r\n\r\n    function creatorOf(uint256 id) public view virtual returns (address) {\r\n      address creator = _tokenCreator[id];\r\n      require(creator != address(0), \"ERC1155: creator query for nonexistent token\");\r\n\r\n      return creator;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n\r\n   function setApproval(address account,address operator, bool approved) internal {\r\n       require(account != operator, \"ERC1155: setting approval status for self\");\r\n\r\n       _operatorApprovals[account][operator] = approved;\r\n       emit ApprovalForAll(account, operator, approved);\r\n   }\r\n\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-transferFrom}.\r\n     */\r\n    /* function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public {\r\n      require(isApprovedForAll(from, _msgSender()),\r\n          \"ERC1155: caller is not owner nor approved\"\r\n      );\r\n        _transferFrom(from, to, id, amount, data);\r\n    } */\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /* function _transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    } */\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] += amount;\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n        _tokenMinter[id] = account;\r\n        _tokenCreator[id] = account;\r\n    }\r\n\r\n    /* function _mint(\r\n      uint256 mint_type,\r\n      address creator,\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n        address operator = _msgSender();\r\n\r\n        if(mint_type==2){\r\n          _beforeTokenTransfer(operator, creator, account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n          _balances[id][account] += amount;\r\n          emit TransferSingle(operator, creator, account, id, amount);\r\n          _doSafeTransferAcceptanceCheck(operator, creator, account, id, amount, data);\r\n          _tokenMinter[id] = creator;\r\n        }else if(mint_type==1){\r\n          _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n          _balances[id][account] += amount;\r\n          emit TransferSingle(operator, address(0), account, id, amount);\r\n          _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n          _tokenMinter[id] = creator;\r\n        }else{\r\n          _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n          _balances[id][account] += amount;\r\n          emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n          _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n          _tokenMinter[id] = account;\r\n        }\r\n    } */\r\n\r\n    function setCreator(address creator,address account,uint256 id) internal {\r\n        require(account == _tokenMinter[id], \"ERC1155: not token owner\");\r\n        _tokenCreator[id] = creator;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 accountBalance = _balances[id][account];\r\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][account] = accountBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 accountBalance = _balances[id][account];\r\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][account] = accountBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n\r\n    /* function _setApprovalForAll(\r\n       address owner,\r\n       address operator,\r\n       bool approved\r\n   ) internal virtual {\r\n       _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    } */\r\n}\r\n\r\n\r\n// File contracts/utils/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFT_Marketplace.sol\r\n\r\npragma solidity ^0.8.0;\r\ncontract NFT_Marketplace is ERC1155{\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n    address ContractOwner;          // \ucee8\ud2b8\ub799\ud2b8 \uc18c\uc720\uc790\r\n    constructor() ERC1155(\"\",\"BLUEBAY GALLERY\",\"BBG\") {\r\n      ContractOwner = msg.sender;\r\n      setting[\"main\"] = adminSetting(0x34E366278EEfe4FEf648AC826528E38717FF900d,0,0x8C661806f716652B637728355cC4e2620D428F99); //\ud50c\ub7ab\ud3fc \uc9c0\uac11 \uc8fc\uc18c, \uc218\uc218\ub8cc\uc728,ERC20 \uc8fc\uc18c\r\n    }\r\n\r\n   modifier onlyowner {\r\n       require(ContractOwner == msg.sender);\r\n       _;\r\n   }\r\n\r\n    struct NFTAsset {\r\n      string metadata;\r\n      address owner;\r\n      uint id;\r\n      uint amount;\r\n      uint price;\r\n      uint flag;\r\n      uint currency; //0-ETH 1-ERC20\r\n    }\r\n\r\n    struct adminSetting {\r\n      address platformAddr;\r\n      uint feeRate;\r\n      address tokenAddr;\r\n    }\r\n\r\n    mapping (string => adminSetting) setting;\r\n\r\n    mapping(address=> mapping(uint => NFTAsset)) public ownedNFT;\r\n\r\n    NFTAsset[] public nft_asset;\r\n\r\n    function getContractOwner() public view returns (address) {\r\n        return ContractOwner;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyowner() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        ContractOwner = newOwner;\r\n    }\r\n    function setChangeFee(uint256 _feeRate) public onlyowner() {\r\n       setting[\"main\"].feeRate = _feeRate;\r\n    }\r\n    function setChangeAddr(address _platformAddr) public onlyowner() {\r\n       setting[\"main\"].platformAddr = _platformAddr;\r\n    }\r\n    function setChangeTokenAddr(address _tokenAddr) public onlyowner() {\r\n       setting[\"main\"].tokenAddr = _tokenAddr;\r\n    }\r\n    function setOwnedNFTFlag(address _owner,uint256 _tokenId,uint256 _flag) public onlyowner(){\r\n      require(_owner == ownedNFT[_owner][_tokenId].owner);\r\n      ownedNFT[_owner][_tokenId].flag = _flag;\r\n    }\r\n    function getFeeRate() public view returns(uint256){\r\n      return (setting[\"main\"].feeRate);\r\n    }\r\n    function getPlatformAddr() public view returns(address){\r\n      return (setting[\"main\"].platformAddr);\r\n    }\r\n    function getTokenAddr() public view returns(address){\r\n      return (setting[\"main\"].tokenAddr);\r\n    }\r\n    function getOwnedNFTPrice(address _owner,uint256 _tokenId) public view returns(uint256){\r\n      require(_owner == ownedNFT[_owner][_tokenId].owner);\r\n      return (ownedNFT[_owner][_tokenId].price);\r\n    }\r\n    function getOwnedNFTCurrency(address _owner,uint256 _tokenId) public view returns(uint256){\r\n      require(_owner == ownedNFT[_owner][_tokenId].owner);\r\n      return (ownedNFT[_owner][_tokenId].currency);\r\n    }\r\n    function getPriceFeeIncluded(address _owner,uint256 _tokenId, uint256 _fee) public view returns(uint256){\r\n      require(_owner == ownedNFT[_owner][_tokenId].owner);\r\n      return (ownedNFT[_owner][_tokenId].price.add(_fee));\r\n    }\r\n    function getOwnedNFTFlag(address _owner,uint256 _tokenId) public view returns(uint256){\r\n      require(_owner == ownedNFT[_owner][_tokenId].owner);\r\n      return (ownedNFT[_owner][_tokenId].flag);\r\n    }\r\n    function getOwnedNFTMetadata(address _owner,uint256 _tokenId) public view returns(string memory){\r\n      require(_owner == nft_asset[_tokenId].owner,\"No NFT owner\");\r\n      return (nft_asset[_tokenId].metadata);\r\n    }\r\n    //ERC20\r\n    function getERC20Balance() public view returns (uint256){\r\n      uint256 balance = IERC20(getTokenAddr()).balanceOf(msg.sender);\r\n      return balance;\r\n    }\r\n    function getERC20Total() public view returns (uint256){\r\n      uint256 supply = IERC20(getTokenAddr()).totalSupply();\r\n      return supply;\r\n    }\r\n    //ERC20\r\n\r\n    //\ubc1c\ud589\r\n    function mint(string memory _metadata, uint256 _amount, uint256 _price, uint256 _currency) public {//\uc774\uc6a9\uc790 \ubc1c\ud589\r\n        require(_currency < 2,\"currency::Check\");\r\n        uint256 assetId = nft_asset.length; // \uc720\uc77c\ud55c \uc791\ud488 ID\r\n        nft_asset.push(NFTAsset(_metadata,msg.sender,assetId,_amount,_price,0,_currency));\r\n        ownedNFT[msg.sender][assetId]= NFTAsset(_metadata,msg.sender,assetId,_amount,_price,0,_currency);\r\n        _mint(msg.sender, assetId, _amount, \"\"); //ERC1155 \ub4f1\ub85d\r\n    }\r\n    //\uc774\uc6a9\uc790 \uacbd\ub9e4 \ubc1c\ud589 \ucd94\uac00 \ub85c\uc5f4\ud2f0 \ubc1c\ud589\uc790\ub85c \ub4f1\ub85d\r\n\r\n    function mintTrade(string memory _metadata,  uint256 _price, uint256 _currency) public payable {//\uad00\ub9ac\uc790 \ubc1c\ud589 \uacbd\ub9e4 \uad6c\ub9e4, \uac1c\uc218 1\uac1c\ub85c \uace0\uc815\r\n       require(_currency < 2,\"currency::Check\");\r\n        if(_currency==0){//ETH \uad6c\ub9e4\r\n          require(msg.value > 0);\r\n          require(msg.value >= _price);\r\n          uint256 assetId = nft_asset.length; // \uc720\uc77c\ud55c \uc791\ud488 ID\r\n          nft_asset.push(NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency));\r\n          ownedNFT[msg.sender][assetId]= NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency);\r\n          _mint(msg.sender, assetId, 1, \"\"); //\uc720\uc800 NFT \uc18c\uc720\uad8c\r\n          setCreator(getPlatformAddr(),msg.sender,assetId);//\ub85c\uc5f4\ud2f0 \ubc1c\ud589\uc790 \ud50c\ub7ab\ud3fc\r\n          if (msg.value > 0) {\r\n            payable(getPlatformAddr()).transfer(msg.value);//\ud310\ub9e4 \ube44\uc6a9 \uc804\uc561 \ud50c\ub7ab\ud3fc \uc9c0\uac11\uc73c\ub85c\r\n          }\r\n        }else if(_currency==1){//ERC20 \uad6c\ub9e4\r\n          require(_price > 0);\r\n          uint256 assetId = nft_asset.length; // \uc720\uc77c\ud55c \uc791\ud488 ID\r\n          nft_asset.push(NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency));\r\n          ownedNFT[msg.sender][assetId]= NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency);\r\n          _mint(msg.sender, assetId, 1, \"\"); //\uc720\uc800 NFT \uc18c\uc720\uad8c\r\n          setCreator(getPlatformAddr(),msg.sender,assetId);//\ub85c\uc5f4\ud2f0 \ubc1c\ud589\uc790 \ud50c\ub7ab\ud3fc\r\n\r\n          IERC20(getTokenAddr()).transferFrom(msg.sender,getPlatformAddr(), _price); //\ud310\ub9e4 \ube44\uc6a9 \uc804\uc561 \ud50c\ub7ab\ud3fc \uc9c0\uac11\uc73c\ub85c\r\n\r\n        }\r\n    }\r\n\r\n    function mintAuction(address payable _owner,string memory _metadata, uint256 _fee, uint256 _price, uint256 _currency) public payable {//\uc774\uc6a9\uc790 \ubc1c\ud589 \uacbd\ub9e4 \uad6c\ub9e4,\uac1c\uc218 1\uac1c\ub85c \uace0\uc815\r\n       require(_currency < 2,\"currency::Check\");\r\n        if(_currency==0){//ETH \uad6c\ub9e4\r\n          require(msg.value > 0);\r\n          require(msg.value >= _price);\r\n          uint256 assetId = nft_asset.length; // \uc720\uc77c\ud55c \uc791\ud488 ID\r\n          nft_asset.push(NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency));\r\n          ownedNFT[msg.sender][assetId]= NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency);\r\n          _mint(msg.sender, assetId, 1, \"\"); //\uc720\uc800 NFT \uc18c\uc720\uad8c\r\n          setCreator(_owner,msg.sender,assetId);//\ub85c\uc5f4\ud2f0 \ubc1c\ud589\uc790 \uc774\uc6a9\uc790\r\n          if (msg.value > 0) {\r\n            platformFeeBuyer(_fee);//\uad6c\ub9e4 \uc218\uc218\ub8cc\r\n            platformFeeSeller(_owner,_fee);//\ud310\ub9e4 \uc218\uc218\ub8cc\r\n          }\r\n        }else if(_currency==1){//ERC20 \uad6c\ub9e4\r\n          require(_price > 0);\r\n          uint256 assetId = nft_asset.length; // \uc720\uc77c\ud55c \uc791\ud488 ID\r\n          nft_asset.push(NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency));\r\n          ownedNFT[msg.sender][assetId]= NFTAsset(_metadata,msg.sender,assetId,1,_price,1,_currency);\r\n          _mint(msg.sender, assetId, 1, \"\"); //\uc720\uc800 NFT \uc18c\uc720\uad8c\r\n          setCreator(_owner,msg.sender,assetId);//\ub85c\uc5f4\ud2f0 \ubc1c\ud589\uc790 \uc774\uc6a9\uc790\r\n\r\n          platformFeeBuyerToken(_fee);//\uad6c\ub9e4 \uc218\uc218\ub8cc\r\n          platformFeeSellerToken(_owner,_fee,_price);//\ud310\ub9e4 \uc218\uc218\ub8cc\r\n        }\r\n    }\r\n\r\n    function mintCreator(string memory _metadata, uint256 _amount, uint256 _price, uint256 _currency) public {//\uad00\ub9ac\uc790 \ubc1c\ud589 1\ucc28 \ud310\ub9e4\r\n        require(_currency < 2,\"currency::Check\");\r\n        uint256 assetId = nft_asset.length; // \uc720\uc77c\ud55c \uc791\ud488 ID\r\n        nft_asset.push(NFTAsset(_metadata,msg.sender,assetId,_amount,_price,0,_currency));\r\n        ownedNFT[msg.sender][assetId]= NFTAsset(_metadata,msg.sender,assetId,_amount,_price,0,_currency);\r\n        _mint(msg.sender, assetId, _amount, \"\"); //\uc720\uc800 NFT \uc18c\uc720\uad8c\r\n        setCreator(getPlatformAddr(),msg.sender,assetId); //\ub85c\uc5f4\ud2f0 \ubc1c\ud589\uc790 \ud50c\ub7ab\ud3fc\r\n    }\r\n    //\ubc1c\ud589\r\n\r\n    function priceChange(uint256 _tokenId, uint256 _amount, uint256 _price) public {//2\ucc28 \ud310\ub9e4 \uac00\uaca9 \ubcc0\uacbd\r\n        require(msg.sender == ownedNFT[msg.sender][_tokenId].owner);\r\n        require(ownedNFT[msg.sender][_tokenId].amount >= _amount);\r\n        require(ownedNFT[msg.sender][_tokenId].flag == 0);\r\n\r\n        ownedNFT[msg.sender][_tokenId].price = _price;\r\n\r\n    }\r\n\r\n\r\n    //\uad6c\ub9e4\r\n    function buyNFT(address payable _owner,uint256 _tokenId, uint256 _amount,uint256 _fee, uint256 _price, uint256 _currency) public payable { //NFT \uad6c\ub9e4\r\n      require(_owner!=msg.sender);\r\n      require(getOwnedNFTFlag(_owner,_tokenId) == 0,\"buy::Not for sale\");\r\n      require(getOwnedNFTCurrency(_owner,_tokenId) == _currency,\"buy::Currency does not match\");\r\n\r\n      if(_currency==0){//ETH \uad6c\ub9e4\r\n        require(getPriceFeeIncluded(_owner, _tokenId, _fee).mul(_amount) <= msg.value, \"buy::Must purchase the token for the correct price\" );\r\n\r\n        setApproval(_owner,msg.sender, true);\r\n        platformFeeBuyer(_fee);//\uad6c\ub9e4 \uc218\uc218\ub8cc\r\n        platformFeeSeller(_owner,_fee);//\ud310\ub9e4 \uc218\uc218\ub8cc\r\n        safeTransferFrom(_owner,msg.sender,_tokenId,_amount,\"0x0\");//\uc18c\uc720\uad8c \uc774\uc804\r\n\r\n        ownedNFT[msg.sender][_tokenId]= NFTAsset(getOwnedNFTMetadata(minterCheck(_tokenId),_tokenId),msg.sender,_tokenId,_amount,msg.value,1,_currency);\r\n\r\n\r\n        setApproval(_owner,msg.sender, false);\r\n\r\n      }else if(_currency==1){//ERC20 \uad6c\ub9e4\r\n        require(getPriceFeeIncluded(_owner, _tokenId, _fee).mul(_amount) <= _price, \"buy::Must purchase the token for the correct price\" );\r\n\r\n        setApproval(_owner,msg.sender, true);\r\n        platformFeeBuyerToken(_fee);//\uad6c\ub9e4 \uc218\uc218\ub8cc\r\n        platformFeeSellerToken(_owner,_fee,_price);//\ud310\ub9e4 \uc218\uc218\ub8cc\r\n        safeTransferFrom(_owner,msg.sender,_tokenId,_amount,\"0x0\");//\uc18c\uc720\uad8c \uc774\uc804\r\n        ownedNFT[msg.sender][_tokenId]= NFTAsset(getOwnedNFTMetadata(minterCheck(_tokenId),_tokenId),msg.sender,_tokenId,_amount,_price,1,_currency);\r\n\r\n\r\n        setApproval(_owner,msg.sender, false);\r\n      }\r\n    }\r\n    //\uad6c\ub9e4\r\n    //ETH \uacb0\uc81c\r\n    function platformFeeBuyer(uint256 _fee) public payable { //\uad6c\ub9e4\uc790 \uc9c0\uae09 \uc218\uc218\ub8cc\r\n      if (msg.value > 0 && getFeeRate()>0) {\r\n        payable(getPlatformAddr()).transfer(_fee); //\ucd94\uac00\ub41c \uad6c\ub9e4 \uc218\uc218\ub8cc\ub9cc \uc9c0\uae09\r\n      }\r\n    }\r\n    function platformFeeSeller(address payable _owner,uint256 _fee) public payable { //\ud310\ub9e4\uc790 \uc218\uc218\ub8cc\r\n      if (msg.value > 0 && getFeeRate()>0) {\r\n          uint256 platformFeeSeller =(msg.value.sub(_fee)).mul(getFeeRate()).div(10000);\r\n        payable(getPlatformAddr()).transfer(platformFeeSeller);\r\n        paymentArtwork(_owner,calculateTotalFee(platformFeeSeller,_fee));//\ud310\ub9e4\ub300\uae08 \uc9c0\uae09\r\n      }else if(msg.value > 0 && getFeeRate()==0){ //\uc218\uc218\ub8cc \uc81c\ub85c\r\n        paymentArtwork(_owner,0);//\ud310\ub9e4\ub300\uae08 \uc9c0\uae09\r\n      }\r\n    }\r\n    function paymentArtwork(address payable _from,uint256 _totalFee) public payable { //\ud310\ub9e4\ub300\uae08 \ud310\ub9e4\uc790 \uc9c0\uae09\r\n      if (msg.value > 0) {\r\n        _from.transfer(msg.value.sub(_totalFee));\r\n      }\r\n    }\r\n    //ETH \uacb0\uc81c\r\n\r\n    function calculateTotalFee(uint256 _sellerFee,uint256 _buyerFee) public view returns(uint256) {\r\n      return (_sellerFee.add(_buyerFee));\r\n    }\r\n\r\n    //ERC20 \uacb0\uc81c\r\n    function platformFeeBuyerToken(uint256 _fee) public payable { //\uad6c\ub9e4\uc790 \uc9c0\uae09 \uc218\uc218\ub8cc\r\n      if (getFeeRate()>0) {\r\n        IERC20(getTokenAddr()).transferFrom(msg.sender,getPlatformAddr(), _fee);\r\n      }\r\n    }\r\n    function platformFeeSellerToken(address payable _owner,uint256 _fee, uint256 _price) public payable { //\ud310\ub9e4\uc790 \uc218\uc218\ub8cc\r\n      if (getFeeRate()>0) {\r\n        uint256 platformFeeSeller =(_price.sub(_fee)).mul(getFeeRate()).div(10000);\r\n\r\n        IERC20(getTokenAddr()).transferFrom(msg.sender,getPlatformAddr(), platformFeeSeller);\r\n        paymentArtworkToken(_owner,calculateTotalFee(platformFeeSeller,_fee),_price);//\ud310\ub9e4\ub300\uae08 \uc9c0\uae09\r\n      }else if(getFeeRate()==0){ //\uc218\uc218\ub8cc \uc81c\ub85c\r\n        paymentArtworkToken(_owner,0,_price);//\ud310\ub9e4\ub300\uae08 \uc9c0\uae09\r\n      }\r\n    }\r\n    function paymentArtworkToken(address payable _from,uint256 _totalFee, uint256 _price) public payable { //\ud310\ub9e4\ub300\uae08 \ud310\ub9e4\uc790 \uc9c0\uae09\r\n      if (getFeeRate()>0) {\r\n        IERC20(getTokenAddr()).transferFrom(msg.sender,_from, _price.sub(_totalFee));\r\n      }else if(getFeeRate()==0){ //\uc218\uc218\ub8cc \uc81c\ub85c\r\n        IERC20(getTokenAddr()).transferFrom(msg.sender,_from, _price);\r\n      }\r\n    }\r\n    //ERC20 \uacb0\uc81c\r\n\r\n\r\n    function burn(uint256 _tokenId, uint256 _amount) public {\r\n      require(msg.sender == creatorCheck(_tokenId));\r\n      _burn(msg.sender, _tokenId, _amount); //ERC1155 \uc0ad\uc81c\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n      //RESELL 2\ucc28 \uad6c\ub9e4\r\n      function reSellMint(uint256 _tokenId, uint256 _amount, uint256 _price) public {//client -> listing(2\ucc28\ud310\ub9e4)\r\n          require(msg.sender == ownedNFT[msg.sender][_tokenId].owner);\r\n          require(ownedNFT[msg.sender][_tokenId].amount >= _amount);\r\n          if(getOwnedNFTPrice(msg.sender, _tokenId)>_price){\r\n            ownedNFT[msg.sender][_tokenId].price = _price;\r\n          }\r\n          ownedNFT[msg.sender][_tokenId].flag = 2;\r\n      }\r\n\r\n      function reSellPriceChange(uint256 _tokenId, uint256 _amount, uint256 _price) public {//2\ucc28 \ud310\ub9e4 \uac00\uaca9 \ubcc0\uacbd\r\n          require(msg.sender == ownedNFT[msg.sender][_tokenId].owner);\r\n          require(ownedNFT[msg.sender][_tokenId].amount >= _amount);\r\n          require(ownedNFT[msg.sender][_tokenId].flag == 2);\r\n\r\n          ownedNFT[msg.sender][_tokenId].price = _price;\r\n\r\n      }\r\n\r\n      function reSellDelist(uint256 _tokenId) public {\r\n          require(msg.sender == ownedNFT[msg.sender][_tokenId].owner);\r\n          require(ownedNFT[msg.sender][_tokenId].flag != 0);\r\n          ownedNFT[msg.sender][_tokenId].flag = 1;\r\n      }\r\n\r\n      function reSellBuyNFT(address payable _owner,uint256 _tokenId, uint256 _amount, uint256 _royalRate,uint256 _fee,uint256 _price) public payable { //NFT \uc7ac\ud310\ub9e4 \ud6c4 \uad6c\ub9e4\r\n        require(_owner!=msg.sender);\r\n        require(msg.sender!=creatorOf(_tokenId),\"resell::Cannot buy my NFT\");\r\n        require(getOwnedNFTFlag(_owner,_tokenId) == 2,\"resell::Not for sale\");\r\n        require(_royalRate <= 1000,\"resell::Royalty Check\"); //\ucd5c\ub300 10%\r\n        require(ownedNFT[_owner][_tokenId].amount >= _amount ,\"resell::Amount Check\"); //\ucd94\uac00\r\n        require(_amount == 1,\"resell::Amount Check\"); //\ucd94\uac00\r\n\r\n        if(getFeeRate()==0){//\ucd94\uac00\r\n            require(_fee==0,\"resell::Fee Check\"); //\ucd94\uac00\r\n        }\r\n\r\n        if(getOwnedNFTCurrency(_owner,_tokenId)==0){//ETH \uad6c\ub9e4\r\n          require(getPriceFeeIncluded(_owner, _tokenId, _fee).mul(_amount) <= msg.value, \"resell::Must purchase the token for the correct price\" );\r\n          setApproval(_owner,msg.sender, true);\r\n          platformFeeBuyer(_fee);//\uad6c\ub9e4 \uc218\uc218\ub8cc\r\n          uint256 ownerRoyalty = (msg.value.sub(_fee)).mul(_royalRate).div(10000);\r\n          royalties(ownerRoyalty,_tokenId);//\ubc1c\ud589\uc790 \ub85c\uc5f4\ud2f0\r\n          uint256 sellerCost = (msg.value - platformFeeReSeller(_fee)- ownerRoyalty);\r\n          reSellpayment(_owner,sellerCost);//\ud310\ub9e4 \ub300\uae08\r\n          ownedNFT[msg.sender][_tokenId]= NFTAsset(getOwnedNFTMetadata(minterCheck(_tokenId),_tokenId),msg.sender,_tokenId,_amount,msg.value,1,0);\r\n          safeTransferFrom(_owner,msg.sender,_tokenId,_amount,\"0x0\");\r\n          ownedNFT[_owner][_tokenId].amount = ownedNFT[_owner][_tokenId].amount.sub(1);\r\n          setApproval(_owner,msg.sender, false);\r\n        }else if(getOwnedNFTCurrency(_owner,_tokenId)==1){//ERC \uad6c\ub9e4\r\n          require(getPriceFeeIncluded(_owner, _tokenId, _fee).mul(_amount) <= _price, \"resell::Must purchase the token for the correct price\" );\r\n          setApproval(_owner,msg.sender, true);\r\n          platformFeeBuyerToken(_fee);//\uad6c\ub9e4 \uc218\uc218\ub8cc\r\n          uint256 ownerRoyalty = (_price.sub(_fee)).mul(_royalRate).div(10000);\r\n          royaltiesToken(ownerRoyalty,_tokenId);//\ubc1c\ud589\uc790 \ub85c\uc5f4\ud2f0\r\n          uint256 sellerCost = (_price - platformFeeReSellerToken(_fee,_price)- ownerRoyalty);\r\n          reSellpaymentToken(_owner,sellerCost);//\ud310\ub9e4 \ub300\uae08\r\n          ownedNFT[msg.sender][_tokenId]= NFTAsset(getOwnedNFTMetadata(minterCheck(_tokenId),_tokenId),msg.sender,_tokenId,_amount,_price,1,1);\r\n          safeTransferFrom(_owner,msg.sender,_tokenId,_amount,\"0x0\");\r\n          ownedNFT[_owner][_tokenId].amount = ownedNFT[_owner][_tokenId].amount.sub(1);\r\n          setApproval(_owner,msg.sender, false);\r\n        }\r\n\r\n\r\n\r\n      }\r\n\r\n      function royaltiesToken(uint256 _royalty,uint256 _tokenId) public payable { //\ubc1c\ud589\uc790 \ub85c\uc5f4\ud2f0\r\n        if (_royalty > 0) {\r\n            address creator = creatorOf(_tokenId);\r\n            IERC20(getTokenAddr()).transferFrom(msg.sender,creator, _royalty);\r\n        }\r\n      }\r\n      function platformFeeReSellerToken(uint256 _fee,uint256 _price) public payable returns(uint256) { //\ud310\ub9e4\uc790 \uc218\uc218\ub8cc\r\n          if(getFeeRate()>0){\r\n            uint256 platformFeeSeller =(_price.sub(_fee)).mul(getFeeRate()).div(10000);\r\n            IERC20(getTokenAddr()).transferFrom(msg.sender,getPlatformAddr(), platformFeeSeller);\r\n            return(calculateTotalFee(platformFeeSeller,_fee));\r\n          }else if(getFeeRate()==0){\r\n            return(0);\r\n          }\r\n      }\r\n      function reSellpaymentToken(address payable _from,uint256 _cost) public payable { //\ube44\uc6a9 \uc9c0\ubd88\r\n        if (_cost > 0) {\r\n          IERC20(getTokenAddr()).transferFrom(msg.sender,_from, _cost);\r\n        }\r\n      }\r\n\r\n      function royalties(uint256 _royalty,uint256 _tokenId) public payable { //\ubc1c\ud589\uc790 \ub85c\uc5f4\ud2f0\r\n        if (_royalty > 0) {\r\n            address creator = creatorOf(_tokenId);\r\n            payable(creator).transfer(_royalty);\r\n        }\r\n      }\r\n      function platformFeeReSeller(uint256 _fee) public payable returns(uint256) { //\ud310\ub9e4\uc790 \uc218\uc218\ub8cc\r\n        if (msg.value > 0) {\r\n          uint256 platformFeeSeller =(msg.value.sub(_fee)).mul(getFeeRate()).div(10000);\r\n          payable(getPlatformAddr()).transfer(platformFeeSeller);\r\n          return(calculateTotalFee(platformFeeSeller,_fee));\r\n        }\r\n      }\r\n      function reSellpayment(address payable _from,uint256 _cost) public payable { //\ube44\uc6a9 \uc9c0\ubd88\r\n        if (_cost > 0) {\r\n          _from.transfer(_cost);\r\n        }\r\n      }\r\n      //RESELL 2\ucc28 \uad6c\ub9e4\r\n\r\n\r\n\r\n      function minterCheck(uint256 _tokenId) public view returns (address){ //minter \ud655\uc778\r\n        return minterOf(_tokenId);\r\n      }\r\n      function creatorCheck(uint256 _tokenId) public view returns (address){ //creator \ud655\uc778 \ub85c\uc5f4\ud2f0 \ubc1b\uc744 \uc0ac\ub78c\r\n          return creatorOf(_tokenId);\r\n      }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyerFee\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creatorCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"creatorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedNFTCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedNFTFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedNFTMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedNFTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"getPriceFeeIncluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"mintAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"mintCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"mintTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"minterCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"minterOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nft_asset\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedNFT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"}],\"name\":\"paymentArtwork\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"paymentArtworkToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"platformFeeBuyer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"platformFeeBuyerToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"platformFeeReSeller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"platformFeeReSellerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"platformFeeSeller\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"platformFeeSellerToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"priceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royalRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"reSellBuyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reSellDelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"reSellMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"reSellPriceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"reSellpayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"reSellpaymentToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltiesToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddr\",\"type\":\"address\"}],\"name\":\"setChangeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"setChangeTokenAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"setOwnedNFTFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFT_Marketplace", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5258eb11c9ac1a4b6be64e5ea1df8ed6ad59032e2a512abb46e50d951097ba6"}]}