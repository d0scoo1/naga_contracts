{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.8.4;\r\n\r\n/// @notice Single owner access control contract.\r\n/// @author Modified from SushiSwap (https://github.com/sushiswap/trident/blob/master/contracts/TridentOwnable.sol)\r\nabstract contract KaliOwnable {\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    event ClaimTransferred(address indexed from, address indexed to);\r\n\r\n    error NotOwner();\r\n\r\n    error NotPendingOwner();\r\n\r\n    address public owner;\r\n\r\n    address public pendingOwner;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert NotOwner();\r\n\r\n        _;\r\n    }\r\n\r\n    function _init(address owner_) internal {\r\n        owner = owner_;\r\n\r\n        emit OwnershipTransferred(address(0), owner_);\r\n    }\r\n\r\n    function claimOwner() public virtual {\r\n        if (msg.sender != pendingOwner) revert NotPendingOwner();\r\n\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n\r\n        owner = msg.sender;\r\n\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    function transferOwner(address to, bool direct) public onlyOwner virtual {\r\n        if (direct) {\r\n            owner = to;\r\n\r\n            emit OwnershipTransferred(msg.sender, to);\r\n        } else {\r\n            pendingOwner = to;\r\n\r\n            emit ClaimTransferred(msg.sender, to);\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// License-Identifier: AGPL-3.0-only\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\ncontract KaliERC20 is KaliOwnable {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    event PauseFlipped(bool paused);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERRORS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    error Paused();\r\n\r\n    error Initialized();\r\n\r\n    error NoArrayParity();\r\n\r\n    error SignatureExpired();\r\n\r\n    error InvalidSignature();\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string public details;\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC-20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            DAO STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    bool public paused;\r\n\r\n    modifier notPaused() {\r\n        if (paused) revert Paused();\r\n\r\n        _;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function init(\r\n        string calldata name_,\r\n        string calldata symbol_,\r\n        string calldata details_,\r\n        address[] calldata accounts_,\r\n        uint256[] calldata amounts_,\r\n        bool paused_,\r\n        address owner_\r\n    ) public virtual {\r\n        if (INITIAL_CHAIN_ID != 0) revert Initialized();\r\n\r\n        if (accounts_.length != amounts_.length) revert NoArrayParity();\r\n\r\n        name = name_;\r\n\r\n        symbol = symbol_;\r\n\r\n        details = details_;\r\n\r\n        paused = paused_;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n\r\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\r\n\r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            for (uint256 i; i < accounts_.length; i++) {\r\n                _mint(accounts_[i], amounts_[i]);\r\n            }\r\n        }\r\n\r\n        KaliOwnable._init(owner_);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC-20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public notPaused virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public notPaused virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // saves gas for limited approvals\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        if (block.timestamp > deadline) revert SignatureExpired();\r\n\r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    '\\x19\\x01',\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(\r\n                        abi.encode(\r\n                            keccak256(\r\n                                'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\r\n                            ),\r\n                            owner,\r\n                            spender,\r\n                            value,\r\n                            nonces[owner]++,\r\n                            deadline\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            if (recoveredAddress == address(0) || recoveredAddress != owner) revert InvalidSignature();\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : _computeDomainSeparator();\r\n    }\r\n\r\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                    keccak256(bytes(name)),\r\n                    keccak256('1'),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // cannot underflow because a user's balance\r\n        // will never be larger than the total supply\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 amount) public virtual {\r\n        uint256 allowed = allowance[from][msg.sender]; // saves gas for limited approvals\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            GOV LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner virtual {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function ownerBurn(address from, uint256 amount) public onlyOwner virtual {\r\n        _burn(from, amount);\r\n    }\r\n\r\n    function flipPause() public onlyOwner virtual {\r\n        paused = !paused;\r\n\r\n        emit PauseFlipped(paused);\r\n    }\r\n}\r\n\r\n/// @notice Helper utility that enables calling multiple local methods in a single call.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol)\r\nabstract contract Multicall {\r\n    function multicall(bytes[] calldata data) public virtual returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        \r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            for (uint256 i = 0; i < data.length; i++) {\r\n                (bool success, bytes memory result) = address(this).delegatecall(data[i]);\r\n\r\n                if (!success) {\r\n                    if (result.length < 68) revert();\r\n                    \r\n                    assembly {\r\n                        result := add(result, 0x04)\r\n                    }\r\n                    \r\n                    revert(abi.decode(result, (string)));\r\n                }\r\n                results[i] = result;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Factory to deploy Kali ERC20.\r\ncontract KaliERC20factory is Multicall {\r\n    event ERC20deployed(\r\n        KaliERC20 indexed kaliERC20, \r\n        string name, \r\n        string symbol, \r\n        string details, \r\n        address[] accounts,\r\n        uint256[] amounts,\r\n        bool paused,\r\n        address indexed owner\r\n    );\r\n\r\n    error NullDeploy();\r\n\r\n    address private immutable erc20Master;\r\n\r\n    constructor(address erc20Master_) {\r\n        erc20Master = erc20Master_;\r\n    }\r\n    \r\n    function deployKaliERC20(\r\n        string calldata name_,\r\n        string memory symbol_,\r\n        string calldata details_,\r\n        address[] calldata accounts_,\r\n        uint256[] calldata amounts_,\r\n        bool paused_,\r\n        address owner_\r\n    ) public virtual returns (KaliERC20 kaliERC20) {\r\n        kaliERC20 = KaliERC20(_cloneAsMinimalProxy(erc20Master, name_));\r\n        \r\n        kaliERC20.init(\r\n            name_,\r\n            symbol_,\r\n            details_,\r\n            accounts_,\r\n            amounts_,\r\n            paused_,\r\n            owner_\r\n        );\r\n\r\n        emit ERC20deployed(kaliERC20, name_, symbol_, details_, accounts_, amounts_, paused_, owner_);\r\n    }\r\n\r\n    /// @dev modified from Aelin (https://github.com/AelinXYZ/aelin/blob/main/contracts/MinimalProxyFactory.sol)\r\n    function _cloneAsMinimalProxy(address base, string memory name_) internal virtual returns (address clone) {\r\n        bytes memory createData = abi.encodePacked(\r\n            // constructor\r\n            bytes10(0x3d602d80600a3d3981f3),\r\n            // proxy code\r\n            bytes10(0x363d3d373d3d3d363d73),\r\n            base,\r\n            bytes15(0x5af43d82803e903d91602b57fd5bf3)\r\n        );\r\n\r\n        bytes32 salt = keccak256(bytes(name_));\r\n\r\n        assembly {\r\n            clone := create2(\r\n                0, // no value\r\n                add(createData, 0x20), // data\r\n                mload(createData),\r\n                salt\r\n            )\r\n        }\r\n        // if CREATE2 fails for some reason, address(0) is returned\r\n        if (clone == address(0)) revert NullDeploy();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Master_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NullDeploy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract KaliERC20\",\"name\":\"kaliERC20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC20deployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"deployKaliERC20\",\"outputs\":[{\"internalType\":\"contract KaliERC20\",\"name\":\"kaliERC20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KaliERC20factory", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000c6ba77745a136c71f35629e5aa2a7fb9b5c1a25f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://53c6925e4c41f949941c67dba475b81dfe87926570f3f8b9a59db5bbcd12016c"}]}