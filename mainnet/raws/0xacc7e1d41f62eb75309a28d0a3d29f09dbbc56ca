{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Rentable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n// Inheritance\\nimport {IRentable} from \\\"./interfaces/IRentable.sol\\\";\\nimport {IRentableAdminEvents} from \\\"./interfaces/IRentableAdminEvents.sol\\\";\\nimport {IRentableHooks} from \\\"./interfaces/IRentableHooks.sol\\\";\\nimport {IORentableHooks} from \\\"./interfaces/IORentableHooks.sol\\\";\\nimport {IWRentableHooks} from \\\"./interfaces/IWRentableHooks.sol\\\";\\nimport {BaseSecurityInitializable} from \\\"./security/BaseSecurityInitializable.sol\\\";\\nimport {RentableStorageV1} from \\\"./RentableStorageV1.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n// Libraries\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// References\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {IERC721ReadOnlyProxy} from \\\"./interfaces/IERC721ReadOnlyProxy.sol\\\";\\nimport {IERC721ExistExtension} from \\\"./interfaces/IERC721ExistExtension.sol\\\";\\nimport {ICollectionLibrary} from \\\"./collections/ICollectionLibrary.sol\\\";\\n\\nimport {IWalletFactory} from \\\"./wallet/IWalletFactory.sol\\\";\\nimport {SimpleWallet} from \\\"./wallet/SimpleWallet.sol\\\";\\nimport {RentableTypes} from \\\"./RentableTypes.sol\\\";\\n\\n/// @title Rentable main contract\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\n/// @notice Main entry point to interact with Rentable protocol\\ncontract Rentable is\\n    IRentable,\\n    IRentableAdminEvents,\\n    IORentableHooks,\\n    IWRentableHooks,\\n    BaseSecurityInitializable,\\n    ReentrancyGuardUpgradeable,\\n    RentableStorageV1\\n{\\n    /* ========== LIBRARIES ========== */\\n\\n    using Address for address;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// @dev Prevents calling a function from anyone except the owner\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    modifier onlyOTokenOwner(address tokenAddress, uint256 tokenId) {\\n        _getExistingORentableCheckOwnership(tokenAddress, tokenId, msg.sender);\\n        _;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except respective OToken\\n    /// @param tokenAddress wrapped token address\\n    modifier onlyOToken(address tokenAddress) {\\n        require(\\n            msg.sender == _orentables[tokenAddress],\\n            \\\"Only proper ORentables allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except respective WToken\\n    /// @param tokenAddress wrapped token address\\n    modifier onlyWToken(address tokenAddress) {\\n        require(\\n            msg.sender == _wrentables[tokenAddress],\\n            \\\"Only proper WRentables allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except respective OToken or WToken\\n    /// @param tokenAddress wrapped token address\\n    modifier onlyOTokenOrWToken(address tokenAddress) {\\n        require(\\n            msg.sender == _orentables[tokenAddress] ||\\n                msg.sender == _wrentables[tokenAddress],\\n            \\\"Only w/o tokens are authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Prevents calling a library when not set for the respective wrapped token\\n    /// @param tokenAddress wrapped token address\\n    // slither-disable-next-line incorrect-modifier\\n    modifier skipIfLibraryNotSet(address tokenAddress) {\\n        if (_libraries[tokenAddress] != address(0)) {\\n            _;\\n        }\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    /// @dev Instatiate Rentable\\n    /// @param governance address for governance role\\n    /// @param operator address for operator role\\n    constructor(address governance, address operator) {\\n        _initialize(governance, operator);\\n    }\\n\\n    /* ---------- INITIALIZER ---------- */\\n\\n    /// @dev Initialize Rentable (to be used with proxies)\\n    /// @param governance address for governance role\\n    /// @param operator address for operator role\\n    function initialize(address governance, address operator) external {\\n        _initialize(governance, operator);\\n    }\\n\\n    /// @dev For internal usage in the initializer external method\\n    /// @param governance address for governance role\\n    /// @param operator address for operator role\\n    function _initialize(address governance, address operator)\\n        internal\\n        initializer\\n    {\\n        __BaseSecurityInitializable_init(governance, operator);\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /// @dev Associate the event hooks library to the specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param libraryAddress library address\\n    function setLibrary(address tokenAddress, address libraryAddress)\\n        external\\n        onlyGovernance\\n    {\\n        address previousValue = _libraries[tokenAddress];\\n\\n        _libraries[tokenAddress] = libraryAddress;\\n\\n        emit LibraryChanged(tokenAddress, previousValue, libraryAddress);\\n    }\\n\\n    /// @dev Associate the otoken to the specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param oRentable otoken address\\n    function setORentable(address tokenAddress, address oRentable)\\n        external\\n        onlyGovernance\\n    {\\n        address previousValue = _orentables[tokenAddress];\\n\\n        _orentables[tokenAddress] = oRentable;\\n\\n        emit ORentableChanged(tokenAddress, previousValue, oRentable);\\n    }\\n\\n    /// @dev Associate the otoken to the specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param wRentable otoken address\\n    function setWRentable(address tokenAddress, address wRentable)\\n        external\\n        onlyGovernance\\n    {\\n        address previousValue = _wrentables[tokenAddress];\\n\\n        _wrentables[tokenAddress] = wRentable;\\n\\n        emit WRentableChanged(tokenAddress, previousValue, wRentable);\\n    }\\n\\n    /// @dev Set wallet factory\\n    /// @param walletFactory wallet factory address\\n    function setWalletFactory(address walletFactory) external onlyGovernance {\\n        require(walletFactory != address(0), \\\"Wallet Factory cannot be 0\\\");\\n\\n        address previousWalletFactory = walletFactory;\\n\\n        _walletFactory = walletFactory;\\n\\n        emit WalletFactoryChanged(previousWalletFactory, walletFactory);\\n    }\\n\\n    /// @dev Set fee (percentage)\\n    /// @param newFee fee in 1e4 units (e.g. 100% = 10000)\\n    function setFee(uint16 newFee) external onlyGovernance {\\n        require(newFee <= BASE_FEE, \\\"Fee greater than max value\\\");\\n\\n        uint16 previousFee = _fee;\\n\\n        _fee = newFee;\\n\\n        emit FeeChanged(previousFee, newFee);\\n    }\\n\\n    /// @dev Set fee collector address\\n    /// @param newFeeCollector fee collector address\\n    function setFeeCollector(address payable newFeeCollector)\\n        external\\n        onlyGovernance\\n    {\\n        require(newFeeCollector != address(0), \\\"FeeCollector cannot be null\\\");\\n\\n        address previousFeeCollector = _feeCollector;\\n\\n        _feeCollector = newFeeCollector;\\n\\n        emit FeeCollectorChanged(previousFeeCollector, newFeeCollector);\\n    }\\n\\n    /// @dev Enable payment token (ERC20)\\n    /// @param paymentToken payment token address\\n    function enablePaymentToken(address paymentToken) external onlyGovernance {\\n        uint8 previousStatus = _paymentTokenAllowlist[paymentToken];\\n\\n        _paymentTokenAllowlist[paymentToken] = ERC20_TOKEN;\\n\\n        emit PaymentTokenAllowListChanged(\\n            paymentToken,\\n            previousStatus,\\n            ERC20_TOKEN\\n        );\\n    }\\n\\n    /// @dev Enable payment token (ERC1155)\\n    /// @param paymentToken payment token address\\n    function enable1155PaymentToken(address paymentToken)\\n        external\\n        onlyGovernance\\n    {\\n        uint8 previousStatus = _paymentTokenAllowlist[paymentToken];\\n\\n        _paymentTokenAllowlist[paymentToken] = ERC1155_TOKEN;\\n\\n        emit PaymentTokenAllowListChanged(\\n            paymentToken,\\n            previousStatus,\\n            ERC1155_TOKEN\\n        );\\n    }\\n\\n    /// @dev Disable payment token (ERC1155)\\n    /// @param paymentToken payment token address\\n    function disablePaymentToken(address paymentToken) external onlyGovernance {\\n        uint8 previousStatus = _paymentTokenAllowlist[paymentToken];\\n\\n        _paymentTokenAllowlist[paymentToken] = NOT_ALLOWED_TOKEN;\\n\\n        emit PaymentTokenAllowListChanged(\\n            paymentToken,\\n            previousStatus,\\n            NOT_ALLOWED_TOKEN\\n        );\\n    }\\n\\n    /// @dev Toggle o/w token to call on-behalf a selector on the wrapped token\\n    /// @param caller o/w token address\\n    /// @param selector selector bytes on the target wrapped token\\n    /// @param enabled true to enable, false to disable\\n    function enableProxyCall(\\n        address caller,\\n        bytes4 selector,\\n        bool enabled\\n    ) external onlyGovernance {\\n        bool previousStatus = _proxyAllowList[caller][selector];\\n\\n        _proxyAllowList[caller][selector] = enabled;\\n\\n        emit ProxyCallAllowListChanged(\\n            caller,\\n            selector,\\n            previousStatus,\\n            enabled\\n        );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /* ---------- Internal ---------- */\\n\\n    /// @dev Get and check (reverting) otoken exist for a specific token\\n    /// @param tokenAddress wrapped token address\\n    /// @return oRentable otoken instance\\n    function _getExistingORentable(address tokenAddress)\\n        internal\\n        view\\n        returns (address oRentable)\\n    {\\n        oRentable = _orentables[tokenAddress];\\n        require(oRentable != address(0), \\\"Token currently not supported\\\");\\n    }\\n\\n    /// @dev Get and check (reverting) otoken user ownership\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param user user to verify ownership\\n    /// @return oRentable otoken instance\\n    function _getExistingORentableCheckOwnership(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address user\\n    ) internal view returns (address oRentable) {\\n        oRentable = _getExistingORentable(tokenAddress);\\n\\n        require(\\n            IERC721Upgradeable(oRentable).ownerOf(tokenId) == user,\\n            \\\"The token must be yours\\\"\\n        );\\n    }\\n\\n    /// @dev Show rental validity\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @return true if is expired, false otw\\n    function _isExpired(address tokenAddress, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // slither-disable-next-line timestamp\\n        return block.timestamp >= (_expiresAt[tokenAddress][tokenId]);\\n    }\\n\\n    /* ---------- Public ---------- */\\n\\n    /// @notice Get library address for the specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @return library address\\n    function getLibrary(address tokenAddress) external view returns (address) {\\n        return _libraries[tokenAddress];\\n    }\\n\\n    /// @notice Get OToken address associated to the specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @return OToken address\\n    function getORentable(address tokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _orentables[tokenAddress];\\n    }\\n\\n    /// @notice Get WToken address associated to the specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @return WToken address\\n    function getWRentable(address tokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _wrentables[tokenAddress];\\n    }\\n\\n    /// @notice Get wallet factory address\\n    /// @return wallet factory address\\n    function getWalletFactory() external view returns (address) {\\n        return _walletFactory;\\n    }\\n\\n    /// @notice Show current protocol fee\\n    /// @return protocol fee in 1e4 units, e.g. 100 = 1%\\n    function getFee() external view returns (uint16) {\\n        return _fee;\\n    }\\n\\n    /// @notice Get protocol fee collector\\n    /// @return protocol fee collector address\\n    function getFeeCollector() external view returns (address payable) {\\n        return _feeCollector;\\n    }\\n\\n    /// @notice Show a token is enabled as payment token\\n    /// @param paymentTokenAddress payment token address\\n    /// @return status, see RentableStorageV1 for values\\n    function getPaymentTokenAllowlist(address paymentTokenAddress)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        return _paymentTokenAllowlist[paymentTokenAddress];\\n    }\\n\\n    /// @notice Show O/W Token can invoke selector on respective wrapped token\\n    /// @param caller O/W Token address\\n    /// @param selector function selector to invoke\\n    /// @return a bool representing enabled or not\\n    function isEnabledProxyCall(address caller, bytes4 selector)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _proxyAllowList[caller][selector];\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function userWallet(address user)\\n        external\\n        view\\n        override\\n        returns (address payable)\\n    {\\n        return _wallets[user];\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function rentalConditions(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (RentableTypes.RentalConditions memory)\\n    {\\n        return _rentalConditions[tokenAddress][tokenId];\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function expiresAt(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _expiresAt[tokenAddress][tokenId];\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function isExpired(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isExpired(tokenAddress, tokenId);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /* ---------- Internal ---------- */\\n\\n    /// @dev Create user wallet address\\n    /// @param user user address\\n    /// @return wallet address\\n    function _createWalletForUser(address user)\\n        internal\\n        returns (address payable wallet)\\n    {\\n        // slither-disable-next-line reentrancy-benign\\n        wallet = IWalletFactory(_walletFactory).createWallet(\\n            address(this),\\n            user\\n        );\\n\\n        require(\\n            wallet != address(0),\\n            \\\"Wallet Factory is not returning a valid wallet address\\\"\\n        );\\n\\n        _wallets[user] = wallet;\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit WalletCreated(user, wallet);\\n\\n        return wallet;\\n    }\\n\\n    /// @dev Get user wallet address (create if not exist)\\n    /// @param user user address\\n    /// @return wallet address\\n    function _getOrCreateWalletForUser(address user)\\n        internal\\n        returns (address payable wallet)\\n    {\\n        wallet = _wallets[user];\\n\\n        if (wallet == address(0)) {\\n            wallet = _createWalletForUser(user);\\n        }\\n\\n        return wallet;\\n    }\\n\\n    /// @dev Deposit only a wrapped token and mint respective OToken\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param to user to mint\\n    function _deposit(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address to\\n    ) internal {\\n        address oRentable = _getExistingORentable(tokenAddress);\\n\\n        require(\\n            IERC721Upgradeable(tokenAddress).ownerOf(tokenId) == address(this),\\n            \\\"Token not deposited\\\"\\n        );\\n\\n        IERC721ReadOnlyProxy(oRentable).mint(to, tokenId);\\n\\n        _postDeposit(tokenAddress, tokenId, to);\\n\\n        emit Deposit(to, tokenAddress, tokenId);\\n    }\\n\\n    /// @dev Deposit and list a wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param to user to mint\\n    /// @param rc rental conditions see RentableTypes.RentalConditions\\n    function _depositAndList(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address to,\\n        RentableTypes.RentalConditions memory rc\\n    ) internal {\\n        _deposit(tokenAddress, tokenId, to);\\n\\n        _createOrUpdateRentalConditions(to, tokenAddress, tokenId, rc);\\n    }\\n\\n    /// @dev Set rental conditions for a wrapped token\\n    /// @param user who is changing the conditions\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param rc rental conditions see RentableTypes.RentalConditions\\n    function _createOrUpdateRentalConditions(\\n        address user,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        RentableTypes.RentalConditions memory rc\\n    ) internal {\\n        require(\\n            _paymentTokenAllowlist[rc.paymentTokenAddress] != NOT_ALLOWED_TOKEN,\\n            \\\"Not supported payment token\\\"\\n        );\\n\\n        require(\\n            rc.minTimeDuration <= rc.maxTimeDuration,\\n            \\\"Minimum duration cannot be greater than maximum\\\"\\n        );\\n\\n        _rentalConditions[tokenAddress][tokenId] = rc;\\n\\n        _postList(\\n            tokenAddress,\\n            tokenId,\\n            user,\\n            rc.minTimeDuration,\\n            rc.maxTimeDuration,\\n            rc.pricePerSecond\\n        );\\n\\n        emit UpdateRentalConditions(\\n            tokenAddress,\\n            tokenId,\\n            rc.paymentTokenAddress,\\n            rc.paymentTokenId,\\n            rc.minTimeDuration,\\n            rc.maxTimeDuration,\\n            rc.pricePerSecond,\\n            rc.privateRenter\\n        );\\n    }\\n\\n    /// @dev Cancel rental conditions for a wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    function _deleteRentalConditions(address tokenAddress, uint256 tokenId)\\n        internal\\n    {\\n        // save gas instead of dropping all the structure\\n        (_rentalConditions[tokenAddress][tokenId]).maxTimeDuration = 0;\\n    }\\n\\n    /// @dev Expire explicitely rental and update data structures for a specific wrapped token\\n    /// @param currentUserHolder (optional) current user holder address\\n    /// @param oTokenOwner (optional) otoken owner address\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param skipExistCheck assume or not wtoken id exists (gas optimization)\\n    /// @return currentlyRented true if rental is not expired\\n    // slither-disable-next-line calls-loop\\n    function _expireRental(\\n        address currentUserHolder,\\n        address oTokenOwner,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        bool skipExistCheck\\n    ) internal returns (bool currentlyRented) {\\n        if (\\n            skipExistCheck ||\\n            IERC721ExistExtension(_wrentables[tokenAddress]).exists(tokenId)\\n        ) {\\n            if (_isExpired(tokenAddress, tokenId)) {\\n                address currentRentee = oTokenOwner == address(0)\\n                    ? IERC721Upgradeable(_orentables[tokenAddress]).ownerOf(\\n                        tokenId\\n                    )\\n                    : oTokenOwner;\\n\\n                // recover asset from renter smart wallet to rentable contracts\\n                address wRentable = _wrentables[tokenAddress];\\n                // cannot be 0x0 because transferFrom avoid it\\n                address renter = currentUserHolder == address(0)\\n                    ? IERC721ExistExtension(wRentable).ownerOf(tokenId, true)\\n                    : currentUserHolder;\\n                address payable renterWallet = _wallets[renter];\\n                // slither-disable-next-line unused-return\\n                SimpleWallet(renterWallet).execute(\\n                    tokenAddress,\\n                    0,\\n                    abi.encodeWithSelector(\\n                        IERC721Upgradeable.transferFrom.selector, // we don't want to trigger onERC721Receiver\\n                        renterWallet,\\n                        address(this),\\n                        tokenId\\n                    ),\\n                    false\\n                );\\n\\n                // burn\\n                IERC721ReadOnlyProxy(_wrentables[tokenAddress]).burn(tokenId);\\n\\n                // post\\n                _postExpireRental(tokenAddress, tokenId, currentRentee);\\n                emit RentEnds(tokenAddress, tokenId);\\n            } else {\\n                currentlyRented = true;\\n            }\\n        }\\n\\n        return currentlyRented;\\n    }\\n\\n    /// @dev Execute custom logic after deposit via wrapped token library\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param user depositor\\n    function _postDeposit(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address user\\n    ) internal skipIfLibraryNotSet(tokenAddress) {\\n        // slither-disable-next-line unused-return\\n        _libraries[tokenAddress].functionDelegateCall(\\n            abi.encodeWithSelector(\\n                ICollectionLibrary.postDeposit.selector,\\n                tokenAddress,\\n                tokenId,\\n                user\\n            ),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Execute custom logic after listing via wrapped token library\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param user lister\\n    /// @param maxTimeDuration max duration allowed for the rental\\n    /// @param pricePerSecond price per second in payment token units\\n    function _postList(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address user,\\n        uint256 minTimeDuration,\\n        uint256 maxTimeDuration,\\n        uint256 pricePerSecond\\n    ) internal skipIfLibraryNotSet(tokenAddress) {\\n        // slither-disable-next-line unused-return\\n        _libraries[tokenAddress].functionDelegateCall(\\n            abi.encodeWithSelector(\\n                ICollectionLibrary.postList.selector,\\n                tokenAddress,\\n                tokenId,\\n                user,\\n                minTimeDuration,\\n                maxTimeDuration,\\n                pricePerSecond\\n            ),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Execute custom logic after rent via wrapped token library\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param duration rental duration\\n    /// @param from rentee\\n    /// @param to renter\\n    /// @param toWallet receiver wallet\\n    function _postRent(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 duration,\\n        address from,\\n        address to,\\n        address toWallet\\n    ) internal skipIfLibraryNotSet(tokenAddress) {\\n        // slither-disable-next-line unused-return\\n        _libraries[tokenAddress].functionDelegateCall(\\n            abi.encodeWithSelector(\\n                ICollectionLibrary.postRent.selector,\\n                tokenAddress,\\n                tokenId,\\n                duration,\\n                from,\\n                to,\\n                toWallet\\n            ),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Execute custom logic after rent expires via wrapped token library\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param from rentee\\n    // slither-disable-next-line calls-loop\\n    function _postExpireRental(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address from\\n    ) internal skipIfLibraryNotSet(tokenAddress) {\\n        // slither-disable-next-line unused-return\\n        _libraries[tokenAddress].functionDelegateCall(\\n            abi.encodeWithSelector(\\n                ICollectionLibrary.postExpireRental.selector,\\n                tokenAddress,\\n                tokenId,\\n                from\\n            ),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /* ---------- Public ---------- */\\n\\n    /// @inheritdoc IRentable\\n    function createWalletForUser(address user)\\n        external\\n        override\\n        returns (address payable wallet)\\n    {\\n        require(\\n            user != address(0),\\n            \\\"Cannot create a smart wallet for the void\\\"\\n        );\\n\\n        require(_wallets[user] == address(0), \\\"Wallet already existing\\\");\\n\\n        return _createWalletForUser(user);\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override whenNotPaused nonReentrant returns (bytes4) {\\n        if (data.length == 0) {\\n            _deposit(msg.sender, tokenId, from);\\n        } else {\\n            _depositAndList(\\n                msg.sender,\\n                tokenId,\\n                from,\\n                abi.decode(data, (RentableTypes.RentalConditions))\\n            );\\n        }\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function withdraw(address tokenAddress, uint256 tokenId)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        address user = msg.sender;\\n        address oRentable = _getExistingORentableCheckOwnership(\\n            tokenAddress,\\n            tokenId,\\n            user\\n        );\\n\\n        require(\\n            !_expireRental(address(0), user, tokenAddress, tokenId, false),\\n            \\\"Current rent still pending\\\"\\n        );\\n\\n        _deleteRentalConditions(tokenAddress, tokenId);\\n\\n        IERC721ReadOnlyProxy(oRentable).burn(tokenId);\\n\\n        IERC721Upgradeable(tokenAddress).safeTransferFrom(\\n            address(this),\\n            user,\\n            tokenId\\n        );\\n\\n        emit Withdraw(tokenAddress, tokenId);\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function createOrUpdateRentalConditions(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        RentableTypes.RentalConditions calldata rc\\n    ) external override whenNotPaused onlyOTokenOwner(tokenAddress, tokenId) {\\n        _createOrUpdateRentalConditions(msg.sender, tokenAddress, tokenId, rc);\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function deleteRentalConditions(address tokenAddress, uint256 tokenId)\\n        external\\n        override\\n        whenNotPaused\\n        onlyOTokenOwner(tokenAddress, tokenId)\\n    {\\n        _deleteRentalConditions(tokenAddress, tokenId);\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function rent(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 duration\\n    ) external payable override whenNotPaused nonReentrant {\\n        // 1. check token is deposited and available for rental\\n        address oRentable = _getExistingORentable(tokenAddress);\\n        address payable rentee = payable(\\n            IERC721Upgradeable(oRentable).ownerOf(tokenId)\\n        );\\n\\n        RentableTypes.RentalConditions memory rcs = _rentalConditions[\\n            tokenAddress\\n        ][tokenId];\\n        require(rcs.maxTimeDuration > 0, \\\"Not available\\\");\\n\\n        require(\\n            !_expireRental(address(0), rentee, tokenAddress, tokenId, false),\\n            \\\"Current rent still pending\\\"\\n        );\\n\\n        // 2. validate renter offer with rentee conditions\\n        require(duration > 0, \\\"Duration cannot be zero\\\");\\n\\n        require(\\n            duration >= rcs.minTimeDuration,\\n            \\\"Duration lower than conditions\\\"\\n        );\\n\\n        require(\\n            duration <= rcs.maxTimeDuration,\\n            \\\"Duration greater than conditions\\\"\\n        );\\n\\n        require(\\n            rcs.privateRenter == address(0) || rcs.privateRenter == msg.sender,\\n            \\\"Rental reserved for another user\\\"\\n        );\\n\\n        // 3. mint wtoken\\n        uint256 eta = block.timestamp + duration;\\n        _expiresAt[tokenAddress][tokenId] = eta;\\n        IERC721ReadOnlyProxy(_wrentables[tokenAddress]).mint(\\n            msg.sender,\\n            tokenId\\n        );\\n\\n        // 4. transfer token to the renter smart wallet\\n        address renterWallet = _getOrCreateWalletForUser(msg.sender);\\n        IERC721Upgradeable(tokenAddress).safeTransferFrom(\\n            address(this),\\n            renterWallet,\\n            tokenId,\\n            \\\"\\\"\\n        );\\n\\n        // 5. fees distribution\\n        // gross due amount\\n        uint256 paymentQty = rcs.pricePerSecond * duration;\\n        // protocol and rentee fees calc\\n        uint256 feesForFeeCollector = (paymentQty * _fee) / BASE_FEE;\\n        uint256 feesForRentee = paymentQty - feesForFeeCollector;\\n\\n        if (rcs.paymentTokenAddress == address(0)) {\\n            require(msg.value >= paymentQty, \\\"Not enough funds\\\");\\n            if (feesForFeeCollector > 0) {\\n                Address.sendValue(_feeCollector, feesForFeeCollector);\\n            }\\n\\n            Address.sendValue(rentee, feesForRentee);\\n\\n            // refund eventual remaining\\n            if (msg.value > paymentQty) {\\n                Address.sendValue(payable(msg.sender), msg.value - paymentQty);\\n            }\\n        } else if (\\n            _paymentTokenAllowlist[rcs.paymentTokenAddress] == ERC20_TOKEN\\n        ) {\\n            if (feesForFeeCollector > 0) {\\n                IERC20Upgradeable(rcs.paymentTokenAddress).safeTransferFrom(\\n                    msg.sender,\\n                    _feeCollector,\\n                    feesForFeeCollector\\n                );\\n            }\\n\\n            IERC20Upgradeable(rcs.paymentTokenAddress).safeTransferFrom(\\n                msg.sender,\\n                rentee,\\n                feesForRentee\\n            );\\n        } else {\\n            if (feesForFeeCollector > 0) {\\n                IERC1155Upgradeable(rcs.paymentTokenAddress).safeTransferFrom(\\n                    msg.sender,\\n                    _feeCollector,\\n                    rcs.paymentTokenId,\\n                    feesForFeeCollector,\\n                    \\\"\\\"\\n                );\\n            }\\n\\n            IERC1155Upgradeable(rcs.paymentTokenAddress).safeTransferFrom(\\n                msg.sender,\\n                rentee,\\n                rcs.paymentTokenId,\\n                feesForRentee,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        // 6. after rent custom logic\\n        _postRent(\\n            tokenAddress,\\n            tokenId,\\n            duration,\\n            rentee,\\n            msg.sender,\\n            renterWallet\\n        );\\n\\n        emit Rent(\\n            rentee,\\n            msg.sender,\\n            tokenAddress,\\n            tokenId,\\n            rcs.paymentTokenAddress,\\n            rcs.paymentTokenId,\\n            eta\\n        );\\n    }\\n\\n    /// @inheritdoc IRentable\\n    function expireRental(address tokenAddress, uint256 tokenId)\\n        external\\n        override\\n        whenNotPaused\\n        returns (bool currentlyRented)\\n    {\\n        return\\n            _expireRental(address(0), address(0), tokenAddress, tokenId, false);\\n    }\\n\\n    /// @notice Batch expireRental\\n    /// @param tokenAddresses array of wrapped token addresses\\n    /// @param tokenIds array of wrapped token id\\n    function expireRentals(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds\\n    ) external whenNotPaused {\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            _expireRental(\\n                address(0),\\n                address(0),\\n                tokenAddresses[i],\\n                tokenIds[i],\\n                false\\n            );\\n        }\\n    }\\n\\n    /* ---------- Public Permissioned ---------- */\\n\\n    /// @inheritdoc IORentableHooks\\n    function afterOTokenTransfer(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override whenNotPaused onlyOToken(tokenAddress) {\\n        bool rented = _expireRental(\\n            address(0),\\n            from,\\n            tokenAddress,\\n            tokenId,\\n            false\\n        );\\n\\n        address lib = _libraries[tokenAddress];\\n        if (lib != address(0)) {\\n            address wRentable = _wrentables[tokenAddress];\\n            address currentRenterWallet = IERC721ExistExtension(wRentable)\\n                .exists(tokenId)\\n                ? _wallets[IERC721Upgradeable(wRentable).ownerOf(tokenId)]\\n                : address(0);\\n            // slither-disable-next-line unused-return\\n            lib.functionDelegateCall(\\n                abi.encodeWithSelector(\\n                    ICollectionLibrary.postOTokenTransfer.selector,\\n                    tokenAddress,\\n                    tokenId,\\n                    from,\\n                    to,\\n                    currentRenterWallet,\\n                    rented\\n                ),\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IWRentableHooks\\n    function afterWTokenTransfer(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override whenNotPaused onlyWToken(tokenAddress) {\\n        // we need to pass from as current holder in the expire func\\n        // otw in the case is expired, wewould try to fetch from the recipient wallet\\n        // which doesn't hold it\\n        // could be better to check for expire in a preWTokenTransfer\\n\\n        bool currentlyRented = _expireRental(\\n            from,\\n            address(0),\\n            tokenAddress,\\n            tokenId,\\n            true\\n        );\\n\\n        if (currentlyRented) {\\n            // move to the recipient smart wallet\\n            address payable fromWallet = _wallets[from];\\n            // slither-disable-next-line unused-return\\n            SimpleWallet(fromWallet).execute(\\n                tokenAddress,\\n                0,\\n                abi.encodeWithSignature(\\n                    \\\"safeTransferFrom(address,address,uint256)\\\",\\n                    fromWallet,\\n                    _getOrCreateWalletForUser(to),\\n                    tokenId\\n                ),\\n                false\\n            );\\n\\n            // execute lib code\\n            address lib = _libraries[tokenAddress];\\n            if (lib != address(0)) {\\n                // slither-disable-next-line unused-return\\n                lib.functionDelegateCall(\\n                    abi.encodeWithSelector(\\n                        ICollectionLibrary.postWTokenTransfer.selector,\\n                        tokenAddress,\\n                        tokenId,\\n                        from,\\n                        to,\\n                        _wallets[to]\\n                    ),\\n                    \\\"\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRentableHooks\\n    function proxyCall(\\n        address to,\\n        bytes4 selector,\\n        bytes memory data\\n    )\\n        external\\n        payable\\n        override\\n        whenNotPaused\\n        onlyOTokenOrWToken(to) // this implicitly checks `to` is the associated wrapped token\\n        returns (bytes memory)\\n    {\\n        require(\\n            _proxyAllowList[msg.sender][selector],\\n            \\\"Proxy call unauthorized\\\"\\n        );\\n\\n        return\\n            to.functionCallWithValue(\\n                bytes.concat(selector, data),\\n                msg.value,\\n                \\\"\\\"\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRentable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n// Inheritance\\nimport {IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport {IRentableEvents} from \\\"./IRentableEvents.sol\\\";\\n\\n// References\\nimport {RentableTypes} from \\\"../RentableTypes.sol\\\";\\n\\n/// @title Rentable protocol user interface\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IRentable is IRentableEvents, IERC721ReceiverUpgradeable {\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Get wallet for user\\n    /// @param user user address\\n    /// @return wallet address\\n    function userWallet(address user) external view returns (address payable);\\n\\n    /// @notice Show current rental conditions for a specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @return rental conditions, see RentableTypes.RentalConditions for fields\\n    function rentalConditions(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (RentableTypes.RentalConditions memory);\\n\\n    /// @notice Show rental expiration time for a specific wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @return expiration timestamp\\n    function expiresAt(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Show rental validity\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @return true if is expired, false otw\\n    function isExpired(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Create user wallet address\\n    /// @param user user address\\n    /// @return wallet address\\n    function createWalletForUser(address user)\\n        external\\n        returns (address payable wallet);\\n\\n    /// @notice Entry point for deposits used by wrapped token safeTransferFrom\\n    /// @param from depositor\\n    /// @param tokenId wrapped token id\\n    /// @param data (optional) abi encoded RentableTypes.RentalConditions rental conditions for listing\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4);\\n\\n    /// @notice Withdraw and unwrap deposited token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    function withdraw(address tokenAddress, uint256 tokenId) external;\\n\\n    /// @notice Manage rental conditions and listing\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param rc rental conditions see RentableTypes.RentalConditions\\n    function createOrUpdateRentalConditions(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        RentableTypes.RentalConditions calldata rc\\n    ) external;\\n\\n    /// @notice De-list a wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    function deleteRentalConditions(address tokenAddress, uint256 tokenId)\\n        external;\\n\\n    /// @notice Rent a wrapped token\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param duration duration in seconds\\n    function rent(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 duration\\n    ) external payable;\\n\\n    /// @notice Trigger on-chain rental expire for expired rentals\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    function expireRental(address tokenAddress, uint256 tokenId)\\n        external\\n        returns (bool currentlyRented);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRentableAdminEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n/// @title Rentable protocol admin events\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IRentableAdminEvents {\\n    /* ========== EVENTS ========== */\\n\\n    /// @notice Emitted on library change\\n    /// @param tokenAddress respective token address\\n    /// @param previousValue previous library address\\n    /// @param newValue new library address\\n    event LibraryChanged(\\n        address indexed tokenAddress,\\n        address indexed previousValue,\\n        address indexed newValue\\n    );\\n\\n    /// @notice Emitted on ORentable change\\n    /// @param tokenAddress respective token address\\n    /// @param previousValue previous orentable address\\n    /// @param newValue new orentable address\\n    event ORentableChanged(\\n        address indexed tokenAddress,\\n        address indexed previousValue,\\n        address indexed newValue\\n    );\\n\\n    /// @notice Emitted on WRentable change\\n    /// @param tokenAddress respective token address\\n    /// @param previousValue previous wrentable address\\n    /// @param newValue new wrentable address\\n    event WRentableChanged(\\n        address indexed tokenAddress,\\n        address indexed previousValue,\\n        address indexed newValue\\n    );\\n\\n    /// @notice Emitted on WalletFactory change\\n    /// @param previousWalletFactory previous wallet factory address\\n    /// @param newWalletFactory new wallet factory address\\n    event WalletFactoryChanged(\\n        address indexed previousWalletFactory,\\n        address indexed newWalletFactory\\n    );\\n\\n    /// @notice Emitted on fee change\\n    /// @param previousFee previous fee\\n    /// @param newFee new fee\\n    event FeeChanged(uint16 indexed previousFee, uint16 indexed newFee);\\n\\n    /// @notice Emitted on fee collector change\\n    /// @param previousFeeCollector previous fee\\n    /// @param newFeeCollector new fee\\n    event FeeCollectorChanged(\\n        address indexed previousFeeCollector,\\n        address indexed newFeeCollector\\n    );\\n\\n    /// @notice Emitted on payment token allowlist change\\n    /// @param paymentToken payment token address\\n    /// @param previousStatus previous allowlist status\\n    /// @param newStatus new allowlist status\\n    event PaymentTokenAllowListChanged(\\n        address indexed paymentToken,\\n        uint8 indexed previousStatus,\\n        uint8 indexed newStatus\\n    );\\n\\n    /// @notice Emitted on proxy call allowlist change\\n    /// @param caller o/w token address\\n    /// @param selector selector bytes on the target wrapped token\\n    /// @param previousStatus previous status\\n    /// @param newStatus new status\\n    event ProxyCallAllowListChanged(\\n        address indexed caller,\\n        bytes4 selector,\\n        bool previousStatus,\\n        bool newStatus\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRentableHooks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n/// @title Rentable Shared Hooks\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IRentableHooks {\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @dev Implementer will execute the call on the wrapped token\\n    /// @param to wrapped token address\\n    /// @param selector function selector on the target\\n    /// @param data function data\\n    function proxyCall(\\n        address to,\\n        bytes4 selector,\\n        bytes memory data\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IORentableHooks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n// Inheritance\\nimport {IRentableHooks} from \\\"./IRentableHooks.sol\\\";\\n\\n/// @title OToken Rentable Hooks\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IORentableHooks is IRentableHooks {\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @dev Notify the implementer about a token transfer\\n    /// @param tokenAddress wrapped token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param tokenId wrapped token id\\n    function afterOTokenTransfer(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWRentableHooks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n// Inheritance\\nimport {IRentableHooks} from \\\"./IRentableHooks.sol\\\";\\n\\n/// @title WToken Rentable Hooks\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IWRentableHooks is IRentableHooks {\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @dev Notify the implementer about a token transfer\\n    /// @param tokenAddress wrapped token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param tokenId wrapped token id\\n    function afterWTokenTransfer(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/security/BaseSecurityInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n// Inheritance\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// Libraries\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// References\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\n/// @title Base contract for Rentable\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\n/// @notice Implement simple security helpers for safe operations\\ncontract BaseSecurityInitializable is Initializable, PausableUpgradeable {\\n    ///  Base security:\\n    ///  1. establish simple two-roles contract, _governance and _operator.\\n    ///  Operator can be changed only by _governance. Governance update needs acceptance.\\n    ///  2. can be paused by _operator or _governance via SCRAM()\\n    ///  3. only _governance can recover from pause via unpause\\n    ///  4. only _governance can withdraw in emergency\\n    ///  5. only _governance execute any tx in emergency\\n\\n    /* ========== LIBRARIES ========== */\\n    using Address for address;\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /* ========== CONSTANTS ========== */\\n    address private constant ETHER = address(0);\\n\\n    /* ========== STATE VARIABLES ========== */\\n    // current governance address\\n    address private _governance;\\n    // new governance address awaiting to be confirmed\\n    address private _pendingGovernance;\\n    // operator address\\n    address private _operator;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// @dev Prevents calling a function from anyone except governance\\n    modifier onlyGovernance() {\\n        require(msg.sender == _governance, \\\"Only Governance\\\");\\n        _;\\n    }\\n\\n    /// @dev Prevents calling a function from anyone except governance or operator\\n    modifier onlyOperatorOrGovernance() {\\n        require(\\n            msg.sender == _operator || msg.sender == _governance,\\n            \\\"Only Operator or Governance\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /// @notice Emitted on operator change\\n    /// @param previousOperator previous operator address\\n    /// @param newOperator new operator address\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    /// @notice Emitted on governance change proposal\\n    /// @param currentGovernance current governance address\\n    /// @param proposedGovernance new proposed governance address\\n    event GovernanceProposed(\\n        address indexed currentGovernance,\\n        address indexed proposedGovernance\\n    );\\n\\n    /// @notice Emitted on governance change\\n    /// @param previousGovernance previous governance address\\n    /// @param newGovernance new governance address\\n    event GovernanceTransferred(\\n        address indexed previousGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    /* ---------- INITIALIZER ---------- */\\n\\n    /// @dev For internal usage in the child initializers\\n    /// @param governance address for governance role\\n    /// @param operator address for operator role\\n    // slither-disable-next-line naming-convention\\n    function __BaseSecurityInitializable_init(\\n        address governance,\\n        address operator\\n    ) internal onlyInitializing {\\n        __Pausable_init();\\n\\n        require(governance != address(0), \\\"Governance cannot be null\\\");\\n\\n        _governance = governance;\\n        _operator = operator;\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /// @notice Propose new governance\\n    /// @param proposedGovernance governance address\\n    function setGovernance(address proposedGovernance) external onlyGovernance {\\n        // enable to cancel a proposal setting proposedGovernance to 0\\n        // slither-disable-next-line missing-zero-check\\n        _pendingGovernance = proposedGovernance;\\n\\n        emit GovernanceProposed(_governance, proposedGovernance);\\n    }\\n\\n    /// @notice Accept proposed governance\\n    function acceptGovernance() external {\\n        require(msg.sender == _pendingGovernance, \\\"Only Proposed Governance\\\");\\n\\n        address previousGovernance = _governance;\\n        _governance = _pendingGovernance;\\n        _pendingGovernance = address(0);\\n\\n        emit GovernanceTransferred(previousGovernance, _governance);\\n    }\\n\\n    /// @notice Set operator\\n    /// @param newOperator new operator address\\n    function setOperator(address newOperator) external onlyGovernance {\\n        address previousOperator = _operator;\\n\\n        // governance can disable operator role\\n        // slither-disable-next-line missing-zero-check\\n        _operator = newOperator;\\n\\n        emit OperatorTransferred(previousOperator, newOperator);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Shows current governance\\n    /// @return governance address\\n    // slither-disable-next-line external-function\\n    function getGovernance() public view returns (address) {\\n        return _governance;\\n    }\\n\\n    /// @notice Shows upcoming governance\\n    /// @return upcoming pending governance address\\n    // slither-disable-next-line external-function\\n    function getPendingGovernance() public view returns (address) {\\n        return _pendingGovernance;\\n    }\\n\\n    /// @notice Shows current operator\\n    /// @return governance operator\\n    // slither-disable-next-line external-function\\n    function getOperator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Pause all operations\\n    // slither-disable-next-line naming-convention\\n    function SCRAM() external onlyOperatorOrGovernance {\\n        _pause();\\n    }\\n\\n    /// @notice Returns to normal state\\n    function unpause() external onlyGovernance {\\n        _unpause();\\n    }\\n\\n    /// @notice Withdraw asset ERC20 or ETH\\n    /// @param assetAddress Asset to be withdrawn\\n    function emergencyWithdrawERC20ETH(address assetAddress)\\n        external\\n        whenPaused\\n        onlyGovernance\\n    {\\n        uint256 assetBalance;\\n        if (assetAddress == ETHER) {\\n            address self = address(this);\\n            assetBalance = self.balance;\\n            payable(msg.sender).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20Upgradeable(assetAddress).balanceOf(\\n                address(this)\\n            );\\n            IERC20Upgradeable(assetAddress).safeTransfer(\\n                msg.sender,\\n                assetBalance\\n            );\\n        }\\n    }\\n\\n    /// @notice Batch withdraw asset ERC721\\n    /// @param assetAddress token address\\n    /// @param tokenIds array of token ids\\n    function emergencyBatchWithdrawERC721(\\n        address assetAddress,\\n        uint256[] calldata tokenIds,\\n        bool notSafe\\n    ) external whenPaused onlyGovernance {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (notSafe) {\\n                // slither-disable-next-line calls-loop\\n                IERC721Upgradeable(assetAddress).transferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    tokenIds[i]\\n                );\\n            } else {\\n                // slither-disable-next-line calls-loop\\n                IERC721Upgradeable(assetAddress).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    tokenIds[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Batch withdraw asset ERC1155\\n    /// @param assetAddress token address\\n    /// @param tokenIds array of token ids\\n    function emergencyBatchWithdrawERC1155(\\n        address assetAddress,\\n        uint256[] calldata tokenIds\\n    ) external whenPaused onlyGovernance {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            // slither-disable-next-line calls-loop\\n            uint256 assetBalance = IERC1155Upgradeable(assetAddress).balanceOf(\\n                address(this),\\n                tokenIds[i]\\n            );\\n\\n            // slither-disable-next-line calls-loop\\n            IERC1155Upgradeable(assetAddress).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                tokenIds[i],\\n                assetBalance,\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Execute any tx in emergency\\n    /// @param to target\\n    /// @param value ether value\\n    /// @param data function+data\\n    /// @param isDelegateCall true will execute a delegate call, false a call\\n    function emergencyExecute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        bool isDelegateCall\\n    )\\n        external\\n        payable\\n        whenPaused\\n        onlyGovernance\\n        returns (bytes memory returnData)\\n    {\\n        if (isDelegateCall) {\\n            returnData = to.functionDelegateCall(data, \\\"\\\");\\n        } else {\\n            returnData = to.functionCallWithValue(data, value, \\\"\\\");\\n        }\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    // slither-disable-next-line unused-state\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"contracts/RentableStorageV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n// References\\nimport {IERC721ReadOnlyProxy} from \\\"./interfaces/IERC721ReadOnlyProxy.sol\\\";\\nimport {RentableTypes} from \\\"./RentableTypes.sol\\\";\\n\\n/// @title Rentable Storage contract\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ncontract RentableStorageV1 {\\n    /* ========== CONSTANTS ========== */\\n\\n    // paymentTokenAllowlist possible values\\n    // used during fee distribution\\n    uint8 internal constant NOT_ALLOWED_TOKEN = 0;\\n    uint8 internal constant ERC20_TOKEN = 1;\\n    uint8 internal constant ERC1155_TOKEN = 2;\\n\\n    // percentage protocol fee, min 0.01%\\n    uint16 internal constant BASE_FEE = 10000;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // (token address, token id) => rental conditions mapping\\n    // slither-disable-next-line naming-convention\\n    mapping(address => mapping(uint256 => RentableTypes.RentalConditions))\\n        internal _rentalConditions;\\n\\n    // (token address, token id) => rental expiration mapping\\n    // slither-disable-next-line naming-convention\\n    mapping(address => mapping(uint256 => uint256)) internal _expiresAt;\\n\\n    // token address => o/w token mapping\\n    // slither-disable-next-line naming-convention,similar-names\\n    mapping(address => address) internal _orentables;\\n    // slither-disable-next-line naming-convention,similar-names\\n    mapping(address => address) internal _wrentables;\\n\\n    // token address => library mapping, for custom logic execution\\n    // slither-disable-next-line naming-convention\\n    mapping(address => address) internal _libraries;\\n\\n    // allowed payment tokens, see fee distribution in Rentable-rent\\n    // slither-disable-next-line naming-convention\\n    mapping(address => uint8) internal _paymentTokenAllowlist;\\n\\n    // enabled selectors for target, see Rentable-proxyCall\\n    // slither-disable-next-line naming-convention\\n    mapping(address => mapping(bytes4 => bool)) internal _proxyAllowList;\\n\\n    // user wallet factory\\n    // slither-disable-next-line naming-convention\\n    address internal _walletFactory;\\n\\n    // user => wallet mapping, for account abstraction\\n    // slither-disable-next-line naming-convention\\n    mapping(address => address payable) internal _wallets;\\n\\n    // protocol fee\\n    // slither-disable-next-line naming-convention\\n    uint16 internal _fee;\\n    // protocol fee collector\\n    // slither-disable-next-line naming-convention\\n    address payable internal _feeCollector;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721ReadOnlyProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n/// @title ERC721 Proxy Interface\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\n/// @notice O/W token interface used by Rentable main contract\\ninterface IERC721ReadOnlyProxy {\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Get wrapped token address\\n    /// @return wrapped token address\\n    function getWrapped() external view returns (address);\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mint a token\\n    /// @param to receiver\\n    /// @param tokenId token id\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Burn a token\\n    /// @param tokenId token id\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721ExistExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n/// @title ERC721 extension with exist function public\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IERC721ExistExtension {\\n    /* ========== VIEWS ========== */\\n    /// @notice Verify a specific token id exist\\n    /// @param tokenId token id\\n    /// @return true for existing token, false otw\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice Check ownership eventually skipping expire check\\n    /// @param tokenId token id\\n    /// @param skipExpirationCheck when true, return current owner skipping expire check\\n    /// @return owner address\\n    function ownerOf(uint256 tokenId, bool skipExpirationCheck)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/collections/ICollectionLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n/// @title Collection library interface\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\n/// @notice Implementer can realize custom logic for specific collections attaching to these hooks\\ninterface ICollectionLibrary {\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Called after a deposit\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param user depositor\\n    function postDeposit(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address user\\n    ) external;\\n\\n    /// @notice Called after a listing\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param user lister\\n    /// @param maxTimeDuration max duration allowed for the rental\\n    /// @param pricePerSecond price per second in payment token units\\n    function postList(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address user,\\n        uint256 minTimeDuration,\\n        uint256 maxTimeDuration,\\n        uint256 pricePerSecond\\n    ) external;\\n\\n    /// @notice Called after a rent\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param duration rental duration\\n    /// @param from rentee\\n    /// @param to renter\\n    /// @param toWallet renter wallet\\n    function postRent(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 duration,\\n        address from,\\n        address to,\\n        address payable toWallet\\n    ) external payable;\\n\\n    /// @notice Called after expiration settlement on-chain\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param from rentee\\n    function postExpireRental(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address from\\n    ) external payable;\\n\\n    /// @notice Called after WToken transfer\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param toWallet receiver wallet\\n    function postWTokenTransfer(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        address payable toWallet\\n    ) external;\\n\\n    /// @notice Called after OToken transfer\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param currentRenterWallet current renter wallet\\n    /// @param rented true when a rental is in place, false otw\\n    function postOTokenTransfer(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        address payable currentRenterWallet,\\n        bool rented\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/wallet/IWalletFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n/// @title Rentable wallet factory interface\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\n/// @notice Wallet factory interface\\ninterface IWalletFactory {\\n    /// @notice Create a new wallet\\n    /// @param owner address for owner role\\n    /// @param user address for user role\\n    /// @return wallet newly created\\n    function createWallet(address owner, address user)\\n        external\\n        returns (address payable wallet);\\n}\\n\"\r\n    },\r\n    \"contracts/wallet/SimpleWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n// Inheritance\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ERC721HolderUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport {ERC1155HolderUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n\\n// References\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Rentable account abstraction\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\n/// @notice Account Abstraction\\ncontract SimpleWallet is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC721HolderUpgradeable,\\n    ERC1155HolderUpgradeable\\n{\\n    /* ========== LIBRARIES ========== */\\n\\n    using ECDSA for bytes32;\\n    using Address for address;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    bytes4 private constant ERC1271_IS_VALID_SIGNATURE =\\n        bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"));\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // current owner for the content\\n    address private _user;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    /// @dev Instatiate SimpleWallet\\n    /// @param owner address for owner role\\n    /// @param user address for user role\\n    constructor(address owner, address user) {\\n        _initialize(owner, user);\\n    }\\n\\n    /* ---------- INITIALIZER ---------- */\\n\\n    /// @notice Initializer for the wallet\\n    /// @param owner address for owner role\\n    /// @param user address for user role\\n    function initialize(address owner, address user) external {\\n        _initialize(owner, user);\\n    }\\n\\n    /// @dev Internal intializer for the wallet\\n    /// @param owner address for owner role\\n    /// @param user address for user role\\n    function _initialize(address owner, address user) internal initializer {\\n        require(owner != address(0), \\\"Owner cannot be null\\\");\\n\\n        __Ownable_init();\\n        _transferOwnership(owner);\\n        __ERC721Holder_init();\\n        __ERC1155Holder_init();\\n\\n        _setUser(user);\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /* ---------- Internal ---------- */\\n\\n    /// @dev Set current user for the wallet\\n    /// @param user user address\\n    function _setUser(address user) internal {\\n        // it's ok to se to 0x0, disabling signatures\\n        // slither-disable-next-line missing-zero-check\\n        _user = user;\\n    }\\n\\n    /* ---------- Public ---------- */\\n\\n    /// @notice Set current user for the wallet\\n    /// @param user user address\\n    function setUser(address user) external onlyOwner {\\n        _setUser(user);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Set current user for the wallet\\n    /// @return user address\\n    function getUser() external view returns (address user) {\\n        return _user;\\n    }\\n\\n    /// @notice Implementation of EIP 1271.\\n    /// Should return whether the signature provided is valid for the provided data.\\n    /// @param msgHash Hash of a message signed on the behalf of address(this)\\n    /// @param signature Signature byte array associated with _msgHash\\n    function isValidSignature(bytes32 msgHash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4)\\n    {\\n        // For the first implementation\\n        // we won't recursively check if user is smart wallet too\\n        // we assume user is an EOA\\n        address signer = msgHash.recover(signature);\\n        require(_user == signer, \\\"Invalid signer\\\");\\n        return ERC1271_IS_VALID_SIGNATURE;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Execute any tx\\n    /// @param to target\\n    /// @param value ether value\\n    /// @param data function+data\\n    /// @param isDelegateCall true will execute a delegate call, false a call\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        bool isDelegateCall\\n    ) external payable onlyOwner returns (bytes memory returnData) {\\n        if (isDelegateCall) {\\n            returnData = to.functionDelegateCall(data, \\\"\\\");\\n        } else {\\n            returnData = to.functionCallWithValue(data, value, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Withdraw ETH\\n    /// @param amount amount to withdraw\\n    function withdrawETH(uint256 amount) external onlyOwner {\\n        Address.sendValue(payable(msg.sender), amount);\\n    }\\n\\n    /// @notice Can receive ETH\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/RentableTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n/// @title Rentable Types\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\nlibrary RentableTypes {\\n    struct RentalConditions {\\n        uint256 minTimeDuration; // min duration allowed for the rental\\n        uint256 maxTimeDuration; // max duration allowed for the rental\\n        uint256 pricePerSecond; // price per second in payment token units\\n        uint256 paymentTokenId; // payment token id allowed for the rental (0 for ETH and ERC20)\\n        address paymentTokenAddress; // payment token address allowed for the rental\\n        address privateRenter; // restrict rent only to this address\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRentableEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.7;\\n\\n/// @title Rentable protocol events\\n/// @author Rentable Team <hello@rentable.world>\\n/// @custom:security Rentable Security Team <security@rentable.world>\\ninterface IRentableEvents {\\n    /* ========== EVENTS ========== */\\n\\n    /// @notice Emitted on smart wallet created for user\\n    /// @param user user address\\n    /// @param walletAddress smart wallet address\\n    event WalletCreated(address indexed user, address indexed walletAddress);\\n\\n    /// @notice Emitted on token deposit\\n    /// @param who depositor\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    event Deposit(\\n        address indexed who,\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    /// @notice Emitted on withdrawal\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    event Withdraw(address indexed tokenAddress, uint256 indexed tokenId);\\n\\n    /// @notice Emitted on rental conditions changes\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param paymentTokenAddress payment token address allowed for the rental\\n    /// @param paymentTokenId payment token id allowed for the rental (0 for ETH and ERC20)\\n    /// @param maxTimeDuration max duration allowed for the rental\\n    /// @param pricePerSecond price per second in payment token units\\n    /// @param privateRenter rental allowed only for this renter\\n    event UpdateRentalConditions(\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId,\\n        address paymentTokenAddress,\\n        uint256 paymentTokenId,\\n        uint256 minTimeDuration,\\n        uint256 maxTimeDuration,\\n        uint256 pricePerSecond,\\n        address privateRenter\\n    );\\n\\n    /// @notice Emitted on a successful rent\\n    /// @param from rentee\\n    /// @param to renter\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    /// @param paymentTokenAddress payment token address allowed for the rental\\n    /// @param paymentTokenId payment token id allowed for the rental (0 for ETH and ERC20)\\n    /// @param expiresAt rental expiration time\\n    event Rent(\\n        address from,\\n        address indexed to,\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId,\\n        address paymentTokenAddress,\\n        uint256 paymentTokenId,\\n        uint256 expiresAt\\n    );\\n\\n    /// @notice Emitted on expiration settlement on-chain\\n    /// @param tokenAddress wrapped token address\\n    /// @param tokenId wrapped token id\\n    event RentEnds(address indexed tokenAddress, uint256 indexed tokenId);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/utils/ERC721HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"weird-erc20/=lib/solmate/lib/weird-erc20/src/\",\r\n      \"contracts/=contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"previousFee\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"LibraryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ORentableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"PaymentTokenAllowListChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"ProxyCallAllowListChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"Rent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RentEnds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTimeDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTimeDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"privateRenter\",\"type\":\"address\"}],\"name\":\"UpdateRentalConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"WRentableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousWalletFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWalletFactory\",\"type\":\"address\"}],\"name\":\"WalletFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCRAM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"afterOTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"afterWTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTimeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"privateRenter\",\"type\":\"address\"}],\"internalType\":\"struct RentableTypes.RentalConditions\",\"name\":\"rc\",\"type\":\"tuple\"}],\"name\":\"createOrUpdateRentalConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"createWalletForUser\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteRentalConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"disablePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"emergencyBatchWithdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"notSafe\",\"type\":\"bool\"}],\"name\":\"emergencyBatchWithdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isDelegateCall\",\"type\":\"bool\"}],\"name\":\"emergencyExecute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20ETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"enable1155PaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"enablePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableProxyCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"expireRental\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"currentlyRented\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"expireRentals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"expiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getORentable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"}],\"name\":\"getPaymentTokenAllowlist\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getWRentable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"isEnabledProxyCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"proxyCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rentalConditions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTimeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"privateRenter\",\"type\":\"address\"}],\"internalType\":\"struct RentableTypes.RentalConditions\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"setLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oRentable\",\"type\":\"address\"}],\"name\":\"setORentable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wRentable\",\"type\":\"address\"}],\"name\":\"setWRentable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFactory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rentable", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000f6798a60b576658461eefebf583c2aaecd732334000000000000000000000000f6798a60b576658461eefebf583c2aaecd732334", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}