{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/mainnet/v1/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title InstaLite.\\n * @dev InstaLite Vault 1.\\n */\\n\\nimport \\\"./helpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract AdminModule is Helpers {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Only auth gaurd.\\n     */\\n    modifier onlyAuth() {\\n        require(auth == msg.sender, \\\"only auth\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only rebalancer gaurd.\\n     */\\n    modifier onlyRebalancer() {\\n        require(\\n            isRebalancer[msg.sender] || auth == msg.sender,\\n            \\\"only rebalancer\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update auth.\\n     * @param auth_ address of new auth.\\n     */\\n    function updateAuth(address auth_) external onlyAuth {\\n        auth = auth_;\\n        emit updateAuthLog(auth_);\\n    }\\n\\n    /**\\n     * @dev Update rebalancer.\\n     * @param rebalancer_ address of rebalancer.\\n     * @param isRebalancer_ true for setting the rebalancer, false for removing.\\n     */\\n    function updateRebalancer(address rebalancer_, bool isRebalancer_)\\n        external\\n        onlyAuth\\n    {\\n        isRebalancer[rebalancer_] = isRebalancer_;\\n        emit updateRebalancerLog(rebalancer_, isRebalancer_);\\n    }\\n\\n    /**\\n     * @dev Update revenue fee.\\n     * @param newRevenueFee_ new revenue fee.\\n     */\\n    function updateRevenueFee(uint256 newRevenueFee_) external onlyAuth {\\n        uint256 oldRevenueFee_ = revenueFee;\\n        revenueFee = newRevenueFee_;\\n        emit updateRevenueFeeLog(oldRevenueFee_, newRevenueFee_);\\n    }\\n\\n    /**\\n     * @dev Update withdrawal fee.\\n     * @param newWithdrawalFee_ new withdrawal fee.\\n     */\\n    function updateWithdrawalFee(uint256 newWithdrawalFee_) external onlyAuth {\\n        uint256 oldWithdrawalFee_ = withdrawalFee;\\n        withdrawalFee = newWithdrawalFee_;\\n        emit updateWithdrawalFeeLog(oldWithdrawalFee_, newWithdrawalFee_);\\n    }\\n\\n    /**\\n     * @dev Update ratios.\\n     * @param ratios_ new ratios.\\n     */\\n    function updateRatios(uint16[] memory ratios_) external onlyAuth {\\n        ratios = Ratios(\\n            ratios_[0],\\n            ratios_[1],\\n            ratios_[2],\\n            uint128(ratios_[3]) * 1e23\\n        );\\n        emit updateRatiosLog(\\n            ratios_[0],\\n            ratios_[1],\\n            ratios_[2],\\n            uint128(ratios_[3]) * 1e23\\n        );\\n    }\\n\\n    /**\\n     * @dev Change status.\\n     * @param status_ new status, function to pause all functionality of the contract, status = 2 -> pause, status = 1 -> resume.\\n     */\\n    function changeStatus(uint256 status_) external onlyAuth {\\n        _status = status_;\\n        emit changeStatusLog(status_);\\n    }\\n\\n    /**\\n     * @dev Admin function to supply any token as collateral to save aave position from liquidation in case of adverse market conditions.\\n     * @param token_ token to supply\\n     * @param amount_ amount to supply\\n     */\\n    function supplyToken(address token_, uint256 amount_) external onlyAuth {\\n        require(token_ != stEthAddr, \\\"cannot-be-steth\\\");\\n        IERC20(token_).safeTransferFrom(msg.sender, address(vaultDsa), amount_);\\n        string[] memory targets_ = new string[](1);\\n        bytes[] memory calldata_ = new bytes[](1);\\n        targets_[0] = \\\"AAVE-V2-A\\\";\\n        calldata_[0] = abi.encodeWithSignature(\\n            \\\"deposit(address,uint256,uint256,uint256)\\\",\\n            token_,\\n            amount_,\\n            0,\\n            0\\n        );\\n        vaultDsa.cast(targets_, calldata_, address(this));\\n    }\\n\\n    /**\\n     * @dev Admin function to withdraw token from aave\\n     * @param token_ token to withdraw (cannot be steth)\\n     * @param amount_ amount to withdraw\\n     */\\n    function withdrawToken(address token_, uint256 amount_) external onlyAuth {\\n        require(token_ != stEthAddr, \\\"cannot-be-steth\\\");\\n        string[] memory targets_ = new string[](2);\\n        bytes[] memory calldata_ = new bytes[](2);\\n        targets_[0] = \\\"AAVE-V2-A\\\";\\n        calldata_[0] = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,uint256,uint256)\\\",\\n            token_,\\n            amount_,\\n            0,\\n            0\\n        );\\n        targets_[1] = \\\"BASIC-A\\\";\\n        calldata_[1] = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,address,uint256,uint256)\\\",\\n            token_,\\n            amount_,\\n            auth,\\n            0,\\n            0\\n        );\\n        vaultDsa.cast(targets_, calldata_, address(this));\\n    }\\n}\\n\\ncontract CoreHelpers is AdminModule {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Update storage.\\n     * @notice Internal function to update storage.\\n     */\\n    function updateStorage(uint256 exchangePrice_, uint256 newRevenue_)\\n        internal\\n    {\\n        if (exchangePrice_ > lastRevenueExchangePrice) {\\n            lastRevenueExchangePrice = exchangePrice_;\\n            revenue = revenue + newRevenue_;\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function which handles supplies.\\n     */\\n    function supplyInternal(\\n        address token_,\\n        uint256 amount_,\\n        address to_,\\n        bool isEth_\\n    ) internal returns (uint256 vtokenAmount_) {\\n        require(amount_ != 0, \\\"amount cannot be zero\\\");\\n        (\\n            uint256 exchangePrice_,\\n            uint256 newRevenue_\\n        ) = getCurrentExchangePrice();\\n        updateStorage(exchangePrice_, newRevenue_);\\n        if (isEth_) {\\n            wethCoreContract.deposit{value: amount_}();\\n        } else {\\n            if (token_ == stEthAddr) {\\n                IERC20(token_).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    amount_\\n                );\\n            } else if (token_ == wethAddr) {\\n                IERC20(token_).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    amount_\\n                );\\n            } else {\\n                revert(\\\"wrong-token\\\");\\n            }\\n        }\\n        vtokenAmount_ = (amount_ * 1e18) / exchangePrice_;\\n        _mint(to_, vtokenAmount_);\\n        emit supplyLog(token_, amount_, to_);\\n    }\\n\\n    /**\\n     * @dev Withdraw helper.\\n     */\\n    function withdrawHelper(uint256 amount_, uint256 limit_)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 transferAmt_;\\n        if (limit_ > amount_) {\\n            transferAmt_ = amount_;\\n            amount_ = 0;\\n        } else {\\n            transferAmt_ = limit_;\\n            amount_ = amount_ - limit_;\\n        }\\n        return (amount_, transferAmt_);\\n    }\\n\\n    /**\\n     * @dev Withdraw final.\\n     */\\n    function withdrawFinal(uint256 amount_)\\n        public\\n        view\\n        returns (uint256[] memory transferAmts_)\\n    {\\n        require(amount_ > 0, \\\"amount-invalid\\\");\\n\\n        (\\n            uint256 netCollateral_,\\n            uint256 netBorrow_,\\n            BalVariables memory balances_,\\n            ,\\n\\n        ) = netAssets();\\n\\n        uint256 ratio_ = netCollateral_ > 0\\n            ? (netBorrow_ * 1e4) / netCollateral_\\n            : 0;\\n        require(ratio_ < ratios.maxLimit, \\\"already-risky\\\"); // don't allow any withdrawal if aave position is risky\\n\\n        require(amount_ < balances_.totalBal, \\\"excess-withdrawal\\\");\\n\\n        transferAmts_ = new uint256[](4);\\n        if (balances_.wethVaultBal > 10) {\\n            (amount_, transferAmts_[0]) = withdrawHelper(\\n                amount_,\\n                balances_.wethVaultBal\\n            );\\n        }\\n        if (balances_.wethDsaBal > 10 && amount_ > 0) {\\n            (amount_, transferAmts_[1]) = withdrawHelper(\\n                amount_,\\n                balances_.wethDsaBal\\n            );\\n        }\\n        if (balances_.stethVaultBal > 10 && amount_ > 0) {\\n            (amount_, transferAmts_[2]) = withdrawHelper(\\n                amount_,\\n                balances_.stethVaultBal\\n            );\\n        }\\n        if (balances_.stethDsaBal > 10 && amount_ > 0) {\\n            (amount_, transferAmts_[3]) = withdrawHelper(\\n                amount_,\\n                balances_.stethDsaBal\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to handle withdraws.\\n     */\\n    function withdrawTransfers(uint256 amount_, uint256[] memory transferAmts_)\\n        internal\\n        returns (uint256 wethAmt_, uint256 stEthAmt_)\\n    {\\n        wethAmt_ = transferAmts_[0] + transferAmts_[1];\\n        stEthAmt_ = transferAmts_[2] + transferAmts_[3];\\n        uint256 totalTransferAmount_ = wethAmt_ + stEthAmt_;\\n        require(amount_ == totalTransferAmount_, \\\"transfers-not-valid\\\");\\n        // batching up spells and withdrawing all the required asset from DSA to vault at once\\n        uint256 i;\\n        uint256 j;\\n        if (transferAmts_[1] > 0 && transferAmts_[3] > 0) {\\n            i = 2;\\n        } else if (transferAmts_[3] > 0 || transferAmts_[1] > 0) {\\n            i = 1;\\n        } else {\\n            return (wethAmt_, stEthAmt_);\\n        }\\n        string[] memory targets_ = new string[](i);\\n        bytes[] memory calldata_ = new bytes[](i);\\n        if (transferAmts_[1] > 0) {\\n            targets_[j] = \\\"BASIC-A\\\";\\n            calldata_[j] = abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,address,uint256,uint256)\\\",\\n                wethAddr,\\n                transferAmts_[1],\\n                address(this),\\n                0,\\n                0\\n            );\\n            j++;\\n        }\\n        if (transferAmts_[3] > 0) {\\n            targets_[j] = \\\"BASIC-A\\\";\\n            calldata_[j] = abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,address,uint256,uint256)\\\",\\n                stEthAddr,\\n                transferAmts_[3],\\n                address(this),\\n                0,\\n                0\\n            );\\n            j++;\\n        }\\n        if (i > 0) vaultDsa.cast(targets_, calldata_, address(this));\\n    }\\n}\\n\\ncontract InstaVaultImplementation is CoreHelpers {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Supply Eth.\\n     * @param to_ address to send vTokens to.\\n     * @return vtokenAmount_ amount of vTokens sent to the `to_` address passed\\n     */\\n    function supplyEth(address to_)\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256 vtokenAmount_)\\n    {\\n        uint256 amount_ = msg.value;\\n        vtokenAmount_ = supplyInternal(ethAddr, amount_, to_, true);\\n    }\\n\\n    /**\\n     * @dev User function to supply (WETH or STETH).\\n     * @param token_ address of token, steth or weth.\\n     * @param amount_ amount to supply.\\n     * @param to_ address to send vTokens to.\\n     * @return vtokenAmount_ amount of vTokens sent to the `to_` address passed\\n     */\\n    function supply(\\n        address token_,\\n        uint256 amount_,\\n        address to_\\n    ) external nonReentrant returns (uint256 vtokenAmount_) {\\n        vtokenAmount_ = supplyInternal(token_, amount_, to_, false);\\n    }\\n\\n    /**\\n     * @dev User function to withdraw (to get WETH or STETH).\\n     * @param amount_ amount to withdraw.\\n     * @param to_ address to send tokens to.\\n     * @return vtokenAmount_ amount of vTokens burnt from caller\\n     */\\n    function withdraw(uint256 amount_, address to_)\\n        external\\n        nonReentrant\\n        returns (uint256 vtokenAmount_)\\n    {\\n        require(amount_ != 0, \\\"amount cannot be zero\\\");\\n\\n        (\\n            uint256 exchangePrice_,\\n            uint256 newRevenue_\\n        ) = getCurrentExchangePrice();\\n        updateStorage(exchangePrice_, newRevenue_);\\n\\n        if (amount_ == type(uint256).max) {\\n            vtokenAmount_ = balanceOf(msg.sender);\\n            amount_ = (vtokenAmount_ * exchangePrice_) / 1e18;\\n        } else {\\n            vtokenAmount_ = (amount_ * 1e18) / exchangePrice_;\\n        }\\n\\n        _burn(msg.sender, vtokenAmount_);\\n        uint256 fee_ = (amount_ * withdrawalFee) / 10000;\\n        uint256 amountAfterFee_ = amount_ - fee_;\\n\\n        uint256[] memory transferAmts_ = withdrawFinal(amountAfterFee_);\\n\\n        (uint256 wethAmt_, uint256 stEthAmt_) = withdrawTransfers(\\n            amountAfterFee_,\\n            transferAmts_\\n        );\\n\\n        if (wethAmt_ > 0) {\\n            // withdraw weth and sending ETH to user\\n            wethCoreContract.withdraw(wethAmt_);\\n            Address.sendValue(payable(to_), wethAmt_);\\n        }\\n        if (stEthAmt_ > 0) stEthContract.safeTransfer(to_, stEthAmt_);\\n\\n        emit withdrawLog(amount_, to_);\\n    }\\n\\n    struct RebalanceOneVariables {\\n        uint256 stETHBal_;\\n        string[] targets;\\n        bytes[] calldatas;\\n        bool[] checks;\\n        uint length;\\n        bool isOk;\\n        bytes encodedFlashData;\\n        string[] flashTarget;\\n        bytes[] flashCalldata;\\n    }\\n\\n    /**\\n     * @dev Rebalancer function to leverage and rebalance the position.\\n     */\\n    function rebalanceOne(\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        address[] memory vaults_, // leverage using other vaults\\n        uint256[] memory amts_,\\n        uint256 excessDebt_,\\n        uint256 paybackDebt_,\\n        uint256 totalAmountToSwap_,\\n        uint256 extraWithdraw_,\\n        uint256 unitAmt_,\\n        bytes memory oneInchData_\\n    ) external nonReentrant onlyRebalancer {\\n        if (excessDebt_ < 1e14) excessDebt_ = 0;\\n        if (paybackDebt_ < 1e14) paybackDebt_ = 0;\\n        if (totalAmountToSwap_ < 1e14) totalAmountToSwap_ = 0;\\n        if (extraWithdraw_ < 1e14) extraWithdraw_ = 0;\\n\\n        RebalanceOneVariables memory v_;\\n\\n        v_.length = amts_.length;\\n        require(vaults_.length == v_.length, \\\"unequal-length\\\");\\n\\n        require(\\n            !(excessDebt_ > 0 && paybackDebt_ > 0),\\n            \\\"cannot-borrow-and-payback-at-once\\\"\\n        );\\n        require(\\n            !(totalAmountToSwap_ > 0 && paybackDebt_ > 0),\\n            \\\"cannot-swap-and-payback-at-once\\\"\\n        );\\n        require(\\n            !((totalAmountToSwap_ > 0 || v_.length > 0) && excessDebt_ == 0),\\n            \\\"cannot-swap-and-when-zero-excess-debt\\\"\\n        );\\n\\n        BalVariables memory balances_ = getIdealBalances();\\n\\n        if (balances_.wethVaultBal > 1e14)\\n            wethContract.safeTransfer(\\n                address(vaultDsa),\\n                balances_.wethVaultBal\\n            );\\n        if (balances_.stethVaultBal > 1e14)\\n            stEthContract.safeTransfer(\\n                address(vaultDsa),\\n                balances_.stethVaultBal\\n            );\\n        v_.stETHBal_ = balances_.stethVaultBal + balances_.stethDsaBal;\\n        if (v_.stETHBal_ < 1e14) v_.stETHBal_ = 0;\\n\\n        uint256 i;\\n        uint256 j;\\n        if (excessDebt_ > 0) j += 4;\\n        if (v_.length > 0) j += v_.length;\\n        if (totalAmountToSwap_ > 0) j += 1;\\n        if (excessDebt_ > 0 && (totalAmountToSwap_ > 0 || v_.stETHBal_ > 0)) j += 1;\\n        if (paybackDebt_ > 0) j += 1;\\n        if (v_.stETHBal_ > 0 && excessDebt_ == 0) j += 1;\\n        if (extraWithdraw_ > 0) j += 2;\\n        v_.targets = new string[](j);\\n        v_.calldatas = new bytes[](j);\\n        if (excessDebt_ > 0) {\\n            v_.targets[0] = \\\"AAVE-V2-A\\\";\\n            v_.calldatas[0] = abi.encodeWithSignature(\\n                \\\"deposit(address,uint256,uint256,uint256)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                0,\\n                0\\n            );\\n            v_.targets[1] = \\\"AAVE-V2-A\\\";\\n            v_.calldatas[1] = abi.encodeWithSignature(\\n                \\\"borrow(address,uint256,uint256,uint256,uint256)\\\",\\n                wethAddr,\\n                excessDebt_,\\n                2,\\n                0,\\n                0\\n            );\\n            i = 2;\\n            // Doing swaps from different vaults using deleverage to reduce other vaults riskiness if needed.\\n            // It takes WETH from vault and gives astETH at 1:1\\n            for (uint k = 0; k < v_.length; k++) {\\n                v_.targets[i] = \\\"LITE-A\\\"; // Instadapp Lite vaults connector\\n                v_.calldatas[i] = abi.encodeWithSignature(\\n                    \\\"deleverage(address,uint256,uint256,uint256)\\\",\\n                    vaults_[k],\\n                    amts_[k],\\n                    0,\\n                    0\\n                );\\n                i++;\\n            }\\n            if (totalAmountToSwap_ > 0) {\\n                require(unitAmt_ > (1e18 - 10), \\\"invalid-unit-amt\\\");\\n                v_.targets[i] = \\\"1INCH-A\\\";\\n                v_.calldatas[i] = abi.encodeWithSignature(\\n                    \\\"sell(address,address,uint256,uint256,bytes,uint256)\\\",\\n                    stEthAddr,\\n                    wethAddr,\\n                    totalAmountToSwap_,\\n                    unitAmt_,\\n                    oneInchData_,\\n                    0\\n                );\\n                i++;\\n            }\\n            if (totalAmountToSwap_ > 0 || v_.stETHBal_ > 0) {\\n                v_.targets[i] = \\\"AAVE-V2-A\\\";\\n                v_.calldatas[i] = abi.encodeWithSignature(\\n                    \\\"deposit(address,uint256,uint256,uint256)\\\",\\n                    stEthAddr,\\n                    type(uint256).max,\\n                    0,\\n                    0\\n                );\\n                i++;\\n            }\\n            v_.targets[i] = \\\"AAVE-V2-A\\\";\\n            v_.calldatas[i] = abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,uint256)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                0,\\n                0\\n            );\\n            v_.targets[i + 1] = \\\"INSTAPOOL-C\\\";\\n            v_.calldatas[i + 1] = abi.encodeWithSignature(\\n                \\\"flashPayback(address,uint256,uint256,uint256)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                0,\\n                0\\n            );\\n            i += 2;\\n        }\\n        if (paybackDebt_ > 0) {\\n            v_.targets[i] = \\\"AAVE-V2-A\\\";\\n            v_.calldatas[i] = abi.encodeWithSignature(\\n                \\\"payback(address,uint256,uint256,uint256,uint256)\\\",\\n                wethAddr,\\n                paybackDebt_,\\n                2,\\n                0,\\n                0\\n            );\\n            i++;\\n        }\\n        if (v_.stETHBal_ > 0 && excessDebt_ == 0) {\\n            v_.targets[i] = \\\"AAVE-V2-A\\\";\\n            v_.calldatas[i] = abi.encodeWithSignature(\\n                \\\"deposit(address,uint256,uint256,uint256)\\\",\\n                stEthAddr,\\n                type(uint256).max,\\n                0,\\n                0\\n            );\\n            i++;\\n        }\\n        if (extraWithdraw_ > 0) {\\n            v_.targets[i] = \\\"AAVE-V2-A\\\";\\n            v_.calldatas[i] = abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,uint256)\\\",\\n                stEthAddr,\\n                extraWithdraw_,\\n                0,\\n                0\\n            );\\n            v_.targets[i + 1] = \\\"BASIC-A\\\";\\n            v_.calldatas[i + 1] = abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,address,uint256,uint256)\\\",\\n                stEthAddr,\\n                extraWithdraw_,\\n                address(this),\\n                0,\\n                0\\n            );\\n        }\\n\\n        if (excessDebt_ > 0) {\\n            v_.encodedFlashData = abi.encode(\\n                v_.targets,\\n                v_.calldatas\\n            );\\n\\n            v_.flashTarget = new string[](1);\\n            v_.flashCalldata = new bytes[](1);\\n            v_.flashTarget[0] = \\\"INSTAPOOL-C\\\";\\n            v_.flashCalldata[0] = abi.encodeWithSignature(\\n                \\\"flashBorrowAndCast(address,uint256,uint256,bytes,bytes)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                route_,\\n                v_.encodedFlashData,\\n                \\\"0x\\\"\\n            );\\n\\n            vaultDsa.cast(v_.flashTarget, v_.flashCalldata, address(this));\\n            require(\\n                getWethBorrowRate() < ratios.maxBorrowRate,\\n                \\\"high-borrow-rate\\\"\\n            );\\n        } else {\\n            if (j > 0) vaultDsa.cast(v_.targets, v_.calldatas, address(this));\\n        }\\n\\n        v_.checks = new bool[](4);\\n        (v_.checks[0],, v_.checks[1], v_.checks[2], v_.checks[3]) = validateFinalRatio();\\n        if (excessDebt_ > 0) require(v_.checks[1], \\\"position-risky-after-leverage\\\");\\n        if (extraWithdraw_ > 0) require(v_.checks[0], \\\"position-risky\\\");\\n        if (excessDebt_ > 0 && extraWithdraw_ > 0) require(v_.checks[3], \\\"position-hf-risky\\\");\\n\\n        emit rebalanceOneLog(\\n            flashTkn_,\\n            flashAmt_,\\n            route_,\\n            vaults_,\\n            amts_,\\n            excessDebt_,\\n            paybackDebt_,\\n            totalAmountToSwap_,\\n            extraWithdraw_,\\n            unitAmt_\\n        );\\n    }\\n\\n    /**\\n     * @dev Rebalancer function for saving. To be run in times of making position less risky or to fill up the withdraw amount for users to exit\\n     */\\n    function rebalanceTwo(\\n        uint256 withdrawAmt_,\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        uint256 saveAmt_,\\n        uint256 unitAmt_,\\n        bytes memory oneInchData_\\n    ) external nonReentrant onlyRebalancer {\\n        (,,,, bool hfIsOk_) = validateFinalRatio();\\n        if (hfIsOk_) {\\n            require(unitAmt_ > (1e18 - (2 * 1e16)), \\\"excess-slippage\\\"); // Here's it's 2% slippage.\\n        } else {\\n            // Here's it's 5% slippage. Only when HF is not okay. Meaning stETH got too unstable from it's original price.\\n            require(unitAmt_ > (1e18 - (5 * 1e16)), \\\"excess-slippage\\\");\\n        }\\n        uint j = 3;\\n        uint i = 0;\\n        if (flashAmt_ > 0) j += 3;\\n        string[] memory targets_ = new string[](j);\\n        bytes[] memory calldata_ = new bytes[](j);\\n        if (flashAmt_ > 0) {\\n            targets_[0] = \\\"AAVE-V2-A\\\";\\n            calldata_[0] = abi.encodeWithSignature(\\n                \\\"deposit(address,uint256,uint256,uint256)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                0,\\n                0\\n            );\\n            i++;\\n        }\\n        targets_[i] = \\\"AAVE-V2-A\\\";\\n        calldata_[i] = abi.encodeWithSignature(\\n            \\\"withdraw(address,uint256,uint256,uint256)\\\",\\n            stEthAddr,\\n            (saveAmt_ + withdrawAmt_),\\n            0,\\n            0\\n        );\\n        targets_[i + 1] = \\\"1INCH-A\\\";\\n        calldata_[i + 1] = abi.encodeWithSignature(\\n            \\\"sell(address,address,uint256,uint256,bytes,uint256)\\\",\\n            wethAddr,\\n            stEthAddr,\\n            saveAmt_,\\n            unitAmt_,\\n            oneInchData_,\\n            0\\n        );\\n        targets_[i + 2] = \\\"AAVE-V2-A\\\";\\n        calldata_[i + 2] = abi.encodeWithSignature(\\n            \\\"payback(address,uint256,uint256,uint256,uint256)\\\",\\n            wethAddr,\\n            type(uint256).max,\\n            2,\\n            0,\\n            0\\n        );\\n        if (flashAmt_ > 0) {\\n            targets_[i + 3] = \\\"AAVE-V2-A\\\";\\n            calldata_[i + 3] = abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,uint256)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                0,\\n                0\\n            );\\n            targets_[i + 4] = \\\"INSTAPOOL-C\\\";\\n            calldata_[i + 4] = abi.encodeWithSignature(\\n                \\\"flashPayback(address,uint256,uint256,uint256)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                0,\\n                0\\n            );\\n        }\\n\\n        if (flashAmt_ > 0) {\\n            bytes memory encodedFlashData_ = abi.encode(targets_, calldata_);\\n\\n            string[] memory flashTarget_ = new string[](1);\\n            bytes[] memory flashCalldata_ = new bytes[](1);\\n            flashTarget_[0] = \\\"INSTAPOOL-C\\\";\\n            flashCalldata_[0] = abi.encodeWithSignature(\\n                \\\"flashBorrowAndCast(address,uint256,uint256,bytes,bytes)\\\",\\n                flashTkn_,\\n                flashAmt_,\\n                route_,\\n                encodedFlashData_,\\n                \\\"0x\\\"\\n            );\\n\\n            vaultDsa.cast(flashTarget_, flashCalldata_, address(this));\\n        } else {\\n            vaultDsa.cast(targets_, calldata_, address(this));\\n        }\\n\\n        (, bool maxGapIsOk_, , bool minGapIsOk_,) = validateFinalRatio();\\n        if (!hfIsOk_) {\\n            require(minGapIsOk_, \\\"position-over-saved\\\");\\n        } else {\\n            require(maxGapIsOk_, \\\"position-over-saved\\\");\\n        }\\n\\n        emit rebalanceTwoLog(\\n            withdrawAmt_,\\n            flashTkn_,\\n            flashAmt_,\\n            route_,\\n            saveAmt_,\\n            unitAmt_\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public pure override returns (string memory) {\\n        return \\\"Instadapp ETH\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public pure override returns (string memory) {\\n        return \\\"iETH\\\";\\n    }\\n\\n    /* \\n     Deprecated\\n    */\\n    // function initialize(\\n    //     string memory name_,\\n    //     string memory symbol_,\\n    //     address auth_,\\n    //     address rebalancer_,\\n    //     uint256 revenueFee_,\\n    //     uint16[] memory ratios_\\n    // ) public initializer {\\n    //     address vaultDsaAddr_ = instaIndex.build(address(this), 2, address(this));\\n    //     vaultDsa = IDSA(vaultDsaAddr_);\\n    //     __ERC20_init(name_, symbol_);\\n    //     auth = auth_;\\n    //     isRebalancer[rebalancer_] = true;\\n    //     revenueFee = revenueFee_;\\n    //     lastRevenueExchangePrice = 1e18;\\n    //     // sending borrow rate in 4 decimals eg:- 300 meaning 3% and converting into 27 decimals eg:- 3 * 1e25\\n    //     ratios = Ratios(ratios_[0], ratios_[1], ratios_[2], uint128(ratios_[3]) * 1e23);\\n    // }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/core/mainnet/v1/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./events.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Helpers is Events {\\n    using SafeERC20 for IERC20;\\n\\n    modifier nonReentrant() {\\n        require(_status != 2, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = 2;\\n        _;\\n        _status = 1;\\n    }\\n\\n    /**\\n     * @dev Helper function to get current eth borrow rate on aave.\\n     */\\n    function getWethBorrowRate()\\n        internal\\n        view\\n        returns (uint256 wethBorrowRate_)\\n    {\\n        (, , , , wethBorrowRate_, , , , , ) = aaveProtocolDataProvider\\n            .getReserveData(wethAddr);\\n    }\\n\\n    /**\\n     * @dev Helper function to get current steth collateral on aave.\\n     */\\n    function getStEthCollateralAmount()\\n        internal\\n        view\\n        returns (uint256 stEthAmount_)\\n    {\\n        stEthAmount_ = astethToken.balanceOf(address(vaultDsa));\\n    }\\n\\n    /**\\n     * @dev Helper function to get current eth debt on aave.\\n     */\\n    function getWethDebtAmount()\\n        internal\\n        view\\n        returns (uint256 wethDebtAmount_)\\n    {\\n        wethDebtAmount_ = awethVariableDebtToken.balanceOf(address(vaultDsa));\\n    }\\n\\n    struct BalVariables {\\n        uint256 wethVaultBal;\\n        uint256 wethDsaBal;\\n        uint256 stethVaultBal;\\n        uint256 stethDsaBal;\\n        uint256 totalBal;\\n    }\\n\\n    /**\\n     * @dev Helper function to get ideal eth/steth amount in vault or vault's dsa.\\n     */\\n    function getIdealBalances()\\n        public\\n        view\\n        returns (BalVariables memory balances_)\\n    {\\n        IERC20 wethCon_ = IERC20(wethAddr);\\n        IERC20 stethCon_ = IERC20(stEthAddr);\\n        balances_.wethVaultBal = wethCon_.balanceOf(address(this));\\n        balances_.wethDsaBal = wethCon_.balanceOf(address(vaultDsa));\\n        balances_.stethVaultBal = stethCon_.balanceOf(address(this));\\n        balances_.stethDsaBal = stethCon_.balanceOf(address(vaultDsa));\\n        balances_.totalBal =\\n            balances_.wethVaultBal +\\n            balances_.wethDsaBal +\\n            balances_.stethVaultBal +\\n            balances_.stethDsaBal;\\n    }\\n\\n    /**\\n     * @dev Helper function to get net assets everywhere (not substracting revenue here).\\n     */\\n    function netAssets()\\n        public\\n        view\\n        returns (\\n            uint256 netCollateral_,\\n            uint256 netBorrow_,\\n            BalVariables memory balances_,\\n            uint256 netSupply_,\\n            uint256 netBal_\\n        )\\n    {\\n        netCollateral_ = getStEthCollateralAmount();\\n        netBorrow_ = getWethDebtAmount();\\n        balances_ = getIdealBalances();\\n        netSupply_ = netCollateral_ + balances_.totalBal;\\n        netBal_ = netSupply_ - netBorrow_;\\n    }\\n\\n    /**\\n     * @dev Helper function to get current exchange price and new revenue generated.\\n     */\\n    function getCurrentExchangePrice()\\n        public\\n        view\\n        returns (uint256 exchangePrice_, uint256 newRevenue_)\\n    {\\n        (, , , , uint256 netBal_) = netAssets();\\n        netBal_ = netBal_ - revenue;\\n        uint256 totalSupply_ = totalSupply();\\n        uint256 exchangePriceWithRevenue_;\\n        if (totalSupply_ != 0) {\\n            exchangePriceWithRevenue_ = (netBal_ * 1e18) / totalSupply_;\\n        } else {\\n            exchangePriceWithRevenue_ = 1e18;\\n        }\\n        // Only calculate revenue if there's a profit\\n        if (exchangePriceWithRevenue_ > lastRevenueExchangePrice) {\\n            uint256 newProfit_ = netBal_ -\\n                ((lastRevenueExchangePrice * totalSupply_) / 1e18);\\n            newRevenue_ = (newProfit_ * revenueFee) / 10000;\\n            exchangePrice_ = ((netBal_ - newRevenue_) * 1e18) / totalSupply_;\\n        } else {\\n            exchangePrice_ = exchangePriceWithRevenue_;\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper function to validate the safety of aave position after rebalancing.\\n     */\\n    function validateFinalRatio()\\n        internal\\n        view\\n        returns (\\n            bool maxIsOk_,\\n            bool maxGapIsOk_,\\n            bool minIsOk_,\\n            bool minGapIsOk_,\\n            bool hfIsOk_\\n        )\\n    {\\n        // Not substracting revenue here as it can also help save position.\\n        (,,,,,uint hf_) = aaveLendingPool.getUserAccountData(address(vaultDsa));\\n        (\\n            uint256 netCollateral_,\\n            uint256 netBorrow_,\\n            ,\\n            uint256 netSupply_,\\n\\n        ) = netAssets();\\n        uint256 ratioMax_ = (netBorrow_ * 1e4) / netCollateral_; // Aave position ratio should not go above max limit\\n        maxIsOk_ = ratios.maxLimit > ratioMax_;\\n        maxGapIsOk_ = ratioMax_ > ratios.maxLimit - 100;\\n        uint256 ratioMin_ = (netBorrow_ * 1e4) / netSupply_; // net ratio (position + ideal) should not go above min limit\\n        minIsOk_ = ratios.minLimit > ratioMin_;\\n        minGapIsOk_ = ratios.minLimitGap < ratioMin_;\\n        hfIsOk_ = hf_ > 1015 * 1e15; // HF should be more than 1.015 (this will allow ratio to always stay below 74%)\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/mainnet/v1/events.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./variables.sol\\\";\\n\\ncontract Events is Variables {\\n    event updateAuthLog(address auth_);\\n\\n    event updateRebalancerLog(address auth_, bool isAuth_);\\n\\n    event updateRatiosLog(\\n        uint16 maxLimit,\\n        uint16 minLimit,\\n        uint16 gap,\\n        uint128 maxBorrowRate\\n    );\\n\\n    event updateRevenueFeeLog(uint256 oldRevenueFee_, uint256 newRevenueFee_);\\n\\n    event updateWithdrawalFeeLog(\\n        uint256 oldWithdrawalFee_,\\n        uint256 newWithdrawalFee_\\n    );\\n\\n    event changeStatusLog(uint256 status_);\\n\\n    event supplyLog(address token_, uint256 amount_, address to_);\\n\\n    event withdrawLog(uint256 amount_, address to_);\\n\\n    event rebalanceOneLog(\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        address[] vaults_,\\n        uint256[] amts_,\\n        uint256 excessDebt_,\\n        uint256 paybackDebt_,\\n        uint256 totalAmountToSwap_,\\n        uint256 extraWithdraw_,\\n        uint256 unitAmt_\\n    );\\n\\n    event rebalanceTwoLog(\\n        uint256 withdrawAmt_,\\n        address flashTkn_,\\n        uint256 flashAmt_,\\n        uint256 route_,\\n        uint256 saveAmt_,\\n        uint256 unitAmt_\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/mainnet/v1/variables.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\ncontract ConstantVariables is ERC20Upgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ethAddr =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    IInstaIndex internal constant instaIndex =\\n        IInstaIndex(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\\n    address internal constant wethAddr =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant stEthAddr =\\n        0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    IAaveProtocolDataProvider internal constant aaveProtocolDataProvider =\\n        IAaveProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n    IERC20 internal constant awethVariableDebtToken =\\n        IERC20(0xF63B34710400CAd3e044cFfDcAb00a0f32E33eCf);\\n    IERC20 internal constant astethToken =\\n        IERC20(0x1982b2F5814301d4e9a8b0201555376e62F82428);\\n    TokenInterface internal constant wethCoreContract =\\n        TokenInterface(wethAddr); // contains deposit & withdraw for weth\\n    IAaveLendingPool internal constant aaveLendingPool =\\n        IAaveLendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\\n    IERC20 internal constant wethContract = IERC20(wethAddr);\\n    IERC20 internal constant stEthContract = IERC20(stEthAddr);\\n    uint256 internal constant liquidationThreshold = 7500;\\n}\\n\\ncontract Variables is ConstantVariables {\\n    uint256 internal _status = 1;\\n\\n    address public auth;\\n\\n    // only authorized addresses can rebalance\\n    mapping(address => bool) public isRebalancer;\\n\\n    IDSA public vaultDsa;\\n\\n    struct Ratios {\\n        uint16 maxLimit; // Above this withdrawals are not allowed\\n        uint16 minLimit; // After leverage the ratio should be below minLimit & above minLimitGap\\n        uint16 minLimitGap;\\n        // send borrow rate in 4 decimals from UI. In the smart contract it'll convert to 27 decimals which where is 100%\\n        uint128 maxBorrowRate; // maximum borrow rate above this leveraging should not happen\\n    }\\n\\n    Ratios public ratios;\\n\\n    // last revenue exchange price (helps in calculating revenue)\\n    // Exchange price when revenue got updated last. It'll only increase overtime.\\n    uint256 public lastRevenueExchangePrice;\\n\\n    uint256 public revenueFee; // 1000 = 10% (10% of user's profit)\\n\\n    uint256 public revenue;\\n\\n    uint256 public withdrawalFee; // 10000 = 100%\\n}\\n\"\r\n    },\r\n    \"contracts/core/mainnet/v1/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IInstaIndex {\\n    function build(\\n        address owner_,\\n        uint256 accountVersion_,\\n        address origin_\\n    ) external returns (address account_);\\n}\\n\\ninterface IDSA {\\n    function cast(\\n        string[] calldata _targetNames,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32);\\n}\\n\\ninterface IAaveProtocolDataProvider {\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n\\n    function transfer(address, uint256) external;\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IAaveLendingPool {\\n    function getUserAccountData(address) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status_\",\"type\":\"uint256\"}],\"name\":\"changeStatusLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vaults_\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amts_\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessDebt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paybackDebt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountToSwap_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraWithdraw_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"}],\"name\":\"rebalanceOneLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saveAmt_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"}],\"name\":\"rebalanceTwoLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"supplyLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"}],\"name\":\"updateAuthLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxLimit\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minLimit\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"gap\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"maxBorrowRate\",\"type\":\"uint128\"}],\"name\":\"updateRatiosLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuth_\",\"type\":\"bool\"}],\"name\":\"updateRebalancerLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRevenueFee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRevenueFee_\",\"type\":\"uint256\"}],\"name\":\"updateRevenueFeeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawalFee_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawalFee_\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawalFeeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status_\",\"type\":\"uint256\"}],\"name\":\"changeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangePrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRevenue_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdealBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wethVaultBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethDsaBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stethVaultBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stethDsaBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.BalVariables\",\"name\":\"balances_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRevenueExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netCollateral_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netBorrow_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wethVaultBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethDsaBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stethVaultBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stethDsaBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.BalVariables\",\"name\":\"balances_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"netSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netBal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"maxLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minLimitGap\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowRate\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaults_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"excessDebt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paybackDebt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountToSwap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraWithdraw_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData_\",\"type\":\"bytes\"}],\"name\":\"rebalanceOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmt_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashTkn_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saveAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData_\",\"type\":\"bytes\"}],\"name\":\"rebalanceTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vtokenAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"supplyEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vtokenAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"supplyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"}],\"name\":\"updateAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"ratios_\",\"type\":\"uint16[]\"}],\"name\":\"updateRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebalancer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRebalancer_\",\"type\":\"bool\"}],\"name\":\"updateRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRevenueFee_\",\"type\":\"uint256\"}],\"name\":\"updateRevenueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawalFee_\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDsa\",\"outputs\":[{\"internalType\":\"contract IDSA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vtokenAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawFinal\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"transferAmts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InstaVaultImplementation", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}