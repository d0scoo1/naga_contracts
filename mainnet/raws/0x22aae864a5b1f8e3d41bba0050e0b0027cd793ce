{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\n\t/*\r\n\t * Abstract Token Smart Contract.  Copyright \u00a9 2017 by ABDK Consulting.\r\n\t * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n\t */\r\n\tpragma solidity ^0.4.20;\r\n\r\n\t/*\r\n\t * EIP-20 Standard Token Smart Contract Interface.\r\n\t * Copyright \u00a9 2016\u20132018 by ABDK Consulting.\r\n\t * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n\t */\r\n\tpragma solidity ^0.4.20;\r\n\r\n\t/**\r\n\t * ERC-20 standard token interface, as defined\r\n\t * <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">here</a>.\r\n\t */\r\n\tcontract Token {\r\n\t  /**\r\n\t   * Get total number of tokens in circulation.\r\n\t   *\r\n\t   * @return total number of tokens in circulation\r\n\t   */\r\n\t  function totalSupply () public view returns (uint256 supply);\r\n\r\n\t  /**\r\n\t   * Get number of tokens currently belonging to given owner.\r\n\t   *\r\n\t   * @param _owner address to get number of tokens currently belonging to the\r\n\t   *        owner of\r\n\t   * @return number of tokens currently belonging to the owner of given address\r\n\t   */\r\n\t  function balanceOf (address _owner) public view returns (uint256 balance);\r\n\r\n\t  /**\r\n\t   * Transfer given number of tokens from message sender to given recipient.\r\n\t   *\r\n\t   * @param _to address to transfer tokens to the owner of\r\n\t   * @param _value number of tokens to transfer to the owner of given address\r\n\t   * @return true if tokens were transferred successfully, false otherwise\r\n\t   */\r\n\t  function transfer (address _to, uint256 _value)\r\n\t  public returns (bool success);\r\n\r\n\t  /**\r\n\t   * Transfer given number of tokens from given owner to given recipient.\r\n\t   *\r\n\t   * @param _from address to transfer tokens from the owner of\r\n\t   * @param _to address to transfer tokens to the owner of\r\n\t   * @param _value number of tokens to transfer from given owner to given\r\n\t   *        recipient\r\n\t   * @return true if tokens were transferred successfully, false otherwise\r\n\t   */\r\n\t  function transferFrom (address _from, address _to, uint256 _value)\r\n\t  public returns (bool success);\r\n\r\n\t  /**\r\n\t   * Allow given spender to transfer given number of tokens from message sender.\r\n\t   *\r\n\t   * @param _spender address to allow the owner of to transfer tokens from\r\n\t   *        message sender\r\n\t   * @param _value number of tokens to allow to transfer\r\n\t   * @return true if token transfer was successfully approved, false otherwise\r\n\t   */\r\n\t  function approve (address _spender, uint256 _value)\r\n\t  public returns (bool success);\r\n\r\n\t  /**\r\n\t   * Tell how many tokens given spender is currently allowed to transfer from\r\n\t   * given owner.\r\n\t   *\r\n\t   * @param _owner address to get number of tokens allowed to be transferred\r\n\t   *        from the owner of\r\n\t   * @param _spender address to get number of tokens allowed to be transferred\r\n\t   *        by the owner of\r\n\t   * @return number of tokens given spender is currently allowed to transfer\r\n\t   *         from given owner\r\n\t   */\r\n\t  function allowance (address _owner, address _spender)\r\n\t  public view returns (uint256 remaining);\r\n\r\n\t  /**\r\n\t   * Logged when tokens were transferred from one owner to another.\r\n\t   *\r\n\t   * @param _from address of the owner, tokens were transferred from\r\n\t   * @param _to address of the owner, tokens were transferred to\r\n\t   * @param _value number of tokens transferred\r\n\t   */\r\n\t  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\t  /**\r\n\t   * Logged when owner approved his tokens to be transferred by some spender.\r\n\t   *\r\n\t   * @param _owner owner who approved his tokens to be transferred\r\n\t   * @param _spender spender who were allowed to transfer the tokens belonging\r\n\t   *        to the owner\r\n\t   * @param _value number of tokens belonging to the owner, approved to be\r\n\t   *        transferred by the spender\r\n\t   */\r\n\t  event Approval (\r\n\t\taddress indexed _owner, address indexed _spender, uint256 _value);\r\n\t}\r\n\t/*\r\n\t * Safe Math Smart Contract.  Copyright \u00a9 2016\u20132017 by ABDK Consulting.\r\n\t * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n\t */\r\n\tpragma solidity ^0.4.20;\r\n\r\n\t/**\r\n\t * Provides methods to safely add, subtract and multiply uint256 numbers.\r\n\t */\r\n\tcontract SafeMath {\r\n\t  uint256 constant private MAX_UINT256 =\r\n\t\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n\t  /**\r\n\t   * Add two uint256 values, throw in case of overflow.\r\n\t   *\r\n\t   * @param x first value to add\r\n\t   * @param y second value to add\r\n\t   * @return x + y\r\n\t   */\r\n\t  function safeAdd (uint256 x, uint256 y)\r\n\t  pure internal\r\n\t  returns (uint256 z) {\r\n\t\tassert (x <= MAX_UINT256 - y);\r\n\t\treturn x + y;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Subtract one uint256 value from another, throw in case of underflow.\r\n\t   *\r\n\t   * @param x value to subtract from\r\n\t   * @param y value to subtract\r\n\t   * @return x - y\r\n\t   */\r\n\t  function safeSub (uint256 x, uint256 y)\r\n\t  pure internal\r\n\t  returns (uint256 z) {\r\n\t\tassert (x >= y);\r\n\t\treturn x - y;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Multiply two uint256 values, throw in case of overflow.\r\n\t   *\r\n\t   * @param x first value to multiply\r\n\t   * @param y second value to multiply\r\n\t   * @return x * y\r\n\t   */\r\n\t  function safeMul (uint256 x, uint256 y)\r\n\t  pure internal\r\n\t  returns (uint256 z) {\r\n\t\tif (y == 0) return 0; // Prevent division by zero at the next line\r\n\t\tassert (x <= MAX_UINT256 / y);\r\n\t\treturn x * y;\r\n\t  }\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Abstract Token Smart Contract that could be used as a base contract for\r\n\t * ERC-20 token contracts.\r\n\t */\r\n\tcontract AbstractToken is Token, SafeMath {\r\n\t  /**\r\n\t   * Create new Abstract Token contract.\r\n\t   */\r\n\t  function AbstractToken () public {\r\n\t\t// Do nothing\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Get number of tokens currently belonging to given owner.\r\n\t   *\r\n\t   * @param _owner address to get number of tokens currently belonging to the\r\n\t   *        owner of\r\n\t   * @return number of tokens currently belonging to the owner of given address\r\n\t   */\r\n\t  function balanceOf (address _owner) public view returns (uint256 balance) {\r\n\t\treturn accounts [_owner];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Transfer given number of tokens from message sender to given recipient.\r\n\t   *\r\n\t   * @param _to address to transfer tokens to the owner of\r\n\t   * @param _value number of tokens to transfer to the owner of given address\r\n\t   * @return true if tokens were transferred successfully, false otherwise\r\n\t   */\r\n\t  function transfer (address _to, uint256 _value)\r\n\t  public returns (bool success) {\r\n\t\tuint256 fromBalance = accounts [msg.sender];\r\n\t\tif (fromBalance < _value) return false;\r\n\t\tif (_value > 0 && msg.sender != _to) {\r\n\t\t  accounts [msg.sender] = safeSub (fromBalance, _value);\r\n\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\r\n\t\t}\r\n\t\tTransfer (msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Transfer given number of tokens from given owner to given recipient.\r\n\t   *\r\n\t   * @param _from address to transfer tokens from the owner of\r\n\t   * @param _to address to transfer tokens to the owner of\r\n\t   * @param _value number of tokens to transfer from given owner to given\r\n\t   *        recipient\r\n\t   * @return true if tokens were transferred successfully, false otherwise\r\n\t   */\r\n\t  function transferFrom (address _from, address _to, uint256 _value)\r\n\t  public returns (bool success) {\r\n\t\tuint256 spenderAllowance = allowances [_from][msg.sender];\r\n\t\tif (spenderAllowance < _value) return false;\r\n\t\tuint256 fromBalance = accounts [_from];\r\n\t\tif (fromBalance < _value) return false;\r\n\r\n\t\tallowances [_from][msg.sender] =\r\n\t\t  safeSub (spenderAllowance, _value);\r\n\r\n\t\tif (_value > 0 && _from != _to) {\r\n\t\t  accounts [_from] = safeSub (fromBalance, _value);\r\n\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\r\n\t\t}\r\n\t\tTransfer (_from, _to, _value);\r\n\t\treturn true;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Allow given spender to transfer given number of tokens from message sender.\r\n\t   *\r\n\t   * @param _spender address to allow the owner of to transfer tokens from\r\n\t   *        message sender\r\n\t   * @param _value number of tokens to allow to transfer\r\n\t   * @return true if token transfer was successfully approved, false otherwise\r\n\t   */\r\n\t  function approve (address _spender, uint256 _value)\r\n\t  public returns (bool success) {\r\n\t\tallowances [msg.sender][_spender] = _value;\r\n\t\tApproval (msg.sender, _spender, _value);\r\n\r\n\t\treturn true;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Tell how many tokens given spender is currently allowed to transfer from\r\n\t   * given owner.\r\n\t   *\r\n\t   * @param _owner address to get number of tokens allowed to be transferred\r\n\t   *        from the owner of\r\n\t   * @param _spender address to get number of tokens allowed to be transferred\r\n\t   *        by the owner of\r\n\t   * @return number of tokens given spender is currently allowed to transfer\r\n\t   *         from given owner\r\n\t   */\r\n\t  function allowance (address _owner, address _spender)\r\n\t  public view returns (uint256 remaining) {\r\n\t\treturn allowances [_owner][_spender];\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Mapping from addresses of token holders to the numbers of tokens belonging\r\n\t   * to these token holders.\r\n\t   */\r\n\t  mapping (address => uint256) internal accounts;\r\n\r\n\t  /**\r\n\t   * Mapping from addresses of token holders to the mapping of addresses of\r\n\t   * spenders to the allowances set by these token holders to these spenders.\r\n\t   */\r\n\t  mapping (address => mapping (address => uint256)) internal allowances;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cubomania token smart contract.\r\n\t */\r\n\tcontract CuboToken is AbstractToken {\r\n\t  /**\r\n\t   * Total number of tokens in circulation.\r\n\t   */\r\n\t  uint256 tokenCount;\r\n\r\n\t  /**\r\n\t   * Create new Cubomania token smart contract, with given number of tokens issued\r\n\t   * and given to msg.sender.\r\n\t   *\r\n\t   * @param _tokenCount number of tokens to issue and give to msg.sender\r\n\t   */\r\n\t  function CuboToken (uint256 _tokenCount) public {\r\n\t\ttokenCount = _tokenCount;\r\n\t\taccounts [msg.sender] = _tokenCount;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Get total number of tokens in circulation.\r\n\t   *\r\n\t   * @return total number of tokens in circulation\r\n\t   */\r\n\t  function totalSupply () public view returns (uint256 supply) {\r\n\t\treturn tokenCount;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Get name of this token.\r\n\t   *\r\n\t   * @return name of this token\r\n\t   */\r\n\t  function name () public pure returns (string result) {\r\n\t\treturn \"Cubo\";\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Get symbol of this token.\r\n\t   *\r\n\t   * @return symbol of this token\r\n\t   */\r\n\t  function symbol () public pure returns (string result) {\r\n\t\treturn \"CUBO\";\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Get number of decimals for this token.\r\n\t   *\r\n\t   * @return number of decimals for this token\r\n\t   */\r\n\t  function decimals () public pure returns (uint8 result) {\r\n\t\treturn 6;\r\n\t  }\r\n\r\n\t  /**\r\n\t   * Change how many tokens given spender is allowed to transfer from message\r\n\t   * spender.  In order to prevent double spending of allowance, this method\r\n\t   * receives assumed current allowance value as an argument.  If actual\r\n\t   * allowance differs from an assumed one, this method just returns false.\r\n\t   *\r\n\t   * @param _spender address to allow the owner of to transfer tokens from\r\n\t   *        message sender\r\n\t   * @param _currentValue assumed number of tokens currently allowed to be\r\n\t   *        transferred\r\n\t   * @param _newValue number of tokens to allow to transfer\r\n\t   * @return true if token transfer was successfully approved, false otherwise\r\n\t   */\r\n\t  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\r\n\t\tpublic returns (bool success) {\r\n\t\tif (allowance (msg.sender, _spender) == _currentValue)\r\n\t\t  return approve (_spender, _newValue);\r\n\t\telse return false;\r\n\t  }\r\n\t}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "CuboToken", "CompilerVersion": "v0.4.20+commit.3155dd80", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000032ee841b8000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2dafc1b55195dfaa1712579336fbf63d12891ce674f0e22269831aff9677a727"}]}