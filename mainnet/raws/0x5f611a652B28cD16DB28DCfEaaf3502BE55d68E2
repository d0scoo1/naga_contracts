{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.4.0 <0.7.0;\r\n\r\ncontract SpaciumToken {\r\n    \r\n    string public constant name = \"Spacium Token\";\r\n    string public constant symbol = \"SPC\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event HostingPayment(address indexed from, uint tokens);\r\n    event StorePayment(address indexed from, uint tokens);\r\n    event CloudPayment(address indexed from, uint tokens);\r\n    \r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    uint256 totalSupply_;\r\n    address public constant hostingAccountAddress = 0xdc1787eF8536235198fE5aEd66Fc3A73DEd31280;\r\n    address public constant storeAccountAddress = 0x017A759A2095841122b4b4e90e40AE579a4361f1;\r\n    address public constant cloudAccountAddress = 0x38C6Ec7331ce04891154b953a79B157703CaE38a;\r\n    \r\n\r\n    using SafeMath for uint256;\r\n\r\n    \r\n    constructor() public{\r\n        totalSupply_ = 21000000000000000000000000;\r\n\t    balances[msg.sender] = 21000000000000000000000000;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n\t    return totalSupply_;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n    \r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[owner]);    \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n    \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n    \r\n    function payForHosting(uint numTokens) public returns (bool){\r\n        require(numTokens <= balances[msg.sender]);\r\n        require(numTokens > 0);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[hostingAccountAddress] = balances[hostingAccountAddress].add(numTokens);\r\n        emit HostingPayment(msg.sender, numTokens);\r\n        return true;\r\n\r\n    }\r\n    \r\n    \r\n    function payForStore(uint numTokens) public returns (bool){\r\n        \r\n        require(numTokens <= balances[msg.sender]);\r\n        require(numTokens > 0);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[storeAccountAddress] = balances[storeAccountAddress].add(numTokens);\r\n        emit StorePayment(msg.sender, numTokens);\r\n        return true;\r\n    }\r\n    \r\n     function payForCloud(uint numTokens) public returns (bool){\r\n        \r\n        require(numTokens <= balances[msg.sender]);\r\n        require(numTokens > 0);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[cloudAccountAddress] = balances[cloudAccountAddress].add(numTokens);\r\n        emit CloudPayment(msg.sender, numTokens);\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}", "ABI": "[]", "ContractName": "SafeMath", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9eb9319f23a6eae08472eb8b3cc631d2b23067fd93511e26e77b64276d981495"}]}