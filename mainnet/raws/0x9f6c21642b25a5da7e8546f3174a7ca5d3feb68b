{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\r\n\r\n    NO LIMIT APE STAKING CONTRACT\r\n    \r\n    Stake $NLA, receive $N1A, the No Limit Ape Governance Token\r\n\r\n    https://t.me/NoLimitApe\r\n\r\n8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888*/\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract NLAStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Tier {\r\n        uint256 lockedDays;\r\n        uint256 APYRewards;\r\n        bool enabled;\r\n    }\r\n\r\n    struct DepositInfo {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n \r\n    struct Deposit {\r\n        DepositInfo info;\r\n        Tier tier;\r\n        uint256 claimed;\r\n        bool active;\r\n    }\r\n   \r\n    uint256 private PRECISION_FACTOR = 10000;\r\n    IERC20 public depositToken;\r\n    IERC20 public rewardsToken;\r\n\r\n    address[] public depositAddresses;\r\n    mapping (uint256 => Tier) public tiers;\r\n    mapping (address => Deposit) public deposits;\r\n\r\n    event UserDeposit(address wallet, uint256 amount);\r\n    event RewardsWithdraw(address wallet, uint256 rewardsAmount);\r\n    event FullWithdraw(address wallet, uint256 depositAmount, uint256 rewardsAmount, uint256 tokenId);\r\n    event ExtendLock(address wallet, uint256 duration);\r\n    event UserTruthStake(address wallet, uint256 tokenId);\r\n\r\n    function calculateRewards(address wallet) public view returns (uint256) {\r\n        uint256 rewards = 0;\r\n        Deposit memory userDeposit = deposits[wallet];\r\n        if (userDeposit.active) {\r\n            uint256 depositSeconds = block.timestamp.sub(userDeposit.info.timestamp);\r\n            uint256 APYRate = userDeposit.tier.APYRewards;\r\n            //figure out total tokens to earn\r\n            uint256 calcdrewards = userDeposit.info.amount.mul(APYRate).mul(depositSeconds);\r\n            //break rewards down to rewards per second\r\n            rewards = calcdrewards.div(365).div(86400).div(PRECISION_FACTOR);\r\n        }\r\n        return rewards.sub(userDeposit.claimed);\r\n    }\r\n\r\n    function deposit(uint256 tokenAmount, uint256 tier) external {\r\n        require(!deposits[_msgSender()].active, \"user has already deposited\");\r\n        require(tiers[tier].enabled, \"tier is not enabled\");\r\n\r\n        // transfer tokens\r\n        uint256 previousBalance = depositToken.balanceOf(address(this));\r\n        depositToken.transferFrom(_msgSender(), address(this), tokenAmount);\r\n        uint256 deposited = depositToken.balanceOf(address(this)).sub(previousBalance);\r\n\r\n        // deposit logic\r\n        DepositInfo memory info = DepositInfo(deposited, block.timestamp);\r\n        deposits[_msgSender()] = Deposit(info, tiers[tier], 0, true);\r\n\r\n        //Send user the same amount of governance token for staking\r\n        rewardsToken.transfer(_msgSender(), tokenAmount);\r\n        depositAddresses.push(_msgSender());\r\n        emit UserDeposit(_msgSender(), deposited);\r\n    }\r\n\r\n    function updateDeposit(address _wallet, uint256 _tier, uint256 _lockedDays, uint256 _APYRewards) external onlyOwner {\r\n        require(deposits[_wallet].active, \"user has no active deposits\");\r\n        require(tiers[_tier].enabled, \"bracket is not enabled\");\r\n        deposits[_wallet].tier.lockedDays = _lockedDays;\r\n        deposits[_wallet].tier.APYRewards = _APYRewards.mul(PRECISION_FACTOR).div(100);\r\n    }\r\n\r\n    function currentTimstamp() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function checkCalculations(address wallet) external view returns (uint256,uint256,uint256,uint256,uint256,uint256,uint256) {\r\n        uint256 earnedrewards = 0;\r\n        uint256 grossrewards;\r\n        uint256 toclaim;\r\n        uint256 unlocktime;\r\n        uint256 locked;\r\n        Deposit memory userDeposit = deposits[wallet];\r\n        uint256 depositSeconds = block.timestamp.sub(userDeposit.info.timestamp);\r\n\r\n        uint256 APYRate = userDeposit.tier.APYRewards;\r\n        //figure out total tokens to earn\r\n        grossrewards = userDeposit.info.amount.mul(APYRate).mul(depositSeconds);\r\n        //break rewards down to rewards per second\r\n        earnedrewards = grossrewards.div(365).div(86400).div(PRECISION_FACTOR);\r\n        toclaim = earnedrewards.sub(userDeposit.claimed);\r\n        unlocktime = userDeposit.info.timestamp + userDeposit.tier.lockedDays * 1 days;\r\n        locked = userDeposit.info.timestamp;\r\n        return (depositSeconds,APYRate,grossrewards,earnedrewards,toclaim,locked,unlocktime);\r\n    }\r\n\r\n    function claimRewards() external {\r\n        Deposit memory userDeposit = deposits[_msgSender()];\r\n        require(userDeposit.active, \"user has no active deposits\");\r\n        uint256 rewardsAmount = calculateRewards(_msgSender());\r\n        require (rewardsToken.balanceOf(address(this)) >= rewardsAmount, \"insufficient rewards balance\");\r\n        deposits[_msgSender()].claimed = rewardsAmount;\r\n        rewardsToken.transfer(_msgSender(), rewardsAmount);\r\n        emit RewardsWithdraw(_msgSender(), rewardsAmount);\r\n    }\r\n\r\n    function extendStake(uint256 _tier) external {\r\n        Deposit memory userDeposit = deposits[_msgSender()];\r\n        require(userDeposit.active, \"user has no active deposits\");\r\n        require(tiers[_tier].enabled, \"tier is not enabled\");\r\n\r\n        uint256 oldDuration = userDeposit.info.timestamp + userDeposit.tier.lockedDays * 1 days;\r\n        uint256 newDuration = block.timestamp + tiers[_tier].lockedDays * 1 days;\r\n\r\n        require(newDuration > oldDuration, \"cannot reduce lock duration, ur trying to lock for a shorter time\");\r\n\r\n        uint256 rewardsAmount = calculateRewards(_msgSender());\r\n        require (rewardsToken.balanceOf(address(this)) >= rewardsAmount, \"insufficient rewards balance\");\r\n        deposits[_msgSender()].claimed = rewardsAmount;\r\n        rewardsToken.transfer(_msgSender(), rewardsAmount);\r\n\r\n        deposits[_msgSender()].tier.lockedDays = tiers[_tier].lockedDays;\r\n        deposits[_msgSender()].tier.APYRewards = tiers[_tier].APYRewards;\r\n        deposits[_msgSender()].info.timestamp = block.timestamp;\r\n        deposits[_msgSender()].claimed = 0;\r\n        emit ExtendLock(_msgSender(),newDuration);\r\n\r\n    }\r\n\r\n    function withdraw() external {\r\n        Deposit memory userDeposit = deposits[_msgSender()];\r\n        require(userDeposit.active, \"user has no active deposits\");\r\n        require(block.timestamp >= userDeposit.info.timestamp + userDeposit.tier.lockedDays * 1 days, \"Can't withdraw yet\");\r\n        uint256 depositedAmount = userDeposit.info.amount;\r\n        uint256 rewardsAmount = calculateRewards(_msgSender());\r\n        uint256 tokenId = 0;\r\n        require (rewardsToken.balanceOf(address(this)) >= rewardsAmount, \"insufficient rewards balance\");\r\n\r\n        deposits[_msgSender()].info.amount = 0;\r\n        deposits[_msgSender()].claimed = 0;\r\n        deposits[_msgSender()].active = false;\r\n        rewardsToken.transfer(_msgSender(), rewardsAmount);\r\n        depositToken.transfer(_msgSender(), depositedAmount);\r\n\r\n        emit FullWithdraw(_msgSender(), depositedAmount, rewardsAmount, tokenId);\r\n    }\r\n\r\n    function updateTier(uint256 id, uint256 lockedDays, uint256 APYRewards) external onlyOwner {\r\n        // add rewards number based an an APY (ie 4000 is 4000% APY)\r\n        APYRewards = APYRewards.mul(PRECISION_FACTOR).div(100);\r\n        //later on in the code, we'll flip to rewards per second)\r\n        tiers[id] = Tier(lockedDays, APYRewards, true);\r\n    }\r\n    \r\n    function addTiers(uint256[] memory id, uint256[] memory lockedDays, uint256[] memory APYRewards) external onlyOwner {\r\n        uint256 i = 0;\r\n        require(id.length == lockedDays.length, \"must be same length\");\r\n        require(APYRewards.length == id.length, \"must be same length\");\r\n        while (i < id.length) {\r\n            uint256 _APYRewards = APYRewards[i].mul(PRECISION_FACTOR).div(100);\r\n            tiers[id[i]] = Tier(lockedDays[i], _APYRewards, true);\r\n            i +=1;\r\n        }\r\n    }\r\n\r\n    function setTokens(address depositAddress, address rewardsAddress) external onlyOwner {\r\n        depositToken = IERC20(depositAddress);\r\n        rewardsToken = IERC20(rewardsAddress);\r\n    }\r\n\r\n    function rescueTokens() external onlyOwner {\r\n        if (rewardsToken.balanceOf(address(this)) > 0) {\r\n            rewardsToken.transfer(_msgSender(), rewardsToken.balanceOf(address(this)));\r\n        }\r\n\r\n        if (depositToken.balanceOf(address(this)) > 0) {\r\n            depositToken.transfer(_msgSender(), depositToken.balanceOf(address(this)));\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ExtendLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FullWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UserTruthStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockedDays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"APYRewards\",\"type\":\"uint256[]\"}],\"name\":\"addTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkCalculations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTimstamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct NLAStaking.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APYRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct NLAStaking.Tier\",\"name\":\"tier\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"extendStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsAddress\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APYRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_APYRewards\",\"type\":\"uint256\"}],\"name\":\"updateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APYRewards\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NLAStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0cbe73565bd924de285594a3980bc4090a371a8f66c92ca275e4a2839e0023f4"}]}