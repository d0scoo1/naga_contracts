{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ninterface VCDividendTracker {\r\n    function excludeFromDividends(address account, bool reduceHolderCount)\r\n        external;\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external;\r\n\r\n    function updateMinimumToken(uint256 newMinimumToken) external;\r\n\r\n    function minimumTokenBalanceForDividends() external view returns (uint256);\r\n\r\n    function claimWait() external view returns (uint256);\r\n\r\n    function totalDividendsDistributed() external view returns (uint256);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    function excludedFromDividends(address _account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external;\r\n\r\n    function checkOwnership(address _owner) external view returns (bool);\r\n\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getAccount(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        );\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        external\r\n        returns (bool);\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256);\r\n}\r\n\r\ncontract PlatformToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    VCDividendTracker public dividendTracker;\r\n\r\n    address public uniswapV2Pair;\r\n    address public minter;\r\n\r\n    uint256 internal constant ONE = 10**18;\r\n    address internal constant ZERO_ADDRESS =\r\n        0x0000000000000000000000000000000000000000;\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // store automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    struct dailyTransferedVest {\r\n        uint256 lastTransfer;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) public automatedMarketMakerRouters;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public vestedAddress;\r\n    mapping(address => uint256) public initialVest;\r\n    mapping(address => uint256) public transferedVest;\r\n    mapping(address => uint256) private _lastTX;\r\n    mapping(address => uint256) private _lastTransfer;\r\n    mapping(address => uint256) private _lastDailyTransferedAmount;\r\n    mapping(address => dailyTransferedVest) private _lastDailySoldVest;\r\n\r\n    uint256 public nativeRewardsFeeForSelling = 5;\r\n    uint256 public projectFeeForSelling = 5;\r\n    uint256 public liquidityFeeForSelling = 2;\r\n    uint256 public nativeRewardsFeeForBuying = 5;\r\n    uint256 public projectFeeForBuying = 5;\r\n    uint256 public liquidityFeeForBuying = 2;\r\n    uint256 public nativeRewardsFeeForTransfering = 5;\r\n    uint256 public projectFeeForTransfering = 5;\r\n    uint256 public liquidityFeeForTransfering = 2;\r\n    uint256 private maxTXAmount = 75000000 * (ONE);\r\n    uint256 public swapTokensAtAmount = 2000000 * (ONE);\r\n    uint256 public totalFeesForSelling =\r\n        nativeRewardsFeeForSelling.add(projectFeeForSelling).add(\r\n            liquidityFeeForSelling\r\n        );\r\n    uint256 public totalFeesForBuying =\r\n        nativeRewardsFeeForBuying.add(projectFeeForBuying).add(\r\n            liquidityFeeForBuying\r\n        );\r\n    uint256 public totalFeesForTransfering =\r\n        nativeRewardsFeeForTransfering.add(projectFeeForTransfering).add(\r\n            liquidityFeeForTransfering\r\n        );\r\n    uint256 public firstLiveBlock;\r\n    uint256 public firstLiveBlockNumber;\r\n    uint256 public maxHoldings = 150000000 * (ONE);\r\n    uint256 public vestedSellLimit;\r\n    uint256 public maximumDailyAmountToSell = 5 * maxTXAmount;\r\n    uint256 public maxDailyVestToSell;\r\n\r\n    bool public swapEnabled = true;\r\n    bool public sendDividendsEnabled = true;\r\n    bool public paused = true;\r\n    bool public buySellOnly = true;\r\n    bool public takeFees = true;\r\n    bool public dailyCoolDown;\r\n    bool public dailyVestSellingCoolDownEnabled;\r\n    bool private swapping;\r\n    bool public enableMaxDailySell;\r\n    bool public maxTXEnabled;\r\n    bool public maxHoldingsEnabled;\r\n    bool public antiSnipeBot;\r\n    bool public cooldown;\r\n\r\n    address payable _projectWallet;\r\n\r\n    event UpdateDividendTracker(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n    event SendDividends(uint256 amount);\r\n    event MaxDailyAmountToSellChanged(uint256 oldAmount, uint256 newAmount);\r\n    event MaxHoldingsChanged(\r\n        uint256 oldHoldings,\r\n        uint256 newHoldings,\r\n        bool maxHoldingsEnabled\r\n    );\r\n    event VestedSellLimitChanged(uint256 oldLimit, uint256 newLimit);\r\n    event FeesChanged(\r\n        uint256 totalFeesForBuying,\r\n        uint256 totalFeesForSelling,\r\n        uint256 totalFeesForTransfering\r\n    );\r\n    event MaxTXAmountChanged(uint256 oldMaxTXAmount, uint256 maxTXAmount);\r\n    event SwapTokensAtAmountChanged(\r\n        uint256 oldSwapTokensAtAmount,\r\n        uint256 swapTokensAtAmount\r\n    );\r\n\r\n    modifier onlyMinter() {\r\n        require(minter == _msgSender(), \"caller is not the Minter\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerOrMinter() {\r\n        require(\r\n            owner() == _msgSender() || minter == _msgSender(),\r\n            \"caller is not the owner or the minter\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() ERC20(\"Viral Crypto App\", \"VCX\") {\r\n        _updateUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(_projectWallet, true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        _mint(owner(), 27020401250 * (ONE));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setMinter(address _minter) external onlyOwner {\r\n        minter = _minter;\r\n    }\r\n\r\n    function setWeth(address _weth) external onlyOwner {\r\n        WETH = _weth;\r\n    }\r\n\r\n    function autoAirdrop(address _to, uint256 _amount) external onlyMinter {\r\n        _mint(_to, _amount);\r\n\r\n        if (_amount >= getMinHoldForDividends()) {\r\n            dividendTracker.setBalance(payable(_to), balanceOf(_to));\r\n        }\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external onlyOwner {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function toggleCooldown() external onlyOwner {\r\n        cooldown = !cooldown;\r\n    }\r\n\r\n    function updateDividendTracker(address newAddress) external onlyOwner {\r\n        require(\r\n            newAddress != address(dividendTracker),\r\n            \"The dividend tracker already has that address\"\r\n        );\r\n        VCDividendTracker newDividendTracker = VCDividendTracker(\r\n            payable(newAddress)\r\n        );\r\n        require(\r\n            newDividendTracker.checkOwnership(address(this)),\r\n            \"The new dividend tracker must be owned by token contract\"\r\n        );\r\n        newDividendTracker.excludeFromDividends(\r\n            address(newDividendTracker),\r\n            false\r\n        );\r\n        newDividendTracker.excludeFromDividends(address(this), false);\r\n        newDividendTracker.excludeFromDividends(owner(), false);\r\n        newDividendTracker.excludeFromDividends(\r\n            address(uniswapV2Router),\r\n            false\r\n        );\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Pair), false);\r\n        newDividendTracker.excludeFromDividends(\r\n            0x000000000000000000000000000000000000dEaD,\r\n            false\r\n        );\r\n        newDividendTracker.excludeFromDividends(ZERO_ADDRESS, false);\r\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function _updateUniswapV2Router(address newAddress)\r\n        internal\r\n        returns (address)\r\n    {\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        automatedMarketMakerRouters[address(uniswapV2Router)] = false;\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .getPair(address(this), WETH);\r\n        if (_uniswapV2Pair == ZERO_ADDRESS) {\r\n            _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), WETH);\r\n        }\r\n        automatedMarketMakerRouters[newAddress] = true;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n        return uniswapV2Pair;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        _updateUniswapV2Router(newAddress);\r\n        dividendTracker.excludeFromDividends(uniswapV2Pair, false);\r\n    }\r\n\r\n    /**\r\n     * @dev sets inital vest amount and bool for a vested address and transfers tokens to address so they collect dividends\r\n     */\r\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"Array sizes must be equal\"\r\n        );\r\n        uint256 i = 0;\r\n        while (i < addresses.length) {\r\n            uint256 _amount = amounts[i].mul(ONE);\r\n            _mint(addresses[i], _amount);\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sets inital vest amount and bool for a vested address and transfers tokens to address so they collect dividends\r\n     */\r\n    function distributeVest(address[] calldata vestedAddresses, uint256 _amount)\r\n        external\r\n        ownerOrMinter\r\n    {\r\n        uint256 i = 0;\r\n        while (i < vestedAddresses.length) {\r\n            address vestAddress = vestedAddresses[i];\r\n            _mint(vestAddress, _amount);\r\n            uint256 minBalance = getMinHoldForDividends();\r\n            if (_amount >= minBalance) {\r\n                try\r\n                    dividendTracker.setBalance(\r\n                        payable(vestAddress),\r\n                        balanceOf(vestAddress)\r\n                    )\r\n                {} catch {}\r\n            }\r\n            initialVest[vestAddress] = initialVest[vestAddress].add(_amount);\r\n            vestedAddress[vestAddress] = true;\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        _burn(_msgSender(), _amount);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account already 'excluded'\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setTakeFees(bool _takeFees) external onlyOwner {\r\n        require(takeFees != _takeFees, \"Updating to current value, takeFees\");\r\n        takeFees = _takeFees;\r\n    }\r\n\r\n    function setMaxDailyAmountToSell(uint256 _maxDailySell) external onlyOwner {\r\n        emit MaxDailyAmountToSellChanged(\r\n            maximumDailyAmountToSell,\r\n            _maxDailySell\r\n        );\r\n        maximumDailyAmountToSell = _maxDailySell;\r\n    }\r\n\r\n    function enableMaxDailyAmountToSell(bool _enableMaxDailySell)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            enableMaxDailySell != _enableMaxDailySell,\r\n            \"Updating to current value, enableMaxDailySell\"\r\n        );\r\n        enableMaxDailySell = _enableMaxDailySell;\r\n    }\r\n\r\n    function setDailyCoolDown(bool _dailyCoolDown) external onlyOwner {\r\n        require(\r\n            dailyCoolDown != _dailyCoolDown,\r\n            \"Updating to current value, dailyCoolDown\"\r\n        );\r\n        dailyCoolDown = _dailyCoolDown;\r\n    }\r\n\r\n    function setDailyVestCoolDown(\r\n        bool _dailyVestSellingCoolDown,\r\n        uint256 _maxDailyVestToSell\r\n    ) external onlyOwner {\r\n        maxDailyVestToSell = _maxDailyVestToSell;\r\n        dailyVestSellingCoolDownEnabled = _dailyVestSellingCoolDown;\r\n    }\r\n\r\n    function setAutomatedMarketMakerRouter(address router, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            router != address(uniswapV2Router),\r\n            \"Router cannot be removed from automatedMarketMakerRouters\"\r\n        );\r\n        require(\r\n            automatedMarketMakerRouters[router] != value,\r\n            \"Automated market maker router is already set to that value\"\r\n        );\r\n        automatedMarketMakerRouters[router] = value;\r\n        dividendTracker.excludeFromDividends(router, false);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"Pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair, false);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner {\r\n        if (value) {\r\n            require(!isBlacklisted[account], \"Already blacklisted\");\r\n            dividendTracker.excludeFromDividends(account, true);\r\n        }\r\n        isBlacklisted[account] = value;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        dividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function updateMinimumToken(uint256 minimumToken) external onlyOwner {\r\n        dividendTracker.updateMinimumToken(minimumToken);\r\n    }\r\n\r\n    function getMinHoldForDividends() public view returns (uint256) {\r\n        return dividendTracker.minimumTokenBalanceForDividends();\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return dividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) external view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function excludeFromDividends(address account, bool reduceHolderCount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            !(dividendTracker.excludedFromDividends(account)),\r\n            \"Already excluded from dividends\"\r\n        );\r\n        dividendTracker.excludeFromDividends(account, reduceHolderCount);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        )\r\n    {\r\n        return dividendTracker.getAccount(_account);\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function setProjectWallet(address projectWallet) external onlyOwner {\r\n        _projectWallet = payable(projectWallet);\r\n    }\r\n\r\n    function setMaxHoldings(uint256 _amount, bool _enabled) external onlyOwner {\r\n        uint256 _oldMaxHoldings = maxHoldings;\r\n\r\n        maxHoldings = _amount.mul(ONE);\r\n        maxHoldingsEnabled = _enabled;\r\n\r\n        emit MaxHoldingsChanged(\r\n            _oldMaxHoldings,\r\n            maxHoldings,\r\n            maxHoldingsEnabled\r\n        );\r\n    }\r\n\r\n    function setVestedSellLimit(uint256 _amount) external onlyOwner {\r\n        uint256 oldVestedSellLimit = vestedSellLimit;\r\n        vestedSellLimit = _amount.mul(ONE);\r\n        emit VestedSellLimitChanged(oldVestedSellLimit, vestedSellLimit);\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _nativeRewardFeeForBuying,\r\n        uint256 _liquidityFeeForBuying,\r\n        uint256 _projectFeeForBuying,\r\n        uint256 _nativeRewardFeeForSelling,\r\n        uint256 _liquidityFeeForSelling,\r\n        uint256 _projectFeeForSelling,\r\n        uint256 _nativeRewardFeeForTransfering,\r\n        uint256 _liquidityFeeForTransfering,\r\n        uint256 _projectFeeForTransfering\r\n    ) external onlyOwner {\r\n        nativeRewardsFeeForBuying = _nativeRewardFeeForBuying;\r\n        liquidityFeeForBuying = _liquidityFeeForBuying;\r\n        projectFeeForBuying = _projectFeeForBuying;\r\n        totalFeesForBuying = nativeRewardsFeeForBuying\r\n            .add(liquidityFeeForBuying)\r\n            .add(projectFeeForBuying);\r\n        nativeRewardsFeeForSelling = _nativeRewardFeeForSelling;\r\n        liquidityFeeForSelling = _liquidityFeeForSelling;\r\n        projectFeeForSelling = _projectFeeForSelling;\r\n        totalFeesForSelling = nativeRewardsFeeForSelling\r\n            .add(liquidityFeeForSelling)\r\n            .add(projectFeeForSelling);\r\n\r\n        nativeRewardsFeeForTransfering = _nativeRewardFeeForTransfering;\r\n        liquidityFeeForTransfering = _liquidityFeeForTransfering;\r\n        projectFeeForTransfering = _projectFeeForTransfering;\r\n        totalFeesForTransfering = nativeRewardsFeeForTransfering\r\n            .add(liquidityFeeForTransfering)\r\n            .add(projectFeeForTransfering);\r\n\r\n        emit FeesChanged(\r\n            totalFeesForBuying,\r\n            totalFeesForSelling,\r\n            totalFeesForTransfering\r\n        );\r\n    }\r\n\r\n    function setBuySellOnly(bool value) external onlyOwner {\r\n        buySellOnly = value;\r\n    }\r\n\r\n    function toggleAntiSnipeBot() external onlyOwner {\r\n        antiSnipeBot = !antiSnipeBot;\r\n    }\r\n\r\n    function setFirstLiveBlock() external onlyOwner {\r\n        firstLiveBlock = block.timestamp;\r\n        firstLiveBlockNumber = block.number;\r\n        paused = false;\r\n    }\r\n\r\n    function setSendDividendsEnabled(bool value) external onlyOwner {\r\n        sendDividendsEnabled = value;\r\n    }\r\n\r\n    function setPaused(bool value) external onlyOwner {\r\n        paused = value;\r\n    }\r\n\r\n    function setMaxTXEnabled(bool value) external onlyOwner {\r\n        maxTXEnabled = value;\r\n    }\r\n\r\n    function setMaxTXAmount(uint256 _amount) external onlyOwner {\r\n        uint256 oldMaxTXAmount = maxTXAmount;\r\n        maxTXAmount = _amount.mul(ONE);\r\n        emit MaxTXAmountChanged(oldMaxTXAmount, maxTXAmount);\r\n    }\r\n\r\n    function setSwapAtAmount(uint256 _amount) external onlyOwner {\r\n        uint256 oldSwapTokensAtAmount = swapTokensAtAmount;\r\n        swapTokensAtAmount = _amount.mul(ONE);\r\n        emit SwapTokensAtAmountChanged(\r\n            oldSwapTokensAtAmount,\r\n            swapTokensAtAmount\r\n        );\r\n    }\r\n\r\n    function checkVestSchedule(address _user, uint256 vestedTime)\r\n        private\r\n        view\r\n        returns (uint256 _unlockedAmount)\r\n    {\r\n        if (vestedAddress[_user]) {\r\n            uint256 initalVest = initialVest[_user];\r\n            if (vestedTime < 24 hours) {\r\n                _unlockedAmount = 0;\r\n            } else if (vestedTime < 4 weeks) {\r\n                _unlockedAmount = initalVest.mul(2).div(10);\r\n            } else if (vestedTime < 8 weeks) {\r\n                _unlockedAmount = initalVest.mul(25).div(100);\r\n            } else if (vestedTime < 12 weeks) {\r\n                _unlockedAmount = initalVest.mul(30).div(100);\r\n            } else if (vestedTime < 16 weeks) {\r\n                _unlockedAmount = initalVest.mul(35).div(100);\r\n            } else if (vestedTime < 20 weeks) {\r\n                _unlockedAmount = initalVest.mul(40).div(100);\r\n            } else if (vestedTime < 24 weeks) {\r\n                _unlockedAmount = initalVest.mul(45).div(100);\r\n            } else if (vestedTime < 28 weeks) {\r\n                _unlockedAmount = initalVest.div(2);\r\n            } else if (vestedTime < 32 weeks) {\r\n                _unlockedAmount = initalVest.mul(56).div(100);\r\n            } else if (vestedTime < 36 weeks) {\r\n                _unlockedAmount = initalVest.mul(62).div(100);\r\n            } else if (vestedTime < 40 weeks) {\r\n                _unlockedAmount = initalVest.mul(68).div(100);\r\n            } else if (vestedTime < 44 weeks) {\r\n                _unlockedAmount = initalVest.mul(76).div(100);\r\n            } else if (vestedTime < 48 weeks) {\r\n                _unlockedAmount = initalVest.mul(84).div(100);\r\n            } else if (vestedTime < 52 weeks) {\r\n                _unlockedAmount = initalVest.mul(92).div(100);\r\n            } else if (vestedTime > 52 weeks) {\r\n                _unlockedAmount = initalVest;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            !isBlacklisted[from] &&\r\n                !isBlacklisted[to] &&\r\n                !isBlacklisted[tx.origin],\r\n            \"Blacklisted address\"\r\n        );\r\n        if (from != owner()) {\r\n            require(!paused, \"trading paused\");\r\n        }\r\n\r\n        if (from != owner() && to != owner()) {\r\n            checkTransactionParameters(from, to, amount);\r\n        }\r\n\r\n        if (isBlacklisted[tx.origin]) {\r\n            return;\r\n        }\r\n\r\n        if (vestedAddress[from]) {\r\n            uint256 balance = balanceOf(from);\r\n            uint256 vestedTime = block.timestamp.sub(firstLiveBlock);\r\n\r\n            if (vestedTime > 52 weeks) {\r\n                vestedAddress[from] = false;\r\n            } else {\r\n                uint256 unlockedVest = checkVestSchedule(from, vestedTime);\r\n                uint256 availableUnlocked = unlockedVest.sub(\r\n                    transferedVest[from]\r\n                );\r\n                if (\r\n                    automatedMarketMakerPairs[to] ||\r\n                    automatedMarketMakerRouters[to]\r\n                ) {\r\n                    availableUnlocked = availableUnlocked < vestedSellLimit\r\n                        ? availableUnlocked\r\n                        : vestedSellLimit;\r\n                }\r\n\r\n                require(\r\n                    (balance.sub(initialVest[from].sub(transferedVest[from])))\r\n                        .add(availableUnlocked) >= amount,\r\n                    \"Can't bypass vest and can't bypass vestedSellLimit\"\r\n                );\r\n            }\r\n            uint256 nonVested = balance.sub(\r\n                initialVest[from].sub(transferedVest[from])\r\n            );\r\n            uint256 txVest = amount > nonVested ? amount.sub(nonVested) : 0;\r\n            transferedVest[from] += txVest;\r\n            if (\r\n                txVest > 0 &&\r\n                (automatedMarketMakerPairs[to] ||\r\n                    automatedMarketMakerRouters[to])\r\n            ) {\r\n                if (\r\n                    _lastDailySoldVest[from].lastTransfer + 86400 >=\r\n                    block.timestamp\r\n                ) {\r\n                    _lastDailySoldVest[from].amount += txVest;\r\n                } else {\r\n                    _lastDailySoldVest[from].amount = txVest;\r\n                }\r\n                _lastDailySoldVest[from].lastTransfer = block.timestamp;\r\n                if (dailyVestSellingCoolDownEnabled) {\r\n                    require(\r\n                        _lastDailySoldVest[from].amount <= maxDailyVestToSell,\r\n                        \"Reached max daily vest to sell\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >=\r\n            swapTokensAtAmount;\r\n        if (\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !automatedMarketMakerRouters[from] &&\r\n            overMinimumTokenBalance\r\n        ) {\r\n            swapping = true;\r\n            swapAndDistribute(contractTokenBalance);\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n        if (\r\n            _isExcludedFromFees[from] ||\r\n            _isExcludedFromFees[to] ||\r\n            !takeFees ||\r\n            from == owner() ||\r\n            to == owner()\r\n        ) {\r\n            takeFee = false;\r\n        }\r\n        uint256 fees;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[to]) {\r\n                fees = amount.mul(totalFeesForSelling).div(100);\r\n            } else if (automatedMarketMakerPairs[from]) {\r\n                fees = amount.mul(totalFeesForBuying).div(100);\r\n            } else {\r\n                fees = amount.mul(totalFeesForTransfering).div(100);\r\n            }\r\n            //amount = amount.sub(fees);\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount.sub(fees));\r\n\r\n        //check if bots were blacklisted on first block before setting dividends\r\n        try\r\n            dividendTracker.setBalance(payable(from), balanceOf(from))\r\n        {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n    }\r\n\r\n    function swapAndDistribute(uint256 tokens) private {\r\n        uint256 liquidityFee = liquidityFeeForSelling +\r\n            liquidityFeeForBuying +\r\n            liquidityFeeForTransfering;\r\n        uint256 projectFee = projectFeeForSelling +\r\n            projectFeeForBuying +\r\n            projectFeeForTransfering;\r\n        uint256 totalFees = totalFeesForSelling +\r\n            totalFeesForBuying +\r\n            totalFeesForTransfering;\r\n\r\n        uint256 _liqTokens = tokens.mul(liquidityFee).div(totalFees);\r\n        uint256 tokensToSave = _liqTokens.div(2);\r\n        uint256 tokensToSwap = tokens.sub(tokensToSave);\r\n        uint256 preBalance = address(this).balance;\r\n        swapTokensForEth(tokensToSwap);\r\n        uint256 postBalance = address(this).balance.sub(preBalance);\r\n        uint256 ethForLiq = (\r\n            postBalance.mul(liquidityFee).div(totalFees).div(2)\r\n        );\r\n        uint256 ethForProject = (postBalance.mul(projectFee).div(totalFees));\r\n        _projectWallet.transfer(ethForProject);\r\n        addLiquidity(tokensToSave, ethForLiq);\r\n        uint256 finalBalance = address(this).balance;\r\n        if (sendDividendsEnabled) {\r\n            sendDividends(finalBalance);\r\n        }\r\n    }\r\n\r\n    function checkTransactionParameters(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (dailyCoolDown && automatedMarketMakerPairs[to]) {\r\n            require(\r\n                _lastTransfer[from] + 86400 <= block.timestamp,\r\n                \"One sell per day is allowed\"\r\n            );\r\n        }\r\n\r\n        if (automatedMarketMakerPairs[to]) {\r\n            if (_lastTransfer[from] + 86400 >= block.timestamp) {\r\n                _lastDailyTransferedAmount[from] += amount;\r\n            } else {\r\n                _lastDailyTransferedAmount[from] = amount;\r\n            }\r\n\r\n            _lastTransfer[from] = block.timestamp;\r\n        }\r\n\r\n        if (enableMaxDailySell) {\r\n            require(\r\n                _lastDailyTransferedAmount[from] <= maximumDailyAmountToSell,\r\n                \"Max daily sell amount was reached\"\r\n            );\r\n        }\r\n\r\n        if (maxTXEnabled) {\r\n            if (from != address(this)) {\r\n                require(amount <= maxTXAmount, \"exceeds max tx amount\");\r\n            }\r\n        }\r\n\r\n        if (cooldown) {\r\n            if (from != address(this) && to != address(this)) {\r\n                if (\r\n                    !automatedMarketMakerPairs[to] &&\r\n                    !automatedMarketMakerRouters[from]\r\n                ) {\r\n                    require(\r\n                        block.timestamp >= (_lastTX[to] + 30 seconds),\r\n                        \"Cooldown in effect\"\r\n                    );\r\n                    _lastTX[to] = block.timestamp;\r\n                }\r\n                if (\r\n                    !automatedMarketMakerPairs[from] &&\r\n                    !automatedMarketMakerRouters[from]\r\n                ) {\r\n                    require(\r\n                        block.timestamp >= (_lastTX[from] + 30 seconds),\r\n                        \"Cooldown in effect\"\r\n                    );\r\n                    _lastTX[from] = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (antiSnipeBot) {\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                !automatedMarketMakerRouters[to] &&\r\n                to != address(this) &&\r\n                from != address(this)\r\n            ) {\r\n                require(tx.origin == to);\r\n            }\r\n            if (block.number <= firstLiveBlockNumber + 1) {\r\n                isBlacklisted[tx.origin] = true;\r\n                if (tx.origin != from && tx.origin != to) {\r\n                    dividendTracker.excludeFromDividends(tx.origin, true);\r\n                }\r\n                if (\r\n                    !automatedMarketMakerPairs[from] &&\r\n                    !automatedMarketMakerRouters[from] &&\r\n                    from != address(this)\r\n                ) {\r\n                    isBlacklisted[from] = true;\r\n                    dividendTracker.excludeFromDividends(from, true);\r\n                }\r\n\r\n                if (\r\n                    !automatedMarketMakerPairs[to] &&\r\n                    !automatedMarketMakerRouters[to] &&\r\n                    to != address(this)\r\n                ) {\r\n                    isBlacklisted[to] = true;\r\n                    dividendTracker.excludeFromDividends(to, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (maxHoldingsEnabled) {\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                to != address(uniswapV2Router) &&\r\n                to != address(this)\r\n            ) {\r\n                uint256 balance = balanceOf(to);\r\n                require(balance.add(amount) <= maxHoldings);\r\n            }\r\n        }\r\n\r\n        if (buySellOnly) {\r\n            if (from != address(this) && to != address(this)) {\r\n                require(\r\n                    automatedMarketMakerPairs[from] ||\r\n                        automatedMarketMakerPairs[to] ||\r\n                        automatedMarketMakerRouters[from] ||\r\n                        automatedMarketMakerRouters[to],\r\n                    \"No transfers\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendDividends(uint256 dividends) private {\r\n        (bool success, ) = address(dividendTracker).call{value: dividends}(\"\");\r\n        if (success) {\r\n            emit SendDividends(dividends);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFeesForBuying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFeesForSelling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFeesForTransfering\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MaxDailyAmountToSellChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldHoldings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHoldings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"maxHoldingsEnabled\",\"type\":\"bool\"}],\"name\":\"MaxHoldingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTXAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTXAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTXAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapTokensAtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensAtAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"VestedSellLimitChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSnipeBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"autoAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySellOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyCoolDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyVestSellingCoolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract VCDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableMaxDailySell\",\"type\":\"bool\"}],\"name\":\"enableMaxDailyAmountToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMaxDailySell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reduceHolderCount\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstLiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstLiveBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilAutoClaimAvailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinHoldForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialVest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeForTransfering\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDailyVestToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTXEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDailyAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeRewardsFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeRewardsFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeRewardsFeeForTransfering\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFeeForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFeeForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFeeForTransfering\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendDividendsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBuySellOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dailyCoolDown\",\"type\":\"bool\"}],\"name\":\"setDailyCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dailyVestSellingCoolDown\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxDailyVestToSell\",\"type\":\"uint256\"}],\"name\":\"setDailyVestCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeRewardFeeForBuying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeForBuying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectFeeForBuying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeRewardFeeForSelling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeForSelling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectFeeForSelling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeRewardFeeForTransfering\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeForTransfering\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectFeeForTransfering\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFirstLiveBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDailySell\",\"type\":\"uint256\"}],\"name\":\"setMaxDailyAmountToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMaxHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTXAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMaxTXEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectWallet\",\"type\":\"address\"}],\"name\":\"setProjectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSendDividendsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_takeFees\",\"type\":\"bool\"}],\"name\":\"setTakeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setVestedSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAntiSnipeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesForBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesForTransfering\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferedVest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumToken\",\"type\":\"uint256\"}],\"name\":\"updateMinimumToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PlatformToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e9d7159d537a141bf63fdce5913a68d7eb5db96346e24d35db06af6ea10275d4"}]}