{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IBEP20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract reward{\r\n    using SafeMath for uint256;\r\n    \r\n     IBEP20 public token;\r\n     mapping(uint256 => uint256) public allocation;\r\n     mapping(address=> uint256) public feedback;\r\n     mapping(address=>uint256) public redeemcode;\r\n     mapping(address=>bool) public check;\r\n     mapping(address=>bool) public rewardcheck;\r\n\r\n     address payable public owner;\r\n\r\n \r\n\r\n     \r\n    constructor (IBEP20 _Token) \r\n    {     \r\n      \r\n         token = _Token;\r\n         owner = payable(msg.sender);\r\n    allocation[1] = 10000000000000000000;\r\n    allocation[2] = 20000000000000000000;\r\n    allocation[3] = 30000000000000000000;\r\n    allocation[4] = 40000000000000000000;\r\n    allocation[5] = 50000000000000000000;\r\n    }\r\n\r\n    modifier onlyOnwer(){\r\n\r\n        require(msg.sender==owner,\"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function givefeedback(uint256 _number) public{\r\n\r\n        require(_number==1||_number==2||_number==3||_number==4||_number==5,\"Invalid FeedBack\");\r\n        require(check[msg.sender]!=true,\"Already gave the feedback!\");\r\n       uint256 code= (uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp))))%10000;\r\n       redeemcode[msg.sender]=code;\r\n       feedback[msg.sender]=_number;\r\n       check[msg.sender]=true;\r\n    }\r\n\r\n    function getreward(uint256 _code) public{\r\n\r\n         require(rewardcheck[msg.sender]!=true,\"Already reward was withdrawn!\");\r\n        require(redeemcode[msg.sender]==_code,\"Invalid Redeem Code!\");\r\n\r\n\r\n        if(feedback[msg.sender]==1)\r\n        {\r\n            token.transfer(msg.sender,allocation[1]);\r\n\r\n        }\r\n\r\n       else if(feedback[msg.sender]==2){\r\n           token.transfer(msg.sender,allocation[2]);\r\n        }\r\n\r\n        else if(feedback[msg.sender]==3){\r\n\r\n            token.transfer(msg.sender,allocation[3]);\r\n\r\n        }\r\n\r\n        else if(feedback[msg.sender]==4){\r\n            token.transfer(msg.sender,allocation[4]);\r\n\r\n        }\r\n\r\n        else if(feedback[msg.sender]==5){\r\n            token.transfer(msg.sender,allocation[5]);\r\n\r\n        }\r\n\r\n        rewardcheck[msg.sender]=true;\r\n\r\n    }\r\n\r\n    function changerewardperct(uint256 one,uint256 two,uint256 three,uint256 four,uint256 five) public onlyOnwer{\r\n\r\n        allocation[1]=one;\r\n        allocation[2] = two;\r\n        allocation[3] = three;\r\n        allocation[4] = four;\r\n        allocation[5] = five;\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n      function Withdraw(uint256 amount) payable public onlyOnwer{\r\n        require(address(this).balance >= amount, \"Invalid amount\");\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function WithdrawToken(uint256 _amount) public onlyOnwer{\r\n        \r\n        token.transfer(owner, _amount);\r\n    }   \r\n\r\n}\r\n//  lmy token 0x66fD97a78d8854fEc445cd1C80a07896B0b4851f", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"one\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"two\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"three\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"four\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"five\",\"type\":\"uint256\"}],\"name\":\"changerewardperct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feedback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"getreward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"givefeedback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemcode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardcheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "reward", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000066fd97a78d8854fec445cd1c80a07896b0b4851f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5aeab1e7f189258d1fa7f22c29584bbb799f8154d35d5fe13cf4b4432efdc0ff"}]}