{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NguyeningDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n//OpenZEPP\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint256) values;\\r\\n        mapping(address => uint256) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) public view returns (uint256) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(Map storage map, address key)\\r\\n        public\\r\\n        view\\r\\n        returns (int256)\\r\\n    {\\r\\n        if (!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int256(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n    function size(Map storage map) public view returns (uint256) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(\\r\\n        Map storage map,\\r\\n        address key,\\r\\n        uint256 val\\r\\n    ) public {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) public {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint256 index = map.indexOf[key];\\r\\n        uint256 lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract NodeManager is Ownable {\\r\\n    // Declare all necessary variables\\r\\n    using IterableMapping for IterableMapping.Map;\\r\\n    uint256 public setupFee = 0.01 ether; // ONE-TIME ETH-USD FEE TO SETUP NODE\\r\\n    uint256 public nodeFee = 100 * (10**18); // COST TO SETUP EACH NODE IN $WIN TOKENS\\r\\n    uint256 public nodeReward = 1 * (10**18); // MAXIMUM REWARDS FOR NODE PER DAY\\r\\n    uint256 public burnCount; // Keep track of total tokens burned\\r\\n    uint256 public nodeLimit = 100; // Node Limit Per account\\r\\n    uint256 public minAgeReduction = 8 hours;\\r\\n    uint256 public totalNodes;\\r\\n    uint256 public burnAmount = 20; // Tokent amount to be burned per node creation\\r\\n    address public gateKeeper;\\r\\n    address public token;\\r\\n\\r\\n    struct RewardModel {\\r\\n        uint256 rewardRate;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n\\r\\n    struct NodeModel {\\r\\n        uint256 creationTime;\\r\\n        uint256 lastClaimTime;\\r\\n        uint256 nodeLevel;\\r\\n        uint256 rewards;\\r\\n    }\\r\\n\\r\\n    IterableMapping.Map private nodeOwners;\\r\\n    mapping(address => NodeModel[]) private userNodes;\\r\\n    RewardModel public rewardManager;\\r\\n\\r\\n    constructor(address _gate, address _token) {\\r\\n        token = _token;\\r\\n        gateKeeper = _gate;\\r\\n        rewardManager.rewardRate = nodeReward;\\r\\n        rewardManager.lastUpdated = block.timestamp;\\r\\n    }\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            msg.sender == token ||\\r\\n                msg.sender == gateKeeper ||\\r\\n                msg.sender == owner(),\\r\\n            \\\"ERROR: You are not authorized.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    function setRewardRate(uint256 _amount) external onlyController{\\r\\n        require(_amount > 0 && _amount <= nodeReward, \\\"Set Reward ERROR: Amount is not within boundaries.\\\");\\r\\n        rewardManager.rewardRate = _amount;\\r\\n        rewardManager.lastUpdated = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function totalRewards(address _account, uint256 _timeStamp)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //REQUIRE TO BE A NODE OWNER\\r\\n        require(\\r\\n            nodeOwners.get(_account) > 0,\\r\\n            \\\"NODE ERROR: USER DO NOT OWN ANY NODES.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 rewardCount;\\r\\n\\r\\n        NodeModel[] memory nodes = userNodes[_account];\\r\\n\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            //NEED GET TOTAL AMOUNT OF REWARDS\\r\\n            rewardCount += getRewardWithDecay(nodes[i], _timeStamp);\\r\\n            rewardCount += nodes[i].rewards;\\r\\n        }\\r\\n\\r\\n        return rewardCount;\\r\\n    }\\r\\n\\r\\n    function claimAll(address _account, uint256 _timeStamp)\\r\\n        external\\r\\n        onlyController\\r\\n    {\\r\\n        //Need to add requirement to the GateKeeper\\r\\n        NodeModel[] storage nodes = userNodes[_account];\\r\\n        for (uint256 i = 0; i < nodes.length; i++) {\\r\\n            //Update node last claim time\\r\\n            nodes[i].lastClaimTime = _timeStamp;\\r\\n            nodes[i].rewards = 0;\\r\\n        }\\r\\n        //Last claim updated for all nodes, now rewards will be sent via main contract.\\r\\n        //Rewards will be send from distribution pool which could be the token contract itself.\\r\\n    }\\r\\n\\r\\n    function updatePendingRewards(address _account, uint256 _amount) external onlyController{\\r\\n        userNodes[_account][0].rewards += _amount;\\r\\n    }\\r\\n\\r\\n    function createNode(\\r\\n        uint256 _amount,\\r\\n        address _account,\\r\\n        uint256 _level\\r\\n    ) external onlyController {\\r\\n        for (uint256 i = 0; i < _amount; i++) {\\r\\n            userNodes[_account].push(\\r\\n                NodeModel({\\r\\n                    creationTime: block.timestamp,\\r\\n                    lastClaimTime: block.timestamp,\\r\\n                    nodeLevel: _level,\\r\\n                    rewards: 0\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n        totalNodes = totalNodes + _amount;\\r\\n        nodeOwners.set(_account, userNodes[_account].length);\\r\\n    }\\r\\n\\r\\n    function levelUp(address _account, uint256 _index, uint256 _level) external onlyController{\\r\\n        NodeModel[] storage nodes = userNodes[_account];\\r\\n        nodes[_index].rewards = nodes[_index].rewards + getRewardWithDecay(nodes[_index], block.timestamp);\\r\\n        uint256 currentLevel = nodes[_index].nodeLevel;\\r\\n        nodes[_index].nodeLevel = currentLevel + _level;\\r\\n        currentLevel++;\\r\\n        nodes[_index].lastClaimTime = block.timestamp;\\r\\n        totalNodes = totalNodes + _level;\\r\\n        uint256 creationTime = nodes[_index].creationTime;\\r\\n        uint256 newCreationTime;\\r\\n        for(uint256 i = 0; i < _level; i++){\\r\\n            uint256 addAge = (block.timestamp - creationTime)/(currentLevel + i);\\r\\n            if(addAge < minAgeReduction)\\r\\n                newCreationTime += minAgeReduction;\\r\\n            else\\r\\n                newCreationTime += addAge;\\r\\n        }\\r\\n\\r\\n        if(creationTime + newCreationTime >= block.timestamp)\\r\\n            nodes[_index].creationTime = block.timestamp;\\r\\n        else\\r\\n            nodes[_index].creationTime += newCreationTime;\\r\\n    }\\r\\n\\r\\n    function getAllUserNodes(address _account) external view returns(string memory){\\r\\n        require(nodeOwners.get(_account) > 0, \\\"GET NODE ERROR: USER DO NOT OWN ANY NODES.\\\");\\r\\n        NodeModel[] memory nodes = userNodes[_account];\\r\\n        string memory separator = \\\"#\\\";\\r\\n        string memory insep = \\\",\\\";\\r\\n        string memory data; \\r\\n        {data = string(abi.encodePacked(uint2str(0), insep, uint2str(nodes[0].creationTime), insep, uint2str(nodes[0].lastClaimTime)));}\\r\\n        {data = string(abi.encodePacked(data, insep, uint2str(nodes[0].nodeLevel), insep, uint2str(nodes[0].rewards)));}\\r\\n        for (uint256 i = 1; i < nodes.length; i++) {\\r\\n            {data = string(abi.encodePacked(data, separator, uint2str(i), insep, uint2str(nodes[i].creationTime))); }\\r\\n            {data = string(abi.encodePacked(data, insep, uint2str(nodes[i].lastClaimTime), insep, uint2str(nodes[i].nodeLevel), insep, uint2str(nodes[i].rewards))); }\\r\\n        }\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function getRangeUserNodes(address _account, uint256 _start, uint256 _end) external view returns(string memory){\\r\\n        require(nodeOwners.get(_account) > 0, \\\"GET NODE ERROR: USER DO NOT OWN ANY NODES.\\\");\\r\\n        NodeModel[] memory nodes = userNodes[_account];\\r\\n        uint256 nodesCount = nodes.length;\\r\\n        require(_end <= nodesCount && _start <= nodesCount && _start < _end, \\\"Get Node ERROR: Need start or end to be within range.\\\");\\r\\n        string memory separator = \\\"#\\\";\\r\\n        string memory insep = \\\",\\\";\\r\\n        string memory data; \\r\\n        {data = string(abi.encodePacked(uint2str(_start), insep, uint2str(nodes[_start].creationTime), insep, uint2str(nodes[_start].lastClaimTime))); }\\r\\n        {data = string(abi.encodePacked(data, insep, uint2str(nodes[_start].nodeLevel), insep, uint2str(nodes[_start].rewards)));}\\r\\n        \\r\\n        for (uint256 i = _start+1; i <= _end; i++) {\\r\\n            {data = string(abi.encodePacked(data, separator, uint2str(i), insep, uint2str(nodes[i].creationTime)));}\\r\\n            {data = string(abi.encodePacked(data, insep, uint2str(nodes[i].lastClaimTime), insep, uint2str(nodes[i].nodeLevel), insep, uint2str(nodes[i].rewards)));}\\r\\n        }\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function getNodeByIndex(address _account, uint256 _index) external view returns(string memory){\\r\\n        require(nodeOwners.get(_account) > 0, \\\"GET NODE ERROR: USER DO NOT OWN ANY NODES.\\\");\\r\\n        NodeModel[] memory nodes = userNodes[_account];\\r\\n        require(_index < nodes.length, \\\"Get Node ERROR: Index is not within range.\\\");\\r\\n        string memory insep = \\\",\\\";\\r\\n        return string(abi.encodePacked(uint2str(_index), insep, uint2str(nodes[_index].creationTime), insep, uint2str(nodes[_index].lastClaimTime), insep, uint2str(nodes[_index].nodeLevel), insep, uint2str(nodes[_index].rewards)));\\r\\n    }\\r\\n\\r\\n    function getRewardWithDecay(NodeModel memory node, uint256 _timeStamp) private view returns (uint256) {\\r\\n        uint256 rewardCount;\\r\\n        uint256 decay;\\r\\n\\r\\n        if(_timeStamp >= node.creationTime + 540 days){\\r\\n            decay = (((_timeStamp - node.lastClaimTime) * ((rewardManager.rewardRate * node.nodeLevel) / 1 days)) / 10) * 9;\\r\\n        }\\r\\n        else if(_timeStamp >= node.creationTime + 360 days){\\r\\n            decay = (((_timeStamp - node.lastClaimTime) * ((rewardManager.rewardRate * node.nodeLevel) / 1 days)) / 4) * 3;\\r\\n        } else if(_timeStamp >= node.creationTime + 180 days){\\r\\n            decay = ((_timeStamp - node.lastClaimTime) * ((rewardManager.rewardRate * node.nodeLevel) / 1 days)) / 2;\\r\\n        } else if(_timeStamp >= node.creationTime + 90 days){\\r\\n            decay = ((_timeStamp - node.lastClaimTime) * ((rewardManager.rewardRate * node.nodeLevel) / 1 days)) / 4;\\r\\n        } else {\\r\\n            decay = 0;\\r\\n        }\\r\\n        rewardCount = (_timeStamp - node.lastClaimTime) * ((rewardManager.rewardRate * node.nodeLevel) / 1 days) - decay;\\r\\n\\r\\n        return rewardCount;\\r\\n    }\\r\\n\\r\\n    function getRewardsByIndex(address _account, uint256 _timeStamp, uint256 _index) external view returns (uint256){\\r\\n        require(nodeOwners.get(_account) > 0, \\\"GET NODE ERROR: USER DO NOT OWN ANY NODES.\\\");\\r\\n        NodeModel[] memory nodes = userNodes[_account];\\r\\n        require(_index < nodes.length, \\\"Get Node ERROR: Index is not within range.\\\");\\r\\n        return getRewardWithDecay(nodes[_index], _timeStamp) + nodes[_index].rewards;\\r\\n    }\\r\\n\\r\\n    function getNodeNumberOf(address _account) external view returns (uint256) {\\r\\n        return nodeOwners.get(_account);\\r\\n    }\\r\\n\\r\\n    function getLastRewardRateUpdate() external view returns (uint256){\\r\\n        return rewardManager.lastUpdated;\\r\\n    }\\r\\n\\r\\n    function setSetupFee(uint256 _amount) external onlyController {\\r\\n        setupFee = _amount;\\r\\n    }\\r\\n\\r\\n    function setNodeFee(uint256 _amount) external onlyController {\\r\\n        nodeFee = _amount;\\r\\n    }\\r\\n\\r\\n    function setReward(uint256 _amount) external onlyController {\\r\\n        nodeReward = _amount;\\r\\n    }\\r\\n\\r\\n    function setBurnAmount(uint256 _amount) external onlyController {\\r\\n        burnAmount = _amount;\\r\\n    }\\r\\n\\r\\n    function setNodeLimit(uint256 _amount) external onlyController {\\r\\n        nodeLimit = _amount;\\r\\n    }\\r\\n\\r\\n    function setGateKeeper(address _account) external onlyController {\\r\\n        gateKeeper = _account;\\r\\n    }\\r\\n\\r\\n    function setToken(address _account) external onlyController {\\r\\n        token = _account;\\r\\n    }\\r\\n\\r\\n    function updateBurnCount(uint256 _amount) external onlyController {\\r\\n        burnCount += _amount;\\r\\n    }\\r\\n\\r\\n    function setBurnCount(uint256 _amount) external onlyController {\\r\\n        burnCount = _amount;\\r\\n    }\\r\\n\\r\\n    function setMinAgeReduction(uint256 _amount) external onlyController {\\r\\n        minAgeReduction = _amount;\\r\\n    }\\r\\n\\r\\n    function getRewardRate() external view onlyController returns(uint256){\\r\\n        return rewardManager.rewardRate;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract NguyeningDAO is Ownable, ERC20, ERC20Burnable {\\r\\n    NodeManager public nodeManager;\\r\\n    address public distributionPool;\\r\\n    uint256 public rewardTimer = 1 days;\\r\\n    bool isPaused;\\r\\n    mapping(address => bool) private blackList;\\r\\n\\r\\n    constructor(address _distributionPool) ERC20(\\\"NguyeningDAO\\\", \\\"WIN\\\") {\\r\\n        _mint(msg.sender, 10000000 * (10**18));\\r\\n        distributionPool = _distributionPool;\\r\\n        isPaused = false;\\r\\n    }\\r\\n\\r\\n    modifier contractPaused() {\\r\\n        require(isPaused == false);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override contractPaused {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(!blackList[from] && !blackList[to], \\\"Blacklisted address\\\");\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function claimAllRewards() public contractPaused {\\r\\n        address account = msg.sender;\\r\\n        uint256 time = block.timestamp;\\r\\n        require(\\r\\n            nodeManager.getNodeNumberOf(account) > 0,\\r\\n            \\\"CLAIM ERROR: YOU DONT HAVE ANY NODES.\\\"\\r\\n        );\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"CLAIM ERROR: ADDRESS CANNOT BE A ZERO ADDRESS.\\\"\\r\\n        );\\r\\n        require(!blackList[account], \\\"CLAIM ERROR: BLACKLISTED ADDRESS.\\\");\\r\\n        uint256 rewardAmount = nodeManager.totalRewards(account, time);\\r\\n        require(rewardAmount > 0, \\\"CLAIM ERROR: NOT ENOUGH REWARDS.\\\");\\r\\n        require(\\r\\n            balanceOf(distributionPool) >= rewardAmount,\\r\\n            \\\"CLAIM ERROR: POOL DOES NOT HAVE ENOUGH REWARDS. WAIT TILL REPLENISH.\\\"\\r\\n        );\\r\\n        nodeManager.claimAll(account, time);\\r\\n        _transfer(distributionPool, account, rewardAmount);\\r\\n        updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function makeNodes(uint256 _amount, uint256 _level) public payable contractPaused {\\r\\n        address account = msg.sender;\\r\\n        require(\\r\\n            nodeManager.getNodeNumberOf(account) + _amount <=\\r\\n                nodeManager.nodeLimit(),\\r\\n            \\\"NODE CREATION: YOU WILL EXCEEDED THE NODE LIMIT.\\\"\\r\\n        );\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"NODE CREATION: ADDRESS CANNOT BE A ZERO ADDRESS.\\\"\\r\\n        );\\r\\n        require(_level > 0, \\\"NODE CREATION: LEVEL MUST BE GREATER THAN ZERO.\\\");\\r\\n        require(!blackList[account], \\\"NODE CREATION: BLACKLISTED ADDRESS.\\\");\\r\\n        uint256 nodePrice = nodeManager.nodeFee() *\\r\\n            _amount *\\r\\n            _level;\\r\\n        uint256 setupFee = nodeManager.setupFee() *\\r\\n            _amount *\\r\\n            _level;\\r\\n        require(msg.value >= setupFee, \\\"NODE CREATION: User did not send enough ETH.\\\");\\r\\n        require(\\r\\n            balanceOf(account) >= nodePrice,\\r\\n            \\\"NODE CREATION: Not enough tokens to create node(s).\\\"\\r\\n        );\\r\\n        super._transfer(account, distributionPool, nodePrice);\\r\\n        nodeManager.createNode(_amount, account, _level);\\r\\n        uint256 burnAmount = (nodeManager.burnAmount() * (10**18)) * _amount * _level;\\r\\n        if (burnAmount >= 0 && balanceOf(distributionPool) > burnAmount) {\\r\\n            super._burn(distributionPool, burnAmount);\\r\\n            nodeManager.updateBurnCount(nodeManager.burnAmount() * _amount * _level);\\r\\n        }\\r\\n        updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function levelUpNode(uint256 _index, uint256 _level) public payable contractPaused {\\r\\n        address account = msg.sender;\\r\\n        uint256 myNodes = nodeManager.getNodeNumberOf(account);\\r\\n        require(\\r\\n            myNodes > 0,\\r\\n            \\\"LEVEL UP ERROR: YOU DONT HAVE ANY NODES.\\\"\\r\\n        );\\r\\n        require((_index+1) <= myNodes, \\\"LEVEL UP ERROR: THIS NODE INDEX DOES NOT EXIST.\\\");\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"LEVEL UP ERROR: ADDRESS CANNOT BE A ZERO ADDRESS.\\\"\\r\\n        );\\r\\n        require(_level > 0, \\\"LEVEL UP ERROR: LEVEL MUST BE GREATER THAN ZERO.\\\");\\r\\n        require(!blackList[account], \\\"CLAIM ERROR: BLACKLISTED ADDRESS.\\\");\\r\\n        uint256 nodePrice = nodeManager.nodeFee() * _level;\\r\\n        uint256 setupFee = nodeManager.setupFee() * _level;\\r\\n        require(msg.value >= setupFee, \\\"LEVEL UP ERROR: User did not send enough ETH.\\\");\\r\\n        require(\\r\\n            balanceOf(account) >= nodePrice,\\r\\n            \\\"LEVEL UP ERROR: Not enough tokens to create node(s).\\\"\\r\\n        );\\r\\n        super._transfer(account, distributionPool, nodePrice);\\r\\n        nodeManager.levelUp(account, _index, _level);\\r\\n        uint256 burnAmount = (nodeManager.burnAmount() * (10**18)) * _level;\\r\\n        if (burnAmount >= 0 && balanceOf(distributionPool) > burnAmount) {\\r\\n            super._burn(distributionPool, burnAmount);\\r\\n            nodeManager.updateBurnCount(nodeManager.burnAmount() * _level);\\r\\n        }\\r\\n        updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function compoundRewardsToLevel(uint256 _index) public payable contractPaused {\\r\\n        address account = msg.sender;\\r\\n        uint256 myNodes = nodeManager.getNodeNumberOf(account);\\r\\n        require(\\r\\n             myNodes > 0,\\r\\n            \\\"COMPOUND ERROR: YOU DONT HAVE ANY NODES.\\\"\\r\\n        );\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"COMPOUND ERROR: ADDRESS CANNOT BE A ZERO ADDRESS.\\\"\\r\\n        );\\r\\n        require(!blackList[account], \\\"COMPOUND ERROR: BLACKLISTED ADDRESS.\\\");\\r\\n        uint256 totalReward = nodeManager.totalRewards(account,block.timestamp);\\r\\n        uint256 level =  totalReward / nodeManager.nodeFee();\\r\\n        require(\\r\\n            level > 0,\\r\\n            \\\"COMPOUND ERROR: NOT ENOUGH REWARDS TO COMPUND TO LEVEL\\\"\\r\\n        );\\r\\n        require((_index+1) <= myNodes, \\\"COMPOUND ERROR: THIS NODE INDEX DOES NOT EXIST.\\\");\\r\\n        uint256 setupFee = nodeManager.setupFee() * level;\\r\\n        require(msg.value >= setupFee, \\\"COMPOUNED ERROR: DID NOT SEND ENOUGH ETH FOR SETUP FEE.\\\");\\r\\n        nodeManager.claimAll(account, block.timestamp);\\r\\n        nodeManager.levelUp(account, _index, level);\\r\\n        nodeManager.updatePendingRewards(account, totalReward % nodeManager.nodeFee());\\r\\n        uint256 burnAmount = (nodeManager.burnAmount() * (10**18)) *\\r\\n            level;\\r\\n        if (burnAmount >= 0 && balanceOf(distributionPool) > burnAmount) {\\r\\n            super._burn(distributionPool, burnAmount);\\r\\n            nodeManager.updateBurnCount(\\r\\n                nodeManager.burnAmount() * level\\r\\n            );\\r\\n        }\\r\\n        updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function compoundRewards(uint256 _level) public payable contractPaused{\\r\\n        address account = msg.sender;\\r\\n        require(\\r\\n            nodeManager.getNodeNumberOf(account) > 0,\\r\\n            \\\"COMPOUND ERROR: YOU DONT HAVE ANY NODES.\\\"\\r\\n        );\\r\\n        require(_level > 0, \\\"COMPOUND ERROR: THE LEVEL MUST BE GREATER THAN ZERO.\\\");\\r\\n        require(\\r\\n            account != address(0),\\r\\n            \\\"COMPOUND ERROR: ADDRESS CANNOT BE A ZERO ADDRESS.\\\"\\r\\n        );\\r\\n        require(!blackList[account], \\\"COMPOUND ERROR: BLACKLISTED ADDRESS.\\\");\\r\\n        uint256 totalReward = nodeManager.totalRewards(account, block.timestamp);\\r\\n        uint256 amountOfNodes =  totalReward / (nodeManager.nodeFee() * _level);\\r\\n        require(\\r\\n            amountOfNodes > 0,\\r\\n            \\\"COMPOUND ERROR: NOT ENOUGH REWARDS TO COMPUND TO NODE\\\"\\r\\n        );\\r\\n        require(\\r\\n            nodeManager.getNodeNumberOf(account) + amountOfNodes <=\\r\\n                nodeManager.nodeLimit(),\\r\\n            \\\"COMPOUND ERROR: YOU WILL EXCEEDED THE NODE LIMIT.\\\"\\r\\n        );\\r\\n        uint256 setupFee = nodeManager.setupFee() * amountOfNodes * _level;\\r\\n        require(msg.value >= setupFee, \\\"COMPOUNED ERROR: DID NOT SEND ENOUGH ETH FOR SETUP FEE.\\\");\\r\\n        nodeManager.claimAll(account, block.timestamp);\\r\\n        nodeManager.createNode(amountOfNodes, account, _level);\\r\\n        nodeManager.updatePendingRewards(account, totalReward % nodeManager.nodeFee());\\r\\n        uint256 burnAmount = (nodeManager.burnAmount() * (10**18)) *\\r\\n            amountOfNodes * _level;\\r\\n        if (burnAmount >= 0 && balanceOf(distributionPool) > burnAmount) {\\r\\n            super._burn(distributionPool, burnAmount);\\r\\n            nodeManager.updateBurnCount(\\r\\n                nodeManager.burnAmount() * amountOfNodes * _level\\r\\n            );\\r\\n        }\\r\\n        updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function getNodeRewards(address _account) public view contractPaused returns (uint256) {\\r\\n        return nodeManager.totalRewards(_account, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function updateRewardRate() private {\\r\\n        uint256 lastUpdated = nodeManager.getLastRewardRateUpdate();\\r\\n        if(block.timestamp >= (lastUpdated + rewardTimer)){\\r\\n            uint256 poolBalance = balanceOf(distributionPool);\\r\\n            uint256 nodeReward = nodeManager.nodeReward();\\r\\n            uint256 totalDailyRewards = getTotalNodeCount() * nodeReward;\\r\\n            uint256 newReward;\\r\\n            if(poolBalance/totalDailyRewards >= 75){\\r\\n                newReward = nodeReward;\\r\\n            } else if(poolBalance/totalDailyRewards >= 60){\\r\\n                newReward = (nodeReward / 10) * 8;\\r\\n            } else if(poolBalance/totalDailyRewards >= 40){\\r\\n                newReward = (nodeReward / 10) * 6;\\r\\n            } else if(poolBalance/totalDailyRewards >= 25){\\r\\n                newReward = (nodeReward / 10) * 4;\\r\\n            } else {\\r\\n                newReward = (nodeReward / 10) * 2;\\r\\n            }\\r\\n            nodeManager.setRewardRate(newReward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNodeCount(address _account) public view contractPaused returns (uint256) {\\r\\n        return nodeManager.getNodeNumberOf(_account);\\r\\n    }\\r\\n\\r\\n    function getTotalNodeCount() public view contractPaused returns (uint256) {\\r\\n        return nodeManager.totalNodes();\\r\\n    }\\r\\n\\r\\n    function getNodeSetupFee() public view contractPaused returns (uint256) {\\r\\n        return nodeManager.setupFee();\\r\\n    }\\r\\n\\r\\n    function getNodeFee() public view contractPaused returns (uint256) {\\r\\n        return nodeManager.nodeFee();\\r\\n    }\\r\\n\\r\\n    function getRewardAmountPerNode() public view contractPaused returns (uint256) {\\r\\n        return nodeManager.getRewardRate();\\r\\n    }\\r\\n\\r\\n    function getBurnAmount() public view contractPaused returns (uint256) {\\r\\n        return nodeManager.burnAmount();\\r\\n    }\\r\\n\\r\\n    function getAllUserNodes(address _account) public view contractPaused returns(string memory){\\r\\n        return nodeManager.getAllUserNodes(_account);\\r\\n    }\\r\\n\\r\\n    function getNodeByIndex(address _account, uint256 _index) public view contractPaused returns(string memory){\\r\\n        return nodeManager.getNodeByIndex(_account, _index);\\r\\n    }\\r\\n\\r\\n    function getRangeUserNodes(address _account, uint256 _start, uint256 _end) public view contractPaused returns(string memory){\\r\\n        return nodeManager.getRangeUserNodes(_account, _start, _end);\\r\\n    }\\r\\n\\r\\n    function getRewardByIndex(address _account, uint256 _index) public view contractPaused returns(uint256){\\r\\n        return nodeManager.getRewardsByIndex(_account, block.timestamp, _index);\\r\\n    }\\r\\n\\r\\n    function getBurnCount() public view contractPaused returns(uint256){\\r\\n        return nodeManager.burnCount();\\r\\n    }\\r\\n\\r\\n    function getNodeLimit() public view contractPaused returns(uint256){\\r\\n        return nodeManager.nodeLimit();\\r\\n    }\\r\\n\\r\\n    function getBalanceOfDistPool() public view contractPaused returns(uint256){\\r\\n        return balanceOf(distributionPool);\\r\\n    }\\r\\n\\r\\n    function getBaseReward() public view contractPaused returns(uint256){\\r\\n        return nodeManager.nodeReward();\\r\\n    }\\r\\n\\r\\n    function getMinAgeReduction() public view contractPaused returns(uint256 age){\\r\\n        return nodeManager.minAgeReduction();\\r\\n    }\\r\\n\\r\\n    //Owner Functions\\r\\n    function pauseContract(bool _pause) public onlyOwner {\\r\\n        isPaused = _pause;\\r\\n    }\\r\\n\\r\\n    function setRewardRate(uint256 _amount) public onlyOwner{\\r\\n        nodeManager.setRewardRate(_amount);\\r\\n    }\\r\\n\\r\\n    function setDistributionPool(address _contract) public onlyOwner {\\r\\n        distributionPool = _contract;\\r\\n    }\\r\\n\\r\\n    function setNodeManager(address _contract) external onlyOwner {\\r\\n        nodeManager = NodeManager(_contract);\\r\\n    }\\r\\n\\r\\n    function claimETH() public payable onlyOwner {\\r\\n        require(payable(msg.sender).send(address(this).balance));\\r\\n    }\\r\\n    function setSetupFee(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setSetupFee(_amount);\\r\\n    }\\r\\n\\r\\n    function setNodeFee(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setNodeFee(_amount);\\r\\n    }\\r\\n\\r\\n    function setBaseReward(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setReward(_amount);\\r\\n    }\\r\\n\\r\\n    function setBurnAmount(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setBurnAmount(_amount);\\r\\n    }\\r\\n\\r\\n    function setNodeLimit(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setNodeLimit(_amount);\\r\\n    }\\r\\n\\r\\n    function setGateKeeper(address _account) public onlyOwner {\\r\\n        nodeManager.setGateKeeper(_account);\\r\\n    }\\r\\n\\r\\n    function setToken(address _account) public onlyOwner {\\r\\n        nodeManager.setToken(_account);\\r\\n    }\\r\\n\\r\\n    function setBurnCount(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setBurnCount(_amount);\\r\\n    }\\r\\n\\r\\n    function setRewardTimer(uint256 _amount) public onlyOwner {\\r\\n        rewardTimer = _amount;\\r\\n    }\\r\\n\\r\\n    function ageReduction(uint256 _amount) public onlyOwner {\\r\\n        nodeManager.setMinAgeReduction(_amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributionPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ageReduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"compoundRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"compoundRewardsToLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAllUserNodes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceOfDistPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAgeReduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNodeByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getNodeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeSetupFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"getRangeUserNodes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmountPerNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRewardByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNodeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"levelUpNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"makeNodes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeManager\",\"outputs\":[{\"internalType\":\"contract NodeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBurnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBurnCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setDistributionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setGateKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNodeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNodeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setNodeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSetupFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NguyeningDAO", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004e37178859a49eb91b6745c264d86f36f099a4fd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}