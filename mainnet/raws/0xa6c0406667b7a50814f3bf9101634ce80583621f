{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/vesting/XFAVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract XFAVesting {\\n    address immutable private wallet;\\n    address immutable private token;\\n    uint256 immutable private tokenListingDate;\\n    uint256 private tokensWithdrawn;\\n   \\n    event onUnlockNewTokens(address _user, uint256 _maxTokensUnlocked);\\n    event onEmergencyWithdraw();\\n\\n    constructor(address _token, uint256 _listingDate) {\\n        token = _token;\\n        tokenListingDate = _listingDate;\\n        wallet = msg.sender;\\n    }\\n\\n    function unlockTokens() external {\\n        require(tokenListingDate > 0, \\\"NoListingDate\\\");\\n        require(block.timestamp >= tokenListingDate + 360 days, \\\"NotAvailable\\\");\\n\\n        uint256 maxTokensAllowed = 0;\\n        uint256 initTime = tokenListingDate + 360 days;\\n        if ((block.timestamp >= initTime) && (block.timestamp < initTime + 90 days)) {\\n            maxTokensAllowed = 18750000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 90 days) && (block.timestamp < initTime + 180 days)) {\\n            maxTokensAllowed = 37500000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 180 days) && (block.timestamp < initTime + 270 days)) {\\n            maxTokensAllowed = 56250000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 270 days) && (block.timestamp < initTime + 360 days)) {\\n            maxTokensAllowed = 75000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 360 days) && (block.timestamp < initTime + 450 days)) {\\n            maxTokensAllowed = 92500000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 450 days) && (block.timestamp < initTime + 540 days)) {\\n            maxTokensAllowed = 110000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 540 days) && (block.timestamp < initTime + 630 days)) {\\n            maxTokensAllowed = 127500000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 630 days) && (block.timestamp < initTime + 720 days)) {\\n            maxTokensAllowed = 145000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 720 days) && (block.timestamp < initTime + 810 days)) {\\n            maxTokensAllowed = 170000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 810 days) && (block.timestamp < initTime + 900 days)) {\\n            maxTokensAllowed = 195000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 900 days) && (block.timestamp < initTime + 990 days)) {\\n            maxTokensAllowed = 220000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 990 days) && (block.timestamp < initTime + 1080 days)) {\\n            maxTokensAllowed = 245000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 1080 days) && (block.timestamp < initTime + 1170 days)) {\\n            maxTokensAllowed = 270000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 1170 days) && (block.timestamp < initTime + 1260 days)) {\\n            maxTokensAllowed = 295000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 1260 days) && (block.timestamp < initTime + 1350 days)) {\\n            maxTokensAllowed = 320000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + 1350 days) && (block.timestamp < initTime + 1440 days)) {\\n            maxTokensAllowed = 345000000 * 10 ** 18;\\n        }\\n\\n        maxTokensAllowed -= tokensWithdrawn;\\n        require(maxTokensAllowed > 0, \\\"NoTokensToUnlock\\\");\\n\\n        tokensWithdrawn += maxTokensAllowed;\\n        require(IERC20(token).transfer(wallet, maxTokensAllowed));\\n\\n        emit onUnlockNewTokens(msg.sender, maxTokensAllowed);\\n    }\\n\\n    function getTokensInVesting() external view returns(uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function emegercyWithdraw() external {\\n        require(msg.sender == wallet, \\\"OnlyOwner\\\");\\n\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(wallet, balance);\\n\\n        emit onEmergencyWithdraw();\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_listingDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"onEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensUnlocked\",\"type\":\"uint256\"}],\"name\":\"onUnlockNewTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emegercyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XFAVesting", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e29aeb6c45840354fae1c143ff9b92543c37e8c000000000000000000000000000000000000000000000000000000006216bc70", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}