{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/InterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IInterestRatesManager.sol\\\";\\n\\nimport \\\"./libraries/CompoundMath.sol\\\";\\n\\nimport \\\"./MorphoStorage.sol\\\";\\n\\n/// @title InterestRatesManager.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Smart contract handling the computation of indexes used for peer-to-peer interactions.\\n/// @dev This contract inherits from MorphoStorage so that Morpho can delegate calls to this contract.\\ncontract InterestRatesManager is IInterestRatesManager, MorphoStorage {\\n    using CompoundMath for uint256;\\n\\n    /// STRUCTS ///\\n\\n    struct Params {\\n        uint256 lastP2PSupplyIndex; // The peer-to-peer supply index at last update.\\n        uint256 lastP2PBorrowIndex; // The peer-to-peer borrow index at last update.\\n        uint256 poolSupplyIndex; // The current pool supply index.\\n        uint256 poolBorrowIndex; // The current pool borrow index.\\n        uint256 lastPoolSupplyIndex; // The pool supply index at last update.\\n        uint256 lastPoolBorrowIndex; // The pool borrow index at last update.\\n        uint256 reserveFactor; // The reserve factor percentage (10 000 = 100%).\\n        uint256 p2pIndexCursor; // The peer-to-peer index cursor (10 000 = 100%).\\n        Types.Delta delta; // The deltas and peer-to-peer amounts.\\n    }\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the peer-to-peer indexes of a market are updated.\\n    /// @param _poolTokenAddress The address of the market updated.\\n    /// @param _p2pSupplyIndex The updated supply index from peer-to-peer unit to underlying.\\n    /// @param _p2pBorrowIndex The updated borrow index from peer-to-peer unit to underlying.\\n    /// @param _poolSupplyIndex The updated pool supply index.\\n    /// @param _poolBorrowIndex The updated pool borrow index.\\n    event P2PIndexesUpdated(\\n        address indexed _poolTokenAddress,\\n        uint256 _p2pSupplyIndex,\\n        uint256 _p2pBorrowIndex,\\n        uint256 _poolSupplyIndex,\\n        uint256 _poolBorrowIndex\\n    );\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Updates the peer-to-peer indexes.\\n    /// @param _poolTokenAddress The address of the market to update.\\n    function updateP2PIndexes(address _poolTokenAddress) external {\\n        if (block.number > lastPoolIndexes[_poolTokenAddress].lastUpdateBlockNumber) {\\n            ICToken poolToken = ICToken(_poolTokenAddress);\\n            Types.LastPoolIndexes storage poolIndexes = lastPoolIndexes[_poolTokenAddress];\\n            Types.MarketParameters storage marketParams = marketParameters[_poolTokenAddress];\\n\\n            uint256 poolSupplyIndex = poolToken.exchangeRateCurrent();\\n            uint256 poolBorrowIndex = poolToken.borrowIndex();\\n\\n            Params memory params = Params(\\n                p2pSupplyIndex[_poolTokenAddress],\\n                p2pBorrowIndex[_poolTokenAddress],\\n                poolSupplyIndex,\\n                poolBorrowIndex,\\n                poolIndexes.lastSupplyPoolIndex,\\n                poolIndexes.lastBorrowPoolIndex,\\n                marketParams.reserveFactor,\\n                marketParams.p2pIndexCursor,\\n                deltas[_poolTokenAddress]\\n            );\\n\\n            (uint256 newP2PSupplyIndex, uint256 newP2PBorrowIndex) = _computeP2PIndexes(params);\\n\\n            p2pSupplyIndex[_poolTokenAddress] = newP2PSupplyIndex;\\n            p2pBorrowIndex[_poolTokenAddress] = newP2PBorrowIndex;\\n\\n            poolIndexes.lastUpdateBlockNumber = uint32(block.number);\\n            poolIndexes.lastSupplyPoolIndex = uint112(poolSupplyIndex);\\n            poolIndexes.lastBorrowPoolIndex = uint112(poolBorrowIndex);\\n\\n            emit P2PIndexesUpdated(\\n                _poolTokenAddress,\\n                newP2PSupplyIndex,\\n                newP2PBorrowIndex,\\n                poolSupplyIndex,\\n                poolBorrowIndex\\n            );\\n        }\\n    }\\n\\n    /// INTERNAL ///\\n\\n    /// @notice Computes and returns new peer-to-peer indexes.\\n    /// @param _params Computation parameters.\\n    /// @return newP2PSupplyIndex The updated p2pSupplyIndex.\\n    /// @return newP2PBorrowIndex The updated p2pBorrowIndex.\\n    function _computeP2PIndexes(Params memory _params)\\n        internal\\n        pure\\n        returns (uint256 newP2PSupplyIndex, uint256 newP2PBorrowIndex)\\n    {\\n        // Compute pool growth factors\\n\\n        uint256 poolSupplyGrowthFactor = _params.poolSupplyIndex.div(_params.lastPoolSupplyIndex);\\n        uint256 poolBorrowGrowthFactor = _params.poolBorrowIndex.div(_params.lastPoolBorrowIndex);\\n\\n        // Compute peer-to-peer growth factors\\n\\n        uint256 p2pGrowthFactor = ((MAX_BASIS_POINTS - _params.p2pIndexCursor) *\\n            poolSupplyGrowthFactor +\\n            _params.p2pIndexCursor *\\n            poolBorrowGrowthFactor) / MAX_BASIS_POINTS;\\n        uint256 p2pSupplyGrowthFactor = p2pGrowthFactor -\\n            (_params.reserveFactor * (p2pGrowthFactor - poolSupplyGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n        uint256 p2pBorrowGrowthFactor = p2pGrowthFactor +\\n            (_params.reserveFactor * (poolBorrowGrowthFactor - p2pGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n\\n        // Compute new peer-to-peer supply index\\n\\n        if (_params.delta.p2pSupplyAmount == 0 || _params.delta.p2pSupplyDelta == 0) {\\n            newP2PSupplyIndex = _params.lastP2PSupplyIndex.mul(p2pSupplyGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.delta.p2pSupplyDelta.mul(_params.lastPoolSupplyIndex)).div(\\n                    (_params.delta.p2pSupplyAmount).mul(_params.lastP2PSupplyIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PSupplyIndex = _params.lastP2PSupplyIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pSupplyGrowthFactor) +\\n                    shareOfTheDelta.mul(poolSupplyGrowthFactor)\\n            );\\n        }\\n\\n        // Compute new peer-to-peer borrow index\\n\\n        if (_params.delta.p2pBorrowAmount == 0 || _params.delta.p2pBorrowDelta == 0) {\\n            newP2PBorrowIndex = _params.lastP2PBorrowIndex.mul(p2pBorrowGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.delta.p2pBorrowDelta.mul(_params.poolBorrowIndex)).div(\\n                    (_params.delta.p2pBorrowAmount).mul(_params.lastP2PBorrowIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PBorrowIndex = _params.lastP2PBorrowIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pBorrowGrowthFactor) +\\n                    shareOfTheDelta.mul(poolBorrowGrowthFactor)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IInterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IInterestRatesManager {\\n    function updateP2PIndexes(address _marketAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/CompoundMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title CompoundMath.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\nlibrary CompoundMath {\\n    /// ERRORS ///\\n\\n    /// @notice Reverts when the number exceeds 224 bits.\\n    error NumberExceeds224Bits();\\n\\n    /// @notice Reverts when the number exceeds 32 bits.\\n    error NumberExceeds32Bits();\\n\\n    /// INTERNAL ///\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n\\n    function safe224(uint256 n) internal pure returns (uint224) {\\n        if (n >= 2**224) revert NumberExceeds224Bits();\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        if (n >= 2**32) revert NumberExceeds32Bits();\\n        return uint32(n);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return a < b ? a < c ? a : c : b < c ? b : c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/MorphoStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IPositionsManager.sol\\\";\\nimport \\\"./interfaces/IIncentivesVault.sol\\\";\\nimport \\\"./interfaces/IRewardsManager.sol\\\";\\nimport \\\"./interfaces/IInterestRatesManager.sol\\\";\\n\\nimport \\\"../common/libraries/DoubleLinkedList.sol\\\";\\nimport \\\"./libraries/Types.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title MorphoStorage.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice All storage variables used in Morpho contracts.\\nabstract contract MorphoStorage is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    /// GLOBAL STORAGE ///\\n\\n    uint8 public constant CTOKEN_DECIMALS = 8; // The number of decimals for cToken.\\n    uint16 public constant MAX_BASIS_POINTS = 10_000; // 100% in basis points.\\n    uint16 public constant MAX_CLAIMABLE_RESERVE = 9_000; // The max proportion of reserve fee claimable by the DAO at once (90% in basis points).\\n    uint256 public constant WAD = 1e18;\\n\\n    uint256 public maxSortedUsers; // The max number of users to sort in the data structure.\\n    uint256 public dustThreshold; // The minimum amount to keep in the data structure.\\n    Types.MaxGasForMatching public defaultMaxGasForMatching; // The default max gas to consume within loops in matching engine functions.\\n\\n    /// POSITIONS STORAGE ///\\n\\n    mapping(address => DoubleLinkedList.List) internal suppliersInP2P; // For a given market, the suppliers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal suppliersOnPool; // For a given market, the suppliers on Compound.\\n    mapping(address => DoubleLinkedList.List) internal borrowersInP2P; // For a given market, the borrowers in peer-to-peer.\\n    mapping(address => DoubleLinkedList.List) internal borrowersOnPool; // For a given market, the borrowers on Compound.\\n    mapping(address => mapping(address => Types.SupplyBalance)) public supplyBalanceInOf; // For a given market, the supply balance of a user. cToken -> user -> balances.\\n    mapping(address => mapping(address => Types.BorrowBalance)) public borrowBalanceInOf; // For a given market, the borrow balance of a user. cToken -> user -> balances.\\n    mapping(address => mapping(address => bool)) public userMembership; // Whether the user is in the market or not. cToken -> user -> bool.\\n    mapping(address => address[]) public enteredMarkets; // The markets entered by a user. user -> cTokens.\\n\\n    /// MARKETS STORAGE ///\\n\\n    address[] public marketsCreated; // Keeps track of the created markets.\\n    mapping(address => bool) public p2pDisabled; // Whether the peer-to-peer market is open or not.\\n    mapping(address => uint256) public p2pSupplyIndex; // Current index from supply peer-to-peer unit to underlying (in wad).\\n    mapping(address => uint256) public p2pBorrowIndex; // Current index from borrow peer-to-peer unit to underlying (in wad).\\n    mapping(address => Types.LastPoolIndexes) public lastPoolIndexes; // Last pool index stored.\\n    mapping(address => Types.MarketParameters) public marketParameters; // Market parameters.\\n    mapping(address => Types.MarketStatus) public marketStatus; // Market status.\\n    mapping(address => Types.Delta) public deltas; // Delta parameters for each market.\\n\\n    /// CONTRACTS AND ADDRESSES ///\\n\\n    IPositionsManager public positionsManager;\\n    IIncentivesVault public incentivesVault;\\n    IRewardsManager public rewardsManager;\\n    IInterestRatesManager public interestRatesManager;\\n    IComptroller public comptroller;\\n    address public treasuryVault;\\n    address public cEth;\\n    address public wEth;\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice Constructs the contract.\\n    /// @dev The contract is automatically marked as initialized when deployed so that nobody can highjack the implementation contract.\\n    constructor() initializer {}\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/compound/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function liquidationIncentiveMantissa() external returns (uint256);\\n\\n    function closeFactorMantissa() external returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (IInterestRateModel);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function initialExchangeRateMantissa() external view returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICEther is ICToken {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IPositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IPositionsManager {\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IIncentivesVault {\\n    function setOracle(IOracle _newOracle) external;\\n\\n    function setMorphoDao(address _newMorphoDao) external;\\n\\n    function setBonus(uint256 _newBonus) external;\\n\\n    function setPauseStatus(bool _newStatus) external;\\n\\n    function transferMorphoTokensToDao(uint256 _amount) external;\\n\\n    function tradeCompForMorphoTokens(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\ninterface IRewardsManager {\\n    function claimRewards(address[] calldata, address) external returns (uint256);\\n\\n    function accrueUserUnclaimedRewards(address[] calldata _cTokenAddresses, address)\\n        external\\n        returns (uint256);\\n\\n    function userUnclaimedCompRewards(address) external view returns (uint256);\\n\\n    function getUserUnclaimedRewards(address[] calldata _cTokenAddresses, address _user)\\n        external\\n        returns (uint256 unclaimedRewards);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function getLocalCompSupplyState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getLocalCompBorrowState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getUpdatedSupplyIndex(address) external view returns (uint256);\\n\\n    function getUpdatedBorrowIndex(address) external view returns (uint256);\\n\\n    function accrueUserSupplyUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function accrueUserBorrowUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/libraries/DoubleLinkedList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Double Linked List.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice Modified double linked list with capped sorting insertion.\\nlibrary DoubleLinkedList {\\n    /// STRUCTS ///\\n\\n    struct Account {\\n        address prev;\\n        address next;\\n        uint256 value;\\n    }\\n\\n    struct List {\\n        mapping(address => Account) accounts;\\n        address head;\\n        address tail;\\n    }\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the account is already inserted in the double linked list.\\n    error AccountAlreadyInserted();\\n\\n    /// @notice Thrown when the account to remove does not exist.\\n    error AccountDoesNotExist();\\n\\n    /// @notice Thrown when the address is zero at insertion.\\n    error AddressIsZero();\\n\\n    /// @notice Thrown when the value is zero at insertion.\\n    error ValueIsZero();\\n\\n    /// INTERNAL ///\\n\\n    /// @notice Returns the `account` linked to `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The value of the account.\\n    function getValueOf(List storage _list, address _id) internal view returns (uint256) {\\n        return _list.accounts[_id].value;\\n    }\\n\\n    /// @notice Returns the address at the head of the `_list`.\\n    /// @param _list The list to get the head.\\n    /// @return The address of the head.\\n    function getHead(List storage _list) internal view returns (address) {\\n        return _list.head;\\n    }\\n\\n    /// @notice Returns the address at the tail of the `_list`.\\n    /// @param _list The list to get the tail.\\n    /// @return The address of the tail.\\n    function getTail(List storage _list) internal view returns (address) {\\n        return _list.tail;\\n    }\\n\\n    /// @notice Returns the next id address from the current `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The address of the next account.\\n    function getNext(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].next;\\n    }\\n\\n    /// @notice Returns the previous id address from the current `_id`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @return The address of the previous account.\\n    function getPrev(List storage _list, address _id) internal view returns (address) {\\n        return _list.accounts[_id].prev;\\n    }\\n\\n    /// @notice Removes an account of the `_list`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    function remove(List storage _list, address _id) internal {\\n        if (_list.accounts[_id].value == 0) revert AccountDoesNotExist();\\n        Account memory account = _list.accounts[_id];\\n\\n        if (account.prev != address(0)) _list.accounts[account.prev].next = account.next;\\n        else _list.head = account.next;\\n        if (account.next != address(0)) _list.accounts[account.next].prev = account.prev;\\n        else _list.tail = account.prev;\\n\\n        delete _list.accounts[_id];\\n    }\\n\\n    /// @notice Inserts an account in the `_list` at the right slot based on its `_value`.\\n    /// @param _list The list to search in.\\n    /// @param _id The address of the account.\\n    /// @param _value The value of the account.\\n    /// @param _maxIterations The max number of iterations.\\n    function insertSorted(\\n        List storage _list,\\n        address _id,\\n        uint256 _value,\\n        uint256 _maxIterations\\n    ) internal {\\n        if (_value == 0) revert ValueIsZero();\\n        if (_id == address(0)) revert AddressIsZero();\\n        if (_list.accounts[_id].value != 0) revert AccountAlreadyInserted();\\n\\n        uint256 numberOfIterations;\\n        address next = _list.head; // If not added at the end of the list `_id` will be inserted before `next`.\\n\\n        while (\\n            numberOfIterations < _maxIterations &&\\n            next != _list.tail &&\\n            _list.accounts[next].value >= _value\\n        ) {\\n            next = _list.accounts[next].next;\\n            unchecked {\\n                ++numberOfIterations;\\n            }\\n        }\\n\\n        // Account is not the new tail.\\n        if (next != address(0) && _list.accounts[next].value < _value) {\\n            // Account is the new head.\\n            if (next == _list.head) {\\n                _list.accounts[_id] = Account(address(0), next, _value);\\n                _list.head = _id;\\n                _list.accounts[next].prev = _id;\\n            }\\n            // Account is not the new head.\\n            else {\\n                _list.accounts[_id] = Account(_list.accounts[next].prev, next, _value);\\n                _list.accounts[_list.accounts[next].prev].next = _id;\\n                _list.accounts[next].prev = _id;\\n            }\\n        }\\n        // Account is the new tail.\\n        else {\\n            // Account is the new head.\\n            if (_list.head == address(0)) {\\n                _list.accounts[_id] = Account(address(0), address(0), _value);\\n                _list.head = _id;\\n                _list.tail = _id;\\n            }\\n            // Account is not the new head.\\n            else {\\n                _list.accounts[_id] = Account(_list.tail, address(0), _value);\\n                _list.accounts[_list.tail].next = _id;\\n                _list.tail = _id;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in cToken).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in cdUnit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IOracle {\\n    function consult(uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_p2pSupplyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_p2pBorrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolSupplyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"P2PIndexesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CTOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CLAIMABLE_RESERVE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxGasForMatching\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrow\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"repay\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deltas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enteredMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesVault\",\"outputs\":[{\"internalType\":\"contract IIncentivesVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatesManager\",\"outputs\":[{\"internalType\":\"contract IInterestRatesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPoolIndexes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"lastSupplyPoolIndex\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"lastBorrowPoolIndex\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketParameters\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"p2pIndexCursor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCreated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsCreated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSortedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"p2pSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsManager\",\"outputs\":[{\"internalType\":\"contract IPositionsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsManager\",\"outputs\":[{\"internalType\":\"contract IRewardsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyBalanceInOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"updateP2PIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterestRatesManager", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}