{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract MarketRegistry is Ownable {\r\n    struct TradeDetails {\r\n        uint256 marketId;\r\n        uint256 value;\r\n        bytes32 orderHash;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct Market {\r\n        address proxy;\r\n        bool isLib;\r\n        bool isActive;\r\n    }\r\n\r\n    event NewMarketAdded(\r\n        address indexed proxy,\r\n        uint256 indexed marketId,\r\n        bool isLib\r\n    );\r\n\r\n    event MarketStatusChanged(\r\n        uint256 indexed marketId,\r\n        bool indexed oldStatus,\r\n        bool indexed newStatus\r\n    );\r\n\r\n    event MarketProxyChanged(\r\n        uint256 indexed marketId,\r\n        address indexed oldProxy,\r\n        address indexed newProxy,\r\n        bool oldIsLib,\r\n        bool newIsLib\r\n    );\r\n\r\n    Market[] public markets;\r\n\r\n    constructor(address[] memory proxies, bool[] memory isLibs) {\r\n        for (uint256 i = 0; i < proxies.length; i++) {\r\n            markets.push(Market(proxies[i], isLibs[i], true));\r\n        }\r\n    }\r\n\r\n    function addMarket(address proxy, bool isLib) external onlyOwner {\r\n        markets.push(Market(proxy, isLib, true));\r\n        emit NewMarketAdded(proxy, markets.length - 1, isLib);\r\n    }\r\n\r\n    function setMarketStatus(uint256 marketId, bool newStatus)\r\n        external\r\n        onlyOwner\r\n    {\r\n        Market storage market = markets[marketId];\r\n        emit MarketStatusChanged(marketId, market.isActive, newStatus);\r\n        market.isActive = newStatus;\r\n    }\r\n\r\n    function setMarketProxy(\r\n        uint256 marketId,\r\n        address newProxy,\r\n        bool isLib\r\n    ) external onlyOwner {\r\n        Market storage market = markets[marketId];\r\n        emit MarketProxyChanged(\r\n            marketId,\r\n            market.proxy,\r\n            newProxy,\r\n            market.isLib,\r\n            isLib\r\n        );\r\n        market.proxy = newProxy;\r\n        market.isLib = isLib;\r\n    }\r\n\r\n    function getMarketInfo(uint256 marketId)\r\n        external\r\n        view\r\n        returns (\r\n            address proxy,\r\n            bool isLib,\r\n            bool isActive\r\n        )\r\n    {\r\n        Market memory marketInfo = markets[marketId];\r\n        proxy = marketInfo.proxy;\r\n        isLib = marketInfo.isLib;\r\n        isActive = marketInfo.isActive;\r\n    }\r\n}\r\n\r\ncontract OkxNFTMarketAggregator {\r\n    MarketRegistry public marketRegistry;\r\n\r\n    event MatchOrderResults(bytes32[] orderHashes, bool[] results);\r\n\r\n    constructor(MarketRegistry _marketRegistry) {\r\n        marketRegistry = _marketRegistry;\r\n    }\r\n\r\n    function trade(MarketRegistry.TradeDetails[] memory tradeDetails)\r\n        external\r\n        payable\r\n    {\r\n        uint256 length = tradeDetails.length;\r\n        bytes32[] memory orderHashes = new bytes32[](length);\r\n        bool[] memory results = new bool[](length);\r\n\r\n        for (uint256 i; i < length; ) {\r\n            (address proxy, bool isLib, bool isActive) = marketRegistry.markets(\r\n                tradeDetails[i].marketId\r\n            );\r\n            require(isActive, \"Market inactive\");\r\n            bytes memory tradeData = tradeDetails[i].tradeData;\r\n            (bool success, ) = isLib\r\n                ? proxy.delegatecall(tradeData)\r\n                : proxy.call{value: tradeDetails[i].value}(tradeData);\r\n\r\n            orderHashes[i] = tradeDetails[i].orderHash;\r\n            results[i] = success;\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit MatchOrderResults(orderHashes, results);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract MarketRegistry\",\"name\":\"_marketRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"name\":\"MatchOrderResults\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"marketRegistry\",\"outputs\":[{\"internalType\":\"contract MarketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"internalType\":\"struct MarketRegistry.TradeDetails[]\",\"name\":\"tradeDetails\",\"type\":\"tuple[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "OkxNFTMarketAggregator", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000219d1fc3bad3df628c49350696a31281d392e6e8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://942ee8086658a1b90a98fd2d760dfabe022f55169ecd7573b93be80ece05b5d3"}]}