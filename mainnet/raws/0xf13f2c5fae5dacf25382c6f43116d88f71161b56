{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/IKWWGameManager.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IKWWGameManager{\r\n    enum ContractTypes {KANGAROOS, BOATS, LANDS, VAULT, DATA, BOATS_DATA, MOVING_BOATS, VOTING}\r\n\r\n    function getContract(uint8 _type) external view returns(address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/KWWVault.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ncontract KWWVault is Ownable {\r\n    struct VaultAsset{\r\n        uint64 timeStaked;\r\n        address holder;\r\n        uint8 assetType;\r\n        bool frozen;\r\n    }\r\n    mapping(uint256 => VaultAsset) public assetsData;\r\n    mapping(address => uint256[]) public holderTokens;\r\n\r\n    //ETH Vault\r\n    mapping(uint16 => uint256) public boatsWithdrawAmount;\r\n    //landId => ownerType (0-prince,1-princess, 2-landlord)\r\n    mapping(uint16 => mapping(uint8 => uint256)) public landsWithdrawAmount;\r\n\r\n    mapping(uint16 => uint256) public boatsMaxWithdraw;\r\n    mapping(uint16 => uint256) public landsMaxWithdraw;\r\n\r\n    uint256 teamWithdraw;\r\n    uint256 teamMaxWithdraw;\r\n\r\n    uint8 teamPercent = 10;\r\n\r\n    bool public vaultOpen = true;\r\n\r\n    IKWWGameManager gameManager;\r\n\r\n    //ETH Vault\r\n    function depositBoatFees(uint16 totalSupply) public payable onlyGameManager{\r\n        teamMaxWithdraw += msg.value / teamPercent;\r\n        boatsMaxWithdraw[totalSupply] = (msg.value - msg.value / teamPercent ) / totalSupply;\r\n    }\r\n\r\n    function boatAvailableToWithdraw(uint16 totalSupply, uint16 boatId) public view returns(uint256) {\r\n        uint16 maxState = (boatId / 100) * 100 + 100;\r\n        uint256 withdrawMaxAmount= 0;\r\n        for(uint16 i = boatId; i < totalSupply && i < maxState ; i++){\r\n            withdrawMaxAmount += boatsMaxWithdraw[i];\r\n        }\r\n        return withdrawMaxAmount - boatsWithdrawAmount[boatId];\r\n    }\r\n\r\n    function withdrawBoatFees(uint16 totalSupply, uint16 boatId, address addr) public onlyGameManager{\r\n        uint256 availableToWithdraw = boatAvailableToWithdraw(totalSupply, boatId);\r\n        (bool os, ) = payable(addr).call{value: availableToWithdraw}(\"\");\r\n        require(os);\r\n        boatsWithdrawAmount[boatId] += availableToWithdraw;\r\n    }\r\n\r\n    function depositLandFees(uint16 landId) public payable onlyGameManager{\r\n        teamMaxWithdraw += msg.value / teamPercent;\r\n        landsMaxWithdraw[landId] = (msg.value - msg.value / teamPercent ) / 3;\r\n    }\r\n\r\n    function landAvailableToWithdraw(uint16 landId, uint8 ownerTypeId) public view returns(uint256) {\r\n        require(ownerTypeId < 3, \"Owner type not valid\");\r\n        return landsMaxWithdraw[landId] - landsWithdrawAmount[landId][ownerTypeId];\r\n    }\r\n\r\n    function withdrawLandFees(uint16 landId, uint8 ownerTypeId, address addr) public onlyGameManager{\r\n        uint256 availableToWithdraw = landAvailableToWithdraw(landId, ownerTypeId);\r\n        (bool os, ) = payable(addr).call{value: availableToWithdraw}(\"\");\r\n        require(os);\r\n        landsWithdrawAmount[landId][ownerTypeId] += availableToWithdraw;\r\n    }\r\n\r\n    function teamAvailableToWithdraw() public view returns(uint256) {\r\n        return teamMaxWithdraw - teamWithdraw;\r\n    }\r\n\r\n    function withdrawFeesTeam(address teamWallet) public onlyOwner {\r\n        uint256 availableToWithdraw = teamAvailableToWithdraw();\r\n        (bool os, ) = payable(teamWallet).call{value: availableToWithdraw}(\"\");\r\n        require(os);\r\n        teamWithdraw += availableToWithdraw;\r\n    } \r\n\r\n    //NFT Vault\r\n    function depositToVault(address owner, uint256[] memory tokens, uint8 assetsType, bool frozen) public onlyGameManager {\r\n        require(vaultOpen, \"Vault is closed\");\r\n\r\n        IERC721 NFTContract = IERC721(gameManager.getContract(assetsType));\r\n        require(NFTContract.isApprovedForAll(owner, address(this)), \"The vault is not approved for all\");\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            uint256 id = tokens[i];\r\n            NFTContract.transferFrom(owner, address(this), id);\r\n\r\n            holderTokens[owner].push(id);\r\n            assetsData[id].timeStaked = uint64(block.timestamp);\r\n            assetsData[id].holder = owner;\r\n            assetsData[id].assetType = assetsType;\r\n            assetsData[id].frozen = frozen;\r\n        }\r\n    }\r\n\r\n    function withdrawFromVault(uint256[] calldata tokenIds) public  {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 id = tokenIds[i];\r\n            require(assetsData[id].holder == msg.sender, \"Missing permissions - you're not the owner\");\r\n            require(isWithdrawAvailable(id), \"Asset is still frozen\");\r\n\r\n            getIERC721Contract(id).transferFrom(address(this), msg.sender, id);\r\n\r\n            removeTokenIdFromArray(holderTokens[msg.sender], id);\r\n            assetsData[id].holder = address(0);\r\n        }\r\n    }\r\n\r\n    function withdrawFromVault(address owner, uint256[] calldata tokenIds) public onlyGameManager {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 id = tokenIds[i];\r\n            require(assetsData[id].holder == owner, \"Missing permissions - you're not the owner\");\r\n\r\n            getIERC721Contract(id).transferFrom(address(this), owner, id);\r\n\r\n            removeTokenIdFromArray(holderTokens[owner], id);\r\n            assetsData[id].holder = address(0);\r\n        }\r\n    }\r\n\r\n    function witdrawAll() public {\r\n        require(getDepositedAmount(msg.sender) > 0, \"NONE_STAKED\");\r\n\r\n        for (uint256 i = holderTokens[msg.sender].length; i > 0; i--) {\r\n            uint256 id = holderTokens[msg.sender][i - 1];\r\n            require(isWithdrawAvailable(id), \"Asset is still frozen\");\r\n\r\n            getIERC721Contract(id).transferFrom(address(this), msg.sender, id);\r\n\r\n            holderTokens[msg.sender].pop();\r\n            assetsData[id].holder = address(0);\r\n        }\r\n    }\r\n\r\n    function witdrawAll(address owner) public onlyGameManager {\r\n        require(getDepositedAmount(owner) > 0, \"Owner vault is empty\");\r\n\r\n        for (uint256 i = holderTokens[owner].length; i > 0; i--) {\r\n            uint256 id = holderTokens[owner][i - 1];\r\n            require(assetsData[id].holder == owner, \"Missing permissions - you're not the owner\");\r\n\r\n            getIERC721Contract(id).transferFrom(address(this), owner, id);\r\n\r\n            holderTokens[owner].pop();\r\n            assetsData[id].holder = address(0);\r\n        }\r\n    }\r\n\r\n    function setAssetFrozen(uint256 token, bool isFrozen) public onlyGameManager {\r\n        assetsData[token].frozen = isFrozen;\r\n    }\r\n\r\n    function removeTokenIdFromArray(uint256[] storage array, uint256 tokenId) internal {\r\n        uint256 length = array.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (array[i] == tokenId) {\r\n                length--;\r\n                if (i < length) {\r\n                    array[i] = array[length];\r\n                }\r\n                array.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n        GETTERS\r\n    */\r\n\r\n    function getIERC721Contract(uint256 tokenId) public view returns(IERC721){\r\n        return IERC721(gameManager.getContract(assetsData[tokenId].assetType));\r\n    }\r\n\r\n    function getDepositedAmount(address holder) public view returns (uint256) {\r\n        return holderTokens[holder].length;\r\n    }\r\n\r\n    function getHolder(uint256 tokenId) public view returns (address) {\r\n        return assetsData[tokenId].holder;\r\n    }\r\n\r\n    function isWithdrawAvailable(uint256 tokenId) public view returns(bool){\r\n        return !assetsData[tokenId].frozen;\r\n    }\r\n\r\n    /*\r\n        MODIFIERS\r\n    */\r\n\r\n    modifier onlyGameManager {\r\n        require(address(gameManager) != address(0), \"Game manager not set\");\r\n        require(msg.sender == owner() || msg.sender == address(gameManager), \"caller is not the Boats Contract\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n        ONLY OWNER\r\n     */\r\n\r\n    function toggleVaultOpen() public onlyOwner{\r\n        vaultOpen = !vaultOpen;\r\n    }\r\n\r\n    function setGameManager(address _addr) public onlyOwner{\r\n        gameManager = IKWWGameManager(_addr);\r\n    }\r\n\r\n    function setTeamPercent(uint8 _teamPercent) public onlyOwner{\r\n        teamPercent = _teamPercent;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetsData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"timeStaked\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"boatAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"boatsMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"boatsWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"}],\"name\":\"depositBoatFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"}],\"name\":\"depositLandFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"assetsType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"depositToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getDepositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIERC721Contract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isWithdrawAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerTypeId\",\"type\":\"uint8\"}],\"name\":\"landAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"landsMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"landsWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"setAssetFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_teamPercent\",\"type\":\"uint8\"}],\"name\":\"setTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleVaultOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"witdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawBoatFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"withdrawFeesTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerTypeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawLandFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KWWVault", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6874ebe681be532865f664cbfdf6f6b0f947b35c3c3adebbebabdd09f3914949"}]}