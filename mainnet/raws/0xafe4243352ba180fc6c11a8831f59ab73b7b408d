{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.8.2 < 0.9.0;\r\npragma abicoder v2;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: GabrielV2.sol\r\n\r\n/// @title Archangel Reward Staking Pool V2 (GabrielV2)\r\n/// @notice Stake tokens to Earn Rewards.\r\ncontract GabrielV2 is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address public devaddr;\r\n    uint public devPercent;\r\n    \r\n    address public treasury;\r\n    uint public tPercent;\r\n    \r\n    PoolInfo[] public poolInfo;\r\n    mapping(uint => mapping(address => UserInfo)) public userInfo;\r\n\r\n    /* ========== STRUCTS ========== */\r\n    struct ConstructorArgs {\r\n        uint devPercent;\r\n        uint tPercent;\r\n        address devaddr;\r\n        address treasury;\r\n    }\r\n    \r\n    struct ExtraArgs {\r\n        IERC20 stakeToken;\r\n        uint openTime;\r\n        uint waitPeriod;\r\n        uint lockDuration;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        bool canStake;\r\n        bool canUnstake;\r\n        IERC20 stakeToken;\r\n        uint lockDuration;\r\n        uint lockTime;\r\n        uint NORT;\r\n        uint openTime;\r\n        uint staked;\r\n        uint unlockTime;\r\n        uint unstaked;        \r\n        uint waitPeriod;\r\n        address[] harvestList;\r\n        address[] rewardTokens;\r\n        address[] stakeList;\r\n        uint[] rewardsInPool;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint amount;\r\n        bool harvested;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event Harvest(uint pid, address user, uint amount);\r\n    event PercentsUpdated(uint dev, uint treasury);\r\n    event ReflectionsClaimed(uint pid, address token, uint amount);\r\n    event Stake(uint pid, address user, uint amount);\r\n    event Unstake(uint pid, address user, uint amount);\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n    constructor(\r\n        ConstructorArgs memory constructorArgs,\r\n        ExtraArgs memory extraArgs,\r\n        uint _NORT,\r\n        address[] memory _rewardTokens,\r\n        uint[] memory _rewardsInPool\r\n    ) {\r\n        devPercent = constructorArgs.devPercent;\r\n        tPercent = constructorArgs.tPercent;\r\n        devaddr = constructorArgs.devaddr;\r\n        treasury = constructorArgs.treasury;\r\n        createPool(extraArgs, _NORT, _rewardTokens, _rewardsInPool);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function _changeNORT(uint _pid, uint _NORT) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        address[] memory rewardTokens = new address[](_NORT);\r\n        uint[] memory rewardsInPool = new uint[](_NORT);\r\n        pool.NORT = _NORT;\r\n        pool.rewardTokens = rewardTokens;\r\n        pool.rewardsInPool = rewardsInPool;\r\n    }\r\n\r\n    function changeNORT(uint _pid, uint _NORT) external onlyOwner {\r\n        _changeNORT(_pid, _NORT);\r\n    }\r\n\r\n    function changePercents(uint _devPercent, uint _tPercent) external onlyOwner {\r\n        require(_devPercent.add(_tPercent) == 100, \"must sum up to 100%\");\r\n        devPercent = _devPercent;\r\n        tPercent = _tPercent;\r\n        emit PercentsUpdated(_devPercent, _tPercent);\r\n    }\r\n\r\n    function changeRewardTokens(uint _pid, address[] memory _rewardTokens) external onlyOwner {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint NORT = pool.NORT;\r\n        require(_rewardTokens.length == NORT, \"CRT: array length mismatch\");\r\n        for (uint i = 0; i < NORT; i++) {\r\n            pool.rewardTokens[i] = _rewardTokens[i];\r\n        }\r\n    }\r\n\r\n    /// @notice function to claim reflections\r\n    function claimReflection(uint _pid, address token, uint amount) external onlyOwner {\r\n        uint onePercent = amount.div(100);\r\n        uint devShare = devPercent.mul(onePercent);\r\n        uint tShare = amount.sub(devShare);\r\n        IERC20(token).safeTransfer(devaddr, devShare);\r\n        IERC20(token).safeTransfer(treasury, tShare);\r\n        emit ReflectionsClaimed(_pid, token, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice create a new pool\r\n     * @param extraArgs [\"stakeToken\", openTime, waitPeriod, lockDuration]\r\n     * @param _NORT specify the number of diffrent tokens the pool will give out as reward\r\n     * @param _rewardTokens an array containing the addresses of the different reward tokens\r\n     * @param _rewardsInPool an array of token balances for each unique reward token in the pool.\r\n     */\r\n    function createPool(ExtraArgs memory extraArgs, uint _NORT, address[] memory _rewardTokens, uint[] memory _rewardsInPool) public onlyOwner {\r\n        require(_rewardTokens.length == _NORT && _rewardTokens.length == _rewardsInPool.length, \"CP: array length mismatch\");\r\n        address[] memory rewardTokens = new address[](_NORT);\r\n        uint[] memory rewardsInPool = new uint[](_NORT);\r\n        address[] memory emptyList;\r\n        require(\r\n            extraArgs.openTime > block.timestamp,\r\n            \"open time must be a future time\"\r\n        );\r\n        uint _lockTime = extraArgs.openTime.add(extraArgs.waitPeriod);\r\n        uint _unlockTime = _lockTime.add(extraArgs.lockDuration);\r\n        \r\n        poolInfo.push(\r\n            PoolInfo({\r\n                stakeToken: extraArgs.stakeToken,\r\n                staked: 0,\r\n                unstaked: 0,\r\n                openTime: extraArgs.openTime,\r\n                waitPeriod: extraArgs.waitPeriod,\r\n                lockTime: _lockTime,\r\n                lockDuration: extraArgs.lockDuration,\r\n                unlockTime: _unlockTime,\r\n                canStake: false,\r\n                canUnstake: false,\r\n                NORT: _NORT,\r\n                rewardTokens: rewardTokens,\r\n                rewardsInPool: rewardsInPool,\r\n                stakeList: emptyList,\r\n                harvestList: emptyList\r\n            })\r\n        );\r\n        uint _pid = poolInfo.length - 1;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        for (uint i = 0; i < _NORT; i++) {\r\n            pool.rewardTokens[i] = _rewardTokens[i];\r\n            pool.rewardsInPool[i] = _rewardsInPool[i];\r\n        }\r\n    }\r\n\r\n    /// @notice Update dev address by the previous dev.\r\n    function dev(address _devaddr) external {\r\n        require(msg.sender == devaddr, \"dev: caller is not the current dev\");\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    /// @notice Harvest your earnings\r\n    /// @param _pid select the particular pool\r\n    function harvest(uint _pid) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (block.timestamp > pool.unlockTime && pool.canUnstake == false) {\r\n            pool.canUnstake = true;\r\n        }\r\n        require(pool.canUnstake == true, \"pool is still locked\");\r\n        require(user.amount > 0 && user.harvested == false, \"Harvest: forbid withdraw\");\r\n        pool.harvestList.push(msg.sender);\r\n        update(_pid);\r\n        uint NORT = pool.NORT;\r\n        for (uint i = 0; i < NORT; i++) {\r\n            uint reward = user.amount * pool.rewardsInPool[i];\r\n            uint lpSupply = pool.staked;\r\n            uint pending = reward.div(lpSupply);\r\n            if (pending > 0) {\r\n                IERC20(pool.rewardTokens[i]).safeTransfer(msg.sender, pending);\r\n                pool.rewardsInPool[i] = pool.rewardsInPool[i].sub(pending);\r\n                emit Harvest(_pid, msg.sender, pending);\r\n            }\r\n        }\r\n        pool.staked = pool.staked.sub(user.amount);\r\n        user.harvested = true;\r\n    }\r\n\r\n    function recoverERC20(address token, address recipient, uint amount) external onlyOwner {\r\n        IERC20(token).safeTransfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice sets user.harvested to false for all users\r\n     * @param _pid select the particular pool\r\n     * @param harvestList an array containing addresses of users for that particular pool.\r\n     */\r\n    function reset(uint _pid, address[] memory harvestList) external onlyOwner {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint len = harvestList.length;\r\n        uint len2 = pool.harvestList.length;\r\n        uint staked;\r\n        for (uint i; i < len; i++) {\r\n            UserInfo storage user = userInfo[_pid][harvestList[i]];\r\n            user.harvested = false;\r\n            staked = staked.add(user.amount);\r\n        }\r\n        pool.staked = pool.staked.add(staked);\r\n\r\n        address lastUser = harvestList[len-1];\r\n        address lastHarvester = pool.harvestList[len2-1];\r\n        if (lastHarvester == lastUser) {\r\n            address[] memory emptyList;\r\n            pool.harvestList = emptyList;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice reset all the values of a particular pool\r\n     * @param _pid select the particular pool\r\n     * @param extraArgs [\"stakeToken\", openTime, waitPeriod, lockDuration]\r\n     * @param _NORT specify the number of diffrent tokens the pool will give out as reward\r\n     * @param _rewardTokens an array containing the addresses of the different reward tokens\r\n     * @param _rewardsInPool an array of token balances for each unique reward token in the pool.\r\n     */\r\n    function reuse(uint _pid, ExtraArgs memory extraArgs, uint _NORT, address[] memory _rewardTokens, uint[] memory _rewardsInPool) external onlyOwner {\r\n        require(\r\n            _rewardTokens.length == _NORT &&\r\n            _rewardTokens.length == _rewardsInPool.length,\r\n            \"RP: array length mismatch\"\r\n        );\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.stakeToken = extraArgs.stakeToken;\r\n        pool.unstaked = 0;\r\n        _setTimeValues( _pid, extraArgs.openTime, extraArgs.waitPeriod, extraArgs.lockDuration);\r\n        _changeNORT(_pid, _NORT);\r\n        for (uint i = 0; i < _NORT; i++) {\r\n            pool.rewardTokens[i] = _rewardTokens[i];\r\n            pool.rewardsInPool[i] = _rewardsInPool[i];\r\n        }\r\n        pool.stakeList = pool.harvestList;\r\n    }\r\n\r\n    /**\r\n     * @notice Set or modify the token balances of a particular pool\r\n     * @param _pid select the particular pool\r\n     * @param rewards array of token balances for each reward token in the pool\r\n     */\r\n    function setPoolRewards(uint _pid, uint[] memory rewards) external onlyOwner {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint NORT = pool.NORT;\r\n        require(rewards.length == NORT, \"SPR: array length mismatch\");\r\n        for (uint i = 0; i < NORT; i++) {\r\n            pool.rewardsInPool[i] = rewards[i];\r\n        }\r\n    }\r\n\r\n    function _setTimeValues(\r\n        uint _pid,\r\n        uint _openTime,\r\n        uint _waitPeriod,\r\n        uint _lockDuration\r\n    ) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(\r\n            _openTime > block.timestamp,\r\n            \"open time must be a future time\"\r\n        );\r\n        pool.openTime = _openTime;\r\n        pool.waitPeriod = _waitPeriod;\r\n        pool.lockTime = _openTime.add(_waitPeriod);\r\n        pool.lockDuration = _lockDuration;\r\n        pool.unlockTime = pool.lockTime.add(_lockDuration);\r\n    }\r\n\r\n    function setTimeValues(\r\n        uint _pid,\r\n        uint _openTime,\r\n        uint _waitPeriod,\r\n        uint _lockDuration\r\n    ) external onlyOwner {\r\n        _setTimeValues(_pid, _openTime, _waitPeriod, _lockDuration);\r\n    }\r\n\r\n    /// @notice Update treasury address.\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice stake ERC20 tokens to earn rewards\r\n     * @param _pid select the particular pool\r\n     * @param _amount amount of tokens to be deposited by user\r\n     */\r\n    function stake(uint _pid, uint _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (block.timestamp > pool.lockTime && pool.canStake == true) {\r\n            pool.canStake = false;\r\n        }\r\n        if (\r\n            block.timestamp > pool.openTime &&\r\n            block.timestamp < pool.lockTime &&\r\n            block.timestamp < pool.unlockTime &&\r\n            pool.canStake == false\r\n        ) {\r\n            pool.canStake = true;\r\n        }\r\n        require(\r\n            pool.canStake == true,\r\n            \"pool is not yet opened or is locked\"\r\n        );\r\n        update(_pid);\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n        pool.stakeToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n        pool.stakeList.push(msg.sender);\r\n        user.amount = user.amount.add(_amount);\r\n        pool.staked = pool.staked.add(_amount);\r\n        emit Stake(_pid, msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Exit without caring about rewards. EMERGENCY ONLY.\r\n    /// @param _pid select the particular pool\r\n    function unstake(uint _pid) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount > 0, \"unstake: withdraw bad\");\r\n        pool.stakeToken.safeTransfer(msg.sender, user.amount);\r\n        pool.unstaked = pool.unstaked.add(user.amount);\r\n        if (pool.staked >= user.amount) {\r\n            pool.staked = pool.staked.sub(user.amount);\r\n        }\r\n        emit Unstake(_pid, msg.sender, user.amount);\r\n        user.amount = 0;\r\n    }\r\n\r\n    function update(uint _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.openTime) {\r\n            return;\r\n        }\r\n        if (\r\n            block.timestamp > pool.openTime &&\r\n            block.timestamp < pool.lockTime &&\r\n            block.timestamp < pool.unlockTime\r\n        ) {\r\n            pool.canStake = true;\r\n            pool.canUnstake = false;\r\n        }\r\n        if (\r\n            block.timestamp > pool.lockTime &&\r\n            block.timestamp < pool.unlockTime\r\n        ) {\r\n            pool.canStake = false;\r\n            pool.canUnstake = false;\r\n        }\r\n        if (\r\n            block.timestamp > pool.unlockTime &&\r\n            pool.unlockTime > 0\r\n        ) {\r\n            pool.canStake = false;\r\n            pool.canUnstake = true;\r\n        }\r\n    }\r\n\r\n    /* ========== READ ONLY ========== */\r\n\r\n    function harvesters(uint _pid) external view returns (address[] memory harvestList) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        harvestList = pool.harvestList;\r\n    }\r\n\r\n    function harvests(uint _pid) external view returns (uint) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        return pool.harvestList.length;\r\n    }\r\n\r\n    function poolLength() external view returns (uint) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function rewardInPool(uint _pid) external view returns (uint[] memory rewardsInPool) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        rewardsInPool = pool.rewardsInPool;\r\n    }\r\n\r\n    function stakers(uint _pid) external view returns (address[] memory stakeList) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        stakeList = pool.stakeList;\r\n    }\r\n\r\n    function stakes(uint _pid) external view returns (uint) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        return pool.stakeList.length;\r\n    }\r\n\r\n    function tokensInPool(uint _pid) external view returns (address[] memory rewardTokens) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        rewardTokens = pool.rewardTokens;\r\n    }\r\n\r\n    function unclaimedRewards(uint _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint[] memory unclaimedReward)\r\n    {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo memory user = userInfo[_pid][_user];\r\n        uint NORT = pool.NORT;\r\n        if (block.timestamp > pool.lockTime && block.timestamp < pool.unlockTime && pool.staked != 0) {\r\n            uint[] memory array = new uint[](NORT);\r\n            for (uint i = 0; i < NORT; i++) {\r\n                uint blocks = block.timestamp.sub(pool.lockTime);\r\n                uint reward = blocks * user.amount * pool.rewardsInPool[i];\r\n                uint lpSupply = pool.staked * pool.lockDuration;\r\n                uint pending = reward.div(lpSupply);\r\n                array[i] = pending;\r\n            }\r\n            return array;\r\n        } else if (block.timestamp > pool.unlockTime && user.harvested == false && pool.staked != 0) {\r\n            uint[] memory array = new uint[](NORT);\r\n            for (uint i = 0; i < NORT; i++) {                \r\n                uint reward = user.amount * pool.rewardsInPool[i];\r\n                uint lpSupply = pool.staked;\r\n                uint pending = reward.div(lpSupply);\r\n                array[i] = pending;\r\n            }\r\n            return array;\r\n        } else {\r\n            uint[] memory array = new uint[](NORT);\r\n            for (uint i = 0; i < NORT; i++) {                \r\n                array[i] = 0;\r\n            }\r\n            return array;\r\n        }        \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"devPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"internalType\":\"struct GabrielV2.ConstructorArgs\",\"name\":\"constructorArgs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct GabrielV2.ExtraArgs\",\"name\":\"extraArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_NORT\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsInPool\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"}],\"name\":\"PercentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReflectionsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_NORT\",\"type\":\"uint256\"}],\"name\":\"changeNORT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tPercent\",\"type\":\"uint256\"}],\"name\":\"changePercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"changeRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct GabrielV2.ExtraArgs\",\"name\":\"extraArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_NORT\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsInPool\",\"type\":\"uint256[]\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"harvestList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canStake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canUnstake\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NORT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"harvestList\",\"type\":\"address[]\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct GabrielV2.ExtraArgs\",\"name\":\"extraArgs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_NORT\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsInPool\",\"type\":\"uint256[]\"}],\"name\":\"reuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardInPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardsInPool\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"setPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_waitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"setTimeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakeList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"tokensInPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unclaimedReward\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"harvested\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GabrielV2", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000e06f3f083b44980e05e0ffa9d349e03d42f516bd0000000000000000000000007de86e55b84ec14be4e319d54c8596975669dc1000000000000000000000000036e43065e977bc72cb86dbd8405fae7057cdc7fd000000000000000000000000000000000000000000000000000000006281cc400000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000036e43065e977bc72cb86dbd8405fae7057cdc7fd000000000000000000000000570db9a388b641c92722c0f35574c33063a972d700000000000000000000000016c525c7cd751c19adf26f39118154d7c4bd00880000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000001fc3842bd1f071c000000000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000028a857425466f80000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f1d8cd7ffefa6a95ae3a29f621e902669a21fa3c7be36c3d0255cf2bf4fd2a6"}]}