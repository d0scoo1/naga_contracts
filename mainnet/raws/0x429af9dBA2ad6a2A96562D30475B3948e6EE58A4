{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PawShop.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport \\\"./Interfaces.sol\\\";\\n\\n\\nabstract contract Ownable {\\n    address public owner;\\n    constructor() {owner = msg.sender;}\\n    modifier onlyOwner {require(owner == msg.sender, \\\"Not Owner!\\\");\\n        _;}\\n    function transferOwnership(address new_) external onlyOwner {owner = new_;}\\n}\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\\ncontract PawShop is Ownable {\\n\\n    // Events\\n\\n    event WLVendingItemAdded(address indexed operator_, WLVendingItem item_);\\n    event WLVendingItemModified(address indexed operator_, WLVendingItem before_, WLVendingItem after_);\\n    event WLVendingItemRemoved(address indexed operator_, WLVendingItem item_);\\n    event WLVendingItemPurchased(address indexed purchaser_, uint256 index_, WLVendingItem object_);\\n\\n\\n    IERC20 paw;\\n    IERC1155 tracker;\\n    IKumaVerse  kumaContract;\\n\\n    constructor(address _pawContract, address _trackerContract, address _kumaverseContract) {\\n        paw = IERC20(_pawContract);\\n        tracker = IERC1155(_trackerContract);\\n        kumaContract = IKumaVerse(_kumaverseContract);\\n    }\\n\\n    // holdersType -> 0 : anyone with paw, 1 : genesis and tracker holders, 2: tracker holders only\\n    // category -> 0 : WL spot, 1 : NFT\\n    struct WLVendingItem {\\n        string title;\\n        string imageUri;\\n        string projectUri;\\n        string description;\\n\\n        uint32 amountAvailable;\\n        uint32 amountPurchased;\\n\\n        uint32 startTime;\\n        uint32 endTime;\\n\\n        uint256 price;\\n\\n        uint128 holdersType;\\n        uint128 category;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(shopAdmin[msg.sender], \\\"You are not admin\\\");\\n        _;\\n    }\\n\\n    mapping(address => bool) public shopAdmin;\\n    // Database of Vending Items for each ERC20\\n    WLVendingItem[] public WLVendingItemsDb;\\n\\n    // Database of Vending Items Purchasers for each ERC20\\n    mapping(uint256 => address[]) public contractToWLPurchasers;\\n    mapping(uint256 => mapping(address => bool)) public contractToWLPurchased;\\n\\n    function setPermission(address _toUpdate, bool _isAdmin) external onlyOwner() {\\n        shopAdmin[_toUpdate] = _isAdmin;\\n    }\\n\\n    function addItem(WLVendingItem memory WLVendingItem_) external onlyAdmin() {\\n        require(bytes(WLVendingItem_.title).length > 0,\\n            \\\"You must specify a Title!\\\");\\n        require(uint256(WLVendingItem_.endTime) > block.timestamp,\\n            \\\"Already expired timestamp!\\\");\\n        require(WLVendingItem_.endTime > WLVendingItem_.startTime,\\n            \\\"endTime > startTime!\\\");\\n\\n        // Make sure that amountPurchased on adding is always 0\\n        WLVendingItem_.amountPurchased = 0;\\n\\n        // Push the item to the database array\\n        WLVendingItemsDb.push(WLVendingItem_);\\n\\n        emit WLVendingItemAdded(msg.sender, WLVendingItem_);\\n    }\\n\\n    function editItem(uint256 index_, WLVendingItem memory WLVendingItem_) external onlyAdmin() {\\n        WLVendingItem memory _item = WLVendingItemsDb[index_];\\n\\n        require(bytes(_item.title).length > 0,\\n            \\\"This WLVendingItem does not exist!\\\");\\n        require(bytes(WLVendingItem_.title).length > 0,\\n            \\\"Title must not be empty!\\\");\\n\\n        require(WLVendingItem_.amountAvailable >= _item.amountPurchased,\\n            \\\"Amount Available must be >= Amount Purchased!\\\");\\n\\n        WLVendingItemsDb[index_] = WLVendingItem_;\\n\\n        emit WLVendingItemModified(msg.sender, _item, WLVendingItem_);\\n    }\\n\\n    function deleteMostRecentWLVendingItem() external onlyAdmin() {\\n        uint256 _lastIndex = WLVendingItemsDb.length - 1;\\n\\n        WLVendingItem memory _item = WLVendingItemsDb[_lastIndex];\\n\\n        require(_item.amountPurchased == 0,\\n            \\\"Cannot delete item with already bought goods!\\\");\\n\\n        WLVendingItemsDb.pop();\\n        emit WLVendingItemRemoved(msg.sender, _item);\\n    }\\n    //\\n    //    // Core Function of WL Vending (User) - ok\\n    //    // ~0xInuarashi @ 2022-04-08\\n    //    // As of Martian Market V2 this uses PriceController and TokenController values.\\n    //    // We wrap it all in a WLVendingObject item which aggregates WLVendingItem data\\n    function buyItem(uint256 index_) external {\\n\\n        // Load the WLVendingObject to Memory\\n        WLVendingItem memory _object = getWLVendingObject(index_);\\n\\n        // Check the necessary requirements to purchase\\n        require(bytes(_object.title).length > 0,\\n            \\\"This WLVendingObject does not exist!\\\");\\n        require(_object.amountAvailable > _object.amountPurchased,\\n            \\\"No more WL remaining!\\\");\\n        require(_object.startTime <= block.timestamp,\\n            \\\"Not started yet!\\\");\\n        require(_object.endTime >= block.timestamp,\\n            \\\"Past deadline!\\\");\\n        require(!contractToWLPurchased[index_][msg.sender],\\n            \\\"Already purchased!\\\");\\n        require(_object.price != 0,\\n            \\\"Item does not have a set price!\\\");\\n        require(paw.balanceOf(msg.sender) >= _object.price,\\n            \\\"Not enough tokens!\\\");\\n        require(canBuy(msg.sender, _object.holdersType), \\\"You can't buy this\\\");\\n        // Pay for the WL\\n        paw .transferFrom(msg.sender, address(this), _object.price);\\n\\n        // Add the address into the WL List\\n        contractToWLPurchased[index_][msg.sender] = true;\\n        contractToWLPurchasers[index_].push(msg.sender);\\n\\n        // Increment Amount Purchased\\n        WLVendingItemsDb[index_].amountPurchased++;\\n\\n        emit WLVendingItemPurchased(msg.sender, index_, _object);\\n    }\\n\\n    function canBuy(address _buyer, uint256 _holdersType) internal returns (bool) {\\n\\n        if (_holdersType == 0) {\\n            return true;\\n        } else if (_holdersType == 1) {\\n            uint256 kumaBalance = kumaContract.balanceOf(_buyer);\\n            if (kumaBalance > 0) {\\n                return true;\\n            }\\n        } else if (_holdersType == 2) {\\n            uint256 trackerBalance = tracker.balanceOf(_buyer, 1);\\n            if (trackerBalance > 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getWLPurchasersOf(uint256 index_) public view\\n    returns (address[] memory) {\\n        return contractToWLPurchasers[index_];\\n    }\\n\\n    function getWLVendingItemsLength() public view\\n    returns (uint256) {\\n        return WLVendingItemsDb.length;\\n    }\\n\\n    function getWLVendingItemsAll() public view\\n    returns (WLVendingItem[] memory) {\\n        return WLVendingItemsDb;\\n    }\\n\\n    function raw_getWLVendingItemsPaginated(uint256 start_,\\n        uint256 end_) public view returns (WLVendingItem[] memory) {\\n        uint256 _arrayLength = end_ - start_ + 1;\\n        WLVendingItem[] memory _items = new WLVendingItem[](_arrayLength);\\n        uint256 _index;\\n\\n        for (uint256 i = 0; i < _arrayLength; i++) {\\n            _items[_index++] = WLVendingItemsDb[start_ + i];\\n        }\\n\\n        return _items;\\n    }\\n\\n    // Generally, this is the go-to read function for front-end interfaces.\\n    function getWLVendingObject(uint256 index_) public\\n    view returns (WLVendingItem memory) {\\n        WLVendingItem memory _item = WLVendingItemsDb[index_];\\n        return _item;\\n    }\\n\\n    function getWLVendingObjectsPaginated(uint256 start_,\\n        uint256 end_) public view returns (WLVendingItem[] memory) {\\n        uint256 _arrayLength = end_ - start_ + 1;\\n        WLVendingItem[] memory _objects = new WLVendingItem[](_arrayLength);\\n        uint256 _index;\\n\\n        for (uint256 i = 0; i < _arrayLength; i++) {\\n\\n            uint256 _itemIndex = start_ + i;\\n\\n            WLVendingItem memory _item = WLVendingItemsDb[_itemIndex];\\n\\n            _objects[_index++] = _item;\\n        }\\n\\n        return _objects;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IPaw is IERC20 {\\n    function updateReward(address _address) external;\\n}\\n\\ninterface IKumaVerse is IERC721 {\\n\\n}\\n\\ninterface IKumaTracker is IERC1155 {}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pawContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trackerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kumaverseContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"item_\",\"type\":\"tuple\"}],\"name\":\"WLVendingItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"before_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"after_\",\"type\":\"tuple\"}],\"name\":\"WLVendingItemModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"object_\",\"type\":\"tuple\"}],\"name\":\"WLVendingItemPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"item_\",\"type\":\"tuple\"}],\"name\":\"WLVendingItemRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WLVendingItemsDb\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"WLVendingItem_\",\"type\":\"tuple\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToWLPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractToWLPurchasers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteMostRecentWLVendingItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"WLVendingItem_\",\"type\":\"tuple\"}],\"name\":\"editItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getWLPurchasersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWLVendingItemsAll\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"internalType\":\"struct PawShop.WLVendingItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWLVendingItemsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getWLVendingObject\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"internalType\":\"struct PawShop.WLVendingItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"}],\"name\":\"getWLVendingObjectsPaginated\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"internalType\":\"struct PawShop.WLVendingItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"}],\"name\":\"raw_getWLVendingItemsPaginated\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"amountAvailable\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountPurchased\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"holdersType\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"category\",\"type\":\"uint128\"}],\"internalType\":\"struct PawShop.WLVendingItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toUpdate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shopAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PawShop", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ff94e2cea6191dd5eca3c09ff04da1f3043bc49600000000000000000000000054756b4533085cf959a3c6ef0747188a245f0a410000000000000000000000006cc8e06d647883868f2d3149b0ea0734fd67f3e4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}