{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"CryptoWasps.sol\":{\"content\":\"/**              _  _\\r\\n                | )/ )\\r\\n             \\\\\\\\ |//,\\u0027 __\\r\\n             (\\\")(_)-\\\"()))=\\r\\n                (\\\\\\\\          _   _\\r\\n                            ( | / )\\r\\n    \\\\_o_/                 \\\\\\\\ \\\\|/,\\u0027 __\\r\\n       )    Crypto Wasps  (\\\")(_)-\\\"()))=-\\r\\n      /\\\\__                   \\u003c\\\\\\\\\\r\\n_____ \\\\ ____________________________________\\r\\n    website game: https://cryptowasps.io\\r\\n    telegram:     https://t.me/CryptoWasps\\r\\n    twitter:      https://twitter.com/CryptoWasps\\r\\n\\r\\n    You are entering to the danger zone!\\r\\n    Search for special items to receive more tokens as reward.\\r\\n    \\r\\n    CryptoWasps is a game-reward token,\\r\\n    where you can play a website based game, to earn more tokens.\\r\\n    And also it provides auto-stacking mode. \\r\\n    Just hodl your tokens to receive automatic airdrops.\\r\\n\\r\\n    -during each transition, 1% tokens will be taken and spread as airdrop to all hodlers.\\r\\n    -rewards are using tokens, locked in this contract, until is empty (no mint function).\\r\\n    -fair launch: bo whitelist/IDO/presell (everyone have equal chances from beginning).\\r\\n\\t\\r\\n    Good Luck!\\r\\n\\r\\n*/                                                            \\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.10;\\r\\n\\r\\nimport \\\"./ERC20Logic.sol\\\";\\r\\n\\r\\ncontract CryptoWasps is ERC20Logic {\\r\\n    using SafeMath for uint256;\\r\\n \\r\\n    string telegram;\\r\\n    string websiteGame;\\r\\n    uint256 playerRewardLimit;\\r\\n    mapping (address =\\u003e bool) private playersDatabase;\\r\\n    event playerAddedToDatabase (address playerAddress, bool isAdded);\\r\\n    event playerRemovedFromDatabase (address playerAddress, bool isAdded);\\r\\n    event rewardTransfered(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    // Game items database.\\r\\n    string[] private gameItems = [\\r\\n        \\\"Honey Jar\\\",\\r\\n        \\\"Sweet Candy\\\",\\r\\n        \\\"Vanilla Donut\\\",\\r\\n        \\\"Cherry Cake\\\",\\r\\n        \\\"Beer Bottle\\\",\\r\\n        \\\"Ketchup Cap\\\",\\r\\n        \\\"Flower Leaf\\\",\\r\\n        \\\"Orange Juice\\\",\\r\\n        \\\"Can Of Coke\\\",\\r\\n        \\\"Piece Of Chocolate\\\",\\r\\n        \\\"Golden Ring\\\"];\\r\\n\\r\\n    // Total Supply.\\r\\n    uint256 private tTotal_ = 123000000000*10**9;\\r\\n           \\r\\n    constructor (uint8 securityA, uint8 securityB, string memory securityC, address securityD) ERC20Logic(tTotal_) public {\\r\\n        securityA = securityB; securityC = \\\" \\\"; securityD = 0x000000000000000000000000000000000000dEaD;\\r\\n                \\r\\n        // Token setup.\\r\\n        _name = \\u0027Crypto Wasps\\u0027;\\r\\n        _symbol = \\u0027cWASPS\\u0027;\\r\\n        _decimals = 9;\\r\\n        slippage =  \\\"1%\\\";\\r\\n    \\r\\n        playerRewardLimit = 3000000000000; //maximum amount of reward-tokens for player per game (3000 + decimals 9)\\r\\n        \\r\\n        websiteGame  = \\\"https://cryptowasps.io\\\";\\r\\n        telegram = \\\"https://t.me/CryptoWasps\\\";\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * This function allow to send reward-tokens to player, but special conditions must be provided.\\r\\n     * Requirements:\\r\\n     *  -the owner must be zero address (completed renouceOwnership is required as first)\\r\\n     *  -function can be called only by Distributor (not by contract owner or player)\\r\\n     *  -distributor cannot send any reward to his own address or owner address.\\r\\n     *  -the player has to be registered in database first (by using other function)\\r\\n     *  -amount of each reward cannot be greater than maximum limit, which is 3000 tokens. \\r\\n     *  -function doesn\\u0027t generate/mint new tokens. It using Rewards tokens (locked in this contract)\\r\\n         (rewards ends when the pool is empty)\\r\\n     */\\r\\n    function admitRewardForWinner(address _player, uint256 _rewardAmount) external onlyRewards {\\r\\n        require (owner() == address(0), \\\"renouce owership required. The Owner must be zero address\\\");\\r\\n        require (_player != _distributor, \\\"distributor cannot send reward to himself\\\");\\r\\n        require (playersDatabase[_player] == true, \\\"address is not registred in players database\\\");\\r\\n        require (_rewardAmount \\u003c= playerRewardLimit, \\\"amount cannot be higher than limit\\\");\\r\\n        require (_player != address(0), \\\"zero address not allowed\\\");\\r\\n        require (_rewardAmount != 0, \\\"amount cannot be zero\\\");\\r\\n        (uint256 rAmount, uint256 rRewardAmount, uint256 rFee, uint256 tRewardAmount, uint256 tFee) = _getValues(_rewardAmount);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].sub(rAmount);\\r\\n        _rOwned[_player] = _rOwned[_player].add(rRewardAmount);       \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(address(this), _player, tRewardAmount);\\r\\n    }\\r\\n    \\r\\n    function Telegram() public view returns (string memory) {\\r\\n        return telegram;\\r\\n    }\\r\\n    \\r\\n    function WebsiteGame() public view returns (string memory) {\\r\\n        return websiteGame;\\r\\n    }\\r\\n\\r\\n    function addNewPlayerToDatabase(address _address) public onlyRewards {\\r\\n        playersDatabase[_address] = true;\\r\\n        emit playerAddedToDatabase (_address, playersDatabase[_address]);\\r\\n    }\\r\\n\\r\\n    function removePlayerFromDatabase(address _address) public onlyRewards {\\r\\n        playersDatabase[_address] = false;\\r\\n        emit playerRemovedFromDatabase (_address, playersDatabase[_address]);\\r\\n    }\\r\\n        \\r\\n    function isPlayerInDatabase(address _address) public view returns(bool) {\\r\\n        return playersDatabase[_address];\\r\\n    }\\r\\n    \\r\\n    // Returns the maximum amount of reward-tokens for the player per one game (devided by decimals (9) for better clarity)\\r\\n    function maxRewardPerGame() public view returns (uint256) {\\r\\n        return playerRewardLimit.div(1*10**9);\\r\\n    }\\r\\n\\r\\n    function GameItemsList(uint256 typeTokenNumber) public view returns (string memory) {\\r\\n        return itemName(typeTokenNumber, \\\"GAMEITEMS\\\", gameItems);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Functions required to operate game items database.\\r\\n     */\\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n        \\r\\n    function itemName(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) internal pure returns (string memory) {\\r\\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\\r\\n        string memory output = sourceArray[rand % sourceArray.length];\\r\\n        return output;\\r\\n    }\\r\\n     \\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {return \\\"0\\\";}\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {digits++; temp /= 10;}\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {digits -= 1; buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); value /= 10;}\\r\\n        return string(buffer);\\r\\n    }       \\r\\n}\"},\"ERC20Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.10;\\r\\n\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n\\r\\ncontract ERC20Logic is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) internal _rOwned;\\r\\n    mapping (address =\\u003e uint256) internal _tOwned;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal _allowances;\\r\\n    mapping (address =\\u003e bool) internal _isExcluded;\\r\\n    address[] internal _excluded;\\r\\n    \\r\\n    // AntiBot declarations:\\r\\n    mapping (address =\\u003e bool) internal _antiBot;\\r\\n    event botBanned (address botAddress, bool isBanned);\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n    uint256 internal _tTotal;\\r\\n    uint256 internal MAX;\\r\\n    uint256 internal _rTotal;\\r\\n    \\r\\n    // Percentage of Fee tokens to burn for stacking/airdrops.\\r\\n    string public slippage;\\r\\n    uint256 internal _tFeeTotal;\\r\\n    \\r\\n    constructor (uint256 tTotal_) internal {\\r\\n        _tTotal = tTotal_;\\r\\n        MAX = ~uint256(0);\\r\\n        _rTotal = (MAX - (MAX % tTotal_));\\r\\n                \\r\\n        // Generate TotalSupply.\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n\\r\\n        // Exclude this SmartContact and the Owner from stacking/airdrops.\\r\\n        _tOwned[address(this)] = tokenFromReflection(_rOwned[address(this)]);\\r\\n        _isExcluded[address(this)] = true;\\r\\n        _excluded.push(address(this));\\r\\n\\r\\n        _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);\\r\\n        _isExcluded[_msgSender()] = true;\\r\\n        _excluded.push(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Anti-Bot function. \\r\\n     * -adds bot to banned addresses database,\\r\\n     * -in case of mistake: repeated can reverse ban.\\r\\n     * -emits botBanned event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * -only contract Owner is allowed to call this function,\\r\\n     * -when renouceOwnership is done (the Owner is zero address),\\r\\n     * this function will be locked (cannot be called anymore).\\r\\n     */\\r\\n    function antiBot(address botAddress) external onlyOwner {\\r\\n        if (_antiBot[botAddress] == true) {\\r\\n            _antiBot[botAddress] = false;\\r\\n        } else {_antiBot[botAddress] = true;\\r\\n            emit botBanned (botAddress, _antiBot[botAddress]);\\r\\n          }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns status of ban Bot address.\\r\\n     */\\r\\n    function checkAntiBot(address botAddress) public view returns (bool) {\\r\\n        return _antiBot[botAddress];\\r\\n    }\\r\\n    \\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function airdropsDoneAlready() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n    \\r\\n    function reflect(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n        (uint256 rAmount,,,,) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount,,,,) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        uint256 currentRate =  _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    \\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        // anti-Bot-dump. Works only on the beginning before renouceOwnership is done.\\r\\n        // When the contract Owner will be zero address, Bots cannot be caught anymore.\\r\\n        if (_antiBot[sender] || _antiBot[recipient])\\r\\n        require (amount == 0, \\\"Are you the cheating BOT? Hi, you are banned :)\\\");\\r\\n        // disable fees (burn fee tokens and airdop) when the Owner adds liquidity.\\r\\n        if (sender == owner() || recipient == owner()) {\\r\\n        _ownerTransfer(sender, recipient, amount);\\r\\n        // enable fees (burn tokens and airdrops) for everyone else.\\r\\n        } else if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n        _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n        _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n        _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n        _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {_transferStandard(sender, recipient, amount);}\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Special transfer to disable fees (tokens burn and airdrops)\\r\\n     * for the contract Owner, during each transaction.\\r\\n     */\\r\\n    function _ownerTransfer(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, , , , ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        if (_isExcluded[sender]) {\\r\\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        }\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\\r\\n        if (_isExcluded[recipient]) {\\r\\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\\r\\n        }\\r\\n        emit Transfer(sender, recipient, tAmount);\\r\\n    }\\r\\n    \\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) internal {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) internal {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\r\\n        uint256 currentRate =  _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount) internal pure returns (uint256, uint256) {\\r\\n        // tokens burn rate 1% for stacking/airdrops.\\r\\n        uint256 tFee = tAmount.div(100).mul(1);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee);\\r\\n        return (tTransferAmount, tFee);\\r\\n    }\\r\\n\\r\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] \\u003e rSupply || _tOwned[_excluded[i]] \\u003e tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n}\"},\"Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.6.10;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n       return (msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode.\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}.\\r\\n     * This is zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) \\r\\n     * to another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address internal _distributor;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event newDistributorSet(address indexed previousDistributor, address indexed newDistributor);\\r\\n    \\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _distributor = address(0);\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants access only for reward distribution and for adding new players to database.\\r\\n     */\\r\\n    function setRewardDistributor(address _address) external onlyOwner {\\r\\n        require (_distributor == address(0));\\r\\n        _distributor = _address;\\r\\n        emit newDistributorSet(address(0), _address);\\r\\n    }\\r\\n    \\r\\n    function rewardDistributor() public view returns (address) {\\r\\n        return _distributor;\\r\\n    }\\r\\n    \\r\\n    modifier onlyRewards() {\\r\\n        require(_distributor == msg.sender, \\\"caller is not rewards distributor\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"securityA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"securityB\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"securityC\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"securityD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBanned\",\"type\":\"bool\"}],\"name\":\"botBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDistributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"newDistributorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"}],\"name\":\"playerAddedToDatabase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"}],\"name\":\"playerRemovedFromDatabase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rewardTransfered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeTokenNumber\",\"type\":\"uint256\"}],\"name\":\"GameItemsList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WebsiteGame\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addNewPlayerToDatabase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"admitRewardForWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsDoneAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"antiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"checkAntiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPlayerInDatabase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardPerGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removePlayerFromDatabase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoWasps", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000dead00000000000000000000000000000000000000000000000000000000000000026f6b000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da95c864c903230c661f5e000431b07034935f80dd567fb6bede6da5044584f7"}]}