{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"},\"SimpleArbitrage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract SimpleArbitrage {\\n    address public owner;\\n\\n    address public wethAddress;\\n    address public daiAddress;\\n    address public uniswapRouterAddress;\\n    address public sushiswapRouterAddress;\\n\\n    uint256 public arbitrageAmount;\\n\\n    enum Exchange {\\n        UNI,\\n        SUSHI,\\n        NONE\\n    }\\n\\n    constructor(\\n        address _uniswapRouterAddress,\\n        address _sushiswapRouterAddress,\\n        address _weth,\\n        address _dai\\n    ) {\\n        uniswapRouterAddress = _uniswapRouterAddress;\\n        sushiswapRouterAddress = _sushiswapRouterAddress;\\n        owner = msg.sender;\\n        wethAddress = _weth;\\n        daiAddress = _dai;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"only owner can call this\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address newOwner) public onlyOwner {\\n        owner = newOwner;\\n    }\\n\\n    function deposit(uint256 amount) public onlyOwner {\\n        require(amount \\u003e 0, \\\"Deposit amount must be greater than 0\\\");\\n        IERC20(wethAddress).transferFrom(msg.sender, address(this), amount);\\n        arbitrageAmount += amount;\\n    }\\n\\n    function withdraw(uint256 amount) public onlyOwner {\\n        require(amount \\u003c= arbitrageAmount, \\\"Not enough amount deposited\\\");\\n        IERC20(wethAddress).transferFrom(address(this), msg.sender, amount);\\n        arbitrageAmount -= amount;\\n    }\\n\\n    function makeArbitrage() public {\\n        uint256 amountIn = arbitrageAmount;\\n        Exchange result = _comparePrice(amountIn);\\n        if (result == Exchange.UNI) {\\n            // sell ETH in uniswap for DAI with high price and buy ETH from sushiswap with lower price\\n            uint256 amountOut = _swap(\\n                amountIn,\\n                uniswapRouterAddress,\\n                wethAddress,\\n                daiAddress\\n            );\\n            uint256 amountFinal = _swap(\\n                amountOut,\\n                sushiswapRouterAddress,\\n                daiAddress,\\n                wethAddress\\n            );\\n            arbitrageAmount = amountFinal;\\n        } else if (result == Exchange.SUSHI) {\\n            // sell ETH in sushiswap for DAI with high price and buy ETH from uniswap with lower price\\n            uint256 amountOut = _swap(\\n                amountIn,\\n                sushiswapRouterAddress,\\n                wethAddress,\\n                daiAddress\\n            );\\n            uint256 amountFinal = _swap(\\n                amountOut,\\n                uniswapRouterAddress,\\n                daiAddress,\\n                wethAddress\\n            );\\n            arbitrageAmount = amountFinal;\\n        }\\n    }\\n\\n    function _swap(\\n        uint256 amountIn,\\n        address routerAddress,\\n        address sell_token,\\n        address buy_token\\n    ) internal returns (uint256) {\\n        IERC20(sell_token).approve(routerAddress, amountIn);\\n\\n        uint256 amountOutMin = (_getPrice(\\n            routerAddress,\\n            sell_token,\\n            buy_token,\\n            amountIn\\n        ) * 95) / 100;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = sell_token;\\n        path[1] = buy_token;\\n\\n        uint256 amountOut = IUniswapV2Router02(routerAddress)\\n            .swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                block.timestamp\\n            )[1];\\n        return amountOut;\\n    }\\n\\n    function _comparePrice(uint256 amount) internal view returns (Exchange) {\\n        uint256 uniswapPrice = _getPrice(\\n            uniswapRouterAddress,\\n            wethAddress,\\n            daiAddress,\\n            amount\\n        );\\n        uint256 sushiswapPrice = _getPrice(\\n            sushiswapRouterAddress,\\n            wethAddress,\\n            daiAddress,\\n            amount\\n        );\\n\\n        // we try to sell ETH with higher price and buy it back with low price to make profit\\n        if (uniswapPrice \\u003e sushiswapPrice) {\\n            require(\\n                _checkIfArbitrageIsProfitable(\\n                    amount,\\n                    uniswapPrice,\\n                    sushiswapPrice\\n                ),\\n                \\\"Arbitrage not profitable\\\"\\n            );\\n            return Exchange.UNI;\\n        } else if (uniswapPrice \\u003c sushiswapPrice) {\\n            require(\\n                _checkIfArbitrageIsProfitable(\\n                    amount,\\n                    sushiswapPrice,\\n                    uniswapPrice\\n                ),\\n                \\\"Arbitrage not profitable\\\"\\n            );\\n            return Exchange.SUSHI;\\n        } else {\\n            return Exchange.NONE;\\n        }\\n    }\\n\\n    function _checkIfArbitrageIsProfitable(\\n        uint256 amountIn,\\n        uint256 higherPrice,\\n        uint256 lowerPrice\\n    ) internal pure returns (bool) {\\n        // uniswap \\u0026 sushiswap have 0.3% fee for every exchange\\n        // so gain made must be greater than 2 * 0.3% * arbitrage_amount\\n\\n        // difference in ETH\\n        uint256 difference = (higherPrice - lowerPrice) / higherPrice;\\n\\n        uint256 payed_fee = (2 * (amountIn * 3)) / 1000;\\n\\n        if (difference \\u003e payed_fee) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _getPrice(\\n        address routerAddress,\\n        address sell_token,\\n        address buy_token,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        address[] memory pairs = new address[](2);\\n        pairs[0] = sell_token;\\n        pairs[1] = buy_token;\\n        uint256 price = IUniswapV2Router02(routerAddress).getAmountsOut(\\n            amount,\\n            pairs\\n        )[1];\\n        return price;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"arbitrageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimpleArbitrage", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52afa783230d325fa41b0fb93faecdc928b9f3d738cec2598b40c4a6b1715809"}]}