{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/Recovery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\r\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\r\\n\\r\\ncontract Recovery is IERC20, ReentrancyGuard, Ownable {\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  // private variables\\r\\n  uint256 private _totalSupply;\\r\\n  string private _name = \\\"Recovery\\\";\\r\\n  string private _symbol = \\\"LIFE\\\";\\r\\n  uint8 private _decimals = 18;\\r\\n\\r\\n  address private feeRecipient;\\r\\n  uint256 private swapTokensAtAmount;\\r\\n  bool private swapping;\\r\\n  bool private swapEnabled = false;\\r\\n\\r\\n  // public variables\\r\\n  uint256 public totalBuyTax;\\r\\n  uint256 public marketingBuyTax;\\r\\n  uint256 public liquidityBuyTax;\\r\\n\\r\\n  uint256 public totalSellTax;\\r\\n  uint256 public marketingSellTax;\\r\\n  uint256 public liquiditySellTax;\\r\\n\\r\\n  uint256 public tokensForLiquidity;\\r\\n  uint256 public tokensForMarketing;\\r\\n\\r\\n  address public uniswapPair;\\r\\n  bool public enabled;\\r\\n  IUniswapV2Router02 public uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n  uint256 public maxBuy;\\r\\n  uint256 public maxWallet;\\r\\n\\r\\n  mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\r\\n\\r\\n  mapping(address => bool) public excludedFromLimit;\\r\\n  mapping(address => bool) public excludedFromFee;\\r\\n\\r\\n  event SwapAndLiquify(uint amountToSwapForETH, uint ethForLiquidity, uint tokensForLiquidity);\\r\\n\\r\\n  constructor() {\\r\\n    _totalSupply = 1000000000 * 1e18;\\r\\n    \\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n\\r\\n    maxBuy = _totalSupply * 3 / 100;\\r\\n    maxWallet = _totalSupply * 3 / 100;\\r\\n    swapTokensAtAmount = _totalSupply * 25 / 10000;\\r\\n\\r\\n    marketingBuyTax = 8;\\r\\n    liquidityBuyTax = 0;\\r\\n    totalBuyTax = marketingBuyTax + liquidityBuyTax;\\r\\n\\r\\n    marketingSellTax = 15;\\r\\n    liquiditySellTax = 0;\\r\\n    totalSellTax = marketingSellTax + liquiditySellTax;\\r\\n    feeRecipient = _msgSender();\\r\\n\\r\\n    IUniswapV2Factory factory = IUniswapV2Factory(uniswapRouter.factory());\\r\\n    factory.createPair(address(this), uniswapRouter.WETH());\\r\\n    uniswapPair = factory.getPair(address(this), uniswapRouter.WETH());\\r\\n\\r\\n    excludedFromLimit[_msgSender()] = true;\\r\\n    excludedFromLimit[address(this)] = true;\\r\\n    excludedFromFee[_msgSender()] = true;\\r\\n    excludedFromFee[address(this)] = true;\\r\\n\\r\\n    emit Transfer(address(0), _msgSender(), _totalSupply);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the amount of tokens in existence.\\r\\n    */\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the amount of tokens owned by `account`.\\r\\n    */\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n    *\\r\\n    * Returns a boolean value indicating whether the operation succeeded.\\r\\n    *\\r\\n    * Emits a {Transfer} event.\\r\\n    */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the remaining number of tokens that `spender` will be\\r\\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n    * zero by default.\\r\\n    *\\r\\n    * This value changes when {approve} or {transferFrom} are called.\\r\\n    */\\r\\n  function allowance(address owner, address spender) external view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n    *\\r\\n    * Returns a boolean value indicating whether the operation succeeded.\\r\\n    *\\r\\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n    * that someone may use both the old and the new allowance by unfortunate\\r\\n    * transaction ordering. One possible solution to mitigate this race\\r\\n    * condition is to first reduce the spender's allowance to 0 and set the\\r\\n    * desired value afterwards:\\r\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n    *\\r\\n    * Emits an {Approval} event.\\r\\n    */\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n      address _sender,\\r\\n      address _recipient,\\r\\n      uint256 _amount\\r\\n  ) external returns (bool) {\\r\\n    _transfer(_sender, _recipient, _amount);\\r\\n\\r\\n    uint256 currentAllowance = _allowances[_sender][_msgSender()];\\r\\n    require(currentAllowance >= _amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n    unchecked {\\r\\n        _approve(_sender, _msgSender(), currentAllowance - _amount);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the name of the token.\\r\\n    */\\r\\n  function name() public view returns (string memory) {\\r\\n      return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n    * name.\\r\\n    */\\r\\n  function symbol() public view returns (string memory) {\\r\\n      return _symbol;\\r\\n  }\\r\\n\\r\\n  function excludeFromLimit(address _address, bool _is) external onlyOwner {\\r\\n    excludedFromLimit[_address] = _is;\\r\\n  }\\r\\n\\r\\n  function updateFeeAddress(address _address) external onlyOwner {\\r\\n    feeRecipient = _address;\\r\\n  }\\r\\n\\r\\n  function enableTrading() external onlyOwner {\\r\\n    require(!enabled, 'already enabled');\\r\\n    enabled = true;\\r\\n    swapEnabled = true;\\r\\n  }\\r\\n\\r\\n  // change the minimum amount of tokens to sell from fees\\r\\n  function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\\r\\n    require(newAmount >= _totalSupply * 1 / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\r\\n    require(newAmount <= _totalSupply * 5 / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\r\\n    swapTokensAtAmount = newAmount;\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function updateMaxTx(uint256 _maxBuy, uint256 _maxWallet) external {\\r\\n    require(_msgSender() == feeRecipient);\\r\\n    require(_maxBuy >= _totalSupply / 1000 && _maxWallet >= _totalSupply / 1000);\\r\\n    maxBuy = _maxBuy;\\r\\n    maxWallet = _maxWallet;\\r\\n  }\\r\\n\\r\\n  function updateBuyFees(uint256 _liqFee, uint256 _marketingFee) external onlyOwner {\\r\\n    require(_liqFee + _marketingFee <= 10);\\r\\n    liquidityBuyTax = _liqFee;\\r\\n    marketingBuyTax = _marketingFee;\\r\\n    totalBuyTax = _liqFee + _marketingFee;\\r\\n  }\\r\\n\\r\\n\\r\\n  function updateSellFees(uint256 _liqFee, uint256 _marketingFee) external onlyOwner {\\r\\n    require(_liqFee + _marketingFee <= 10);\\r\\n    liquiditySellTax = _liqFee;\\r\\n    marketingSellTax = _marketingFee;\\r\\n    totalSellTax = _liqFee + _marketingFee;\\r\\n  }\\r\\n\\r\\n  function _transfer(\\r\\n    address _sender,\\r\\n    address _recipient,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    uint256 senderBalance = _balances[_sender];\\r\\n    require(senderBalance >= _amount, \\\"transfer amount exceeds balance\\\");\\r\\n    require(enabled || excludedFromLimit[_sender] || excludedFromLimit[_recipient], \\\"not enabled yet\\\");\\r\\n\\r\\n    uint256 rAmount = _amount;\\r\\n\\r\\n    // if buy\\r\\n    if (_sender == uniswapPair) {\\r\\n      if (!excludedFromLimit[_recipient] && _recipient != address(uniswapRouter)) {\\r\\n        require(_amount <= maxBuy, \\\"exceeded max buy\\\");\\r\\n        require(_balances[_recipient] + _amount <= maxWallet, \\\"exceeded max wallet\\\");\\r\\n      }\\r\\n      if (!excludedFromFee[_recipient]) {\\r\\n        uint256 fee = _amount * totalBuyTax / 100;\\r\\n        rAmount = _amount - fee;\\r\\n        _balances[address(this)] += fee;\\r\\n\\r\\n        tokensForLiquidity += fee * liquidityBuyTax / totalBuyTax;\\r\\n        tokensForMarketing += fee * marketingBuyTax / totalBuyTax;\\r\\n\\r\\n        emit Transfer(_sender, address(this), fee);\\r\\n      }\\r\\n    }\\r\\n    // else if sell\\r\\n    else if (_recipient == uniswapPair) {\\r\\n      if (!excludedFromLimit[_sender]) {\\r\\n        require(_amount <= maxBuy, \\\"exceeded max buy\\\");\\r\\n        require(\\r\\n          _holderLastTransferTimestamp[tx.origin] <\\r\\n              block.number,\\r\\n          \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\"\\r\\n        );\\r\\n        _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n        uint256 contractTokenBalance = _balances[address(this)];\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n        if( \\r\\n          canSwap &&\\r\\n          swapEnabled &&\\r\\n          !swapping\\r\\n        ) {\\r\\n          swapping = true;\\r\\n          \\r\\n          swapBack();\\r\\n\\r\\n          swapping = false;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (!swapping && !excludedFromFee[_sender]) {\\r\\n        uint256 fee = _amount * totalSellTax / 100;\\r\\n        rAmount = _amount - fee;\\r\\n        _balances[address(this)] += fee;\\r\\n        tokensForLiquidity += fee * liquiditySellTax / totalBuyTax;\\r\\n        tokensForMarketing += fee * marketingSellTax / totalBuyTax;\\r\\n\\r\\n        emit Transfer(_sender, address(this), fee);\\r\\n      }\\r\\n    }\\r\\n    _balances[_sender] = senderBalance - _amount;\\r\\n    _balances[_recipient] += rAmount;\\r\\n\\r\\n    emit Transfer(_sender, _recipient, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n    *\\r\\n    * This internal function is equivalent to `approve`, and can be used to\\r\\n    * e.g. set automatic allowances for certain subsystems, etc.\\r\\n    *\\r\\n    * Emits an {Approval} event.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `owner` cannot be the zero address.\\r\\n    * - `spender` cannot be the zero address.\\r\\n    */\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function swapBack() private {\\r\\n    uint256 contractBalance = _balances[address(this)];\\r\\n    bool success;\\r\\n    uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing;\\r\\n    \\r\\n    if(contractBalance == 0) {return;}\\r\\n\\r\\n    if(contractBalance > swapTokensAtAmount * 20){\\r\\n      contractBalance = swapTokensAtAmount * 20;\\r\\n    }\\r\\n    \\r\\n    // Halve the amount of liquidity tokens\\r\\n    uint256 liquidityTokens = contractBalance * liquiditySellTax / totalSellTax / 2;\\r\\n    uint256 amountToSwapForETH = contractBalance - liquidityTokens;\\r\\n    \\r\\n    uint256 initialETHBalance = address(this).balance;\\r\\n\\r\\n    swapTokensForEth(amountToSwapForETH); \\r\\n    \\r\\n    uint256 ethBalance = address(this).balance - initialETHBalance;\\r\\n    \\r\\n    uint256 ethForMarketing = ethBalance * tokensForMarketing / totalTokensToSwap;\\r\\n    \\r\\n    uint256 ethForLiquidity = ethBalance - ethForMarketing;\\r\\n    \\r\\n    \\r\\n    tokensForLiquidity = 0;\\r\\n    tokensForMarketing = 0;\\r\\n\\r\\n    (success,) = address(feeRecipient).call{value: ethForMarketing}(\\\"\\\");\\r\\n    \\r\\n    if(liquidityTokens > 0 && ethForLiquidity > 0){\\r\\n        addLiquidity(liquidityTokens, ethForLiquidity);\\r\\n        emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(uniswapRouter), tokenAmount);\\r\\n\\r\\n    // add the liquidity\\r\\n    uniswapRouter.addLiquidityETH{value: ethAmount}(\\r\\n        address(this),\\r\\n        tokenAmount,\\r\\n        0, // slippage is unavoidable\\r\\n        0, // slippage is unavoidable\\r\\n        address(0xdead),\\r\\n        block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) private {\\r\\n    // generate the uniswap pair path of token -> weth\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = uniswapRouter.WETH();\\r\\n\\r\\n    _approve(address(this), address(uniswapRouter), tokenAmount);\\r\\n\\r\\n    // make the swap\\r\\n    uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        tokenAmount,\\r\\n        0, // accept any amount of ETH\\r\\n        path,\\r\\n        address(this),\\r\\n        block.timestamp\\r\\n    );\\r\\n    \\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSwapForETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethForLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensForLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"excludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Recovery", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}