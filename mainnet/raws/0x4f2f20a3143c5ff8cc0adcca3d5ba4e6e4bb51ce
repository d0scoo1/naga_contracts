{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n \r\npragma solidity >=0.5.0 <0.9.0;\r\n\r\ncontract CryptoBroskiLuck{\r\n    address payable[] public players; \r\n    address private manager;\r\n    address public cbPool;\r\n    uint256 public entryCost = 0.005 ether;\r\n    uint public playerCount = 10; \r\n    uint public lotteryId;\r\n    mapping (uint => address payable) public lotteryHistory;\r\n    constructor(){\r\n        manager = msg.sender; \r\n        lotteryId = 1;\r\n        cbPool = manager;\r\n    }\r\n    receive () payable external{ \r\n        require(msg.value >= entryCost);\r\n        players.push(payable(msg.sender));\r\n    }\r\n     function setEntryCost(uint256 _entryCost) public  {\r\n       require(msg.sender == manager);\r\n       entryCost = _entryCost;\r\n    }\r\n    function setPlayerCount(uint _playerCount) public{\r\n       require(msg.sender == manager);\r\n       playerCount = _playerCount;\r\n    }\r\n    function getPlayers() public view returns (address payable[] memory) {\r\n        return players;\r\n    }\r\n    function enter() public payable {\r\n        require(msg.value == entryCost);\r\n        players.push(payable(msg.sender));\r\n    }\r\n    // returning the contract's balance in wei\r\n    function getBalance() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n    function setCbPool(address _cbPool) public{\r\n       require(msg.sender == manager);\r\n       cbPool = _cbPool;\r\n    }\r\n    function getWinnerByLottery(uint lottery) public view returns (address payable) {\r\n        return lotteryHistory[lottery];\r\n    }\r\n\r\n    function random() internal view returns(uint){\r\n       return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players.length)));\r\n    }\r\n    function resetGame() public {\r\n        uint managerFee = (getBalance() * 100 ) / 100;\r\n        payable(manager).transfer(managerFee);\r\n        players = new address payable[](0);\r\n        players.push(payable(cbPool));\r\n    }\r\n    function pickWinner() public{\r\n       require(msg.sender == manager);\r\n       require (players.length >= playerCount);\r\n       players.push(payable(cbPool));\r\n       uint f = random();\r\n       uint s = (random() * 2);\r\n       uint t = (random() * 3);\r\n       address payable firstPlace;\r\n       address payable secondPlace;\r\n       address payable thirdPlace;\r\n       uint findex = f % players.length;\r\n       uint sindex = s % players.length;\r\n       uint tindex = t % players.length;\r\n       firstPlace = players[findex];\r\n       secondPlace = players[sindex];\r\n       thirdPlace = players[tindex];\r\n       uint managerFee = (getBalance() * 5 ) / 100; // manager fee is 3%\r\n       uint feedLp = (getBalance() * 5 ) / 100; // feed LP 5%\r\n       uint firstPrize = (getBalance() * 60 ) / 100;     // winner prize\r\n       uint secondPrize = (getBalance() * 20 ) / 100; \r\n       uint thirdPrize = (getBalance() * 10 ) / 100; \r\n       firstPlace.transfer(firstPrize);\r\n       secondPlace.transfer(secondPrize);\r\n       thirdPlace.transfer(thirdPrize);\r\n       payable(manager).transfer(managerFee);\r\n       payable(cbPool).transfer(feedLp);\r\n       lotteryHistory[lotteryId] = players[findex];\r\n       lotteryId++;\r\n       players = new address payable[](0);\r\n   }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cbPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lottery\",\"type\":\"uint256\"}],\"name\":\"getWinnerByLottery\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryHistory\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cbPool\",\"type\":\"address\"}],\"name\":\"setCbPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryCost\",\"type\":\"uint256\"}],\"name\":\"setEntryCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerCount\",\"type\":\"uint256\"}],\"name\":\"setPlayerCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CryptoBroskiLuck", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39925b136eedb472a2709fb6714c986a432b6a7a44624c2f92797091896102e0"}]}