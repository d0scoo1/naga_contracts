{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n         M                                                 M\r\n       M   M                                             M   M\r\n      M  M  M                                           M  M  M\r\n     M  M  M  M                                       M  M  M  M\r\n    M  M  M  M  M                                    M  M  M  M  M\r\n   M  M M  M  M  M                                 M  M  M  M  M  M\r\n   M  M   M  M  M  M                              M  M     M  M  M  M\r\n   M  M     M  M  M  M                           M  M      M  M   M  M\r\n   M  M       M  M  M  M                        M  M       M  M   M  M       \r\n   M  M         M  M  M  M                     M  M        M  M   M  M\r\n   M  M           M  M  M  M                  M  M         M  M   M  M\r\n   M  M             M  M  M  M               M  M          M  M   M  M   M  M  M  M  M  M  M\r\n   M  M               M  M  M  M            M  M        M  M  M   M  M   M  M  M  M  M  M  M\r\n   M  M                 M  M  M  M         M  M      M  M  M  M   M  M                  M  M\r\n   M  M                   M  M  M  M      M  M    M  M  M  M  M   M  M                     M\r\n   M  M                     M  M  M  M   M  M  M  M  M  M  M  M   M  M\r\n   M  M                       M  M  M  M  M   M  M  M  M   M  M   M  M\r\n   M  M                         M  M  M  M   M  M  M  M    M  M   M  M\r\n   M  M                           M  M  M   M  M  M  M     M  M   M  M\r\n   M  M                             M  M   M  M  M  M      M  M   M  M\r\nM  M  M  M  M  M                         M   M  M  M  M   M  M  M  M  M  M  M  \r\n                                          M  M  M  M\r\n                                          M  M  M  M\r\n                                          M  M  M  M\r\n                                           M  M  M  M                        M  M  M  M  M  M\r\n                                            M  M  M  M                          M  M  M  M\r\n                                             M  M  M  M                         M  M  M  M\r\n                                               M  M  M  M                       M  M  M  M\r\n                                                 M  M  M  M                     M  M  M  M\r\n                                                   M  M  M  M                   M  M  M  M\r\n                                                      M  M  M  M                M  M  M  M\r\n                                                         M  M  M  M             M  M  M  M\r\n                                                             M  M  M  M   M  M  M  M  M  M\r\n                                                                 M  M  M  M  M  M  M  M  M\r\n                                                                                                                                                    \r\n*/\r\n \r\n// based off of the beautiful work done by Erick Calderon with the smart contracts for Artblocks.\r\n \r\npragma solidity ^0.5.0;\r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n* checks.\r\n*\r\n* Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n* in bugs, because programmers usually assume that an overflow raises an\r\n* error, which is the standard behavior in high level programming languages.\r\n* `SafeMath` restores this intuition by reverting the transaction when an\r\n* operation overflows.\r\n*\r\n* Using this library instead of the unchecked operations eliminates an entire\r\n* class of bugs, so it's recommended to use it always.\r\n*/\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      require(c >= a, \"SafeMath: addition overflow\");\r\n      return c;\r\n  }\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      require(b <= a, \"SafeMath: subtraction overflow\");\r\n      uint256 c = a - b;\r\n      return c;\r\n  }\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      require(c / a == b, \"SafeMath: multiplication overflow\");\r\n      return c;\r\n  }\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Solidity only automatically asserts when dividing by 0\r\n      require(b > 0, \"SafeMath: division by zero\");\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n  }\r\n}\r\n// File contracts/libs/Strings.sol\r\n// File: contracts/Strings.sol\r\npragma solidity ^0.5.0;\r\n//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\nlibrary Strings {\r\n  function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\r\n      return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n  function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\r\n      return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\r\n      return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      uint i = 0;\r\n      for (i = 0; i < _ba.length; i++) {\r\n          babcde[k++] = _ba[i];\r\n      }\r\n      for (i = 0; i < _bb.length; i++) {\r\n          babcde[k++] = _bb[i];\r\n      }\r\n      for (i = 0; i < _bc.length; i++) {\r\n          babcde[k++] = _bc[i];\r\n      }\r\n      for (i = 0; i < _bd.length; i++) {\r\n          babcde[k++] = _bd[i];\r\n      }\r\n      for (i = 0; i < _be.length; i++) {\r\n          babcde[k++] = _be[i];\r\n      }\r\n      return string(babcde);\r\n  }\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n      if (_i == 0) {\r\n          return \"0\";\r\n      }\r\n      uint j = _i;\r\n      uint len;\r\n      while (j != 0) {\r\n          len++;\r\n          j /= 10;\r\n      }\r\n      bytes memory bstr = new bytes(len);\r\n      uint k = len - 1;\r\n      while (_i != 0) {\r\n          bstr[k--] = byte(uint8(48 + _i % 10));\r\n          _i /= 10;\r\n      }\r\n      return string(bstr);\r\n  }\r\n}\r\npragma solidity ^0.5.0;\r\ninterface GenArt721CoreContract {\r\nfunction projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\r\nfunction projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\r\nfunction projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\r\nfunction projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\r\nfunction projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\r\nfunction projectIdToAdditionalPayeePercentage(uint256 _projectId) external view returns (uint256);\r\nfunction mirageAddress() external view returns (address payable);\r\nfunction miragePercentage() external view returns (uint256);\r\nfunction mint(address _to, uint256 _projectId, address _by) external returns (uint256 tokenId);\r\nfunction earlyMint(address _to, uint256 _projectId, address _by) external returns (uint256 _tokenId);\r\nfunction balanceOf(address owner) external view returns (uint256);\r\n}\r\ninterface ERC20 {\r\nfunction balanceOf(address _owner) external view returns (uint balance);\r\nfunction transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\nfunction allowance(address _owner, address _spender) external view returns (uint remaining);\r\n}\r\ninterface mirageContracts {\r\nfunction balanceOf(address owner, uint256 _id) external view returns (uint256);\r\n}\r\ncontract mirageMinter {\r\nusing SafeMath for uint256;\r\nGenArt721CoreContract public mirageContract;\r\nmirageContracts public membershipContract;\r\nconstructor(address _mirageAddress, address _membershipAddress) public {\r\n  mirageContract = GenArt721CoreContract(_mirageAddress);\r\n  membershipContract = mirageContracts(_membershipAddress);\r\n}\r\nfunction getYourBalanceOfProjectERC20(uint256 _projectId) public view returns (uint256){\r\n  uint256 balance = ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender);\r\n  return balance;\r\n}\r\nfunction checkYourAllowanceOfProjectERC20(uint256 _projectId) public view returns (uint256){\r\n  uint256 remaining = ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this));\r\n  return remaining;\r\n}\r\n \r\nfunction purchase(uint256 _projectId, uint256 numberOfTokens) public payable {\r\n    require(numberOfTokens <= 10, \"Can only mint 10 per transaction\");\r\n  if (keccak256(abi.encodePacked(mirageContract.projectIdToCurrencySymbol(_projectId))) != keccak256(abi.encodePacked(\"ETH\"))){\r\n    require(msg.value==0, \"this project accepts a different currency and cannot accept ETH, or this project does not exist\");\r\n    require(ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this)) >= mirageContract.projectIdToPricePerTokenInWei(_projectId), \"Insufficient Funds Approved for TX\");\r\n    require(ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender) >= mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens), \"Insufficient balance.\");\r\n    _splitFundsERC20(_projectId, numberOfTokens);\r\n  } else {\r\n    require(msg.value>=mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens), \"Must send minimum value to mint!\");\r\n    _splitFundsETH(_projectId, numberOfTokens);\r\n  }\r\n  for(uint i = 0; i < numberOfTokens; i++) {\r\n    mirageContract.mint(msg.sender, _projectId, msg.sender);  \r\n  }\r\n}\r\n\r\n function earlyPurchase(uint256 _projectId, uint256 _membershipId, uint256 numberOfTokens) public payable {\r\n   require(membershipContract.balanceOf(msg.sender,_membershipId) > 0, \"No membership tokens in this wallet\");\r\n   require(numberOfTokens <= 3, \"Can only mint 3 per transaction for presale minting\");\r\n  if (keccak256(abi.encodePacked(mirageContract.projectIdToCurrencySymbol(_projectId))) != keccak256(abi.encodePacked(\"ETH\"))){\r\n    require(msg.value==0, \"this project accepts a different currency and cannot accept ETH, or this project does not exist\");\r\n    require(ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).allowance(msg.sender, address(this)) >= mirageContract.projectIdToPricePerTokenInWei(_projectId), \"Insufficient Funds Approved for TX\");\r\n    require(ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).balanceOf(msg.sender) >= mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens), \"Insufficient balance.\");\r\n    _splitFundsERC20(_projectId, numberOfTokens);\r\n  } else {\r\n    require(msg.value>=mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens), \"Must send minimum value to mint!\");\r\n  \r\n    _splitFundsETH(_projectId, numberOfTokens);\r\n  }\r\n  for(uint i = 0; i < numberOfTokens; i++) {\r\n    mirageContract.earlyMint(msg.sender, _projectId, msg.sender);\r\n  }\r\n}\r\nfunction _splitFundsETH(uint256 _projectId, uint256 numberOfTokens) internal {\r\n  if (msg.value > 0) {\r\n    uint256 mintCost = mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens);\r\n    uint256 refund = msg.value.sub(mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens));\r\n    if (refund > 0) {\r\n      msg.sender.transfer(refund);\r\n    }\r\n    uint256 foundationAmount = mintCost.div(100).mul(mirageContract.miragePercentage());\r\n    if (foundationAmount > 0) {\r\n      mirageContract.mirageAddress().transfer(foundationAmount);\r\n    }\r\n    uint256 projectFunds = mintCost.sub(foundationAmount);\r\n    uint256 additionalPayeeAmount;\r\n    if (mirageContract.projectIdToAdditionalPayeePercentage(_projectId) > 0) {\r\n      additionalPayeeAmount = projectFunds.div(100).mul(mirageContract.projectIdToAdditionalPayeePercentage(_projectId));\r\n      if (additionalPayeeAmount > 0) {\r\n        mirageContract.projectIdToAdditionalPayee(_projectId).transfer(additionalPayeeAmount);\r\n      }\r\n    }\r\n    uint256 creatorFunds = projectFunds.sub(additionalPayeeAmount);\r\n    if (creatorFunds > 0) {\r\n      mirageContract.projectIdToArtistAddress(_projectId).transfer(creatorFunds);\r\n    }\r\n  }\r\n}\r\nfunction _splitFundsERC20(uint256 _projectId, uint256 numberOfTokens) internal {\r\n  uint256 mintCost = mirageContract.projectIdToPricePerTokenInWei(_projectId).mul(numberOfTokens);\r\n  uint256 foundationAmount = mintCost.div(100).mul(mirageContract.miragePercentage());\r\n  if (foundationAmount > 0) {\r\n    ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, mirageContract.mirageAddress(), foundationAmount);\r\n  }\r\n  uint256 projectFunds = mintCost.sub(foundationAmount);\r\n  uint256 additionalPayeeAmount;\r\n  if (mirageContract.projectIdToAdditionalPayeePercentage(_projectId) > 0) {\r\n    additionalPayeeAmount = projectFunds.div(100).mul(mirageContract.projectIdToAdditionalPayeePercentage(_projectId));\r\n    if (additionalPayeeAmount > 0) {\r\n      ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, mirageContract.projectIdToAdditionalPayee(_projectId), additionalPayeeAmount);\r\n    }\r\n  }\r\n  uint256 creatorFunds = projectFunds.sub(additionalPayeeAmount);\r\n  if (creatorFunds > 0) {\r\n    ERC20(mirageContract.projectIdToCurrencyAddress(_projectId)).transferFrom(msg.sender, mirageContract.projectIdToArtistAddress(_projectId), creatorFunds);\r\n  }\r\n}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"membershipContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"getYourBalanceOfProjectERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"},{\"name\":\"_membershipId\",\"type\":\"uint256\"},{\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"earlyPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"checkYourAllowanceOfProjectERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mirageContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mirageAddress\",\"type\":\"address\"},{\"name\":\"_membershipAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "mirageMinter", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b7ec7bbd2d2193b47027247fc666fb342d23c4b50000000000000000000000000170227514a274826685bf81aed06e4218175572", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://22b5cfa0cd84892a96fc4f242a525f0f513ea5fa68236675f133c57d32c965ae"}]}