{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\n//  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _                         \r\n// |   ____  _          ____                 |\r\n// |  / ___|(_) _   _  |  _ \\   ___ __   __  |\r\n// | | |  _ | || | | | | | | | / _ \\\\ \\ / /  |\r\n// | | |_| || || |_| | | |_| ||  __/ \\ V /   |\r\n// |  \\____||_| \\__,_| |____/  \\___|  \\_/    |\r\n// | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ |    \r\n                                  \r\ninterface IERC721A {\r\n\r\n    // The caller must own the token or be an approved operator\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    //The token does not exist\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    //The caller cannot approve to their own address\r\n    error ApproveToCaller();\r\n\r\n    //The caller cannot approve to the current owner\r\n    error ApprovalToCurrentOwner();\r\n\r\n    //Cannot query the balance for the zero address\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    //Cannot mint to the zero address\r\n    error MintToZeroAddress();\r\n\r\n    //The quantity of tokens minted must be more than zero\r\n    error MintZeroQuantity();\r\n\r\n    //The token does not exist\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    //The caller must own the token or be an approved operator.\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    ///The token must be owned by `from`\r\n    error TransferFromIncorrectOwner();\r\n\r\n    //Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    //Cannot transfer to the zero address\r\n    error TransferToZeroAddress();\r\n\r\n    //The token does not exist\r\n    error URIQueryForNonexistentToken();\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;}\r\n\r\n    //Returns the total amount of tokens stored by the contract\r\n    //Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    //Returns true if this contract implements the interface defined by `interfaceId`\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    //Emitted when `tokenId` token is transferred from `from` to `to`\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    //Emitted when `owner` enables `approved` to manage the `tokenId` token\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    //Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    //Returns the number of tokens in `owner` account\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    //Returns the owner of the `tokenId` token\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    //Safely transfers `tokenId` token from `from` to `to`\r\n    //Requirements: `from` cannot be the zero address\r\n    //              `to` cannot be the zero address\r\n    //              `tokenId` token must exist and be owned by `from`\r\n    //              If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}\r\n    //              If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    //Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n    //Requirements: `from` cannot be the zero address.\r\n    //              `to` cannot be the zero address.\r\n    //              `tokenId` token must exist and be owned by `from`\r\n    //              If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}\r\n    //              If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    //Transfers `tokenId` token from `from` to `to`\r\n    //Requirements: `from` cannot be the zero address\r\n    //              `to` cannot be the zero address\r\n    //              `tokenId` token must be owned by `from`\r\n    //              If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    //Gives permission to `to` to transfer `tokenId` token to another account\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    //Approve or remove `operator` as an operator for the caller\r\n    //Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller\r\n    //Requirements: The `operator` cannot be the caller.\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    //Returns the account approved for `tokenId` token.\r\n    //Requirements: `tokenId` must exist\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    //Returns if the `operator` is allowed to manage all of the assets of `owner`\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    //Returns the token collection name\r\n    function name() external view returns (string memory);\r\n\r\n    //Returns the token collection symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    //Returns the Uniform Resource Identifier (URI) for `tokenId` token\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);}\r\n\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);}\r\n\r\ncontract ERC721A is IERC721A {\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant BITMASK_BURNED = 1 << 224;\r\n    \r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See `_packedOwnershipOf` implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();}\r\n\r\n    //Returns the starting token ID\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;}\r\n\r\n    //Returns the next token ID to be minted\r\n    function _nextTokenId() internal view returns (uint256) {\r\n        return _currentIndex;}\r\n\r\n    //Returns the total number of tokens in existence\r\n    function totalSupply() public view override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {return _currentIndex - _burnCounter - _startTokenId();}}\r\n\r\n    //Returns the total amount of tokens minted in the contract\r\n    function _totalMinted() internal view returns (uint256) {\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n        // and it is initialized to `_startTokenId()`\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();}}\r\n\r\n    //Returns the total number of tokens burned\r\n    function _totalBurned() internal view returns (uint256) {\r\n        return _burnCounter;}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\r\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\r\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\r\n        return\r\n            interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;}\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;}\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;}\r\n\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;}\r\n\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);}\r\n\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        assembly { // Cast aux without masking.\r\n            auxCasted := aux}\r\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;}\r\n\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n        unchecked {\r\n            if (_startTokenId() <= curr)\r\n                if (curr < _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed & BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an ownership that has an address and is not burned\r\n                        // before an ownership that does not have an address and is not burned.\r\n                        // Hence, curr will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed is zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];}\r\n                        return packed;}}}\r\n        revert OwnerQueryForNonexistentToken();}\r\n\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & BITMASK_BURNED != 0;}\r\n\r\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);}\r\n\r\n    function _initializeOwnershipAt(uint256 index) internal {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);}}\r\n\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));}\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));}\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;}\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;}\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';}\r\n\r\n    //Base URI for computing {tokenURI}. \r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';}\r\n\r\n    function _addressToUint256(address value) private pure returns (uint256 result) {\r\n        assembly {\r\n            result := value}}\r\n\r\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\r\n        assembly {\r\n            result := value}}\r\n\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();}\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);}\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n        return _tokenApprovals[tokenId];}\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);}\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];}\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        _transfer(from, to, tokenId);}\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');}\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();}}\r\n\r\n    //Returns whether `tokenId` exists\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && _packedOwnerships[tokenId] & BITMASK_BURNED == 0;}\r\n\r\n    //Equivalent to `_safeMint(to, quantity, '')`\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');}\r\n\r\n    //Safely mints `quantity` tokens and transfers them to `to`\r\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the balance and number minted.\r\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] =\r\n                _addressToUint256(to) |\r\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\r\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n            if (to.code.length != 0) {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex);\r\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();}} \r\n                while (updatedIndex < end);\r\n                // Reentrancy protection\r\n                if (_currentIndex != startTokenId) revert();} \r\n                else {\r\n                do {emit Transfer(address(0), to, updatedIndex++);} while (updatedIndex < end);}\r\n            _currentIndex = updatedIndex;}\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);}\r\n\r\n    //Mints `quantity` tokens and transfers them to `to`\r\n    function _mint(address to, uint256 quantity) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the balance and number minted.\r\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] =\r\n                _addressToUint256(to) |\r\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\r\n                (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n            do {emit Transfer(address(0), to, updatedIndex++);} while (updatedIndex < end);\r\n            _currentIndex = updatedIndex;}\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);}\r\n\r\n    //Transfers `tokenId` from `from` to `to`\r\n    function _transfer(address from, address to, uint256 tokenId) private {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\r\n            isApprovedForAll(from, _msgSenderERC721A()) ||\r\n            getApproved(tokenId) == _msgSenderERC721A());\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n        // Clear approvals from the previous owner.\r\n        delete _tokenApprovals[tokenId];\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] =\r\n                _addressToUint256(to) |\r\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\r\n                BITMASK_NEXT_INITIALIZED;\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;}}}}\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);}\r\n\r\n    //Equivalent to `_burn(tokenId, false)`\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);}\r\n\r\n    //Destroys `tokenId`\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n        address from = address(uint160(prevOwnershipPacked));\r\n        if (approvalCheck) {\r\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());\r\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();}\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n        // Clear approvals from the previous owner.\r\n        delete _tokenApprovals[tokenId];\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] =\r\n                _addressToUint256(from) |\r\n                (block.timestamp << BITPOS_START_TIMESTAMP) |\r\n                BITMASK_BURNED | \r\n                BITMASK_NEXT_INITIALIZED;\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;}}}}\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {_burnCounter++;}}\r\n\r\n    //Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract\r\n    function _checkContractOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;} \r\n            catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();} \r\n            else {\r\n                assembly {revert(add(32, reason), mload(reason))}}}}\r\n\r\n    //Hook that is called before a set of serially-ordered token ids are about to be transferred\r\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\r\n\r\n    //Hook that is called after a set of serially-ordered token ids have been transferred\r\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\r\n\r\n    //Returns the message sender (defaults to `msg.sender`)\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;}\r\n\r\n    //Converts a `uint256` to its ASCII `string` decimal representation\r\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \r\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\r\n            // We will need 1 32-byte word to store the length, \r\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\r\n            ptr := add(mload(0x40), 128)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, ptr)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := ptr\r\n\r\n            // We write the string from the rightmost digit to the leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // Costs a bit more than early returning for the zero case,\r\n            // but cheaper in terms of deployment and overall runtime costs.\r\n            for { \r\n                // Initialize and perform the first pass without check.\r\n                let temp := value\r\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\r\n                ptr := sub(ptr, 1)\r\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)} \r\n            temp { \r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)} { // Body of the for loop.\r\n                ptr := sub(ptr, 1)\r\n                mstore8(ptr, add(48, mod(temp, 10)))}\r\n            let length := sub(end, ptr)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            ptr := sub(ptr, 32)\r\n            // Store the length.\r\n            mstore(ptr, length)}}}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;}\r\n\r\n    //Prevents a contract from calling itself, directly or indirectly.\r\n    //Calling a `nonReentrant` function from another `nonReentrant`function is not supported. \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;}}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;}\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;}}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        //dev Initializes the contract setting the deployer as the initial owner\r\n        _transferOwnership(_msgSender());}\r\n\r\n    function owner() public view virtual returns (address) {\r\n        //Returns the address of the current owner\r\n        return _owner;}\r\n\r\n    modifier onlyOwner() {\r\n        //Throws if called by any account other than the owner\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;}\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        //Leaves the contract without owner\r\n        _transferOwnership(address(0));}\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        //Transfers ownership of the contract to a new account (`newOwner`)\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);}\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        //Transfers ownership of the contract to a new account (`newOwner`)\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);}}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";}\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;}\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;}\r\n        return string(buffer);}\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";}\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;}\r\n        return toHexString(value, length);}\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;}\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);}\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);}}\r\n\r\ncontract starfighter is ERC721A, Ownable, ReentrancyGuard {\r\n\r\n    using Strings for uint256;\r\n\r\n    string public uriPrefix = \"\";\r\n    string public uriSuffix = \".json\";\r\n\r\n    uint256 public costWhitelist = 0.05 ether;\r\n    uint256 public costNormal = 0.06 ether;\r\n    uint256 public NFTminted;\r\n\r\n    bool public paused = true;\r\n    bool public whitelistMintEnabled = false;\r\n    bool public revealed = false;\r\n\r\n    //mapping(address => bool) public whitelistClaimed;\r\n    mapping (address => bool) public whitelisted;\r\n    mapping(address => uint) public minted;\r\n\r\n    string public tokenName = \"STARFIGHTER CLUB\";\r\n    string public tokenSymbol = \"SFC\";\r\n    uint256 public maxSupply = 333;\r\n    uint256 public maxMintAmountPerTx = 12;\r\n    string public hiddenMetadataUri = \"ipfs://QmVUr53zcyrXr7VfBg7PLjmMcL17N5Xej8bKSBbRAro8tQ/hidden.json\";\r\n    \r\n    constructor() ERC721A(tokenName, tokenSymbol) {\r\n            maxSupply = maxSupply;\r\n            setMaxMintAmountPerTx(maxMintAmountPerTx);\r\n            setHiddenMetadataUri(hiddenMetadataUri);}\r\n\r\n    modifier mintCompliance(uint256 _mintAmount) {\r\n        require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, 'Invalid mint amount!');\r\n        require(totalSupply() + _mintAmount <= maxSupply, 'Max supply exceeded!');\r\n        _;}\r\n\r\n    modifier mintPriceCompliance(uint256 _mintAmount) {\r\n        if(whitelistMintEnabled == true && paused == true){\r\n            require(msg.value >= costWhitelist * _mintAmount, 'Insufficient funds!');}\r\n        if(paused == false){\r\n            require(msg.value >= costNormal * _mintAmount, 'Insufficient funds!');}\r\n        _;}\r\n\r\n    function setCostWhitelist(uint256 _cost) public onlyOwner {\r\n        //Ether cost\r\n        costWhitelist = _cost;}\r\n\r\n    function setCostNormal(uint256 _cost) public onlyOwner {\r\n        //Ether cost\r\n        costNormal = _cost;}\r\n\r\n    function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) mintPriceCompliance(_mintAmount) {\r\n        require(!paused, 'The contract is paused!');\r\n        minted[_msgSender()] = minted[_msgSender()] + _mintAmount;//CHECK\r\n        require(minted[_msgSender()] <= maxMintAmountPerTx, \"Max quantity reached\");\r\n        NFTminted += _mintAmount;\r\n            _safeMint(_msgSender(), _mintAmount);}\r\n\r\n    function burn(uint256 tokenId) public {\r\n        _burn(tokenId, true); }\r\n\r\n    function mintForAddress(uint256 _mintAmount, address _receiver) public onlyOwner {\r\n        require(totalSupply() + _mintAmount <= maxSupply, 'Max supply exceeded!');\r\n        //Minted by Owner without any cost, doesn't count on minted quantity\r\n        NFTminted += _mintAmount;\r\n        _safeMint(_receiver, _mintAmount);}\r\n\r\n    function _startTokenId() internal view virtual override returns (uint256) {\r\n        return 1;}\r\n\r\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(_tokenId), 'ERC721Metadata: URI query for nonexistent token');\r\n        if (revealed == false) {\r\n            return hiddenMetadataUri;}\r\n        string memory currentBaseURI = _baseURI();\r\n        return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)): '';}\r\n    \r\n    function setRevealed(bool _state) public onlyOwner {\r\n        //Reveal the token URI of the NFTs\r\n        revealed = _state;}\r\n\r\n    function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {\r\n        maxMintAmountPerTx = _maxMintAmountPerTx;}\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {\r\n        hiddenMetadataUri = _hiddenMetadataUri;}\r\n\r\n    function setUriPrefix(string memory _uriPrefix) public onlyOwner {\r\n        uriPrefix = _uriPrefix;}\r\n\r\n    function setUriSuffix(string memory _uriSuffix) public onlyOwner {\r\n        uriSuffix = _uriSuffix;}\r\n\r\n    function setPaused(bool _state) public onlyOwner {\r\n        paused = _state;}\r\n\r\n    function setWhitelistMintEnabled(bool _state) public onlyOwner {\r\n        whitelistMintEnabled = _state;}\r\n\r\n    function whitelist(address _addr) public onlyOwner() {\r\n        require(!whitelisted[_addr], \"Account is already Whitlisted\");\r\n        whitelisted[_addr] = true;}\r\n\r\n    function blacklist_A_whitelisted(address _addr) external onlyOwner() {\r\n        require(whitelisted[_addr], \"Account is already Blacklisted\");\r\n        whitelisted[_addr] = false;}\r\n\r\n    function whitelistMint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) mintPriceCompliance(_mintAmount) {\r\n        // Verify whitelist requirements\r\n        require(whitelistMintEnabled, 'The whitelist sale is not enabled!');\r\n        //require(!whitelistClaimed[_msgSender()], 'Address already claimed!');\r\n        require(whitelisted[_msgSender()], \"Account is not in whitelist\");\r\n        minted[_msgSender()] = minted[_msgSender()] + _mintAmount;//CHECK\r\n        require(minted[_msgSender()] <= maxMintAmountPerTx, \"Max quantity reached\");\r\n        NFTminted += _mintAmount;\r\n        //whitelistClaimed[_msgSender()] = true;\r\n        _safeMint(_msgSender(), _mintAmount);}\r\n\r\n    function withdraw() public onlyOwner nonReentrant {\r\n    // This will transfer the remaining contract balance to the owner.\r\n    // Do not remove this otherwise you will not be able to withdraw the funds.\r\n    // =============================================================================\r\n        (bool os, ) = payable(owner()).call{value: address(this).balance}('');\r\n        require(os);}\r\n        \r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return uriPrefix;}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTminted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blacklist_A_whitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costNormal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hiddenMetadataUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCostNormal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCostWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hiddenMetadataUri\",\"type\":\"string\"}],\"name\":\"setHiddenMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelistMintEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "starfighter", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc41e260baa8c14630e5da2b1c38fb8ca5a4fd1976849931765da3585bb5ae5d"}]}