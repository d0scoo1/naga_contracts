{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT LICENSE\r\npragma solidity 0.8.11;\r\n\r\ninterface ITOKE {\r\n\tfunction mint(address to, uint256 amount) external;\r\n\r\n\tfunction burn(address from, uint256 amount) external;\r\n\r\n\tfunction updateOriginAccess() external;\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n}\r\n\r\ncontract STACRaffle {\r\n    address tokeAddress = 0xDC5cc936595d71C3C40001F96868cdE92C41b21A;\r\n    ITOKE toke;\r\n    uint256 public totalStonedApeTickets = 0;\r\n    uint256 public totalFedApeTickets = 0;\r\n    uint256 public totalBurned = 0;\r\n\r\n    mapping(address => uint256) public stonedApeTicketAmounts;\r\n    mapping(address => uint256) public fedApeTicketAmounts;\r\n    \r\n    address[] private stonedApeTicketAddresses;\r\n    address[] private fedApeTicketAddresses;\r\n\taddress[] private burners;\r\n\r\n    address private owner;\r\n\r\n    modifier onlyOwner() {\r\n    require(msg.sender == owner, \"You are not allowed to use this function\");\r\n    _;\r\n\t}\r\n\tconstructor() {\r\n\t\towner = msg.sender;\r\n        toke = ITOKE(tokeAddress);\r\n\t}\r\n\r\n    function burn(uint256 amount) external {\r\n        toke.burn(msg.sender, amount);\r\n        if(amount == 50000 ether) {\r\n            stonedApeTicketAmounts[msg.sender] += 1;\r\n            stonedApeTicketAddresses.push(msg.sender);\r\n            totalStonedApeTickets += 1;\r\n\r\n            if(stonedApeTicketAmounts[msg.sender] == 1 && fedApeTicketAmounts[msg.sender] == 0) {\r\n                burners.push(msg.sender);\r\n            }\r\n        }\r\n\r\n        if(amount == 250000 ether) {\r\n            fedApeTicketAmounts[msg.sender] += 1;\r\n            fedApeTicketAddresses.push(msg.sender);\r\n            totalFedApeTickets += 1;\r\n\r\n            if(fedApeTicketAmounts[msg.sender] == 1 && stonedApeTicketAmounts[msg.sender] == 0) {\r\n                burners.push(msg.sender);\r\n            }\r\n        }\r\n        totalBurned += amount;\r\n\r\n    }\r\n\r\n    function getStonedApeAddresses() public view returns (address [] memory) {\r\n        return stonedApeTicketAddresses;\r\n    }\r\n\r\n    function getFedApeAddresses() public view returns (address [] memory) {\r\n        return fedApeTicketAddresses;\r\n    }\r\n\r\n    function resetGame() external onlyOwner {\r\n\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            stonedApeTicketAmounts[burners[i]] = 0;\r\n            fedApeTicketAmounts[burners[i]] = 0;\r\n        }\r\n\r\n        totalBurned = 0;\r\n        totalFedApeTickets = 0;\r\n        totalStonedApeTickets = 0;\r\n        delete fedApeTicketAddresses;\r\n        delete stonedApeTicketAddresses;\r\n        delete burners;\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fedApeTicketAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFedApeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStonedApeAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stonedApeTicketAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFedApeTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStonedApeTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "STACRaffle", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d9e93811fd7c5cad7751552cfda00d6518ceb42a60a9288cbaf7a96aa090d17"}]}