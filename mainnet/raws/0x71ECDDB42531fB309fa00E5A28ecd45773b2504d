{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.5;\r\npragma abicoder v2;\r\n\r\n// A partial ERC20 interface.\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// A partial WETH interfaec.\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract SwapV3 {\r\n\r\n    // The WETH contract.\r\n    IWETH private immutable WETH;\r\n    address private immutable owner;\r\n\r\n    constructor() {\r\n        WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Payable fallback to allow this contract to receive protocol fee refunds.\r\n    receive() external payable {}\r\n\r\n    //only owner function\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender, \"ONLY FOR OWNER\");\r\n        _;\r\n    }\r\n\r\n    // Transfer tokens held by this contrat to the sender/owner.\r\n    function withdrawToken(IERC20 token, uint256 amount)\r\n        external onlyOwner\r\n    {\r\n        if(amount == 0){\r\n            amount = token.balanceOf(address(this));\r\n        }\r\n        require(token.transfer(msg.sender, amount));\r\n    }\r\n\r\n    // Transfer ETH held by this contrat to the sender/owner.\r\n    function withdrawETH(uint256 amount)\r\n        external onlyOwner\r\n    {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Transfer ETH into this contract and wrap it into WETH.\r\n    function depositETH()\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        WETH.deposit{value: msg.value}();\r\n    }\r\n\r\n    struct Tokens{\r\n        address token;\r\n        uint256 amount;\r\n        bytes data;\r\n    }\r\n\r\n    function xSwap(Tokens[] memory tokens, address _proxy) public \r\n                    onlyOwner {\r\n        for(uint i = 0; i < tokens.length; i++){\r\n            IERC20 ierc = IERC20(tokens[i].token);\r\n            ierc.approve(_proxy, tokens[i].amount);\r\n            (bool success, bytes memory data) = _proxy.call(tokens[i].data);\r\n            // require(success, \"SWAP_CALL_FAILED\");\r\n            emit Log(tokens[i]);\r\n        }\r\n    }\r\n\r\n    event Log(Tokens tokens);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct SwapV3.Tokens\",\"name\":\"tokens\",\"type\":\"tuple\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapV3.Tokens[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"xSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapV3", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76cefa6fa6708d9d9e9d047cbdffc5c5e69f9879a2b8ca9111d482684e0f1581"}]}