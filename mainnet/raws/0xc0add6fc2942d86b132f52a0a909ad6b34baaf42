{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n/** \r\n * METEORA\r\n *\r\n * Lunaris Incorporation - 2022\r\n * https://meteora.lunaris.inc\r\n *\r\n * TGE contract of the METEORA MRA Token, following the\r\n * ERC20 standard on Ethereum.\r\n *\r\n * Audited on 17/03/2022 - info: meteora(at)lunaris.inc\r\n * \r\n * TOTAL FIXED SUPPLY: 100,000,000 MRA\r\n * \r\n**/\r\n\r\ncontract Meteora {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    address private Lunaris;\r\n    uint8 private _decimals;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n    \r\n    constructor() {\r\n        _name = \"Meteora\";\r\n        _symbol = \"MRA\";\r\n        _decimals = 18;\r\n        _totalSupply = 100000000 * (10 ** 18);\r\n        \r\n        // Owner - Lunaris Incorporation\r\n        Lunaris = address(0xf0fA5BC481aDB0ed35c180B52aDCBBEad455e808);\r\n        \r\n        // All of the tokens are sent to the Lunaris Wallet\r\n        // then sent to external distribution contracts following\r\n        // the Tokenomics documents.\r\n        //\r\n        // Please check out https://meteora.lunaris.inc for more information.\r\n        _balances[Lunaris] = _totalSupply;\r\n    }\r\n    \r\n    /*******************/\r\n    /* ERC20 FUNCTIONS */\r\n    /*******************/\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        \r\n        require(currentAllowance >= amount, \"METEORA: You do not have enough allowance to perform this action!\");\r\n        \r\n        _transfer(sender, recipient, amount);\r\n        \r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    \r\n    /*************************/\r\n    /* ADDITIONNAL FUNCTIONS */\r\n    /*************************/\r\n    \r\n    /** \r\n     * MRA is burnable. Any MRA owner can burn his tokens if need be.\r\n     * The total supply is updated accordingly.\r\n    **/\r\n    \r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**********************/\r\n    /* CONTRACT FUNCTIONS */\r\n    /**********************/\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"METEORA: The sender cannot be the Zero Address!\");\r\n        require(recipient != address(0), \"METEORA: The recipient cannot be the Zero Address!\");\r\n        \r\n        uint256 senderBalance = _balances[sender];\r\n        \r\n        require(senderBalance >= amount, \"METEORA: Sender does not have enough MRA for this operation!\");\r\n        \r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        \r\n        _balances[recipient] += amount;\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"METEORA: The owner cannot be the Zero Address!\");\r\n        require(spender != address(0), \"METEORA: The spender cannot be the Zero Address!\");\r\n        \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _burn(address owner, uint256 amount) private {\r\n        uint256 accountBalance = _balances[owner];\r\n        \r\n        require(owner != address(0), \"METEORA: Owner cannot be the Zero Address!\");\r\n        require(accountBalance >= amount, \"METEORA: You do not have enough tokens to burn!\");\r\n        \r\n        unchecked {\r\n            _balances[owner] = accountBalance - amount;\r\n        }\r\n        \r\n        _totalSupply -= amount;\r\n        \r\n        emit Burned(owner, amount);\r\n    }\r\n    \r\n    /**********/\r\n    /* EVENTS */\r\n    /**********/\r\n    \r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Burned(address indexed burner, uint256 amount);\r\n    \r\n    /***********/\r\n    /* CONTEXT */\r\n    /***********/\r\n    \r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Meteora", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7765bde3ea98abbaaed9d1582cfae7e1884d8fd6e444ec059eb2510f9f47f74e"}]}