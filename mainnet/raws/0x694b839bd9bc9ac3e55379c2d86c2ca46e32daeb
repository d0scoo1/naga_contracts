{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/zeppelin/upgradable/Initializable.sol\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || !initialized, \"Contract instance is already initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/zeppelin/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract  Context {\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract UpgradableOwnable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IBridge.sol\r\n\r\ninterface IBridge {\r\n\r\n    struct ClaimData {\r\n        address payable to;\r\n        uint256 amount;\r\n        bytes32 blockHash;\r\n        bytes32 transactionHash;\r\n        uint32 logIndex;\r\n    }\r\n\r\n    function version() external pure returns (string memory);\r\n\r\n    function getFeePercentage() external view returns(uint);\r\n\r\n    /**\r\n     * ERC-20 tokens approve and transferFrom pattern\r\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\r\n     */\r\n    function receiveTokensTo(address tokenToUse, address to, uint256 amount) external;\r\n\r\n    /**\r\n     * Use network currency and cross it.\r\n     */\r\n    function depositTo(address to) external payable;\r\n\r\n    /**\r\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\r\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\r\n     */\r\n    function tokensReceived (\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * Accepts the transaction from the other chain that was voted and sent by the Federation contract\r\n     */\r\n    function acceptTransfer(\r\n        address _originalTokenAddress,\r\n        address payable _from,\r\n        address payable _to,\r\n        uint256 _amount,\r\n        bytes32 _blockHash,\r\n        bytes32 _transactionHash,\r\n        uint32 _logIndex\r\n    ) external;\r\n\r\n    /**\r\n     * Claims the crossed transaction using the hash, this sends the funds to the address indicated in\r\n     */\r\n    function claim(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\r\n\r\n    function claimFallback(ClaimData calldata _claimData) external returns (uint256 receivedAmount);\r\n\r\n    function claimGasless(\r\n        ClaimData calldata _claimData,\r\n        address payable _relayer,\r\n        uint256 _fee,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external returns (uint256 receivedAmount);\r\n\r\n    function getTransactionDataHash(\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes32 _blockHash,\r\n        bytes32 _transactionHash,\r\n        uint32 _logIndex\r\n    ) external returns(bytes32);\r\n\r\n    event Cross(\r\n        address indexed _tokenAddress,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _amount,\r\n        bytes _userData\r\n    );\r\n    event NewSideToken(\r\n        address indexed _newSideTokenAddress,\r\n        address indexed _originalTokenAddress,\r\n        string _newSymbol,\r\n        uint256 _granularity\r\n    );\r\n    event AcceptedCrossTransfer(\r\n        bytes32 indexed _transactionHash,\r\n        address indexed _originalTokenAddress,\r\n        address indexed _to,\r\n        address  _from,\r\n        uint256 _amount,\r\n        bytes32 _blockHash,\r\n        uint256 _logIndex\r\n    );\r\n    event FeePercentageChanged(uint256 _amount);\r\n    event Claimed(\r\n        bytes32 indexed _transactionHash,\r\n        address indexed _originalTokenAddress,\r\n        address indexed _to,\r\n        address _sender,\r\n        uint256 _amount,\r\n        bytes32 _blockHash,\r\n        uint256 _logIndex,\r\n        address _reciever,\r\n        address _relayer,\r\n        uint256 _fee\r\n    );\r\n}\r\n\r\n// File: contracts/Federation.sol\r\n\r\n// Upgradables\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\npragma abicoder v2;\r\n\r\ncontract Federation is Initializable, UpgradableOwnable {\r\n    uint constant public MAX_MEMBER_COUNT = 50;\r\n    address constant private NULL_ADDRESS = address(0);\r\n\r\n    IBridge public bridge;\r\n    address[] public members;\r\n    uint public required;\r\n\r\n    mapping (address => bool) public isMember;\r\n    mapping (bytes32 => mapping (address => bool)) public votes;\r\n    mapping(bytes32 => bool) public processed;\r\n\r\n    event Executed(\r\n        address indexed federator,\r\n        bytes32 indexed transactionHash,\r\n        bytes32 indexed transactionId,\r\n        address originalTokenAddress,\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount,\r\n        bytes32 blockHash,\r\n        uint32 logIndex\r\n    );\r\n    event MemberAddition(address indexed member);\r\n    event MemberRemoval(address indexed member);\r\n    event RequirementChange(uint required);\r\n    event BridgeChanged(address bridge);\r\n    event Voted(\r\n        address indexed federator,\r\n        bytes32 indexed transactionHash,\r\n        bytes32 indexed transactionId,\r\n        address originalTokenAddress,\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount,\r\n        bytes32 blockHash,\r\n        uint32 logIndex\r\n    );\r\n    event HeartBeat(\r\n        address indexed sender,\r\n        uint256 fedRskBlock,\r\n        uint256 fedEthBlock,\r\n        string federatorVersion,\r\n        string nodeRskInfo,\r\n        string nodeEthInfo\r\n    );\r\n\r\n    modifier onlyMember() {\r\n        require(isMember[_msgSender()], \"Federation: Not Federator\");\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint membersCount, uint _required) {\r\n        // solium-disable-next-line max-len\r\n        require(_required <= membersCount && _required != 0 && membersCount != 0, \"Federation: Invalid requirements\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address[] memory _members, uint _required, address _bridge, address owner)\r\n    validRequirement(_members.length, _required) public initializer {\r\n        UpgradableOwnable.initialize(owner);\r\n        require(_members.length <= MAX_MEMBER_COUNT, \"Federation: Too many members\");\r\n        members = _members;\r\n        for (uint i = 0; i < _members.length; i++) {\r\n            require(!isMember[_members[i]] && _members[i] != NULL_ADDRESS, \"Federation: Invalid members\");\r\n            isMember[_members[i]] = true;\r\n            emit MemberAddition(_members[i]);\r\n        }\r\n        required = _required;\r\n        emit RequirementChange(required);\r\n        _setBridge(_bridge);\r\n    }\r\n\r\n    function version() external pure returns (string memory) {\r\n        return \"v2\";\r\n    }\r\n\r\n    function setBridge(address _bridge) external onlyOwner {\r\n        _setBridge(_bridge);\r\n    }\r\n\r\n    function _setBridge(address _bridge) internal {\r\n        require(_bridge != NULL_ADDRESS, \"Federation: Empty bridge\");\r\n        bridge = IBridge(_bridge);\r\n        emit BridgeChanged(_bridge);\r\n    }\r\n\r\n    function voteTransaction(\r\n        address originalTokenAddress,\r\n        address payable sender,\r\n        address payable receiver,\r\n        uint256 amount,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex\r\n    )\r\n    public onlyMember returns(bool)\r\n    {\r\n        bytes32 transactionId = getTransactionId(\r\n            originalTokenAddress,\r\n            sender,\r\n            receiver,\r\n            amount,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex\r\n        );\r\n        if (processed[transactionId])\r\n            return true;\r\n\r\n        if (votes[transactionId][_msgSender()])\r\n            return true;\r\n\r\n        votes[transactionId][_msgSender()] = true;\r\n        emit Voted(\r\n            _msgSender(),\r\n            transactionHash,\r\n            transactionId,\r\n            originalTokenAddress,\r\n            sender,\r\n            receiver,\r\n            amount,\r\n            blockHash,\r\n            logIndex\r\n        );\r\n\r\n        uint transactionCount = getTransactionCount(transactionId);\r\n        if (transactionCount >= required && transactionCount >= members.length / 2 + 1) {\r\n            processed[transactionId] = true;\r\n            bridge.acceptTransfer(\r\n                originalTokenAddress,\r\n                sender,\r\n                receiver,\r\n                amount,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex\r\n            );\r\n            emit Executed(\r\n                _msgSender(),\r\n                transactionHash,\r\n                transactionId,\r\n                originalTokenAddress,\r\n                sender,\r\n                receiver,\r\n                amount,\r\n                blockHash,\r\n                logIndex\r\n            );\r\n            return true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTransactionCount(bytes32 transactionId) public view returns(uint) {\r\n        uint count = 0;\r\n        for (uint i = 0; i < members.length; i++) {\r\n            if (votes[transactionId][members[i]])\r\n                count += 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function hasVoted(bytes32 transactionId) external view returns(bool)\r\n    {\r\n        return votes[transactionId][_msgSender()];\r\n    }\r\n\r\n    function transactionWasProcessed(bytes32 transactionId) external view returns(bool)\r\n    {\r\n        return processed[transactionId];\r\n    }\r\n\r\n    function getTransactionId(\r\n        address originalTokenAddress,\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex\r\n    ) public pure returns(bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n            originalTokenAddress,\r\n            sender,\r\n            receiver,\r\n            amount,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex\r\n            )\r\n        );\r\n    }\r\n\r\n    function addMember(address _newMember) external onlyOwner\r\n    {\r\n        require(_newMember != NULL_ADDRESS, \"Federation: Empty member\");\r\n        require(!isMember[_newMember], \"Federation: Member already exists\");\r\n        require(members.length < MAX_MEMBER_COUNT, \"Federation: Max members reached\");\r\n\r\n        isMember[_newMember] = true;\r\n        members.push(_newMember);\r\n        emit MemberAddition(_newMember);\r\n    }\r\n\r\n    function removeMember(address _oldMember) external onlyOwner\r\n    {\r\n        require(_oldMember != NULL_ADDRESS, \"Federation: Empty member\");\r\n        require(isMember[_oldMember], \"Federation: Member doesn't exists\");\r\n        require(members.length > 1, \"Federation: Can't remove all the members\");\r\n        require(members.length - 1 >= required, \"Federation: Can't have less than required members\");\r\n\r\n        isMember[_oldMember] = false;\r\n        for (uint i = 0; i < members.length - 1; i++) {\r\n            if (members[i] == _oldMember) {\r\n                members[i] = members[members.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        members.pop(); // remove an element from the end of the array.\r\n        emit MemberRemoval(_oldMember);\r\n    }\r\n\r\n    function getMembers() external view returns (address[] memory)\r\n    {\r\n        return members;\r\n    }\r\n\r\n    function changeRequirement(uint _required) external onlyOwner validRequirement(members.length, _required)\r\n    {\r\n        require(_required >= 2, \"Federation: Requires at least 2\");\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    function emitHeartbeat(\r\n        uint256 fedRskBlock,\r\n        uint256 fedEthBlock,\r\n        string calldata federatorVersion,\r\n        string calldata nodeRskInfo,\r\n        string calldata nodeEthInfo\r\n    ) external onlyMember {\r\n        emit HeartBeat(\r\n            _msgSender(),\r\n            fedRskBlock,\r\n            fedEthBlock,\r\n            federatorVersion,\r\n            nodeRskInfo,\r\n            nodeEthInfo\r\n        );\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fedRskBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fedEthBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"federatorVersion\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeRskInfo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeEthInfo\",\"type\":\"string\"}],\"name\":\"HeartBeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"federator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MEMBER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fedRskBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fedEthBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"federatorVersion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nodeRskInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nodeEthInfo\",\"type\":\"string\"}],\"name\":\"emitHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"name\":\"getTransactionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"transactionWasProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"name\":\"voteTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Federation", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://64396bf3add04ece115af68e21c3f381deaf2018cc3953e6de3181589882a932"}]}