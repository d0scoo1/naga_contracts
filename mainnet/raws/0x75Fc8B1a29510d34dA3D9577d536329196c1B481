{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n}\\n\"},\"Decomposer.sol\":{\"content\":\"pragma solidity ^0.5.0;\\nimport \\\"./Folia.sol\\\";\\n\\n/*\\n....................................................................................\\n....................................................................................\\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n====================================================================================\\n====================================================================================\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n      XX       XX      XX      XX   XXXX   X      XXX      XX       X       X      X\\n  XXX  X  XXXXXX  XXXXXX  XXXX  X    XX    X  XXX  X  XXXX  X  XXXXXX  XXXXXX  XXX  \\n  XXX  X     XXX  XXXXXX  XXXX  X  X    X  X      XX  XXXX  X       X     XXX      X \\n  XXX  X  XXXXXX  XXXXXX  XXXX  X  XX  XX  X  XXXXXX  XXXX  XXXXXX  X  XXXXXX  XXX  \\n      XX       XX      XX      XX  XXXXXX  X  XXXXXXX      XX       X       X  XXX  \\n\\n      \\n          \\nBy Oliver Laric\\nProduced by Folia.app\\n*/\\n\\ncontract Decomposer is Folia {\\n    constructor(address _metadata) public Folia(\\\"Decomposer\\\", \\\"DCMP\\\", _metadata){}\\n}\\n\"},\"DecomposerController.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n/**\\n * The FoliaControllerV2 is an upgradeable endpoint for controlling Folia.sol\\n */\\n\\nimport \\\"./Decomposer.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC165.sol\\\";\\n\\ninterface Punk {\\n      function punkIndexToAddress(uint256 tokenId) external view returns (address owner);\\n     // mapping (uint =\\u003e address) public punkIndexToAddress;\\n}\\n\\ncontract DecomposerController is Ownable, ReentrancyGuard {\\n\\n    using SafeMath for uint256;\\n\\n    event newContract(address contractAddress, uint256 maxEditions, cT contractType);\\n    event deletedContract(address contractAddress);\\n    event editionBought(address contractAddress, uint256 tokenId, uint256 newTokenId);\\n    uint256 public price = 8 * (10**16); // 0.08 Eth\\n    uint256 public totalMax = 888;\\n    mapping(address =\\u003e uint256) public editionsLeft;\\n\\n    Decomposer public decomposer;\\n\\n    uint256 public adminSplit = 20;\\n    address payable public adminWallet;\\n    address payable public artistWallet;\\n    bool public paused;\\n\\n    modifier notPaused() {\\n        require(!paused, \\\"Must not be paused\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        Decomposer _decomposer,\\n        address payable _adminWallet\\n    ) public {\\n        decomposer = _decomposer;\\n        adminWallet = _adminWallet;\\n        uint256 _maxEditions = 88;\\n\\n        addContract(0xB77F0b25aF126FCE0ea41e5696F1E5e9102E1D77, _maxEditions, uint8(cT.ERC721)); // 3Words\\n        addContract(0x123b30E25973FeCd8354dd5f41Cc45A3065eF88C, _maxEditions, uint8(cT.ERC721)); // Alien Frens\\n        addContract(0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270, _maxEditions, uint8(cT.ERC721)); // Apparitions by Aaron Penne\\n        addContract(0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270, _maxEditions, uint8(cT.ERC721)); // Archetype by Kjetil Golid\\n        addContract(0x842D8B7B08C154ADc36A4f1186A0f401a10518EA, _maxEditions, uint8(cT.ERC721)); // Autobreeder (lite) by Harm van den Dorpel \\n        addContract(0xDFAcD840f462C27b0127FC76b63e7925bEd0F9D5, _maxEditions, uint8(cT.ERC721)); // Avid Lines\\n        addContract(0xED5AF388653567Af2F388E6224dC7C4b3241C544, _maxEditions, uint8(cT.ERC721)); // Azuki\\n        addContract(0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63, _maxEditions, uint8(cT.ERC721)); // Blitmap\\n        addContract(0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623, _maxEditions, uint8(cT.ERC721)); // Bored Ape Kennel Club\\n        addContract(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D, _maxEditions, uint8(cT.ERC721)); // Bored Ape Yacht Club\\n        addContract(0xfcB1315C4273954F74Cb16D5b663DBF479EEC62e, _maxEditions, uint8(cT.ERC721)); // Capsule House\\n        addContract(0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a, _maxEditions, uint8(cT.ERC721)); // Chromie Squiggle by Snowfro\\n        addContract(0x91Fba69Ce5071Cf9e828999a0F6006A7F7E2a959, _maxEditions, uint8(cT.ERC721)); // CLASSIFIED | Holly Herndon\\n        addContract(0x49cF6f5d44E70224e2E23fDcdd2C053F30aDA28B, _maxEditions, uint8(cT.ERC721)); // CLONE X - X TAKASHI MURAKAMI\\n        addContract(0x1A92f7381B9F03921564a437210bB9396471050C, _maxEditions, uint8(cT.ERC721)); // Cool Cats NFT\\n        addContract(0xc92cedDfb8dd984A89fb494c376f9A48b999aAFc, _maxEditions, uint8(cT.ERC721)); // Creature World\\n        addContract(0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6, _maxEditions, uint8(cT.ERC721)); // CrypToadz by GREMPLIN\\n        addContract(0xBACe7E22f06554339911A03B8e0aE28203Da9598, _maxEditions, uint8(cT.ERC721exception)); // CryptoArte\\n        addContract(0xF7a6E15dfD5cdD9ef12711Bd757a9b6021ABf643, _maxEditions, uint8(cT.ERC721exception)); // CryptoBots\\n        addContract(0x1981CC36b59cffdd24B01CC5d698daa75e367e04, _maxEditions, uint8(cT.ERC721)); // Crypto.Chicks\\n        addContract(0x5180db8F5c931aaE63c74266b211F580155ecac8, _maxEditions, uint8(cT.ERC721)); // Crypto Coven\\n        addContract(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d, _maxEditions, uint8(cT.ERC721exception)); // CryptoKitties\\n        addContract(0x57a204AA1042f6E66DD7730813f4024114d74f37, _maxEditions, uint8(cT.ERC721)); // CyberKongz\\n        addContract(0xc1Caf0C19A8AC28c41Fe59bA6c754e4b9bd54dE9, _maxEditions, uint8(cT.ERC721)); // CryptoSkulls\\n        addContract(0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d, _maxEditions, uint8(cT.ERC721)); // Decentraland\\n        addContract(0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e, _maxEditions, uint8(cT.ERC721)); // Doodles\\n        addContract(0x6CA044FB1cD505c1dB4eF7332e73a236aD6cb71C, _maxEditions, uint8(cT.ERC721)); // DotCom Seance\\n        addContract(0x4721D66937B16274faC603509E9D61C5372Ff220, _maxEditions, uint8(cT.ERC721)); // Fast Food Frens Collection\\n        addContract(0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270, _maxEditions, uint8(cT.ERC721)); // Fidenza by Tyler Hobbs\\n        addContract(0x90cfCE78f5ED32f9490fd265D16c77a8b5320Bd4, _maxEditions, uint8(cT.ERC721)); // FOMO Dog Club\\n        addContract(0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270, _maxEditions, uint8(cT.ERC721)); // Fragments of an Infinite Field by Monica Rizzolli\\n        addContract(0xC2C747E0F7004F9E8817Db2ca4997657a7746928, _maxEditions, uint8(cT.ERC721)); // Hashmasks\\n        addContract(0x0c2E57EFddbA8c768147D1fdF9176a0A6EBd5d83, _maxEditions, uint8(cT.ERC721)); // Kaiju Kingz\\n        addContract(0x9d413B9434c20C73f509505F7fbC6FC591bbf04A, _maxEditions, uint8(cT.ERC721)); // Kudzu\\n        addContract(0x8943C7bAC1914C9A7ABa750Bf2B6B09Fd21037E0, _maxEditions, uint8(cT.ERC721)); // Lazy Lions\\n        addContract(0x026224A2940bFE258D0dbE947919B62fE321F042, _maxEditions, uint8(cT.ERC721)); // lobsterdao\\n        addContract(0x4b3406a41399c7FD2BA65cbC93697Ad9E7eA61e5, _maxEditions, uint8(cT.ERC721)); // LOSTPOETS\\n        addContract(0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7, _maxEditions, uint8(cT.ERC721)); // Meebits\\n        addContract(0xF7143Ba42d40EAeB49b88DaC0067e54Af042E963, _maxEditions, uint8(cT.ERC721)); // Metasaurs by Dr. DMT\\n        addContract(0xc3f733ca98E0daD0386979Eb96fb1722A1A05E69, _maxEditions, uint8(cT.ERC721)); // MoonCats\\n        addContract(0x60E4d786628Fea6478F785A6d7e704777c86a7c6, _maxEditions, uint8(cT.ERC721)); // Mutant Ape Yacht Club\\n        addContract(0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03, _maxEditions, uint8(cT.ERC721)); // Nouns\\n        addContract(0x4f89Cd0CAE1e54D98db6a80150a824a533502EEa, _maxEditions, uint8(cT.ERC721)); // PEACEFUL GROUPIES\\n        addContract(0x67D9417C9C3c250f61A83C7e8658daC487B56B09, _maxEditions, uint8(cT.ERC721)); // PhantaBear\\n        addContract(0x050dc61dFB867E0fE3Cf2948362b6c0F3fAF790b, _maxEditions, uint8(cT.ERC721)); // PixelMap\\n        addContract(0xBd3531dA5CF5857e7CfAA92426877b022e612cf8, _maxEditions, uint8(cT.ERC721)); // Pudgy Penguins\\n        addContract(0x51Ae5e2533854495f6c587865Af64119db8F59b4, _maxEditions, uint8(cT.ERC721)); // PunkScapes\\n        addContract(0x29b7315fc83172CFcb45c2Fb415E91A265fb73f2, _maxEditions, uint8(cT.ERC721)); // Realiti\\n        addContract(0x8CD3cEA52a45f30Ed7c93a63FB2b5C13B453d5A1, _maxEditions, uint8(cT.ERC721)); // Rebel Society\\n        addContract(0x3Fe1a4c1481c8351E91B64D5c398b159dE07cbc5, _maxEditions, uint8(cT.ERC721)); // SupDucks\\n        addContract(0xF4ee95274741437636e748DdAc70818B4ED7d043, _maxEditions, uint8(cT.ERC721)); // The Doge Pound\\n        addContract(0x5CC5B05a8A13E3fBDB0BB9FcCd98D38e50F90c38, _maxEditions, uint8(cT.ERC721)); // The Sandbox\\n        addContract(0x11450058d796B02EB53e65374be59cFf65d3FE7f, _maxEditions, uint8(cT.ERC721)); // THE SHIBOSHIS\\n        addContract(0x7f7685b4CC34BD19E2B712D8a89f34D219E76c35, _maxEditions, uint8(cT.ERC721)); // WomenRise\\n        addContract(0xe785E82358879F061BC3dcAC6f0444462D4b5330, _maxEditions, uint8(cT.ERC721)); // World of Women\\n        addContract(0xB67812ce508b9fC190740871032237C24b6896A0, _maxEditions, uint8(cT.ERC721)); // WoW Pixies Official\\n        addContract(0xd0e7Bc3F1EFc5f098534Bce73589835b8273b9a0, _maxEditions, uint8(cT.ERC721)); // Wrapped CryptoCats Official\\n        addContract(0x6f9d53BA6c16fcBE66695E860e72a92581b58Aed, _maxEditions, uint8(cT.ERC721)); // Wrapped Pixereum\\n        \\n        // // rinkeby\\n        // addContract(0xF80B749e0d03C005b8EfB7451BC6552555556149, _maxEditions, uint8(cT.ERC721)); // Kudzu\\n\\n        // folia\\n        addContract(0xDCe09254dD3592381b6A5b7a848B29890b656e01, _maxEditions, uint8(cT.Folia)); // Emoji Script by Travess Smalley (work 2)\\n        // rinkeby\\n        // addContract(0x95793c65c398D0a5EEb92d6b475f4E6a2044Bee1, _maxEditions, uint8(cT.ERC721)); // Emoji Script by Travess Smalley (work 2)\\n\\n        // non-standard\\n        addContract(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB, _maxEditions, uint8(cT.Punk)); // CryptoPunks\\n        // //rinkeby\\n        // addContract(0x999426cb37bb8Ea786d3E24F6094004fad686f70, _maxEditions, uint8(cT.Punk)); // rinkeby CryptoPunks\\n    }\\n\\n    enum cT {ERC721, Punk, Folia, ERC721exception}\\n    struct ContractInfo {\\n      cT _cT;\\n      uint256 editionsLeft;\\n    }\\n    mapping(address =\\u003e ContractInfo) public aC;\\n\\n    // can be re-used as an \\\"updateContractEditionSize\\\"\\n    function addContract(address contractAddress, uint256 maxEditions, uint8 _cT ) public onlyOwner {\\n      \\n      if (_cT == uint8(cT.ERC721)) {\\n        require(IERC165(contractAddress).supportsInterface(0x80ac58cd), \\\"Not an ERC721\\\");\\n      } else {\\n        require(_cT == uint8(cT.Punk) || _cT == uint8(cT.Folia) || _cT == uint8(cT.ERC721exception), \\\"Unknown contractType\\\");\\n      }\\n\\n      aC[contractAddress]._cT = cT(_cT);\\n      aC[contractAddress].editionsLeft = maxEditions;\\n      emit newContract(contractAddress, maxEditions, cT(_cT));\\n    }\\n    \\n    function removeContract(address contractAddress) public onlyOwner {\\n      delete aC[contractAddress];\\n      emit deletedContract(contractAddress);\\n    }\\n\\n    function updateArtworkPrice(uint256 _price) public onlyOwner {\\n      price = _price;\\n    }\\n\\n    function updateArtistWallet(address payable _artistWallet) public onlyOwner {\\n      artistWallet = _artistWallet;\\n    }\\n\\n    function updateTotalMax(uint256 _totalMax) public onlyOwner {\\n      totalMax = _totalMax;\\n    }\\n\\n    function buy(address recipient, address contractAddress, uint256 tokenId) public payable notPaused nonReentrant returns(bool) {\\n        require(aC[contractAddress].editionsLeft != 0, \\\"Wrong Contract or No Editions Left\\\");\\n        aC[contractAddress].editionsLeft -= 1;\\n\\n        require(msg.value == price, \\\"Wrong price paid\\\");\\n\\n        if (aC[contractAddress]._cT == cT.Punk) {\\n          require(Punk(contractAddress).punkIndexToAddress(tokenId) == msg.sender, \\\"Can\\u0027t mint a token you don\\u0027t own\\\");\\n        } else if (aC[contractAddress]._cT == cT.ERC721 || aC[contractAddress]._cT == cT.ERC721exception) {\\n          require(IERC721(contractAddress).ownerOf(tokenId) == msg.sender, \\\"Can\\u0027t mint a token you don\\u0027t own\\\");\\n        } else if (aC[contractAddress]._cT == cT.Folia) {\\n          //mainnet\\n          require(tokenId \\u003e= 2000000 \\u0026\\u0026 tokenId \\u003c= 2000500, \\\"Can\\u0027t mint this Folia token\\\");\\n\\n          // rinkeby\\n          // require(tokenId \\u003e= 13000000 \\u0026\\u0026 tokenId \\u003c= 2000058, \\\"Can\\u0027t mint this Folia token\\\");\\n          require(IERC721(contractAddress).ownerOf(tokenId) == msg.sender, \\\"Can\\u0027t mint a token you don\\u0027t own\\\");\\n        }\\n\\n        uint256 newTokenId = uint256(keccak256(abi.encodePacked(contractAddress, tokenId)));\\n        decomposer.mint(recipient, newTokenId);\\n\\n        uint256 adminReceives = msg.value.mul(adminSplit).div(100);\\n        uint256 artistReceives = msg.value.sub(adminReceives);\\n\\n        (bool success, ) = adminWallet.call.value(adminReceives)(\\\"\\\");\\n        require(success, \\\"admin failed to receive\\\");\\n\\n        (success, ) = artistWallet.call.value(artistReceives)(\\\"\\\");\\n        require(success, \\\"artist failed to receive\\\");\\n\\n        emit editionBought(contractAddress, tokenId, newTokenId);\\n    }\\n\\n    function updateAdminSplit(uint256 _adminSplit) public onlyOwner {\\n        require(_adminSplit \\u003c= 100, \\\"SPLIT_MUST_BE_LTE_100\\\");\\n        adminSplit = _adminSplit;\\n    }\\n\\n    function updateAdminWallet(address payable _adminWallet) public onlyOwner {\\n        adminWallet = _adminWallet;\\n    }\\n\\n    function updatePaused(bool _paused) public onlyOwner {\\n        paused = _paused;\\n    }\\n}\\n\"},\"DecomposerMetadata.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n/**\\n* Metadata contract is upgradeable and returns metadata about Token\\n*/\\n\\nimport \\\"./Metadata.sol\\\";\\n\\ncontract DecomposerMetadata is Metadata {\\n    function tokenURI(uint _tokenId) public pure returns (string memory _infoUrl) {\\n        string memory base = \\\"https://decomposer.folia.app/v1/metadata/\\\";\\n        string memory id = uint2str(_tokenId);\\n        return base.toSlice().concat(id.toSlice());\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title ERC165\\n * @author Matt Condon (@shrugs)\\n * @dev Implements ERC165 using a lookup table.\\n */\\ncontract ERC165 is IERC165 {\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    /**\\n     * 0x01ffc9a7 ===\\n     *     bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027))\\n     */\\n\\n    /**\\n     * @dev a mapping of interface id to whether or not it\\u0027s supported\\n     */\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev A contract implementing SupportsInterfaceWithLookup\\n     * implement ERC165 itself\\n     */\\n    constructor () internal {\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev implement supportsInterface(bytes4) using a lookup table\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev internal method for registering an interface\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff);\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract ERC721 is ERC165, IERC721 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from token ID to owner\\n    mapping (uint256 =\\u003e address) private _tokenOwner;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to number of owned token\\n    mapping (address =\\u003e uint256) private _ownedTokensCount;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private _operatorApprovals;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    /*\\n     * 0x80ac58cd ===\\n     *     bytes4(keccak256(\\u0027balanceOf(address)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027ownerOf(uint256)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027approve(address,uint256)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027getApproved(uint256)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027transferFrom(address,address,uint256)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,bytes)\\u0027))\\n     */\\n\\n    constructor () public {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address\\n     * @param owner address to query the balance of\\n     * @return uint256 representing the amount owned by the passed address\\n     */\\n    function balanceOf(address owner) public view returns (uint256) {\\n        require(owner != address(0));\\n        return _ownedTokensCount[owner];\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return owner address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address owner = _tokenOwner[tokenId];\\n        require(owner != address(0));\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Approves another address to transfer the given token ID\\n     * The zero address indicates there is no approved address.\\n     * There can only be one approved address per token at a given time.\\n     * Can only be called by the token owner or an approved operator.\\n     * @param to address to be approved for the given token ID\\n     * @param tokenId uint256 ID of the token to be approved\\n     */\\n    function approve(address to, uint256 tokenId) public {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner);\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the approved address for a token ID, or zero if no address set\\n     * Reverts if the token ID does not exist.\\n     * @param tokenId uint256 ID of the token to query the approval of\\n     * @return address currently approved for the given token ID\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        require(_exists(tokenId));\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets or unsets the approval of a given operator\\n     * An operator is allowed to transfer all tokens of the sender on their behalf\\n     * @param to operator address to set the approval\\n     * @param approved representing the status of the approval to be set\\n     */\\n    function setApprovalForAll(address to, bool approved) public {\\n        require(to != msg.sender);\\n        _operatorApprovals[msg.sender][to] = approved;\\n        emit ApprovalForAll(msg.sender, to, approved);\\n    }\\n\\n    /**\\n     * @dev Tells whether an operator is approved by a given owner\\n     * @param owner owner address which you want to query the approval of\\n     * @param operator operator address which you want to query the approval of\\n     * @return bool whether the given operator is approved by the given owner\\n     */\\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Transfers the ownership of a given token ID to another address\\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\\n     * Requires the msg sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\n        require(_isApprovedOrOwner(msg.sender, tokenId));\\n\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     *\\n     * Requires the msg sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\\n        transferFrom(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data));\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists\\n     * @param tokenId uint256 ID of the token to query the existence of\\n     * @return whether the token exists\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        address owner = _tokenOwner[tokenId];\\n        return owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token\\n     * Reverts if the given token ID already exists\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        require(to != address(0));\\n        require(!_exists(tokenId));\\n\\n        _tokenOwner[tokenId] = to;\\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token\\n     * Reverts if the token does not exist\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == owner);\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\\n        _tokenOwner[tokenId] = address(0);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token\\n     * Reverts if the token does not exist\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        _burn(ownerOf(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == from);\\n        require(to != address(0));\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\\n\\n        _tokenOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke `onERC721Received` on a target address\\n     * The call is not executed if the target address is not a contract\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Private function to clear current approval of a given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        if (_tokenApprovals[tokenId] != address(0)) {\\n            _tokenApprovals[tokenId] = address(0);\\n        }\\n    }\\n}\\n\"},\"ERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address =\\u003e uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n    /**\\n     * 0x780e9d63 ===\\n     *     bytes4(keccak256(\\u0027totalSupply()\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027tokenOfOwnerByIndex(address,uint256)\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027tokenByIndex(uint256)\\u0027))\\n     */\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor () public {\\n        // register the supported interface to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner\\n     * @param owner address owning the tokens list to be accessed\\n     * @param index uint256 representing the index to be accessed of the requested tokens list\\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\n        require(index \\u003c balanceOf(owner));\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of tokens stored by the contract\\n     * @return uint256 representing the total amount of tokens\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of all the tokens in this contract\\n     * Reverts if the index is greater or equal to the total number of tokens\\n     * @param index uint256 representing the index to be accessed of the tokens list\\n     * @return uint256 token ID at the given index of the tokens list\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        require(index \\u003c totalSupply());\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        super._transferFrom(from, to, tokenId);\\n\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token\\n     * Reverts if the given token ID already exists\\n     * @param to address the beneficiary that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        super._mint(to, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n\\n        _addTokenToAllTokensEnumeration(tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token\\n     * Reverts if the token does not exist\\n     * Deprecated, use _burn(uint256) instead\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        super._burn(owner, tokenId);\\n\\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\\n        _ownedTokensIndex[tokenId] = 0;\\n\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the list of token IDs of the requested owner\\n     * @param owner address owning the tokens\\n     * @return uint256[] List of token IDs owned by the requested address\\n     */\\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\\n        return _ownedTokens[owner];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        _ownedTokens[from].length--;\\n\\n        // Note that _ownedTokensIndex[tokenId] hasn\\u0027t been cleared: it still points to the old slot (now occcupied by\\n        // lasTokenId, or just over the end of the array if the token was the last one).\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n\\n        // This also deletes the contents at the last position of the array\\n        _allTokens.length--;\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n}\\n\"},\"ERC721Full.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC721Enumerable.sol\\\";\\nimport \\\"./ERC721Metadata.sol\\\";\\n\\n/**\\n * @title Full ERC721 Token\\n * This implementation includes all the required and some optional functionality of the ERC721 standard\\n * Moreover, it includes approve all functionality using operator terminology\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"},\"ERC721Metadata.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    /**\\n     * 0x5b5e139f ===\\n     *     bytes4(keccak256(\\u0027name()\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027symbol()\\u0027)) ^\\n     *     bytes4(keccak256(\\u0027tokenURI(uint256)\\u0027))\\n     */\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    }\\n\\n    /**\\n     * @dev Gets the token name\\n     * @return string representing the token name\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Gets the token symbol\\n     * @return string representing the token symbol\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns an URI for a given token ID\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId));\\n        return _tokenURIs[tokenId];\\n    }\\n\\n    /**\\n     * @dev Internal function to set the token URI for a given token\\n     * Reverts if the token ID does not exist\\n     * @param tokenId uint256 ID of the token to set its URI\\n     * @param uri string URI to assign\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\\n        require(_exists(tokenId));\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token\\n     * Reverts if the token does not exist\\n     * Deprecated, use _burn(uint256) instead\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        super._burn(owner, tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"},\"Folia.sol\":{\"content\":\"pragma solidity ^0.5.0;\\nimport \\\"./ERC721Full.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./Metadata.sol\\\";\\n\\n\\n\\n/**\\n * The Token contract does this and that...\\n */\\ncontract Folia is ERC721Full, Ownable {\\n    using Roles for Roles.Role;\\n    Roles.Role private _admins;\\n    uint8 admins;\\n\\n    address public metadata;\\n    address public controller;\\n\\n    modifier onlyAdminOrController() {\\n        require((_admins.has(msg.sender) || msg.sender == controller), \\\"DOES_NOT_HAVE_ADMIN_OR_CONTROLLER_ROLE\\\");\\n        _;\\n    }\\n\\n    constructor(string memory name, string memory symbol, address _metadata) public ERC721Full(name, symbol) {\\n        metadata = _metadata;\\n        _admins.add(msg.sender);\\n        admins += 1;\\n    }\\n\\n    function mint(address recepient, uint256 tokenId) public onlyAdminOrController {\\n        _mint(recepient, tokenId);\\n    }\\n    function burn(uint256 tokenId) public onlyAdminOrController {\\n        _burn(ownerOf(tokenId), tokenId);\\n    }\\n    function updateMetadata(address _metadata) public onlyAdminOrController {\\n        metadata = _metadata;\\n    }\\n    function updateController(address _controller) public onlyAdminOrController {\\n        controller = _controller;\\n    }\\n\\n    function addAdmin(address _admin) public onlyOwner {\\n        _admins.add(_admin);\\n        admins += 1;\\n    }\\n    function removeAdmin(address _admin) public onlyOwner {\\n        require(admins \\u003e 1, \\\"CANT_REMOVE_LAST_ADMIN\\\");\\n        _admins.remove(_admin);\\n        admins -= 1;\\n    }\\n\\n    function tokenURI(uint _tokenId) external view returns (string memory _infoUrl) {\\n        return Metadata(metadata).tokenURI(_tokenId);\\n    }\\n\\n    /**\\n    * @dev Moves Eth to a certain address for use in the FoliaController\\n    * @param _to The address to receive the Eth.\\n    * @param _amount The amount of Eth to be transferred.\\n    */\\n    function moveEth(address payable _to, uint256 _amount) public onlyAdminOrController {\\n        require(_amount \\u003c= address(this).balance);\\n        _to.transfer(_amount);\\n    }\\n    /**\\n    * @dev Moves Token to a certain address for use in the FoliaController\\n    * @param _to The address to receive the Token.\\n    * @param _amount The amount of Token to be transferred.\\n    * @param _token The address of the Token to be transferred.\\n    */\\n    function moveToken(address _to, uint256 _amount, address _token) public onlyAdminOrController returns (bool) {\\n        require(_amount \\u003c= IERC20(_token).balanceOf(address(this)));\\n        return IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n}\\n\"},\"IERC165.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title IERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function balanceOf(address owner) public view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) public;\\n    function getApproved(uint256 tokenId) public view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract IERC721Enumerable is IERC721 {\\n    function totalSupply() public view returns (uint256);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) public view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ncontract IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a `safeTransfer`. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n    public returns (bytes4);\\n}\\n\"},\"Metadata.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n/**\\n* Metadata contract is upgradeable and returns metadata about Token\\n*/\\n\\nimport \\\"./strings.sol\\\";\\n\\ncontract Metadata {\\n    using strings for *;\\n\\n    function tokenURI(uint _tokenId) public pure returns (string memory _infoUrl) {\\n        string memory base = \\\"https://folia.app/v1/metadata/\\\";\\n        string memory id = uint2str(_tokenId);\\n        return base.toSlice().concat(id.toSlice());\\n    }\\n    function uint2str(uint i) internal pure returns (string memory) {\\n        if (i == 0) return \\\"0\\\";\\n        uint j = i;\\n        uint length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(length);\\n        uint k = length - 1;\\n        while (i != 0) {\\n            uint _uint = 48 + i % 10;\\n            bstr[k--] = toBytes(_uint)[31];\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n    function toBytes(uint256 x) public pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Helps contracts guard against reentrancy attacks.\\n * @author Remco Bloemen \\u003cremco@2\u03c0.com\\u003e, Eenae \\u003calexey@mixbytes.io\\u003e\\n * @dev If you mark a function `nonReentrant`, you should also\\n * mark it `external`.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    constructor () internal {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter);\\n    }\\n}\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev give an account access to this role\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(account != address(0));\\n        require(!has(role, account));\\n\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev remove an account\\u0027s access to this role\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(account != address(0));\\n        require(has(role, account));\\n\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev check if an account has this role\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0));\\n        return role.bearer[account];\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\"},\"strings.sol\":{\"content\":\"/*\\n * @title String \\u0026 slice utility library for Solidity contracts.\\n * @author Nick Johnson \\u003carachnid@notdot.net\\u003e\\n */\\n\\npragma solidity ^0.5.0;\\n\\nlibrary strings {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len \\u003e= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns a newly allocated string containing the concatenation of\\n     *      `self` and `other`.\\n     * @param self The first slice to concatenate.\\n     * @param other The second slice to concatenate.\\n     * @return The concatenation of the two strings.\\n     */\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\n        string memory ret = new string(self._len + other._len);\\n        uint retptr;\\n        assembly {\\n            retptr := add(ret, 32)\\n        }\\n        memcpy(retptr, self._ptr, self._len);\\n        memcpy(retptr + self._len, other._ptr, other._len);\\n        return ret;\\n    }\\n}\\n\"}}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"updatePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminSplit\",\"type\":\"uint256\"}],\"name\":\"updateAdminSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminWallet\",\"type\":\"address\"}],\"name\":\"updateAdminWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalMax\",\"type\":\"uint256\"}],\"name\":\"updateTotalMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"editionsLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"maxEditions\",\"type\":\"uint256\"},{\"name\":\"_cT\",\"type\":\"uint8\"}],\"name\":\"addContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateArtworkPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artistWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decomposer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"aC\",\"outputs\":[{\"name\":\"_cT\",\"type\":\"uint8\"},{\"name\":\"editionsLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artistWallet\",\"type\":\"address\"}],\"name\":\"updateArtistWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_decomposer\",\"type\":\"address\"},{\"name\":\"_adminWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maxEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"newContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"deletedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"editionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "DecomposerController", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "2000000", "ConstructorArguments": "000000000000000000000000c50161e1f4015a4f4b91cf98b996b7001ceaccf00000000000000000000000002f5866d7215416fa60bedf532856736cd9a76acf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a2d7868d3ae9cfbab01539b9504e74d09413cd1ef09cd8c3d4129ca7d3839703"}]}