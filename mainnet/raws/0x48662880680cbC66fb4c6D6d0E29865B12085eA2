{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.13;\r\n\r\ncontract Prover {\r\n    // attach library\r\n    using Sets for *;\r\n\r\n\r\n    // storage vars\r\n    address owner;\r\n    Sets.addressSet internal users;\r\n    mapping (address => UserAccount) internal ledger;\r\n    \r\n    \r\n    // structs\r\n    struct UserAccount {\r\n        Sets.bytes32Set hashes;\r\n        mapping (bytes32 => Entry) entries;\r\n    }\r\n\r\n    struct Entry {\r\n        uint256 time;\r\n        uint256 value;\r\n    }\r\n\r\n\r\n    // constructor\r\n    function Prover() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    // fallback: unmatched transactions will be returned\r\n    function () {\r\n        revert();\r\n    }\r\n\r\n\r\n    // modifier to check if sender has an account\r\n    modifier hasAccount() {\r\n        assert(ledger[msg.sender].hashes.length() >= 1);\r\n        _;\r\n    }\r\n\r\n\r\n    // external functions\r\n    // proving\r\n    function proveIt(address target, bytes32 dataHash) external constant\r\n        returns (bool proved, uint256 time, uint256 value)\r\n    {\r\n        return status(target, dataHash);\r\n    }\r\n\r\n    function proveIt(address target, string dataString) external constant\r\n        returns (bool proved, uint256 time, uint256 value)\r\n    {\r\n        return status(target, sha3(dataString));\r\n    }\r\n    \r\n    // allow access to our structs via functions with convenient return values\r\n    function usersGetter() public constant\r\n        returns (uint256 number_unique_addresses, address[] unique_addresses)\r\n    {\r\n        return (users.length(), users.members);\r\n    }\r\n\r\n    function userEntries(address target) external constant returns (bytes32[]) {\r\n        return ledger[target].hashes.members;\r\n    }\r\n    \r\n    \r\n    // public functions\r\n    // adding entries\r\n    function addEntry(bytes32 dataHash) payable {\r\n        _addEntry(dataHash);\r\n    }\r\n\r\n    function addEntry(string dataString) payable {\r\n        _addEntry(sha3(dataString));\r\n    }\r\n\r\n    // deleting entries\r\n    function deleteEntry(bytes32 dataHash) hasAccount {\r\n        _deleteEntry(dataHash);\r\n    }\r\n\r\n    function deleteEntry(string dataString) hasAccount {\r\n        _deleteEntry(sha3(dataString));\r\n    }\r\n    \r\n    // allow owner to delete contract if no accounts exist\r\n    function selfDestruct() {\r\n        if ((msg.sender == owner) && (users.length() == 0)) {\r\n            selfdestruct(owner);\r\n        }\r\n    }\r\n\r\n\r\n    // internal functions\r\n    function _addEntry(bytes32 dataHash) internal {\r\n        // ensure the entry doesn't exist\r\n        assert(!ledger[msg.sender].hashes.contains(dataHash));\r\n        // update UserAccount (hashes then entries)\r\n        ledger[msg.sender].hashes.insert(dataHash);\r\n        ledger[msg.sender].entries[dataHash] = Entry(now, msg.value);\r\n        // add sender to userlist\r\n        users.insert(msg.sender);\r\n    }\r\n\r\n    function _deleteEntry(bytes32 dataHash) internal {\r\n        // ensure the entry does exist\r\n        assert(ledger[msg.sender].hashes.contains(dataHash));\r\n        uint256 rebate = ledger[msg.sender].entries[dataHash].value;\r\n        // update UserAccount (hashes then entries)\r\n        ledger[msg.sender].hashes.remove(dataHash);\r\n        delete ledger[msg.sender].entries[dataHash];\r\n        // send the rebate\r\n        if (rebate > 0) {\r\n            msg.sender.transfer(rebate);\r\n        }\r\n        // delete from userlist if this was the user's last entry\r\n        if (ledger[msg.sender].hashes.length() == 0) {\r\n            users.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    // return status of arbitrary address and dataHash\r\n    function status(address target, bytes32 dataHash) internal constant\r\n        returns (bool proved, uint256 time, uint256 value)\r\n    {\r\n        return (ledger[msg.sender].hashes.contains(dataHash),\r\n                ledger[target].entries[dataHash].time,\r\n                ledger[target].entries[dataHash].value);\r\n    }\r\n}\r\n\r\n// note: breaks if members.length exceeds 2^256-1 (so, not really a problem)\r\nlibrary Sets {\r\n    // address set\r\n    struct addressSet {\r\n        address[] members;\r\n        mapping (address => bool) memberExists;\r\n        mapping (address => uint) memberIndex;\r\n    }\r\n\r\n    function insert(addressSet storage self, address other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(addressSet storage self, address other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(addressSet storage self, address other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(addressSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // uint set\r\n    struct uintSet {\r\n        uint[] members;\r\n        mapping (uint => bool) memberExists;\r\n        mapping (uint => uint) memberIndex;\r\n    }\r\n\r\n    function insert(uintSet storage self, uint other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(uintSet storage self, uint other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(uintSet storage self, uint other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(uintSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // uint8 set\r\n    struct uint8Set {\r\n        uint8[] members;\r\n        mapping (uint8 => bool) memberExists;\r\n        mapping (uint8 => uint) memberIndex;\r\n    }\r\n\r\n    function insert(uint8Set storage self, uint8 other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(uint8Set storage self, uint8 other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(uint8Set storage self, uint8 other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(uint8Set storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // int set\r\n    struct intSet {\r\n        int[] members;\r\n        mapping (int => bool) memberExists;\r\n        mapping (int => uint) memberIndex;\r\n    }\r\n\r\n    function insert(intSet storage self, int other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(intSet storage self, int other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(intSet storage self, int other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(intSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // int8 set\r\n    struct int8Set {\r\n        int8[] members;\r\n        mapping (int8 => bool) memberExists;\r\n        mapping (int8 => uint) memberIndex;\r\n    }\r\n\r\n    function insert(int8Set storage self, int8 other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(int8Set storage self, int8 other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(int8Set storage self, int8 other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(int8Set storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // byte set\r\n    struct byteSet {\r\n        byte[] members;\r\n        mapping (byte => bool) memberExists;\r\n        mapping (byte => uint) memberIndex;\r\n    }\r\n\r\n    function insert(byteSet storage self, byte other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(byteSet storage self, byte other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(byteSet storage self, byte other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(byteSet storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n\r\n\r\n    // bytes32 set\r\n    struct bytes32Set {\r\n        bytes32[] members;\r\n        mapping (bytes32 => bool) memberExists;\r\n        mapping (bytes32 => uint) memberIndex;\r\n    }\r\n\r\n    function insert(bytes32Set storage self, bytes32 other) {\r\n        if (!self.memberExists[other]) {\r\n            self.memberExists[other] = true;\r\n            self.memberIndex[other] = self.members.length;\r\n            self.members.push(other);\r\n        }\r\n    }\r\n\r\n    function remove(bytes32Set storage self, bytes32 other) {\r\n        if (self.memberExists[other])  {\r\n            self.memberExists[other] = false;\r\n            uint index = self.memberIndex[other];\r\n            // change index of last value to index of other \r\n            self.memberIndex[self.members[self.members.length - 1]] = index;\r\n            // copy last value over other and decrement length\r\n            self.members[index] = self.members[self.members.length - 1];\r\n            self.members.length--;\r\n        }\r\n    }\r\n\r\n    function contains(bytes32Set storage self, bytes32 other) returns (bool) {\r\n        return self.memberExists[other];\r\n    }\r\n\r\n    function length(bytes32Set storage self) returns (uint256) {\r\n        return self.members.length;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"dataString\",\"type\":\"string\"}],\"name\":\"deleteEntry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataString\",\"type\":\"string\"}],\"name\":\"addEntry\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"addEntry\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usersGetter\",\"outputs\":[{\"name\":\"number_unique_addresses\",\"type\":\"uint256\"},{\"name\":\"unique_addresses\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"userEntries\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"dataString\",\"type\":\"string\"}],\"name\":\"proveIt\",\"outputs\":[{\"name\":\"proved\",\"type\":\"bool\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"proveIt\",\"outputs\":[{\"name\":\"proved\",\"type\":\"bool\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"deleteEntry\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"}]", "ContractName": "Prover", "CompilerVersion": "v0.4.13+commit.fb4cb1a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "Sets:D71d1864e5eC4c0754e38C5b0353Cf9F883f4c5a", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ef9642b40c971aa44f87e9f4555b76764a8d7b365a10d465c494b131e64bfa60"}]}