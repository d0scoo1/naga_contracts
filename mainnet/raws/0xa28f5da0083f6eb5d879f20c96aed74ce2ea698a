{"status": "1", "message": "OK", "result": [{"SourceCode": "// THE BOY WHO SAVED CRYPTO'S OFFICIAL LINKS:\r\n// https://t.me/sminemtokenerc\r\n// https://www.sminem.capital/\r\n// www.twitter.com/sminemerctoken\r\n\r\n\r\n\r\n// File: contracts/FirstBlockBots.sol\r\n\r\nabstract contract FirstBlockBots {\r\n    mapping(address => bool) public isBot;\r\n    uint256 notBanBlock;\r\n\r\n    function startAntibot() internal {\r\n        notBanBlock = block.number + 1;\r\n    }\r\n\r\n    function isAutoBanBots() public view returns (bool) {\r\n        return block.number < notBanBlock;\r\n    }\r\n\r\n    function trySetBot(address account) internal {\r\n        if (!isAutoBanBots()) return;\r\n        isBot[account] = true;\r\n    }\r\n\r\n    function checkBot(address account) internal view {\r\n        require(!isBot[account], \"bot detected\");\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract ERC20 is IERC20 {\r\n    uint256 internal constant _totalSupply = 1234567890;\r\n    string _name;\r\n    string _symbol;\r\n    uint8 constant _decimals = 0;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply - _balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual;\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount);\r\n        if (currentAllowance < _totalSupply) {\r\n            unchecked {\r\n                _approve(sender, msg.sender, currentAllowance - amount);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n// File: contracts/MaxBuyDynamic.sol\r\n\r\n\r\n\r\nabstract contract MaxBuyDynamic is ERC20 {\r\n    uint256 public maxBuy;\r\n    uint256 constant maxBuyIncrementMinutesTimer = 2; // increment maxbuy minutes\r\n    uint256 constant maxBuyIncrementPercentil = 1; // increment maxbyu percentil 1000=100%\r\n    uint256 public maxBuyIncrementValue; // value for increment maxBuy\r\n    uint256 public incrementTime; // last increment time\r\n\r\n    function startMaxBuyDynamic() internal {\r\n        incrementTime = block.timestamp;\r\n        maxBuyIncrementValue = (_totalSupply * maxBuyIncrementPercentil) / 1000;\r\n    }\r\n\r\n    function checkAndIncrementMaxBuyLimit(uint256 amount) internal {\r\n        // increment maxBuy\r\n        uint256 incrementCount = (block.timestamp - incrementTime) /\r\n            (maxBuyIncrementMinutesTimer * 1 minutes);\r\n        if (incrementCount > 0) {\r\n            if (maxBuy < _totalSupply) {\r\n                unchecked {\r\n                    maxBuy += maxBuyIncrementValue * incrementCount;\r\n                }\r\n            }\r\n            incrementTime = block.timestamp;\r\n        }\r\n        // maxBuy limitation\r\n        require(amount <= maxBuy);\r\n    }\r\n\r\n    function getMaxBuy() external view returns (uint256) {\r\n        uint256 incrementCount = (block.timestamp - incrementTime) /\r\n            (maxBuyIncrementMinutesTimer * 1 minutes);\r\n        if (incrementCount == 0) return maxBuy;\r\n\r\n        return maxBuy + maxBuyIncrementValue * incrementCount;\r\n    }\r\n\r\n    function setMaxBuyPercentil(uint256 percentil) internal {\r\n        maxBuy = (_totalSupply * percentil) / 1000;\r\n    }\r\n}\r\n\r\n// File: contracts/IUniswapV2Router02.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Router02 {\r\n    //function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n// File: contracts/IUniswapV2Factory.sol\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TradableErc20.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract TradableErc20 is MaxBuyDynamic, FirstBlockBots, Ownable {\r\n    IUniswapV2Router02 internal constant _uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public uniswapV2Pair;\r\n    bool public tradingEnable;\r\n    mapping(address => bool) _isExcludedFromFee;\r\n    bool _inSwap;\r\n    mapping(address => uint256) _buyTimes;\r\n    uint256 _sellDelay = 24; // sell delay in hours\r\n    uint256 public tax24HoursPercent = 30;\r\n    uint256 public maxWalletValue;\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_)\r\n        ERC20(name_, symbol_)\r\n    {\r\n        _isExcludedFromFee[address(0)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function makeLiquidity() public onlyOwner {\r\n        require(uniswapV2Pair == address(0));\r\n        address pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        uint256 initialSupply = getSupplyForMakeLiquidity();\r\n        _balances[address(this)] = initialSupply;\r\n        _allowances[address(this)][address(_uniswapV2Router)] = _totalSupply; // approve uniswap router to transfer infinity contract tokens\r\n        _isExcludedFromFee[pair] = true;\r\n        _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            initialSupply,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        uniswapV2Pair = pair;\r\n        tradingEnable = true;\r\n\r\n        startAntibot();\r\n        startMaxBuyDynamic();\r\n        setMaxWalletValuePercentil(10);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        // get start balances\r\n        uint256 startBalanceFrom = _balances[from];\r\n        uint256 startBalanceTo = _balances[to];\r\n        require(startBalanceFrom >= amount, \"not enough token for transfer\");\r\n\r\n        // buy\r\n        if (from == uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n            // trading enable\r\n            require(tradingEnable, \"trading disabled\");\r\n            // max buy limit\r\n            if (!isAutoBanBots()) checkAndIncrementMaxBuyLimit(amount);\r\n            trySetBot(to);\r\n            // calculate fee\r\n            uint256 devFee = amount / 20; // 5% to contract\r\n            uint256 burnFee = amount / 50; // 2% burn\r\n            // transfers\r\n            unchecked {\r\n                _balances[from] = startBalanceFrom - amount;\r\n                _balances[to] = startBalanceTo + amount - devFee - burnFee;\r\n                _balances[address(this)] += devFee;\r\n                _balances[address(0)] += burnFee;\r\n            }\r\n            emit Transfer(from, to, amount);\r\n            emit Transfer(to, address(this), devFee);\r\n            emit Transfer(to, address(0), burnFee);\r\n            // save buy time\r\n            _buyTimes[to] = block.timestamp;\r\n            // max wallet limit\r\n            require(_balances[to] <= maxWalletValue, \"max wallet limit\");\r\n            // transfer end\r\n            return;\r\n        }\r\n\r\n        // sell\r\n        if (!_inSwap && uniswapV2Pair != address(0) && to == uniswapV2Pair) {\r\n            // trading enable\r\n            require(tradingEnable, \"trading disabled\");\r\n            // antibot\r\n            checkBot(from);\r\n            // get start balances\r\n            uint256 contractBalance = _balances[address(this)];\r\n            uint256 zeroBalance = _balances[address(0)];\r\n            // calculate fee\r\n            uint256 devFee = amount / 20; // 5%\r\n            uint256 burnCount = getSellBurnCount(from, amount); // burn count\r\n            // transfer tokens calculations\r\n            uint256 amountTransfered = amount - devFee + burnCount;\r\n            contractBalance += devFee;\r\n            zeroBalance += burnCount;\r\n            // calculate swap contract tokens count\r\n            uint256 swapCount;\r\n            if (contractBalance > 0) {\r\n                // burn contract token surplus\r\n                uint256 maxContractBalance = _balances[uniswapV2Pair] / 25; // 4% max contract balance\r\n                if (contractBalance > maxContractBalance) {\r\n                    uint256 contractBurnCount;\r\n                    unchecked {\r\n                        contractBurnCount =\r\n                            contractBalance -\r\n                            maxContractBalance;\r\n                        contractBalance = maxContractBalance;\r\n                        zeroBalance += contractBurnCount;\r\n                    }\r\n                    emit Transfer(address(this), address(0), contractBurnCount);\r\n                }\r\n                // swap contract tokens count\r\n                swapCount = contractBalance;\r\n                uint256 maxSwapCount = 2 * amountTransfered;\r\n                if (swapCount > maxSwapCount) swapCount = maxSwapCount;\r\n            }\r\n\r\n            // swap contract tokens\r\n            _balances[address(this)] = contractBalance;\r\n            emit Transfer(from, address(this), devFee);\r\n            if (swapCount > 0) swapTokensForEth(swapCount);\r\n\r\n            // transfer tokens write\r\n            unchecked {\r\n                _balances[from] = startBalanceFrom - amount;\r\n                _balances[to] = startBalanceTo + amountTransfered;\r\n                _balances[address(0)] = zeroBalance;\r\n            }\r\n            emit Transfer(from, to, amount);\r\n            emit Transfer(from, address(0), burnCount);\r\n            return;\r\n        }\r\n\r\n        // transfer\r\n        unchecked {\r\n            _balances[from] = startBalanceFrom - amount;\r\n            _balances[to] = startBalanceTo + amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n\r\n        // account limitations\r\n        if (!_isExcludedFromFee[to]) {\r\n            uint256 burnCount = getSellBurnCount(from, amount); // burn count\r\n            _balances[to] -= burnCount;\r\n            _balances[address(0)] += burnCount;\r\n            emit Transfer(to, address(0), burnCount);\r\n            // max wallet limit\r\n            require(_balances[to] <= maxWalletValue, \"max wallet limit\");\r\n        }\r\n    }\r\n\r\n    function getSellBurnCount(address account, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // calculate fee percent\r\n        uint256 buyTime = _buyTimes[account];\r\n        uint256 timeEnd = buyTime + _sellDelay * 1 hours;\r\n        if (block.timestamp >= timeEnd) return amount / 20; // 5%\r\n        uint256 timeLeft = timeEnd - block.timestamp;\r\n        return\r\n            amount /\r\n            20 +\r\n            (amount * tax24HoursPercent * timeLeft) /\r\n            (100 * _sellDelay * 1 hours); // 5% + delay tax\r\n    }\r\n\r\n    function setMaxWalletValuePercentil(uint256 percentil) public onlyOwner {\r\n        maxWalletValue = (_totalSupply * percentil) / 1000;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForETH(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setExcludeFromFee(address[] memory accounts, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            _isExcludedFromFee[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setTradingEnable(bool value) external onlyOwner {\r\n        tradingEnable = value;\r\n    }\r\n\r\n    function setBots(address[] memory accounts, bool value) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            isBot[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function getSupplyForMakeLiquidity() internal virtual returns (uint256);\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\nabstract contract Withdrawable {\r\n    address internal _withdrawAddress;\r\n\r\n    modifier onlyWithdrawer() {\r\n        require(msg.sender == _withdrawAddress);\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyWithdrawer {\r\n        _withdraw();\r\n    }\r\n\r\n    function _withdraw() internal {\r\n        payable(_withdrawAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function setWithdrawAddress(address newWithdrawAddress)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        _withdrawAddress = newWithdrawAddress;\r\n    }\r\n}\r\n\r\n// File: contracts/THE_BOY_WHO_SAVED_CRYPTO.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\ncontract THE_BOY_WHO_SAVED_CRYPTO is TradableErc20, Withdrawable {\r\n    constructor() TradableErc20(\"THE BOY WHO SAVED CRYPTO\", \"SMINEM\") {\r\n        _withdrawAddress = address(0xd9C17345999274A94526339C7B04B0C8900b39C0);\r\n        setMaxBuyPercentil(2);\r\n    }\r\n\r\n    function getSupplyForMakeLiquidity() internal pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function withdrawByOwner() external onlyOwner{\r\n        _withdraw();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellBurnCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoBanBots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyIncrementValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentil\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletValuePercentil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax24HoursPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "THE_BOY_WHO_SAVED_CRYPTO", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90deefe51ff6836494f3c4767bf96157213976b5513ec9180d25c52e285db1ae"}]}