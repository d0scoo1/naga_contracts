{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n\n\n\n\nabstract contract IDFSRegistry {\n \n    function getAddr(bytes4 _id) public view virtual returns (address);\n\n    function addNewContract(\n        bytes32 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public virtual;\n\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n\n    function approveContractChange(bytes32 _id) public virtual;\n\n    function cancelContractChange(bytes32 _id) public virtual;\n\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n}\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance < amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance < value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n}\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 => Entry) public entries;\n    mapping(bytes4 => address) public previousAddresses;\n\n    mapping(bytes4 => address) public pendingAddresses;\n    mapping(bytes4 => uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n\n\n\n\n\ncontract StrategyModel {\n\n    bytes4 constant STRATEGY_STORAGE_ID = bytes4(keccak256(\"StrategyStorage\"));\n    bytes4 constant SUB_STORAGE_ID = bytes4(keccak256(\"SubStorage\"));\n    bytes4 constant BUNDLE_STORAGE_ID = bytes4(keccak256(\"BundleStorage\"));\n        \n    /// @dev Group of strategies bundled together so user can sub to multiple strategies at once\n    /// @param creator Address of the user who created the bundle\n    /// @param strategyIds Array of strategy ids stored in StrategyStorage\n    struct StrategyBundle {\n        address creator;\n        uint64[] strategyIds;\n    }\n\n    /// @dev Template/Class which defines a Strategy\n    /// @param name Name of the strategy useful for logging what strategy is executing\n    /// @param creator Address of the user which created the strategy\n    /// @param triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param continuous If the action is repeated (continuos) or one time\n    struct Strategy {\n        string name;\n        address creator;\n        bytes4[] triggerIds;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n        bool continuous;\n    }\n\n    /// @dev List of actions grouped as a recipe\n    /// @param name Name of the recipe useful for logging what recipe is executing\n    /// @param callData Array of calldata inputs to each action\n    /// @param subData Used only as part of strategy, subData injected from StrategySub.subData\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    struct Recipe {\n        string name;\n        bytes[] callData;\n        bytes32[] subData;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    /// @dev Actual data of the sub we store on-chain\n    /// @dev In order to save on gas we store a keccak256(StrategySub) and verify later on\n    /// @param userProxy Address of the users smart wallet/proxy\n    /// @param isEnabled Toggle if the subscription is active\n    /// @param strategySubHash Hash of the StrategySub data the user inputted\n    struct StoredSubData {\n        bytes20 userProxy; // address but put in bytes20 for gas savings\n        bool isEnabled;\n        bytes32 strategySubHash;\n    }\n\n    /// @dev Instance of a strategy, user supplied data\n    /// @param strategyOrBundleId Id of the strategy or bundle, depending on the isBundle bool\n    /// @param isBundle If true the id points to bundle, if false points directly to strategyId\n    /// @param triggerData User supplied data needed for checking trigger conditions\n    /// @param subData User supplied data used in recipe\n    struct StrategySub {\n        uint64 strategyOrBundleId;\n        bool isBundle;\n        bytes[] triggerData;\n        bytes32[] subData;\n    }\n}\n\n\n\n\n\ncontract BotAuth is AdminAuth {\n    mapping(address => bool) public approvedCallers;\n\n    /// @notice Checks if the caller is approved for the specific subscription\n    /// @dev First param is subId but it's not used in this implementation \n    /// @dev Currently auth callers are approved for all strategies\n    /// @param _caller Address of the caller\n    function isApproved(uint256, address _caller) public view returns (bool) {\n        return approvedCallers[_caller];\n    }\n\n    /// @notice Adds a new bot address which will be able to call executeStrategy()\n    /// @param _caller Bot address\n    function addCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = true;\n    }\n\n    /// @notice Removes a bot address so it can't call executeStrategy()\n    /// @param _caller Bot address\n    function removeCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = false;\n    }\n}\n\n\n\n\n\nabstract contract IDSProxy {\n    // function execute(bytes memory _code, bytes memory _data)\n    //     public\n    //     payable\n    //     virtual\n    //     returns (address, bytes32);\n\n    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\n\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\n\n    function owner() public view virtual returns (address);\n}\n\n\n\n\n\ncontract MainnetCoreAddresses {\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant PROXY_AUTH_ADDR = 0xD489FfAEEB46b2d7E377850d45E1F8cA3350fc82;\n    address internal constant DEFISAVER_LOGGER = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n}\n\n\n\n\n\ncontract CoreHelper is MainnetCoreAddresses {\n}\n\n\n\n\n\n\n\ncontract ProxyAuth is AdminAuth, CoreHelper {\n    IDFSRegistry public constant registry = IDFSRegistry(REGISTRY_ADDR);\n\n    bytes4 constant STRATEGY_EXECUTOR_ID = bytes4(keccak256(\"StrategyExecutor\"));\n\n    error SenderNotExecutorError(address, address);\n\n    modifier onlyExecutor {\n        address executorAddr = registry.getAddr(STRATEGY_EXECUTOR_ID);\n\n        if (msg.sender != executorAddr){\n            revert SenderNotExecutorError(msg.sender, executorAddr);\n        }\n\n        _;\n    }\n\n    /// @notice Calls the .execute() method of the specified users DSProxy\n    /// @dev Contract gets the authority from the user to call it, only callable by Executor\n    /// @param _proxyAddr Address of the users DSProxy\n    /// @param _contractAddr Address of the contract which to execute\n    /// @param _callData Call data of the function to be called\n    function callExecute(\n        address _proxyAddr,\n        address _contractAddr,\n        bytes memory _callData\n    ) public payable onlyExecutor {\n        IDSProxy(_proxyAddr).execute{value: msg.value}(_contractAddr, _callData);\n    }\n}\n\n\n\n\n\n\ncontract StrategyStorage is StrategyModel, AdminAuth {\n\n    Strategy[] public strategies;\n    bool public openToPublic = false;\n\n    error NoAuthToCreateStrategy(address,bool);\n    event StrategyCreated(uint256 indexed);\n\n    modifier onlyAuthCreators {\n        if (adminVault.owner() != msg.sender && openToPublic == false) {\n            revert NoAuthToCreateStrategy(msg.sender, openToPublic);\n        }\n\n        _;\n    }\n\n    /// @notice Creates a new strategy and writes the data in an array\n    /// @dev Can only be called by auth addresses if it's not open to public\n    /// @param _name Name of the strategy useful for logging what strategy is executing\n    /// @param _triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param _actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param _paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param _continuous If the action is repeated (continuos) or one time\n    function createStrategy(\n        string memory _name,\n        bytes4[] memory _triggerIds,\n        bytes4[] memory _actionIds,\n        uint8[][] memory _paramMapping,\n        bool _continuous\n    ) public onlyAuthCreators returns (uint256) {\n        strategies.push(Strategy({\n                name: _name,\n                creator: msg.sender,\n                triggerIds: _triggerIds,\n                actionIds: _actionIds,\n                paramMapping: _paramMapping,\n                continuous : _continuous\n        }));\n\n        emit StrategyCreated(strategies.length - 1);\n\n        return strategies.length - 1;\n    }\n\n    /// @notice Switch to determine if bundles can be created by anyone\n    /// @dev Callable only by the owner\n    /// @param _openToPublic Flag if true anyone can create bundles\n    function changeEditPermission(bool _openToPublic) public onlyOwner {\n        openToPublic = _openToPublic;\n    }\n\n    ////////////////////////////// VIEW METHODS /////////////////////////////////\n\n    function getStrategy(uint _strategyId) public view returns (Strategy memory) {\n        return strategies[_strategyId];\n    }\n    function getStrategyCount() public view returns (uint256) {\n        return strategies.length;\n    }\n\n    function getPaginatedStrategies(uint _page, uint _perPage) public view returns (Strategy[] memory) {\n        Strategy[] memory strategiesPerPage = new Strategy[](_perPage);\n\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end > strategies.length) ? strategies.length : end;\n\n        uint count = 0;\n        for (uint i = start; i < end; i++) {\n            strategiesPerPage[count] = strategies[i];\n            count++;\n        }\n\n        return strategiesPerPage;\n    }\n\n}\n\n\n\n\n\n\n\n\n\ncontract BundleStorage is StrategyModel, AdminAuth, CoreHelper {\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    StrategyBundle[] public bundles;\n    bool public openToPublic = false;\n\n    error NoAuthToCreateBundle(address,bool);\n    error DiffTriggersInBundle(uint64[]);\n\n    event BundleCreated(uint256);\n\n    modifier onlyAuthCreators {\n        if (adminVault.owner() != msg.sender && openToPublic == false) {\n            revert NoAuthToCreateBundle(msg.sender, openToPublic);\n        }\n\n        _;\n    }\n\n    /// @dev Checks if the triggers in strategies are the same (order also relevant)\n    /// @dev If the caller is not owner we do additional checks, we skip those checks for gas savings\n    modifier sameTriggers(uint64[] memory _strategyIds) {\n        if (msg.sender != adminVault.owner()) {\n            address strategyStorageAddr = registry.getAddr(STRATEGY_STORAGE_ID);\n            Strategy memory firstStrategy = StrategyStorage(strategyStorageAddr).getStrategy(_strategyIds[0]);\n\n            bytes32 firstStrategyTriggerHash = keccak256(abi.encode(firstStrategy.triggerIds));\n\n            for (uint256 i = 1; i < _strategyIds.length; ++i) {\n                Strategy memory s = StrategyStorage(strategyStorageAddr).getStrategy(_strategyIds[i]);\n\n                if (firstStrategyTriggerHash != keccak256(abi.encode(s.triggerIds))) {\n                    revert DiffTriggersInBundle(_strategyIds);\n                }\n            }\n        }\n\n        _;\n    }\n\n    /// @notice Adds a new bundle to array\n    /// @dev Can only be called by auth addresses if it's not open to public\n    /// @dev Strategies need to have the same number of triggers and ids exists\n    /// @param _strategyIds Array of strategyIds that go into a bundle\n    function createBundle(\n        uint64[] memory _strategyIds\n    ) public onlyAuthCreators sameTriggers(_strategyIds) returns (uint256) {\n\n        bundles.push(StrategyBundle({\n            creator: msg.sender,\n            strategyIds: _strategyIds\n        }));\n\n        emit BundleCreated(bundles.length - 1);\n\n        return bundles.length - 1;\n    }\n\n    /// @notice Switch to determine if bundles can be created by anyone\n    /// @dev Callable only by the owner\n    /// @param _openToPublic Flag if true anyone can create bundles\n    function changeEditPermission(bool _openToPublic) public onlyOwner {\n        openToPublic = _openToPublic;\n    }\n\n    ////////////////////////////// VIEW METHODS /////////////////////////////////\n\n    function getStrategyId(uint256 _bundleId, uint256 _strategyIndex) public view returns (uint256) {\n        return bundles[_bundleId].strategyIds[_strategyIndex];\n    }\n\n    function getBundle(uint _bundleId) public view returns (StrategyBundle memory) {\n        return bundles[_bundleId];\n    }\n    function getBundleCount() public view returns (uint256) {\n        return bundles.length;\n    }\n\n    function getPaginatedBundles(uint _page, uint _perPage) public view returns (StrategyBundle[] memory) {\n        StrategyBundle[] memory bundlesPerPage = new StrategyBundle[](_perPage);\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end > bundles.length) ? bundles.length : end;\n\n        uint count = 0;\n        for (uint i = start; i < end; i++) {\n            bundlesPerPage[count] = bundles[i];\n            count++;\n        }\n\n        return bundlesPerPage;\n    }\n\n}\n\n\n\n\n\n\n\n\n\ncontract SubStorage is StrategyModel, AdminAuth, CoreHelper {\n    error SenderNotSubOwnerError(address, uint256);\n    error UserPositionsEmpty();\n    error SubIdOutOfRange(uint256, bool);\n\n    event Subscribe(uint256 indexed, address indexed, bytes32 indexed, StrategySub);\n    event UpdateData(uint256 indexed, bytes32 indexed, StrategySub);\n    event ActivateSub(uint256 indexed);\n    event DeactivateSub(uint256 indexed);\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    StoredSubData[] public strategiesSubs;\n\n    /// @notice Checks if subId is init. and if the sender is the owner\n    modifier onlySubOwner(uint256 _subId) {\n        if (address(strategiesSubs[_subId].userProxy) != msg.sender) {\n            revert SenderNotSubOwnerError(msg.sender, _subId);\n        }\n        _;\n    }\n\n    /// @notice Checks if the id is valid (points to a stored bundle/sub)\n    modifier isValidId(uint256 _id, bool _isBundle) {\n        if (_isBundle) {\n            if (_id > (BundleStorage(registry.getAddr(BUNDLE_STORAGE_ID)).getBundleCount() - 1)) {\n                revert SubIdOutOfRange(_id, _isBundle);\n            }\n        } else {\n            if (_id > (StrategyStorage(registry.getAddr(STRATEGY_STORAGE_ID)).getStrategyCount() - 1)) {\n                revert SubIdOutOfRange(_id, _isBundle);\n            }\n        }\n\n        _;\n    }\n\n    /// @notice Adds users info and records StoredSubData, logs StrategySub\n    /// @dev To save on gas we don't store the whole struct but rather the hash of the struct\n    /// @param _sub Subscription struct of the user (is not stored on chain, only the hash)\n    function subscribeToStrategy(\n        StrategySub memory _sub\n    ) public isValidId(_sub.strategyOrBundleId, _sub.isBundle) returns (uint256) {\n\n        bytes32 subStorageHash = keccak256(abi.encode(_sub));\n\n        strategiesSubs.push(StoredSubData(\n            bytes20(msg.sender),\n            true,\n            subStorageHash\n        ));\n\n        uint256 currentId = strategiesSubs.length - 1;\n\n        emit Subscribe(currentId, msg.sender, subStorageHash, _sub);\n\n        return currentId;\n    }\n\n    /// @notice Updates the users subscription data\n    /// @dev Only callable by proxy who created the sub.\n    /// @param _subId Id of the subscription to update\n    /// @param _sub Subscription struct of the user (needs whole struct so we can hash it)\n    function updateSubData(\n        uint256 _subId,\n        StrategySub calldata _sub\n    ) public onlySubOwner(_subId) isValidId(_sub.strategyOrBundleId, _sub.isBundle)  {\n        StoredSubData storage storedSubData = strategiesSubs[_subId];\n\n        bytes32 subStorageHash = keccak256(abi.encode(_sub));\n\n        storedSubData.strategySubHash = subStorageHash;\n\n        emit UpdateData(_subId, subStorageHash, _sub);\n    }\n\n    /// @notice Enables the subscription for execution if disabled\n    /// @dev Must own the sub. to be able to enable it\n    /// @param _subId Id of subscription to enable\n    function activateSub(\n        uint _subId\n    ) public onlySubOwner(_subId) {\n        StoredSubData storage sub = strategiesSubs[_subId];\n\n        sub.isEnabled = true;\n\n        emit ActivateSub(_subId);\n    }\n\n    /// @notice Disables the subscription (will not be able to execute the strategy for the user)\n    /// @dev Must own the sub. to be able to disable it\n    /// @param _subId Id of subscription to disable\n    function deactivateSub(\n        uint _subId\n    ) public onlySubOwner(_subId) {\n        StoredSubData storage sub = strategiesSubs[_subId];\n\n        sub.isEnabled = false;\n\n        emit DeactivateSub(_subId);\n    }\n\n    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\n\n    function getSub(uint _subId) public view returns (StoredSubData memory) {\n        return strategiesSubs[_subId];\n    }\n\n    function getSubsCount() public view returns (uint256) {\n        return strategiesSubs.length;\n    }\n}\n\n\n\n\n\n\n\n\n\n\ncontract StrategyExecutor is StrategyModel, AdminAuth, CoreHelper {\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    bytes4 constant BOT_AUTH_ID = bytes4(keccak256(\"BotAuth\"));\n    bytes4 constant RECIPE_EXECUTOR_ID = bytes4(keccak256(\"RecipeExecutor\"));\n\n    error BotNotApproved(address, uint256);\n    error SubNotEnabled(uint256);\n    error SubDatHashMismatch(uint256, bytes32, bytes32);\n\n    /// @notice Checks all the triggers and executes actions\n    /// @dev Only authorized callers can execute it\n    /// @param _subId Id of the subscription\n    /// @param _strategyIndex Which strategy in a bundle, need to specify because when sub is part of a bundle\n    /// @param _triggerCallData All input data needed to execute triggers\n    /// @param _actionsCallData All input data needed to execute actions\n    /// @param _sub StrategySub struct needed because on-chain we store only the hash\n    function executeStrategy(\n        uint256 _subId,\n        uint256 _strategyIndex,\n        bytes[] calldata _triggerCallData,\n        bytes[] calldata _actionsCallData,\n        StrategySub memory _sub\n    ) public {\n        // check bot auth\n        if (!checkCallerAuth(_subId)) {\n            revert BotNotApproved(msg.sender, _subId);\n        }\n\n        StoredSubData memory storedSubData = SubStorage(registry.getAddr(SUB_STORAGE_ID)).getSub(_subId);\n\n        bytes32 subDataHash = keccak256(abi.encode(_sub));\n\n        // data sent from the caller must match the stored hash of the data\n        if (subDataHash != storedSubData.strategySubHash) {\n            revert SubDatHashMismatch(_subId, subDataHash, storedSubData.strategySubHash);\n        }\n\n        // subscription must be enabled\n        if (!storedSubData.isEnabled) {\n            revert SubNotEnabled(_subId);\n        }\n\n        // execute actions\n        callActions(_subId, _actionsCallData, _triggerCallData, _strategyIndex, _sub, address(storedSubData.userProxy));\n    }\n\n    /// @notice Checks if msg.sender has auth, reverts if not\n    /// @param _subId Id of the strategy\n    function checkCallerAuth(uint256 _subId) internal view returns (bool) {\n        return BotAuth(registry.getAddr(BOT_AUTH_ID)).isApproved(_subId, msg.sender);\n    }\n\n\n    /// @notice Calls ProxyAuth which has the auth from the DSProxy which will call RecipeExecutor\n    /// @param _subId Strategy data we have in storage\n    /// @param _actionsCallData All input data needed to execute actions\n    /// @param _triggerCallData All input data needed to check triggers\n    /// @param _strategyIndex Which strategy in a bundle, need to specify because when sub is part of a bundle\n    /// @param _sub StrategySub struct needed because on-chain we store only the hash\n    /// @param _userProxy StrategySub struct needed because on-chain we store only the hash\n    function callActions(\n        uint256 _subId,\n        bytes[] calldata _actionsCallData,\n        bytes[] calldata _triggerCallData,\n        uint256 _strategyIndex,\n        StrategySub memory _sub,\n        address _userProxy\n    ) internal {\n        address recipeExecutorAddr = registry.getAddr(RECIPE_EXECUTOR_ID);\n\n        ProxyAuth(PROXY_AUTH_ADDR).callExecute{value: msg.value}(\n            _userProxy,\n            recipeExecutorAddr,\n            abi.encodeWithSignature(\n                \"executeRecipeFromStrategy(uint256,bytes[],bytes[],uint256,(uint64,bool,bytes[],bytes32[]))\",\n                _subId,\n                _actionsCallData,\n                _triggerCallData,\n                _strategyIndex,\n                _sub\n            )\n        );\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BotNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"SubDatHashMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SubNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_triggerCallData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_actionsCallData\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"strategyOrBundleId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isBundle\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"triggerData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StrategyModel.StrategySub\",\"name\":\"_sub\",\"type\":\"tuple\"}],\"name\":\"executeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrategyExecutor", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}