{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.12;\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IFeeDB {\r\n    event UpdateFeeAndRecipient(uint256 newFee, address newRecipient);\r\n    event UpdatePaysFeeWhenSending(bool newType);\r\n    event UpdateNFTDiscountRate(address nft, uint256 discountRate);\r\n    event UpdateUserDiscountRate(address user, uint256 discountRate);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function protocolFeeRecipient() external view returns (address);\r\n\r\n    function paysFeeWhenSending() external view returns (bool);\r\n\r\n    function userDiscountRate(address user) external view returns (uint256);\r\n\r\n    function nftDiscountRate(address nft) external view returns (uint256);\r\n\r\n    function getFeeDataForSend(address user, bytes calldata data)\r\n        external\r\n        view\r\n        returns (\r\n            bool _paysFeeWhenSending,\r\n            address _recipient,\r\n            uint256 _protocolFee,\r\n            uint256 _discountRate\r\n        );\r\n\r\n    function getFeeDataForReceive(address user, bytes calldata data)\r\n        external\r\n        view\r\n        returns (address _recipient, uint256 _discountRate);\r\n}\r\n\r\ncontract FeeDB is Ownable, IFeeDB {\r\n    uint256 public protocolFee; //out of 10000\r\n    address public protocolFeeRecipient;\r\n    bool public paysFeeWhenSending;\r\n    mapping(address => uint256) public userDiscountRate; //out of 10000\r\n    mapping(address => uint256) public nftDiscountRate;\r\n\r\n    constructor(\r\n        uint256 _protocolFee,\r\n        address _protocolFeeRecipient,\r\n        bool _paysFeeWhenSending\r\n    ) {\r\n        require(_protocolFee < 100, \"max fee is 99\"); //max 0.99%\r\n        protocolFee = _protocolFee;\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n        paysFeeWhenSending = _paysFeeWhenSending;\r\n\r\n        emit UpdateFeeAndRecipient(_protocolFee, _protocolFeeRecipient);\r\n        emit UpdatePaysFeeWhenSending(_paysFeeWhenSending);\r\n    }\r\n\r\n    function updateNFTDiscountRate(\r\n        address[] calldata nfts,\r\n        uint256[] calldata discountRates\r\n    ) external onlyOwner {\r\n        uint256 length = nfts.length;\r\n        require(length == discountRates.length, \"length is not equal\");\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(discountRates[i] <= 10000, \"max discount is 10000\");\r\n            nftDiscountRate[nfts[i]] = discountRates[i];\r\n            emit UpdateNFTDiscountRate(nfts[i], discountRates[i]);\r\n        }\r\n    }\r\n\r\n    function updateFeeAndRecipient(uint256 newFee, address newRecipient) external onlyOwner {\r\n        require(newFee < 100, \"max fee is 99\");\r\n        protocolFee = newFee;\r\n        protocolFeeRecipient = newRecipient;\r\n        emit UpdateFeeAndRecipient(newFee, newRecipient);\r\n    }\r\n\r\n    function togglePaysFeeWhenSending() external onlyOwner {\r\n        bool old = paysFeeWhenSending;\r\n        paysFeeWhenSending = !old;\r\n        emit UpdatePaysFeeWhenSending(!old);\r\n    }\r\n\r\n    function updateUserDiscountRate(address[] calldata users, uint256[] calldata discountRates) external onlyOwner {\r\n        require(users.length == discountRates.length, \"length is not equal\");\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            require(discountRates[i] <= 10000, \"max discount is 10000\");\r\n            userDiscountRate[users[i]] = discountRates[i];\r\n            emit UpdateUserDiscountRate(users[i], discountRates[i]);\r\n        }\r\n    }\r\n\r\n    function getFeeDataForSend(address user, bytes calldata data)\r\n        external\r\n        view\r\n        returns (\r\n            bool _paysFeeWhenSending,\r\n            address _recipient,\r\n            uint256 _protocolFee,\r\n            uint256 _discountRate\r\n        )\r\n    {\r\n        _paysFeeWhenSending = paysFeeWhenSending;\r\n        if (_paysFeeWhenSending) {\r\n            _recipient = protocolFeeRecipient;\r\n            if (_recipient == address(0)) return (_paysFeeWhenSending, address(0), 0, 0);\r\n        }\r\n        _protocolFee = protocolFee;\r\n\r\n        uint256 _userDiscountRate = userDiscountRate[user];\r\n        uint256 _nftDiscountRate = _getNFTDiscountRate(user, data);\r\n        _discountRate = _userDiscountRate > _nftDiscountRate ? _userDiscountRate : _nftDiscountRate;\r\n    }\r\n\r\n    function getFeeDataForReceive(address user, bytes calldata data)\r\n        external\r\n        view\r\n        returns (address _recipient, uint256 _discountRate)\r\n    {\r\n        _recipient = protocolFeeRecipient;\r\n\r\n        if (_recipient != address(0)) {\r\n            uint256 _userDiscountRate = userDiscountRate[user];\r\n            uint256 _nftDiscountRate = _getNFTDiscountRate(user, data);\r\n            _discountRate = _userDiscountRate > _nftDiscountRate ? _userDiscountRate : _nftDiscountRate;\r\n        }\r\n    }\r\n\r\n    function _getNFTDiscountRate(address user, bytes calldata data) private view returns (uint256 _nftDiscountRate) {\r\n        if (data.length > 0) {\r\n            address nft = abi.decode(data, (address));\r\n            if (nft != address(0)) {\r\n                _nftDiscountRate = nftDiscountRate[nft];\r\n                if(_nftDiscountRate == 0) return 0;\r\n                require(IERC721(nft).balanceOf(user) > 0, \"not nft holder\");\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_paysFeeWhenSending\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"UpdateFeeAndRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"}],\"name\":\"UpdateNFTDiscountRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newType\",\"type\":\"bool\"}],\"name\":\"UpdatePaysFeeWhenSending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"}],\"name\":\"UpdateUserDiscountRate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getFeeDataForReceive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_discountRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getFeeDataForSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_paysFeeWhenSending\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paysFeeWhenSending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaysFeeWhenSending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeAndRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nfts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"discountRates\",\"type\":\"uint256[]\"}],\"name\":\"updateNFTDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"discountRates\",\"type\":\"uint256[]\"}],\"name\":\"updateUserDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FeeDB", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000067aab54e9f81d35b2d9ad7bc3b6505095618aeb00000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d9cd7ed192200a1564a34823e416e1cad0457f8dfbf6b7c7ba53cbfce7049757"}]}