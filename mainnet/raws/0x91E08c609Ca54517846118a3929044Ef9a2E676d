{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/FeeHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// libraries\\r\\nimport \\\"./external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./external/@openzeppelin/utils/SafeCast.sol\\\";\\r\\n\\r\\n// extends\\r\\nimport \\\"./interfaces/IFeeHandler.sol\\\";\\r\\nimport \\\"./shared/SpoolOwnable.sol\\\";\\r\\nimport \\\"./shared/Constants.sol\\\";\\r\\n\\r\\n// other imports\\r\\nimport \\\"./interfaces/IController.sol\\\";\\r\\n\\r\\nstruct PlatformCollectedFees {\\r\\n    uint128 ecosystem;\\r\\n    uint128 treasury;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the {IFeeHandler} interface.\\r\\n *\\r\\n * @dev\\r\\n * Handles fees generated by vaults.\\r\\n * Fees are only collected when a user withdraws and calculated\\r\\n * from the generated profit (performance fees).\\r\\n *\\r\\n * There are 4 type of fees:\\r\\n * - Ecosystem fee: Circle back in Spool ecosystem and is distributed to Spool system participants\\r\\n * - Treasury fee: Collected by the Spool DAO to support the development of the Spool\\r\\n * - Risk provider fee: Collected the risk provider the vault is using to allocate it's funds\\r\\n * - Vault owner fee: Collected by the vault owner (initially the vault creator, later can be transferred to another address)\\r\\n */\\r\\ncontract FeeHandler is IFeeHandler, SpoolOwnable, BaseConstants {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== CONSTANTS ========== */\\r\\n\\r\\n    /// @notice Maximum Ecosystem Fee (20%) \\r\\n    uint256 public constant MAX_ECOSYSTEM_FEE = 20_00;\\r\\n    /// @notice Max Treasury Fee (10%)\\r\\n    uint256 public constant MAX_TREASURY_FEE = 10_00; \\r\\n    /// @notice Max Risk Provider Fee (5%)\\r\\n    uint256 public constant MAX_RISK_PROVIDER_FEE = 5_00;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @notice controller contract\\r\\n    IController public immutable controller;\\r\\n    /// @notice risk provider registry contract\\r\\n    address public immutable riskProviderRegistry;\\r\\n\\r\\n    /// @notice Current Ecosystem Fee\\r\\n    uint16 public ecosystemFee;\\r\\n    /// @notice Current Treasury Fee\\r\\n    uint16 public treasuryFee;\\r\\n    /// @notice Current Ecosystem Fee to the collector\\r\\n    address public ecosystemFeeCollector;\\r\\n    /// @notice Current Treasury Fee to the collector\\r\\n    address public treasuryFeeCollector;\\r\\n\\r\\n\\r\\n    /// @notice ecosystem and treasury collected fees\\r\\n    mapping(IERC20 => PlatformCollectedFees) public platformCollectedFees;\\r\\n\\r\\n    /// @notice Risk provider fee size\\r\\n    mapping(address => uint16) public riskProviderFees;\\r\\n\\r\\n    /// @notice risk provider and vault owner collected fees\\r\\n    mapping(address => mapping(IERC20 => uint256)) public collectedFees;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the contract initial values\\r\\n     *\\r\\n     * @dev It performs certain pre-conditional validations to ensure the contract\\r\\n     * has been initialized properly, such as that addresses are valid.\\r\\n     *\\r\\n     * @param _spoolOwner the spool owner contract that owns this contract\\r\\n     * @param _controller responsible for creating new vaults\\r\\n     * @param _riskProviderRegistry responsible for handling risk providers\\r\\n     * @param _ecosystemFee fee to ecosystem\\r\\n     * @param _treasuryFee fee to treasury\\r\\n     * @param _ecosystemFeeCollector address of ecosystem fee collector\\r\\n     * @param _treasuryFeeCollector address of treasury fee collector\\r\\n     */\\r\\n    constructor(\\r\\n        ISpoolOwner _spoolOwner,\\r\\n        IController _controller,\\r\\n        address _riskProviderRegistry,\\r\\n        uint16 _ecosystemFee,\\r\\n        uint16 _treasuryFee,\\r\\n        address _ecosystemFeeCollector,\\r\\n        address _treasuryFeeCollector\\r\\n    )\\r\\n        SpoolOwnable(_spoolOwner)\\r\\n    {\\r\\n        require(address(_controller) != address(0), \\\"FeeHandler::constructor: Controller address cannot be 0\\\");\\r\\n        require(_riskProviderRegistry != address(0), \\\"FeeHandler::constructor: Risk Provider Registry address cannot be 0\\\");\\r\\n        require(_ecosystemFeeCollector != address(0), \\\"FeeHandler::constructor: Ecosystem Fee Collector cannot be 0\\\");\\r\\n        require(_treasuryFeeCollector != address(0), \\\"FeeHandler::constructor: Treasury Fee Collector address cannot be 0\\\");\\r\\n\\r\\n        controller = _controller;\\r\\n        riskProviderRegistry = _riskProviderRegistry;\\r\\n\\r\\n        _setEcosystemFee(_ecosystemFee);\\r\\n        _setTreasuryFee(_treasuryFee);\\r\\n\\r\\n        _setEcosystemCollector(_ecosystemFeeCollector);\\r\\n        _setTreasuryCollector(_treasuryFeeCollector);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Collect vault owner and risk provider fees\\r\\n     *\\r\\n     * @dev\\r\\n     * transfers any fees collected for the sender to them.\\r\\n     * fees are only collected for the vault owner and risk providers. if it's called by\\r\\n     * anyone else it will have no effect.\\r\\n     *\\r\\n     * NOTE To save on storage fees, we use the value stored at collectedFees as a kind of boolean.\\r\\n     * if there are fees to be collected (value > 1), we send the fees to the user, and then set the word\\r\\n     * as 1. the value must be greater than this to send fees again. Therefore only the first SSTORE is 20k\\r\\n     * and subsequent writes are 5k.\\r\\n     *\\r\\n     * @param tokens token addresses for which fees have been collected in\\r\\n     */\\r\\n    function collectFees(IERC20[] calldata tokens) external {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            uint256 amount = collectedFees[msg.sender][tokens[i]];\\r\\n            if (amount > 1) {\\r\\n                amount--;\\r\\n                collectedFees[msg.sender][tokens[i]] = 1;\\r\\n                tokens[i].safeTransfer(msg.sender, amount);\\r\\n\\r\\n                emit FeeCollected(msg.sender, tokens[i], amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Collect ecosystem fees\\r\\n     *\\r\\n     * transfers any fees collected for the ecosystem fee collecter to them.\\r\\n     * callable by anyone, but only transfers to ecosystem fee collector address.\\r\\n     * see NOTE in {collectFees} for more details on internal logic.\\r\\n     * Requirements:\\r\\n     * - Caller address must be equal to ecosystem fee collector     *\\r\\n     *\\r\\n     * @param tokens token addresses for which fees have been collected in\\r\\n     */\\r\\n    function collectEcosystemFees(IERC20[] calldata tokens) external {\\r\\n        require(\\r\\n            ecosystemFeeCollector == msg.sender,\\r\\n            \\\"FeeHandler::collectEcosystemFees: Caller not ecosystem fee collector.\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            uint128 amount = platformCollectedFees[tokens[i]].ecosystem;\\r\\n            if (amount > 1) {\\r\\n                amount--;\\r\\n                platformCollectedFees[tokens[i]].ecosystem = 1;\\r\\n                tokens[i].safeTransfer(msg.sender, amount);\\r\\n\\r\\n                emit EcosystemFeeCollected(tokens[i], amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Collect treasury fees\\r\\n     *\\r\\n     * transfers any fees collected for the treasury fee collecter to them.\\r\\n     * see NOTE in {collectFees} for more details on internal logic.\\r\\n     * Requirements:\\r\\n     * - Caller address must be equal to treasury fee collector\\r\\n     *\\r\\n     * @param tokens token addresses for which fees have been collected in\\r\\n     */    \\r\\n    function collectTreasuryFees(IERC20[] calldata tokens) external {\\r\\n        require(\\r\\n            treasuryFeeCollector == msg.sender,\\r\\n            \\\"FeeHandler::collectTreasuryFees: Caller not treasury fee collector.\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            uint128 amount = platformCollectedFees[tokens[i]].treasury;\\r\\n            if (amount > 1) {\\r\\n                amount--;\\r\\n                platformCollectedFees[tokens[i]].treasury = 1;\\r\\n                tokens[i].safeTransfer(msg.sender, amount);\\r\\n\\r\\n                emit TreasuryFeeCollected(tokens[i], amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Pay vault fees to ecosystem, treasury, risk provider and vault owner.\\r\\n     * @dev\\r\\n     * Returns total fee size, that is later transfered by vault to this contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be a vault\\r\\n     *\\r\\n     * @param underlying token address for which fees are to be paid\\r\\n     * @param profit User realized profit\\r\\n     * @param riskProvider address of the risk provider for which fees are to be paid\\r\\n     * @param vaultOwner address of the owner of the calling vault, recipient of the vault fees\\r\\n     * @param vaultFee fee to owner in the calling vault\\r\\n     *\\r\\n     * @return feesPaid total calculated fees paid from the user profit\\r\\n     */\\r\\n    function payFees(\\r\\n        IERC20 underlying,\\r\\n        uint256 profit,\\r\\n        address riskProvider,\\r\\n        address vaultOwner,\\r\\n        uint16 vaultFee\\r\\n    ) \\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n        returns (uint256 feesPaid)\\r\\n    {\\r\\n        // ecosystem\\r\\n        uint128 ecosystemCollected = _calculateFee(profit, ecosystemFee);\\r\\n        if (ecosystemCollected > 0) {\\r\\n            platformCollectedFees[underlying].ecosystem += ecosystemCollected;\\r\\n            feesPaid += ecosystemCollected;\\r\\n        }\\r\\n\\r\\n        // treasury\\r\\n        uint128 treasuryCollected = _calculateFee(profit, treasuryFee);\\r\\n        if (treasuryCollected > 0) {\\r\\n            platformCollectedFees[underlying].treasury += treasuryCollected;\\r\\n            feesPaid += treasuryCollected;\\r\\n        }\\r\\n\\r\\n        // risk provider\\r\\n        uint16 riskProviderFee = riskProviderFees[riskProvider];\\r\\n        uint128 riskProviderColected = _calculateFee(profit, riskProviderFee);\\r\\n        if (riskProviderColected > 0) {\\r\\n            collectedFees[riskProvider][underlying] += riskProviderColected;\\r\\n            feesPaid += riskProviderColected;\\r\\n        }\\r\\n\\r\\n        // vault owner\\r\\n        uint128 vaultFeeCollected = _calculateFee(profit, vaultFee);\\r\\n        if (vaultFeeCollected > 0) {\\r\\n            collectedFees[vaultOwner][underlying] += riskProviderColected;\\r\\n            feesPaid += vaultFeeCollected;\\r\\n        }\\r\\n\\r\\n        emit FeesPaid(msg.sender, profit, ecosystemCollected, treasuryCollected, riskProviderColected, vaultFeeCollected);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set risk provider fee size\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be the risk provider registry\\r\\n     *\\r\\n     * @param riskProvider address to risk provider to set fee for\\r\\n     * @param fee fee to set for the risk provider\\r\\n     */\\r\\n    function setRiskProviderFee(address riskProvider, uint16 fee) external override onlyRiskProviderRegistry {\\r\\n        _setRiskProviderFee(riskProvider, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set ecosystem fee size\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be the spool owner\\r\\n     *\\r\\n     * @param fee ecosystem fee to set\\r\\n     */\\r\\n    function setEcosystemFee(uint16 fee) external onlyOwner {\\r\\n        _setEcosystemFee(fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set treasury fee size\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be the spool owner\\r\\n     *\\r\\n     * @param fee treasury fee to set\\r\\n     */\\r\\n    function setTreasuryFee(uint16 fee) external onlyOwner {\\r\\n        _setTreasuryFee(fee);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Set ecosystem fee collector address\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     * - caller must be the spool owner\\r\\n     *\\r\\n     * @param collector ecosystem fee collector address to set\\r\\n     */\\r\\n    function setEcosystemCollector(address collector) external onlyOwner {\\r\\n        _setEcosystemCollector(collector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set treasiry fee collector address\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     * - caller must be the spool owner\\r\\n     *\\r\\n     * @param collector treasiry fee collector address to set\\r\\n     */\\r\\n    function setTreasuryCollector(address collector) external onlyOwner {\\r\\n        _setTreasuryCollector(collector);\\r\\n    }\\r\\n\\r\\n    /* ========== PRIVATE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice calculate fee from profit and size of fee\\r\\n     * @dev fee is denoted in basis points, `FULL_PERCENT` being 10,000 or 100%\\r\\n     *\\r\\n     * @param profit user profit amount\\r\\n     * @param feeSize fee size in basis points\\r\\n     * @return feeAmount Fee amount calculated from the `profit`\\r\\n     */\\r\\n    function _calculateFee(uint256 profit, uint16 feeSize) private pure returns(uint128) {\\r\\n        return SafeCast.toUint128((profit * feeSize) / FULL_PERCENT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set risk provider fee size\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - fee must be less than or equal to the max risk provider fee\\r\\n     *\\r\\n     * @param riskProvider address to risk provider to set fee for\\r\\n     * @param fee fee to set for the risk provider\\r\\n     */\\r\\n    function _setRiskProviderFee(address riskProvider, uint16 fee) private {\\r\\n        require(fee <= MAX_RISK_PROVIDER_FEE, \\\"FeeHandler::_setRiskProviderFee: Risk Provider fee too big\\\");\\r\\n        riskProviderFees[riskProvider] = fee;\\r\\n        emit RiskProviderFeeUpdated(riskProvider, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set ecosystem fee size\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - fee must be less than or equal to the max ecosystem fee\\r\\n     *\\r\\n     * @param fee ecosystem fee to set\\r\\n     */    \\r\\n     function _setEcosystemFee(uint16 fee) private {\\r\\n        require(fee <= MAX_ECOSYSTEM_FEE, \\\"FeeHandler::_setEcosystemFee: Ecosystem fee too big\\\");\\r\\n        ecosystemFee = fee;\\r\\n        emit EcosystemFeeUpdated(fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set treasury fee size\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - fee must be less than or equal to the max treasury fee\\r\\n     *\\r\\n     * @param fee treasury fee to set\\r\\n     */\\r\\n    function _setTreasuryFee(uint16 fee) private {\\r\\n        require(fee <= MAX_TREASURY_FEE, \\\"FeeHandler::_setTreasuryFee: Treasury fee too big\\\");\\r\\n        treasuryFee = fee;\\r\\n        emit TreasuryFeeUpdated(fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set ecosystem fee collector address\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     * - collector cannot be 0\\r\\n     *\\r\\n     * @param collector ecosystem fee collector address to set\\r\\n     */\\r\\n    function _setEcosystemCollector(address collector) private {\\r\\n        require(collector != address(0), \\\"FeeHandler::_setEcosystemCollector: Ecosystem Fee Collector address cannot be 0\\\");\\r\\n        ecosystemFeeCollector = collector;\\r\\n        emit EcosystemCollectorUpdated(collector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set treasiry fee collector address\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     - collector cannot be 0\\r\\n     *\\r\\n     * @param collector treasiry fee collector address to set\\r\\n     */    \\r\\n    function _setTreasuryCollector(address collector) private {\\r\\n        require(collector != address(0), \\\"FeeHandler::_setTreasuryCollector: Treasury Fee Collector address cannot be 0\\\");\\r\\n        treasuryFeeCollector = collector;\\r\\n        emit TreasuryCollectorUpdated(collector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that the caller is a valid vault\\r\\n     *\\r\\n     * @dev\\r\\n     * callable only from the onlyVault modifier\\r\\n     */\\r\\n    function _onlyVault() private view {\\r\\n        require(\\r\\n            controller.validVault(msg.sender),\\r\\n            \\\"FeeHandler::_onlyVault: Can only be invoked by the Vault\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that the caller is a risk provider registry\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     * - caller is the risk provider registry\\r\\n     */\\r\\n    function _onlyRiskProviderRegistry() private view {\\r\\n        require(\\r\\n            riskProviderRegistry == msg.sender,\\r\\n            \\\"FeeHandler::_onlyRiskProviderRegistry: Can only be invoked by the Risk Provider Registry\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice onlyVault modifier\\r\\n     *\\r\\n     * @dev \\r\\n     * Throws if called by a non-valid vault\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        _onlyVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice onlyRiskProviderRegistry modifier\\r\\n     *\\r\\n     * @dev \\r\\n     * Throws if called by any address other than the risk provider registry\\r\\n     */\\r\\n    modifier onlyRiskProviderRegistry() {\\r\\n        _onlyRiskProviderRegistry();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IController {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function strategies(uint256 i) external view returns (address);\\n\\n    function validStrategy(address strategy) external view returns (bool);\\n\\n    function validVault(address vault) external view returns (bool);\\n\\n    function getStrategiesCount() external view returns(uint8);\\n\\n    function supportedUnderlying(IERC20 underlying)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function verifyStrategies(address[] calldata _strategies) external view;\\n\\n    function transferToSpool(\\n        address transferFrom,\\n        uint256 amount\\n    ) external;\\n\\n    function checkPaused() external view;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event EmergencyWithdrawStrategy(address indexed strategy);\\n    event EmergencyRecipientUpdated(address indexed recipient);\\n    event EmergencyWithdrawerUpdated(address indexed withdrawer, bool set);\\n    event PauserUpdated(address indexed user, bool set);\\n    event UnpauserUpdated(address indexed user, bool set);\\n    event VaultCreated(address indexed vault, address underlying, address[] strategies, uint256[] proportions,\\n        uint16 vaultFee, address riskProvider, int8 riskTolerance);\\n    event StrategyAdded(address strategy);\\n    event StrategyRemoved(address strategy);\\n    event VaultInvalid(address vault);\\n    event DisableStrategy(address strategy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeeHandler {\\n    function payFees(\\n        IERC20 underlying,\\n        uint256 profit,\\n        address riskProvider,\\n        address vaultOwner,\\n        uint16 vaultFee\\n    ) external returns (uint256 feesPaid);\\n\\n    function setRiskProviderFee(address riskProvider, uint16 fee) external;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event FeesPaid(address indexed vault, uint profit, uint ecosystemCollected, uint treasuryCollected, uint riskProviderColected, uint vaultFeeCollected);\\n    event RiskProviderFeeUpdated(address indexed riskProvider, uint indexed fee);\\n    event EcosystemFeeUpdated(uint indexed fee);\\n    event TreasuryFeeUpdated(uint indexed fee);\\n    event EcosystemCollectorUpdated(address indexed collector);\\n    event TreasuryCollectorUpdated(address indexed collector);\\n    event FeeCollected(address indexed collector, IERC20 indexed underlying, uint amount);\\n    event EcosystemFeeCollected(IERC20 indexed underlying, uint amount);\\n    event TreasuryFeeCollected(IERC20 indexed underlying, uint amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpoolOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface ISpoolOwner {\\r\\n    function isSpoolOwner(address user) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/shared/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Common Spool contracts constants\\r\\nabstract contract BaseConstants {\\r\\n    /// @dev 2 digits precision\\r\\n    uint256 internal constant FULL_PERCENT = 100_00;\\r\\n\\r\\n    /// @dev Accuracy when doing shares arithmetics\\r\\n    uint256 internal constant ACCURACY = 10**30;\\r\\n}\\r\\n\\r\\n/// @title Contains USDC token related values\\r\\nabstract contract USDC {\\r\\n    /// @notice USDC token contract address\\r\\n    IERC20 internal constant USDC_ADDRESS = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\r\\n}\"\r\n    },\r\n    \"contracts/shared/SpoolOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../interfaces/ISpoolOwner.sol\\\";\\r\\n\\r\\n/// @title Logic to help check whether the caller is the Spool owner\\r\\nabstract contract SpoolOwnable {\\r\\n    /// @notice Contract that checks if address is Spool owner\\r\\n    ISpoolOwner internal immutable spoolOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets correct initial values\\r\\n     * @param _spoolOwner Spool owner contract address\\r\\n     */\\r\\n    constructor(ISpoolOwner _spoolOwner) {\\r\\n        require(\\r\\n            address(_spoolOwner) != address(0),\\r\\n            \\\"SpoolOwnable::constructor: Spool owner contract address cannot be 0\\\"\\r\\n        );\\r\\n\\r\\n        spoolOwner = _spoolOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if caller is Spool owner\\r\\n     * @return True if caller is Spool owner, false otherwise\\r\\n     */\\r\\n    function isSpoolOwner() internal view returns(bool) {\\r\\n        return spoolOwner.isSpoolOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Checks and throws if caller is not Spool owner\\r\\n    function _onlyOwner() private view {\\r\\n        require(isSpoolOwner(), \\\"SpoolOwnable::onlyOwner: Caller is not the Spool owner\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Checks and throws if caller is not Spool owner\\r\\n    modifier onlyOwner() {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISpoolOwner\",\"name\":\"_spoolOwner\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riskProviderRegistry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_ecosystemFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_treasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ecosystemFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryFeeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"EcosystemCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EcosystemFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"EcosystemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ecosystemCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskProviderColected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFeeCollected\",\"type\":\"uint256\"}],\"name\":\"FeesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"riskProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RiskProviderFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"TreasuryCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TreasuryFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ECOSYSTEM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RISK_PROVIDER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"collectEcosystemFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"collectTreasuryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"riskProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultOwner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"vaultFee\",\"type\":\"uint16\"}],\"name\":\"payFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feesPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"platformCollectedFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"ecosystem\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"treasury\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"riskProviderFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskProviderRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"setEcosystemCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setEcosystemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"riskProvider\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setRiskProviderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"setTreasuryCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FeeHandler", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000004f03f70a99e5c3b49d733ddd7458f80fa9b5a5b5000000000000000000000000e5b126ae9540809488990a9813e1a2732f678047000000000000000000000000cc00db849f5b8728384ae2597b2509a7662ddd22000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000f6bc2e3b1f939c435d9769d078a6e5048aabd463000000000000000000000000f6bc2e3b1f939c435d9769d078a6e5048aabd463", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}