{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-06-22\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/StakingReward.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n// Staking APY Breakdown\r\n// No lock: 0.02%\r\n// 1 week: 0.17%\r\n// 1 month: 0.68%\r\n// 3 months: 2.2%\r\n// 6 months: 4.5%\r\n// 1 year: 9%\r\n// 2 years: 21%\r\n// 4 years: 41%\r\n\r\n// The user will be able to connect/disconnect their wallet, then migrate and swap their PIXUL tokens for xPIXUL.\r\n// The user will be able to stake xPIXUL and receive PIXUL tokens with the APY that is offered on the lock they selected\r\n// User can claim new rewards anytime and can unstake when the timelock has been completed\r\n// user can view the amount of tokens they have locked and the amount of rewards they have accumulated. \r\n\r\ncontract StakingRewards {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n\r\n    uint256 constant year = 60 * 60 * 24 * 365;\r\n    uint256 constant month = 60 * 60 * 24 * 30;\r\n    uint256 constant week = 60 * 60 * 24 * 7;\r\n\r\n    /// @dev staking period\r\n    uint256[] stakingPeriod = [0, week, month, 3 * month, 6 * month, year, 2 * year, 4 * year];\r\n\r\n    /// APR breakdown\r\n    uint256[] apr = [\r\n        2,      // 0.02%\r\n        17,     // 0.17%\r\n        68,     // 0.68%\r\n        220,    // 2.2%\r\n        450,    // 4.5%\r\n        900,    // 9%\r\n        2100,   // 21%\r\n        4100    // 41%\r\n    ];\r\n\r\n    /// @dev current max stakingId\r\n    uint256 public stakingIdPointer;\r\n\r\n    struct StakingInfo {\r\n        uint256 stakingId;\r\n        uint256 amount;\r\n        uint256 starttime;\r\n        uint256 claimedAmount;\r\n        uint8 stakingtype;\r\n    }\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) _ownedStakings;\r\n\r\n    mapping(uint256 => uint256) private _ownedStakingsIndex;\r\n    \r\n    StakingInfo[] _allStakings;\r\n\r\n    mapping(uint256 => uint256) _allStakingIndex;\r\n\r\n    constructor(address _stakingToken, address _rewardsToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsToken = IERC20(_rewardsToken);\r\n    }\r\n\r\n    function stakingOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balances[owner], \"owner index out of bounds\");\r\n        return _ownedStakings[owner][index];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allStakings.length;\r\n    }\r\n\r\n    /// number of stakings\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"balance query for the zero address\");\r\n        return balances[owner];\r\n    }\r\n\r\n    function stakingByIndex(uint256 index) public view returns (StakingInfo memory) {\r\n        require(index < totalSupply(), \"global index out of bounds\");\r\n        return _allStakings[index];\r\n    }\r\n\r\n    function stakingById(uint256 stakingId) public view returns (StakingInfo memory) {\r\n        require(stakingId <= stakingIdPointer, \"staking id is not valid\");\r\n        return _allStakings[_allStakingIndex[stakingId]];\r\n    }\r\n\r\n    function _addStakingToOwnerEnumeration(address to, uint256 stakingId) private {\r\n        uint256 length = balances[to];\r\n        _ownedStakings[to][length] = stakingId;\r\n        _ownedStakingsIndex[stakingId] = length;\r\n    }\r\n\r\n    function _addStakingToAllStakingsEnumeration(StakingInfo memory si) private {\r\n        _allStakingIndex[si.stakingId] = _allStakings.length;\r\n        _allStakings.push(si);\r\n    }\r\n\r\n    function _removeStakingFromOwnerEnumeration(address from, uint256 stakingId) private {\r\n        uint256 lastStakingIndex = balances[from] - 1;\r\n        uint256 stakingIndex = _ownedStakingsIndex[stakingId];\r\n\r\n        if (stakingIndex != lastStakingIndex) {\r\n            uint256 lastStakingId = _ownedStakings[from][lastStakingIndex];\r\n\r\n            _ownedStakings[from][stakingIndex] = lastStakingId;\r\n            _ownedStakingsIndex[lastStakingId] = stakingIndex;\r\n        }\r\n\r\n        delete _ownedStakingsIndex[stakingId];\r\n        delete _ownedStakings[from][lastStakingIndex];\r\n    }\r\n    \r\n    function _removeStakingFromAllStakingsEnumeration(uint256 stakingId) private {\r\n        uint256 lastStakingIndex = _allStakings.length - 1;\r\n        uint256 stakingIndex = _allStakingIndex[stakingId];\r\n\r\n        StakingInfo memory lastStakingInfo = _allStakings[lastStakingIndex];\r\n\r\n\r\n        _allStakings[stakingIndex] = lastStakingInfo;\r\n        _allStakingIndex[lastStakingInfo.stakingId] = stakingIndex;\r\n\r\n        delete _allStakingIndex[stakingId];\r\n        _allStakings.pop();\r\n    }\r\n\r\n    function stake(uint256 amount, uint8 stakingtype) external {\r\n        require(amount > 0, \"amount should be not zero\");\r\n        require(stakingToken.allowance(msg.sender, address(this)) >= amount, \"not enough allowance\");\r\n\r\n        stakingIdPointer = stakingIdPointer.add(1);\r\n        uint256 stakingId = stakingIdPointer;\r\n\r\n        StakingInfo memory si;\r\n        si.stakingId = stakingId;\r\n        si.amount = amount;\r\n        si.starttime = block.timestamp;\r\n        si.stakingtype = stakingtype;\r\n        si.claimedAmount = 0;\r\n\r\n        _addStakingToOwnerEnumeration(msg.sender, stakingId);\r\n        _addStakingToAllStakingsEnumeration(si);\r\n        balances[msg.sender]++;\r\n\r\n        stakingToken.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function unstake(uint256 stakingId) external {\r\n        require(stakingId <= stakingIdPointer, \"staking id is not valid\");\r\n\r\n        StakingInfo memory si = _allStakings[_allStakingIndex[stakingId]];\r\n        require((si.starttime + stakingPeriod[si.stakingtype]) < block.timestamp, \"still lock period\");\r\n\r\n        uint256 fee = apr[si.stakingtype];\r\n\r\n        uint256 availableAmount = (si.amount * fee ) *  (block.timestamp - si.starttime) / year / 100 / 100;\r\n        if(availableAmount > si.claimedAmount) {\r\n            getReward(stakingId);\r\n        }\r\n\r\n        uint256 amount = si.amount;\r\n        \r\n        _removeStakingFromOwnerEnumeration(msg.sender, stakingId);\r\n        _removeStakingFromAllStakingsEnumeration(stakingId);\r\n        balances[msg.sender]--;\r\n\r\n        stakingToken.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function getReward(uint256 stakingId) public {\r\n        require(stakingId <= stakingIdPointer, \"staking id is not valid\");\r\n\r\n        StakingInfo memory si = _allStakings[_allStakingIndex[stakingId]];\r\n\r\n        uint256 fee = apr[si.stakingtype];\r\n\r\n        // uint256 period = (block.timestamp - si.starttime);\r\n        // if((si.stakingtype != 0) && (period > stakingPeriod[si.stakingtype]))\r\n        //     period = stakingPeriod[si.stakingtype];\r\n            \r\n        // uint256 availableAmount = (si.amount * fee / 100) * period / year;\r\n\r\n        uint256 availableAmount = (si.amount * fee ) *  (block.timestamp - si.starttime) / year / 100 / 100;   // reward percentage can be (fee / 100)\r\n        require(availableAmount > si.claimedAmount, \"no available reward amount\");\r\n\r\n        _allStakings[_allStakingIndex[stakingId]].claimedAmount = availableAmount;\r\n\r\n        rewardsToken.transfer(msg.sender, (availableAmount - si.claimedAmount));\r\n    }\r\n\r\n    function getTotalLockedAmount() public view returns (uint256) {\r\n        uint256 amount = 0;\r\n        \r\n        for (uint256 i = 0; i < _allStakings.length; i++) {\r\n            StakingInfo memory si = _allStakings[i];\r\n            amount += si.amount;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function averageUnlockTime() public view returns (uint256) {\r\n        uint256 time = 0;\r\n\r\n        for (uint256 i = 0; i < _allStakings.length; i++) {\r\n            StakingInfo memory si = _allStakings[i];\r\n\r\n            if (si.starttime + stakingPeriod[si.stakingtype] > block.timestamp) {\r\n                time += si.starttime + stakingPeriod[si.stakingtype] - block.timestamp;\r\n            }\r\n        }\r\n\r\n        return time / _allStakings.length;\r\n    }\r\n\r\n    function claimableAmount(uint256 stakingId) external view returns (uint256) {\r\n        require(stakingId <= stakingIdPointer, \"staking id is not valid\");\r\n\r\n        StakingInfo memory si = _allStakings[_allStakingIndex[stakingId]];\r\n\r\n        uint256 fee = apr[si.stakingtype];\r\n        uint256 availableAmount = (si.amount * fee ) *  (block.timestamp - si.starttime) / year / 100 / 100;   // reward percentage can be (fee / 100)\r\n\r\n        if (availableAmount > si.claimedAmount) {\r\n            return availableAmount - si.claimedAmount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function averageAPR() public view returns (uint256) {\r\n        uint256 average_apr = 0;\r\n\r\n        for (uint256 i = 0; i < _allStakings.length; i++) {\r\n            StakingInfo memory si = _allStakings[i];\r\n\r\n            average_apr += apr[si.stakingtype];\r\n        }\r\n\r\n        return average_apr / _allStakings.length;\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"averageAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averageUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakingtype\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"stakingById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakingtype\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingRewards.StakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakingByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakingtype\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingRewards.StakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingIdPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stakingOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005d8c6aec4e1630e88ab8fa882a74763af5e4c96a0000000000000000000000005d8c6aec4e1630e88ab8fa882a74763af5e4c96a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3dbce989c53e6f85fbb4d929e05b05082178da7c7fcadc9c0adcba4fe4df9fe9"}]}