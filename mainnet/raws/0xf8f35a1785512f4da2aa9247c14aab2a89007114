{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StablecoinFarm.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IConversionPool.sol\\\";\\r\\n\\r\\ncontract StablecoinFarm is Ownable, ReentrancyGuard {\\r\\n    using SafeCast for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint24 constant HUNDRED_PERCENT = 1e6;\\r\\n    uint24 constant MIN_SLIPPAGE = 9e5;\\r\\n    uint24 constant MAX_REFERRER_USER_FEE = 3e5;\\r\\n    uint256 constant MIN_GLOBAL_AMOUNT = 1e20;\\r\\n    uint256 constant REFERRAL_ID_LENGTH = 8;\\r\\n    \\r\\n    IConversionPool public conversionPool;\\r\\n    IERC20 immutable public outputToken;\\r\\n    IERC20 immutable public inputToken;\\r\\n    IERC20 immutable public wUST;\\r\\n    uint256 immutable MULTIPLIER;\\r\\n\\r\\n    uint128 public autoGlobalAmount;\\r\\n    address public feeCollector;\\r\\n    address public manager;\\r\\n    uint24 public feePercentage;\\r\\n    uint24 public swapSlippage = 998000;\\r\\n    uint24 public depositSlippage = HUNDRED_PERCENT;\\r\\n    uint24 public withdrawSlippage = HUNDRED_PERCENT;\\r\\n\\r\\n    struct User {\\r\\n        uint128 depositedAmount;\\r\\n        uint128 shares;\\r\\n        uint128 pendingWithdrawAmount;\\r\\n        uint128 yieldRegistered;\\r\\n        string referrerId;\\r\\n    }\\r\\n    mapping(address => User) public users;\\r\\n\\r\\n    struct GlobalState {\\r\\n        uint128 totalPendingAmount;\\r\\n        uint128 totalShares;\\r\\n        uint128 totalPendingWithdrawAmount;\\r\\n        uint128 totalPendingWithdrawShares;\\r\\n    }\\r\\n    GlobalState public globalState;\\r\\n    \\r\\n    struct Referrer {\\r\\n        address referrer;\\r\\n        uint24 userFee;\\r\\n        uint24 baseFee;\\r\\n    }\\r\\n    mapping(string => Referrer) public referrers;\\r\\n\\r\\n    event Deposit(address indexed user, string indexed referrerId, uint256 amount, uint256 shares, uint256 timestamp);\\r\\n    event Withdraw(address indexed user, uint256 amount, uint256 fee, uint256 shares, uint256 timestamp, bool finished);\\r\\n    event FinishWithdraw(address indexed user, uint256 amount);\\r\\n    event GlobalDeposit(address sender, uint256 amountOut, uint256 timestamp);\\r\\n    event GlobalWithdraw(address sender, uint256 shares, uint256 timestamp);\\r\\n    event IncludeLeftover(address sender, uint256 leftover);\\r\\n    event ChargeFee(address indexed user, string indexed referrerId, uint256 feeShares, uint256 baseFeeShares);\\r\\n    event SetReferrer(string id, address referrer, uint24 userFee);\\r\\n    event SlippageChange(uint256 newSlippage, uint256 slippageType);\\r\\n\\r\\n    constructor(\\r\\n        IConversionPool _conversionPool,\\r\\n        IERC20 _inputToken, \\r\\n        IERC20 _outputToken, \\r\\n        IERC20 _wUST, \\r\\n        address _feeCollector,\\r\\n        uint24 _feePercentage,\\r\\n        uint128 _autoGlobalAmount,\\r\\n        bool usingConversionPool\\r\\n    ) {\\r\\n        if (usingConversionPool) {\\r\\n            require(_inputToken == _conversionPool.inputToken());\\r\\n            require(_outputToken == _conversionPool.outputToken());\\r\\n            require(_wUST == _conversionPool.proxyInputToken());\\r\\n        }\\r\\n\\r\\n        require(_feeCollector != address(0), \\\"StablecoinFarm: zero address\\\");\\r\\n        require(_feePercentage <= HUNDRED_PERCENT, \\\"StablecoinFarm: fee higher than 100%\\\");\\r\\n        MULTIPLIER = 10 ** (36 - IERC20Metadata(address(_inputToken)).decimals());\\r\\n\\r\\n        conversionPool = _conversionPool;\\r\\n        inputToken = _inputToken;\\r\\n        outputToken = _outputToken;\\r\\n        wUST = _wUST;\\r\\n\\r\\n        feeCollector = _feeCollector;\\r\\n        feePercentage = _feePercentage;\\r\\n        autoGlobalAmount = _autoGlobalAmount;\\r\\n        manager = msg.sender;\\r\\n    }\\r\\n\\r\\n    // =================== OWNER FUNCTIONS  =================== //\\r\\n\\r\\n    function setFee(uint24 newFeePercentage) external onlyOwner {\\r\\n        require(newFeePercentage <= HUNDRED_PERCENT, \\\"StablecoinFarm: fee higher than 100%\\\");\\r\\n        feePercentage = newFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setAutoGlobalAmount(uint128 newValue) external onlyOwner {\\r\\n        autoGlobalAmount = newValue;\\r\\n    }\\r\\n\\r\\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\\r\\n        feeCollector = newFeeCollector;\\r\\n    }\\r\\n\\r\\n    function setManager(address newManager) external onlyOwner {\\r\\n        manager = newManager;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        Only owner can modify fee on feePercentage part.\\r\\n        @param id - referral id\\r\\n        @param fee - moving this percentage of fees from feeCollector to the referrer address\\r\\n    */\\r\\n    function setReferrerFee(string calldata id, uint24 fee) external onlyOwner {\\r\\n        require(referrers[id].referrer != address(0), \\\"StablecoinFarm: invalid referral id\\\");\\r\\n        require(fee <= HUNDRED_PERCENT);\\r\\n        referrers[id].baseFee = fee;\\r\\n    }\\r\\n    \\r\\n    function setSlippage(uint24 newSlippage, uint8 slippageType) external {\\r\\n        require(msg.sender == manager || msg.sender == owner(), \\\"StablecoinFarm: unauthorized\\\");\\r\\n        require(newSlippage <= HUNDRED_PERCENT, \\\"StablecoinFarm: slippage higher than 100%\\\");\\r\\n        require(newSlippage >= MIN_SLIPPAGE, \\\"StablecoinFarm: invalid slippage\\\");\\r\\n\\r\\n        if (slippageType == 0) {\\r\\n            swapSlippage = newSlippage;\\r\\n        } else if (slippageType == 1) {\\r\\n            depositSlippage = newSlippage;\\r\\n        } else {\\r\\n            withdrawSlippage = newSlippage;\\r\\n        }\\r\\n\\r\\n        emit SlippageChange(newSlippage, slippageType);\\r\\n    }\\r\\n\\r\\n    // =================== EXTERNAL FUNCTIONS  =================== //\\r\\n\\r\\n    /**\\r\\n        Single user deposit. User deposits token and the smart contract issues anchor shares to the user based on the share price.\\r\\n        @param amount amount of token to deposit\\r\\n     */\\r\\n    function deposit(uint128 amount, string calldata referrerId) external nonReentrant returns (uint128 amountWithSlippage) {\\r\\n        IExchangeRateFeeder _feeder = conversionPool.feeder();\\r\\n        amountWithSlippage = (uint256(amount) * depositSlippage / HUNDRED_PERCENT).toUint128();\\r\\n        uint128 shares = (MULTIPLIER * amountWithSlippage / _feeder.exchangeRateOf(address(inputToken), true)).toUint128();\\r\\n        require(shares > 0, \\\"StablecoinFarm: 0 shares\\\"); \\r\\n\\r\\n        _setUserReferrer(amount, referrerId);\\r\\n        User storage user = users[msg.sender];\\r\\n        user.shares += shares;\\r\\n        user.depositedAmount += amountWithSlippage;\\r\\n\\r\\n        if (globalState.totalPendingWithdrawShares >= shares) {\\r\\n            globalState.totalPendingWithdrawShares -= shares;\\r\\n        } else {\\r\\n            globalState.totalPendingAmount += amount;\\r\\n            globalState.totalShares += shares;\\r\\n        }\\r\\n\\r\\n        inputToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        emit Deposit(msg.sender, referrerId, amountWithSlippage, shares, block.timestamp);\\r\\n\\r\\n        if (amount * MULTIPLIER / 1e18 >= autoGlobalAmount) {\\r\\n            _globalDeposit(globalState.totalPendingAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Sends back min(requestedAmount, maxWithdrawable) amount of token if there's enough balance. \\r\\n        If not, add sender's shares to the globalWithdraw pool and assign pendingWithdrawAmount to the sender.\\r\\n        @param requestedAmount withdraw maximally this amount\\r\\n     */\\r\\n    function withdraw(uint128 requestedAmount) external nonReentrant returns (uint128 withdrawAmount, uint128 fee, bool finished) {\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        (uint128 maxWithdrawableAmount, uint128 _fee) = _chargeFee(msg.sender);\\r\\n        fee = _fee;\\r\\n        withdrawAmount = requestedAmount > maxWithdrawableAmount ? maxWithdrawableAmount : requestedAmount;\\r\\n        require(withdrawAmount > 0, \\\"StablecoinFarm: nothing to withdraw\\\");\\r\\n        uint128 sharesNeeded = (user.shares - uint256(maxWithdrawableAmount - withdrawAmount) * user.shares / maxWithdrawableAmount).toUint128();\\r\\n        \\r\\n        if (withdrawAmount <= globalState.totalPendingAmount) {\\r\\n            // remove from pending deposits, tokens can be sent immediately\\r\\n            globalState.totalPendingAmount -= withdrawAmount;\\r\\n            globalState.totalShares -= sharesNeeded;\\r\\n            finished = true;\\r\\n        } else {\\r\\n            globalState.totalPendingWithdrawShares += sharesNeeded;\\r\\n\\r\\n            uint256 freeBalance;\\r\\n            if (inputToken.balanceOf(address(this)) > globalState.totalPendingAmount) {\\r\\n                freeBalance = inputToken.balanceOf(address(this)) - globalState.totalPendingAmount;\\r\\n            }\\r\\n\\r\\n            if (freeBalance >= withdrawAmount) {\\r\\n                // enough balance, tokens can be sent immediately\\r\\n                finished = true;\\r\\n            } else {\\r\\n                globalState.totalPendingWithdrawAmount += withdrawAmount;\\r\\n                user.pendingWithdrawAmount += withdrawAmount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint128 deductAmount = withdrawAmount;\\r\\n        if (user.yieldRegistered > deductAmount) {\\r\\n            user.yieldRegistered -= deductAmount;\\r\\n            deductAmount = 0;\\r\\n        } else {\\r\\n            deductAmount -= user.yieldRegistered;\\r\\n            user.yieldRegistered = 0;\\r\\n        }\\r\\n        if (user.depositedAmount > deductAmount) {\\r\\n            user.depositedAmount -= deductAmount;\\r\\n        } else {\\r\\n            user.depositedAmount = 0;\\r\\n        }\\r\\n\\r\\n        user.shares -= sharesNeeded;\\r\\n        if (finished) {\\r\\n            inputToken.safeTransfer(msg.sender, withdrawAmount);\\r\\n        } else {\\r\\n            if (withdrawAmount * MULTIPLIER / 1e18 >= autoGlobalAmount) {\\r\\n                _globalWithdraw(globalState.totalPendingWithdrawShares);\\r\\n            }\\r\\n        }\\r\\n        emit Withdraw(msg.sender, withdrawAmount, fee, sharesNeeded, block.timestamp, finished);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        Deposit totalPendingAmount into ETH Anchor.\\r\\n        @param amount maximally this amount of pendingAmount\\r\\n     */\\r\\n    function globalDeposit(uint128 amount) external nonReentrant {\\r\\n        _globalDeposit(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Withdraws totalPendingWithdrawShares from ETH Anchor.\\r\\n        @param shares maximally withdraw this amount of shares\\r\\n     */\\r\\n    function globalWithdraw(uint128 shares) external nonReentrant {\\r\\n        _globalWithdraw(shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        If there's not enough inputToken balance when a user calls withdraw function, \\r\\n        a pendingWithdrawAmount is assigned to him. This function sends them the pendingWithdrawAmount.\\r\\n        @param userAddresses users to finish their withdraw for\\r\\n        @param wUSTWithdraw whether to withdraw in UST\\r\\n     */\\r\\n    function finishWithdraws(address[] calldata userAddresses, bool wUSTWithdraw) external nonReentrant {\\r\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\r\\n            address userAddress = userAddresses[i];\\r\\n            User storage user = users[userAddress];\\r\\n            uint128 pendingWithdrawAmount = user.pendingWithdrawAmount;\\r\\n            require(pendingWithdrawAmount > 0, \\\"StablecoinFarm: no pending withdraw amount\\\");\\r\\n\\r\\n            user.pendingWithdrawAmount = 0;\\r\\n            globalState.totalPendingWithdrawAmount -= pendingWithdrawAmount;\\r\\n\\r\\n            if (!wUSTWithdraw) {\\r\\n                inputToken.safeTransfer(userAddress, pendingWithdrawAmount);\\r\\n            } else {\\r\\n                wUST.safeTransfer(userAddress, pendingWithdrawAmount);\\r\\n            }\\r\\n            \\r\\n            emit FinishWithdraw(userAddress, pendingWithdrawAmount);\\r\\n        }\\r\\n\\r\\n        if (!wUSTWithdraw || inputToken == wUST) {\\r\\n            require(inputToken.balanceOf(address(this)) >= globalState.totalPendingAmount, \\\"StablecoinFarm: not enough balance\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Charge fees manually.\\r\\n        @param userAddresses charge fee to these users\\r\\n     */\\r\\n    function chargeFees(address[] calldata userAddresses) external {\\r\\n        for (uint256 i = 0; i < userAddresses.length; i++) {\\r\\n            _chargeFee(userAddresses[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Useful when received more amount than expected after globalWithdraw.\\r\\n     */\\r\\n    function includeLeftover() external {\\r\\n        uint128 leftover = (inputToken.balanceOf(address(this)) - globalState.totalPendingAmount - globalState.totalPendingWithdrawAmount).toUint128();\\r\\n        globalState.totalPendingAmount += leftover;\\r\\n        emit IncludeLeftover(msg.sender, leftover);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Anyone can create a referral object.\\r\\n        @param id - referral id\\r\\n        @param referrer - address receiving fees\\r\\n        @param userFee - fee on user part where the base is the user maxWithdrawable with already deducted feePercentage\\r\\n     */\\r\\n    function setReferrer(string calldata id, address referrer, uint24 userFee) external {\\r\\n        require(bytes(id).length == REFERRAL_ID_LENGTH, \\\"StablecoinFarm: id invalid length\\\");\\r\\n        require(referrer != address(0), \\\"StablecoinFarm: zero address\\\");\\r\\n        require(userFee <= MAX_REFERRER_USER_FEE, \\\"StablecoinFarm: user fee too high\\\");\\r\\n        require(referrers[id].referrer == address(0) || referrers[id].referrer == msg.sender, \\\"StablecoinFarm: unauthorized\\\");\\r\\n\\r\\n        referrers[id].referrer = referrer;\\r\\n        referrers[id].userFee = userFee;\\r\\n        emit SetReferrer(id, referrer, userFee);\\r\\n    }\\r\\n\\r\\n    // =================== INTERNAl FUNCTIONS  =================== //\\r\\n\\r\\n    /**\\r\\n        Move some shares of a user to the feeCollector. The fee is based only on yield, not on deposit plus yield.\\r\\n        @param userAddress charge fee to this user\\r\\n     */\\r\\n    function _chargeFee(address userAddress) private returns (uint128 maxWithdrawableAmount, uint128 fee) {\\r\\n        User storage user = users[userAddress];\\r\\n        IExchangeRateFeeder _feeder = conversionPool.feeder();\\r\\n        maxWithdrawableAmount = (uint256(user.shares) * _feeder.exchangeRateOf(address(inputToken), true) * withdrawSlippage / MULTIPLIER / HUNDRED_PERCENT).toUint128();\\r\\n        if (userAddress == feeCollector) return (maxWithdrawableAmount, 0);\\r\\n\\r\\n        uint128 yieldRegistered = user.depositedAmount + user.yieldRegistered;\\r\\n        uint128 yield = maxWithdrawableAmount > yieldRegistered ? maxWithdrawableAmount - yieldRegistered : 0;\\r\\n        if (yield > 0) {\\r\\n            uint256 referrerUserFeePercentage = uint256(referrers[user.referrerId].userFee) * (HUNDRED_PERCENT - feePercentage) / HUNDRED_PERCENT;\\r\\n            uint256 absoluteFeePercentage = feePercentage + referrerUserFeePercentage;\\r\\n            fee = (uint256(yield) * absoluteFeePercentage / HUNDRED_PERCENT).toUint128();\\r\\n            uint128 feeShares = (user.shares - uint256(maxWithdrawableAmount - fee) * user.shares / maxWithdrawableAmount).toUint128();\\r\\n            \\r\\n            user.yieldRegistered += yield - fee;\\r\\n            user.shares -= feeShares;\\r\\n            maxWithdrawableAmount -= fee;\\r\\n\\r\\n            (uint128 baseFeeShares) = _splitFee(fee, feeShares, user.referrerId, referrerUserFeePercentage);\\r\\n            emit ChargeFee(userAddress, user.referrerId, feeShares, baseFeeShares);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _splitFee(\\r\\n        uint128 fee, \\r\\n        uint128 feeShares, \\r\\n        string memory referrerId, \\r\\n        uint256 referrerUserFeePercentage\\r\\n    ) private returns (uint128) {\\r\\n        uint256 referrerFeePercentage = uint256(referrers[referrerId].baseFee) * feePercentage / HUNDRED_PERCENT;\\r\\n        referrerFeePercentage += referrerUserFeePercentage;\\r\\n        uint256 referrerFeeRatio = referrerFeePercentage * HUNDRED_PERCENT / (feePercentage + referrerUserFeePercentage);\\r\\n        \\r\\n        address referrer = referrers[referrerId].referrer;\\r\\n        uint128 referrerFee = (uint256(fee) * referrerFeeRatio / HUNDRED_PERCENT).toUint128();\\r\\n        uint128 referrerFeeShares = (uint256(feeShares) * referrerFeeRatio / HUNDRED_PERCENT).toUint128();\\r\\n        users[referrer].depositedAmount += referrerFee;\\r\\n        users[referrer].shares += referrerFeeShares;\\r\\n\\r\\n        uint128 baseFee = fee - referrerFee;\\r\\n        uint128 baseFeeShares = feeShares - referrerFeeShares;\\r\\n        users[feeCollector].depositedAmount += baseFee;\\r\\n        users[feeCollector].shares += baseFeeShares;\\r\\n        return baseFeeShares;\\r\\n    }\\r\\n\\r\\n    function _setUserReferrer(uint128 amount, string calldata referrerId) private {\\r\\n        require(bytes(referrerId).length == 0 || referrers[referrerId].referrer != address(0), \\\"StablecoinFarm: invalid referral id\\\");\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        if (amount > user.depositedAmount) {\\r\\n            // change referrer if user deposited more\\r\\n            _chargeFee(msg.sender); // charge fee before changing the referrer\\r\\n            user.referrerId = referrerId;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _globalDeposit(uint128 amount) private {\\r\\n        if (amount > globalState.totalPendingAmount) amount = globalState.totalPendingAmount;\\r\\n        require(amount * MULTIPLIER / 1e18 >= MIN_GLOBAL_AMOUNT, \\\"StablecoinFarm: not enough amount to deposit\\\");\\r\\n        \\r\\n        uint256 minReceived = MULTIPLIER * amount * swapSlippage / HUNDRED_PERCENT / 1e18; // in wUST\\r\\n        _anchorDeposit(amount, minReceived);\\r\\n\\r\\n        globalState.totalPendingAmount -= amount;\\r\\n        emit GlobalDeposit(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _globalWithdraw(uint128 shares) private {\\r\\n        if (shares > globalState.totalPendingWithdrawShares) shares = globalState.totalPendingWithdrawShares;\\r\\n        IExchangeRateFeeder _feeder = conversionPool.feeder();\\r\\n        uint256 rate = _feeder.exchangeRateOf(address(inputToken), true);\\r\\n        uint128 sharesValue = (uint256(shares) * rate / MULTIPLIER).toUint128();\\r\\n\\r\\n        if (sharesValue > globalState.totalPendingAmount) {\\r\\n            uint128 withdrawShares = shares;\\r\\n            withdrawShares -= (MULTIPLIER * globalState.totalPendingAmount / rate).toUint128();\\r\\n            globalState.totalPendingAmount = 0;\\r\\n\\r\\n            require(withdrawShares >= MIN_GLOBAL_AMOUNT, \\\"StablecoinFarm: not enough shares to withdraw\\\");\\r\\n            _anchorWithdraw(withdrawShares);\\r\\n        } else {\\r\\n            globalState.totalPendingAmount -= sharesValue;\\r\\n        }\\r\\n\\r\\n        globalState.totalShares -= shares;\\r\\n        globalState.totalPendingWithdrawShares -= shares;\\r\\n        emit GlobalWithdraw(msg.sender, shares, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _anchorDeposit(uint256 amount, uint256 minReceived) internal virtual {\\r\\n        inputToken.safeIncreaseAllowance(address(conversionPool), amount);\\r\\n        conversionPool.deposit(amount, minReceived);\\r\\n    }\\r\\n\\r\\n    function _anchorWithdraw(uint256 shares) internal virtual {\\r\\n        outputToken.safeIncreaseAllowance(address(conversionPool), shares);\\r\\n        conversionPool.redeem(shares);\\r\\n    }\\r\\n\\r\\n    // =================== VIEW FUNCTIONS  =================== //\\r\\n\\r\\n    function getUserMaxWithdrawable(address userAddress) external view returns (uint128 maxWithdrawableAmount) {\\r\\n        User storage user = users[userAddress];\\r\\n        IExchangeRateFeeder _feeder = conversionPool.feeder();\\r\\n        maxWithdrawableAmount = (uint256(user.shares) * _feeder.exchangeRateOf(address(inputToken), true) * withdrawSlippage / MULTIPLIER / HUNDRED_PERCENT).toUint128();\\r\\n        if (userAddress == feeCollector) return maxWithdrawableAmount;\\r\\n\\r\\n        uint128 yieldRegistered = user.depositedAmount + user.yieldRegistered;\\r\\n        uint128 yield = maxWithdrawableAmount > yieldRegistered ? maxWithdrawableAmount - yieldRegistered : 0;\\r\\n        if (yield > 0) {\\r\\n            uint256 referrerUserFeePercentage = uint256(referrers[user.referrerId].userFee) * (HUNDRED_PERCENT - feePercentage) / HUNDRED_PERCENT;\\r\\n            uint256 absoluteFeePercentage = feePercentage + referrerUserFeePercentage;\\r\\n            uint128 fee = (uint256(yield) * absoluteFeePercentage / HUNDRED_PERCENT).toUint128();\\r\\n            maxWithdrawableAmount -= fee;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function token() external view returns (IERC20) {\\r\\n        return inputToken;\\r\\n    }\\r\\n\\r\\n    function aUST() external view returns (IERC20) {\\r\\n        return outputToken;\\r\\n    }\\r\\n\\r\\n    function feeder() external view returns (IExchangeRateFeeder) {\\r\\n        return conversionPool.feeder();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConversionPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IExchangeRateFeeder.sol\\\";\\r\\n\\r\\ninterface IConversionPool {\\r\\n    function deposit(uint256 _amount, uint256 _minAmountOut) external;\\r\\n    function redeem(uint256 _amount) external;\\r\\n    function inputToken() external view returns (IERC20);\\r\\n    function outputToken() external view returns (IERC20);\\r\\n    function proxyInputToken() external view returns (IERC20);\\r\\n    function feeder() external view returns (IExchangeRateFeeder);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExchangeRateFeeder.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IExchangeRateFeeder {\\r\\n    function exchangeRateOf(address _token, bool _simulate) external view returns (uint256);\\r\\n    function update(address _token) external;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IConversionPool\",\"name\":\"_conversionPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wUST\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_feePercentage\",\"type\":\"uint24\"},{\"internalType\":\"uint128\",\"name\":\"_autoGlobalAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"usingConversionPool\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"referrerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFeeShares\",\"type\":\"uint256\"}],\"name\":\"ChargeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"referrerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinishWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GlobalDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GlobalWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftover\",\"type\":\"uint256\"}],\"name\":\"IncludeLeftover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"userFee\",\"type\":\"uint24\"}],\"name\":\"SetReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippageType\",\"type\":\"uint256\"}],\"name\":\"SlippageChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aUST\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoGlobalAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"chargeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionPool\",\"outputs\":[{\"internalType\":\"contract IConversionPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"referrerId\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amountWithSlippage\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSlippage\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeder\",\"outputs\":[{\"internalType\":\"contract IExchangeRateFeeder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"wUSTWithdraw\",\"type\":\"bool\"}],\"name\":\"finishWithdraws\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMaxWithdrawable\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"maxWithdrawableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"globalDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalState\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalPendingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalShares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalPendingWithdrawAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalPendingWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"name\":\"globalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"includeLeftover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"userFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"baseFee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newValue\",\"type\":\"uint128\"}],\"name\":\"setAutoGlobalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"newFeePercentage\",\"type\":\"uint24\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"userFee\",\"type\":\"uint24\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setReferrerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"newSlippage\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"slippageType\",\"type\":\"uint8\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingWithdrawAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"yieldRegistered\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"referrerId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wUST\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"requestedAmount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSlippage\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StablecoinFarm", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000053fd7e8fec0ac80cf93aa872026eadf50cb925f3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000094ead8f528a3af425de14cfdda727b218915687c000000000000000000000000a47c8bf37f92abed4a126bda807a7b7498661acd000000000000000000000000cb51d3e1111e665c588bfdedc5fc07681a6a606500000000000000000000000000000000000000000000000000000000000124f8000000000000000000000000000000000000000000000cb49b44ba602d8000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}