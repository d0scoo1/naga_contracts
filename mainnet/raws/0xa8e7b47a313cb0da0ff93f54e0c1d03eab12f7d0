{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//////////////////////////////////////////////\r\n//   ____         ______     __             //\r\n//  /_  / ___ ___/_  __/__  / /_____ ___    //\r\n//   / /_/ -_) _ \\/ / / _ \\/  '_/ -_) _ \\   //\r\n//  /___/\\__/_//_/_/  \\___/_/\\_\\\\__/_//_/   //\r\n//                     by 0xInuarashi.eth   //\r\n//////////////////////////////////////////////                                      \r\n\r\n/*\r\n    ERC20I (ERC20 0xInuarashi Edition)\r\n    Minified and Gas Optimized\r\n    Contributors: 0xInuarashi (Message to Martians, Anonymice), 0xBasset (Ether Orcs)\r\n*/\r\n\r\ncontract ERC20I {\r\n    // Token Params\r\n    string public name;\r\n    string public symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n\r\n    // Decimals\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Supply\r\n    uint256 public totalSupply;\r\n    \r\n    // Mappings of Balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Internal Functions\r\n    function _mint(address to_, uint256 amount_) internal virtual {\r\n        totalSupply += amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(address(0x0), to_, amount_);\r\n    }\r\n    function _burn(address from_, uint256 amount_) internal virtual {\r\n        balanceOf[from_] -= amount_;\r\n        totalSupply -= amount_;\r\n        emit Transfer(from_, address(0x0), amount_);\r\n    }\r\n    function _approve(address owner_, address spender_, uint256 amount_) internal virtual {\r\n        allowance[owner_][spender_] = amount_;\r\n        emit Approval(owner_, spender_, amount_);\r\n    }\r\n\r\n    // Public Functions\r\n    function approve(address spender_, uint256 amount_) public virtual returns (bool) {\r\n        _approve(msg.sender, spender_, amount_);\r\n        return true;\r\n    }\r\n    function transfer(address to_, uint256 amount_) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(msg.sender, to_, amount_);\r\n        return true;\r\n    }\r\n    function transferFrom(address from_, address to_, uint256 amount_) public virtual returns (bool) {\r\n        if (allowance[from_][msg.sender] != type(uint256).max) {\r\n            allowance[from_][msg.sender] -= amount_; }\r\n        balanceOf[from_] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(from_, to_, amount_);\r\n        return true;\r\n    }\r\n}\r\n\r\nabstract contract ERC20IBurnable is ERC20I {\r\n    function burn(uint256 amount_) external virtual {\r\n        _burn(msg.sender, amount_);\r\n    }\r\n    function burnFrom(address from_, uint256 amount_) public virtual {\r\n        uint256 _currentAllowance = allowance[from_][msg.sender];\r\n        require(_currentAllowance >= amount_, \"ERC20IBurnable: Burn amount requested exceeds allowance!\");\r\n\r\n        if (allowance[from_][msg.sender] != type(uint256).max) {\r\n            allowance[from_][msg.sender] -= amount_; }\r\n\r\n        _burn(from_, amount_);\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner; \r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(owner == msg.sender, \"Not Owner!\"); _; }\r\n    function transferOwnership(address new_) external onlyOwner { owner = new_; }\r\n}\r\n\r\nabstract contract Minterable is Ownable {\r\n    mapping(address => bool) public minters;\r\n    modifier onlyMinter { require(minters[msg.sender], \"Not Minter!\"); _; }\r\n    function setMinter(address address_, bool bool_) external onlyOwner {\r\n        minters[address_] = bool_;\r\n    }\r\n}\r\n\r\nabstract contract Burnerable is Ownable {\r\n    mapping(address => bool) public burners;\r\n    modifier onlyBurner { require(burners[msg.sender], \"Not Burner!\"); _; }\r\n    function setBurner(address address_, bool bool_) external onlyOwner {\r\n        burners[address_] = bool_;\r\n    }\r\n}\r\n\r\ncontract ZenToken is ERC20I(\"ZenToken\", \"ZEN\"), ERC20IBurnable, \r\nMinterable, Burnerable {\r\n    function mintAsController(address to_, uint256 amount_) external onlyMinter {\r\n        _mint(to_, amount_);\r\n    }\r\n    function burnAsController(address from_, uint256 amount_) external onlyBurner {\r\n        _burn(from_, amount_);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnAsController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mintAsController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZenToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9cd9cce9e56bec3255483594dcb3c5605b8829d7ed3585e4badca6fb1c35714"}]}