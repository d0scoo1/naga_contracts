{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CalcLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\n\\r\\n\\r\\nlibrary CalcLib {\\r\\n    struct ColorScheme {\\r\\n        string[2] gradient1;\\r\\n        string[2] gradient2;\\r\\n        string[2] gradient3;\\r\\n        string[2] gradient4;\\r\\n        string buttonBackground;\\r\\n        string borderStrip;\\r\\n        string buttonText;\\r\\n        string screenText;\\r\\n        string screen;\\r\\n        string ownerText;\\r\\n\\r\\n    }\\r\\n\\r\\n    string internal constant svgStart = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 550 760\\\">';\\r\\n    \\r\\n    string internal constant svgButtons = ' <g stroke=\\\"#303133\\\" stroke-width=\\\"5\\\" fill=\\\"url(#Gradient2)\\\" > <rect onclick=\\\"handleNumber(1)\\\" rx=\\\"7\\\" x=\\\"50\\\" y=\\\"530\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(2)\\\" rx=\\\"7\\\" x=\\\"150\\\" y=\\\"530\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(3)\\\" rx=\\\"7\\\" x=\\\"250\\\" y=\\\"530\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(4)\\\" rx=\\\"7\\\" x=\\\"50\\\" y=\\\"430\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(5)\\\" rx=\\\"7\\\" x=\\\"150\\\" y=\\\"430\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(6)\\\" rx=\\\"7\\\" x=\\\"250\\\" y=\\\"430\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(7)\\\" rx=\\\"7\\\" x=\\\"50\\\" y=\\\"330\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(8)\\\" rx=\\\"7\\\" x=\\\"150\\\" y=\\\"330\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(9)\\\" rx=\\\"7\\\" x=\\\"250\\\" y=\\\"330\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(0)\\\" rx=\\\"7\\\" x=\\\"50\\\" y=\\\"630\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleNumber(symbols.dec)\\\" rx=\\\"7\\\" x=\\\"150\\\" y=\\\"630\\\" width=\\\"80\\\" height=\\\"80\\\"/> //. <rect onclick=\\\"handleOp(add, symbols.add)\\\" rx=\\\"7\\\" x=\\\"350\\\" y=\\\"530\\\" width=\\\"150\\\" height=\\\"80\\\"/> //+ <rect onclick=\\\"handleOp(sub, symbols.sub)\\\" rx=\\\"7\\\" x=\\\"350\\\" y=\\\"430\\\" width=\\\"150\\\" height=\\\"80\\\"/> //- <rect onclick=\\\"handleOp(mul, symbols.mul)\\\" rx=\\\"7\\\" x=\\\"350\\\" y=\\\"330\\\" width=\\\"150\\\" height=\\\"80\\\"/> //x <rect onclick=\\\"handleOp(div, symbols.div)\\\" rx=\\\"7\\\" x=\\\"350\\\" y=\\\"230\\\" width=\\\"150\\\" height=\\\"80\\\"/> // / <rect onclick=\\\"handleOp(mod, symbols.mod)\\\" rx=\\\"7\\\" x=\\\"150\\\" y=\\\"230\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"handleOp(pow, symbols.pow)\\\" rx=\\\"7\\\" x=\\\"250\\\" y=\\\"230\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"clearScreen()\\\" fill=\\\"url(#Gradient3)\\\" rx=\\\"7\\\" x=\\\"50\\\" y=\\\"230\\\" width=\\\"80\\\" height=\\\"80\\\"/> <rect onclick=\\\"equals()\\\" fill=\\\"url(#Gradient1)\\\" rx=\\\"7\\\" x=\\\"250\\\" y=\\\"630\\\" width=\\\"250\\\" height=\\\"80\\\"/> </g >';\\r\\n    \\r\\n    string internal constant svgButtonText = '<g class=\\\"button\\\"> <text onclick=\\\"equals()\\\" stroke=\\\"none\\\" x=\\\"360\\\" y=\\\"685\\\">=</text> <text onclick=\\\"clearScreen()\\\" x=\\\"71\\\" y=\\\"285\\\">C</text> <text onclick=\\\"handleNumber(1)\\\" x=\\\"75\\\" y=\\\"585\\\">1</text> <text onclick=\\\"handleNumber(2)\\\" x=\\\"175\\\" y=\\\"585\\\">2</text> <text onclick=\\\"handleNumber(3)\\\" x=\\\"275\\\" y=\\\"585\\\">3</text> <text onclick=\\\"handleNumber(4)\\\" x=\\\"75\\\" y=\\\"485\\\">4</text> <text onclick=\\\"handleNumber(5)\\\" x=\\\"175\\\" y=\\\"485\\\">5</text> <text onclick=\\\"handleNumber(6)\\\" x=\\\"275\\\" y=\\\"485\\\">6</text> <text onclick=\\\"handleNumber(7)\\\" x=\\\"75\\\" y=\\\"385\\\">7</text> <text onclick=\\\"handleNumber(8)\\\" x=\\\"175\\\" y=\\\"385\\\">8</text> <text onclick=\\\"handleNumber(9)\\\" x=\\\"275\\\" y=\\\"385\\\">9</text> <text onclick=\\\"handleNumber(0)\\\" x=\\\"75\\\" y=\\\"685\\\">0</text> <text onclick=\\\"handleNumber(symbols.dec)\\\" x=\\\"183\\\" y=\\\"674\\\">.</text> <text onclick=\\\"handleOp(add, symbols.add)\\\" x=\\\"408\\\" y=\\\"585\\\">+</text> <text onclick=\\\"handleOp(sub, symbols.sub)\\\" x=\\\"415\\\" y=\\\"481\\\">-</text> <text onclick=\\\"handleOp(mul, symbols.mul)\\\" x=\\\"410\\\" y=\\\"380\\\">x</text> <text onclick=\\\"handleOp(div, symbols.div)\\\" x=\\\"410\\\" y=\\\"286\\\">/</text> <text onclick=\\\"handleOp(mod, symbols.mod)\\\" x=\\\"165\\\" y=\\\"285\\\">%</text> <text onclick=\\\"handleOp(pow, symbols.pow)\\\" x=\\\"275\\\" y=\\\"293\\\">^</text> </g>';\\r\\n    string internal constant svgEnd = '<script type=\\\"text/javascript\\\"><![CDATA[ var symbols={mul:\\\"x\\\",div:\\\"/\\\",mod:\\\"%\\\",sub:\\\"-\\\",add:\\\"+\\\",dec:\\\".\\\",pow:\\\"^\\\"},screenLarge=document.getElementById(\\\"screenLarge\\\"),screenTop=document.getElementById(\\\"screenTop\\\"),screenTiny=document.getElementById(\\\"screenTiny\\\");function add(e,t){var n=e+t;return sizeResult(n),n}function sub(e,t){var n=e-t;return sizeResult(n),n}function mul(e,t){var n=e*t;return sizeResult(n),n}function div(e,t){var n=e/t;return sizeResult(n),n}function mod(e,t){var n=e%t;return sizeResult(n),n}function pow(e,t){var n=e**t;return sizeResult(n),n}function equals(){if(0==Number(secondNum)&&operationSym==symbols.div)return screenLarge.textContent=\\\"error\\\",void(readyToClear=!0);firstNum.length+secondNum.length<19?screenTop.textContent=firstNum+\\\" \\\"+operationSym+\\\" \\\"+secondNum+\\\" =\\\":firstNum.length<19?(secondNum=secondNum.slice(0,19-firstNum.length),screenTop.textContent=firstNum+\\\" \\\"+operationSym+\\\" \\\"+secondNum+\\\"... =\\\"):screenTop.textContent=firstNum.slice(0,20)+\\\"... =\\\",firstNum=operation(Number(firstNum),Number(secondNum)).toString(),readyToClear=!0}function sizeResult(e){if(e.toString().length<13)screenLarge.setAttribute(\\\"class\\\",\\\"large\\\"),screenLarge.textContent=e.toString();else{if(!(e.toString().length<24))return screenLarge.textContent=e.toString().slice(0,24)+\\\"...\\\",void(screenTiny.textContent=\\\"too large\\\");screenLarge.setAttribute(\\\"class\\\",\\\"small\\\"),screenLarge.textContent=e.toString()}}function clearScreen(){screenLarge.textContent=\\\"\\\",screenTop.textContent=\\\"\\\",numCounter=1,firstNum=\\\"\\\",secondNum=\\\"\\\",operation=null,operationSym=\\\"\\\",screenTiny.textContent=\\\"\\\",readyToClear=!1}function handleNumber(e){if(readyToClear&&clearScreen(),1==numCounter)if(firstNum.length<13)screenLarge.setAttribute(\\\"class\\\",\\\"large\\\"),screenLarge.textContent=firstNum+e.toString(),firstNum+=e.toString();else{if(!(firstNum.length<24))return void(screenTiny.textContent=\\\"too large\\\");screenLarge.setAttribute(\\\"class\\\",\\\"small\\\"),screenLarge.textContent=firstNum+e.toString(),firstNum+=e.toString()}else if(secondNum.length<13)screenLarge.setAttribute(\\\"class\\\",\\\"large\\\"),screenLarge.textContent=secondNum+e.toString(),secondNum+=e.toString();else{if(!(secondNum.length<24))return void(screenTiny.textContent=\\\"too large\\\");screenLarge.setAttribute(\\\"class\\\",\\\"small\\\"),screenLarge.textContent=secondNum+e.toString(),secondNum+=e.toString()}}function handleOp(e,t){secondNum=\\\"\\\",screenLarge.textContent=\\\"\\\",operationSym=t.toString(),firstNum.length<19?screenTop.textContent=firstNum+\\\" \\\"+operationSym:screenTop.textContent=firstNum.slice(0,20)+\\\"... =\\\",operation=e,numCounter=2}numCounter=1,firstNum=\\\"\\\",secondNum=\\\"\\\",operation=null,operationSym=\\\"\\\",readyToClear=!1; ]]></script> </svg>';\\r\\n\\r\\n\\r\\n    function generateTokenURI(address owner, uint id, uint schemeIndex, ColorScheme memory scheme, string memory frontEnd) public pure returns(string memory) {\\r\\n\\r\\n        string memory imageUrl = base64ImageUrl(owner, id, scheme);\\r\\n        return\\r\\n          string(\\r\\n              abi.encodePacked(\\r\\n                'data:application/json;base64,',\\r\\n                Base64.encode(\\r\\n                    bytes(\\r\\n                          abi.encodePacked(\\r\\n                              '{\\\"name\\\":\\\"',\\r\\n                              \\\"Calculator #\\\",\\r\\n                              Strings.toString(id),\\r\\n                              '\\\", \\\"description\\\":',\\r\\n                              '\\\"A Fully working, completely on chain calculator. To use, simply copy the image url and paste it in a web browser. Or, visit our [Official Website](',\\r\\n                              frontEnd,\\r\\n                              \\\")\\\",\\r\\n                              '\\\", \\\"external_url\\\":\\\"',\\r\\n                              frontEnd,\\r\\n                              '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"Color Scheme\\\", \\\"value\\\":\\\"',\\r\\n                              Strings.toString(schemeIndex),\\r\\n                              '\\\"}], \\\"owner\\\":\\\"',\\r\\n                              Strings.toHexString(uint160(owner), 20),\\r\\n                              '\\\", \\\"image\\\": \\\"',\\r\\n                              imageUrl,\\r\\n                              '\\\"}'\\r\\n                          )\\r\\n                        )\\r\\n                    )\\r\\n              )\\r\\n          );\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function base64ImageUrl(address owner, uint id, ColorScheme memory scheme) public pure returns (string memory) {\\r\\n        string memory ownerId = OwnerandIdText(owner, id, scheme.ownerText);\\r\\n        string memory gradients = getGradients(scheme);\\r\\n        string memory background = getBackground(scheme);\\r\\n        string memory screenText = getScreenText(scheme);\\r\\n        string memory styles = getStyle(scheme);\\r\\n\\r\\n        string memory svgBase64 = Base64.encode(abi.encodePacked(svgStart, styles, gradients, background, svgButtons, screenText, svgButtonText, ownerId, svgEnd));\\r\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\",svgBase64));\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function OwnerandIdText(address owner, uint id, string memory color) public pure returns (string memory){\\r\\n        string memory _owner = Strings.toHexString(uint160(owner), 20);\\r\\n        string memory _id = Strings.toString(id);\\r\\n\\r\\n        return string(abi.encodePacked('<text fill=\\\"#',\\r\\n        color,\\r\\n        '\\\" x=\\\"190\\\" y=\\\"743\\\" class=\\\"metadata\\\">', \\r\\n        \\\"Owner: \\\", \\r\\n        _owner, \\r\\n        '</text> <text fill=\\\"#d8e1e0\\\" x=\\\"30\\\" y=\\\"743\\\" class=\\\"metadata\\\">', \\r\\n        _id, \\r\\n        \\\"/10000\\\", \\r\\n        \\\"</text>\\\"));\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function getGradients(ColorScheme memory scheme) public pure returns (string memory) {\\r\\n        string memory first = '<linearGradient id=\\\"';\\r\\n        string memory second = '\\\" x1=\\\"1\\\" x2=\\\"0\\\" y1=\\\"0\\\" y2=\\\"0\\\"> <stop offset=\\\"0%\\\" stop-color=\\\"#';\\r\\n        string memory third = '\\\"/> <stop offset=\\\"100%\\\" stop-color=\\\"#';\\r\\n        string memory fourth = '\\\" /> </linearGradient>';\\r\\n\\r\\n        string memory grad1 = string(abi.encodePacked(\\r\\n            first, \\r\\n            \\\"Gradient1\\\",  \\r\\n            second, \\r\\n            scheme.gradient1[0],\\r\\n            third,\\r\\n            scheme.gradient1[1],\\r\\n            fourth\\r\\n            ));\\r\\n        string memory grad2 = string(abi.encodePacked(\\r\\n            first, \\r\\n            \\\"Gradient2\\\",  \\r\\n            second, \\r\\n            scheme.gradient2[0],\\r\\n            third,\\r\\n            scheme.gradient2[1],\\r\\n            fourth\\r\\n            ));\\r\\n        string memory grad3 = string(abi.encodePacked(\\r\\n            first, \\r\\n            \\\"Gradient3\\\",  \\r\\n            second, \\r\\n            scheme.gradient3[0],\\r\\n            third,\\r\\n            scheme.gradient3[1],\\r\\n            fourth\\r\\n            ));\\r\\n        string memory grad4 = string(abi.encodePacked(\\r\\n            first, \\r\\n            \\\"Gradient4\\\",  \\r\\n            second, \\r\\n            scheme.gradient4[0],\\r\\n            third,\\r\\n            scheme.gradient4[1],\\r\\n            fourth\\r\\n            ));\\r\\n\\r\\n        return string(abi.encodePacked(grad1, grad2, grad3, grad4));\\r\\n\\r\\n    }\\r\\n\\r\\n    function getBackground(ColorScheme memory scheme) public pure returns (string memory) {\\r\\n        string memory first = '<g  stroke=\\\"#';\\r\\n        string memory second = '\\\" stroke-width=\\\"3\\\" > <rect id=\\\"border\\\" fill=\\\"url(#Gradient4)\\\" rx=\\\"7\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"550\\\" height=\\\"760\\\"/> <rect class=\\\"buttonBackground\\\"   rx=\\\"7\\\" x=\\\"30\\\" y=\\\"30\\\" width=\\\"490\\\" height=\\\"700\\\"/> <rect id=\\\"screenBorder\\\" rx=\\\"7\\\" fill=\\\"url(#Gradient2)\\\" x=\\\"45\\\" y=\\\"50\\\" width=\\\"460\\\" height=\\\"150\\\"/> <rect class=\\\"screen\\\"  rx=\\\"7\\\" x=\\\"65\\\" y=\\\"70\\\" width=\\\"420\\\" height=\\\"110\\\"/> <rect rx=\\\"7\\\" stroke-width=\\\"5\\\" fill=\\\"none\\\" x=\\\"10\\\" y=\\\"10\\\" width=\\\"530\\\" height=\\\"740\\\"/> </g>';\\r\\n    \\r\\n\\r\\n        return string(abi.encodePacked(\\r\\n            first, \\r\\n            scheme.borderStrip,\\r\\n            second\\r\\n\\r\\n            ));\\r\\n\\r\\n    }\\r\\n\\r\\n    function getScreenText(ColorScheme memory scheme) public pure returns(string memory) {\\r\\n        string memory first = '<g fill= \\\"#'; \\r\\n        string memory second = '\\\"> <text id=\\\"screenLarge\\\" x=\\\"70\\\" y=\\\"160\\\"></text> <text id=\\\"screenTop\\\" x=\\\"70\\\" y=\\\"105\\\" class=\\\"light\\\"></text> <text id=\\\"screenTiny\\\" x=\\\"430\\\" y=\\\"170\\\" class=\\\"tiny\\\"></text> </g >';\\r\\n        return string(abi.encodePacked(first, scheme.screenText, second));\\r\\n\\r\\n    }\\r\\n\\r\\n    function getStyle(ColorScheme memory scheme) public pure returns(string memory ) {\\r\\n        return string(abi.encodePacked(\\r\\n            '<style> .light { font: italic 30px sans-serif; } .tiny { font: 8px sans-serif;  } .large { font: bold 50px sans-serif; } .small { font: bold 30px sans-serif; } .button { font: bold 50px sans-serif; fill: #',\\r\\n            scheme.buttonText, \\r\\n            '} .metadata{ font: bold 12px sans-serif; fill: #', \\r\\n            scheme.ownerText, \\r\\n            ' } .buttonBackground{fill: #', \\r\\n            scheme.buttonBackground,\\r\\n            '} .screen{fill: #',\\r\\n            scheme.screen,\\r\\n            '} .borderStrip{stroke: #',\\r\\n            scheme.borderStrip,\\r\\n            '} </style>'\\r\\n            ));\\r\\n            \\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"name\":\"OwnerandIdText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"gradient1\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient2\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient3\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient4\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"buttonBackground\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderStrip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buttonText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screenText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerText\",\"type\":\"string\"}],\"internalType\":\"struct CalcLib.ColorScheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"base64ImageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"schemeIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"gradient1\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient2\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient3\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient4\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"buttonBackground\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderStrip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buttonText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screenText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerText\",\"type\":\"string\"}],\"internalType\":\"struct CalcLib.ColorScheme\",\"name\":\"scheme\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"frontEnd\",\"type\":\"string\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"gradient1\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient2\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient3\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient4\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"buttonBackground\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderStrip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buttonText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screenText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerText\",\"type\":\"string\"}],\"internalType\":\"struct CalcLib.ColorScheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"getBackground\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"gradient1\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient2\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient3\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient4\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"buttonBackground\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderStrip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buttonText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screenText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerText\",\"type\":\"string\"}],\"internalType\":\"struct CalcLib.ColorScheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"getGradients\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"gradient1\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient2\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient3\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient4\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"buttonBackground\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderStrip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buttonText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screenText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerText\",\"type\":\"string\"}],\"internalType\":\"struct CalcLib.ColorScheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"getScreenText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[2]\",\"name\":\"gradient1\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient2\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient3\",\"type\":\"string[2]\"},{\"internalType\":\"string[2]\",\"name\":\"gradient4\",\"type\":\"string[2]\"},{\"internalType\":\"string\",\"name\":\"buttonBackground\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borderStrip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buttonText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screenText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"screen\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerText\",\"type\":\"string\"}],\"internalType\":\"struct CalcLib.ColorScheme\",\"name\":\"scheme\",\"type\":\"tuple\"}],\"name\":\"getStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CalcLib", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}