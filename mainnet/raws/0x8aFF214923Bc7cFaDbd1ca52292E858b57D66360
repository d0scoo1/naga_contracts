{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/external/PauseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../global/StorageLayoutV1.sol\\\";\\r\\nimport \\\"../global/Constants.sol\\\";\\r\\nimport \\\"../proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"../../interfaces/notional/NotionalProxy.sol\\\";\\r\\nimport \\\"../../interfaces/notional/NotionalCalculations.sol\\\";\\r\\n\\r\\n/**\\r\\n * Read only version of the Router that can only be upgraded by governance. Used in emergency when the system must\\r\\n * be paused for some reason.\\r\\n */\\r\\ncontract PauseRouter is StorageLayoutV1, UUPSUpgradeable {\\r\\n    address public immutable VIEWS;\\r\\n    address public immutable LIQUIDATE_CURRENCY;\\r\\n    address public immutable LIQUIDATE_FCASH;\\r\\n    address public immutable CALCULATION_VIEWS;\\r\\n\\r\\n    constructor(\\r\\n        address views_,\\r\\n        address liquidateCurrency_,\\r\\n        address liquidatefCash_,\\r\\n        address calculationViews_\\r\\n    ) {\\r\\n        VIEWS = views_;\\r\\n        LIQUIDATE_CURRENCY = liquidateCurrency_;\\r\\n        LIQUIDATE_FCASH = liquidatefCash_;\\r\\n        CALCULATION_VIEWS = calculationViews_;\\r\\n    }\\r\\n\\r\\n    /// @dev Internal method will be called during an UUPS upgrade, must return true to\\r\\n    /// authorize the upgrade. The UUPS check does a rollback check during the upgrade and\\r\\n    /// therefore we use the `rollbackRouterImplementation` to authorize the pauseGuardian\\r\\n    /// during this check. See GovernanceAction._authorizeUpgrade for where the rollbackRouterImplementation\\r\\n    /// storage slot is set.\\r\\n    function _authorizeUpgrade(address newImplementation) internal override {\\r\\n        // This is only true during a rollback check when the pause router is downgraded\\r\\n        bool isRollbackCheck = rollbackRouterImplementation != address(0) &&\\r\\n            newImplementation == rollbackRouterImplementation;\\r\\n\\r\\n        require(\\r\\n            owner == msg.sender || (msg.sender == pauseGuardian && isRollbackCheck),\\r\\n            \\\"Unauthorized upgrade\\\"\\r\\n        );\\r\\n\\r\\n        // Clear this storage slot so the guardian cannot upgrade back to the previous router,\\r\\n        // requires governance to do so.\\r\\n        rollbackRouterImplementation = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Shows the current state of which liquidations are enabled\\r\\n    /// @return the current liquidation enable state as a bitmap\\r\\n    function getLiquidationEnabledState() external view returns (bytes1) {\\r\\n        return liquidationEnabledState;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets a new liquidation enable state, only the owner or the guardian may do so\\r\\n    function setLiquidationEnabledState(bytes1 liquidationEnabledState_) external {\\r\\n        // Only authorized addresses can set the liquidation state\\r\\n        require(owner == msg.sender || msg.sender == pauseGuardian);\\r\\n        liquidationEnabledState = liquidationEnabledState_;\\r\\n    }\\r\\n\\r\\n    function isEnabled(bytes1 state) private view returns (bool) {\\r\\n        return (liquidationEnabledState & state == state);\\r\\n    }\\r\\n\\r\\n    function getRouterImplementation(bytes4 sig) public view returns (address) {\\r\\n        // Liquidation calculation methods are stateful (they settle accounts if required)\\r\\n        // and therefore we prevent them from being called unless specifically authorized.\\r\\n        if (\\r\\n            (sig == NotionalProxy.calculateCollateralCurrencyLiquidation.selector ||\\r\\n                sig == NotionalProxy.liquidateCollateralCurrency.selector) &&\\r\\n            isEnabled(Constants.COLLATERAL_CURRENCY_ENABLED)\\r\\n        ) {\\r\\n            return LIQUIDATE_CURRENCY;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            (sig == NotionalProxy.calculateLocalCurrencyLiquidation.selector ||\\r\\n                sig == NotionalProxy.liquidateLocalCurrency.selector) &&\\r\\n            isEnabled(Constants.LOCAL_CURRENCY_ENABLED)\\r\\n        ) {\\r\\n            return LIQUIDATE_CURRENCY;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            (sig == NotionalProxy.liquidatefCashLocal.selector ||\\r\\n                sig == NotionalProxy.calculatefCashLocalLiquidation.selector) &&\\r\\n            isEnabled(Constants.LOCAL_FCASH_ENABLED)\\r\\n        ) {\\r\\n            return LIQUIDATE_FCASH;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            (sig == NotionalProxy.liquidatefCashCrossCurrency.selector ||\\r\\n                sig == NotionalProxy.calculatefCashCrossCurrencyLiquidation.selector) &&\\r\\n            isEnabled(Constants.CROSS_CURRENCY_FCASH_ENABLED)\\r\\n        ) {\\r\\n            return LIQUIDATE_FCASH;\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            sig == NotionalCalculations.calculateNTokensToMint.selector ||\\r\\n            sig == NotionalCalculations.getfCashAmountGivenCashAmount.selector ||\\r\\n            sig == NotionalCalculations.getCashAmountGivenfCashAmount.selector ||\\r\\n            sig == NotionalCalculations.nTokenGetClaimableIncentives.selector\\r\\n        ) {\\r\\n            return CALCULATION_VIEWS;\\r\\n        }\\r\\n\\r\\n        // If not found then delegate to views. This will revert if there is no method on\\r\\n        // the view contract\\r\\n        return VIEWS;\\r\\n    }\\r\\n\\r\\n    /// @dev Delegates the current call to `implementation`.\\r\\n    /// This function does not return to its internal call site, it will return directly to the external caller.\\r\\n    function _delegate(address implementation) private {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        _delegate(getRouterImplementation(msg.sig));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/global/StorageLayoutV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./Types.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Storage layout for the system. Do not change this file once deployed, future storage\\r\\n * layouts must inherit this and increment the version number.\\r\\n */\\r\\ncontract StorageLayoutV1 {\\r\\n    // The current maximum currency id\\r\\n    uint16 internal maxCurrencyId;\\r\\n    // Sets the state of liquidations being enabled during a paused state. Each of the four lower\\r\\n    // bits can be turned on to represent one of the liquidation types being enabled.\\r\\n    bytes1 internal liquidationEnabledState;\\r\\n    // Set to true once the system has been initialized\\r\\n    bool internal hasInitialized;\\r\\n\\r\\n    /* Authentication Mappings */\\r\\n    // This is set to the timelock contract to execute governance functions\\r\\n    address public owner;\\r\\n    // This is set to an address of a router that can only call governance actions\\r\\n    address public pauseRouter;\\r\\n    // This is set to an address of a router that can only call governance actions\\r\\n    address public pauseGuardian;\\r\\n    // On upgrades this is set in the case that the pause router is used to pass the rollback check\\r\\n    address internal rollbackRouterImplementation;\\r\\n\\r\\n    // A blanket allowance for a spender to transfer any of an account's nTokens. This would allow a user\\r\\n    // to set an allowance on all nTokens for a particular integrating contract system.\\r\\n    // owner => spender => transferAllowance\\r\\n    mapping(address => mapping(address => uint256)) internal nTokenWhitelist;\\r\\n    // Individual transfer allowances for nTokens used for ERC20\\r\\n    // owner => spender => currencyId => transferAllowance\\r\\n    mapping(address => mapping(address => mapping(uint16 => uint256))) internal nTokenAllowance;\\r\\n\\r\\n    // Transfer operators\\r\\n    // Mapping from a global ERC1155 transfer operator contract to an approval value for it\\r\\n    mapping(address => bool) internal globalTransferOperator;\\r\\n    // Mapping from an account => operator => approval status for that operator. This is a specific\\r\\n    // approval between two addresses for ERC1155 transfers.\\r\\n    mapping(address => mapping(address => bool)) internal accountAuthorizedTransferOperator;\\r\\n    // Approval for a specific contract to use the `batchBalanceAndTradeActionWithCallback` method in\\r\\n    // BatchAction.sol, can only be set by governance\\r\\n    mapping(address => bool) internal authorizedCallbackContract;\\r\\n\\r\\n    // Reverse mapping from token addresses to currency ids, only used for referencing in views\\r\\n    // and checking for duplicate token listings.\\r\\n    mapping(address => uint16) internal tokenAddressToCurrencyId;\\r\\n\\r\\n    // Reentrancy guard\\r\\n    uint256 internal reentrancyStatus;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/global/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/// @title All shared constants for the Notional system should be declared here.\\r\\nlibrary Constants {\\r\\n    uint8 internal constant CETH_DECIMAL_PLACES = 8;\\r\\n\\r\\n    // Token precision used for all internal balances, TokenHandler library ensures that we\\r\\n    // limit the dust amount caused by precision mismatches\\r\\n    int256 internal constant INTERNAL_TOKEN_PRECISION = 1e8;\\r\\n    uint256 internal constant INCENTIVE_ACCUMULATION_PRECISION = 1e18;\\r\\n\\r\\n    // ETH will be initialized as the first currency\\r\\n    uint256 internal constant ETH_CURRENCY_ID = 1;\\r\\n    uint8 internal constant ETH_DECIMAL_PLACES = 18;\\r\\n    int256 internal constant ETH_DECIMALS = 1e18;\\r\\n    // Used to prevent overflow when converting decimal places to decimal precision values via\\r\\n    // 10**decimalPlaces. This is a safe value for int256 and uint256 variables. We apply this\\r\\n    // constraint when storing decimal places in governance.\\r\\n    uint256 internal constant MAX_DECIMAL_PLACES = 36;\\r\\n\\r\\n    // Address of the reserve account\\r\\n    address internal constant RESERVE = address(0);\\r\\n\\r\\n    // Most significant bit\\r\\n    bytes32 internal constant MSB =\\r\\n        0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n    // Each bit set in this mask marks where an active market should be in the bitmap\\r\\n    // if the first bit refers to the reference time. Used to detect idiosyncratic\\r\\n    // fcash in the nToken accounts\\r\\n    bytes32 internal constant ACTIVE_MARKETS_MASK = (\\r\\n        MSB >> ( 90 - 1) | // 3 month\\r\\n        MSB >> (105 - 1) | // 6 month\\r\\n        MSB >> (135 - 1) | // 1 year\\r\\n        MSB >> (147 - 1) | // 2 year\\r\\n        MSB >> (183 - 1) | // 5 year\\r\\n        MSB >> (211 - 1) | // 10 year\\r\\n        MSB >> (251 - 1)   // 20 year\\r\\n    );\\r\\n\\r\\n    // Basis for percentages\\r\\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\\r\\n    // Max number of traded markets, also used as the maximum number of assets in a portfolio array\\r\\n    uint256 internal constant MAX_TRADED_MARKET_INDEX = 7;\\r\\n    // Max number of fCash assets in a bitmap, this is based on the gas costs of calculating free collateral\\r\\n    // for a bitmap portfolio\\r\\n    uint256 internal constant MAX_BITMAP_ASSETS = 20;\\r\\n    uint256 internal constant FIVE_MINUTES = 300;\\r\\n\\r\\n    // Internal date representations, note we use a 6/30/360 week/month/year convention here\\r\\n    uint256 internal constant DAY = 86400;\\r\\n    // We use six day weeks to ensure that all time references divide evenly\\r\\n    uint256 internal constant WEEK = DAY * 6;\\r\\n    uint256 internal constant MONTH = WEEK * 5;\\r\\n    uint256 internal constant QUARTER = MONTH * 3;\\r\\n    uint256 internal constant YEAR = QUARTER * 4;\\r\\n    \\r\\n    // These constants are used in DateTime.sol\\r\\n    uint256 internal constant DAYS_IN_WEEK = 6;\\r\\n    uint256 internal constant DAYS_IN_MONTH = 30;\\r\\n    uint256 internal constant DAYS_IN_QUARTER = 90;\\r\\n\\r\\n    // Offsets for each time chunk denominated in days\\r\\n    uint256 internal constant MAX_DAY_OFFSET = 90;\\r\\n    uint256 internal constant MAX_WEEK_OFFSET = 360;\\r\\n    uint256 internal constant MAX_MONTH_OFFSET = 2160;\\r\\n    uint256 internal constant MAX_QUARTER_OFFSET = 7650;\\r\\n\\r\\n    // Offsets for each time chunk denominated in bits\\r\\n    uint256 internal constant WEEK_BIT_OFFSET = 90;\\r\\n    uint256 internal constant MONTH_BIT_OFFSET = 135;\\r\\n    uint256 internal constant QUARTER_BIT_OFFSET = 195;\\r\\n\\r\\n    // This is a constant that represents the time period that all rates are normalized by, 360 days\\r\\n    uint256 internal constant IMPLIED_RATE_TIME = 360 * DAY;\\r\\n    // Number of decimal places that rates are stored in, equals 100%\\r\\n    int256 internal constant RATE_PRECISION = 1e9;\\r\\n    // One basis point in RATE_PRECISION terms\\r\\n    uint256 internal constant BASIS_POINT = uint256(RATE_PRECISION / 10000);\\r\\n    // Used to when calculating the amount to deleverage of a market when minting nTokens\\r\\n    uint256 internal constant DELEVERAGE_BUFFER = 300 * BASIS_POINT;\\r\\n    // Used for scaling cash group factors\\r\\n    uint256 internal constant FIVE_BASIS_POINTS = 5 * BASIS_POINT;\\r\\n    // Used for residual purchase incentive and cash withholding buffer\\r\\n    uint256 internal constant TEN_BASIS_POINTS = 10 * BASIS_POINT;\\r\\n\\r\\n    // This is the ABDK64x64 representation of RATE_PRECISION\\r\\n    // RATE_PRECISION_64x64 = ABDKMath64x64.fromUint(RATE_PRECISION)\\r\\n    int128 internal constant RATE_PRECISION_64x64 = 0x3b9aca000000000000000000;\\r\\n    int128 internal constant LOG_RATE_PRECISION_64x64 = 382276781265598821176;\\r\\n    // Limit the market proportion so that borrowing cannot hit extremely high interest rates\\r\\n    int256 internal constant MAX_MARKET_PROPORTION = RATE_PRECISION * 99 / 100;\\r\\n\\r\\n    uint8 internal constant FCASH_ASSET_TYPE = 1;\\r\\n    // Liquidity token asset types are 1 + marketIndex (where marketIndex is 1-indexed)\\r\\n    uint8 internal constant MIN_LIQUIDITY_TOKEN_INDEX = 2;\\r\\n    uint8 internal constant MAX_LIQUIDITY_TOKEN_INDEX = 8;\\r\\n\\r\\n    // Used for converting bool to bytes1, solidity does not have a native conversion\\r\\n    // method for this\\r\\n    bytes1 internal constant BOOL_FALSE = 0x00;\\r\\n    bytes1 internal constant BOOL_TRUE = 0x01;\\r\\n\\r\\n    // Account context flags\\r\\n    bytes1 internal constant HAS_ASSET_DEBT = 0x01;\\r\\n    bytes1 internal constant HAS_CASH_DEBT = 0x02;\\r\\n    bytes2 internal constant ACTIVE_IN_PORTFOLIO = 0x8000;\\r\\n    bytes2 internal constant ACTIVE_IN_BALANCES = 0x4000;\\r\\n    bytes2 internal constant UNMASK_FLAGS = 0x3FFF;\\r\\n    uint16 internal constant MAX_CURRENCIES = uint16(UNMASK_FLAGS);\\r\\n\\r\\n    // Equal to 100% of all deposit amounts for nToken liquidity across fCash markets.\\r\\n    int256 internal constant DEPOSIT_PERCENT_BASIS = 1e8;\\r\\n\\r\\n    // nToken Parameters: there are offsets in the nTokenParameters bytes6 variable returned\\r\\n    // in nTokenHandler. Each constant represents a position in the byte array.\\r\\n    uint8 internal constant LIQUIDATION_HAIRCUT_PERCENTAGE = 0;\\r\\n    uint8 internal constant CASH_WITHHOLDING_BUFFER = 1;\\r\\n    uint8 internal constant RESIDUAL_PURCHASE_TIME_BUFFER = 2;\\r\\n    uint8 internal constant PV_HAIRCUT_PERCENTAGE = 3;\\r\\n    uint8 internal constant RESIDUAL_PURCHASE_INCENTIVE = 4;\\r\\n\\r\\n    // Liquidation parameters\\r\\n    // Default percentage of collateral that a liquidator is allowed to liquidate, will be higher if the account\\r\\n    // requires more collateral to be liquidated\\r\\n    int256 internal constant DEFAULT_LIQUIDATION_PORTION = 40;\\r\\n    // Percentage of local liquidity token cash claim delivered to the liquidator for liquidating liquidity tokens\\r\\n    int256 internal constant TOKEN_REPO_INCENTIVE_PERCENT = 30;\\r\\n\\r\\n    // Pause Router liquidation enabled states\\r\\n    bytes1 internal constant LOCAL_CURRENCY_ENABLED = 0x01;\\r\\n    bytes1 internal constant COLLATERAL_CURRENCY_ENABLED = 0x02;\\r\\n    bytes1 internal constant LOCAL_FCASH_ENABLED = 0x04;\\r\\n    bytes1 internal constant CROSS_CURRENCY_FCASH_ENABLED = 0x08;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\r\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\r\\n *\\r\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\r\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\r\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\r\\n *\\r\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\r\\n     *\\r\\n     * Calls {_authorizeUpgrade}.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external virtual {\\r\\n        _authorizeUpgrade(newImplementation);\\r\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\r\\n     * encoded in `data`.\\r\\n     *\\r\\n     * Calls {_authorizeUpgrade}.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\r\\n        _authorizeUpgrade(newImplementation);\\r\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\r\\n     * {upgradeTo} and {upgradeToAndCall}.\\r\\n     *\\r\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\r\\n     *\\r\\n     * ```solidity\\r\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n     * ```\\r\\n     */\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../contracts/global/Types.sol\\\";\\r\\nimport \\\"./nTokenERC20.sol\\\";\\r\\nimport \\\"./nERC1155Interface.sol\\\";\\r\\nimport \\\"./NotionalGovernance.sol\\\";\\r\\nimport \\\"./NotionalCalculations.sol\\\";\\r\\nimport \\\"./NotionalViews.sol\\\";\\r\\nimport \\\"./NotionalTreasury.sol\\\";\\r\\n\\r\\ninterface NotionalProxy is\\r\\n    nTokenERC20,\\r\\n    nERC1155Interface,\\r\\n    NotionalGovernance,\\r\\n    NotionalTreasury,\\r\\n    NotionalCalculations,\\r\\n    NotionalViews\\r\\n{\\r\\n    /** User trading events */\\r\\n    event CashBalanceChange(\\r\\n        address indexed account,\\r\\n        uint16 indexed currencyId,\\r\\n        int256 netCashChange\\r\\n    );\\r\\n    event nTokenSupplyChange(\\r\\n        address indexed account,\\r\\n        uint16 indexed currencyId,\\r\\n        int256 tokenSupplyChange\\r\\n    );\\r\\n    event MarketsInitialized(uint16 currencyId);\\r\\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\\r\\n    event SettledCashDebt(\\r\\n        address indexed settledAccount,\\r\\n        uint16 indexed currencyId,\\r\\n        address indexed settler,\\r\\n        int256 amountToSettleAsset,\\r\\n        int256 fCashAmount\\r\\n    );\\r\\n    event nTokenResidualPurchase(\\r\\n        uint16 indexed currencyId,\\r\\n        uint40 indexed maturity,\\r\\n        address indexed purchaser,\\r\\n        int256 fCashAmountToPurchase,\\r\\n        int256 netAssetCashNToken\\r\\n    );\\r\\n    event LendBorrowTrade(\\r\\n        address indexed account,\\r\\n        uint16 indexed currencyId,\\r\\n        uint40 maturity,\\r\\n        int256 netAssetCash,\\r\\n        int256 netfCash\\r\\n    );\\r\\n    event AddRemoveLiquidity(\\r\\n        address indexed account,\\r\\n        uint16 indexed currencyId,\\r\\n        uint40 maturity,\\r\\n        int256 netAssetCash,\\r\\n        int256 netfCash,\\r\\n        int256 netLiquidityTokens\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted once when incentives are migrated\\r\\n    event IncentivesMigrated(\\r\\n        uint16 currencyId,\\r\\n        uint256 migrationEmissionRate,\\r\\n        uint256 finalIntegralTotalSupply,\\r\\n        uint256 migrationTime\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when reserve fees are accrued\\r\\n    event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);\\r\\n    /// @notice Emitted whenever an account context has updated\\r\\n    event AccountContextUpdate(address indexed account);\\r\\n    /// @notice Emitted when an account has assets that are settled\\r\\n    event AccountSettled(address indexed account);\\r\\n    /// @notice Emitted when an asset rate is settled\\r\\n    event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);\\r\\n\\r\\n    /* Liquidation Events */\\r\\n    event LiquidateLocalCurrency(\\r\\n        address indexed liquidated,\\r\\n        address indexed liquidator,\\r\\n        uint16 localCurrencyId,\\r\\n        int256 netLocalFromLiquidator\\r\\n    );\\r\\n\\r\\n    event LiquidateCollateralCurrency(\\r\\n        address indexed liquidated,\\r\\n        address indexed liquidator,\\r\\n        uint16 localCurrencyId,\\r\\n        uint16 collateralCurrencyId,\\r\\n        int256 netLocalFromLiquidator,\\r\\n        int256 netCollateralTransfer,\\r\\n        int256 netNTokenTransfer\\r\\n    );\\r\\n\\r\\n    event LiquidatefCashEvent(\\r\\n        address indexed liquidated,\\r\\n        address indexed liquidator,\\r\\n        uint16 localCurrencyId,\\r\\n        uint16 fCashCurrency,\\r\\n        int256 netLocalFromLiquidator,\\r\\n        uint256[] fCashMaturities,\\r\\n        int256[] fCashNotionalTransfer\\r\\n    );\\r\\n\\r\\n    /** UUPS Upgradeable contract calls */\\r\\n    function upgradeTo(address newImplementation) external;\\r\\n\\r\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\\r\\n\\r\\n    function getImplementation() external view returns (address);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function pauseRouter() external view returns (address);\\r\\n\\r\\n    function pauseGuardian() external view returns (address);\\r\\n\\r\\n    /** Initialize Markets Action */\\r\\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external;\\r\\n\\r\\n    function sweepCashIntoMarkets(uint16 currencyId) external;\\r\\n\\r\\n    /** Redeem nToken Action */\\r\\n    function nTokenRedeem(\\r\\n        address redeemer,\\r\\n        uint16 currencyId,\\r\\n        uint96 tokensToRedeem_,\\r\\n        bool sellTokenAssets,\\r\\n        bool acceptResidualAssets\\r\\n    ) external returns (int256);\\r\\n\\r\\n    /** Account Action */\\r\\n    function enableBitmapCurrency(uint16 currencyId) external;\\r\\n\\r\\n    function settleAccount(address account) external;\\r\\n\\r\\n    function depositUnderlyingToken(\\r\\n        address account,\\r\\n        uint16 currencyId,\\r\\n        uint256 amountExternalPrecision\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function depositAssetToken(\\r\\n        address account,\\r\\n        uint16 currencyId,\\r\\n        uint256 amountExternalPrecision\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        uint16 currencyId,\\r\\n        uint88 amountInternalPrecision,\\r\\n        bool redeemToUnderlying\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /** Batch Action */\\r\\n    function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;\\r\\n\\r\\n    function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions)\\r\\n        external\\r\\n        payable;\\r\\n\\r\\n    function batchBalanceAndTradeActionWithCallback(\\r\\n        address account,\\r\\n        BalanceActionWithTrades[] calldata actions,\\r\\n        bytes calldata callbackData\\r\\n    ) external payable;\\r\\n\\r\\n    /** Liquidation Action */\\r\\n    function calculateLocalCurrencyLiquidation(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint96 maxNTokenLiquidation\\r\\n    ) external returns (int256, int256);\\r\\n\\r\\n    function liquidateLocalCurrency(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint96 maxNTokenLiquidation\\r\\n    ) external returns (int256, int256);\\r\\n\\r\\n    function calculateCollateralCurrencyLiquidation(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint16 collateralCurrency,\\r\\n        uint128 maxCollateralLiquidation,\\r\\n        uint96 maxNTokenLiquidation\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            int256,\\r\\n            int256,\\r\\n            int256\\r\\n        );\\r\\n\\r\\n    function liquidateCollateralCurrency(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint16 collateralCurrency,\\r\\n        uint128 maxCollateralLiquidation,\\r\\n        uint96 maxNTokenLiquidation,\\r\\n        bool withdrawCollateral,\\r\\n        bool redeemToUnderlying\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            int256,\\r\\n            int256,\\r\\n            int256\\r\\n        );\\r\\n\\r\\n    function calculatefCashLocalLiquidation(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint256[] calldata fCashMaturities,\\r\\n        uint256[] calldata maxfCashLiquidateAmounts\\r\\n    ) external returns (int256[] memory, int256);\\r\\n\\r\\n    function liquidatefCashLocal(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint256[] calldata fCashMaturities,\\r\\n        uint256[] calldata maxfCashLiquidateAmounts\\r\\n    ) external returns (int256[] memory, int256);\\r\\n\\r\\n    function calculatefCashCrossCurrencyLiquidation(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint16 fCashCurrency,\\r\\n        uint256[] calldata fCashMaturities,\\r\\n        uint256[] calldata maxfCashLiquidateAmounts\\r\\n    ) external returns (int256[] memory, int256);\\r\\n\\r\\n    function liquidatefCashCrossCurrency(\\r\\n        address liquidateAccount,\\r\\n        uint16 localCurrency,\\r\\n        uint16 fCashCurrency,\\r\\n        uint256[] calldata fCashMaturities,\\r\\n        uint256[] calldata maxfCashLiquidateAmounts\\r\\n    ) external returns (int256[] memory, int256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalCalculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../contracts/global/Types.sol\\\";\\r\\n\\r\\ninterface NotionalCalculations {\\r\\n    function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getfCashAmountGivenCashAmount(\\r\\n        uint16 currencyId,\\r\\n        int88 netCashToAccount,\\r\\n        uint256 marketIndex,\\r\\n        uint256 blockTime\\r\\n    ) external view returns (int256);\\r\\n\\r\\n    function getCashAmountGivenfCashAmount(\\r\\n        uint16 currencyId,\\r\\n        int88 fCashAmount,\\r\\n        uint256 marketIndex,\\r\\n        uint256 blockTime\\r\\n    ) external view returns (int256, int256);\\r\\n\\r\\n    function nTokenGetClaimableIncentives(address account, uint256 blockTime)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getPresentfCashValue(\\r\\n        uint16 currencyId,\\r\\n        uint256 maturity,\\r\\n        int256 notional,\\r\\n        uint256 blockTime,\\r\\n        bool riskAdjusted\\r\\n    ) external view returns (int256 presentValue);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/global/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../interfaces/chainlink/AggregatorV2V3Interface.sol\\\";\\r\\nimport \\\"../../interfaces/notional/AssetRateAdapter.sol\\\";\\r\\n\\r\\n/// @notice Different types of internal tokens\\r\\n///  - UnderlyingToken: underlying asset for a cToken (except for Ether)\\r\\n///  - cToken: Compound interest bearing token\\r\\n///  - cETH: Special handling for cETH tokens\\r\\n///  - Ether: the one and only\\r\\n///  - NonMintable: tokens that do not have an underlying (therefore not cTokens)\\r\\n///  - aToken: Aave interest bearing tokens\\r\\nenum TokenType {UnderlyingToken, cToken, cETH, Ether, NonMintable, aToken}\\r\\n\\r\\n/// @notice Specifies the different trade action types in the system. Each trade action type is\\r\\n/// encoded in a tightly packed bytes32 object. Trade action type is the first big endian byte of the\\r\\n/// 32 byte trade action object. The schemas for each trade action type are defined below.\\r\\nenum TradeActionType {\\r\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 minImpliedRate, uint120 unused)\\r\\n    Lend,\\r\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 maxImpliedRate, uint128 unused)\\r\\n    Borrow,\\r\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 assetCashAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\\r\\n    AddLiquidity,\\r\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 tokenAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\\r\\n    RemoveLiquidity,\\r\\n    // (uint8 TradeActionType, uint32 Maturity, int88 fCashResidualAmount, uint128 unused)\\r\\n    PurchaseNTokenResidual,\\r\\n    // (uint8 TradeActionType, address CounterpartyAddress, int88 fCashAmountToSettle)\\r\\n    SettleCashDebt\\r\\n}\\r\\n\\r\\n/// @notice Specifies different deposit actions that can occur during BalanceAction or BalanceActionWithTrades\\r\\nenum DepositActionType {\\r\\n    // No deposit action\\r\\n    None,\\r\\n    // Deposit asset cash, depositActionAmount is specified in asset cash external precision\\r\\n    DepositAsset,\\r\\n    // Deposit underlying tokens that are mintable to asset cash, depositActionAmount is specified in underlying token\\r\\n    // external precision\\r\\n    DepositUnderlying,\\r\\n    // Deposits specified asset cash external precision amount into an nToken and mints the corresponding amount of\\r\\n    // nTokens into the account\\r\\n    DepositAssetAndMintNToken,\\r\\n    // Deposits specified underlying in external precision, mints asset cash, and uses that asset cash to mint nTokens\\r\\n    DepositUnderlyingAndMintNToken,\\r\\n    // Redeems an nToken balance to asset cash. depositActionAmount is specified in nToken precision. Considered a deposit action\\r\\n    // because it deposits asset cash into an account. If there are fCash residuals that cannot be sold off, will revert.\\r\\n    RedeemNToken,\\r\\n    // Converts specified amount of asset cash balance already in Notional to nTokens. depositActionAmount is specified in\\r\\n    // Notional internal 8 decimal precision.\\r\\n    ConvertCashToNToken\\r\\n}\\r\\n\\r\\n/// @notice Used internally for PortfolioHandler state\\r\\nenum AssetStorageState {NoChange, Update, Delete, RevertIfStored}\\r\\n\\r\\n/****** Calldata objects ******/\\r\\n\\r\\n/// @notice Defines a balance action for batchAction\\r\\nstruct BalanceAction {\\r\\n    // Deposit action to take (if any)\\r\\n    DepositActionType actionType;\\r\\n    uint16 currencyId;\\r\\n    // Deposit action amount must correspond to the depositActionType, see documentation above.\\r\\n    uint256 depositActionAmount;\\r\\n    // Withdraw an amount of asset cash specified in Notional internal 8 decimal precision\\r\\n    uint256 withdrawAmountInternalPrecision;\\r\\n    // If set to true, will withdraw entire cash balance. Useful if there may be an unknown amount of asset cash\\r\\n    // residual left from trading.\\r\\n    bool withdrawEntireCashBalance;\\r\\n    // If set to true, will redeem asset cash to the underlying token on withdraw.\\r\\n    bool redeemToUnderlying;\\r\\n}\\r\\n\\r\\n/// @notice Defines a balance action with a set of trades to do as well\\r\\nstruct BalanceActionWithTrades {\\r\\n    DepositActionType actionType;\\r\\n    uint16 currencyId;\\r\\n    uint256 depositActionAmount;\\r\\n    uint256 withdrawAmountInternalPrecision;\\r\\n    bool withdrawEntireCashBalance;\\r\\n    bool redeemToUnderlying;\\r\\n    // Array of tightly packed 32 byte objects that represent trades. See TradeActionType documentation\\r\\n    bytes32[] trades;\\r\\n}\\r\\n\\r\\n/****** In memory objects ******/\\r\\n/// @notice Internal object that represents settled cash balances\\r\\nstruct SettleAmount {\\r\\n    uint256 currencyId;\\r\\n    int256 netCashChange;\\r\\n}\\r\\n\\r\\n/// @notice Internal object that represents a token\\r\\nstruct Token {\\r\\n    address tokenAddress;\\r\\n    bool hasTransferFee;\\r\\n    int256 decimals;\\r\\n    TokenType tokenType;\\r\\n    uint256 maxCollateralBalance;\\r\\n}\\r\\n\\r\\n/// @notice Internal object that represents an nToken portfolio\\r\\nstruct nTokenPortfolio {\\r\\n    CashGroupParameters cashGroup;\\r\\n    PortfolioState portfolioState;\\r\\n    int256 totalSupply;\\r\\n    int256 cashBalance;\\r\\n    uint256 lastInitializedTime;\\r\\n    bytes6 parameters;\\r\\n    address tokenAddress;\\r\\n}\\r\\n\\r\\n/// @notice Internal object used during liquidation\\r\\nstruct LiquidationFactors {\\r\\n    address account;\\r\\n    // Aggregate free collateral of the account denominated in ETH underlying, 8 decimal precision\\r\\n    int256 netETHValue;\\r\\n    // Amount of net local currency asset cash before haircuts and buffers available\\r\\n    int256 localAssetAvailable;\\r\\n    // Amount of net collateral currency asset cash before haircuts and buffers available\\r\\n    int256 collateralAssetAvailable;\\r\\n    // Haircut value of nToken holdings denominated in asset cash, will be local or collateral nTokens based\\r\\n    // on liquidation type\\r\\n    int256 nTokenHaircutAssetValue;\\r\\n    // nToken parameters for calculating liquidation amount\\r\\n    bytes6 nTokenParameters;\\r\\n    // ETH exchange rate from local currency to ETH\\r\\n    ETHRate localETHRate;\\r\\n    // ETH exchange rate from collateral currency to ETH\\r\\n    ETHRate collateralETHRate;\\r\\n    // Asset rate for the local currency, used in cross currency calculations to calculate local asset cash required\\r\\n    AssetRateParameters localAssetRate;\\r\\n    // Used during currency liquidations if the account has liquidity tokens\\r\\n    CashGroupParameters collateralCashGroup;\\r\\n    // Used during currency liquidations if it is only a calculation, defaults to false\\r\\n    bool isCalculation;\\r\\n}\\r\\n\\r\\n/// @notice Internal asset array portfolio state\\r\\nstruct PortfolioState {\\r\\n    // Array of currently stored assets\\r\\n    PortfolioAsset[] storedAssets;\\r\\n    // Array of new assets to add\\r\\n    PortfolioAsset[] newAssets;\\r\\n    uint256 lastNewAssetIndex;\\r\\n    // Holds the length of stored assets after accounting for deleted assets\\r\\n    uint256 storedAssetLength;\\r\\n}\\r\\n\\r\\n/// @notice In memory ETH exchange rate used during free collateral calculation.\\r\\nstruct ETHRate {\\r\\n    // The decimals (i.e. 10^rateDecimalPlaces) of the exchange rate, defined by the rate oracle\\r\\n    int256 rateDecimals;\\r\\n    // The exchange rate from base to ETH (if rate invert is required it is already done)\\r\\n    int256 rate;\\r\\n    // Amount of buffer as a multiple with a basis of 100 applied to negative balances.\\r\\n    int256 buffer;\\r\\n    // Amount of haircut as a multiple with a basis of 100 applied to positive balances\\r\\n    int256 haircut;\\r\\n    // Liquidation discount as a multiple with a basis of 100 applied to the exchange rate\\r\\n    // as an incentive given to liquidators.\\r\\n    int256 liquidationDiscount;\\r\\n}\\r\\n\\r\\n/// @notice Internal object used to handle balance state during a transaction\\r\\nstruct BalanceState {\\r\\n    uint16 currencyId;\\r\\n    // Cash balance stored in balance state at the beginning of the transaction\\r\\n    int256 storedCashBalance;\\r\\n    // nToken balance stored at the beginning of the transaction\\r\\n    int256 storedNTokenBalance;\\r\\n    // The net cash change as a result of asset settlement or trading\\r\\n    int256 netCashChange;\\r\\n    // Net asset transfers into or out of the account\\r\\n    int256 netAssetTransferInternalPrecision;\\r\\n    // Net token transfers into or out of the account\\r\\n    int256 netNTokenTransfer;\\r\\n    // Net token supply change from minting or redeeming\\r\\n    int256 netNTokenSupplyChange;\\r\\n    // The last time incentives were claimed for this currency\\r\\n    uint256 lastClaimTime;\\r\\n    // Accumulator for incentives that the account no longer has a claim over\\r\\n    uint256 accountIncentiveDebt;\\r\\n}\\r\\n\\r\\n/// @dev Asset rate used to convert between underlying cash and asset cash\\r\\nstruct AssetRateParameters {\\r\\n    // Address of the asset rate oracle\\r\\n    AssetRateAdapter rateOracle;\\r\\n    // The exchange rate from base to quote (if invert is required it is already done)\\r\\n    int256 rate;\\r\\n    // The decimals of the underlying, the rate converts to the underlying decimals\\r\\n    int256 underlyingDecimals;\\r\\n}\\r\\n\\r\\n/// @dev Cash group when loaded into memory\\r\\nstruct CashGroupParameters {\\r\\n    uint16 currencyId;\\r\\n    uint256 maxMarketIndex;\\r\\n    AssetRateParameters assetRate;\\r\\n    bytes32 data;\\r\\n}\\r\\n\\r\\n/// @dev A portfolio asset when loaded in memory\\r\\nstruct PortfolioAsset {\\r\\n    // Asset currency id\\r\\n    uint256 currencyId;\\r\\n    uint256 maturity;\\r\\n    // Asset type, fCash or liquidity token.\\r\\n    uint256 assetType;\\r\\n    // fCash amount or liquidity token amount\\r\\n    int256 notional;\\r\\n    // Used for managing portfolio asset state\\r\\n    uint256 storageSlot;\\r\\n    // The state of the asset for when it is written to storage\\r\\n    AssetStorageState storageState;\\r\\n}\\r\\n\\r\\n/// @dev Market object as represented in memory\\r\\nstruct MarketParameters {\\r\\n    bytes32 storageSlot;\\r\\n    uint256 maturity;\\r\\n    // Total amount of fCash available for purchase in the market.\\r\\n    int256 totalfCash;\\r\\n    // Total amount of cash available for purchase in the market.\\r\\n    int256 totalAssetCash;\\r\\n    // Total amount of liquidity tokens (representing a claim on liquidity) in the market.\\r\\n    int256 totalLiquidity;\\r\\n    // This is the previous annualized interest rate in RATE_PRECISION that the market traded\\r\\n    // at. This is used to calculate the rate anchor to smooth interest rates over time.\\r\\n    uint256 lastImpliedRate;\\r\\n    // Time lagged version of lastImpliedRate, used to value fCash assets at market rates while\\r\\n    // remaining resistent to flash loan attacks.\\r\\n    uint256 oracleRate;\\r\\n    // This is the timestamp of the previous trade\\r\\n    uint256 previousTradeTime;\\r\\n}\\r\\n\\r\\n/****** Storage objects ******/\\r\\n\\r\\n/// @dev Token object in storage:\\r\\n///  20 bytes for token address\\r\\n///  1 byte for hasTransferFee\\r\\n///  1 byte for tokenType\\r\\n///  1 byte for tokenDecimals\\r\\n///  9 bytes for maxCollateralBalance (may not always be set)\\r\\nstruct TokenStorage {\\r\\n    // Address of the token\\r\\n    address tokenAddress;\\r\\n    // Transfer fees will change token deposit behavior\\r\\n    bool hasTransferFee;\\r\\n    TokenType tokenType;\\r\\n    uint8 decimalPlaces;\\r\\n    // Upper limit on how much of this token the contract can hold at any time\\r\\n    uint72 maxCollateralBalance;\\r\\n}\\r\\n\\r\\n/// @dev Exchange rate object as it is represented in storage, total storage is 25 bytes.\\r\\nstruct ETHRateStorage {\\r\\n    // Address of the rate oracle\\r\\n    AggregatorV2V3Interface rateOracle;\\r\\n    // The decimal places of precision that the rate oracle uses\\r\\n    uint8 rateDecimalPlaces;\\r\\n    // True of the exchange rate must be inverted\\r\\n    bool mustInvert;\\r\\n    // NOTE: both of these governance values are set with BUFFER_DECIMALS precision\\r\\n    // Amount of buffer to apply to the exchange rate for negative balances.\\r\\n    uint8 buffer;\\r\\n    // Amount of haircut to apply to the exchange rate for positive balances\\r\\n    uint8 haircut;\\r\\n    // Liquidation discount in percentage point terms, 106 means a 6% discount\\r\\n    uint8 liquidationDiscount;\\r\\n}\\r\\n\\r\\n/// @dev Asset rate oracle object as it is represented in storage, total storage is 21 bytes.\\r\\nstruct AssetRateStorage {\\r\\n    // Address of the rate oracle\\r\\n    AssetRateAdapter rateOracle;\\r\\n    // The decimal places of the underlying asset\\r\\n    uint8 underlyingDecimalPlaces;\\r\\n}\\r\\n\\r\\n/// @dev Governance parameters for a cash group, total storage is 9 bytes + 7 bytes for liquidity token haircuts\\r\\n/// and 7 bytes for rate scalars, total of 23 bytes. Note that this is stored packed in the storage slot so there\\r\\n/// are no indexes stored for liquidityTokenHaircuts or rateScalars, maxMarketIndex is used instead to determine the\\r\\n/// length.\\r\\nstruct CashGroupSettings {\\r\\n    // Index of the AMMs on chain that will be made available. Idiosyncratic fCash\\r\\n    // that is dated less than the longest AMM will be tradable.\\r\\n    uint8 maxMarketIndex;\\r\\n    // Time window in 5 minute increments that the rate oracle will be averaged over\\r\\n    uint8 rateOracleTimeWindow5Min;\\r\\n    // Total fees per trade, specified in BPS\\r\\n    uint8 totalFeeBPS;\\r\\n    // Share of the fees given to the protocol, denominated in percentage\\r\\n    uint8 reserveFeeShare;\\r\\n    // Debt buffer specified in 5 BPS increments\\r\\n    uint8 debtBuffer5BPS;\\r\\n    // fCash haircut specified in 5 BPS increments\\r\\n    uint8 fCashHaircut5BPS;\\r\\n    // If an account has a negative cash balance, it can be settled by incurring debt at the 3 month market. This\\r\\n    // is the basis points for the penalty rate that will be added the current 3 month oracle rate.\\r\\n    uint8 settlementPenaltyRate5BPS;\\r\\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\\r\\n    uint8 liquidationfCashHaircut5BPS;\\r\\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\\r\\n    uint8 liquidationDebtBuffer5BPS;\\r\\n    // Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100\\r\\n    uint8[] liquidityTokenHaircuts;\\r\\n    // Rate scalar used to determine the slippage of the market\\r\\n    uint8[] rateScalars;\\r\\n}\\r\\n\\r\\n/// @dev Holds account level context information used to determine settlement and\\r\\n/// free collateral actions. Total storage is 28 bytes\\r\\nstruct AccountContext {\\r\\n    // Used to check when settlement must be triggered on an account\\r\\n    uint40 nextSettleTime;\\r\\n    // For lenders that never incur debt, we use this flag to skip the free collateral check.\\r\\n    bytes1 hasDebt;\\r\\n    // Length of the account's asset array\\r\\n    uint8 assetArrayLength;\\r\\n    // If this account has bitmaps set, this is the corresponding currency id\\r\\n    uint16 bitmapCurrencyId;\\r\\n    // 9 total active currencies possible (2 bytes each)\\r\\n    bytes18 activeCurrencies;\\r\\n}\\r\\n\\r\\n/// @dev Holds nToken context information mapped via the nToken address, total storage is\\r\\n/// 16 bytes\\r\\nstruct nTokenContext {\\r\\n    // Currency id that the nToken represents\\r\\n    uint16 currencyId;\\r\\n    // Annual incentive emission rate denominated in WHOLE TOKENS (multiply by \\r\\n    // INTERNAL_TOKEN_PRECISION to get the actual rate)\\r\\n    uint32 incentiveAnnualEmissionRate;\\r\\n    // The last block time at utc0 that the nToken was initialized at, zero if it\\r\\n    // has never been initialized\\r\\n    uint32 lastInitializedTime;\\r\\n    // Length of the asset array, refers to the number of liquidity tokens an nToken\\r\\n    // currently holds\\r\\n    uint8 assetArrayLength;\\r\\n    // Each byte is a specific nToken parameter\\r\\n    bytes5 nTokenParameters;\\r\\n    // Reserved bytes for future usage\\r\\n    bytes15 _unused;\\r\\n    // Set to true if a secondary rewarder is set\\r\\n    bool hasSecondaryRewarder;\\r\\n}\\r\\n\\r\\n/// @dev Holds account balance information, total storage 32 bytes\\r\\nstruct BalanceStorage {\\r\\n    // Number of nTokens held by the account\\r\\n    uint80 nTokenBalance;\\r\\n    // Last time the account claimed their nTokens\\r\\n    uint32 lastClaimTime;\\r\\n    // Incentives that the account no longer has a claim over\\r\\n    uint56 accountIncentiveDebt;\\r\\n    // Cash balance of the account\\r\\n    int88 cashBalance;\\r\\n}\\r\\n\\r\\n/// @dev Holds information about a settlement rate, total storage 25 bytes\\r\\nstruct SettlementRateStorage {\\r\\n    uint40 blockTime;\\r\\n    uint128 settlementRate;\\r\\n    uint8 underlyingDecimalPlaces;\\r\\n}\\r\\n\\r\\n/// @dev Holds information about a market, total storage is 42 bytes so this spans\\r\\n/// two storage words\\r\\nstruct MarketStorage {\\r\\n    // Total fCash in the market\\r\\n    uint80 totalfCash;\\r\\n    // Total asset cash in the market\\r\\n    uint80 totalAssetCash;\\r\\n    // Last annualized interest rate the market traded at\\r\\n    uint32 lastImpliedRate;\\r\\n    // Last recorded oracle rate for the market\\r\\n    uint32 oracleRate;\\r\\n    // Last time a trade was made\\r\\n    uint32 previousTradeTime;\\r\\n    // This is stored in slot + 1\\r\\n    uint80 totalLiquidity;\\r\\n}\\r\\n\\r\\nstruct ifCashStorage {\\r\\n    // Notional amount of fCash at the slot, limited to int128 to allow for\\r\\n    // future expansion\\r\\n    int128 notional;\\r\\n}\\r\\n\\r\\n/// @dev A single portfolio asset in storage, total storage of 19 bytes\\r\\nstruct PortfolioAssetStorage {\\r\\n    // Currency Id for the asset\\r\\n    uint16 currencyId;\\r\\n    // Maturity of the asset\\r\\n    uint40 maturity;\\r\\n    // Asset type (fCash or Liquidity Token marker)\\r\\n    uint8 assetType;\\r\\n    // Notional\\r\\n    int88 notional;\\r\\n}\\r\\n\\r\\n/// @dev nToken total supply factors for the nToken, includes factors related\\r\\n/// to claiming incentives, total storage 32 bytes. This is the deprecated version\\r\\nstruct nTokenTotalSupplyStorage_deprecated {\\r\\n    // Total supply of the nToken\\r\\n    uint96 totalSupply;\\r\\n    // Integral of the total supply used for calculating the average total supply\\r\\n    uint128 integralTotalSupply;\\r\\n    // Last timestamp the supply value changed, used for calculating the integralTotalSupply\\r\\n    uint32 lastSupplyChangeTime;\\r\\n}\\r\\n\\r\\n/// @dev nToken total supply factors for the nToken, includes factors related\\r\\n/// to claiming incentives, total storage 32 bytes.\\r\\nstruct nTokenTotalSupplyStorage {\\r\\n    // Total supply of the nToken\\r\\n    uint96 totalSupply;\\r\\n    // How many NOTE incentives should be issued per nToken in 1e18 precision\\r\\n    uint128 accumulatedNOTEPerNToken;\\r\\n    // Last timestamp when the accumulation happened\\r\\n    uint32 lastAccumulatedTime;\\r\\n}\\r\\n\\r\\n/// @dev Used in view methods to return account balances in a developer friendly manner\\r\\nstruct AccountBalance {\\r\\n    uint16 currencyId;\\r\\n    int256 cashBalance;\\r\\n    int256 nTokenBalance;\\r\\n    uint256 lastClaimTime;\\r\\n    uint256 accountIncentiveDebt;\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"./AggregatorInterface.sol\\\";\\r\\nimport \\\"./AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\r\\n{\\r\\n}\"\r\n    },\r\n    \"interfaces/notional/AssetRateAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-v3\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/// @notice Used as a wrapper for tokens that are interest bearing for an\\r\\n/// underlying token. Follows the cToken interface, however, can be adapted\\r\\n/// for other interest bearing tokens.\\r\\ninterface AssetRateAdapter {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function getExchangeRateStateful() external returns (int256);\\r\\n\\r\\n    function getExchangeRateView() external view returns (int256);\\r\\n\\r\\n    function getAnnualizedSupplyRate() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n  function latestTimestamp() external view returns (uint256);\\r\\n  function latestRound() external view returns (uint256);\\r\\n  function getAnswer(uint256 roundId) external view returns (int256);\\r\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\r\\n\\r\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\r\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\r\\n}\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n  function description() external view returns (string memory);\\r\\n  function version() external view returns (uint256);\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (proxy/ERC1967/ERC1967Upgrade.sol)\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"../beacon/IBeacon.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"../utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\r\\n */\\r\\nabstract contract ERC1967Upgrade {\\r\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\r\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _getImplementation() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCall(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _upgradeTo(newImplementation);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(newImplementation, data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCallSecure(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        address oldImplementation = _getImplementation();\\r\\n\\r\\n        // Initial upgrade and setup call\\r\\n        _setImplementation(newImplementation);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(newImplementation, data);\\r\\n        }\\r\\n\\r\\n        // Perform rollback test if not already in progress\\r\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\r\\n        if (!rollbackTesting.value) {\\r\\n            // Trigger rollback using upgradeTo from the new implementation\\r\\n            rollbackTesting.value = true;\\r\\n            Address.functionDelegateCall(\\r\\n                newImplementation,\\r\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\r\\n            );\\r\\n            rollbackTesting.value = false;\\r\\n            // Check rollback was effective\\r\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\r\\n            // Finally reset to the new implementation and log the upgrade\\r\\n            _upgradeTo(newImplementation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _getAdmin() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\r\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     */\\r\\n    function _changeAdmin(address newAdmin) internal {\\r\\n        emit AdminChanged(_getAdmin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the beacon is upgraded.\\r\\n     */\\r\\n    event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon.\\r\\n     */\\r\\n    function _getBeacon() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n     */\\r\\n    function _setBeacon(address newBeacon) private {\\r\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\r\\n        require(\\r\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\r\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\r\\n        );\\r\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\r\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\r\\n     *\\r\\n     * Emits a {BeaconUpgraded} event.\\r\\n     */\\r\\n    function _upgradeBeaconToAndCall(\\r\\n        address newBeacon,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _setBeacon(newBeacon);\\r\\n        emit BeaconUpgraded(newBeacon);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {BeaconProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxy/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/nTokenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface nTokenERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\\r\\n\\r\\n    function nTokenTransferAllowance(\\r\\n        uint16 currencyId,\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\\r\\n\\r\\n    function nTokenTransferApprove(\\r\\n        uint16 currencyId,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function nTokenTransfer(\\r\\n        uint16 currencyId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function nTokenTransferFrom(\\r\\n        uint16 currencyId,\\r\\n        address spender,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function nTokenClaimIncentives() external returns (uint256);\\r\\n\\r\\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\\r\\n\\r\\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (int256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/nERC1155Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../contracts/global/Types.sol\\\";\\r\\n\\r\\ninterface nERC1155Interface {\\r\\n    event TransferSingle(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    );\\r\\n    event TransferBatch(\\r\\n        address indexed operator,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256[] ids,\\r\\n        uint256[] values\\r\\n    );\\r\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\r\\n    event URI(string value, uint256 indexed id);\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\r\\n\\r\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function signedBalanceOf(address account, uint256 id) external view returns (int256);\\r\\n\\r\\n    function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\r\\n        external\\r\\n        view\\r\\n        returns (int256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n\\r\\n    function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts)\\r\\n        external\\r\\n        view\\r\\n        returns (PortfolioAsset[] memory);\\r\\n\\r\\n    function encodeToId(\\r\\n        uint16 currencyId,\\r\\n        uint40 maturity,\\r\\n        uint8 assetType\\r\\n    ) external pure returns (uint256 id);\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../contracts/global/Types.sol\\\";\\r\\nimport \\\"../../interfaces/chainlink/AggregatorV2V3Interface.sol\\\";\\r\\nimport \\\"../../interfaces/notional/NotionalGovernance.sol\\\";\\r\\nimport \\\"../../interfaces/notional/IRewarder.sol\\\";\\r\\nimport \\\"../../interfaces/aave/ILendingPool.sol\\\";\\r\\n\\r\\ninterface NotionalGovernance {\\r\\n    event ListCurrency(uint16 newCurrencyId);\\r\\n    event UpdateETHRate(uint16 currencyId);\\r\\n    event UpdateAssetRate(uint16 currencyId);\\r\\n    event UpdateCashGroup(uint16 currencyId);\\r\\n    event DeployNToken(uint16 currencyId, address nTokenAddress);\\r\\n    event UpdateDepositParameters(uint16 currencyId);\\r\\n    event UpdateInitializationParameters(uint16 currencyId);\\r\\n    event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);\\r\\n    event UpdateTokenCollateralParameters(uint16 currencyId);\\r\\n    event UpdateGlobalTransferOperator(address operator, bool approved);\\r\\n    event UpdateAuthorizedCallbackContract(address operator, bool approved);\\r\\n    event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);\\r\\n    event UpdateSecondaryIncentiveRewarder(uint16 indexed currencyId, address rewarder);\\r\\n    event UpdateLendingPool(address pool);\\r\\n\\r\\n    function transferOwnership(address newOwner, bool direct) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;\\r\\n\\r\\n    function listCurrency(\\r\\n        TokenStorage calldata assetToken,\\r\\n        TokenStorage calldata underlyingToken,\\r\\n        AggregatorV2V3Interface rateOracle,\\r\\n        bool mustInvert,\\r\\n        uint8 buffer,\\r\\n        uint8 haircut,\\r\\n        uint8 liquidationDiscount\\r\\n    ) external returns (uint16 currencyId);\\r\\n\\r\\n    function updateMaxCollateralBalance(\\r\\n        uint16 currencyId,\\r\\n        uint72 maxCollateralBalanceInternalPrecision\\r\\n    ) external;\\r\\n\\r\\n    function enableCashGroup(\\r\\n        uint16 currencyId,\\r\\n        AssetRateAdapter assetRateOracle,\\r\\n        CashGroupSettings calldata cashGroup,\\r\\n        string calldata underlyingName,\\r\\n        string calldata underlyingSymbol\\r\\n    ) external;\\r\\n\\r\\n    function updateDepositParameters(\\r\\n        uint16 currencyId,\\r\\n        uint32[] calldata depositShares,\\r\\n        uint32[] calldata leverageThresholds\\r\\n    ) external;\\r\\n\\r\\n    function updateInitializationParameters(\\r\\n        uint16 currencyId,\\r\\n        uint32[] calldata annualizedAnchorRates,\\r\\n        uint32[] calldata proportions\\r\\n    ) external;\\r\\n\\r\\n    function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;\\r\\n\\r\\n    function updateTokenCollateralParameters(\\r\\n        uint16 currencyId,\\r\\n        uint8 residualPurchaseIncentive10BPS,\\r\\n        uint8 pvHaircutPercentage,\\r\\n        uint8 residualPurchaseTimeBufferHours,\\r\\n        uint8 cashWithholdingBuffer10BPS,\\r\\n        uint8 liquidationHaircutPercentage\\r\\n    ) external;\\r\\n\\r\\n    function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;\\r\\n\\r\\n    function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;\\r\\n\\r\\n    function updateETHRate(\\r\\n        uint16 currencyId,\\r\\n        AggregatorV2V3Interface rateOracle,\\r\\n        bool mustInvert,\\r\\n        uint8 buffer,\\r\\n        uint8 haircut,\\r\\n        uint8 liquidationDiscount\\r\\n    ) external;\\r\\n\\r\\n    function updateGlobalTransferOperator(address operator, bool approved) external;\\r\\n\\r\\n    function updateAuthorizedCallbackContract(address operator, bool approved) external;\\r\\n\\r\\n    function setLendingPool(ILendingPool pool) external;\\r\\n\\r\\n    function setSecondaryIncentiveRewarder(uint16 currencyId, IRewarder rewarder) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalViews.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../contracts/global/Types.sol\\\";\\r\\n\\r\\ninterface NotionalViews {\\r\\n    function getMaxCurrencyId() external view returns (uint16);\\r\\n\\r\\n    function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);\\r\\n\\r\\n    function getCurrency(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (Token memory assetToken, Token memory underlyingToken);\\r\\n\\r\\n    function getRateStorage(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);\\r\\n\\r\\n    function getCurrencyAndRates(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            Token memory assetToken,\\r\\n            Token memory underlyingToken,\\r\\n            ETHRate memory ethRate,\\r\\n            AssetRateParameters memory assetRate\\r\\n        );\\r\\n\\r\\n    function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);\\r\\n\\r\\n    function getCashGroupAndAssetRate(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);\\r\\n\\r\\n    function getInitializationParameters(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);\\r\\n\\r\\n    function getDepositParameters(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (int256[] memory depositShares, int256[] memory leverageThresholds);\\r\\n\\r\\n    function nTokenAddress(uint16 currencyId) external view returns (address);\\r\\n\\r\\n    function getNoteToken() external view returns (address);\\r\\n\\r\\n    function getOwnershipStatus() external view returns (address owner, address pendingOwner);\\r\\n\\r\\n    function getGlobalTransferOperatorStatus(address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool isAuthorized);\\r\\n\\r\\n    function getAuthorizedCallbackContractStatus(address callback)\\r\\n        external\\r\\n        view\\r\\n        returns (bool isAuthorized);\\r\\n\\r\\n    function getSecondaryIncentiveRewarder(uint16 currencyId)\\r\\n        external\\r\\n        view\\r\\n        returns (address incentiveRewarder);\\r\\n\\r\\n    function getSettlementRate(uint16 currencyId, uint40 maturity)\\r\\n        external\\r\\n        view\\r\\n        returns (AssetRateParameters memory);\\r\\n\\r\\n    function getMarket(\\r\\n        uint16 currencyId,\\r\\n        uint256 maturity,\\r\\n        uint256 settlementDate\\r\\n    ) external view returns (MarketParameters memory);\\r\\n\\r\\n    function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);\\r\\n\\r\\n    function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime)\\r\\n        external\\r\\n        view\\r\\n        returns (MarketParameters[] memory);\\r\\n\\r\\n    function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);\\r\\n\\r\\n    function getNTokenPortfolio(address tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);\\r\\n\\r\\n    function getNTokenAccount(address tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint16 currencyId,\\r\\n            uint256 totalSupply,\\r\\n            uint256 incentiveAnnualEmissionRate,\\r\\n            uint256 lastInitializedTime,\\r\\n            bytes5 nTokenParameters,\\r\\n            int256 cashBalance,\\r\\n            uint256 accumulatedNOTEPerNToken,\\r\\n            uint256 lastAccumulatedTime\\r\\n        );\\r\\n\\r\\n    function getAccount(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            AccountContext memory accountContext,\\r\\n            AccountBalance[] memory accountBalances,\\r\\n            PortfolioAsset[] memory portfolio\\r\\n        );\\r\\n\\r\\n    function getAccountContext(address account) external view returns (AccountContext memory);\\r\\n\\r\\n    function getAccountBalance(uint16 currencyId, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int256 cashBalance,\\r\\n            int256 nTokenBalance,\\r\\n            uint256 lastClaimTime\\r\\n        );\\r\\n\\r\\n    function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);\\r\\n\\r\\n    function getfCashNotional(\\r\\n        address account,\\r\\n        uint16 currencyId,\\r\\n        uint256 maturity\\r\\n    ) external view returns (int256);\\r\\n\\r\\n    function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);\\r\\n\\r\\n    function getFreeCollateral(address account) external view returns (int256, int256[] memory);\\r\\n\\r\\n    function getTreasuryManager() external view returns (address);\\r\\n\\r\\n    function getReserveBuffer(uint16 currencyId) external view returns (uint256);\\r\\n\\r\\n    function getLendingPool() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface NotionalTreasury {\\r\\n\\r\\n    /// @notice Emitted when reserve balance is updated\\r\\n    event ReserveBalanceUpdated(uint16 indexed currencyId, int256 newBalance);\\r\\n    /// @notice Emitted when reserve balance is harvested\\r\\n    event ExcessReserveBalanceHarvested(uint16 indexed currencyId, int256 harvestAmount);\\r\\n    /// @dev Emitted when treasury manager is updated\\r\\n    event TreasuryManagerChanged(address indexed previousManager, address indexed newManager);\\r\\n    /// @dev Emitted when reserve buffer value is updated\\r\\n    event ReserveBufferUpdated(uint16 currencyId, uint256 bufferAmount);\\r\\n\\r\\n    function claimCOMPAndTransfer(address[] calldata ctokens) external returns (uint256);\\r\\n\\r\\n    function transferReserveToTreasury(uint16[] calldata currencies)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function setTreasuryManager(address manager) external;\\r\\n\\r\\n    function setReserveBuffer(uint16 currencyId, uint256 amount) external;\\r\\n\\r\\n    function setReserveCashBalance(uint16 currencyId, int256 reserveBalance) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/notional/IRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\ninterface IRewarder {\\r\\n    function claimRewards(\\r\\n        address account,\\r\\n        uint16 currencyId,\\r\\n        uint256 nTokenBalanceBefore,\\r\\n        uint256 nTokenBalanceAfter,\\r\\n        int256  netNTokenSupplyChange,\\r\\n        uint256 NOTETokensClaimed\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"interfaces/aave/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nstruct LendingPoolStorage {\\r\\n  ILendingPool lendingPool;\\r\\n}\\r\\n\\r\\ninterface ILendingPool {\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to deposit\\r\\n   * @param amount The amount to be deposited\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function deposit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized income normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n   * @dev Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state of the reserve\\r\\n   **/\\r\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\r\\n\\r\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //tokens addresses\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint8 id;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: Reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"views_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidateCurrency_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatefCash_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calculationViews_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CALCULATION_VIEWS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATE_CURRENCY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATE_FCASH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIEWS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationEnabledState\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"getRouterImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"liquidationEnabledState_\",\"type\":\"bytes1\"}],\"name\":\"setLiquidationEnabledState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "PauseRouter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bf91ec7a64fcf0844e54d3198e50ad8fb4d68e93000000000000000000000000a3707cd595f6ab810a84d04c92d8ade5f7593db5000000000000000000000000fb56271c976a8b446b6d33d1ec76c84f6aa53f1b0000000000000000000000002de2b1eecf5bab0add9147ebbb999395238d30a5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}