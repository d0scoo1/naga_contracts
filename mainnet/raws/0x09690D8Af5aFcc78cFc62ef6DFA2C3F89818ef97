{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LadyLlamas.sol\": {\r\n      \"content\": \"/***\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMWXKXNWMMMMMMMMMMMMMMMMWNNXKKKKKKKKKKKKK0000000KNMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMW0:.,:d0NMMMMMMMMMMWXx:'......................dNMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.   .;xXMMMMMMMWx'         .'''''.        .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMx.      :KMMMMMMk.        .xXNNNNNO'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMx.      .dWMMMMWl         cNMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMx.       lWMMMMWl         lWMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMx.       lNMMMMWl         lWMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMx.       lNMMMMWl         lWMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMd.       lNMMMMWl         lNMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMd.       lNMMMMMO.        lNMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMd.       lNMMMMMWO,       lNMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMd.       lNMMMMMMMNkc'..  ;XMMMMMM0'       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMd.       lNMMMMMMMMMWNK0xoo0WMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       lNMMMMMMMMMMMMMMMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       lNMMMMMMMMMMMMMMMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       lNMMMMMMMMMMMMMMMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       lNMMMMMMMMMMMMMMMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMMMMMMMMMMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMWWMMMMMMMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMWkccokOKWMMMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMK,    .;dXMMMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMX:       ,kWMMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMX:        '0MMMMMK,       .kMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMX:        .xMMMMMK,       .OMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMX:        .dMMMMMK,       .OMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMX:        .dMMMMMK,       .OMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMX;        .dWMMMMK,       .OMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       cNMMMMMMK,        .xMMMMMNc       .OMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.       ;k00000k:         :XMMMMMMK:      .OMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWd.                       .lKMMMMMMMMNk:.   .kWMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMXl'..'''''',,,,,,,,,,,;:cxKWMMMMMMMMMMMWXko::oXMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWNNNNNNNNNNWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMWNWMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n *\\n * @title: LadyLlamas.sol\\n * @author: MaxFlowO2 on Twitter/GitHub\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >0.8.0 <=0.9.0;\\n\\nimport \\\"./token/ERC721/ERC721.sol\\\";\\nimport \\\"./eip/2981/ERC2981Collection.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./lib/CountersV2.sol\\\";\\nimport \\\"./utils/ContextV2.sol\\\";\\nimport \\\"./modules/WhitelistV2.sol\\\";\\nimport \\\"./access/MaxAccessControl.sol\\\";\\nimport \\\"./modules/PaymentSplitterV2.sol\\\";\\nimport \\\"./modules/Llamas.sol\\\";\\nimport \\\"./modules/ContractURI.sol\\\";\\n\\ncontract LadyLlamas is ERC721\\n                     , ERC2981Collection\\n                     , ContractURI\\n                     , Llamas\\n                     , WhitelistV2\\n                     , PaymentSplitterV2\\n                     , MaxAccess\\n                     , ReentrancyGuard {\\n\\n  using CountersV2 for CountersV2.Counter;\\n  using Strings for uint256;\\n\\n  CountersV2.Counter private _tokenIdCounter;\\n  uint private mintStartID;\\n  uint private constant MINT_FEE_ONE = 0.1 ether; // 5+ on day 1\\n  uint private constant MINT_FEE_TWO = 0.15 ether; // 3-4 on day 1 + whitelist day 2\\n  uint private constant MINT_FEE_THREE = 0.2 ether; // 1-2 on day 3\\n  uint private timeOneStart;\\n  uint private timeTwoStart;\\n  uint private timeThreeStart;\\n  uint private timeThreeEnd;\\n  uint private constant MINT_SIZE = 3000;\\n  string private unrevealedBase;\\n  string private base;\\n  bool private revealedNFT;\\n  bool private enableMinter;\\n  bool private lockedProvenance;\\n  bool private lockedPayees;\\n  bool private lockedAirdrop;\\n  mapping(uint => bool) private LBLUsed;\\n  mapping(address => bool) public oneToOne;\\n  mapping(address => bool) public threeToOne;\\n  IERC721 private LBLNFT; // don't forget to add this later\\n\\n  error ToEarly(uint time, uint startTime);\\n  error ToLate(uint time, uint endTime);\\n  error AlreadyClaimed(uint tokenID);\\n  error NotEnoughETH(uint required, uint sent);\\n  error AlreadyMinted();\\n  error NotOnWhitelist();\\n  error OverMaximumMint();\\n  error CanNotMintThatMany(uint requested, uint allowed);\\n  error ProvenanceNotSet();\\n  error ProvenanceAlreadySet();\\n  error PayeesNotSet();\\n  error PayeesAlreadySet();\\n  error NFTsAlreadyRevealed();\\n  error NonMintedToken(uint token);\\n  error NullArray();\\n  error AirdropLocked();\\n  error NoTimesSet();\\n\\n  event NFTReveal(bool status, uint time);\\n  event UpdatedUnrevealedBaseURI(string _old, string _new);\\n  event UpdatedBaseURI(string _old, string _new);\\n  event ProvenanceLocked(bool _status);\\n  event PayeesLocked(bool _status);\\n  event DayOneTimes(uint start, uint end);\\n  event DayTwoTimes(uint start, uint end);\\n  event DayThreeTimes(uint start, uint end);\\n  event LBLContractAddressUpdated(address _update);\\n  event AirdropIsLocked(bool _status);\\n\\n  constructor() ERC721(\\\"Lady Llamas\\\", \\\"LL\\\") {}\\n\\n/***\\n *    \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\n *    \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \\n */\\n\\n  // @notice: this is the 5+ mint for the UX/UI team\\n  // @param ids: Array of LBL id's to mint off of\\n  // This will take ids, and lock them out of the mapping\\n  // so an id can not remint a LL. Cost will be .1 eth per\\n  // length.ids/5. Can mint multiple.\\n  function publicMintFiveToOne(\\n    uint256[] memory ids\\n    ) \\n    public \\n    payable\\n    nonReentrant() {\\n    // locals\\n    address user = _msgSender();\\n\\n    // errors\\n    if (!lockedProvenance) {\\n      revert ProvenanceNotSet();\\n    }\\n    if (timeOneStart == 0) {\\n      revert NoTimesSet();\\n    }\\n    if (block.timestamp < timeOneStart) {\\n      revert ToEarly({\\n        time: block.timestamp\\n      , startTime: timeOneStart\\n      });\\n    }\\n    if (block.timestamp >= timeTwoStart) {\\n      revert ToLate({\\n        time: block.timestamp\\n      , endTime: timeTwoStart\\n      });\\n    }\\n    // checks & effects\\n    uint length = ids.length;\\n    uint quant;\\n    for(uint x=0; x < length;) {\\n      if (LBLUsed[ids[x]]) {\\n        revert AlreadyClaimed({\\n          tokenID: ids[x]\\n        });\\n      }\\n      if (LBLNFT.ownerOf(ids[x]) == user){\\n        ++quant;\\n        LBLUsed[ids[x]] = true;\\n      }\\n      unchecked { ++x; }\\n    }\\n    quant = quant / 5; // 5:1 ratio for 0.1 eth\\n    if (_msgValue() != quant * MINT_FEE_ONE) {\\n      revert NotEnoughETH({\\n        required: quant * MINT_FEE_ONE\\n      , sent: _msgValue()\\n      });\\n    }\\n\\n    // minting\\n    if (quant + _tokenIdCounter.current() >= MINT_SIZE) {\\n      revert OverMaximumMint();\\n    }\\n    for(uint x=0; x < quant;) {\\n      _safeMint(user, mintID());\\n      _tokenIdCounter.increment();\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  // @notice: this is the 3/4 mint for the UX/UI team\\n  // @param ids: Array of LBL id's to mint off of\\n  // This will take ids, and lock them out of the mapping\\n  // so an id can not remint a LL. Cost will be .15 eth \\n  // Can only mint one, locks out the mapping for threeToOne\\n  function publicMintThreeToOne(\\n    uint256[] memory ids\\n    ) \\n    public \\n    payable\\n    nonReentrant() {\\n    // locals\\n    address user = _msgSender();\\n\\n    // errors\\n    if (!lockedProvenance) {\\n      revert ProvenanceNotSet();\\n    }\\n    if (timeOneStart == 0) {\\n      revert NoTimesSet();\\n    }\\n    if (block.timestamp < timeOneStart) {\\n      revert ToEarly({\\n        time: block.timestamp\\n      , startTime: timeOneStart\\n      });\\n    }\\n    if (block.timestamp >= timeTwoStart) {\\n      revert ToLate({\\n        time: block.timestamp\\n      , endTime: timeTwoStart\\n      });\\n    }\\n    if (threeToOne[user]) {\\n      revert AlreadyMinted();\\n    }\\n    // checks & effects\\n    threeToOne[user] = true; // locks them out\\n    uint length = ids.length;\\n    uint quant = 0;\\n    for(uint x=0; x < length;) {\\n      if (LBLUsed[ids[x]]) {\\n        revert AlreadyClaimed({\\n          tokenID: ids[x]\\n        });\\n      }\\n      if (LBLNFT.ownerOf(ids[x]) == user){\\n        ++quant;\\n        LBLUsed[ids[x]] = true;\\n      }\\n      unchecked { ++x; }\\n    }\\n    if (quant == 0) {\\n      revert NullArray();\\n    }\\n    if (quant >= 3) {\\n      if (_msgValue() !=  MINT_FEE_TWO) {\\n        revert NotEnoughETH({\\n          required: MINT_FEE_TWO\\n        , sent: _msgValue()\\n        });\\n      }\\n\\n      // minting\\n      if (1 + _tokenIdCounter.current() >= MINT_SIZE) {\\n        revert OverMaximumMint();\\n      }\\n      _safeMint(user, mintID());\\n      _tokenIdCounter.increment();\\n    }\\n  }\\n\\n  // @notice: this is the whitelist mint funtion for UX/UI team\\n  // This will do the same checks, then set whitelist to false\\n  // then mint one LL for .15 eth.\\n  function whitelistMint()\\n    public\\n    payable\\n    nonReentrant() {\\n    // locals\\n    address user = _msgSender();\\n\\n    // errors\\n    if (!lockedProvenance) {\\n      revert ProvenanceNotSet();\\n    }\\n    if (timeOneStart == 0) {\\n      revert NoTimesSet();\\n    }\\n    if (block.timestamp < timeTwoStart) {\\n      revert ToEarly({\\n        time: block.timestamp\\n      , startTime: timeTwoStart\\n      });\\n    }\\n    if (block.timestamp >= timeThreeStart) {\\n      revert ToLate({\\n        time: block.timestamp\\n      , endTime: timeThreeStart\\n      });\\n    }\\n    // checks & effects\\n    bool check = _myWhitelistStatus(user);\\n    if (!check) {\\n      revert NotOnWhitelist();\\n    }\\n    removeWhitelist(user);\\n    if (_msgValue() != MINT_FEE_TWO) {\\n      revert NotEnoughETH({\\n        required: MINT_FEE_TWO\\n      , sent: _msgValue()\\n      });\\n    }\\n\\n    // minting\\n    if (1 + _tokenIdCounter.current() >= MINT_SIZE) {\\n      revert OverMaximumMint();\\n    }\\n    _safeMint(user, mintID());\\n    _tokenIdCounter.increment();\\n  }\\n\\n  // @notice: this is the 1/2 mint for the UX/UI team\\n  // @param ids: Array of LBL id's to mint off of\\n  // This will take ids, and lock them out of the mapping\\n  // so an id can not remint a LL. Cost will be .15 eth\\n  // Can only mint one, locks out the mapping for oneToOne\\n  function publicMintOneToOne(\\n    uint256 id\\n    )\\n    public\\n    payable\\n    nonReentrant() {\\n    // locals\\n    address user = _msgSender();\\n\\n    // errors\\n    if (!lockedProvenance) {\\n      revert ProvenanceNotSet();\\n    }\\n    if (timeOneStart == 0) {\\n      revert NoTimesSet();\\n    }\\n    if (block.timestamp < timeThreeStart) {\\n      revert ToEarly({\\n        time: block.timestamp\\n      , startTime: timeThreeStart\\n      });\\n    }\\n    if (block.timestamp >= timeThreeEnd) {\\n      revert ToLate({\\n        time: block.timestamp\\n      , endTime: timeThreeEnd\\n      });\\n    }\\n    if (oneToOne[user]) {\\n      revert AlreadyMinted();\\n    }\\n    if (_msgValue() != MINT_FEE_THREE) {\\n      revert NotEnoughETH({\\n        required: MINT_FEE_THREE\\n      , sent: _msgValue()\\n      });\\n    }\\n    if (LBLUsed[id]) {\\n      revert AlreadyClaimed({\\n        tokenID: id\\n      });\\n    }\\n    // checks & effects\\n    oneToOne[user] = true; // locks them out\\n    if (LBLNFT.ownerOf(id) == user){\\n      LBLUsed[id] = true;\\n    } // consumes id\\n\\n    // minting\\n    if (1 + _tokenIdCounter.current() >= MINT_SIZE) {\\n      revert OverMaximumMint();\\n    }\\n    _safeMint(user, mintID());\\n    _tokenIdCounter.increment();\\n  }\\n\\n  // @notice: this is the boss llama \\\"airdrop\\\" mint\\n  // @param ids: Array of address taken from snapshot\\n  // Will mint one token to each address in the array of \\n  // addresses.\\n  function bossLlamaAirdrop(\\n    address [] memory addresses\\n    )\\n    public\\n    onlyOwner {\\n    if (!lockedProvenance) {\\n      revert ProvenanceNotSet();\\n    }\\n    if (timeOneStart == 0) {\\n      revert NoTimesSet();\\n    }\\n    if (lockedAirdrop) {\\n      revert AirdropLocked();\\n    }\\n    uint length = addresses.length;\\n    if (length + _tokenIdCounter.current() >= MINT_SIZE) {\\n      revert OverMaximumMint();\\n    }\\n    for(uint x=0; x < length;) {\\n      _safeMint(addresses[x], mintID());\\n      _tokenIdCounter.increment();\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  // @notice: this is the public mint funtion for UX/UI team\\n  // This will do the same checks then mint quant of LL for .2 eth.\\n  // @param quant: amount to be minted\\n  function publicMint(uint quant)\\n    public\\n    payable\\n    nonReentrant() {\\n    // locals\\n    address user = _msgSender();\\n\\n    // errors\\n    if (!lockedProvenance) {\\n      revert ProvenanceNotSet();\\n    }\\n    if (timeOneStart == 0) {\\n      revert NoTimesSet();\\n    }\\n    if (block.timestamp < timeThreeEnd) {\\n      revert ToEarly({\\n        time: block.timestamp\\n      , startTime: timeThreeEnd\\n      });\\n    }\\n    if (quant > 2) {\\n      revert CanNotMintThatMany({\\n        requested: quant\\n      , allowed: 2\\n      });\\n    }\\n    // checks & effects\\n    if (_msgValue() != quant * MINT_FEE_THREE) {\\n      revert NotEnoughETH({\\n        required: MINT_FEE_THREE * quant\\n      , sent: _msgValue()\\n      });\\n    }\\n\\n    // minting\\n    if (quant + _tokenIdCounter.current() >= MINT_SIZE) {\\n      revert OverMaximumMint();\\n    }\\n    for(uint x=0; x < quant;) {\\n      _safeMint(user, mintID());\\n      _tokenIdCounter.increment();\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  // @notice this shifts the _tokenIdCounter to proper mint number\\n  function mintID() internal view returns (uint) {\\n    return (mintStartID + _tokenIdCounter.current()) % MINT_SIZE;\\n  }\\n\\n  // Function to receive ether, msg.data must be empty\\n  receive() external payable {\\n    // From PaymentSplitter.sol, 99% of the time won't register\\n    emit PaymentReceived(_msgSender(), _msgValue());\\n  }\\n\\n  // Function to receive ether, msg.data is not empty\\n  fallback() external payable {\\n    // From PaymentSplitter.sol, 99% of the time won't register\\n    emit PaymentReceived(_msgSender(), _msgValue());\\n  }\\n\\n  function getBalance() external view returns (uint) {\\n    return address(this).balance;\\n  }\\n\\n/***\\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n *    \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n *    \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n *    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\\n *     \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\\n * This section will have all the internals set to onlyOwner\\n */\\n\\n  // edit me...\\n  // @notice click this to start it up initally, for ease by onlyOwner\\n  // param timeOne: unix timestamp\\n  function startMinting(uint _start)\\n    public\\n    onlyOwner {\\n    timeOneStart = _start;\\n    timeTwoStart = _start + 1 days;\\n    timeThreeStart = _start + 2 days;\\n    timeThreeEnd = _start + 3 days;\\n    emit DayOneTimes(timeOneStart, timeTwoStart);\\n    emit DayTwoTimes(timeTwoStart, timeThreeStart);\\n    emit DayThreeTimes(timeThreeStart, timeThreeEnd);\\n  }\\n\\n  // @notice external to the internal on WhitelistV2.sol\\n  // @param _addresses - array of addresses to add\\n  function addWhitelistBatch(\\n    address [] memory _addresses\\n    )\\n    public\\n    onlyOwner {\\n    _addBatchWhitelist(_addresses);\\n  }\\n\\n  // @notice adding functions to mapping\\n  // @param _address - address to add\\n  function addWhitelist(\\n    address _address\\n    )\\n    public\\n    onlyOwner {\\n    _addWhitelist(_address);\\n  }\\n\\n  // @notice removing functions to mapping\\n  // @param _addresses - array of addresses to remove\\n  function removeWhitelistBatch(\\n    address [] memory _addresses\\n    )\\n    public\\n    onlyOwner {\\n    _removeBatchWhitelist(_addresses);\\n  }\\n\\n  // @notice removing functions to mapping\\n  // @param _address - address to remove\\n  function removeWhitelist(\\n    address _address\\n    )\\n    public\\n    onlyOwner {\\n    _removeWhitelist(_address);\\n  }\\n\\n/***\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551   \u2588\u2588\u2551\\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u255d  \\n * This section will have all the internals set to onlyDeveloper()\\n * also contains all overrides required for funtionality\\n */\\n\\n  // @notice will add an address to PaymentSplitter by onlyDeveloper() role\\n  // @param newAddy: new address to add\\n  // @param newShares: amount of shares for newAddy\\n  function addPayee(\\n    address newAddy\\n  , uint newShares\\n    )\\n    public\\n    onlyDeveloper() {\\n    // error\\n    if(lockedPayees) {\\n      revert PayeesAlreadySet();\\n    }\\n    _addPayee(newAddy, newShares);\\n  }\\n\\n  // @notice will lock payees on PaymentSplitter.sol\\n  function lockPayees()\\n    public\\n    onlyDeveloper() {\\n    // error\\n    if(lockedPayees) {\\n      revert PayeesAlreadySet();\\n    }\\n    lockedPayees = true;\\n    emit PayeesLocked(lockedPayees);\\n  }\\n\\n  // @notice will set IERC721 for LBL\\n  // @param update: LBL CA\\n  function setLBLCA(\\n    address update\\n    )\\n    public\\n    onlyDeveloper() {\\n    LBLNFT = IERC721(update);\\n    emit LBLContractAddressUpdated(update);\\n  }\\n\\n  // @notice will lock airdrop\\n  function lockAirdrop()\\n    public\\n    onlyDeveloper() {\\n    lockedAirdrop = true;\\n    emit AirdropIsLocked(lockedAirdrop);\\n  }\\n\\n  // @notice will update _baseURI() by onlyDeveloper() role\\n  // @param _base: Base for NFT's\\n  function setBaseURI(\\n    string memory _base\\n    )\\n    public\\n    onlyDeveloper() {\\n    string memory old = base;\\n    base = _base;\\n    emit UpdatedBaseURI(old, base);\\n  }\\n\\n  // @notice will update by onlyDeveloper() role\\n  // @param _base: Base for unrevealed NFT's\\n  function setUnrevealedBaseURI(\\n    string memory _base\\n    )\\n    public\\n    onlyDeveloper() {\\n    string memory old = base;\\n    unrevealedBase = _base;\\n    emit UpdatedUnrevealedBaseURI(old, unrevealedBase);\\n  }\\n\\n  // @notice will reveal NFT's via tokenURI override\\n  function revealNFTs() public onlyDeveloper() {\\n    if (revealedNFT) {\\n      revert NFTsAlreadyRevealed();\\n    }\\n    revealedNFT = true;\\n    emit NFTReveal(revealedNFT, block.timestamp);\\n  }\\n\\n  // @notice will set the ContractURI for OpenSea\\n  function setContractURI(string memory _contractURI) public onlyDeveloper() {\\n    _setContractURI(_contractURI);\\n  }\\n\\n  // @notice this will set the Provenance Hashes\\n  // This will also set the starting order as well!\\n  // Only one shot to do this, otherwise it shows as invalid\\n  function setProvenance(string memory _images, string memory _json) public onlyDeveloper() {\\n    // errors\\n    if (!lockedPayees) {\\n      revert PayeesNotSet();\\n    }\\n    if (lockedProvenance) {\\n      revert ProvenanceAlreadySet();\\n    }\\n    // This is the initial setting\\n    _setProvenanceImages(_images);\\n    _setProvenanceJSON(_json);\\n    // Now to psuedo-random the starting number\\n    // Your API should be a random before this step!\\n    mintStartID = uint(keccak256(abi.encodePacked(block.timestamp, _msgSender(), _images, _json, block.difficulty))) % MINT_SIZE;\\n    _setStartNumber(mintStartID);\\n    // @notice Locks sequence\\n    lockedProvenance = true;\\n    emit ProvenanceLocked(lockedProvenance);\\n  }\\n\\n  ///\\n  /// Developer, these are the overrides\\n  ///\\n\\n  // @notice solidity required override for _baseURI()\\n  function _baseURI() internal view override returns (string memory) {\\n    return base;\\n  }\\n\\n  // @notice internal function for unrevealedBase\\n  function _unrevealedURI() internal view returns (string memory) {\\n    return unrevealedBase;\\n  }\\n\\n  // @notice this is the toggle between revealed and non revealed NFT's\\n  function tokenURI(uint256 tokenId) public view virtual override(ERC721) returns (string memory) {\\n    if (ownerOf(tokenId) == address(0)) {\\n      revert NonMintedToken({\\n        token: tokenId\\n      });\\n    }\\n    if (!revealedNFT) {\\n      string memory baseURI = _unrevealedURI();\\n      return bytes(baseURI).length > 0 ? string(unrevealedBase) : \\\"\\\";\\n    } else {\\n      string memory baseURI = _baseURI();\\n      return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n  }\\n\\n  // @notice solidity required override for supportsInterface(bytes4)\\n  // @param bytes4 interfaceId - bytes4 id per interface or contract\\n  //  calculated by ERC165 standards automatically\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721, IERC165) returns (bool) {\\n    return (\\n      interfaceId == type(ReentrancyGuard).interfaceId  ||\\n      interfaceId == type(WhitelistV2).interfaceId ||\\n      interfaceId == type(MaxAccess).interfaceId ||\\n      interfaceId == type(PaymentSplitterV2).interfaceId ||\\n      interfaceId == type(Llamas).interfaceId ||\\n      interfaceId == type(ContractURI).interfaceId ||\\n      super.supportsInterface(interfaceId)\\n    );\\n  }\\n\\n  // @notice will return bool for isClaimed\\n  function isClaimed(uint _tokenId) external view returns (bool) {\\n    return LBLUsed[_tokenId];\\n  }\\n\\n  // @notice will return epoch 1\\n  function epochOne() external view returns (uint, uint) {\\n    return (timeOneStart, timeTwoStart);\\n  }\\n\\n // @notice will return epoch 2\\n  function epochTwo() external view returns (uint, uint) {\\n    return (timeTwoStart, timeThreeStart);\\n  }\\n\\n // @notice will return epoch 3\\n  function epochThree() external view returns (uint, uint) {\\n    return (timeThreeStart, timeThreeEnd);\\n  }\\n\\n  // @notice will return minting fees\\n  function minterFeesFivePlus() external view returns (uint) {\\n    return MINT_FEE_ONE;\\n  }\\n\\n  // @notice will return minting fees\\n  function minterFeesThreePlusOrWL() external view returns (uint) {\\n    return MINT_FEE_TWO;\\n  }\\n\\n  // @notice will return minting fees\\n  function minterFeesOnePlusDayThree() external view returns (uint) {\\n    return MINT_FEE_THREE;\\n  }\\n\\n  // @notice will return maximum mint capacity\\n  function minterMaximumCapacity() external view returns (uint) {\\n    return MINT_SIZE;\\n  }\\n\\n  // @notice will return current token count\\n  function totalSupply() external view returns (uint) {\\n    return _tokenIdCounter.current();\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/ContextV2.sol\": {\r\n      \"content\": \"/***\\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2554\u255d    \u2588\u2588\u2551   \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d   \u2588\u2588\u2554\u2588\u2588\u2557    \u2588\u2588\u2551   \\n *    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d \u2588\u2588\u2557   \u2588\u2588\u2551   \\n *     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \\n * This is a re-write of @openzeppelin/contracts/utils/Context.sol\\n * Rewritten by MaxFlowO2, Senior Developer and Partner of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Upgraded with _msgValue() and _txOrigin() as ContextV2 on 31 Dec 2021\\n */\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextV2 {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _msgValue() internal view virtual returns (uint) {\\n        return msg.value;\\n    }\\n\\n    function _txOrigin() internal view virtual returns (address) {\\n        return tx.origin;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2551\\n *    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551         \u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2551\\n *    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551        \u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d  \u2588\u2588\u2551\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\\n * This is a re-write of @openzeppelin/contracts/token/ERC721/ERC721.sol\\n * Rewritten by MaxFlowO2, Senior Developer and Partner of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Updated to ContextV2, and removed ERC165 calculations on 31 Dec 2021\\n */\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../utils/ContextV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is ContextV2, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/WhitelistV2.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n *    \u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \\n *    \u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \\n *    \u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *     \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n *                                          \\n *    \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557          \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d          \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551             \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551             \\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551             \\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d             \\n * @title Whitelist\\n * @author @MaxFlowO2 (Twitter/GitHub)\\n * @dev provides a use case of Library Whitelist use in v2.2\\n *      Written on 22 Jan 2022, using LBL Tech!\\n *\\n * Can be used on all \\\"Tokens\\\" ERC-20, ERC-721, ERC-777, ERC-1155 or whatever\\n * Solidity contract you can think of!\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/Whitelist.sol\\\";\\n\\nabstract contract WhitelistV2 {\\n  using Whitelist for Whitelist.List;\\n  \\n  Whitelist.List private whitelist;\\n\\n  function _addWhitelist(address newAddress) internal {\\n    whitelist.add(newAddress);\\n  }\\n\\n  function _addBatchWhitelist(address[] memory newAddresses) internal {\\n    uint length = newAddresses.length;\\n    for(uint x = 0; x < length;) {\\n      whitelist.add(newAddresses[x]);\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  function _removeWhitelist(address newAddress) internal {\\n    whitelist.remove(newAddress);\\n  }\\n\\n  function _removeBatchWhitelist(address[] memory newAddresses) internal {\\n    uint length = newAddresses.length;\\n    for(uint x = 0; x < length;) {\\n      whitelist.remove(newAddresses[x]);\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  function _enableWhitelist() internal {\\n    whitelist.enable();\\n  }\\n\\n  function _disableWhitelist() internal {\\n    whitelist.disable();\\n  }\\n\\n  // @notice rename this to whatever you want timestamp/quant of tokens sold\\n  // @dev will set the ending uint of whitelist\\n  // @param endNumber - uint for the end (quant or timestamp)\\n  function _setEndOfWhitelist(uint endNumber) internal {\\n    whitelist.setEnd(endNumber);\\n  }\\n\\n  // @dev will return user status on whitelist\\n  // @return - bool if whitelist is enabled or not\\n  // @param myAddress - any user account address, EOA or contract\\n  function _myWhitelistStatus(address myAddress) internal view returns (bool) {\\n    return whitelist.onList(myAddress);\\n  }\\n\\n  // @dev will return user status on whitelist\\n  // @return - bool if whitelist is enabled or not\\n  // @param myAddress - any user account address, EOA or contract\\n  function myWhitelistStatus(address myAddress) external view returns (bool) {\\n    return whitelist.onList(myAddress);\\n  }\\n\\n  // @dev will return status of whitelist\\n  // @return - bool if whitelist is enabled or not\\n  function whitelistStatus() external view returns (bool) {\\n    return whitelist.status();\\n  }\\n\\n  // @dev will return whitelist end (quantity or time)\\n  // @return - uint of either number of whitelist mints or\\n  //  a timestamp\\n  function whitelistEnd() external view returns (uint) {\\n    return whitelist.showEnd();\\n  }\\n\\n  // @dev will return totat on whitelist\\n  // @return - uint from CountersV2.Count\\n  function TotalOnWhitelist() external view returns (uint) {\\n    return whitelist.totalAdded();\\n  }\\n\\n  // @dev will return totat used on whitelist\\n  // @return - uint from CountersV2.Count\\n  function TotalWhiteListUsed() external view returns (uint) {\\n    return whitelist.totalRemoved();\\n  }\\n\\n  // @dev will return totat used on whitelist\\n  // @return - uint aka xxxx = xx.xx%\\n  function WhitelistEfficiency() external view returns (uint) {\\n    if(whitelist.totalRemoved() == 0) {\\n      return 0;\\n    } else {\\n      return whitelist.totalRemoved() * 10000 / whitelist.totalAdded();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/PaymentSplitterV2.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551  \u255a\u2588\u2588\u2554\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \\n *                                                                   \\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d  \\n *    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551  \\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d  \\n * This is a re-write of @openzeppelin/contracts/finance/PaymentSplitter.sol\\n * Rewritten by MaxFlowO2, Senior Developer and Partner of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../utils/ContextV2.sol\\\";\\n// Removal of SafeMath due to ^0.8.0 standards, not needed\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\n\\nabstract contract PaymentSplitterV2 is ContextV2 {\\n\\n  event PayeeAdded(address account, uint256 shares);\\n  event PaymentReleased(address to, uint256 amount);\\n  event PaymentReceived(address from, uint256 amount);\\n\\n  uint256 private _totalShares;\\n  uint256 private _totalReleased;\\n  mapping(address => uint256) private _shares;\\n  mapping(address => uint256) private _released;\\n  address[] private _payees;\\n\\n  /**\\n   * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n   * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n   * reliability of the events, and not the actual splitting of Ether.\\n   *\\n   * To learn more about this see the Solidity documentation for\\n   * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n   * functions].\\n   *\\n   *  receive() external payable virtual {\\n   *    emit PaymentReceived(_msgSender(), msg.value);\\n   *  }\\n   *\\n   *  // Fallback function is called when msg.data is not empty\\n   *  // Added to PaymentSplitter.sol\\n   *  fallback() external payable {\\n   *    emit PaymentReceived(_msgSender(), msg.value);\\n   *  }\\n   *\\n   * receive() and fallback() to be handled at final contract\\n   */\\n\\n  /**\\n   * @dev Getter for the total shares held by payees.\\n   */\\n  function totalShares() public view returns (uint256) {\\n    return _totalShares;\\n  }\\n\\n  /**\\n   * @dev Getter for the total amount of Ether already released.\\n   */\\n  function totalReleased() public view returns (uint256) {\\n    return _totalReleased;\\n  }\\n\\n  /**\\n   * @dev Getter for the amount of shares held by an account.\\n   */\\n  function shares(address account) public view returns (uint256) {\\n    return _shares[account];\\n  }\\n\\n  /**\\n   * @dev Getter for the amount of Ether already released to a payee.\\n   */\\n  function released(address account) public view returns (uint256) {\\n    return _released[account];\\n  }\\n\\n  /**\\n   * @dev Getter for the address of the payee number `index`.\\n   */\\n  function payee(uint256 index) public view returns (address) {\\n    return _payees[index];\\n  }\\n\\n  /**\\n   * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n   * total shares and their previous withdrawals.\\n   */\\n  // This function was updated from \\\"account\\\" to _msgSender()\\n  function claim() public virtual {\\n    address check = _msgSender();\\n    require(_shares[check] > 0, \\\"PaymentSplitter: You have no shares\\\");\\n\\n    uint256 totalReceived = address(this).balance + _totalReleased;\\n    uint256 payment = (totalReceived * _shares[check]) / _totalShares - _released[check];\\n\\n    require(payment != 0, \\\"PaymentSplitter: You are not due payment\\\");\\n\\n    _released[check] = _released[check] + payment;\\n    _totalReleased = _totalReleased + payment;\\n\\n    Address.sendValue(payable(check), payment);\\n    emit PaymentReleased(check, payment);\\n  }\\n\\n  /**\\n   * @dev Add a new payee to the contract.\\n   * @param account The address of the payee to add.\\n   * @param shares_ The number of shares owned by the payee.\\n   */\\n  // This function was updated to internal\\n  function _addPayee(address account, uint256 shares_) internal {\\n    require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n    require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n    require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n    _payees.push(account);\\n    _shares[account] = shares_;\\n    _totalShares = _totalShares + shares_;\\n\\n    emit PayeeAdded(account, shares_);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/Llamas.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2557     \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n * Written by MaxFlowO2, Interim CEO and CTO of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: Insipired by BAYC on Ethereum, Sets Provenace Hashes and More\\n * Source: https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code\\n *\\n * Updated: Does the Provenace Hashes for Iamges and JSONS.\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interface/ILlamas.sol\\\";\\n\\nabstract contract Llamas is Illamas {\\n\\n  event SetProvenanceImages(string _new, string _old);\\n  event SetProvenanceJSON(string _new, string _old);\\n  event SetTimestamp(uint _new, uint _old);\\n  event SetStartNumber(uint _new, uint _old);\\n\\n  uint256 private timestamp;\\n  uint256 private startNumber;\\n  string private ProvenanceImages;\\n  string private ProvenanceJSON;\\n\\n  // @notice will set reveal timestamp\\n  function _setRevealTimestamp(uint256 _timestamp) internal {\\n    uint256 old = timestamp;\\n    timestamp = _timestamp;\\n    emit SetTimestamp(timestamp, old);\\n  }\\n\\n  // @notice will set start number\\n  function _setStartNumber(uint256 _startNumber) internal {\\n    uint256 old = startNumber;\\n    startNumber = _startNumber;\\n    emit SetStartNumber(startNumber, old);\\n  }\\n\\n  // @notice will set JSON Provenance\\n  function _setProvenanceJSON(string memory _ProvenanceJSON) internal {\\n    string memory old = ProvenanceJSON;\\n    ProvenanceJSON = _ProvenanceJSON;\\n    emit SetProvenanceJSON(ProvenanceJSON, old);\\n  }\\n\\n  // @notice will set Images Provenance\\n  function _setProvenanceImages(string memory _ProvenanceImages) internal {\\n    string memory old = ProvenanceImages;\\n    ProvenanceImages = _ProvenanceImages;\\n    emit SetProvenanceImages(ProvenanceImages, old);\\n  }\\n\\n  // @notice will return timestamp of reveal\\n  function RevealTimestamp() external view override(Illamas) returns (uint256) {\\n    return timestamp;\\n  }\\n\\n  // @notice will return Provenance hash of images\\n  function RevealProvenanceImages() external view override(Illamas) returns (string memory) {\\n    return ProvenanceImages;\\n  }\\n\\n  // @notice will return Provenance hash of metadata\\n  function RevealProvenanceJSON() external view override(Illamas) returns (string memory) {\\n    return ProvenanceJSON;\\n  }\\n\\n  // @notice will return starting number for mint\\n  function RevealStartNumber() external view override(Illamas) returns (uint256) {\\n    return startNumber;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/ContractURI.sol\": {\r\n      \"content\": \"/***\\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d    \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551       \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551       \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\\n *    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551       \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\\n *     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d        \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: OpenSea compliance on chain ID #1-5\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../interface/IContractURI.sol\\\";\\n\\nabstract contract ContractURI is IContractURI {\\n\\n  event ContractURIChange(string _new, string _old);\\n\\n  string private thisContractURI;\\n\\n  // @notice this sets the contractURI\\n  function _setContractURI(string memory newURI) internal {\\n    string memory old = thisContractURI;\\n    thisContractURI = newURI;\\n    emit ContractURIChange(thisContractURI, old);\\n  }\\n\\n  // @notice will return string _ContractURI\\n  // contractURI() => 0xe8a3d485\\n  function contractURI() external view override(IContractURI) returns (string memory) {\\n    return thisContractURI;\\n  }\\n\\n}\\n\\n\\n\"\r\n    },\r\n    \"/contracts/lib/Whitelist.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\n *    \u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551   \\n *    \u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \\n *    \u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \\n *     \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \\n * @title Whitelist\\n * @author @MaxFlowO2 on Twitter/GitHub\\n *  Written on 12 Jan 2022, post Laid Back Llamas, aka LLAMA TECH!\\n * @dev Provides a whitelist capability that can be added to and removed easily. With\\n *  a modified version of Countes.sol from openzeppelin 4.4.1 you can track numbers of who's\\n *  on the whitelist and who's been removed from the whitelist, showing clear statistics of\\n *  your contract's whitelist usage.\\n *\\n * Include with 'using Whitelist for Whitelist.List;'\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./CountersV2.sol\\\";\\n\\nlibrary Whitelist {\\n  using CountersV2 for CountersV2.Counter;\\n\\n  event WhiteListEndChanged(uint _old, uint _new);\\n  event WhiteListChanged(bool _old, bool _new, address _address);\\n  event WhiteListStatus(bool _old, bool _new);\\n\\n  struct List {\\n    // These variables should never be directly accessed by users of the library: interactions must be restricted to\\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\\n    bool enabled; //default is false,\\n    CountersV2.Counter _added; // default 0, no need to _added.set(uint)\\n    CountersV2.Counter _removed; // default 0, no need to _removed.set(uint)\\n    uint end; // default 0, this can be time or quant\\n    mapping(address => bool) _list; // all values default to false\\n  }\\n\\n  function add(List storage list, address _address) internal {\\n    require(!list._list[_address], \\\"Whitelist: Address already whitelisted.\\\");\\n    // since now all previous values are false no need for another variable\\n    // and add them to the list!\\n    list._list[_address] = true;\\n    // increment counter\\n    list._added.increment();\\n    // emit event\\n    emit WhiteListChanged(false, list._list[_address], _address);\\n  }\\n\\n  function remove(List storage list, address _address) internal {\\n    require(list._list[_address], \\\"Whitelist: Address already not whitelisted.\\\");\\n    // since now all previous values are true no need for another variable\\n    // and remove them from the list!\\n    list._list[_address] = false;\\n    // increment counter\\n    list._removed.increment();\\n    // emit event\\n    emit WhiteListChanged(true, list._list[_address], _address);\\n  }\\n\\n  function enable(List storage list) internal {\\n    require(!list.enabled, \\\"Whitelist: Whitelist already enabled.\\\");\\n    list.enabled = true;\\n    emit WhiteListStatus(false, list.enabled);\\n  }\\n\\n  function disable(List storage list) internal {\\n    require(list.enabled, \\\"Whitelist: Whitelist already enabled.\\\");\\n    list.enabled = false;\\n    emit WhiteListStatus(true, list.enabled);\\n  }\\n\\n  function setEnd(List storage list, uint newEnd) internal {\\n    require(list.end != newEnd, \\\"Whitelist: End already set to that value.\\\");\\n    uint old = list.end;\\n    list.end = newEnd;\\n    emit WhiteListEndChanged(old, list.end);\\n  }\\n\\n  function status(List storage list) internal view returns (bool) {\\n    return list.enabled;\\n  }\\n\\n  function totalAdded(List storage list) internal view returns (uint) {\\n    return list._added.current();\\n  }\\n\\n  function totalRemoved(List storage list) internal view returns (uint) {\\n    return list._removed.current();\\n  }\\n\\n  function onList(List storage list, address _address) internal view returns (bool) {\\n    return list._list[_address];\\n  }\\n\\n  function showEnd(List storage list) internal view returns (uint) {\\n    return list.end;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/CountersV2.sol\": {\r\n      \"content\": \"/***\\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n *    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n *     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n * @title CountersV2\\n * @author Matt Condon (@shrugs), and @MaxFlowO2 (edits)\\n * @dev Provides counters that can only be incremented, decremented, reset or set. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Edited by @MaxFlowO2 for more NFT functionality on 13 Jan 2022\\n * added .set(uint) so if projects need to start at say 1 or some random number they can\\n * and an event log for numbers being reset or set.\\n *\\n * Include with `using CountersV2 for CountersV2.Counter;`\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CountersV2 {\\n\\n  error NegativeNumber();\\n\\n  event CounterNumberChangedTo(uint _number);\\n\\n  struct Counter {\\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\\n    uint256 _value; // default: 0\\n  }\\n\\n  function current(Counter storage counter) internal view returns (uint256) {\\n    return counter._value;\\n  }\\n\\n  function increment(Counter storage counter) internal {\\n    unchecked {\\n      counter._value += 1;\\n    }\\n  }\\n\\n  function decrement(Counter storage counter) internal {\\n    uint256 value = counter._value;\\n    if (value == 0) {\\n      revert NegativeNumber();\\n    }\\n    unchecked {\\n      counter._value = value - 1;\\n    }\\n  }\\n\\n  function reset(Counter storage counter) internal {\\n    counter._value = 0;\\n    emit CounterNumberChangedTo(counter._value);\\n  }\\n\\n  function set(Counter storage counter, uint number) internal {\\n    counter._value = number;\\n    emit CounterNumberChangedTo(counter._value);\\n  }  \\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Access.sol\": {\r\n      \"content\": \"/***\\n *     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n *    \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n * @title Access\\n * @author @MaxFlowO2\\n * @dev Library function for EIP 173 Ownable standards in EVM, this is useful\\n *  for granting role based modifiers, and by using this blah blah blah.\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Access {\\n\\n  event AccessTransferred(address indexed newAddress, address indexed oldAddress);\\n\\n  struct Role {\\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\\n    address _active; // who's the active role\\n    address _pending; // who's the pending role\\n    address[] _historical; // array of addresses with the role (useful for \\\"reclaiming\\\" roles)\\n  }\\n\\n  function active(Role storage role) internal view returns (address) {\\n    return role._active;\\n  }\\n\\n  function pending(Role storage role) internal view returns (address) {\\n    return role._pending;\\n  }\\n\\n  function historical(Role storage role) internal view returns (address[] storage) {\\n    return role._historical;\\n  }\\n\\n  function transfer(Role storage role, address newAddress) internal {\\n    role._pending = newAddress;\\n  }\\n\\n  function modifyArray(Role storage role) internal {\\n    role._historical.push(role._active);\\n  }\\n\\n  function accept(Role storage role) internal {\\n    address oldAddy = role._active;\\n    role._active = role._pending;\\n    role._pending = address(0);\\n    emit AccessTransferred(\\n      role._active\\n    , oldAddy\\n    );\\n  }\\n\\n  function decline(Role storage role) internal {\\n    role._pending = address(0);\\n  }\\n\\n  function push(Role storage role, address newAddress) internal {\\n    address oldAddy = role._active;\\n    role._active = newAddress;\\n    role._pending = address(0);\\n    emit AccessTransferred(\\n      role._active\\n    , oldAddy\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/ILlamas.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n *    \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n *    \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n *    \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n * Written by MaxFlowO2, Interim CEO and CTO of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: Insipired by BAYC on Ethereum, Sets Provential Hashes and More\\n * Source: https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface Illamas is IERC165{\\n\\n  // @notice will return timestamp of reveal\\n  // RevealTimestamp() => 0x83ba7c1d\\n  function RevealTimestamp() external view returns (uint256);\\n\\n  // @notice will return Provenance hash of images\\n  // RevealProvenanceImages() => 0xd792d2a0\\n  function RevealProvenanceImages() external view returns (string memory);\\n\\n  // @notice will return Provenance hash of metadata\\n  // RevealProvenanceJSON() => 0x94352676\\n  function RevealProvenanceJSON() external view returns (string memory);\\n\\n  // @notice will return starting number for mint\\n  // RevealStartNumber() => 0x1efb051a\\n  function RevealStartNumber() external view returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/interface/IContractURI.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\\n *    \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d    \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\\n *    \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551       \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n *    \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551       \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\\n *    \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551       \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\\n *    \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d        \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n *\\n * Purpose: OpenSea compliance on chain ID #1-5\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IContractURI is IERC165{\\n\\n  // @notice this is the contractURI() for OpeanSea compliance\\n  // contractURI() => 0xe8a3d485\\n  function contractURI() external view returns (string memory);\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/eip/2981/IERC2981.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557       \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557      \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2551\\n *    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2551\\n *    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d           \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u255d                                                        \\n * Zach Burks, James Morgan, Blaine Malone, James Seibel,\\n * \\\"EIP-2981: NFT Royalty Standard,\\\"\\n * Ethereum Improvement Proposals, no. 2981, September 2020. [Online serial].\\n * Available: https://eips.ethereum.org/EIPS/eip-2981.\\n *\\n * Minor edit on comments to mirror the rest of the interfaces\\n * by @MaxFlowO2 on 29 Dec 2021 for v2.1\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n\\ninterface IERC2981 is IERC165 {\\n\\n  // ERC165\\n  // royaltyInfo(uint256,uint256) => 0x2a55205a\\n  // IERC2981 => 0x2a55205a\\n\\n  // @notice Called with the sale price to determine how much royalty\\n  //  is owed and to whom.\\n  // @param _tokenId - the NFT asset queried for royalty information\\n  // @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n  // @return receiver - address of who should be sent the royalty payment\\n  // @return royaltyAmount - the royalty payment amount for _salePrice\\n  // ERC165 datum royaltyInfo(uint256,uint256) => 0x2a55205a\\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/2981/ERC2981Collection.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2557                            \\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2551                            \\n *    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551      \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2551                            \\n *    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551                            \\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551                            \\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u255d                            \\n *                                                                                    \\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551        \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551        \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n *    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551   \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n *     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n * Written by MaxFlowO2, Senior Developer and Partner of G&M\u00b2 Labs\\n * Follow me on https://github.com/MaxflowO2 or Twitter @MaxFlowO2\\n * email: cryptobymaxflowO2@gmail.com\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC2981.sol\\\";\\n\\nabstract contract ERC2981Collection is IERC2981 {\\n\\n  // ERC165\\n  // royaltyInfo(uint256,uint256) => 0x2a55205a\\n  // ERC2981Collection => 0x2a55205a\\n\\n  address private royaltyAddress;\\n  uint256 private royaltyPercent;\\n\\n  // Set to be internal function _setRoyalties\\n  function _setRoyalties(address _receiver, uint256 _percentage) internal {\\n    royaltyAddress = _receiver;\\n    royaltyPercent = _percentage;\\n  }\\n\\n  // Override for royaltyInfo(uint256, uint256)\\n  // royaltyInfo(uint256,uint256) => 0x2a55205a\\n  function royaltyInfo(\\n    uint256 _tokenId,\\n    uint256 _salePrice\\n  ) external view override(IERC2981) returns (\\n    address receiver,\\n    uint256 royaltyAmount\\n  ) {\\n    receiver = royaltyAddress;\\n\\n    // This sets permille by price * percentage / 1000\\n    royaltyAmount = _salePrice * royaltyPercent / 1000;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/access/MaxAccessControl.sol\": {\r\n      \"content\": \"/***\\n *    \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557    \u2588\u2588\u2557\\n *    \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551    \u2588\u2588\u2551\\n *    \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\\n *    \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\\n *    \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u255d \u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\\n *    \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d \\n *                                                                  \\n *     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557              \\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d              \\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557              \\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551              \\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551              \\n *    \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d              \\n *                                                                  \\n *     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551      \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551      \\n *    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551      \\n *    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \\n *     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \\n * @title MaxFlowO2 Access Control\\n * @author @MaxFlowO2 on twitter/github\\n * @dev this is an EIP 173 compliant ownable plus access control mechanism where you can \\n * copy/paste what access role(s) you need or want. This is due to Library Access, and \\n * using this line of 'using Role for Access.Role' after importing my library\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../lib/Access.sol\\\";\\nimport \\\"../utils/ContextV2.sol\\\";\\n\\nabstract contract MaxAccess is ContextV2 {\\n  using Access for Access.Role;\\n\\n  // events\\n\\n  // Roles  \\n  Access.Role private _owner;\\n  Access.Role private _developer;\\n\\n  // Constructor to init()\\n  constructor() {\\n    _owner.push(_msgSender());\\n    _developer.push(_msgSender());\\n  }\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    require(_owner.active() == _msgSender(), \\\"EIP173: You are not Owner!\\\");\\n    _;\\n  }\\n\\n  modifier onlyNewOwner() {\\n    require(_owner.pending() == _msgSender(), \\\"EIP173: You are not the Pending Owner!\\\");\\n    _;\\n  }\\n\\n  function owner() public view virtual returns (address) {\\n    return _owner.active();\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"EIP173: Transfer can not be address(0)\\\");\\n    _owner.transfer(newOwner);\\n  }\\n\\n  function acceptOwnership() public virtual onlyNewOwner {\\n    _owner.accept();\\n  }\\n\\n  function declineOwnership() public virtual onlyNewOwner {\\n    _owner.decline();\\n  }\\n\\n  function pushOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"EIP173: Transfer can not be address(0)\\\");\\n    _owner.push(newOwner);\\n  }\\n\\n  function renounceOwnership() public virtual onlyOwner {\\n    _owner.push(address(0));\\n  }\\n\\n  // Modifiers\\n  modifier onlyDeveloper() {\\n    require(_developer.active() == _msgSender(), \\\"EIP173: You are not Developer!\\\");\\n    _;\\n  }\\n\\n  modifier onlyNewDeveloper() {\\n    require(_developer.pending() == _msgSender(), \\\"EIP173: You are not the Pending Developer!\\\");\\n    _;\\n  }\\n\\n  function developer() public view virtual returns (address) {\\n    return _developer.active();\\n  }\\n\\n  function transferDeveloper(address newDeveloper) public virtual onlyDeveloper {\\n    require(newDeveloper != address(0), \\\"EIP173: Transfer can not be address(0)\\\");\\n    _developer.transfer(newDeveloper);\\n  }\\n\\n  function acceptDeveloper() public virtual onlyNewDeveloper {\\n    _developer.accept();\\n  }\\n\\n  function declineDeveloper() public virtual onlyNewDeveloper {\\n    _developer.decline();\\n  }\\n\\n  function pushDeveloper(address newDeveloper) public virtual onlyDeveloper {\\n    require(newDeveloper != address(0), \\\"EIP173: Transfer can not be address(0)\\\");\\n    _developer.push(newDeveloper);\\n  }\\n\\n  function renounceDeveloper() public virtual onlyDeveloper {\\n    _developer.push(address(0));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AirdropLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"CanNotMintThatMany\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTsAlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTimesSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"NonMintedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOnWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaximumMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayeesAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayeesNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProvenanceAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProvenanceNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"ToEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ToLate\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AirdropIsLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"}],\"name\":\"ContractURIChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"DayOneTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"DayThreeTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"DayTwoTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_update\",\"type\":\"address\"}],\"name\":\"LBLContractAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NFTReveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"PayeesLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ProvenanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"}],\"name\":\"SetProvenanceImages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"}],\"name\":\"SetProvenanceJSON\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"}],\"name\":\"SetStartNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"}],\"name\":\"SetTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"}],\"name\":\"UpdatedBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_old\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_new\",\"type\":\"string\"}],\"name\":\"UpdatedUnrevealedBaseURI\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"RevealProvenanceImages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RevealProvenanceJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RevealStartNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RevealTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalOnWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalWhiteListUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhitelistEfficiency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"bossLlamaAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declineDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declineOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterFeesFivePlus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterFeesOnePlusDayThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterFeesThreePlusOrWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterMaximumCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"}],\"name\":\"myWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oneToOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quant\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"publicMintFiveToOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"publicMintOneToOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"publicMintThreeToOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"pushDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"pushOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"update\",\"type\":\"address\"}],\"name\":\"setLBLCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_images\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"setProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"}],\"name\":\"setUnrevealedBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"startMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"threeToOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"transferDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LadyLlamas", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}