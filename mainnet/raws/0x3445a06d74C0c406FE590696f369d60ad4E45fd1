{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"DividendTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance \\u003e= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance \\u003e= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance \\u003e= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ncontract DividendTracker is Ownable, IERC20 {\\n    address UNISWAPROUTER;\\n\\n    string private _name = \\\"PLUTUS_DividendTracker\\\";\\n    string private _symbol = \\\"PLUTUS_DividendTracker\\\";\\n\\n    uint256 public lastProcessedIndex;\\n\\n    uint256 private _totalSupply;\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    uint256 private constant magnitude = 2**128;\\n    uint256 public immutable minTokenBalanceForDividends;\\n    uint256 private magnifiedDividendPerShare;\\n    uint256 public totalDividendsDistributed;\\n    uint256 public totalDividendsWithdrawn;\\n\\n    address public tokenAddress;\\n\\n    mapping(address =\\u003e bool) public excludedFromDividends;\\n    mapping(address =\\u003e int256) private magnifiedDividendCorrections;\\n    mapping(address =\\u003e uint256) private withdrawnDividends;\\n    mapping(address =\\u003e uint256) private lastClaimTimes;\\n\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n    event ExcludeFromDividends(address indexed account, bool excluded);\\n    event Claim(address indexed account, uint256 amount);\\n    event Compound(address indexed account, uint256 amount, uint256 tokens);\\n\\n    struct AccountInfo {\\n        address account;\\n        uint256 withdrawableDividends;\\n        uint256 totalDividends;\\n        uint256 lastClaimTime;\\n    }\\n\\n    constructor(address _tokenAddress, address _uniswapRouter) {\\n        minTokenBalanceForDividends = 10000 * (10**18);\\n        tokenAddress = _tokenAddress;\\n        UNISWAPROUTER = _uniswapRouter;\\n    }\\n\\n    receive() external payable {\\n        distributeDividends();\\n    }\\n\\n    function distributeDividends() public payable {\\n        require(_totalSupply \\u003e 0);\\n        if (msg.value \\u003e 0) {\\n            magnifiedDividendPerShare =\\n                magnifiedDividendPerShare +\\n                ((msg.value * magnitude) / _totalSupply);\\n            emit DividendsDistributed(msg.sender, msg.value);\\n            totalDividendsDistributed += msg.value;\\n        }\\n    }\\n\\n    function setBalance(address payable account, uint256 newBalance)\\n        external\\n        onlyOwner\\n    {\\n        if (excludedFromDividends[account]) {\\n            return;\\n        }\\n        if (newBalance \\u003e= minTokenBalanceForDividends) {\\n            _setBalance(account, newBalance);\\n        } else {\\n            _setBalance(account, 0);\\n        }\\n    }\\n\\n    function excludeFromDividends(address account, bool excluded)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            excludedFromDividends[account] != excluded,\\n            \\\"PLUTUS_DividendTracker: account already set to requested state\\\"\\n        );\\n        excludedFromDividends[account] = excluded;\\n        if (excluded) {\\n            _setBalance(account, 0);\\n        } else {\\n            uint256 newBalance = IERC20(tokenAddress).balanceOf(account);\\n            if (newBalance \\u003e= minTokenBalanceForDividends) {\\n                _setBalance(account, newBalance);\\n            } else {\\n                _setBalance(account, 0);\\n            }\\n        }\\n        emit ExcludeFromDividends(account, excluded);\\n    }\\n\\n    function isExcludedFromDividends(address account)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return excludedFromDividends[account];\\n    }\\n\\n    function manualSendDividend(uint256 amount, address holder)\\n        external\\n        onlyOwner\\n    {\\n        uint256 contractETHBalance = address(this).balance;\\n        payable(holder).transfer(amount \\u003e 0 ? amount : contractETHBalance);\\n    }\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = _balances[account];\\n        if (newBalance \\u003e currentBalance) {\\n            uint256 addAmount = newBalance - currentBalance;\\n            _mint(account, addAmount);\\n        } else if (newBalance \\u003c currentBalance) {\\n            uint256 subAmount = currentBalance - newBalance;\\n            _burn(account, subAmount);\\n        }\\n    }\\n\\n    function _mint(address account, uint256 amount) private {\\n        require(\\n            account != address(0),\\n            \\\"PLUTUS_DividendTracker: mint to the zero address\\\"\\n        );\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n        magnifiedDividendCorrections[account] =\\n            magnifiedDividendCorrections[account] -\\n            int256(magnifiedDividendPerShare * amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) private {\\n        require(\\n            account != address(0),\\n            \\\"PLUTUS_DividendTracker: burn from the zero address\\\"\\n        );\\n        uint256 accountBalance = _balances[account];\\n        require(\\n            accountBalance \\u003e= amount,\\n            \\\"PLUTUS_DividendTracker: burn amount exceeds balance\\\"\\n        );\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n        magnifiedDividendCorrections[account] =\\n            magnifiedDividendCorrections[account] +\\n            int256(magnifiedDividendPerShare * amount);\\n    }\\n\\n    function processAccount(address payable account)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256 amount = _withdrawDividendOfUser(account);\\n        if (amount \\u003e 0) {\\n            lastClaimTimes[account] = block.timestamp;\\n            emit Claim(account, amount);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _withdrawDividendOfUser(address payable account)\\n        private\\n        returns (uint256)\\n    {\\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\\n        if (_withdrawableDividend \\u003e 0) {\\n            withdrawnDividends[account] += _withdrawableDividend;\\n            totalDividendsWithdrawn += _withdrawableDividend;\\n            emit DividendWithdrawn(account, _withdrawableDividend);\\n            (bool success, ) = account.call{\\n                value: _withdrawableDividend,\\n                gas: 3000\\n            }(\\\"\\\");\\n            if (!success) {\\n                withdrawnDividends[account] -= _withdrawableDividend;\\n                totalDividendsWithdrawn -= _withdrawableDividend;\\n                return 0;\\n            }\\n            return _withdrawableDividend;\\n        }\\n        return 0;\\n    }\\n\\n    function compoundAccount(address payable account)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        (uint256 amount, uint256 tokens) = _compoundDividendOfUser(account);\\n        if (amount \\u003e 0) {\\n            lastClaimTimes[account] = block.timestamp;\\n            emit Compound(account, amount, tokens);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _compoundDividendOfUser(address payable account)\\n        private\\n        returns (uint256, uint256)\\n    {\\n        IERC20 mainToken = IERC20(tokenAddress);\\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\\n        if (_withdrawableDividend \\u003e 0) {\\n            withdrawnDividends[account] += _withdrawableDividend;\\n            totalDividendsWithdrawn += _withdrawableDividend;\\n            emit DividendWithdrawn(account, _withdrawableDividend);\\n\\n            IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(\\n                UNISWAPROUTER\\n            );\\n\\n            address[] memory path = new address[](2);\\n            path[0] = uniswapV2Router.WETH();\\n            path[1] = address(tokenAddress);\\n\\n            bool success;\\n            uint256 tokens;\\n\\n            uint256 initTokenBal = mainToken.balanceOf(address(this));\\n            try\\n                uniswapV2Router\\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                    value: _withdrawableDividend\\n                }(0, path, address(this), block.timestamp)\\n            {\\n                success = true;\\n                tokens = mainToken.balanceOf(address(this)) - initTokenBal;\\n                success = mainToken.transfer(account, tokens);\\n            } catch Error(\\n                string memory /*err*/\\n            ) {\\n                success = false;\\n            }\\n\\n            if (!success) {\\n                withdrawnDividends[account] -= _withdrawableDividend;\\n                totalDividendsWithdrawn -= _withdrawableDividend;\\n                return (0, 0);\\n            }\\n\\n            return (_withdrawableDividend, tokens);\\n        }\\n        return (0, 0);\\n    }\\n\\n    function withdrawableDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return accumulativeDividendOf(account) - withdrawnDividends[account];\\n    }\\n\\n    function withdrawnDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return withdrawnDividends[account];\\n    }\\n\\n    function accumulativeDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        int256 a = int256(magnifiedDividendPerShare * balanceOf(account));\\n        int256 b = magnifiedDividendCorrections[account]; // this is an explicit int256 (signed)\\n        return uint256(a + b) / magnitude;\\n    }\\n\\n    function getAccountInfo(address account)\\n        public\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        AccountInfo memory info;\\n        info.account = account;\\n        info.withdrawableDividends = withdrawableDividendOf(account);\\n        info.totalDividends = accumulativeDividendOf(account);\\n        info.lastClaimTime = lastClaimTimes[account];\\n        return (\\n            info.account,\\n            info.withdrawableDividends,\\n            info.totalDividends,\\n            info.lastClaimTime,\\n            totalDividendsWithdrawn\\n        );\\n    }\\n\\n    function getLastClaimTime(address account) public view returns (uint256) {\\n        return lastClaimTimes[account];\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address, uint256) public pure override returns (bool) {\\n        revert(\\\"PLUTUS_DividendTracker: method not implemented\\\");\\n    }\\n\\n    function allowance(address, address)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        revert(\\\"PLUTUS_DividendTracker: method not implemented\\\");\\n    }\\n\\n    function approve(address, uint256) public pure override returns (bool) {\\n        revert(\\\"PLUTUS_DividendTracker: method not implemented\\\");\\n    }\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) public pure override returns (bool) {\\n        revert(\\\"PLUTUS_DividendTracker: method not implemented\\\");\\n    }\\n}\"},\"PlutusEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./DividendTracker.sol\\\";\\n\\ncontract PLUTUS is Ownable, IERC20 {\\n    address UNISWAPROUTER = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string private _name = \\\"PLUTUS CAPITAL HOLDINGS\\\";\\n    string private _symbol = \\\"PCH\\\";\\n\\n    // Allocations\\n    uint256 public _devTokenAllocation;\\n    uint256 public _dreamTokenAllocation;\\n    uint256 public _treasuryTokenAllocation;\\n    uint256 public _liquidityTokenAllocation;\\n    uint256 public _dividendsTokenAllocation;\\n\\n    // Fess\\n    uint256 public treasuryFeeBuyBPS = 400;\\n    uint256 public dreamFeeBuyBPS = 0;\\n    uint256 public devFeeBuyBPS = 100;\\n    uint256 public liquidityFeeBuyBPS = 200;\\n    uint256 public dividendFeeBuyBPS = 300;\\n    uint256 public treasuryFeeSellBPS = 600;\\n    uint256 public dreamFeeSellBPS = 200;\\n    uint256 public devFeeSellBPS = 100;\\n    uint256 public liquidityFeeSellBPS = 100;\\n    uint256 public dividendFeeSellBPS = 0;\\n    uint256 public totalFeeBPS =\\n        treasuryFeeBuyBPS +\\n            dreamFeeBuyBPS +\\n            devFeeBuyBPS +\\n            liquidityFeeBuyBPS +\\n            dividendFeeBuyBPS;\\n\\n    uint256 public swapTokensAtAmount = 100000 * (10**18);\\n    uint256 public lastSwapTime;\\n    bool swapAllToken = true;\\n\\n    bool public swapEnabled = true;\\n    bool public taxEnabled = true;\\n    bool public compoundingEnabled = true;\\n\\n    uint256 private _totalSupply = 1000000000000 * (10**18);\\n    bool private swapping;\\n\\n    address payable public devWallet =\\n        payable(0x8dC8d7b9dE5D18c1aFE34A9376f9c0BaCB83e4FF);\\n    address payable public treasuryWallet =\\n        payable(0xAa30f62195fC8015cEe0eCFa4c392C7b166bE6cE);\\n    address payable public dreamWallet =\\n        payable(0x6930f422b668496Ed697aa41f3e6e324E6159718);\\n    address payable public techWallet =\\n        payable(0x7B0138C49570F78d45a07fCEcc11E70e605f33dB);\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n    mapping(address =\\u003e bool) private _isExcludedFromFees;\\n    mapping(address =\\u003e bool) private _whiteList;\\n    mapping(address =\\u003e bool) isBlacklisted;\\n    mapping(address =\\u003e bool) private _isExcludedFromMaxTx;\\n    mapping(address =\\u003e bool) private _isExcludedFromMaxWallet;\\n\\n    event SwapAndAddLiquidity(\\n        uint256 tokensSwapped,\\n        uint256 nativeReceived,\\n        uint256 tokensIntoLiquidity\\n    );\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n    event UpdateUniswapV2Router(\\n        address indexed newAddress,\\n        address indexed oldAddress\\n    );\\n    event SwapEnabled(bool enabled);\\n    event TaxEnabled(bool enabled);\\n    event CompoundingEnabled(bool enabled);\\n    event BlacklistEnabled(bool enabled);\\n\\n    DividendTracker public dividendTracker;\\n    IUniswapV2Router02 public uniswapV2Router;\\n\\n    address public uniswapV2Pair;\\n\\n    uint256 public maxTxBPS = 50;\\n    uint256 public maxWalletBPS = 200;\\n    uint256 public techSupportFeeBPS = 2500;\\n\\n    uint256 tradingOpenDate = 1738844026;\\n\\n    constructor() {\\n        dividendTracker = new DividendTracker(address(this), UNISWAPROUTER);\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\\n\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n\\n        _balances[_msgSender()] += _totalSupply;\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance \\u003e= subtractedValue,\\n            \\\"PLUTUS: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance \\u003e= amount,\\n            \\\"PLUTUS: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n        return true;\\n    }\\n\\n    function setParametersToLaunch() external onlyOwner {\\n        // dividendTracker.excludeFromDividends(address(dividendTracker), true);\\n        // dividendTracker.excludeFromDividends(address(this), true);\\n        // dividendTracker.excludeFromDividends(owner(), true);\\n        // dividendTracker.excludeFromDividends(address(_uniswapV2Router), true);\\n        // dividendTracker.excludeFromDividends(address(DEAD), true);\\n\\n        excludeFromFees(owner(), true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(dividendTracker), true);\\n\\n        excludeFromMaxTx(owner(), true);\\n        excludeFromMaxTx(address(this), true);\\n        excludeFromMaxTx(address(dividendTracker), true);\\n\\n        excludeFromMaxWallet(owner(), true);\\n        excludeFromMaxWallet(address(this), true);\\n        excludeFromMaxWallet(address(dividendTracker), true);\\n    }\\n\\n    function setTradingOpenDate(uint256 timestamp) external onlyOwner {\\n        tradingOpenDate = timestamp;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(\\n            tradingOpenDate \\u003c block.timestamp ||\\n                sender == owner() ||\\n                recipient == owner() ||\\n                _whiteList[sender] ||\\n                _whiteList[recipient],\\n            \\\"PLUTUS: Token isn\\u0027t tradable yet\\\"\\n        );\\n\\n        require(!isBlacklisted[sender], \\\"PLUTUS: Sender is blacklisted\\\");\\n        require(!isBlacklisted[recipient], \\\"PLUTUS: Recipient is blacklisted\\\");\\n\\n        require(sender != address(0), \\\"PLUTUS: transfer from the zero address\\\");\\n        require(\\n            recipient != address(0),\\n            \\\"PLUTUS: transfer to the zero address\\\"\\n        );\\n\\n        uint256 _maxTxAmount = (totalSupply() * maxTxBPS) / 10000;\\n        uint256 _maxWallet = (totalSupply() * maxWalletBPS) / 10000;\\n        require(\\n            amount \\u003c= _maxTxAmount || _isExcludedFromMaxTx[sender],\\n            \\\"TX Limit Exceeded\\\"\\n        );\\n\\n        if (\\n            sender != owner() \\u0026\\u0026\\n            recipient != address(this) \\u0026\\u0026\\n            recipient != address(DEAD) \\u0026\\u0026\\n            recipient != uniswapV2Pair\\n        ) {\\n            uint256 currentBalance = balanceOf(recipient);\\n            require(\\n                _isExcludedFromMaxWallet[recipient] ||\\n                    (currentBalance + amount \\u003c= _maxWallet)\\n            );\\n        }\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance \\u003e= amount,\\n            \\\"PLUTUS: transfer amount exceeds balance\\\"\\n        );\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        uint256 contractNativeBalance = address(this).balance;\\n\\n        bool canSwap = contractTokenBalance \\u003e= swapTokensAtAmount;\\n\\n        if (\\n            swapEnabled \\u0026\\u0026\\n            canSwap \\u0026\\u0026\\n            !swapping \\u0026\\u0026\\n            sender != address(uniswapV2Router) \\u0026\\u0026\\n            sender != owner() \\u0026\\u0026\\n            recipient != owner()\\n        ) {\\n            swapping = true;\\n\\n            if (!swapAllToken \\u0026\\u0026 contractTokenBalance \\u003e swapTokensAtAmount) {\\n                contractTokenBalance = swapTokensAtAmount;\\n            }\\n            _executeSwap(contractTokenBalance, contractNativeBalance);\\n\\n            lastSwapTime = block.timestamp;\\n            swapping = false;\\n        }\\n\\n        bool takeFee = false;\\n\\n        if (\\n            (sender == address(uniswapV2Pair) \\u0026\\u0026\\n                recipient != address(uniswapV2Router)) ||\\n            (recipient == address(uniswapV2Pair) \\u0026\\u0026\\n                sender != address(uniswapV2Router))\\n        ) {\\n            takeFee = true;\\n        }\\n\\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\\n            takeFee = false;\\n        }\\n\\n        if (swapping || !taxEnabled) {\\n            takeFee = false;\\n        }\\n\\n        if (takeFee) {\\n            //Set Fee for Buys\\n            if (sender == uniswapV2Pair) {\\n                totalFeeBPS =\\n                    treasuryFeeBuyBPS +\\n                    dreamFeeBuyBPS +\\n                    devFeeBuyBPS +\\n                    liquidityFeeBuyBPS +\\n                    dividendFeeBuyBPS;\\n\\n                _devTokenAllocation = (amount * devFeeBuyBPS) / totalFeeBPS;\\n                _dreamTokenAllocation = (amount * dreamFeeBuyBPS) / totalFeeBPS;\\n                _treasuryTokenAllocation =\\n                    (amount * treasuryFeeBuyBPS) /\\n                    totalFeeBPS;\\n                _liquidityTokenAllocation =\\n                    (amount * liquidityFeeBuyBPS) /\\n                    totalFeeBPS;\\n                _dividendsTokenAllocation =\\n                    (amount * dividendFeeBuyBPS) /\\n                    totalFeeBPS;\\n            }\\n\\n            //Set Fee for Sells\\n            if (recipient == uniswapV2Pair) {\\n                totalFeeBPS =\\n                    treasuryFeeSellBPS +\\n                    dreamFeeSellBPS +\\n                    devFeeSellBPS +\\n                    liquidityFeeSellBPS +\\n                    dividendFeeSellBPS;\\n\\n                _devTokenAllocation = (amount * devFeeSellBPS) / totalFeeBPS;\\n                _dreamTokenAllocation =\\n                    (amount * dreamFeeSellBPS) /\\n                    totalFeeBPS;\\n                _treasuryTokenAllocation =\\n                    (amount * treasuryFeeSellBPS) /\\n                    totalFeeBPS;\\n                _liquidityTokenAllocation =\\n                    (amount * liquidityFeeSellBPS) /\\n                    totalFeeBPS;\\n                _dividendsTokenAllocation =\\n                    (amount * dividendFeeSellBPS) /\\n                    totalFeeBPS;\\n            }\\n\\n            uint256 fees = (amount * totalFeeBPS) / 10000;\\n            amount -= fees;\\n            _executeTransfer(sender, address(this), fees);\\n        }\\n\\n        _executeTransfer(sender, recipient, amount);\\n\\n        dividendTracker.setBalance(payable(sender), balanceOf(sender));\\n        dividendTracker.setBalance(payable(recipient), balanceOf(recipient));\\n    }\\n\\n    function _executeTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(sender != address(0), \\\"PLUTUS: transfer from the zero address\\\");\\n        require(\\n            recipient != address(0),\\n            \\\"PLUTUS: transfer to the zero address\\\"\\n        );\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance \\u003e= amount,\\n            \\\"PLUTUS: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"PLUTUS: approve from the zero address\\\");\\n        require(spender != address(0), \\\"PLUTUS: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function swapTokensForNative(uint256 tokens) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokens);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokens,\\n            0, // accept any amount of native\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokens, uint256 native) private {\\n        _approve(address(this), address(uniswapV2Router), tokens);\\n        uniswapV2Router.addLiquidityETH{value: native}(\\n            address(this),\\n            tokens,\\n            0, // slippage unavoidable\\n            0, // slippage unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function includeToWhiteList(address[] memory _users) public onlyOwner {\\n        for (uint8 i = 0; i \\u003c _users.length; i++) {\\n            _whiteList[_users[i]] = true;\\n        }\\n    }\\n\\n    function _executeSwap(uint256 tokens, uint256 native) private {\\n        if (tokens \\u003c= 0) {\\n            return;\\n        }\\n\\n        uint256 totalAllocation = _treasuryTokenAllocation +\\n            _dreamTokenAllocation +\\n            _devTokenAllocation +\\n            _liquidityTokenAllocation +\\n            _dividendsTokenAllocation;\\n\\n        // Calculations below might seem redundant, but we need them in case tokens \\u003c contract token balance\\n        uint256 tokensForTreasury;\\n        if (address(treasuryWallet) != address(0)) {\\n            tokensForTreasury =\\n                (tokens * _treasuryTokenAllocation) /\\n                totalAllocation;\\n        }\\n\\n        uint256 tokensForDevelopment;\\n        if (address(devWallet) != address(0)) {\\n            tokensForDevelopment =\\n                (tokens * _devTokenAllocation) /\\n                totalAllocation;\\n        }\\n\\n        uint256 tokensForDividends;\\n        if (dividendTracker.totalSupply() \\u003e 0) {\\n            tokensForDividends =\\n                (tokens * _dividendsTokenAllocation) /\\n                totalAllocation;\\n        }\\n\\n        uint256 tokensForDream;\\n        if (address(dreamWallet) != address(0)) {\\n            tokensForDream = (tokens * _dreamTokenAllocation) / totalAllocation;\\n        }\\n\\n        uint256 tokensForLiquidity = tokens -\\n            tokensForTreasury -\\n            tokensForDevelopment -\\n            tokensForDividends -\\n            tokensForDream;\\n        uint256 swapTokensLiquidity = tokensForLiquidity / 2;\\n        uint256 addTokensLiquidity = tokensForLiquidity - swapTokensLiquidity;\\n        uint256 swapTokensTotal = tokensForTreasury +\\n            tokensForDevelopment +\\n            tokensForDividends +\\n            tokensForDream +\\n            swapTokensLiquidity;\\n\\n        uint256 initNativeBal = address(this).balance;\\n        swapTokensForNative(swapTokensTotal);\\n        uint256 nativeSwapped = (address(this).balance - initNativeBal) +\\n            native;\\n\\n        uint256 nativeTreasury = (nativeSwapped * tokensForTreasury) /\\n            swapTokensTotal;\\n        uint256 nativeDev = (nativeSwapped * tokensForDevelopment) /\\n            swapTokensTotal;\\n        uint256 nativeDividends = (nativeSwapped * tokensForDividends) /\\n            swapTokensTotal;\\n        uint256 nativeDream = (nativeSwapped * tokensForDream) /\\n            swapTokensTotal;\\n        uint256 nativeLiquidity = nativeSwapped -\\n            nativeTreasury -\\n            nativeDev -\\n            nativeDividends -\\n            nativeDream;\\n\\n        // Send tokens to treasury\\n        if (nativeTreasury \\u003e 0) {\\n            (bool success, ) = treasuryWallet.call{value: nativeTreasury}(\\\"\\\");\\n            require(success, \\\"PLUTUS: Tx failed.\\\");\\n        }\\n\\n        // Send tokens to dev\\n        if (nativeDev \\u003e 0) {\\n            uint256 techSupportFee = (nativeDev * techSupportFeeBPS) / 10000;\\n            (bool successDev, ) = devWallet.call{\\n                value: nativeDev - techSupportFee\\n            }(\\\"\\\");\\n            (bool successTech, ) = techWallet.call{value: techSupportFee}(\\\"\\\");\\n            require(successDev, \\\"PLUTUS: Tx failed.\\\");\\n            require(successTech, \\\"PLUTUS: Tx failed.\\\");\\n        }\\n\\n        // Send tokens to dream\\n        if (nativeDream \\u003e 0) {\\n            (bool success, ) = dreamWallet.call{value: nativeDream}(\\\"\\\");\\n            require(success, \\\"PLUTUS: Tx failed.\\\");\\n        }\\n\\n        // Add liquidity\\n        addLiquidity(addTokensLiquidity, nativeLiquidity);\\n        emit SwapAndAddLiquidity(\\n            swapTokensLiquidity,\\n            nativeLiquidity,\\n            addTokensLiquidity\\n        );\\n\\n        // Send redis to dividend tracker\\n        if (nativeDividends \\u003e 0) {\\n            (bool success, ) = address(dividendTracker).call{\\n                value: nativeDividends\\n            }(\\\"\\\");\\n            if (success) {\\n                emit SendDividends(tokensForDividends, nativeDividends);\\n            }\\n        }\\n\\n        _devTokenAllocation = 0;\\n        _dreamTokenAllocation = 0;\\n        _treasuryTokenAllocation = 0;\\n        _liquidityTokenAllocation = 0;\\n        _dividendsTokenAllocation = 0;\\n    }\\n\\n    function manualSwapAndSend() public onlyOwner {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        uint256 contractNativeBalance = address(this).balance;\\n\\n        if (!swapAllToken \\u0026\\u0026 contractTokenBalance \\u003e swapTokensAtAmount) {\\n            contractTokenBalance = swapTokensAtAmount;\\n        }\\n        _executeSwap(contractTokenBalance, contractNativeBalance);\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        require(\\n            _isExcludedFromFees[account] != excluded,\\n            \\\"PLUTUS: account is already set to requested state\\\"\\n        );\\n        _isExcludedFromFees[account] = excluded;\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n    function isExcludedFromFees(address account) public view returns (bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    function manualSendDividend(uint256 amount, address holder)\\n        external\\n        onlyOwner\\n    {\\n        dividendTracker.manualSendDividend(amount, holder);\\n    }\\n\\n    function excludeFromDividends(address account, bool excluded)\\n        public\\n        onlyOwner\\n    {\\n        dividendTracker.excludeFromDividends(account, excluded);\\n    }\\n\\n    function isExcludedFromDividends(address account)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return dividendTracker.isExcludedFromDividends(account);\\n    }\\n\\n    function setWallets(\\n        address payable _treasuryWallet,\\n        address payable _devWallet,\\n        address payable _dreamWallet\\n    ) external onlyOwner {\\n        treasuryWallet = _treasuryWallet;\\n        devWallet = _devWallet;\\n        dreamWallet = _dreamWallet;\\n    }\\n\\n    function setFee(\\n        uint256 _treasuryFeeBuy,\\n        uint256 _devFeeBuy,\\n        uint256 _liquidityFeeBuy,\\n        uint256 _dividendFeeBuy,\\n        uint256 _dreamFeeBuy,\\n        uint256 _treasuryFeeSell,\\n        uint256 _devFeeSell,\\n        uint256 _liquidityFeeSell,\\n        uint256 _dividendFeeSell,\\n        uint256 _dreamFeeSell\\n    ) external onlyOwner {\\n        treasuryFeeBuyBPS = _treasuryFeeBuy;\\n        dreamFeeBuyBPS = _dreamFeeBuy;\\n        devFeeBuyBPS = _devFeeBuy;\\n        liquidityFeeBuyBPS = _liquidityFeeBuy;\\n        dividendFeeBuyBPS = _dividendFeeBuy;\\n        treasuryFeeSellBPS = _treasuryFeeSell;\\n        dreamFeeSellBPS = _dreamFeeSell;\\n        devFeeSellBPS = _devFeeSell;\\n        liquidityFeeSellBPS = _liquidityFeeSell;\\n        dividendFeeSellBPS = _dividendFeeSell;\\n\\n        totalFeeBPS =\\n            _treasuryFeeBuy +\\n            _liquidityFeeBuy +\\n            _dividendFeeBuy +\\n            _devFeeBuy +\\n            _dreamFeeBuy;\\n    }\\n\\n    function claim() public {\\n        dividendTracker.processAccount(payable(_msgSender()));\\n    }\\n\\n    function compound() public {\\n        require(compoundingEnabled, \\\"PLUTUS: compounding is not enabled\\\");\\n        dividendTracker.compoundAccount(payable(_msgSender()));\\n    }\\n\\n    function withdrawableDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.withdrawableDividendOf(account);\\n    }\\n\\n    function withdrawnDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.withdrawnDividendOf(account);\\n    }\\n\\n    function accumulativeDividendOf(address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return dividendTracker.accumulativeDividendOf(account);\\n    }\\n\\n    function getAccountInfo(address account)\\n        public\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return dividendTracker.getAccountInfo(account);\\n    }\\n\\n    function getLastClaimTime(address account) public view returns (uint256) {\\n        return dividendTracker.getLastClaimTime(account);\\n    }\\n\\n    function setSwapEnabled(bool _enabled) external onlyOwner {\\n        swapEnabled = _enabled;\\n        emit SwapEnabled(_enabled);\\n    }\\n\\n    function setTaxEnabled(bool _enabled) external onlyOwner {\\n        taxEnabled = _enabled;\\n        emit TaxEnabled(_enabled);\\n    }\\n\\n    function setCompoundingEnabled(bool _enabled) external onlyOwner {\\n        compoundingEnabled = _enabled;\\n        emit CompoundingEnabled(_enabled);\\n    }\\n\\n    function updateDividendSettings(\\n        bool _swapEnabled,\\n        uint256 _swapTokensAtAmount,\\n        bool _swapAllToken\\n    ) external onlyOwner {\\n        swapEnabled = _swapEnabled;\\n        swapTokensAtAmount = _swapTokensAtAmount;\\n        swapAllToken = _swapAllToken;\\n    }\\n\\n    function setMaxTxBPS(uint256 bps) external onlyOwner {\\n        maxTxBPS = bps;\\n    }\\n\\n    function excludeFromMaxTx(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromMaxTx[account] = excluded;\\n    }\\n\\n    function isExcludedFromMaxTx(address account) public view returns (bool) {\\n        return _isExcludedFromMaxTx[account];\\n    }\\n\\n    function setMaxWalletBPS(uint256 bps) external onlyOwner {\\n        maxWalletBPS = bps;\\n    }\\n\\n    function excludeFromMaxWallet(address account, bool excluded)\\n        public\\n        onlyOwner\\n    {\\n        _isExcludedFromMaxWallet[account] = excluded;\\n    }\\n\\n    function isExcludedFromMaxWallet(address account)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _isExcludedFromMaxWallet[account];\\n    }\\n\\n    function blackList(address _user, bool blacklist) public onlyOwner {\\n        require(!isBlacklisted[_user], \\\"user already blacklisted\\\");\\n        isBlacklisted[_user] = blacklist;\\n    }\\n\\n    function blackListMany(address[] memory _users) public onlyOwner {\\n        for (uint8 i = 0; i \\u003c _users.length; i++) {\\n            isBlacklisted[_users[i]] = true;\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BlacklistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CompoundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_devTokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividendsTokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dreamTokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasuryTokenAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklist\",\"type\":\"bool\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeBuyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeSellBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeBuyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeSellBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dreamFeeBuyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dreamFeeSellBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dreamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"includeToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeBuyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeSellBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"manualSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCompoundingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dreamFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dreamFeeSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxTxBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setParametersToLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setTradingOpenDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dreamWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techSupportFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeBuyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeSellBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapAllToken\",\"type\":\"bool\"}],\"name\":\"updateDividendSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PLUTUS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f035a6cd537f7e6f74e450aaaa68371f75a7136ac39336d4aeae808e370071b"}]}