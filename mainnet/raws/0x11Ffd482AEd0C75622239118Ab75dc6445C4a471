{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staker.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at snowtrace.io on 2022-03-04\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT \\r\\n \\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\ncontract Staker {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\tuint256 constant public INVEST_MIN_AMOUNT = 0.05 ether;\\r\\n\\tuint256[] public REFERRAL_PERCENTS = [50, 30, 10];\\r\\n\\tuint256 constant public DEV_FEE = 80;\\r\\n\\tuint256 constant public PROTOCOL_FEE = 60;\\r\\n\\tuint256 constant public PERCENT_STEP = 3;\\r\\n\\tuint256 constant public WITHDRAW_FEE = 1000; //In base point\\r\\n\\tuint256 constant public PERCENTS_DIVIDER = 1000;\\r\\n    uint256 constant public TIME_STEP = 1 days;\\r\\n\\t\\r\\n\\tuint256 public totalStaked;\\r\\n\\tuint256 public totalRefBonus;\\r\\n\\r\\n    struct Plan {\\r\\n        uint256 time;\\r\\n        uint256 percent;\\r\\n    }\\r\\n\\r\\n    Plan[] internal plans;\\r\\n\\r\\n\\tstruct Deposit {\\r\\n        uint8 plan;\\r\\n\\t\\tuint256 percent;\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tuint256 profit;\\r\\n\\t\\tuint256 start;\\r\\n\\t\\tuint256 finish;\\r\\n\\t}\\r\\n\\r\\n\\tstruct User {\\r\\n\\t\\tDeposit[] deposits;\\r\\n\\t\\tuint256 checkpoint;\\r\\n\\t\\taddress referrer;\\r\\n\\t\\tuint256[3] levels;\\r\\n\\t\\tuint256 bonus;\\r\\n\\t\\tuint256 totalBonus;\\r\\n\\t}\\r\\n\\r\\n\\tmapping (address => User) internal users;\\r\\n\\r\\n\\tuint256 public startUNIX;\\r\\n\\taddress payable public protocolWallet;\\r\\n\\taddress payable public devWallet;\\r\\n\\r\\n\\tevent Newbie(address user);\\r\\n\\tevent NewDeposit(address indexed user, uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish);\\r\\n\\tevent Withdrawn(address indexed user, uint256 amount);\\r\\n\\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\\r\\n\\tevent FeePayed(address indexed user, uint256 totalAmount);\\r\\n\\r\\n\\r\\n\\r\\n\\tconstructor(address payable pWallet,address payable dWallet, uint256 startDate) {\\r\\n\\t\\trequire(!isContract(pWallet));\\r\\n\\t\\trequire(!isContract(dWallet));\\r\\n\\t\\trequire(startDate > 0);\\r\\n\\t\\tprotocolWallet = pWallet;\\r\\n\\t\\tdevWallet = dWallet;\\r\\n\\t\\tstartUNIX = startDate;\\r\\n\\r\\n        plans.push(Plan(14, 80));\\r\\n        plans.push(Plan(21, 75));\\r\\n        plans.push(Plan(28, 70));\\r\\n        plans.push(Plan(14, 80));\\r\\n        plans.push(Plan(21, 75));\\r\\n        plans.push(Plan(28, 70));\\r\\n\\t}\\r\\n\\r\\n\\tfunction invest(address referrer, uint8 plan) public payable {\\r\\n\\r\\n\\t\\trequire(msg.value >= INVEST_MIN_AMOUNT,\\\"too small\\\");\\r\\n        require(plan < 6, \\\"Invalid plan\\\");\\r\\n\\t\\trequire (block.timestamp > startUNIX,\\\"Wait for the start\\\");\\r\\n\\r\\n\\t\\tuint256 devFee = msg.value.mul(DEV_FEE).div(PERCENTS_DIVIDER);\\r\\n\\t\\tdevWallet.transfer(devFee);\\r\\n\\t\\temit FeePayed(msg.sender, devFee);\\r\\n\\r\\n\\t\\tuint256 protocolFee = msg.value.mul(PROTOCOL_FEE).div(PERCENTS_DIVIDER);\\r\\n\\t\\tprotocolWallet.transfer(protocolFee);\\r\\n\\t\\temit FeePayed(msg.sender, protocolFee);\\r\\n\\r\\n\\t\\tUser storage user = users[msg.sender];\\r\\n\\r\\n\\t\\tif (user.referrer == address(0)) {\\r\\n\\t\\t\\tif (users[referrer].deposits.length > 0 && referrer != msg.sender) {\\r\\n\\t\\t\\t\\tuser.referrer = referrer;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\taddress upline = user.referrer;\\r\\n\\t\\t\\tfor (uint256 i = 0; i < 3; i++) {\\r\\n\\t\\t\\t\\tif (upline != address(0)) {\\r\\n\\t\\t\\t\\t\\tusers[upline].levels[i] = users[upline].levels[i].add(1);\\r\\n\\t\\t\\t\\t\\tupline = users[upline].referrer;\\r\\n\\t\\t\\t\\t} else break;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (user.referrer != address(0)) {\\r\\n\\r\\n\\t\\t\\taddress upline = user.referrer;\\r\\n\\t\\t\\tfor (uint256 i = 0; i < 3; i++) {\\r\\n\\t\\t\\t\\tif (upline != address(0)) {\\r\\n\\t\\t\\t\\t\\tuint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\\r\\n\\t\\t\\t\\t\\tusers[upline].bonus = users[upline].bonus.add(amount);\\r\\n\\t\\t\\t\\t\\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\\r\\n\\t\\t\\t\\t\\temit RefBonus(upline, msg.sender, i, amount);\\r\\n\\t\\t\\t\\t\\tupline = users[upline].referrer;\\r\\n\\t\\t\\t\\t} else break;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (user.deposits.length == 0) {\\r\\n\\t\\t\\tuser.checkpoint = block.timestamp;\\r\\n\\t\\t\\temit Newbie(msg.sender);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t(uint256 percent, uint256 profit, uint256 finish) = getResult(plan, msg.value);\\r\\n\\t\\tuser.deposits.push(Deposit(plan, percent, msg.value, profit, block.timestamp, finish));\\r\\n\\r\\n\\t\\ttotalStaked = totalStaked.add(msg.value);\\r\\n\\t\\temit NewDeposit(msg.sender, plan, percent, msg.value, profit, block.timestamp, finish);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw() public {\\r\\n\\r\\n        \\r\\n\\r\\n\\t\\tUser storage user = users[msg.sender];\\r\\n\\r\\n\\t\\tuint256 totalAmount = getUserDividends(msg.sender);\\r\\n\\t\\tuint256 fees = totalAmount.mul(WITHDRAW_FEE).div(10000);\\r\\n\\t\\t   totalAmount = totalAmount.sub(fees);\\r\\n\\r\\n\\t\\tuint256 referralBonus = getUserReferralBonus(msg.sender);\\r\\n\\t\\tif (referralBonus > 0) {\\r\\n\\t\\t\\tuser.bonus = 0;\\r\\n\\t\\t\\ttotalAmount = totalAmount.add(referralBonus);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\trequire(totalAmount > 0, \\\"User has no dividends\\\");\\r\\n\\r\\n\\t\\tuint256 contractBalance = address(this).balance;\\r\\n\\t\\tif (contractBalance < totalAmount) {\\r\\n\\t\\t\\ttotalAmount = contractBalance;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuser.checkpoint = block.timestamp;\\r\\n\\t\\t\\r\\n\\r\\n\\t\\tpayable(msg.sender).transfer(totalAmount);\\r\\n\\r\\n\\t\\temit Withdrawn(msg.sender, totalAmount);\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction getContractBalance() public view returns (uint256) {\\r\\n\\t\\treturn address(this).balance;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\\r\\n\\t\\ttime = plans[plan].time;\\r\\n\\t\\tpercent = plans[plan].percent;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPercent(uint8 plan) public view returns (uint256) {\\r\\n\\t\\tif (block.timestamp > startUNIX) {\\r\\n\\t\\t\\treturn plans[plan].percent.add(PERCENT_STEP.mul(block.timestamp.sub(startUNIX)).div(TIME_STEP));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn plans[plan].percent;\\r\\n\\t\\t}\\r\\n    }\\r\\n\\r\\n\\tfunction getResult(uint8 plan, uint256 deposit) public view returns (uint256 percent, uint256 profit, uint256 finish) {\\r\\n\\t\\tpercent = getPercent(plan);\\r\\n\\r\\n\\t\\tif (plan < 3) {\\r\\n\\t\\t\\tprofit = deposit.mul(percent).div(PERCENTS_DIVIDER).mul(plans[plan].time);\\r\\n\\t\\t} else if (plan < 6) {\\r\\n\\t\\t\\tfor (uint256 i = 0; i < plans[plan].time; i++) {\\r\\n\\t\\t\\t\\tprofit = profit.add((deposit.add(profit)).mul(percent).div(PERCENTS_DIVIDER));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfinish = block.timestamp.add(plans[plan].time.mul(TIME_STEP));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserDividends(address userAddress) public view returns (uint256) {\\r\\n\\t\\tUser storage user = users[userAddress];\\r\\n\\r\\n\\t\\tuint256 totalAmount;\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < user.deposits.length; i++) {\\r\\n\\t\\t\\tif (user.checkpoint < user.deposits[i].finish) {\\r\\n\\t\\t\\t\\tif (user.deposits[i].plan < 3) {\\r\\n\\t\\t\\t\\t\\tuint256 share = user.deposits[i].amount.mul(user.deposits[i].percent).div(PERCENTS_DIVIDER);\\r\\n\\t\\t\\t\\t\\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\\r\\n\\t\\t\\t\\t\\tuint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\\r\\n\\t\\t\\t\\t\\tif (from < to) {\\r\\n\\t\\t\\t\\t\\t\\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} else if (block.timestamp > user.deposits[i].finish) {\\r\\n\\t\\t\\t\\t\\ttotalAmount = totalAmount.add(user.deposits[i].profit);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn totalAmount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\\r\\n\\t\\treturn users[userAddress].checkpoint;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserReferrer(address userAddress) public view returns(address) {\\r\\n\\t\\treturn users[userAddress].referrer;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserDownlineCount(address userAddress) public view returns(uint256, uint256, uint256) {\\r\\n\\t\\treturn (users[userAddress].levels[0], users[userAddress].levels[1], users[userAddress].levels[2]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\\r\\n\\t\\treturn users[userAddress].bonus;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\\r\\n\\t\\treturn users[userAddress].totalBonus;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\\r\\n\\t\\treturn users[userAddress].totalBonus.sub(users[userAddress].bonus);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\\r\\n\\t\\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\\r\\n\\t\\treturn users[userAddress].deposits.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\\r\\n\\t\\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\\r\\n\\t\\t\\tamount = amount.add(users[userAddress].deposits[i].amount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish) {\\r\\n\\t    User storage user = users[userAddress];\\r\\n\\r\\n\\t\\tplan = user.deposits[index].plan;\\r\\n\\t\\tpercent = user.deposits[index].percent;\\r\\n\\t\\tamount = user.deposits[index].amount;\\r\\n\\t\\tprofit = user.deposits[index].profit;\\r\\n\\t\\tstart = user.deposits[index].start;\\r\\n\\t\\tfinish = user.deposits[index].finish;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isContract(address addr) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"pWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staker", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c35fbce5abee6a7599ef93e2e7e6dfaeb3edc9fc000000000000000000000000a8134c1320ff8886220f15e5835b438dfa4bfa61000000000000000000000000000000000000000000000000000000006234e4c0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}