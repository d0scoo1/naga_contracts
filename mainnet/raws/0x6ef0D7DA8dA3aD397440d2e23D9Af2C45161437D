{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetaFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IMetaFactory.sol\\\";\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\\\";\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IAccessControlDAO.sol\\\";\\n\\n/// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\ncontract MetaFactory is IMetaFactory, ERC165 {\\n    /// @notice Creates a DAO, Access Control, and any modules specified\\n    /// @param daoFactory The address of the DAO factory\\n    /// @param metaFactoryTempRoleIndex The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\n    /// @param roleModuleMembers Array of which newly created modules should be given each role\\n    /// @return Array of addresses of the newly created modules\\n    function createDAOAndModules(\\n        address daoFactory,\\n        uint256 metaFactoryTempRoleIndex,\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData,\\n        ModuleActionData memory moduleActionData,\\n        uint256[][] memory roleModuleMembers\\n    ) external returns (address[] memory) {\\n        if (\\n            moduleActionData.contractIndexes.length !=\\n            moduleActionData.functionDescs.length ||\\n            moduleActionData.contractIndexes.length !=\\n            moduleActionData.roles.length ||\\n            createDAOParams.roles.length != roleModuleMembers.length\\n        ) {\\n            revert UnequalArrayLengths();\\n        }\\n\\n        uint256 modulesLength = moduleFactoriesCallData.length;\\n\\n        // Get the number of new module addresses to be created\\n        uint256 newContractAddressesLength = 2;\\n        for (uint256 i; i < modulesLength; ) {\\n            newContractAddressesLength += moduleFactoriesCallData[i]\\n                .addressesReturned;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        address[] memory newContractAddresses = new address[](\\n            newContractAddressesLength\\n        );\\n\\n        // Give this contract a temporary role so it can execute through the DAO\\n        uint256 tempRoleMembersLength = createDAOParams\\n            .members[metaFactoryTempRoleIndex]\\n            .length;\\n        address[] memory tempRoleNewMembers = new address[](\\n            tempRoleMembersLength + 1\\n        );\\n\\n        for (uint256 i; i < tempRoleMembersLength; ) {\\n            tempRoleNewMembers[i] = createDAOParams.members[\\n                metaFactoryTempRoleIndex\\n            ][i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        tempRoleNewMembers[tempRoleMembersLength] = address(this);\\n\\n        createDAOParams.members[metaFactoryTempRoleIndex] = tempRoleNewMembers;\\n\\n\\n        // Create the DAO and Access Control contracts\\n        (address dao, address accessControl) = IDAOFactory(daoFactory)\\n            .createDAO(msg.sender, createDAOParams);\\n\\n        newContractAddresses[0] = dao;\\n        newContractAddresses[1] = accessControl;\\n\\n        // Create the DAO modules\\n        newContractAddresses = createModules(newContractAddresses, moduleFactoriesCallData);\\n\\n        addActionsRoles(moduleActionData, newContractAddresses);\\n\\n        addModuleRoles(\\n            createDAOParams.roles,\\n            roleModuleMembers,\\n            newContractAddresses\\n        );\\n\\n        // Renounce the MetaFactory temporary role\\n        IAccessControlDAO(newContractAddresses[1]).renounceRole(\\n            createDAOParams.roles[metaFactoryTempRoleIndex],\\n            address(this)\\n        );\\n\\n        // Create array of created module addresses to emit in event\\n        address[] memory moduleAddresses = new address[](\\n            newContractAddresses.length - 2\\n        );\\n        for (uint256 i; i < moduleAddresses.length; ) {\\n            moduleAddresses[i] = newContractAddresses[i + 2];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit DAOAndModulesCreated(\\n            newContractAddresses[0],\\n            newContractAddresses[1],\\n            moduleAddresses\\n        );\\n\\n        return newContractAddresses;\\n    }\\n\\n    /// @notice Creates each new module contract\\n    /// @param newContractAddresses The incomplete array of new contract addresses\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\n    /// @return The newContractAddresses array updated with new addresses from modules creation\\n    function createModules(\\n        address[] memory newContractAddresses,\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData\\n    ) private returns (address[] memory) {\\n        uint256 newContractAddressIndex = 2;\\n\\n        // Loop through each module to be created\\n        for (uint256 i; i < moduleFactoriesCallData.length;) {\\n            uint256 newContractAddressesToPassLength = moduleFactoriesCallData[\\n                i\\n            ].newContractAddressesToPass.length;\\n\\n            bytes[] memory newData = new bytes[](\\n                moduleFactoriesCallData[i].data.length +\\n                    newContractAddressesToPassLength\\n            );\\n\\n            // Add new contract addresses to module calldata\\n            for (uint256 j; j < newContractAddressesToPassLength;) {\\n                if (\\n                    moduleFactoriesCallData[i].newContractAddressesToPass[j] >=\\n                    i + 2\\n                ) {\\n                    revert InvalidModuleAddressToPass();\\n                }\\n\\n                // Encode the new contract address into bytes\\n                newData[j] = abi.encode(\\n                    newContractAddresses[\\n                        moduleFactoriesCallData[i].newContractAddressesToPass[j]\\n                    ]\\n                );\\n\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            // Fill in the new bytes array with the old bytes array parameters\\n            for (uint256 j; j < moduleFactoriesCallData[i].data.length; ) {\\n                newData[\\n                    j + newContractAddressesToPassLength\\n                ] = moduleFactoriesCallData[i].data[j];\\n\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            // Call the module factory with the new calldata\\n            (bool success, bytes memory returnData) = moduleFactoriesCallData[i]\\n                .factory\\n                .call{value: moduleFactoriesCallData[i].value}(\\n                abi.encodeWithSignature(\\\"create(bytes[])\\\", newData)\\n            );\\n\\n            if (!success) {\\n                revert FactoryCallFailed();\\n            }\\n\\n            // Create an array of the returned module addresses\\n            address[] memory newModuleAddresses = new address[](moduleFactoriesCallData[i].addressesReturned);\\n            newModuleAddresses = abi.decode(returnData, (address[]));\\n\\n            // Add the new module addresses to the new contract addresses array\\n            for(uint256 j; j < newModuleAddresses.length;) {\\n              newContractAddresses[newContractAddressIndex] = newModuleAddresses[j];\\n              unchecked {\\n                newContractAddressIndex++;\\n                j++;\\n              }\\n            }\\n           \\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return newContractAddresses;\\n    }\\n\\n    /// @notice Adds the roles and functionDescs for each newly created contract\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\n    /// @param newContractAddresses The array of new contract addresses\\n    function addActionsRoles(\\n        ModuleActionData memory moduleActionData,\\n        address[] memory newContractAddresses\\n    ) private {\\n        uint256 moduleActionTargetsLength = moduleActionData\\n            .contractIndexes\\n            .length;\\n\\n        // Create address array of modules to be targeted\\n        address[] memory moduleActionTargets = new address[](\\n            moduleActionTargetsLength\\n        );\\n        for (uint256 i; i < moduleActionTargetsLength; ) {\\n            moduleActionTargets[i] = newContractAddresses[\\n                moduleActionData.contractIndexes[i]\\n            ];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addActionsRoles(address[],string[],string[][])\\\",\\n            moduleActionTargets,\\n            moduleActionData.functionDescs,\\n            moduleActionData.roles\\n        );\\n\\n        address[] memory targetArray = new address[](1);\\n        uint256[] memory valuesArray = new uint256[](1);\\n        bytes[] memory dataArray = new bytes[](1);\\n\\n        // Target array contains just the access control contract address\\n        targetArray[0] = newContractAddresses[1];\\n        valuesArray[0] = 0;\\n        dataArray[0] = data;\\n\\n        // Execute the addActionRoles function on Access Control by calling through the DAO\\n        IDAO(newContractAddresses[0]).execute(\\n            targetArray,\\n            valuesArray,\\n            dataArray\\n        );\\n    }\\n\\n    /// @notice Grants roles to the modules specified\\n    /// @param roles The array of roles to be granted to modules\\n    /// @param roleModuleMembers Indexes of the modules to be granted each role\\n    /// @param newContractAddresses Array of addresses of the newly created contracts\\n    function addModuleRoles(\\n        string[] memory roles,\\n        uint256[][] memory roleModuleMembers,\\n        address[] memory newContractAddresses\\n    ) private {     \\n        uint256 newMembersLength = roleModuleMembers.length;\\n        address[][] memory newMembers = new address[][](newMembersLength);\\n        for (uint256 i; i < newMembersLength; ) {\\n            uint256 newMembersInnerLength = roleModuleMembers[i].length;\\n            address[] memory newMembersInner = new address[](newMembersInnerLength);\\n            for (uint256 j; j < newMembersInnerLength; ) {\\n                newMembersInner[j] = newContractAddresses[\\n                    roleModuleMembers[i][j]\\n                ];\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n            newMembers[i] = newMembersInner;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"grantRoles(string[],address[][])\\\",\\n            roles,\\n            newMembers\\n        );\\n\\n        address[] memory targetArray = new address[](1);\\n        uint256[] memory valuesArray = new uint256[](1);\\n        bytes[] memory dataArray = new bytes[](1);\\n\\n        targetArray[0] = newContractAddresses[1];\\n        valuesArray[0] = 0;\\n        dataArray[0] = data;\\n\\n        IDAO(newContractAddresses[0]).execute(\\n            targetArray,\\n            valuesArray,\\n            dataArray\\n        );\\n    }\\n\\n    /// @notice Returns whether a given interface ID is supported\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\n    /// @return bool Indicates whether the interface is supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IMetaFactory).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetaFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\\\";\\n\\ninterface IMetaFactory {\\n    event DAOAndModulesCreated(\\n        address dao,\\n        address accessControl,\\n        address[] modules\\n    );\\n\\n    error UnequalArrayLengths();\\n    error InvalidModuleAddressToPass();\\n    error FactoryCallFailed();\\n\\n    struct ModuleFactoryCallData {\\n        address factory;\\n        bytes[] data;\\n        uint256 value;\\n        uint256[] newContractAddressesToPass;\\n        uint256 addressesReturned;\\n    }\\n\\n    struct ModuleActionData {\\n        uint256[] contractIndexes;\\n        string[] functionDescs;\\n        string[][] roles;\\n    }\\n\\n    /// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\n    /// @param daoFactory The address of the DAO factory\\n    /// @param metaFactoryTempRoleIndex The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\n    /// @param roleModuleMembers Array of which newly created modules should be given each role\\n    /// @return Array of addresses of the newly created modules\\n    function createDAOAndModules(\\n        address daoFactory,\\n        uint256 metaFactoryTempRoleIndex,\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData,\\n        ModuleActionData memory moduleActionData,\\n        uint256[][] memory roleModuleMembers\\n    ) external returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\": {\r\n      \"content\": \"import \\\"./IModuleBase.sol\\\";\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDAO {\\n    error Unauthorized(bytes32 role, address account);\\n    error UnequalArrayLengths();\\n\\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\\n\\n    /// @notice Function for initializing the Dao\\n    /// @param _accessControl The address of the access control contract\\n    /// @param _moduleFactoryBase The address of the module factory\\n    /// @param _name Name of the Dao\\n    function initialize(address _accessControl, address _moduleFactoryBase, string calldata _name) external;\\n\\n    /// @notice A function for executing function calls from the DAO\\n    /// @param targets An array of addresses to target for the function calls\\n    /// @param values An array of ether values to send with the function calls\\n    /// @param calldatas An array of bytes defining the function calls\\n    function execute(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IAccessControlDAO.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IAccessControlDAO {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        string adminRole;\\n    }\\n\\n    error UnequalArrayLengths();\\n    error MissingRole(address account, string role);\\n    error OnlySelfRenounce();\\n\\n    event ActionRoleAdded(\\n        address target,\\n        string functionDesc,\\n        bytes4 encodedSig,\\n        string role\\n    );\\n    event ActionRoleRemoved(\\n        address target,\\n        string functionDesc,\\n        bytes4 encodedSig,\\n        string role\\n    );\\n    event RoleAdminChanged(\\n        string role,\\n        string previousAdminRole,\\n        string adminRole\\n    );\\n    event RoleGranted(string role, address account, address admin);\\n    event RoleRevoked(string role, address account, address admin);\\n\\n    /// @notice Initialize DAO action and role permissions\\n    /// @param dao Address to receive DAO role\\n    /// @param roles What permissions are assigned to\\n    /// @param roleAdmins Roles which have the ability to remove or add members\\n    /// @param members Addresses to be granted the specified roles\\n    /// @param targets Contract addresses for actions to be defined on\\n    /// @param functionDescs Function descriptions used to define actions\\n    /// @param actionRoles Roles being granted permission for an action\\n    function initialize(\\n        address dao,\\n        string[] memory roles,\\n        string[] memory roleAdmins,\\n        address[][] memory members,\\n        address[] memory targets,\\n        string[] memory functionDescs,\\n        string[][] memory actionRoles\\n    ) external;\\n\\n    /// @notice Grants roles to the specified addresses and defines admin roles\\n    /// @param roles The roles being granted\\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\\n    /// @param members Addresses being granted each specified role\\n    function grantRolesAndAdmins(\\n        string[] memory roles,\\n        string[] memory roleAdmins,\\n        address[][] memory members\\n    ) external;\\n\\n    /// @notice Grants roles to the specified addresses\\n    /// @param roles The roles being granted\\n    /// @param members Addresses being granted each specified role\\n    function grantRoles(string[] memory roles, address[][] memory members)\\n        external;\\n\\n    /// @notice Grants a role to the specified address\\n    /// @param role The role being granted\\n    /// @param account The address being granted the specified role\\n    function grantRole(string memory role, address account) external;\\n\\n    /// @notice Revokes a role from the specified address\\n    /// @param role The role being revoked\\n    /// @param account The address the role is being revoked from\\n    function revokeRole(string memory role, address account) external;\\n\\n    /// @notice Enables an address to remove one of its own roles\\n    /// @param role The role being renounced\\n    /// @param account The address renouncing the role\\n    function renounceRole(string memory role, address account) external;\\n\\n    /// @notice Authorizes roles to execute the specified actions\\n    /// @param targets The contract addresses that the action functions are implemented on\\n    /// @param functionDescs The function descriptions used to define the actions\\n    /// @param roles Roles being granted permission for an action\\n    function addActionsRoles(\\n        address[] memory targets,\\n        string[] memory functionDescs,\\n        string[][] memory roles\\n    ) external;\\n\\n    /// @notice Removes autorization for roles to execute the specified actions\\n    /// @param targets The contract addresses that the action functions are implemented on\\n    /// @param functionDescs The function description used to define the actions\\n    /// @param roles Roles that action permissions are being removed on\\n    function removeActionsRoles(\\n        address[] memory targets,\\n        string[] memory functionDescs,\\n        string[][] memory roles\\n    ) external;\\n\\n    /// @notice Checks if a caller has the permissions to execute the specific action\\n    /// @param caller Address attempting to execute the action\\n    /// @param target Contract address corresponding to the action\\n    /// @param sig The function signature used to define the action\\n    function actionIsAuthorized(\\n        address caller,\\n        address target,\\n        bytes4 sig\\n    ) external view returns (bool isAuthorized);\\n\\n    /// @notice Returns the roles autorized to execute the specified action\\n    /// @param target Contract address corresponding to the action\\n    /// @param functionDesc The function description used to define the action\\n    function getActionRoles(address target, string memory functionDesc)\\n        external\\n        view\\n        returns (string[] memory roles);\\n\\n    /// @notice Checks if a specific role is authorized for an action\\n    /// @param role Role that authorization is being checked on\\n    /// @param target Contract address corresponding to the action\\n    /// @param functionDesc Function description used to define the action\\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\\n    function isRoleAuthorized(\\n        string calldata role,\\n        address target,\\n        string memory functionDesc\\n    ) external view returns (bool isAuthorized);\\n\\n    /// @notice Returns whether the account has been granted the role\\n    /// @param role Role that authorization is being checked on\\n    /// @param account Address that the role authorization is being check on\\n    /// @return boolean Indicates whether the address has been granted the role\\n    function hasRole(string memory role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Returns the role that is the admin of the specified role\\n    /// @param role Role that the admin role is being returned for\\n    /// @return string The admin role of the specified role\\n    function getRoleAdmin(string memory role)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @return string The string \\\"DAO_ROLE\\\"\\n    function DAO_ROLE() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDAOFactory {\\n    struct CreateDAOParams {\\n        address daoImplementation;\\n        address daoFactory;\\n        address accessControlImplementation;\\n        string daoName;\\n        string[] roles;\\n        string[] rolesAdmins;\\n        address[][] members;\\n        string[] daoFunctionDescs;\\n        string[][] daoActionRoles;\\n    }\\n\\n    event DAOCreated(address indexed daoAddress, address indexed accessControl, address indexed sender, address creator);\\n\\n    /// @notice Creates a DAO with an access control contract\\n    /// @param creator Address of the Dao Creator\\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\\n    /// @return dao The address of the deployed DAO proxy contract\\n    /// @return accessControl The address of the deployed access control proxy contract\\n    function createDAO(address creator, CreateDAOParams calldata createDAOParams)\\n        external\\n        returns (address, address);\\n}\\n\"\r\n    },\r\n    \"@fractal-framework/core-contracts/contracts/interfaces/IModuleBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlDAO.sol\\\";\\n\\ninterface IModuleBase {\\n    error NotAuthorized();\\n\\n    /// @return IAccessControlDAO The Access control interface\\n    function accessControl() external view returns (IAccessControlDAO);\\n\\n    /// @notice Returns whether a given interface ID is supported\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\n    /// @return bool Indicates whether the interface is supported\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /// @return string The string \\\"Name\\\"\\n    function name() external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"FactoryCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidModuleAddressToPass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalArrayLengths\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"name\":\"DAOAndModulesCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metaFactoryTempRoleIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"daoImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControlImplementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"rolesAdmins\",\"type\":\"string[]\"},{\"internalType\":\"address[][]\",\"name\":\"members\",\"type\":\"address[][]\"},{\"internalType\":\"string[]\",\"name\":\"daoFunctionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"daoActionRoles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IDAOFactory.CreateDAOParams\",\"name\":\"createDAOParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"newContractAddressesToPass\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"addressesReturned\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaFactory.ModuleFactoryCallData[]\",\"name\":\"moduleFactoriesCallData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"contractIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"functionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"roles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IMetaFactory.ModuleActionData\",\"name\":\"moduleActionData\",\"type\":\"tuple\"},{\"internalType\":\"uint256[][]\",\"name\":\"roleModuleMembers\",\"type\":\"uint256[][]\"}],\"name\":\"createDAOAndModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetaFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}