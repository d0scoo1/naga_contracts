{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n   \r\n    /**\r\n    * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n    */\r\n    library SafeMath {\r\n   \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n       \r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n   \r\n    /**\r\n    * @dev Mod two numbers.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n        }\r\n    }\r\n   \r\n   \r\n    /**\r\n    * @dev Interface of the ERC20 standard as defined in the EIP.\r\n    */\r\n    interface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n   \r\n    function balanceOf(address account) external view returns (uint256);\r\n   \r\n    /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n   \r\n    /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n   \r\n     function approve(address spender, uint256 amount) external returns (bool);\r\n   \r\n     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n   \r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n   \r\n     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n   \r\n   \r\n    /**\r\n    * @title SafeERC20\r\n    * @dev Wrappers around ERC20 operations that throw on failure.\r\n    * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n    * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n    */\r\n    library SafeERC20 {\r\n    using SafeMath for uint256;\r\n   \r\n        function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n            require(token.transfer(to, value));\r\n        }\r\n   \r\n        function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n            require(token.transferFrom(from, to, value));\r\n        }\r\n    }\r\n   \r\n    contract Refund {\r\n              \r\n        using SafeMath for uint256;\r\n       \r\n        IERC20 private token;\r\n       \r\n        address private _owner;\r\n       \r\n        address payable private wallet;\r\n\r\n        uint rate=100000;\r\n       \r\n        constructor(address contractAddress,address payable _targetWallet)  {\r\n            require(_targetWallet != address(0) ,\"Address zero\");\r\n            token=IERC20(contractAddress);\r\n            _owner=msg.sender;\r\n            wallet=_targetWallet;\r\n        }\r\n        /**\r\n       * @dev Throws if called by any account other than the owner.\r\n       */\r\n        modifier onlyOwner(){\r\n            require(_owner==msg.sender,\"Only owner\");\r\n             _;\r\n        }\r\n\r\n        function charge() payable public {\r\n        \r\n        }\r\n\r\n        function getBalance() public view returns (uint256 amount)\r\n        {\r\n            return address(this).balance;\r\n        }\r\n\r\n        function sell(uint256 amount) public {\r\n            require(amount > 0, \"Tokens must be greater than 0\");\r\n            uint256 allowance = token.allowance(msg.sender, address(this));\r\n            require(allowance >= amount, \"Check token allowance\");\r\n            token.transferFrom(msg.sender, address(this), amount);\r\n\r\n            uint256 etherAmount= getEther(amount);\r\n            payable(msg.sender).transfer(etherAmount);\r\n        }\r\n\r\n        function getEther(uint256 _amount) internal view returns (uint256 tokens)\r\n        {\r\n            tokens = _amount.div(rate);\r\n            return tokens;\r\n        }\r\n\r\n        function getAllTokens() public onlyOwner\r\n        {\r\n            token.transfer(wallet,token.balanceOf(address(this)));\r\n        }\r\n\r\n        function getEtherBack() public onlyOwner\r\n        {\r\n           payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n\r\n    }", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_targetWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Refund", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c01a327e30b0fbf32861333f238b5c36a60abc09000000000000000000000000bd7a268bfb6c231d2c61344679055cbdf054f672", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://88d71af59ddf5b2bad14eeb0b7b010e65045f8739ac2aff5ba6db66dbc7e5fef"}]}