{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/utils/IOtoCoMaster.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoMaster {\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev See {OtoCoMaster-baseFee}.\r\n     */\r\n    function baseFee() external view returns (uint256 fee);\r\n\r\n    receive() external payable;\r\n}\r\n\r\n\r\n// File contracts/utils/IOtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoPlugin {\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract OtoCoPlugin is IOtoCoPlugin, Ownable {\r\n\r\n    // Reference to the OtoCo Master to transfer plugin cost\r\n    IOtoCoMaster public otocoMaster;\r\n\r\n    /**\r\n     * Modifier to allow only series owners to change content.\r\n     * @param tokenId The plugin index to update.\r\n     */\r\n    modifier onlySeriesOwner(uint256 tokenId) {\r\n        require(otocoMaster.ownerOf(tokenId) == msg.sender, \"OtoCoPlugin: Not the entity owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Modifier to check if the function set the correct amount of ETH value and transfer it to master.\r\n     * If baseFee are 0 or sender is OtoCoMaster this step is jumped.\r\n     * @dev in the future add/attact/remove could be called from OtoCo Master. In those cases no transfer should be called.\r\n     */\r\n    modifier transferFees() {\r\n        if (otocoMaster.baseFee() > 0 && msg.sender != address(otocoMaster)) payable(otocoMaster).transfer(msg.value);\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _otocoMaster) Ownable() {\r\n        otocoMaster = IOtoCoMaster(_otocoMaster);\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Attach elements are not possible on this plugin.\");\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Remove elements are not possible on this plugin.\");\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Clones.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/plugins/Launchpool.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface PoolInterface {\r\n    function initialize(\r\n        address[] memory allowedTokens,\r\n        uint256[] memory uintArgs,\r\n        string memory _metadata,\r\n        address _sponsor,\r\n        address _shares,\r\n        address _curve\r\n    ) external;\r\n\r\n    function sponsor() external view returns(address);\r\n    function metadata() external view returns(string memory);\r\n}\r\n\r\n/**\r\n * Launchpool Factory\r\n */\r\ncontract Launchpool is OtoCoPlugin {\r\n    \r\n    // Launchpool creation and removal events\r\n    event LaunchpoolCreated(uint256 indexed seriesId, address sponsor, address pool, string metadata);\r\n    event LaunchpoolRemoved(uint256 indexed seriesId, address pool);\r\n    \r\n    // The source of launchpool to be deployed\r\n    address private _poolSource;\r\n    // The curve sources that could be used on launchpool\r\n    address[] private _curveSources;\r\n\r\n    // The assignment of launchpools to entities\r\n    mapping(uint256 => address) public launchpoolDeployed;\r\n\r\n    constructor(\r\n        address payable otocoMaster,\r\n        address poolSource,\r\n        address curveSource,\r\n        uint256[] memory prevIds,\r\n        address[] memory prevLaunchpools\r\n    ) OtoCoPlugin(otocoMaster) {\r\n        _poolSource = poolSource;\r\n        _curveSources.push(curveSource);\r\n        for (uint i = 0; i < prevIds.length; i++ ) {\r\n            launchpoolDeployed[prevIds[i]] = prevLaunchpools[i];\r\n            PoolInterface pool = PoolInterface(launchpoolDeployed[prevIds[i]]);\r\n            emit LaunchpoolCreated(prevIds[i], pool.sponsor(), prevLaunchpools[i], pool.metadata());\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Update launchpool Source\r\n    *\r\n    * @param newAddress The new launchpool source to be used on clones\r\n     */\r\n    function updatePoolSource(address newAddress) public onlyOwner {\r\n        _poolSource = newAddress;\r\n    }\r\n\r\n    /**\r\n    * Add a new curve source to the curve options\r\n    *\r\n    * @param newAddress The new curve source to be added to curve options\r\n     */\r\n    function addCurveSource(address newAddress) public onlyOwner {\r\n        _curveSources.push(newAddress);\r\n    }\r\n\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) onlySeriesOwner(seriesId) transferFees() public payable override {\r\n        (\r\n            address[] memory _allowedTokens,\r\n            uint256[] memory _uintArgs,\r\n            string memory _metadata,\r\n            address _shares,\r\n            uint16 _curve,\r\n            address sponsor\r\n        ) = abi.decode(pluginData, (address[], uint256[], string, address, uint16, address));\r\n        address pool = Clones.clone(_poolSource);\r\n        PoolInterface(pool).initialize(_allowedTokens, _uintArgs, _metadata, sponsor, _shares, _curveSources[_curve]);\r\n        launchpoolDeployed[seriesId] = pool;\r\n        emit LaunchpoolCreated(seriesId, sponsor, pool, _metadata);\r\n    }\r\n\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) onlySeriesOwner(seriesId) transferFees() public payable override {\r\n        // Remove the last token from array\r\n        address pool = launchpoolDeployed[seriesId];\r\n        launchpoolDeployed[seriesId] = address(0);\r\n        emit LaunchpoolRemoved(seriesId, pool);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"otocoMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curveSource\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prevIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"prevLaunchpools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"LaunchpoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LaunchpoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addCurveSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"attachPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"launchpoolDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otocoMaster\",\"outputs\":[{\"internalType\":\"contract IOtoCoMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePoolSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Launchpool", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000752b0073422a7f9cda7f71b5fe7f12a1789e6506000000000000000000000000df786ac51d177aece3d34ffa687d57c493c3af790000000000000000000000008082a2fefc36fef1eafa164b1f723c319a3e911e00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000178000000000000000000000000000000000000000000000000000000000000018300000000000000000000000000000000000000000000000000000000000001e8000000000000000000000000000000000000000000000000000000000000014f00000000000000000000000000000000000000000000000000000000000001a5000000000000000000000000000000000000000000000000000000000000017e000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000002130000000000000000000000000000000000000000000000000000000000000221000000000000000000000000000000000000000000000000000000000000000900000000000000000000000097f77888f95c8acad33d07c4dcc5f5779304e4c0000000000000000000000000bd8e3f6dc80f0959b820126440380989f49020e2000000000000000000000000bbd1ac07957d851c64b2a84c68e9031c2d400a190000000000000000000000001915a78eb217e18f2cd1970c8ab14c1ee8476038000000000000000000000000405bfaca6ca598fc95b77b08bfd30e9338b2d4a60000000000000000000000007836123dda82418b3af3e5ee3fbbd5a759c9bb650000000000000000000000002f8126d6822b8632bdf64077b8b1fa03b14b0b5c0000000000000000000000002cc9e4326e9567fd5d47e61e4cbb2bf92151cfa9000000000000000000000000e0411f51433c267f99840b43892e4013cecb7fec", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e93f0b50ab1cb3fa07f75ea1f841f56182d45fe861b06f95b28218ba615ea7e7"}]}