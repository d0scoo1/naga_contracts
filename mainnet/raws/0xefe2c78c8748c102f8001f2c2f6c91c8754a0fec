{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor(){\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Exchange is Ownable {\r\n    // RUN token\r\n\tIERC20 public Rex;\r\n    // THETHER token\r\n\tIERC20 public Tether;\r\n\r\n\tuint public rate = 150000000000000000 wei;\r\n\r\n\tevent BuyToken(address receiver, address token, uint amount, uint rate);\r\n\r\n\tconstructor(address _rex, address _tether) { \r\n\t\tRex = IERC20(_rex);\r\n\t\tTether = IERC20(_tether);\r\n\t}\r\n\r\n    modifier checkAllowance(uint amount) {\r\n            require(Tether.allowance(msg.sender, address(this)) >= amount, \"Error\");\r\n            _;\r\n        }\r\n\r\n\r\n    function setRate(uint _rate) external onlyOwner {\r\n        rate = _rate;\r\n    }\r\n\r\n  function _calculateFinalPrice(uint tokensAmount) internal view returns (uint){\r\n    uint eth = 1 ether;\r\n    uint finalPrice;\r\n        if(tokensAmount % rate == 0){\r\n            finalPrice = tokensAmount*eth/rate*eth/eth;\r\n        } else {\r\n            finalPrice = (tokensAmount * eth/ rate *eth) / eth;\r\n        }\r\n        return finalPrice;\r\n    }\r\n\r\n\tfunction buyToken(uint amount) external checkAllowance(amount) returns (uint){\r\n        require(amount >= rate, \"You cannot purchase less than one rex token\");\r\n        require(Tether.balanceOf(msg.sender) >= amount, \"There are not enough tokens on your balance to exchange for rex token\");\r\n        uint tokensAmount = _calculateFinalPrice(amount); \r\n\t\trequire(Rex.balanceOf(address(this)) >= tokensAmount, \"The exchange amount exceeds the balance of the exchange office\");\r\n\r\n        require(Tether.transferFrom(msg.sender, address(this),  amount), 'transfer tether toke has failed');\r\n        Rex.approve(address(this), tokensAmount);\r\n        Rex.transferFrom(address(this), msg.sender, tokensAmount);\r\n\t\temit BuyToken(msg.sender, address(Rex), tokensAmount, rate);\r\n        return amount;\r\n\t}\r\n\r\n    function withdrawRex(address _recipient, uint amount) external onlyOwner {\r\n        require (Tether.balanceOf(address(this)) <= amount);\r\n        Rex.approve(address(this), amount);\r\n        Rex.transferFrom(address(this), _recipient, amount);\r\n    }\r\n\r\n    function withdrawTether(address _recipient, uint amount) external onlyOwner {\r\n      require (Tether.balanceOf(address(this)) <= amount);\r\n      Tether.approve(address(this), amount);\r\n      Tether.transferFrom(address(this), _recipient, amount);\r\n    }\r\n\r\n    function balances () public view onlyOwner returns(uint, uint){\r\n      return(Rex.balanceOf(address(this)), Tether.balanceOf(address(this)));\r\n    }\r\n\r\n    function refundTokens(address _recipient, address _token) external onlyOwner {\r\n      require(_token != address(Rex));\r\n      IERC20 token = IERC20(_token);\r\n      uint256 balance = token.balanceOf(address(this));\r\n      require(balance > 0);\r\n      require(token.transfer(_recipient, balance));\r\n    }\r\n\r\n    receive () external payable {\r\n        revert(\"Exchange: You cannot send ether to the address of this contract!\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tether\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Rex\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tether\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"refundTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTether\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005bf844122db21ae6f787ddda9806aa7dd6489998000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a2e67919754af88e1d2abef039ee8d5cdcae7904ee0da3742f73d0ff3c3772b"}]}