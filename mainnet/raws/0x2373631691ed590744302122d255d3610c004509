{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SignerRole\r\n * @dev A signer role contract.\r\n */\r\nabstract contract SignerRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event SignerAdded(address indexed account);\r\n    event SignerRemoved(address indexed account);\r\n\r\n    Roles.Role private _signers;\r\n\r\n    constructor () {\r\n        _addSigner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Makes function callable only if sender is a signer.\r\n     */\r\n    modifier onlySigner() {\r\n        require(isSigner(_msgSender()), \"SignerRole: caller does not have the Signer role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address is a signer.\r\n     */\r\n    function isSigner(address account) public view returns (bool) {\r\n        return _signers.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Makes the address a signer. Only other signers can add new signers.\r\n     */\r\n    function addSigner(address account) public virtual onlySigner {\r\n        _addSigner(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes the address from signers. Signer can be renounced only by himself.\r\n     */\r\n    function renounceSigner() public {\r\n        _removeSigner(_msgSender());\r\n    }\r\n\r\n    function _addSigner(address account) internal {\r\n        _signers.add(account);\r\n        emit SignerAdded(account);\r\n    }\r\n\r\n    function _removeSigner(address account) internal {\r\n        _signers.remove(account);\r\n        emit SignerRemoved(account);\r\n    }\r\n}\r\n\r\nabstract contract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"[Pauser Role]: only for pauser\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\nabstract contract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title AdminRole\r\n * @dev An operator role contract.\r\n */\r\nabstract contract AdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _admins;\r\n\r\n    constructor () {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Makes function callable only if sender is an admin.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(_msgSender()), \"AdminRole: caller does not have the Admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address is an admin.\r\n     */\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admins.has(account);\r\n    }\r\n\r\n    function _addAdmin(address account) internal {\r\n        _admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function _removeAdmin(address account) internal {\r\n        _admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title TokenProviderRole\r\n * @dev An operator role contract.\r\n */\r\nabstract contract TokenProviderRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event TokenProviderAdded(address indexed account);\r\n    event TokenProviderRemoved(address indexed account);\r\n\r\n    Roles.Role private _providers;\r\n\r\n    constructor () {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Makes function callable only if sender is an token provider.\r\n     */\r\n    modifier onlyTokenProvider() {\r\n        require(isTokenProvider(_msgSender()), \"TokenProviderRole: caller does not have the Token Provider role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the address is an token provider.\r\n     */\r\n    function isTokenProvider(address account) public view returns (bool) {\r\n        return _providers.has(account);\r\n    }\r\n\r\n    function _addTokenProvider(address account) internal {\r\n        _providers.add(account);\r\n        emit TokenProviderAdded(account);\r\n    }\r\n\r\n    function _removeTokenProvider(address account) internal {\r\n        _providers.remove(account);\r\n        emit TokenProviderRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Exchanger is Ownable {\r\n    address public vestingProxy;\r\n    address public beneficiary;\r\n\r\n    uint ratePur = 0.00357142857142816 * 1e18;\r\n    uint rateHwx = 1e18;\r\n\r\n    uint public minimalBuyingLimit = 50000e18;\r\n\r\n    address[] purchasedTokens;\r\n    mapping (address => bool) isPurchased;\r\n\r\n    constructor (address[] memory _purchasedTokens, address _vestingProxy, address _beneficiary) {\r\n        require(_vestingProxy != address(0), \"zero vesting Proxy token address\");\r\n        require(_beneficiary != address(0), \"zero beneficiary address\");\r\n        for (uint i = 0 ; i < _purchasedTokens.length; i++) {\r\n            require(_purchasedTokens[i] != address(0), \"zero purchased token address\");\r\n            addPurchasedToken(_purchasedTokens[i]);\r\n        }\r\n        vestingProxy = _vestingProxy;\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function buy(address _token, uint amount) public {\r\n        require(isPurchased[_token], \"(buy) the token is not purchased\");\r\n        require(amount > 0, \"(buy) zero amount\");\r\n        (uint purAmount, uint hwxAmount) = prices(amount);\r\n        require(purAmount >= minimalBuyingLimit, \"(buy) less than minimal buying limit\");\r\n        require(IERC20(_token).allowance(msg.sender, address(this)) >= purAmount, \"(buy) not approved token amount\");\r\n        require(hwxAmount > 0, \"(buy) zero contribution\");\r\n\r\n        IERC20(_token).transferFrom(msg.sender, beneficiary, purAmount);\r\n        IERC20(vestingProxy).transfer(msg.sender, hwxAmount);\r\n    }\r\n\r\n    function prices(uint hwxAmount) public view returns(uint _purchasedToken, uint _hwxAmount) {\r\n        _purchasedToken = hwxAmount * ratePur/rateHwx;\r\n        _hwxAmount = _purchasedToken * rateHwx/ratePur;\r\n    }\r\n\r\n    function updateRate(uint _ratePur, uint _rateHwx) public onlyOwner {\r\n        ratePur = _ratePur;\r\n        rateHwx = _rateHwx;\r\n    }\r\n\r\n    function updateProxy(address proxy) public onlyOwner {\r\n        require(proxy != address(0), \"zero address of the token\");\r\n        vestingProxy = proxy;\r\n    }\r\n    \r\n    function updateBeneficiary(address _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function getRateFromUSDT(uint usdtAmount) public view returns(uint) {\r\n        uint _hwxAmount = usdtAmount * rateHwx/ratePur;\r\n        return _hwxAmount;\r\n    }\r\n\r\n    function getPurchasedTokens() public view returns(address[] memory) {\r\n        return purchasedTokens;\r\n    }\r\n\r\n    function withdrawHWX(address token, uint amount) public onlyOwner {\r\n        require(IERC20(token).balanceOf(address(this)) >= amount, \"insufficient balance\");\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function updateMinimalBuyingLimit(uint newLimit) public onlyOwner {\r\n        minimalBuyingLimit = newLimit;\r\n    }\r\n\r\n    function addPurchasedToken(address _token) public onlyOwner {\r\n        require(!isPurchased[_token], \"(addPurchasedToken) the already purchased token\");\r\n        purchasedTokens.push(_token);\r\n        isPurchased[_token] = true;\r\n    }\r\n\r\n    function removePurchasedToken(address _token) public onlyOwner {\r\n        require(isPurchased[_token], \"(addPurchasedToken) the not purchased token\");\r\n        deleteAddressFromArray(purchasedTokens, _token);\r\n        isPurchased[_token] = false;\r\n    }\r\n\r\n    function deleteAddressFromArray(address[] storage _array, address _address) private {\r\n        for (uint i = 0; i < _array.length; i++) {\r\n            if (_array[i] == _address) {\r\n                address temp = _array[_array.length-1];\r\n                _array[_array.length-1] = _address;\r\n                _array[i] = temp;\r\n            }\r\n        }\r\n\r\n        _array.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_purchasedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_vestingProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addPurchasedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchasedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getRateFromUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalBuyingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hwxAmount\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchasedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hwxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removePurchasedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"updateMinimalBuyingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"updateProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratePur\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateHwx\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHWX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Exchanger", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000bf2e73b0e0607f47a2c03b48613d7458172e10ac00000000000000000000000060aad8ebeb25ef8ccc0e31aec2b8ef03c92300890000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e3c71c583b74389dd40c5bb21fe95f858471f4553c6c0ab27ccc577bb493d93"}]}