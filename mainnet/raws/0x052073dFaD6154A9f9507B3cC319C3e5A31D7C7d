{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n\r\n    Shibana - DAO Empowered Charity\r\n\r\nTelegram: https://t.me/ShibanaDAO\r\nTwitter: https://twitter.com/shibanadao \r\nWebsite: https://shibanadao.com/\r\n\r\n*/\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n     \r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Shibana is IERC20, Ownable {\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n\r\n    mapping(address => bool) public botWallets;\r\n\r\n    mapping(address => bool) private isPair;\r\n\r\n    address[] private _excluded;\r\n    \r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    EnumerableSet.AddressSet electedCouncil;\r\n\r\n    address constant public ZERO = address(0x0);\r\n \r\n    address public DAOcandidate;\r\n    uint256 public DAOcandidateScore;\r\n    mapping(address => uint256) public DAOwinningBuy;\r\n    \r\n    uint256 public timeLastDAOcandidate;    \r\n    uint256 public DAOcandidateRoundDuration = 1 minutes;    \r\n    uint256 public totalDAOrewards;\r\n    \r\n    uint256 public launchBlock;\r\n   \r\n    uint256 public constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 69_000_000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    address public autoLiquidityReceiver = 0x14a3F1f523C09eA1275D966ffa41AcA0216AD694;\r\n    address public treasuryAddress = 0x506F5D1c3E403d234c9Df98Cb3a79F2fbCC905d1;\r\n\taddress public developmentAddress = msg.sender;\r\n\r\n    //Main * * * ** !\r\n    address private constant USDCaddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address private constant WETHaddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    //Testnet\r\n    // address private constant USDCaddress = 0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;\r\n    // address private constant WETHaddress = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\r\n    \r\n    uint256 public charityFunds;\r\n    uint256 public treasuryFunds;\r\n    uint256 private developmentFunds;\r\n\r\n    string private constant _name = \"Shibana\";\r\n    string private constant _symbol = \"SHIBANA\";\r\n    uint8 private constant _decimals = 9;\r\n    \r\n    uint256 public _taxFee = 3;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n   \r\n    uint256 public _liquidityFee = 9;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    IUniswapV2Router public constant uniswapV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Mainnet & Testnet ETH;\r\n    address public immutable uniswapV2Pair;\r\n     \r\n    bool inSwapAndLiquify;\r\n    \r\n    uint256 public walletRestrictionAmount; // max token transaction and wallet amount\r\n    uint256 public constant MIN_WALLETRESTRICTION_AMOUNT = 3 * _tTotal / 200; // 1.5% \r\n \r\n    uint256 public numTokensSellToAddToLiquidity =  _tTotal / 300; // 0.33...%\r\n    \r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), WETHaddress);\r\n        isPair[uniswapV2Pair] = true; \r\n\r\n        _approve(address(this), address(uniswapV2Router), MAX);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true; \r\n        _isExcludedFromFee[autoLiquidityReceiver] = true;        \r\n        \r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 _allowance = _allowances[sender][msg.sender];\r\n        _approve(sender, msg.sender, _allowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        uint256 _allowance = _allowances[msg.sender][spender];\r\n        _approve(msg.sender, spender, _allowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function deliver(uint256 tAmount) external {\r\n        require(!_isExcluded[ msg.sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[ msg.sender] = _rOwned[ msg.sender]  - rAmount;\r\n        _rTotal = _rTotal - rAmount;\r\n        _tFeeTotal = _tFeeTotal + tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setSwapThresholdAmount(uint256 _numTokensSellToAddToLiquidity) external onlyOwner {\r\n        require(_numTokensSellToAddToLiquidity >= _tTotal / 1000, \"[0.1,MAXUINT_256] % supply)\");\r\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\r\n    }\r\n    \r\n    function claimStuckTokens(address tokenAddress, address walletaddress) external onlyOwner {\r\n        require(tokenAddress != address(this));\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(walletaddress, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    function claimStuckBalance(address payable walletaddress) external onlyOwner {\r\n        walletaddress.transfer(address(this).balance - charityFunds - developmentFunds - treasuryFunds);\r\n    }\r\n    \r\n    function addBotWallet(address botwallet) external onlyOwner {\r\n        require(block.number <= launchBlock + 60, \"Antibot only first 60 blocks\");\r\n        botWallets[botwallet] = true;\r\n    }\r\n    \r\n    function removeBotWallet(address botwallet) external onlyOwner {\r\n        botWallets[botwallet] = false;\r\n    }\r\n    \r\n    function allowtrading() external onlyOwner() {\r\n        require(walletRestrictionAmount < MIN_WALLETRESTRICTION_AMOUNT, \"Launched\");\r\n        walletRestrictionAmount = MIN_WALLETRESTRICTION_AMOUNT;\r\n        launchBlock = block.number;        \r\n    }    \r\n\r\n    function setWalletRestrictionAmount(uint256 _walletRestrictionAmount) external onlyOwner {\r\n        require(_walletRestrictionAmount >= MIN_WALLETRESTRICTION_AMOUNT, \"[1.5, MAXUINT_256] %\");\r\n        walletRestrictionAmount = _walletRestrictionAmount;\r\n    }\r\n\r\n    function setFeeReceivers(address _treasuryAddress, address _developmentAddress) external onlyOwner {\r\n        treasuryAddress = _treasuryAddress;\r\n        developmentAddress = _developmentAddress;\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount - tFee - tLiquidity;\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) \r\n            private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();        \r\n\r\n        uint256 contractTokens = 7 * tLiquidity / 9;\r\n        tLiquidity -= contractTokens;\r\n\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        _rOwned[autoLiquidityReceiver] = _rOwned[autoLiquidityReceiver] + rLiquidity;\r\n        if(_isExcluded[autoLiquidityReceiver])\r\n            _tOwned[autoLiquidityReceiver] = _tOwned[autoLiquidityReceiver] + tLiquidity;\r\n\r\n        rLiquidity = contractTokens * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + contractTokens;\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _taxFee / 10**2;\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _liquidityFee / 10**2;\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _liquidityFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        \r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n  \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > 0, \"Transfer more than 0\");\r\n        require(!botWallets[from], \"No bots\");        \r\n\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        else{\r\n            uint256 _walletRestrictionAmount = walletRestrictionAmount;\r\n            require(_walletRestrictionAmount >= MIN_WALLETRESTRICTION_AMOUNT, \"Launching\");\r\n            //Limits in effect\r\n            if(_walletRestrictionAmount < MAX){    \r\n                require(amount <= _walletRestrictionAmount && \r\n               (to == uniswapV2Pair || (balanceOf(to) + amount <= _walletRestrictionAmount)), \"maxTx/maxWallet\");                      \r\n            }\r\n        }\r\n\r\n        if(takeFee){\r\n            address _DAOcandidate = DAOcandidate;\r\n            if(isPair[from]){\r\n                address[] memory path = new address[](2);\r\n                path[0] = WETHaddress;\r\n                path[1] = address(this);\r\n                uint256 buyAmountETH = uniswapV2Router.getAmountsIn(amount, path)[0];                \r\n                if(block.timestamp > timeLastDAOcandidate + DAOcandidateRoundDuration && _DAOcandidate != ZERO){\r\n                    if(electedCouncil.contains(_DAOcandidate) == false){\r\n                        electedCouncil.add(_DAOcandidate);\r\n                    }                    \r\n                    DAOwinningBuy[_DAOcandidate] = DAOcandidateScore;\r\n                    DAOcandidateScore = 0;\r\n                }\r\n                if(buyAmountETH > DAOcandidateScore){                                    \r\n                    if(_DAOcandidate != to){ \r\n                        DAOcandidate = to;\r\n                    }\r\n                    DAOcandidateScore = buyAmountETH;\r\n                    timeLastDAOcandidate = block.timestamp;\r\n                }\r\n            }\r\n            else{\r\n                if(from == DAOcandidate){                       \r\n                    DAOcandidate = ZERO;\r\n                    DAOcandidateScore = 0;\r\n                    timeLastDAOcandidate = block.timestamp;\r\n                }\r\n                else if(!inSwapAndLiquify){\r\n                    if((balanceOf(autoLiquidityReceiver) >= numTokensSellToAddToLiquidity)){\r\n                        addLiquidity(numTokensSellToAddToLiquidity);\r\n                    }\r\n                    else if(balanceOf(address(this)) >= numTokensSellToAddToLiquidity && _DAOcandidate != ZERO){\r\n                        swapAndLiquify(numTokensSellToAddToLiquidity);\r\n                    }\r\n                }                                \r\n            }\r\n        }\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokenAmount) private lockTheSwap {\r\n\r\n        uint256 oldBalance = address(this).balance;\r\n        swapTokensForEth(tokenAmount); \r\n        uint256 swappedBalance = address(this).balance - oldBalance;\r\n\r\n        treasuryFunds += swappedBalance * 3 / 7; \r\n\t\tdevelopmentFunds += swappedBalance / 7;\r\n\t\tcharityFunds += swappedBalance * 2 / 7;\r\n        uint256 DAOrewards = swappedBalance / 7;\r\n        payable(DAOcandidate).transfer(DAOrewards);\t \r\n        totalDAOrewards += DAOrewards;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount) private lockTheSwap {\r\n        _tokenTransfer(autoLiquidityReceiver, address(this), tokenAmount, false);      \r\n        uint256 amountToLiquify = tokenAmount / 2;\r\n        uint256 amountToSwap = tokenAmount - amountToLiquify;\r\n\r\n        if( amountToSwap == 0 ) {\r\n            return;\r\n        }\r\n        uint256 balanceBefore = address(this).balance;\r\n        swapTokensForEth(amountToSwap);\r\n        uint256 amountETHLiquidity = address(this).balance - balanceBefore;\r\n\r\n        if (amountToLiquify > 0 && amountETHLiquidity > 0) { \r\n            uniswapV2Router.addLiquidityETH{value: amountETHLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                owner(),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETHaddress;\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function donateToCharity(address _charityAddress, uint256 _charityContribution) external onlyOwner {\r\n        payable(_charityAddress).transfer(_charityContribution);\t\t\r\n        charityFunds -= _charityContribution;\r\n    }\r\n    \r\n    function transferToTreasury() external {\r\n        require(msg.sender == treasuryAddress || msg.sender == owner());\r\n        payable(treasuryAddress).transfer(treasuryFunds);\r\n        treasuryFunds -= treasuryFunds;\r\n    }\r\n    function viewTreasuryFunds() external view returns (uint256) {\r\n        return treasuryFunds;\r\n    }\r\n    function transferToDevelopment() external {\r\n        require(msg.sender == developmentAddress || msg.sender == owner());\r\n        payable(developmentAddress).transfer(developmentFunds);\r\n        developmentFunds -= developmentFunds;\r\n    }\r\n    function viewDevelopmentFunds() external view returns (uint256) {\r\n        require(msg.sender == developmentAddress || msg.sender == owner());\r\n        return developmentFunds;\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, \r\n          uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, \r\n          uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, \r\n          uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, \r\n          uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function numDAOelected() external view returns (uint256) {\r\n        return electedCouncil.length();\r\n    }\r\n\r\n    function viewDAOelected(uint256 index) external view returns (address) {\r\n        return electedCouncil.at(index);\r\n    }\r\n\r\n    function estimatedUSD(uint256 amount) internal view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = USDCaddress;\r\n        path[1] = WETHaddress; \r\n        return uniswapV2Router.getAmountsIn(amount, path)[0];\r\n    }\r\n\r\n    struct WalletData {\r\n        uint256 tokenBalance;        \r\n        uint256 DAOwinningBuy;        \r\n    }\r\n\r\n    struct TokenData {\r\n        uint256 totalReflections;\r\n        uint256 DAOcandidateRoundDuration;\r\n        address DAOcandidate;\r\n        uint256 DAOcandidateScore;\r\n        uint256 timeLastDAOcandidate;\r\n        uint256 numDAOmembers;\r\n        uint256 totalDAOrewards;\r\n        uint256 treasuryFunds;\r\n        uint256 charityFunds;\r\n        uint256 liquidityFunds;        \r\n    }\r\n\r\n    function fetchWalletData(address wallet) external view returns (WalletData memory) {\r\n        return WalletData(balanceOf(wallet), DAOwinningBuy[wallet]);\r\n    }\r\n\r\n    function fetchBigDataA() external view returns (TokenData memory) {\r\n        return TokenData(_tFeeTotal, DAOcandidateRoundDuration, DAOcandidate, DAOcandidateScore, timeLastDAOcandidate, electedCouncil.length(), totalDAOrewards, \r\n            treasuryFunds, charityFunds, IERC20(WETHaddress).balanceOf(uniswapV2Pair));\r\n    }\r\n    function fetchBigDataB() external view returns (TokenData memory) {\r\n        return TokenData(_tFeeTotal, DAOcandidateRoundDuration, DAOcandidate, DAOcandidateScore, timeLastDAOcandidate, electedCouncil.length(), totalDAOrewards, \r\n            estimatedUSD(treasuryFunds), estimatedUSD(charityFunds), estimatedUSD(IERC20(WETHaddress).balanceOf(uniswapV2Pair)));\r\n    }\r\n     \r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAOcandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOcandidateRoundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOcandidateScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DAOwinningBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WALLETRESTRICTION_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botwallet\",\"type\":\"address\"}],\"name\":\"addBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowtrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"claimStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_charityContribution\",\"type\":\"uint256\"}],\"name\":\"donateToCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBigDataA\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAOcandidateRoundDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"DAOcandidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DAOcandidateScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLastDAOcandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDAOmembers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDAOrewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFunds\",\"type\":\"uint256\"}],\"internalType\":\"struct Shibana.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBigDataB\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAOcandidateRoundDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"DAOcandidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"DAOcandidateScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLastDAOcandidate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDAOmembers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDAOrewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFunds\",\"type\":\"uint256\"}],\"internalType\":\"struct Shibana.TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"fetchWalletData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAOwinningBuy\",\"type\":\"uint256\"}],\"internalType\":\"struct Shibana.WalletData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numDAOelected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botwallet\",\"type\":\"address\"}],\"name\":\"removeBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentAddress\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToAddToLiquidity\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletRestrictionAmount\",\"type\":\"uint256\"}],\"name\":\"setWalletRestrictionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLastDAOcandidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDAOrewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToDevelopment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"viewDAOelected\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewDevelopmentFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTreasuryFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletRestrictionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Shibana", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a64dc614b64b7386960bb5e7fc3e7d848ccb771a199ab49ca91f5fb7d992f9ca"}]}