{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function transfer(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n}\\n\\ncontract Rewards {\\n    IERC20 public immutable reward;\\n    IERC20 public immutable lp;\\n\\n    mapping(address => uint256) public userStaked;\\n    mapping(address => uint256) public userPaid;\\n\\n    uint256 public totalStaked; // Total amount of lp staked\\n    uint256 public accRewardsPerLP; // Accumulated rewards per staked LP\\n    uint256 public emission; // Token being emitted per second\\n    uint256 public lastUpdate; // Last time updatePool() was called\\n\\n    uint256 public totalClaimed;\\n    uint256 public totalEmitted;\\n\\n    address public admin;\\n\\n    constructor(address _lp, address _reward) public {\\n        lp = IERC20(_lp);\\n        reward = IERC20(_reward);\\n        admin = msg.sender;\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        address user = msg.sender;\\n        _claim(user);\\n        lp.transferFrom(user, address(this), amount);\\n        userStaked[user] += amount;\\n        totalStaked += amount;\\n        userPaid[user] = (accRewardsPerLP * userStaked[user]) / 1e18;\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        address user = msg.sender;\\n        _claim(user);\\n        if (userStaked[user] < amount) amount = userStaked[user];\\n        userStaked[user] -= amount;\\n        totalStaked -= amount;\\n        lp.transfer(user, amount);\\n        userPaid[user] = (accRewardsPerLP * userStaked[user]) / 1e18;\\n    }\\n\\n    function claim() external {\\n        _claim(msg.sender);\\n    }\\n\\n    function _claim(address user) private {\\n        updatePool();\\n        uint256 amount = ((userStaked[user] * accRewardsPerLP) / 1e18) -\\n            userPaid[user];\\n        userPaid[user] += amount;\\n        reward.mint(user, amount);\\n        totalClaimed += amount;\\n    }\\n\\n    function updatePool() private {\\n        uint256 time = block.timestamp;\\n        if (totalStaked > 0) {\\n            uint256 totalEmission = emission * (time - lastUpdate);\\n            accRewardsPerLP += (totalEmission * 1e18) / totalStaked;\\n            totalEmitted += totalEmission;\\n        }\\n        lastUpdate = time;\\n    }\\n\\n    function setAdmin(address _admin) external {\\n        require(_admin != address(0), \\\"Zero address\\\");\\n        require(msg.sender == admin, \\\"!Permission\\\");\\n        admin = _admin;\\n    }\\n\\n    function setEmission(uint256 _emission) external {\\n        require(msg.sender == admin, \\\"!Permission\\\");\\n        updatePool();\\n        emission = _emission;\\n    }\\n\\n    function pending(address user) external view returns (uint256) {\\n        if (totalStaked == 0) return 0;\\n        return\\n            ((userStaked[user] *\\n                (accRewardsPerLP +\\n                    ((emission * (block.timestamp - lastUpdate) * 1e18) /\\n                        totalStaked))) / 1e18) - userPaid[user];\\n    }\\n\\n    function totalEmittedAndPending() public view returns (uint256) {\\n        return totalEmitted + emission * (block.timestamp - lastUpdate);\\n    }\\n\\n    function totalUnclaimed() external view returns (uint256) {\\n        return totalEmittedAndPending() - totalClaimed;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accRewardsPerLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emission\",\"type\":\"uint256\"}],\"name\":\"setEmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmittedAndPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rewards", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f06550c34946d251c2eace59ff4336168db7ebf2000000000000000000000000cb9115a4ce9309f4f67791efd7e5bb66607520f3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}