{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\t\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\t\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\t\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\t\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\t\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\t\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract baggie {\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external virtual;\r\n}\r\n\r\nabstract contract triproom {\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\r\n}\r\n\r\ncontract TripstersRetripping is Ownable, ReentrancyGuard {\r\n    bool public mintEnable;\r\n\t\r\n\tbaggie public immutable Baggie = baggie(0x706fbC8b9523121953d0A91022F92660599bDf13);\r\n\ttriproom public immutable TripRoom = triproom(0x1917032C2268E065F612f779F18F57bF9bBA6c2e);\r\n\taddress public immutable DEAD = address(0x000000000000000000000000000000000000dEaD);\r\n\t\r\n    uint256[2][] public upgradeL2;\r\n\tuint256[2][] public upgradeL3;\r\n\t\r\n\tmapping (uint256 => bool) public isUpgradedToL2;\r\n\tmapping (uint256 => bool) public isUpgradedToL3;\r\n\t\r\n\tfunction upgradeNFTToL2(uint256 baggieID, uint256 triproomID) public nonReentrant{\r\n\t\trequire(\r\n\t\t\tmintEnable, \r\n\t\t\t\"TripstersRetripping: Mint is not enable\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!isUpgradedToL2[triproomID], \r\n\t\t\t\"TripstersRetripping: TripRoom NFT already upgraded to L2\"\r\n\t\t);\r\n\t\trequire(\r\n            Baggie.ownerOf(baggieID) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner\"\r\n        );\r\n\t\trequire(\r\n            TripRoom.ownerOf(triproomID) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner\"\r\n        );\r\n\t\t\r\n\t\tisUpgradedToL2[triproomID] = true;\r\n\t\tupgradeL2.push([baggieID,triproomID]);\r\n\t\tBaggie.safeTransferFrom(msg.sender, DEAD, baggieID);\r\n    }\r\n\t\r\n\tfunction upgradeNFTToL3(uint256 baggieID, uint256 triproomID) public nonReentrant{\r\n\t\trequire(\r\n\t\t\tmintEnable, \r\n\t\t\t\"TripstersRetripping: Mint is not enable\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tisUpgradedToL2[triproomID], \r\n\t\t\t\"TripstersRetripping: TripRoom NFT is not upgraded to L2\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!isUpgradedToL3[triproomID], \r\n\t\t\t\"TripstersRetripping: TripRoom NFT already upgraded to L3\"\r\n\t\t);\r\n\t\trequire(\r\n            Baggie.ownerOf(baggieID) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner\"\r\n        );\r\n\t\trequire(\r\n            TripRoom.ownerOf(triproomID) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner\"\r\n        );\r\n\t\t\r\n\t\tisUpgradedToL3[triproomID] = true;\r\n\t\tupgradeL3.push([baggieID,triproomID]);\r\n\t\tBaggie.safeTransferFrom(msg.sender, DEAD, baggieID);\r\n    }\r\n\t\r\n\tfunction upgradeNFTToL2L3(uint256 baggieIDOne, uint256 baggieIDTwo, uint256 triproomID) public nonReentrant{\r\n\t\trequire(\r\n\t\t\tmintEnable, \r\n\t\t\t\"TripstersRetripping: Mint is not enable\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!isUpgradedToL3[triproomID], \r\n\t\t\t\"TripstersRetripping: TripRoom NFT already upgraded to L3\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t!isUpgradedToL2[triproomID], \r\n\t\t\t\"TripstersRetripping: TripRoom NFT already upgraded to L2\"\r\n\t\t);\r\n\t\trequire(\r\n            Baggie.ownerOf(baggieIDOne) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner `baggieIDOne`\"\r\n        );\r\n\t\trequire(\r\n            Baggie.ownerOf(baggieIDTwo) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner `baggieIDTwo`\"\r\n        );\r\n\t\trequire(\r\n            TripRoom.ownerOf(triproomID) == msg.sender,\r\n            \"TripstersRetripping: Incorrect owner `triproomID`\"\r\n        );\r\n\t\t\r\n\t\tisUpgradedToL2[triproomID] = true;\r\n\t\tisUpgradedToL3[triproomID] = true;\r\n\t\t\r\n\t\tupgradeL2.push([baggieIDOne,triproomID]);\r\n\t\tupgradeL3.push([baggieIDTwo,triproomID]);\r\n\t\t\r\n\t\tBaggie.safeTransferFrom(msg.sender, DEAD, baggieIDOne);\r\n\t\tBaggie.safeTransferFrom(msg.sender, DEAD, baggieIDTwo);\r\n    }\r\n\t\r\n\tfunction withdraw() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\t\r\n\tfunction setMintingStatus(bool status) public onlyOwner {\r\n        require(mintEnable != status);\r\n\t\tmintEnable = status;\r\n    }\r\n\t\r\n\tfunction getL2Details(uint256 index) public view returns(uint256[2] memory L2List) {\r\n        return(upgradeL2[index]);\r\n    }\r\n\t\r\n\tfunction getL3Details(uint256 index) public view returns(uint256[2] memory L3List) {\r\n        return(upgradeL3[index]);\r\n    }\r\n\t\r\n\tfunction getL2Supply() public view returns(uint256) {\r\n        return(upgradeL2.length);\r\n    }\r\n\t\r\n\tfunction getL3Supply() public view returns(uint256) {\r\n        return(upgradeL3.length);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Baggie\",\"outputs\":[{\"internalType\":\"contract baggie\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TripRoom\",\"outputs\":[{\"internalType\":\"contract triproom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getL2Details\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"L2List\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL2Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getL3Details\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"L3List\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL3Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUpgradedToL2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUpgradedToL3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMintingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeL2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeL3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baggieID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triproomID\",\"type\":\"uint256\"}],\"name\":\"upgradeNFTToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baggieIDOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baggieIDTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triproomID\",\"type\":\"uint256\"}],\"name\":\"upgradeNFTToL2L3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baggieID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triproomID\",\"type\":\"uint256\"}],\"name\":\"upgradeNFTToL3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TripstersRetripping", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://51f5a7d7bfdabed729f9a393365193b7816aeb5443a0c7cd9efbf532b4b9821f"}]}