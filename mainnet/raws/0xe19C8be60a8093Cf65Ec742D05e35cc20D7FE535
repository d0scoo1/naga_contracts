{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DELO_ETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n/**\\r\\n   $DELO \\r\\n   #DecentraLotto\\r\\n\\r\\n   TG: https://t.me/Decentra_Lotto\\r\\n   Website: https://decentra-lotto.com/\\r\\n\\r\\n */\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\r\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\n\\r\\nabstract contract RandomNumberConsumer is VRFConsumerBase {\\r\\n    \\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n    \\r\\n    uint256 public randomResult;\\r\\n    \\r\\n    //contracts: https://docs.chain.link/docs/vrf-contracts/\\r\\n    //faucets: https://docs.chain.link/docs/link-token-contracts/\\r\\n    constructor(address _vrfCoordinator, address _link, bytes32 _keyHash, uint256 _fee) \\r\\n        VRFConsumerBase(\\r\\n            _vrfCoordinator, // VRF Coordinator\\r\\n            _link  // LINK Token\\r\\n        )\\r\\n    {\\r\\n        keyHash = _keyHash;\\r\\n        fee = _fee; // 0.1 LINK for testnet, 2 LINK for Live (Varies by network)\\r\\n    }\\r\\n    \\r\\n    /** \\r\\n     * Requests randomness \\r\\n     */\\r\\n    function getRandomNumber() internal returns (bytes32 requestId) {\\r\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\r\\n        return requestRandomness(keyHash, fee);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DecentraLottoETH is Context, IERC20, Ownable, RandomNumberConsumer {\\r\\n    using Address for address;\\r\\n\\r\\n    //tracking addresses for lotto entry using mappings\\r\\n    uint256 private numAddresses = 0;\\r\\n    mapping (uint256 => address) private _addressList;\\r\\n    mapping (address => bool) private _AddressExists;\\r\\n    //\\r\\n\\r\\n    //token amounts\\r\\n    mapping (address => uint256) private _rOwned;\\r\\n    mapping (address => uint256) private _tOwned;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    //\\r\\n\\r\\n    //token config\\r\\n    string private _name = \\\"Decentra-Lotto\\\";\\r\\n    string private _symbol = \\\"DELO\\\";\\r\\n    uint8 private _decimals = 9;\\r\\n\\r\\n    uint256 public _taxFee = 1;\\r\\n    uint256 private _previousTaxFee = _taxFee;\\r\\n\\r\\n    uint256 public _jackpotFee = 4;\\r\\n    uint256 private _previousJackpotFee = _jackpotFee;\\r\\n\\r\\n    uint256 public _ecosystemFee = 10;\\r\\n    uint256 private _previousEcosystemFee = _ecosystemFee;\\r\\n\\r\\n    uint256 public _percentOfSwapIsEcosystem = 80;\\r\\n    uint256 public _percentOfSwapIsLotto = 20;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 82000 * 10**6 * 10**9;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n    //\\r\\n\\r\\n    //Contract init and sniper config\\r\\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    mapping (address => bool) private _isSniperOrBlacklisted;\\r\\n    bool private sniperProtection = true;\\r\\n    bool public _hasLiqBeenAdded = false;\\r\\n    uint256 private _liqAddBlock = 0;\\r\\n    uint256 public snipersCaught = 0;\\r\\n    uint256 private snipeBlockAmt = 2;\\r\\n    //\\r\\n\\r\\n    //excludes\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n    mapping (address => bool) private _isExcludedFromMaxTx;\\r\\n    mapping (address => bool) private _isExcludedFromMaxWallet;\\r\\n    mapping (address => bool) private _isExcluded;\\r\\n    mapping (address => bool) private _isLottoExcluded;\\r\\n    mapping (address => bool) private _isGASExcluded;\\r\\n    address[] private _excluded;\\r\\n    //\\r\\n\\r\\n    //payable wallets\\r\\n    address payable private _ecosystemWallet;\\r\\n\\r\\n    //lotto config\\r\\n    uint256 public jackpot = 0;\\r\\n    uint256 public totalWon = 0;\\r\\n    bool public lottoOn = true;\\r\\n\\tuint256 public lottoJackpotAmount;\\r\\n    uint256 public minLottoBalance = 82 * 10**6 * 10**9; //0.1%\\r\\n    mapping(uint256 => Winner) public lottoWinners;\\r\\n    mapping(address => uint256) public walletWinAmount;\\r\\n    uint256 public numWinners = 0;\\r\\n    LotteryState public state;\\r\\n    //\\r\\n\\r\\n    //other config and members\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    bool inSwapAndDistribute;\\r\\n    bool public swapAndDistributeEnabled = false;\\r\\n\\r\\n    uint256 public _maxTxAmount = 410 * 10**6 * 10**9; //0.5%\\r\\n    uint256 public _maxWalletAmount = 1230 * 10**6 * 10**9; //1.5%\\r\\n    uint256 public numTokensSellToDistribute =  82 * 10**6 * 10**9; //0.1%\\r\\n\\r\\n    bytes32 private requestId;\\r\\n    //\\r\\n\\r\\n    //events\\r\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\r\\n    event SwapAndDistributeEnabledUpdated(bool enabled);\\r\\n    event LottoEnabledUpdated(bool enabled);\\r\\n    event SwapAndDistribute(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 jackpotETHAmount,\\r\\n        uint256 ecosystemETHAmount\\r\\n    );\\r\\n    event SniperCaught(address sniperAddress);\\r\\n    event LotteryStateChanged(LotteryState newState);\\r\\n    event GetRandom(bytes32 requestId);\\r\\n    event GotRandom(uint256 randomNumber);\\r\\n    event WinnerPaid(address indexed user, uint256 amount);\\r\\n    //\\r\\n\\r\\n    //enums\\r\\n    enum LotteryState{\\r\\n        Open,\\r\\n        GettingRandom,\\r\\n        GotRandom\\r\\n    }\\r\\n    //\\r\\n\\r\\n    //structs\\r\\n    struct Winner {\\r\\n        address winner;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    //\\r\\n\\r\\n    //modifiers\\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndDistribute = true;\\r\\n        _;\\r\\n        inSwapAndDistribute = false;\\r\\n    }\\r\\n    //\\r\\n\\r\\n    constructor (address router, address ecosystemWallet, uint256 lottoJackpotAmount_IN) \\r\\n        RandomNumberConsumer(\\r\\n            0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, //vrfCoordinator ETH mainnet\\r\\n            0x514910771AF9Ca656af840dff83E8264EcF986CA, // link address ETH mainnet\\r\\n            0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445, //key hash ETH mainnet\\r\\n            2 * 10 ** 18 //fee ETH mainnet\\r\\n        ) {\\r\\n        _rOwned[owner()] = _rTotal;\\r\\n\\r\\n        lottoJackpotAmount = lottoJackpotAmount_IN;\\r\\n    \\r\\n\\t\\taddAddress(owner());\\r\\n        _ecosystemWallet = payable(ecosystemWallet);\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\\r\\n         // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        //exclude owner, ecosystem and this contract from fee\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[_ecosystemWallet] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        _isExcludedFromMaxTx[owner()] = true;\\r\\n        _isExcludedFromMaxTx[_ecosystemWallet] = true;\\r\\n        _isExcludedFromMaxTx[address(this)] = true;\\r\\n\\r\\n        _isExcludedFromMaxWallet[owner()] = true;\\r\\n        _isExcludedFromMaxWallet[_ecosystemWallet] = true;\\r\\n        _isExcludedFromMaxWallet[address(this)] = true;\\r\\n        _isExcludedFromMaxWallet[DEAD] = true;\\r\\n\\r\\n        _isLottoExcluded[owner()] = true;\\r\\n        _isLottoExcluded[_ecosystemWallet] = true;\\r\\n        _isLottoExcluded[address(this)] = true;\\r\\n        _isLottoExcluded[uniswapV2Pair] = true;\\r\\n        _isLottoExcluded[router] = true;\\r\\n\\r\\n        _isGASExcluded[owner()] = true;\\r\\n        _isGASExcluded[_ecosystemWallet] = true;\\r\\n\\r\\n        emit Transfer(address(0), owner(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]-(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]-(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _rTotal = _rTotal-(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal+(tAmount);\\r\\n    }\\r\\n\\r\\n    function excludeFromLottoRewards(address addy) public onlyOwner {\\r\\n        require(_isLottoExcluded[addy] == false, \\\"User already excluded from lotto rewards\\\");\\r\\n        _isLottoExcluded[addy] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxWallet(address addy) public onlyOwner {\\r\\n        _isExcludedFromMaxWallet[addy] = true;\\r\\n    }\\r\\n\\r\\n    function includeInMaxWallet(address addy) public onlyOwner {\\r\\n        _isExcludedFromMaxWallet[addy] = true;\\r\\n    }\\r\\n\\r\\n    function includeInLottoRewards(address addy) public onlyOwner {\\r\\n        require(_isLottoExcluded[addy] == true, \\\"User already included in lotto rewards\\\");\\r\\n        _isLottoExcluded[addy] = false;\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        uint256 currentRate =  _getRate();\\r\\n        return rAmount/(currentRate);\\r\\n    }\\r\\n\\r\\n    function setEcosystemAddress(address ecosystem) external onlyOwner {\\r\\n        _ecosystemWallet = payable(ecosystem);\\r\\n    }\\r\\n\\r\\n    function setlottoJackpotAmount(uint256 minBalance) public onlyOwner() {\\r\\n        lottoJackpotAmount = minBalance;\\r\\n    }\\r\\n\\r\\n    function setMinLottoBalance(uint256 minBalance) public onlyOwner() {\\r\\n        minLottoBalance = minBalance;\\r\\n    }\\r\\n\\r\\n    function setRouterAddress(address newRouter) external onlyOwner() {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        _isLottoExcluded[uniswapV2Pair] = true;\\r\\n        _isLottoExcluded[newRouter] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner() {\\r\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if(_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner() {\\r\\n        require(_isExcluded[account], \\\"Account is already included\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeEcosystem(tLiquidity);\\r\\n        _takeLotto(tLotto);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function addBridge(address bridge) external onlyOwner {\\r\\n        _isExcludedFromFee[bridge] = true;\\r\\n        _isExcludedFromMaxTx[bridge] = true;\\r\\n        _isExcludedFromMaxWallet[bridge] = true;\\r\\n        _isLottoExcluded[bridge] = true;\\r\\n        _isGASExcluded[bridge] = true;\\r\\n    }\\r\\n\\r\\n    function removeBridge(address bridge) external onlyOwner {\\r\\n        _isExcludedFromFee[bridge] = false;\\r\\n        _isExcludedFromMaxTx[bridge] = false;\\r\\n        _isExcludedFromMaxWallet[bridge] = false;\\r\\n        _isLottoExcluded[bridge] = false;\\r\\n        _isGASExcluded[bridge] = false;\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromGAS(address addy) external onlyOwner {\\r\\n        _isGASExcluded[addy] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTx(address account) public onlyOwner {\\r\\n        _isExcludedFromMaxTx[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInMaxTx(address account) public onlyOwner {\\r\\n        _isExcludedFromMaxTx[account] = false;\\r\\n    }\\r\\n\\r\\n    function includeInGAS(address addy) external onlyOwner {\\r\\n        _isGASExcluded[addy] = false;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function setReflectionTaxPercent(uint256 taxFee) external onlyOwner() {\\r\\n        _taxFee = taxFee;\\r\\n    }\\r\\n\\r\\n    function setLottoTaxPercent(uint256 lottoFee) external onlyOwner() {\\r\\n        _jackpotFee = lottoFee;\\r\\n    }\\r\\n\\r\\n    function setPercentOfSwapIsEcosystem(uint256 percentOfSwapIsEcosystem) external onlyOwner() {\\r\\n        _percentOfSwapIsEcosystem = percentOfSwapIsEcosystem;\\r\\n    }\\r\\n\\r\\n    function setEcosystemFee(uint256 ecosystemFee) external onlyOwner() {\\r\\n        _ecosystemFee = ecosystemFee;\\r\\n    }\\r\\n\\r\\n    function setLottoFeePercent(uint256 percentOfSwapIsLotto) external onlyOwner() {\\r\\n        _percentOfSwapIsLotto = percentOfSwapIsLotto;\\r\\n    }\\r\\n\\r\\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\\r\\n        _maxTxAmount = maxTxAmount*10**_decimals;\\r\\n    }\\r\\n\\r\\n    function setSwapAndDistributeEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndDistributeEnabled = _enabled;\\r\\n        emit SwapAndDistributeEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    function setLottoEnabled(bool _lottoOn) public onlyOwner {\\r\\n        lottoOn = _lottoOn;\\r\\n        emit LottoEnabledUpdated(_lottoOn);\\r\\n    }\\r\\n\\r\\n    function multiSender(address[] calldata _addresses, uint256[] calldata _values) external returns (bool) {\\r\\n        require(_addresses.length == _values.length, \\\"Address array and values array must be same length\\\");\\r\\n\\r\\n        for (uint i = 0; i < _addresses.length; i++) {\\r\\n            require(_addresses[i] != address(0), \\\"Address invalid\\\");\\r\\n            require(_values[i] > 0, \\\"Value invalid\\\");\\r\\n            IERC20(address(this)).transferFrom(msg.sender, _addresses[i], _values[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //withdraw dust leftover from swaps\\r\\n    function withdrawETH(uint256 amount) external onlyOwner {\\r\\n        require(amount <= address(this).balance - jackpot, \\\"Cannot withdraw jackpot\\\");\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n    //withdraw token link or trapped tokens\\r\\n    function withdrawToken(address _address, uint256 amount) external onlyOwner {\\r\\n        IERC20 token = IERC20(_address);\\r\\n        token.transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function getStats() external view returns(uint256, uint256, uint256, LotteryState, uint256) {\\r\\n        return(lottoJackpotAmount, jackpot, numWinners, state, totalWon);\\r\\n    }\\r\\n\\r\\n     //to recieve ETH from uniswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal-(rFee);\\r\\n        _tFeeTotal = _tFeeTotal+(tFee);\\r\\n    }\\r\\n\\r\\n    struct TData {\\r\\n        uint256 tAmount;\\r\\n        uint256 tFee;\\r\\n        uint256 tLiquidity;\\r\\n        uint256 tLotto;\\r\\n        uint256 currentRate;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n        (uint256 tTransferAmount, TData memory data) = _getTValues(tAmount);\\r\\n        data.tAmount = tAmount;\\r\\n        data.currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(data);\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, data.tFee, data.tLiquidity, data.tLotto);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount) private view returns (uint256, TData memory) {\\r\\n        uint256 tFee = calculateTaxFee(tAmount);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n\\r\\n        uint256 tLotto = calculateLottoFee(tAmount);\\r\\n\\r\\n        uint256 tTransferAmount = tAmount-(tFee)-(tLiquidity)-(tLotto);\\r\\n        return (tTransferAmount, TData(0, tFee, tLiquidity, tLotto, 0));\\r\\n    }\\r\\n\\r\\n    function _getRValues( TData memory _data) private pure returns (uint256, uint256, uint256) {\\r\\n        uint256 rAmount = _data.tAmount*(_data.currentRate);\\r\\n        uint256 rFee = _data.tFee*(_data.currentRate);\\r\\n        uint256 rLiquidity = _data.tLiquidity*(_data.currentRate);\\r\\n        uint256 rLotto = _data.tLotto*(_data.currentRate);\\r\\n        uint256 rTransferAmount = rAmount-(rFee)-(rLiquidity)-(rLotto);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply/(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply-(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply-(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal/(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _takeEcosystem(uint256 tLiquidity) private {\\r\\n        uint256 currentRate =  _getRate();\\r\\n        uint256 rLiquidity = tLiquidity*currentRate;\\r\\n        _rOwned[address(this)] = _rOwned[address(this)]+rLiquidity;\\r\\n        if(_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)]+tLiquidity;\\r\\n    }\\r\\n\\r\\n\\tfunction addAddress(address adr) private {\\r\\n        if(!_AddressExists[adr]){\\r\\n            _AddressExists[adr] = true;\\r\\n            _addressList[numAddresses] = adr;\\r\\n            numAddresses++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _takeLotto(uint256 tLotto) private {\\r\\n        uint256 currentRate =  _getRate();\\r\\n        uint256 rLotto = tLotto*currentRate;\\r\\n        _rOwned[address(this)] = _rOwned[address(this)]+rLotto;\\r\\n        if(_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)]+tLotto;\\r\\n    }\\r\\n\\r\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount*(_taxFee)/(\\r\\n            10**2\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateLottoFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount*(_jackpotFee)/(\\r\\n            10**2\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount*(_ecosystemFee)/(\\r\\n            10**2\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        if(_taxFee == 0 && _ecosystemFee == 0 && _jackpotFee == 0) return;\\r\\n\\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousJackpotFee = _jackpotFee;\\r\\n        _previousEcosystemFee = _ecosystemFee;\\r\\n\\r\\n        _taxFee = 0;\\r\\n        _jackpotFee = 0;\\r\\n        _ecosystemFee = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _jackpotFee = _previousJackpotFee;\\r\\n        _ecosystemFee = _previousEcosystemFee;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function isExcludedFromMaxTx(address account) public view returns(bool) {\\r\\n        return _isExcludedFromMaxTx[account];\\r\\n    }\\r\\n\\r\\n    function setNumTokensSellToDistribute(uint256 _numTokensSellToDistribute) public onlyOwner{\\r\\n        numTokensSellToDistribute = _numTokensSellToDistribute*10**_decimals;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        if(from != owner() && to != owner() && !_isExcludedFromMaxTx[from] && !_isExcludedFromMaxTx[to])\\r\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n\\r\\n        if(from != owner() && to != owner() && !_isExcludedFromMaxWallet[to] && from == uniswapV2Pair)\\r\\n            require(balanceOf(to)+(amount) <= _maxWalletAmount, \\\"Transfer amount makes wallet hold more than max.\\\");\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        if(contractTokenBalance >= _maxTxAmount)\\r\\n        {\\r\\n            contractTokenBalance = _maxTxAmount;\\r\\n        }\\r\\n\\r\\n        if(_isGASExcluded[from] == false && _isGASExcluded[to] == false){\\r\\n            bool overMinTokenBalance = contractTokenBalance >= numTokensSellToDistribute;\\r\\n            if (\\r\\n                overMinTokenBalance &&\\r\\n                !inSwapAndDistribute &&\\r\\n                from != uniswapV2Pair &&\\r\\n                swapAndDistributeEnabled\\r\\n            ) {\\r\\n                contractTokenBalance = numTokensSellToDistribute;\\r\\n                //swa and distribute tokens\\r\\n                swapAndDistribute(contractTokenBalance);\\r\\n            }else{\\r\\n                //check if random got to draw winner here so as not to do too much in one transaction avoiding of gas exceptions\\r\\n                if (state == LotteryState.GotRandom && lottoOn){\\r\\n                    drawWinner();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            //check jackpot threshold and lotto state here to get random\\r\\n            if (\\r\\n                address(this).balance >= jackpot &&\\r\\n                jackpot >= lottoJackpotAmount && \\r\\n                state == LotteryState.Open && \\r\\n                LINK.balanceOf(address(this)) >= fee && \\r\\n                lottoOn\\r\\n            ) {\\r\\n                _changeState(LotteryState.GettingRandom);\\r\\n                requestId = getRandomNumber();\\r\\n                emit GetRandom(requestId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //indicates if fee should be deducted from transfer\\r\\n        bool takeFee = true;\\r\\n\\r\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n\\t\\taddAddress(from);\\r\\n\\t\\taddAddress(to);\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from,to,amount,takeFee);\\r\\n    }\\r\\n\\r\\n    function getRandomAddress(uint32 seed) private view returns(address) {\\r\\n        return _addressList[(uint256(keccak256(abi.encode(randomResult, seed))) % numAddresses)];\\r\\n    }\\r\\n\\r\\n    function drawWinner() private {\\r\\n        _changeState(LotteryState.Open);\\r\\n        //seed for abi encoding random number\\r\\n        uint32 seed = 1;\\r\\n        address payable randomAddress = payable(getRandomAddress(seed));\\r\\n\\r\\n        //get more random addresses until an address qualifies to win\\r\\n        while (balanceOf(randomAddress) < minLottoBalance || _isLottoExcluded[randomAddress]){\\r\\n            seed++;\\r\\n            randomAddress = payable(getRandomAddress(seed));\\r\\n            if(seed > 40){\\r\\n                //cap it at 40 iterations so we don't get infinite loop or out of gas exception\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        randomAddress.transfer(jackpot);\\r\\n        numWinners++;\\r\\n        lottoWinners[numWinners] = Winner(randomAddress, jackpot);\\r\\n        walletWinAmount[randomAddress] += jackpot;\\r\\n        totalWon += jackpot;\\r\\n        emit WinnerPaid(randomAddress, jackpot);\\r\\n\\r\\n        jackpot = 0;\\r\\n    }\\r\\n\\r\\n    function swapAndDistribute(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        //SWAP TO ETH\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n        swapTokensForEth(contractTokenBalance);\\r\\n        //amount of ETH swapped into\\r\\n        uint256 deltaBalance = address(this).balance - initialBalance;\\r\\n\\r\\n        //get the percentage split for Ecosystem, and Lotto\\r\\n        uint256 ecosystemETHAmount = (deltaBalance*_percentOfSwapIsEcosystem)/100;\\r\\n        uint256 jackpotETHAmount = (deltaBalance*_percentOfSwapIsLotto)/100;\\r\\n\\r\\n        //increment jackpot amount\\r\\n        jackpot += jackpotETHAmount;\\r\\n\\r\\n        //send ETH to ecosystem\\r\\n        _ecosystemWallet.transfer(ecosystemETHAmount);\\r\\n\\r\\n        emit SwapAndDistribute(contractTokenBalance, jackpotETHAmount, ecosystemETHAmount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkLiquidityAdd(address from, address to) private {\\r\\n        require(!_hasLiqBeenAdded, \\\"Liquidity already added and marked.\\\");\\r\\n        if (!_hasLimits(from, to) && to == uniswapV2Pair) {\\r\\n            _liqAddBlock = block.number;\\r\\n            _hasLiqBeenAdded = true;\\r\\n\\r\\n            swapAndDistributeEnabled = true;\\r\\n            emit SwapAndDistributeEnabledUpdated(true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hasLimits(address from, address to) private view returns (bool) {\\r\\n        return from != owner()\\r\\n            && to != owner()\\r\\n            && to != DEAD\\r\\n            && to != address(0)\\r\\n            && from != address(this);\\r\\n    }\\r\\n\\r\\n    function excludeSniper(address sniper) public onlyOwner{\\r\\n        require(_isSniperOrBlacklisted[sniper], \\\"Address not considered a sniper.\\\");\\r\\n        _isSniperOrBlacklisted[sniper] = false;\\r\\n        snipersCaught --;\\r\\n    }\\r\\n\\r\\n    function includeSniper(address sniper) public onlyOwner{\\r\\n        require(!_isSniperOrBlacklisted[sniper], \\\"Address already considered a sniper.\\\");\\r\\n        _isSniperOrBlacklisted[sniper] = true;\\r\\n        snipersCaught ++;\\r\\n    }\\r\\n\\r\\n    function setSniperProtection(bool _sniperProtection) public onlyOwner{\\r\\n        sniperProtection = _sniperProtection;\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true and checking/banning bots\\r\\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\r\\n        if (sniperProtection){\\r\\n            if (_isSniperOrBlacklisted[sender] || _isSniperOrBlacklisted[recipient]) {\\r\\n                revert(\\\"Sniper rejected.\\\");\\r\\n            }\\r\\n            if (!_hasLiqBeenAdded) {\\r\\n                _checkLiquidityAdd(sender, recipient);\\r\\n                if (!_hasLiqBeenAdded && _hasLimits(sender, recipient)) {\\r\\n                    revert(\\\"Only owner can transfer at this time.\\\");\\r\\n                }\\r\\n            } else {\\r\\n                if (_liqAddBlock > 0\\r\\n                    && sender == uniswapV2Pair\\r\\n                    && _hasLimits(sender, recipient)\\r\\n                ) {\\r\\n                    if (block.number - _liqAddBlock < snipeBlockAmt) {\\r\\n                        _isSniperOrBlacklisted[recipient] = true;\\r\\n                        snipersCaught ++;\\r\\n                        emit SniperCaught(recipient);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(!takeFee)\\r\\n            removeAllFee();\\r\\n\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if(!takeFee)\\r\\n            restoreAllFee();\\r\\n    }\\r\\n\\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeEcosystem(tLiquidity);\\r\\n\\r\\n        _takeLotto(tLotto);\\r\\n\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeEcosystem(tLiquidity);\\r\\n        _takeLotto(tLotto);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tLotto) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\r\\n        _takeEcosystem(tLiquidity);\\r\\n        _takeLotto(tLotto);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Callback function used by VRF Coordinator\\r\\n    */\\r\\n    function fulfillRandomness(bytes32 _requestId, uint256 randomness) internal override {\\r\\n        require (requestId == _requestId, \\\"requestId doesn't match\\\");\\r\\n        \\r\\n        randomResult = randomness;\\r\\n        \\r\\n        _changeState(LotteryState.GotRandom);\\r\\n        \\r\\n        emit GotRandom(randomResult);\\r\\n    }\\r\\n\\r\\n    function _changeState(LotteryState _newState) private {\\r\\n        state = _newState;\\r\\n        emit LotteryStateChanged(state);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ecosystemWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lottoJackpotAmount_IN\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"GetRandom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"GotRandom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DecentraLottoETH.LotteryState\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"LotteryStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LottoEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotETHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ecosystemETHAmount\",\"type\":\"uint256\"}],\"name\":\"SwapAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndDistributeEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ecosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_jackpotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentOfSwapIsEcosystem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentOfSwapIsLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"addBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"excludeFromGAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"excludeFromLottoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"excludeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum DecentraLottoETH.LotteryState\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"includeInGAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"includeInLottoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"includeInMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"includeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoJackpotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lottoWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLottoBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"removeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecosystem\",\"type\":\"address\"}],\"name\":\"setEcosystemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ecosystemFee\",\"type\":\"uint256\"}],\"name\":\"setEcosystemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lottoOn\",\"type\":\"bool\"}],\"name\":\"setLottoEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentOfSwapIsLotto\",\"type\":\"uint256\"}],\"name\":\"setLottoFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lottoFee\",\"type\":\"uint256\"}],\"name\":\"setLottoTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinLottoBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToDistribute\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentOfSwapIsEcosystem\",\"type\":\"uint256\"}],\"name\":\"setPercentOfSwapIsEcosystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setReflectionTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_sniperProtection\",\"type\":\"bool\"}],\"name\":\"setSniperProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndDistributeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"}],\"name\":\"setlottoJackpotAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum DecentraLottoETH.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndDistributeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletWinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DecentraLottoETH", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000dcf5c8273b57d0d227724dd2ac9a0ce010412d0f00000000000000000000000000000000000000000000000006f05b59d3b20000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}