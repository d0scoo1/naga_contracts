{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"ICEBERG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./TokenReceiver.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n// 77777!!!!!!!!!!!!!!!!!!!!!!~~^^^^^~!!!!!!~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^:::^^^~~~~\\r\\n// ~!!!!!!!!~!!~!!!!!!!!!!~~~~~~~~~~~~~~!!!!!!!!~~~~~~!!!!!!!!!!~~!!!!!!!!!!!~~!!~~~~~~~~!~~^^:::^^:::^\\r\\n// !!!!~~~~~~^^^^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!?7!?~~~~~~~~~~~^::^^^^^~~~~~~~~~~~~~^^^:::\\r\\n// !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^~?^J5Y7!~~~~~~^^^^^^^^^^^~~~~~~~~!!~~~^^^^^\\r\\n// !!!!!!!!!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!~^~~^~^~~~???JY?~^~~~~~~~~~^~^^^^^^^^~~~~~~~~~~~~~\\r\\n// !!!!!!!!!~!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~J~:~7^~~~!7???J?JY7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n// ~!!~~!~!~~~~~!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^~?~^?!^^~::^~^~?YYY7!J?777!!!~!~~!~~!!!!~~!!!!!!!!!!!!!\\r\\n// ??JJJYYYY5YJJ?JJJJJ???7????????JJJJJJJJJJ?7!!????77??77???7?JYYJ??J???JJJJJJYJJJJJJJJJJJJJJJJYJJJJYY\\r\\n// JJJJJJJ???77?77????????JJYYJJ???JY555YYJJJ?77!!!!7???7??77777!777?JJJJY5YY55YYJYJ??JJJYYYYPP5YYYYYYY\\r\\n// 77!!!!!!!~~~~~~~~~~~~!!!!!!!~~~~~~~~~^^^~77!~~!~^!!!!!7!7???????????JJJYJJJYJ!!!!!!!777???JJ?JJJJJJJ\\r\\n// 77777!!!!!!!!!!!!!!!!!!!!~~~~~~~~~~~~~~~!??!!7?J?77~!7J?JJYY55JJJJJJJJYP5555J!7777!!7777???JJJJJYYYY\\r\\n// 77777777!!!!!!!!!!!!!!!!!!!!!!!!~~~~~~~~!J?!7YYYY?7~!!YYY555PP555YYYYPPPGGGGJ77777777777??JJJJJYYYYY\\r\\n// ??7777777777777777!!!!!!!!!!!!!!!!!!!!~~~7?77YYYY??!!7YJYPPPGGGPPPPPPGGBBBBBJ77???????????JJJYYYYYY5\\r\\n// ????77777777777777777777!!!!!!!!!!!!!!!!!~??!?5P5?J7~7JJYPPGGGGGGBBBGGBBBBBGY????????JJJJJJJYYYY5555\\r\\n// ???????????7777777777777777777777!!!!!!!!7?JJJPP5JJ?!77JJ5GGGGGGBBBBBBBBBBGGJ?JJJJJJJJJJJJYYYY55555P\\r\\n// J??????????????777777777777777777777777777??JY555PJJ77!JP?5GGGGBBBBBBBBBBG5GJJJJJJJJJJYYYYYYY5555PPP\\r\\n// JJJJJJ?????????????????777777777777777777777Y5555G5??7!?PY?YPPGBBBBBBBBBBPJJJJJJJJYYYYYYYY5555555PPP\\r\\n// JJJJJJJJJJJ?????????????????????7777777777??JJ??J5PJ77?JJ?JPGGGBBBBBBBBBGYJJJJYYYYYYYYY555555555PPPP\\r\\n// YYJJJJJJJJJJJJJJ??????????????????????????????!7JJ5YJJ?YYY5YGBGBBBBBBBBB5JYYYYYYYYYYY5555555PPPPPPPP\\r\\n// YYYYYYJJJJJJJJJJJJJJJJJ???????????????????????!J??55J5J??Y?PBBBBBBB#BBBPYYYYYYYYY555555555PPPPPPPPPG\\r\\n// YYYYYYYYYYYJJJJJJJJJJJJJJJJJJJJJJJJJJJJ?JJJJJJ7??75PYJY5?7?JGGGPBB#BBBGYYYYYYYY555555555PPPPPPPPPGGG\\r\\n// 555YYYYYYYYYYYYYYYJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ??7YG5JPPPJJY?5PPPPGBBB5YY555555555555PPPPPPPPPGGGGGG\\r\\n// 55555555YYYYYYYYYYYYYYYYYYYYJJJJJJJJJJJJJJJJJJYY??YPGY5YGP55555P5PGGGG55555555555PPPPPPPPPPPPGGGGGGG\\r\\n// 5555555555555YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJ?55GPY5GGGPGPPP555GG555555555PPPPPPPPPPPPPGGGGGGGGG\\r\\n// PP555555555555555555555YYYYYYYYYYYYYYYYYYYYYYYYYYJ??55P5G#BBBBBBGP55555555PPPPPPPPPPPPPGGGGGGGGGGGGB\\r\\n// PPPPPPP555555555555555555555555555YYY5555555555555J7JYPPP#####BP555555PPPPPPPPPPPPPPGGGGGGGGGGGGGGBB\\r\\n// PPPPPPPPPPPP5555555555555555555555555555555555555555?55JG#####B5PPPPPPPPPPPPPPPPPGGGGGGGGGGGGGGGGBBB\\r\\n\\r\\n// @author jolan.eth\\r\\ncontract ICEBERG is Owned {\\r\\n    string public symbol = \\\"ICEBERG\\\";\\r\\n    string public name = \\\"ICEBERG\\\";\\r\\n\\r\\n    string CID = \\\"QmSKzYaijnL6Y7SM15ErJ1spMDrS8fTD5i7w9yXWF3njWg\\\";\\r\\n    mapping (uint256 =\\u003e string) EMERGED;\\r\\n    mapping (uint256 =\\u003e string) IMMERSED;\\r\\n    mapping (uint256 =\\u003e string) TOKEN;\\r\\n\\r\\n    uint256 public tokenId = 0;\\r\\n\\r\\n    mapping (uint256 =\\u003e address) owners;\\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n    \\r\\n    mapping(uint256 =\\u003e address) approvals;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) operatorApprovals;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    constructor() {}\\r\\n    \\r\\n    function mintICEBERG(string memory _CID, string memory _EMERGED, string memory _IMMERSED)\\r\\n    public onlyOwner {\\r\\n        TOKEN[tokenId] = _CID;\\r\\n        EMERGED[tokenId] = _EMERGED;\\r\\n        IMMERSED[tokenId] = _IMMERSED;\\r\\n        _mint(msg.sender, tokenId++);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n    public pure returns (bool) {\\r\\n        return interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\r\\n    }\\r\\n\\r\\n    function totalSupply()\\r\\n    public view returns (uint256) {\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner)\\r\\n    public view returns (uint256) {\\r\\n        require(address(0) != owner, \\\"error address(0)\\\");\\r\\n        return balances[owner];\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 id)\\r\\n    public view returns (address) {\\r\\n        require(owners[id] != address(0), \\\"error !exist\\\");\\r\\n        return owners[id];\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 id)\\r\\n    public view returns (string memory) {\\r\\n        require(owners[id] != address(0), \\\"error !exist\\\");\\r\\n        return string(abi.encodePacked(\\r\\n            \\u0027data:application/json;base64,\\u0027,\\r\\n            encode(bytes (string(abi.encodePacked(\\r\\n                \\\"{\\\",\\r\\n                    \\u0027\\\"name\\\":\\\"ICEBERG - \\u0027,EMERGED[id],\\u0027\\\",\\u0027,\\r\\n                    \\u0027\\\"image\\\":\\\"ipfs://\\u0027,CID,\\u0027\\\",\\u0027,\\r\\n                    \\u0027\\\"attributes\\\":[\\u0027,\\r\\n                        \\u0027{\\\"trait_type\\\":\\\"EMERGED\\\",\\\"value\\\":\\\"\\u0027,EMERGED[id],\\u0027\\\"},\\u0027,\\r\\n                        \\u0027{\\\"trait_type\\\":\\\"IMMERSED\\\",\\\"value\\\":\\\"\\u0027,IMMERSED[id],\\u0027\\\"}\\u0027,\\r\\n                    \\u0027],\\u0027\\r\\n                    \\u0027\\\"animation_url\\\":\\\"ipfs://\\u0027,TOKEN[id],\\u0027\\\"\\u0027,\\r\\n                \\\"}\\\"\\r\\n            ))))\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 id)\\r\\n    public {\\r\\n        address owner = owners[id];\\r\\n        require(to != owner, \\\"error to\\\");\\r\\n        require(\\r\\n            owner == msg.sender ||\\r\\n            operatorApprovals[owner][msg.sender],\\r\\n            \\\"error owner\\\"\\r\\n        );\\r\\n        approvals[id] = to;\\r\\n        emit Approval(owner, to, id);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint256 id)\\r\\n    public view returns (address) {\\r\\n        require(owners[id] != address(0), \\\"error !exist\\\");\\r\\n        return approvals[id];\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n    public {\\r\\n        require(operator != msg.sender, \\\"error operator\\\");\\r\\n        operatorApprovals[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n    public view returns (bool) {\\r\\n        return operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id)\\r\\n    public {\\r\\n        require(owners[id] != address(0), \\\"error !exist\\\");\\r\\n        address owner = owners[id];\\r\\n        require(\\r\\n            msg.sender == owner ||\\r\\n            msg.sender == approvals[id] ||\\r\\n            operatorApprovals[owner][msg.sender], \\r\\n            \\\"error msg.sender\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(owner, from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data)\\r\\n    public {\\r\\n        address owner = owners[id];\\r\\n        require(\\r\\n            msg.sender == owner ||\\r\\n            msg.sender == approvals[id] ||\\r\\n            operatorApprovals[owner][msg.sender], \\r\\n            \\\"error msg.sender\\\"\\r\\n        );\\r\\n        _transfer(owner, from, to, id);\\r\\n        require(_checkOnERC721Received(from, to, id, data), \\\"error ERC721Receiver\\\");\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 id)\\r\\n    private {\\r\\n        require(to != address(0), \\\"error to\\\");\\r\\n        require(owners[id] == address(0), \\\"error owners[id]\\\");\\r\\n        balances[to]++;\\r\\n        owners[id] = to;\\r\\n        \\r\\n        emit Transfer(address(0), to, id);\\r\\n        require(_checkOnERC721Received(address(0), to, id, \\\"\\\"), \\\"error ERC721Receiver\\\");\\r\\n    }\\r\\n\\r\\n    function _transfer(address owner, address from, address to, uint256 id)\\r\\n    private {\\r\\n        require(owner == from, \\\"errors owners[id]\\\");\\r\\n        require(address(0) != to, \\\"errors address(0)\\\");\\r\\n\\r\\n        approve(address(0), id);\\r\\n        balances[from]--;\\r\\n        balances[to]++;\\r\\n        owners[id] = to;\\r\\n        \\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory _data)\\r\\n    internal returns (bool) {\\r\\n        uint256 size;\\r\\n\\r\\n        assembly {\\r\\n            size := extcodesize(to)\\r\\n        }\\r\\n\\r\\n        if (size \\u003e 0)\\r\\n            try ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, _data) returns (bytes4 retval) {\\r\\n                return retval == ERC721TokenReceiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) revert(\\\"error ERC721Receiver\\\");\\r\\n                else assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n            }\\r\\n        else return true;\\r\\n    }\\r\\n    \\r\\n    function _toString(uint256 value) private pure returns (string memory) {\\r\\n        if (value == 0) return \\\"0\\\";\\r\\n\\r\\n        uint256 digits;\\r\\n        uint256 tmp = value;\\r\\n\\r\\n        while (tmp != 0) {\\r\\n            digits++;\\r\\n            tmp /= 10;\\r\\n        }\\r\\n\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\nabstract contract Owned {\\r\\n    address private _owner;\\r\\n    \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"error owner()\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() { _transferOwnership(msg.sender); }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"error newOwner\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface ERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_EMERGED\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IMMERSED\",\"type\":\"string\"}],\"name\":\"mintICEBERG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ICEBERG", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38ac5f6d71532a61d45b44077a363d64e2ab8ce1fcf7a0996df4e374816303cd"}]}