{"status": "1", "message": "OK", "result": [{"SourceCode": "/// SPDX-License-Identifier: MIT License\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface c_fang {\r\n        function setFarmer(address addy) external; \r\n        function mint_rewards(uint qty, address receiver) external; \r\n}\r\n\r\ninterface c_earn {\r\n    function get_reward_on_pool(address actor, uint96 pool, bool yearly)\r\n        external\r\n        view\r\n        returns (uint reward);\r\n\r\n    function get_single_pool(address actor, uint96 pool)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 quantity,\r\n            uint256 unlock_block,\r\n            uint256 start_block);\r\n\r\n    function get_stake_pool(address stakeholder, uint96 pool) external view returns (bool status,\r\n                                                                     address[2] memory tokens,\r\n                                                                     uint[6] memory stats);\r\n        /*\r\n            staker[stakeholder].stake[pool].active,\r\n            [staker[stakeholder].stake[pool].token_staked,\r\n            staker[stakeholder].stake[pool].token_reward],\r\n            [staker[stakeholder].stake[pool].quantity,\r\n            staker[stakeholder].stake[pool].start_time,\r\n            staker[stakeholder].stake[pool].total_earned,\r\n            staker[stakeholder].stake[pool].total_withdraw,\r\n            staker[stakeholder].stake[pool].unlock_time,\r\n            staker[stakeholder].stake[pool].time_period]\r\n        */\r\n\r\n\r\n    function ADMIN_control_pool(address addy, uint96 id,\r\n                            bool active, address token_staked, address token_reward,\r\n                            uint quantity, uint start_time, uint last_retrieved, uint total_earned,\r\n                            uint total_withdraw, uint unlock_time, uint time_period)  external;\r\n        \r\n}\r\n\r\n\r\ncontract fang_helper {\r\n\r\n    address kaiba=0xF2210f65235c2FB391aB8650520237E6378e5C5A;\r\n    address fang=0x988FC5E37281F6c165886Db96B3FdD2f61E6Bb3F;\r\n    address earn=0x783C8935F77C97FA0fB67664A4695BeA3fe6162c;\r\n\r\n    address owner;\r\n    mapping(address => bool) is_auth;\r\n    \r\n    modifier only_auth () {\r\n        require(msg.sender == owner || is_auth[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function set_auth(address addy, bool booly) public only_auth {\r\n        is_auth[addy] = booly;\r\n    }\r\n\r\n    bool locked;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external {}\r\n\r\n    function get_unlocked_pool(address addy, uint96 pool_id) public {\r\n        require(!locked, \"reentrant\");\r\n        locked = true;\r\n\r\n        c_fang local_fang = c_fang(fang);\r\n        c_earn local_earn = c_earn(earn);\r\n        \r\n        uint rewarded = local_earn.get_reward_on_pool(addy, pool_id, false);\r\n        require(rewarded > 1000000000000000, \"Useless quantity\");\r\n\r\n        local_fang.setFarmer(address(this));\r\n        local_fang.mint_rewards(rewarded, addy);\r\n\r\n        bool status;\r\n        address[2] memory token;\r\n        uint[6] memory stats;\r\n\r\n        (status, token, stats) = local_earn.get_stake_pool(addy, pool_id);\r\n        local_earn.ADMIN_control_pool(addy, pool_id, status, token[0], token[1], stats[0], stats[1], \r\n                                      block.timestamp, stats[2], stats[3] += rewarded, stats[4], stats[5]);\r\n\r\n        local_fang.setFarmer(earn);\r\n\r\n        locked = false;\r\n    }\r\n\r\n    function set_kaiba(address addy) public only_auth {\r\n        kaiba = addy;\r\n    }\r\n\r\n\r\n    function set_earn(address addy) public only_auth {\r\n        earn = addy;\r\n    }\r\n\r\n\r\n    function set_fang(address addy) public only_auth {\r\n        fang = addy;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"pool_id\",\"type\":\"uint96\"}],\"name\":\"get_unlocked_pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_auth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"set_earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"set_fang\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"set_kaiba\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "fang_helper", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6654d9318c1933bc86444306077f37fbcae20be4b109b9d838306a1a59a75dd4"}]}