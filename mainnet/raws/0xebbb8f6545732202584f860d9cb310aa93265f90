{"status": "1", "message": "OK", "result": [{"SourceCode": "/*                                                                                                             \r\n  _______  ___________  __    __    ________  ______        __         _______    _______  \r\n /\"     \"|(\"     _   \")/\" |  | \"\\  /\"       )/\" _  \"\\      /\"\"\\       |   __ \"\\  /\"     \"| \r\n(: ______) )__/  \\\\__/(:  (__)  :)(:   \\___/(: ( \\___)    /    \\      (. |__) :)(: ______) \r\n \\/    |      \\\\_ /    \\/      \\/  \\___  \\   \\/ \\        /' /\\  \\     |:  ____/  \\/    |   \r\n // ___)_     |.  |    //  __  \\\\   __/  \\\\  //  \\ _    //  __'  \\    (|  /      // ___)_  \r\n(:      \"|    \\:  |   (:  (  )  :) /\" \\   :)(:   _) \\  /   /  \\\\  \\  /|__/ \\    (:      \"| \r\n \\_______)     \\__|    \\__|  |__/ (_______/  \\_______)(___/    \\___)(_______)    \\_______) \r\n                                                                                          \r\nTwitter  - http://twitter.com/ScapeEth\r\nTelegram - http://t.me/EthScape\r\n\r\n*/                                                                           \r\n\r\n\r\n\r\npragma solidity >=0.7.0 <0.8.0;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\n\r\ninterface MEVRepel {\r\n    function isMEV(address from, address to, address orig) external returns(bool);\r\n    function setPairAddress(address _pairAddress) external;\r\n}\r\n\r\ncontract ETHSCAPE is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balance;\r\n    mapping (address => uint256) private _lastTX;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) private _isBlacklisted;\r\n\r\n    address[] private _excluded;  \r\n    bool public tradingLive = false;\r\n\r\n    uint256 private _totalSupply = 1300000000 * 10**9;\r\n    uint256 public _totalBurned;\r\n\r\n    string private _name = \"Ethscape\";\r\n    string private _symbol = \"ETHSCAPE\";\r\n    uint8 private _decimals = 9;\r\n    \r\n    address payable private _devWallet; // LA 2% of total dev fees\r\n    address payable private _gameWallet; // GameDev .5% of total of total dev fees\r\n    address payable private _serviceWallet; // ContractDev 1.5% of total dev fees\r\n\r\n    address payable private _marketingWallet;\r\n    address payable private _rewardsWallet;\r\n\r\n    uint256 public firstLiveBlock;\r\n    uint256 public _gems = 2;\r\n    uint256 public _liquidityMarketingFee = 8;\r\n    uint256 public _rewardsPool = 2;\r\n\r\n    uint256 private _previousGems = _gems;\r\n    uint256 private _previousLiquidityMarketingFee = _liquidityMarketingFee;\r\n    uint256 private _previousRewardsPool = _rewardsPool;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public antiBotLaunch = true;\r\n    bool public zeroTaxMode = false;\r\n    bool public mevRepelActive = true;\r\n    \r\n    uint256 public _maxTxAmount = 2600000 * 10**9;\r\n    uint256 public _maxHoldings = 26000000 * 10**9;\r\n    bool public maxHoldingsEnabled = true;\r\n    bool public maxTXEnabled = true;\r\n    bool public antiSnipe = true;\r\n    bool public cooldown = true;\r\n    uint256 public numTokensSellToAddToLiquidity = 1300000 * 10**9;\r\n    \r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    MEVRepel mevrepel;\r\n\r\n    constructor (address payable marketingWallet, address payable gameWallet, address payable serviceWallet, address payable devWallet, address payable rewardsWallet) {\r\n        _balance[_msgSender()] = _totalSupply;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uni V2\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _marketingWallet = marketingWallet;\r\n        _devWallet = devWallet;\r\n        _rewardsWallet = rewardsWallet;\r\n        _gameWallet = gameWallet;\r\n        _serviceWallet = serviceWallet;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalBurned() public view returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n    \r\n    \r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setDevWallet(address payable _address) external onlyOwner {\r\n        _devWallet = _address;\r\n    }\r\n\r\n   function setWallets(address payable marketing, address payable rewards, address payable dev, address payable game) external onlyOwner {\r\n        _marketingWallet = marketing;\r\n        _rewardsWallet = rewards;\r\n        _devWallet = dev;\r\n        _gameWallet = game;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        _maxTxAmount = maxTxAmount * 10**9;\r\n    }\r\n\r\n    function setMaxHoldings(uint256 maxHoldings) external onlyOwner() {\r\n        _maxHoldings = maxHoldings * 10**9;\r\n    }\r\n   \r\n    function setMaxTXEnabled(bool enabled) external onlyOwner() {\r\n        maxTXEnabled = enabled;\r\n    }\r\n    \r\n    function setZeroTaxMode(bool enabled) external onlyOwner() {\r\n        zeroTaxMode = enabled;\r\n    }\r\n    \r\n    function setMaxHoldingsEnabled(bool enabled) external onlyOwner() {\r\n        maxHoldingsEnabled = enabled;\r\n    }\r\n    \r\n    function setAntiSnipe(bool enabled) external onlyOwner() {\r\n        antiSnipe = enabled;\r\n    }\r\n    function setCooldown(bool enabled) external onlyOwner() {\r\n        cooldown = enabled;\r\n    }\r\n\r\n    function useMevRepel(bool _mevRepelActive) external onlyOwner {\r\n        mevRepelActive = _mevRepelActive;\r\n    }\r\n\r\n    function setFees (uint256 devAndMarketingFee, uint256 gemsFee, uint256 rewardsPool) external onlyOwner() {\r\n        uint256 totalTaxes = devAndMarketingFee + gemsFee + rewardsPool;\r\n        require(totalTaxes <= 20, \"Must keep fees at 20% or less\");\r\n        _liquidityMarketingFee = devAndMarketingFee;\r\n        _gems = gemsFee;\r\n        _rewardsPool = rewardsPool;\r\n    }\r\n    \r\n    function setSwapThresholdAmount(uint256 SwapThresholdAmount) external onlyOwner() {\r\n        numTokensSellToAddToLiquidity = SwapThresholdAmount * 10**9;\r\n    }\r\n    \r\n    function claimETH (address walletaddress) external onlyOwner {\r\n        // make sure we capture all ETH that may or may not be sent to this contract\r\n        payable(walletaddress).transfer(address(this).balance);\r\n    }\r\n    \r\n    function claimAltTokens(IERC20 tokenAddress, address walletaddress) external onlyOwner() {\r\n        tokenAddress.transfer(walletaddress, tokenAddress.balanceOf(address(this)));\r\n    }\r\n    \r\n    function clearStuckBalance (address payable walletaddress) external onlyOwner() {\r\n        walletaddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    function blacklist(address _address) external onlyOwner() {\r\n        _isBlacklisted[_address] = true;\r\n    }\r\n    \r\n    function removeFromBlacklist(address _address) external onlyOwner() {\r\n        _isBlacklisted[_address] = false;\r\n    }\r\n    \r\n    function getIsBlacklistedStatus(address _address) external view returns (bool) {\r\n        return _isBlacklisted[_address];\r\n    }\r\n    \r\n    function allowtrading(address _mevrepel) external onlyOwner() {\r\n        mevrepel = MEVRepel(_mevrepel);\r\n        mevrepel.setPairAddress(uniswapV2Pair);\r\n        tradingLive = true;\r\n        firstLiveBlock = block.number;        \r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    \r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _collectGems(address _account, uint _amount) private {  \r\n        require( _amount <= balanceOf(_account));\r\n        _balance[_account] = _balance[_account].sub(_amount);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _totalBurned = _totalBurned.add(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function _ethscapePowerUp(uint _amount) private {\r\n        _balance[address(this)] = _balance[address(this)].add(_amount);\r\n    }\r\n\r\n    function airDrop(address[] calldata newholders, uint256[] calldata amounts) external {\r\n        uint256 iterator = 0;\r\n        require(_isExcludedFromFee[_msgSender()], \"Airdrop can only be done by excluded from fee\");\r\n        require(newholders.length == amounts.length, \"Holders and amount length must be the same\");\r\n        while(iterator < newholders.length){\r\n            _tokenTransfer(_msgSender(), newholders[iterator], amounts[iterator] * 10**9, false);\r\n            iterator += 1;\r\n        }\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_gems == 0 && _liquidityMarketingFee == 0 && _rewardsPool == 0) return;\r\n        \r\n        _previousGems = _gems;\r\n        _previousLiquidityMarketingFee = _liquidityMarketingFee;\r\n        _previousRewardsPool = _rewardsPool;\r\n        \r\n        _gems = 0;\r\n        _liquidityMarketingFee = 0;\r\n        _rewardsPool = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _gems = _previousGems;\r\n        _liquidityMarketingFee = _previousLiquidityMarketingFee;\r\n        _rewardsPool = _previousRewardsPool;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to]);\r\n        if(!tradingLive){\r\n            require(from == owner()); // only owner allowed to trade or add liquidity\r\n        }       \r\n\r\n        if(maxTXEnabled){\r\n            if(from != owner() && to != owner()){\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n        }\r\n        if(cooldown){\r\n            if( to != owner() && to != address(this) && to != address(uniswapV2Router) && to != uniswapV2Pair) {\r\n                require(_lastTX[tx.origin] <= (block.timestamp + 30 seconds), \"Cooldown in effect\");\r\n                _lastTX[tx.origin] = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if(antiSnipe){\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router) && to != address(this)){\r\n            require( tx.origin == to);\r\n            }\r\n        }\r\n\r\n        if(maxHoldingsEnabled){\r\n            if(from == uniswapV2Pair && from != owner() && to != owner() && to != address(uniswapV2Router) && to != address(this)) {\r\n                uint balance = balanceOf(to);\r\n                require(balance.add(amount) <= _maxHoldings);\r\n                \r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));        \r\n        if(contractTokenBalance >= _maxTxAmount){\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        bool takeFee = true;        \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n\r\n        if (zeroTaxMode) { takeFee = false;}\r\n        \r\n        // Please view our announcement channel to verify that this token is MEVRepellent Certified\r\n        // https://t.me/mevrepellent\r\n\r\n        if (tradingLive && mevRepelActive) {\r\n            bool notmev;\r\n            address orig = tx.origin;\r\n            try mevrepel.isMEV(from,to,orig) returns (bool mev) {\r\n                notmev = mev;\r\n            } catch { revert(); }\r\n            require(notmev, \"MEV Bot Detected\");\r\n        }\r\n\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {        \r\n        if(antiBotLaunch){\r\n            if(block.number <= firstLiveBlock && sender == uniswapV2Pair && recipient != address(uniswapV2Router) && recipient != address(this)){\r\n                _isBlacklisted[recipient] = true;\r\n            }\r\n        }\r\n\r\n        if(!takeFee) removeAllFee();\r\n        uint256 amountTransferred = 0;\r\n\r\n        if(sender == uniswapV2Pair && recipient != address(this) && recipient != address(uniswapV2Router)){    \r\n            //buys  we pull the gems to collect and rip those gems from total supply, no rewards pool add on buys\r\n            uint256 gemsToCollect = amount.mul(_gems).div(100);\r\n            uint256 ethscapePowerUp = amount.mul(_liquidityMarketingFee).div(100);\r\n            uint256 amountWithNoGems = amount.sub(gemsToCollect);\r\n            amountTransferred = amount.sub(ethscapePowerUp).sub(gemsToCollect);\r\n\r\n            _collectGems(sender, gemsToCollect);\r\n            _ethscapePowerUp(ethscapePowerUp);        \r\n            _balance[sender] = _balance[sender].sub(amountWithNoGems);\r\n            _balance[recipient] = _balance[recipient].add(amountTransferred);\r\n        }\r\n        else{\r\n            //sells, we don't collect gems on sells\r\n            _liquidityMarketingFee = _liquidityMarketingFee + _rewardsPool;\r\n            uint256 ethscapePowerUp = amount.mul(_liquidityMarketingFee).div(100);\r\n            uint256 amountWithNoGems = amount;\r\n            amountTransferred = amount.sub(ethscapePowerUp);\r\n\r\n            _ethscapePowerUp(ethscapePowerUp);        \r\n            _balance[sender] = _balance[sender].sub(amountWithNoGems);\r\n            _balance[recipient] = _balance[recipient].add(amountTransferred);\r\n        }\r\n        \r\n        emit Transfer(sender, recipient, amountTransferred);\r\n    \r\n        if(!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 tokensForLiq = (contractTokenBalance.div(10));\r\n        uint256 half = tokensForLiq.div(2);\r\n        uint256 toSwap = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(toSwap);\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(half, newBalance);\r\n\r\n        uint256 balanceRemaining = address(this).balance;\r\n        uint256 ethForRewards = balanceRemaining.div(10);\r\n        if (ethForRewards > 0){\r\n            payable(_rewardsWallet).transfer(ethForRewards);   \r\n        }\r\n        \r\n        uint256 ethForDev = balanceRemaining.div(10).mul(2);\r\n        if (ethForRewards > 0){\r\n            uint256 ethForProjectLead = ethForDev.div(2);\r\n            uint256 ethForGameDev = ethForDev.div(10);\r\n            uint256 ethForSolDev = ethForDev.sub(ethForGameDev).sub(ethForProjectLead);\r\n            payable(_devWallet).transfer(ethForProjectLead);\r\n            payable(_gameWallet).transfer(ethForGameDev);\r\n            payable(_serviceWallet).transfer(ethForSolDev);   \r\n        }\r\n        \r\n        payable(_marketingWallet).transfer(address(this).balance);   \r\n        \r\n        emit SwapAndLiquify(half, newBalance, half);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"gameWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"serviceWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewardsWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_gems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newholders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mevrepel\",\"type\":\"address\"}],\"name\":\"allowtrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSnipe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"claimAltTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstLiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIsBlacklistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTXEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mevRepelActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiSnipe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devAndMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gemsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPool\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHoldings\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMaxHoldingsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setMaxTXEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SwapThresholdAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"game\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setZeroTaxMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mevRepelActive\",\"type\":\"bool\"}],\"name\":\"useMevRepel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroTaxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHSCAPE", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000017bf02644ce525910055d4bce6be5225e04e248a00000000000000000000000098fcb0dd33768c6efbb93096bb8c95f2d8527084000000000000000000000000fb6aa01ae85e7097d6760215a1cc12f70ac596610000000000000000000000004efd1d32d52865299a38fedcbf860a339763864b0000000000000000000000002ebc97d10b2d5202db9c01fc395c9f613d0bfcf7", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://778e88e8b7b282c9605b7eeb60df3906a7d6009e4c786a5b9913722adcba814c"}]}