{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IMain {\r\n   \r\nfunction transferFrom( address from,   address to, uint256 tokenId) external;\r\nfunction ownerOf( uint _tokenid) external view returns (address);\r\n}\r\n\r\ninterface IRewardtoken{\r\nfunction burn(address holder, uint amount) external;\r\nfunction mint(address _address , uint amount) external;\r\nfunction balanceOf(address _address) external returns (uint);\r\nfunction transferFrom( address from,   address to, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract WobblesStaking is Ownable{\r\n     \r\n\r\n  \r\n  \r\n\r\n   uint16 public totalNFTStaked ;\r\n  \r\n\r\n   \r\n   struct stakeOwner{\r\n     \r\n      uint16[] tokens ;  \r\n      \r\n      uint rewards;\r\n   }\r\n   \r\n    \r\n  struct tokenInfo{\r\n     \r\n      uint64 stakingstartingtime ;\r\n      uint64 rewardstartingtime ;\r\n      uint8 period;\r\n      // 0 for flexible staking\r\n      // 1 for 1 month locked staking\r\n      // 3 for 3 months locked staking\r\n      // 6 for 6 months locked staking\r\n    \r\n   \r\n   }\r\n   //stakedNft []staked;\r\n   mapping(address => stakeOwner) public stakeOwners ;\r\n   mapping(uint16 => tokenInfo) public tokensInfo ;\r\n \r\n\r\n uint dailyRewardforFS = 1 ether; \r\n  uint dailyRewardforLS1 = 2 ether;\r\n  uint dailyRewardforLS3 = 4 ether;  \r\n  uint dailyRewardforLS6 = 6 ether;  \r\n\r\n   \r\naddress public mainAddress = 0x1CdC0F5F615431d2FBDABd76E0Ac88F2419d1541; \r\n\r\naddress public rewardtokencontract = 0x32D552205B4E40fB5Cf090bEca0941D980d8b232;\r\n\r\n\r\n\r\n\r\nIMain Main = IMain(mainAddress) ;\r\n\r\nIRewardtoken rewardtoken = IRewardtoken(rewardtokencontract);\r\n\r\n\r\n\r\n constructor() {\r\n  \r\n }\r\n\r\n  function buyMerch(uint amount) external {\r\n      require(rewardtoken.balanceOf(msg.sender) >= amount , \" Insufficient balance\");\r\n      rewardtoken.burn(msg.sender , amount);\r\n  }\r\n\r\n\r\n\r\n \r\n  function checkTime (uint16 _tokenID) public view returns (uint64) {\r\n     return uint64(block.timestamp) - tokensInfo[_tokenID].rewardstartingtime;\r\n  }\r\n\r\n \r\n \r\n\r\n function stake(uint16 [] calldata data , uint8 _period) external {\r\n   \r\n    uint16 _number= uint16(data.length );\r\n    require(_number > 0 , \"No NFTs selected to stake\");\r\n   \r\n    \r\n \r\n      totalNFTStaked += _number;\r\n      storeTokens( data , _period);\r\n    \r\n      for(uint16 i ; i< _number ; i++)\r\n    {  \r\n       require(Main.ownerOf(data[i]) == msg.sender, \"Not the owner\");\r\n    Main.transferFrom( msg.sender, address(this),data[i]);\r\n    }\r\n   \r\n\r\n }\r\n\r\n  \r\n function storeTokens( uint16 [] calldata data , uint8 _period ) internal {\r\n    uint16 tokenID;\r\n    for(uint16 i; i< data.length ; i++)\r\n    {\r\n     tokenID=data[i];\r\n      stakeOwners[ msg.sender].tokens.push(tokenID);\r\n      tokensInfo[tokenID].rewardstartingtime = uint64(block.timestamp);\r\n      tokensInfo[tokenID].stakingstartingtime= uint64(block.timestamp);\r\n      tokensInfo[tokenID].period = _period;\r\n    }\r\n\r\n delete tokenID;\r\n }\r\n\r\n\r\n   \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n  function getFulltokenOf(address _address) external view returns(uint16 [] memory)\r\n {\r\n    return stakeOwners[_address].tokens;\r\n   \r\n }\r\n\r\n \r\n\r\n  function checkIfStaked(address _address) external view returns (bool){\r\n     if(stakeOwners[_address].tokens.length > 0){\r\n     return  true;\r\n     }\r\n     else\r\n      return false;\r\n  }\r\n \r\n  \r\n\r\n\r\n \r\n   \r\n\r\n   \r\n   \r\n\r\n\r\n \r\n  function checkHowManyStaked(address _address) external view returns(uint){\r\n  return stakeOwners[_address].tokens.length;\r\n  }\r\n\r\n \r\n  \r\n  \r\n \r\n  function getStakingEndTime(uint16 _tokenID) public view returns(uint64){\r\n     if(tokensInfo[_tokenID].period == 1)\r\n     {\r\n         return tokensInfo[_tokenID].stakingstartingtime + 30 days ;\r\n     }\r\n     else if(tokensInfo[_tokenID].period == 3)\r\n     {\r\n         return tokensInfo[_tokenID].stakingstartingtime + 90 days;\r\n     }\r\n     else if(tokensInfo[_tokenID].period == 6)\r\n     {\r\n         return tokensInfo[_tokenID].stakingstartingtime + 180 days;\r\n     }\r\n     else\r\n     {\r\n         return 0;\r\n     }\r\n     \r\n }\r\n\r\n \r\n\r\n\r\n\r\n function calculateReward(address _address) public view returns (uint){\r\n     \r\n   uint _reward;\r\n    for( uint i ; i < stakeOwners[_address].tokens.length ; i++)\r\n    {\r\n\r\n       uint16 _tokenID = stakeOwners[_address].tokens[i];\r\n       if (tokensInfo[_tokenID].period == 0)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforFS/86400) * checkTime(_tokenID));\r\n        }\r\n         else if (tokensInfo[_tokenID].period == 1)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforLS1/86400) * checkTime(_tokenID));\r\n        }\r\n         else if (tokensInfo[_tokenID].period == 3)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforLS3/86400) * checkTime(_tokenID));\r\n        }\r\n         else if (tokensInfo[_tokenID].period == 6)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforLS6/86400) * checkTime(_tokenID));\r\n        }\r\n    }\r\n    \r\n    return _reward;\r\n  \r\n }\r\n function calculateRewardfortoken(uint16 _tokenID) public view returns (uint){\r\n   uint _reward;\r\n    \r\n    \r\n       \r\n            if (tokensInfo[_tokenID].period == 0)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforFS/86400) * checkTime(_tokenID));\r\n        }\r\n         else if (tokensInfo[_tokenID].period == 1)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforLS1/86400) * checkTime(_tokenID));\r\n        }\r\n         else if (tokensInfo[_tokenID].period == 3)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforLS3/86400) * checkTime(_tokenID));\r\n        }\r\n         else if (tokensInfo[_tokenID].period == 6)\r\n        {\r\n         _reward = _reward + ( (dailyRewardforLS6/86400) * checkTime(_tokenID));\r\n        }\r\n    \r\n    \r\n    return _reward ;\r\n  \r\n }\r\n\r\n \r\n\r\n function checkStakingPeriod(uint8 _tokenID) public view returns (uint8){\r\n     if(tokensInfo[_tokenID].period == 1)\r\n     {\r\n         return 1;\r\n     }\r\n     else if(tokensInfo[_tokenID].period == 3)\r\n     {\r\n         return 3;\r\n     }\r\n     else if(tokensInfo[_tokenID].period == 6)\r\n     {\r\n         return 6;\r\n     }\r\n     else\r\n     {\r\n         return 0;\r\n     }\r\n }\r\n \r\n \r\n\r\n\r\n \r\n function claimtoken(uint16 _tokenID) external {\r\n     require(stakeOwners[ msg.sender].tokens.length> 0, \"You have not staked any NFTs\"); \r\n    uint _reward = calculateRewardfortoken(_tokenID);\r\n    require(_reward > 0 , \"No balance to claim\");\r\n    tokensInfo[_tokenID].rewardstartingtime = uint64 (block.timestamp);\r\n    \r\n    rewardtoken.mint(msg.sender, _reward );\r\n }\r\n function claimAlltokens(address _address) external {\r\n     require(stakeOwners[_address].tokens.length> 0, \"You have not staked any NFTs\"); \r\n    uint _reward = calculateReward(_address);\r\n    require(_reward > 0 , \"No balance to claim\");\r\n\r\n    toggleRewardStartingTime(_address);\r\n    \r\n    rewardtoken.mint(_address, _reward );\r\n }\r\n\r\nfunction toggleRewardStartingTime(address _address) internal  {\r\n     \r\n    for( uint i ; i < stakeOwners[_address].tokens.length ; i++)\r\n    {\r\n\r\n       uint16 _tokenID = stakeOwners[_address].tokens[i];\r\n       tokensInfo[_tokenID].rewardstartingtime = uint64 (block.timestamp);\r\n    }\r\n    \r\n  \r\n  \r\n }\r\n\r\n\r\n function getRewardforUnstaking(address _address) internal {\r\n\r\n  \r\n   uint _reward = calculateReward(_address);\r\n    rewardtoken.mint(msg.sender, _reward);\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n function checkIfPeriodOver(uint16 [] calldata data) public view returns (bool)\r\n {\r\n     uint64 currenttime = uint64(block.timestamp);\r\n     bool period = true;\r\n     for (uint i ; i < data.length ; i ++)\r\n      {\r\n          uint16 _token= data[i];\r\n           if(tokensInfo[_token].period == 0)\r\n          {\r\n              period = true;  \r\n             \r\n          }\r\n         else if(tokensInfo[_token].period == 1)\r\n          {\r\n          uint64 endtime =tokensInfo[_token].stakingstartingtime + 30 days;\r\n          if(endtime >=  currenttime )\r\n          {\r\n              period = false;\r\n              break;\r\n          }\r\n          }\r\n           else if(tokensInfo[_token].period == 3)\r\n          {\r\n          uint64 endtime =tokensInfo[_token].stakingstartingtime + 90 days;\r\n          if(endtime >=  currenttime )\r\n          {\r\n              period =false;\r\n              break;\r\n          }\r\n          }\r\n          \r\n           else if(tokensInfo[_token].period == 6)\r\n          {\r\n          uint64 endtime =tokensInfo[_token].stakingstartingtime + 180 days;\r\n          if(endtime >=  currenttime )\r\n          {\r\n              period = false;\r\n              break;\r\n          }\r\n          }\r\n        \r\n\r\n      }\r\n      return period;\r\n }\r\n\r\n function unstake(uint16 [] calldata data) external {\r\n    require(stakeOwners[ msg.sender].tokens.length> 0, \"You have not staked any NFTs\");\r\n    \r\n    uint16 tokens =uint16(data.length);\r\n     require(tokens > 0 , \"No NFTs selected to unstake\");\r\n    bool periodOver = checkIfPeriodOver(data);\r\n    require( periodOver , \"Staking Period is still not over\");\r\n   getRewardforUnstaking(msg.sender);\r\n  \r\n    \r\n    uint16 tokenID;\r\n    for(uint16 i; i<tokens; i++)\r\n    {\r\n    tokenID=data[i];\r\n    Main.transferFrom(address(this),msg.sender,tokenID);\r\n    removeToken(tokenID);\r\n     delete tokensInfo[tokenID];\r\n    }\r\n   \r\n   totalNFTStaked -= tokens;\r\n  \r\n    \r\n    delete tokenID;\r\n }\r\n \r\n\r\n\r\n   function removeToken(uint16 token) internal {\r\n   uint x=   stakeOwners[ msg.sender].tokens.length  ;\r\n   if (token == stakeOwners[ msg.sender].tokens[x-1])\r\n   {\r\n        stakeOwners[ msg.sender].tokens.pop();\r\n   }\r\n   else{\r\n    for (uint i ; i < stakeOwners[ msg.sender].tokens.length ; i ++)\r\n    {\r\n\r\n      if(token == stakeOwners[ msg.sender].tokens[i] )\r\n      {\r\n        uint16 temp = stakeOwners[ msg.sender].tokens[x-1];\r\n        stakeOwners[ msg.sender].tokens[x-1]   =  stakeOwners[ msg.sender].tokens[i];\r\n        stakeOwners[ msg.sender].tokens[i] = temp;\r\n        stakeOwners[ msg.sender].tokens.pop();\r\n      }\r\n    }\r\n   }\r\n   }\r\n\r\n\tfunction setMainAddress(address contractAddr) external onlyOwner {\r\n\t\tmainAddress = contractAddr;\r\n        Main= IMain(mainAddress);\r\n\t}  \r\n    function setRewardTokenAddress (address contractAddr) external onlyOwner {\r\n\t\r\n         \r\n       rewardtoken= IRewardtoken(contractAddr) ; \r\n\t}  \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyMerch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenID\",\"type\":\"uint16\"}],\"name\":\"calculateRewardfortoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkHowManyStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"data\",\"type\":\"uint16[]\"}],\"name\":\"checkIfPeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tokenID\",\"type\":\"uint8\"}],\"name\":\"checkStakingPeriod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenID\",\"type\":\"uint16\"}],\"name\":\"checkTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimAlltokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenID\",\"type\":\"uint16\"}],\"name\":\"claimtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFulltokenOf\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenID\",\"type\":\"uint16\"}],\"name\":\"getStakingEndTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardtokencontract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"setRewardTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"data\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8\",\"name\":\"_period\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"tokensInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"stakingstartingtime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"rewardstartingtime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"period\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNFTStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"data\",\"type\":\"uint16[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WobblesStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0861dd7795d432fc0fd1d145b645df08e624db130ee508cfa05c01ab5569da4f"}]}