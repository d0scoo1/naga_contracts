{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IGenesis0 {\r\n   \r\nfunction transferFrom( address from,   address to, uint256 tokenId) external;\r\nfunction ownerOf( uint _tokenid) external view returns (address);\r\n}\r\n\r\n\r\n\r\ncontract KaijuFrenzStaking is Ownable{\r\n     \r\n\r\n\r\n  \r\nuint16 public totalgen0NFTStaked ;\r\n\r\n   struct stakeOwner{\r\n     \r\n     Gen0staker gen0;\r\n     \r\n   }\r\n   struct Gen0staker{\r\n     \r\n      uint16[] tokens ;  \r\n      uint64 rewardStartTime ;\r\n      uint rewards;\r\n   }\r\n  \r\n\r\n\r\n    \r\n  \r\n   //stakedNft []staked;\r\n   mapping(address => stakeOwner) public stakeOwners ;\r\n   \r\n \r\n  // uint startTime = block.timestamp;\r\n   \r\n   uint public dailyGen0Reward = 4 ether ; \r\n\r\n  \r\n  \r\n\r\n\r\n\r\n   \r\naddress public gen0 = 0xC92090f070bf50eEC26D849c88A68112f4f3D98e; \r\n\r\n\r\n\r\n\r\nIGenesis0 genesis0= IGenesis0(gen0) ;\r\n\r\n\r\n\r\n constructor() {\r\n  \r\n }\r\n\r\n   /// ---------- Setting info --------------///\r\n\r\n function setGen0Address(address contractAddr) external onlyOwner {\r\n\t\tgen0 = contractAddr;\r\n       genesis0 = IGenesis0(gen0);\r\n\t}  \r\n    \r\n    \r\n  function setdailyGen0Reward (uint _reward) external onlyOwner{\r\n        \r\n     dailyGen0Reward= _reward;\r\n     delete _reward;\r\n  }\r\n\r\n  // ---------- Setting info --------------///\r\n\r\n // ---------- GEN0 --------------///\r\n function stakeGen0(uint16 [] calldata data) external{\r\n    uint16 _number= uint16(data.length );\r\n    require(_number > 0 , \"Invalid Number\");\r\n   \r\n  \r\n\r\n    uint16 tokens=uint16(stakeOwners[msg.sender].gen0.tokens.length);\r\n    \r\n    if(tokens > 0){\r\n      stakeOwners[ msg.sender].gen0.rewards = calculateGen0Reward(msg.sender);\r\n    }\r\n \r\n      \r\n      stakeOwners[ msg.sender].gen0.rewardStartTime = uint64(block.timestamp);\r\n     \r\n      totalgen0NFTStaked += _number;\r\n      storeGen0Tokens(_number , data);\r\n    \r\n      for(uint16 i ; i< _number ; i++)\r\n    {  \r\n       require(genesis0.ownerOf(data[i]) == msg.sender, \"Not the owner\");\r\n    genesis0.transferFrom( msg.sender, address(this),data[i]);\r\n    }\r\n    delete tokens;\r\n\r\n }\r\n\r\nfunction calculateGen0Reward(address _address) public view returns (uint){\r\n   \r\n    \r\n    return  stakeOwners[ _address].gen0.rewards + ( getGen0StakeTime(_address)  * stakeOwners[_address].gen0.tokens.length * (dailyGen0Reward/86400));\r\n  \r\n }\r\n\r\n  \r\n \r\n\r\n\r\n \r\n function storeGen0Tokens(uint16 _number , uint16 [] calldata data) internal {\r\n    uint16 tokenID;\r\n    for(uint16 i; i< _number ; i++)\r\n    {\r\n     tokenID=data[i];\r\n      stakeOwners[ msg.sender].gen0.tokens.push(tokenID);\r\n    }\r\n\r\n delete tokenID;\r\n }\r\n\r\n\r\n  function getFulltokenOfGen0(address _address) external view returns(uint16 [] memory)\r\n {\r\n    return stakeOwners[_address].gen0.tokens;\r\n   \r\n }\r\n\r\n \r\n\r\n  function checkIfGen0Staked(address _address) public view returns (bool){\r\n     if(stakeOwners[_address].gen0.tokens.length > 0){\r\n     return  true;\r\n     }\r\n     else\r\n      return false;\r\n  }\r\n \r\n  \r\n\r\n\r\n \r\n   \r\n\r\n   \r\n   \r\n\r\n\r\n \r\n  \r\n\r\n \r\n\r\n  \r\n function getGen0StakeTime(address _address) public view returns(uint64){\r\n     uint64 endTime = uint64(block.timestamp);\r\n    return endTime - stakeOwners[_address].gen0.rewardStartTime;\r\n }\r\n\r\n \r\n \r\n\r\n\r\n\r\n \r\n \r\n\r\n function claimGen0Reward() external {\r\n  \r\n    require(stakeOwners[ msg.sender].gen0.tokens.length > 0 , \"You have not staked any NFTs\"); \r\n   \r\n  \r\n    stakeOwners[ msg.sender].gen0.rewardStartTime = uint64(block.timestamp);\r\n   stakeOwners[ msg.sender].gen0.rewards=0;\r\n\r\n\r\n }\r\n\r\nfunction calculateRewardforUnstakingGen0(uint16 [] calldata data , address _address) public  view returns (uint) {\r\n uint totalreward = calculateGen0Reward(_address);\r\n uint unstakeReward = totalreward/ stakeOwners[_address].gen0.tokens.length ;\r\n    unstakeReward = unstakeReward * data.length;\r\n    return unstakeReward;\r\n}\r\n\r\n  function getRewardforUnstakingGen0(uint16 tokens) internal  {\r\n\r\n    uint totalreward = calculateGen0Reward(msg.sender);\r\n    uint unstakeReward = totalreward/ stakeOwners[msg.sender].gen0.tokens.length ;\r\n    unstakeReward = unstakeReward * tokens;\r\n    stakeOwners[ msg.sender].gen0.rewards= totalreward - unstakeReward;\r\n    \r\n   \r\n    \r\n  \r\n \r\n   \r\n \r\n    stakeOwners[ msg.sender].gen0.rewardStartTime = uint64(block.timestamp);\r\n\r\n }\r\n\r\n\r\n function unstakeGen0(uint16 [] calldata data) external {\r\n    require(stakeOwners[ msg.sender].gen0.tokens.length> 0, \"You have not staked any NFTs\"); \r\n    uint16 tokens =uint16(data.length);\r\n    require(tokens > 0, \"You have not selected any NFT to unstake\"); \r\n    \r\n    uint16 tokenID;\r\n    for(uint16 i; i<tokens; i++)\r\n    {\r\n    tokenID=data[i];\r\n    genesis0.transferFrom(address(this),msg.sender,tokenID);\r\n    removeGen0Token(tokenID);\r\n    }\r\n   \r\n   \r\n   totalgen0NFTStaked -= tokens;\r\n\r\n    \r\n }\r\n \r\n\r\n\r\n   function removeGen0Token(uint16 token) internal {\r\n   uint x=   stakeOwners[ msg.sender].gen0.tokens.length  ;\r\n   if (token == stakeOwners[ msg.sender].gen0.tokens[x-1])\r\n   {\r\n        stakeOwners[ msg.sender].gen0.tokens.pop();\r\n   }\r\n   else{\r\n    for (uint i ; i < stakeOwners[ msg.sender].gen0.tokens.length ; i ++)\r\n    {\r\n\r\n      if(token == stakeOwners[ msg.sender].gen0.tokens[i] )\r\n      {\r\n        uint16 temp = stakeOwners[ msg.sender].gen0.tokens[x-1];\r\n        stakeOwners[ msg.sender].gen0.tokens[x-1]   =  stakeOwners[ msg.sender].gen0.tokens[i];\r\n        stakeOwners[ msg.sender].gen0.tokens[i] = temp;\r\n        stakeOwners[ msg.sender].gen0.tokens.pop();\r\n      }\r\n    }\r\n   }\r\n   }\r\n// ---------- GEN0 --------------///\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculateGen0Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"data\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculateRewardforUnstakingGen0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfGen0Staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGen0Reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyGen0Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gen0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFulltokenOfGen0\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getGen0StakeTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"setGen0Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"setdailyGen0Reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"data\",\"type\":\"uint16[]\"}],\"name\":\"stakeGen0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeOwners\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16[]\",\"name\":\"tokens\",\"type\":\"uint16[]\"},{\"internalType\":\"uint64\",\"name\":\"rewardStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"internalType\":\"struct KaijuFrenzStaking.Gen0staker\",\"name\":\"gen0\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalgen0NFTStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"data\",\"type\":\"uint16[]\"}],\"name\":\"unstakeGen0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KaijuFrenzStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e135f7bb6fc5aa1224378156aaadc42751d0f1213069d57b4b69e8b8ac691d30"}]}