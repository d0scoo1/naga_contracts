{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/modules/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/multiSignatureClient.sol\r\n\r\npragma solidity ^0.5.16;\r\ninterface IMultiSignature{\r\n    function getValidSignature(bytes32 msghash,uint256 lastIndex) external view returns(uint256);\r\n}\r\ncontract multiSignatureClient{\r\n    bytes32 private constant multiSignaturePositon = keccak256(\"org.pregenesis.multiSignature.storage\");\r\n    constructor(address multiSignature) public {\r\n        require(multiSignature != address(0),\"multiSignatureClient : Multiple signature contract address is zero!\");\r\n        saveValue(multiSignaturePositon,uint256(multiSignature));\r\n    }    \r\n    function getMultiSignatureAddress()public view returns (address){\r\n        return address(getValue(multiSignaturePositon));\r\n    }\r\n    modifier validCall(){\r\n        checkMultiSignature();\r\n        _;\r\n    }\r\n    function checkMultiSignature() internal {\r\n        uint256 value;\r\n        assembly {\r\n            value := callvalue()\r\n        }\r\n        bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, address(this),value,msg.data));\r\n        address multiSign = getMultiSignatureAddress();\r\n        uint256 index = getValue(msgHash);\r\n        uint256 newIndex = IMultiSignature(multiSign).getValidSignature(msgHash,index);\r\n        require(newIndex > 0, \"multiSignatureClient : This tx is not aprroved\");\r\n        saveValue(msgHash,newIndex);\r\n    }\r\n    function saveValue(bytes32 position,uint256 value) internal \r\n    {\r\n        assembly {\r\n            sstore(position, value)\r\n        }\r\n    }\r\n    function getValue(bytes32 position) internal view returns (uint256 value) {\r\n        assembly {\r\n            value := sload(position)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/proxyOwner.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title  proxyOwner Contract\r\n\r\n */\r\n\r\ncontract proxyOwner is multiSignatureClient{\r\n    bytes32 private constant proxyOwnerPosition  = keccak256(\"org.pregenesis.Owner.storage\");\r\n    bytes32 private constant proxyOriginPosition0  = keccak256(\"org.pregenesis.Origin.storage.0\");\r\n    bytes32 private constant proxyOriginPosition1  = keccak256(\"org.pregenesis.Origin.storage.1\");\r\n    uint256 private constant oncePosition  = uint256(keccak256(\"org.pregenesis.Once.storage\"));\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OriginTransferred(address indexed previousOrigin, address indexed newOrigin);\r\n    constructor(address multiSignature,address origin0,address origin1) multiSignatureClient(multiSignature) public {\r\n        _setProxyOwner(msg.sender);\r\n        _setProxyOrigin(address(0),origin0);\r\n        _setProxyOrigin(address(0),origin1);\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer ownership\r\n     * @param _newOwner The address to transfer ownership to\r\n     */\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner\r\n    {\r\n        _setProxyOwner(_newOwner);\r\n    }\r\n    function _setProxyOwner(address _newOwner) internal \r\n    {\r\n        emit OwnershipTransferred(owner(),_newOwner);\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, _newOwner)\r\n        }\r\n    }\r\n    function owner() public view returns (address _owner) {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            _owner := sload(position)\r\n        }\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require (isOwner(),\"proxyOwner: caller must be the proxy owner and a contract and not expired\");\r\n        _;\r\n    }\r\n    function transferOrigin(address _oldOrigin,address _newOrigin) public onlyOrigin\r\n    {\r\n        _setProxyOrigin(_oldOrigin,_newOrigin);\r\n    }\r\n    function _setProxyOrigin(address _oldOrigin,address _newOrigin) internal \r\n    {\r\n        emit OriginTransferred(_oldOrigin,_newOrigin);\r\n        (address _origin0,address _origin1) = txOrigin();\r\n        if (_origin0 == _oldOrigin){\r\n            bytes32 position = proxyOriginPosition0;\r\n            assembly {\r\n                sstore(position, _newOrigin)\r\n            }\r\n        }else if(_origin1 == _oldOrigin){\r\n            bytes32 position = proxyOriginPosition1;\r\n            assembly {\r\n                sstore(position, _newOrigin)\r\n            }            \r\n        }else{\r\n            require(false,\"OriginTransferred : old origin is illegal address!\");\r\n        }\r\n    }\r\n    function txOrigin() public view returns (address _origin0,address _origin1) {\r\n        bytes32 position0 = proxyOriginPosition0;\r\n        bytes32 position1 = proxyOriginPosition1;\r\n        assembly {\r\n            _origin0 := sload(position0)\r\n            _origin1 := sload(position1)\r\n        }\r\n    }\r\n    modifier originOnce() {\r\n        require (isOrigin(),\"proxyOwner: caller is not the tx origin!\");\r\n        uint256 key = oncePosition+uint32(msg.sig);\r\n        require (getValue(bytes32(key))==0, \"proxyOwner : This function must be invoked only once!\");\r\n        saveValue(bytes32(key),1);\r\n        _;\r\n    }\r\n    function isOrigin() public view returns (bool){\r\n        (address _origin0,address _origin1) = txOrigin();\r\n        return  msg.sender == _origin0 || msg.sender == _origin1;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner();//&& isContract(msg.sender);\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOrigin() {\r\n        require (isOrigin(),\"proxyOwner: caller is not the tx origin!\");\r\n        checkMultiSignature();\r\n        _;\r\n    }\r\n    modifier OwnerOrOrigin(){\r\n        if (isOwner()){\r\n            //allow owner to set once\r\n            uint256 key = oncePosition+uint32(msg.sig);\r\n            require (getValue(bytes32(key))==0, \"proxyOwner : This function must be invoked only once!\");\r\n            saveValue(bytes32(key),1);\r\n        }else if(isOrigin()){\r\n            checkMultiSignature();\r\n        }else{\r\n            require(false,\"proxyOwner: caller is not owner or origin\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/IERC20.sol\r\n\r\npragma solidity ^0.5.16;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/modules/Address.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(value )(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.16;\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/modules/Ownable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Halt.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract Halt is Ownable {\r\n    \r\n    bool private halted = false; \r\n    \r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice function Emergency situation that requires \r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt) \r\n        public \r\n        onlyOwner\r\n    {\r\n        halted = halt;\r\n    }\r\n}\r\n\r\n// File: contracts/pregenesis/PreGenesisData.sol\r\n\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * Copyright (C) 2020 pregenesis Protocol\r\n */\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract PreGenesisData is ReentrancyGuard {\r\n\r\n    //Special decimals for calculation\r\n    uint256 constant internal rayDecimals = 1e27;\r\n\r\n    uint256 constant internal InterestDecimals = 1e36;\r\n\r\n    uint256 public totalAssetAmount;\r\n    // Maximum amount of debt that can be generated with this collateral type\r\n    uint256 public assetCeiling;       // [rad]\r\n    // Minimum amount of debt that must be generated by a SAFE using this collateral\r\n    uint256 public assetFloor;         // [rad]\r\n    //interest rate\r\n    uint256 internal interestRate;\r\n    uint256 internal interestInterval;\r\n    struct assetInfo{\r\n        uint256 originAsset;\r\n        uint256 baseAsset;\r\n        uint256 finalAsset;//only used to record transfered vcoind amount\r\n    }\r\n    // debt balance\r\n    mapping(address=>assetInfo) public assetInfoMap;\r\n\r\n    // latest time to settlement\r\n    uint256 internal latestSettleTime;\r\n    uint256 internal accumulatedRate;\r\n\r\n    bool public allowWithdraw;\r\n    bool public allowDeposit;\r\n    uint256 public maxRate = 200e27;\r\n    uint256 public minRate = rayDecimals;\r\n    address public coin;\r\n    address public targetSc;\r\n\r\n    bool public halted = false;\r\n    modifier notHalted() {\r\n        require(!halted,\"This contract is halted\");\r\n        _;\r\n    }\r\n\r\n    modifier isHalted() {\r\n        require(halted,\"This contract is not halted\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    event SetInterestInfo(address indexed from,uint256 _interestRate,uint256 _interestInterval);\r\n    event AddAsset(address indexed recieptor,uint256 amount);\r\n    event SubAsset(address indexed account,uint256 amount,uint256 subOrigin);\r\n\r\n    event InitContract(address indexed sender,uint256 interestRate,uint256 interestInterval,\r\n        uint256 assetCeiling,uint256 assetFloor);\r\n    event Deposit(address indexed sender, address indexed account, uint256 amount);\r\n    event Withdraw(address indexed sender, address indexed account, uint256 amount);\r\n    event TransferToTarget(address indexed sender, address indexed account, uint256 amount);\r\n    event TransferVCoinToTarget(address indexed sender, address indexed account, uint256 amount);\r\n}\r\n\r\n// File: contracts/pregenesisSafeMulsig/PreGenesisWithSafe.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PreGenesisWithSafe is PreGenesisData{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public safeMulsig;\r\n\r\n    modifier onlyOrigin() {\r\n        require(msg.sender==safeMulsig, \"not setting safe contract\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _safeMulsig)\r\n        public\r\n    {\r\n        safeMulsig = _safeMulsig;\r\n        allowWithdraw = false;\r\n        allowDeposit = false;\r\n    }\r\n\r\n    function initContract(uint256 _interestRate,uint256 _interestInterval,\r\n        uint256 _assetCeiling,uint256 _assetFloor,address _coin,address _targetSc) external onlyOrigin{\r\n\r\n        assetCeiling = _assetCeiling;\r\n        assetFloor = _assetFloor;\r\n        _setInterestInfo(_interestRate,_interestInterval,maxRate,rayDecimals);\r\n\r\n        coin = _coin;\r\n        targetSc = _targetSc;\r\n\r\n        emit InitContract(msg.sender,_interestRate,_interestInterval,_assetCeiling,_assetFloor);\r\n    }\r\n\r\n    function setCoinAndTarget(address _coin,address _targetSc) public onlyOrigin {\r\n        coin = _coin;\r\n        targetSc = _targetSc;\r\n    }\r\n\r\n    function setPoolLimitation(uint256 _assetCeiling,uint256 _assetFloor) external onlyOrigin{\r\n        assetCeiling = _assetCeiling;\r\n        assetFloor = _assetFloor;\r\n    }\r\n\r\n    function setInterestInfo(uint256 _interestRate,uint256 _interestInterval)external onlyOrigin{\r\n        _setInterestInfo(_interestRate,_interestInterval,maxRate,rayDecimals);\r\n    }\r\n\r\n    function setWithdrawStatus(bool _enable)external onlyOrigin{\r\n       allowWithdraw = _enable;\r\n    }\r\n\r\n    function setDepositStatus(bool _enable)external onlyOrigin{\r\n        allowDeposit = _enable;\r\n    }\r\n\r\n    function resetSafeMulsig(address _safeMulsig)external onlyOrigin{\r\n        safeMulsig = _safeMulsig;\r\n    }\r\n    /// @notice function Emergency situation that requires\r\n    /// @notice contribution period to stop or not.\r\n    function setHalt(bool halt)\r\n        public\r\n        onlyOrigin\r\n    {\r\n        halted = halt;\r\n    }\r\n\r\n    function deposit(uint256 amount)\r\n        notHalted\r\n        nonReentrant\r\n        external\r\n    {\r\n        require(allowDeposit,\"deposit is not allowed!\");\r\n        require(totalAssetAmount < assetCeiling, \"asset is overflow\");\r\n\r\n        if(totalAssetAmount.add(amount)>assetCeiling) {\r\n            amount = assetCeiling.sub(totalAssetAmount);\r\n        }\r\n        IERC20(coin).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _interestSettlement();\r\n\r\n        //user current vcoin amount + coin amount\r\n        uint256 newAmount =  calBaseAmount(amount,accumulatedRate);\r\n        assetInfoMap[msg.sender].baseAsset = assetInfoMap[msg.sender].baseAsset.add(newAmount);\r\n\r\n        assetInfoMap[msg.sender].originAsset = assetInfoMap[msg.sender].originAsset.add(amount);\r\n        totalAssetAmount = totalAssetAmount.add(amount);\r\n\r\n        emit Deposit(msg.sender,msg.sender,amount);\r\n    }\r\n\r\n    function transferVCoin(address _user,uint256 _vCoinAmount)\r\n        notHalted\r\n        nonReentrant\r\n        external\r\n        returns(uint256)\r\n    {\r\n        require(msg.sender==targetSc,\"wrong sender\");\r\n\r\n        _interestSettlement();\r\n\r\n        uint256 assetAndInterest = getAssetBalance(_user);\r\n        uint256 burnAmount = 0;\r\n\r\n        if(assetAndInterest <= _vCoinAmount){\r\n            //transfer user max baseAsset to targetSc\r\n            burnAmount = assetInfoMap[_user].baseAsset;\r\n            //final asset is assetAndInterest\r\n            _vCoinAmount = assetAndInterest;\r\n            //set baseAsset to 0\r\n            assetInfoMap[_user].baseAsset = 0;\r\n        }else if(assetAndInterest > _vCoinAmount){\r\n            burnAmount = calBaseAmount(_vCoinAmount,accumulatedRate);\r\n            assetInfoMap[_user].baseAsset = assetInfoMap[_user].baseAsset.sub(burnAmount);\r\n        }\r\n\r\n        //tartget sc only record vcoin balance,no interest\r\n        assetInfoMap[targetSc].baseAsset = assetInfoMap[targetSc].baseAsset.add(burnAmount);\r\n\r\n        //record how many vcoind is transfer to targetSc\r\n        assetInfoMap[_user].finalAsset =  assetInfoMap[_user].finalAsset.add(_vCoinAmount);\r\n\r\n        emit TransferVCoinToTarget(_user,targetSc,_vCoinAmount);\r\n\r\n        return _vCoinAmount;\r\n    }\r\n\r\n    //only transfer user's usdc coin if allowed to withdraw\r\n    function withdraw()\r\n         notHalted\r\n         nonReentrant\r\n         external\r\n    {\r\n        require(allowWithdraw,\"withdraw is not allowed!\");\r\n\r\n        uint256 amount = assetInfoMap[msg.sender].originAsset;\r\n        assetInfoMap[msg.sender].originAsset = 0;\r\n        assetInfoMap[msg.sender].baseAsset = 0;\r\n        IERC20(coin).safeTransfer(msg.sender, amount);\r\n        emit Withdraw(coin,msg.sender,amount);\r\n    }\r\n\r\n    //transfer usdc coin in sc to target sc if multisig permit\r\n    function TransferCoinToTarget() public onlyOrigin {\r\n        uint256 coinBal = IERC20(coin).balanceOf(address(this));\r\n        IERC20(coin).safeTransfer(targetSc, coinBal);\r\n        emit TransferToTarget(msg.sender,targetSc,coinBal);\r\n    }\r\n\r\n    function getUserBalanceInfo(address _user)public view returns(uint256,uint256,uint256){\r\n        if(interestInterval == 0){\r\n            return (0,0,0);\r\n        }\r\n        uint256 vAsset = getAssetBalance(_user);\r\n        return (assetInfoMap[_user].originAsset,vAsset,assetInfoMap[_user].finalAsset);\r\n    }\r\n\r\n    function getInterestInfo()external view returns(uint256,uint256){\r\n        return (interestRate,interestInterval);\r\n    }\r\n\r\n    function _setInterestInfo(uint256 _interestRate,uint256 _interestInterval,uint256 _maxRate,uint256 _minRate) internal {\r\n        if (accumulatedRate == 0){\r\n            accumulatedRate = rayDecimals;\r\n        }\r\n        require(_interestRate<=1e27,\"input stability fee is too large\");\r\n        require(_interestInterval>0,\"input mine Interval must larger than zero\");\r\n        uint256 newLimit = rpower(uint256(1e27+_interestRate),31536000/_interestInterval,rayDecimals);\r\n        require(newLimit<= _maxRate && newLimit>= _minRate,\"input rate is out of range\");\r\n\r\n        _interestSettlement();\r\n        interestRate = _interestRate;\r\n        interestInterval = _interestInterval;\r\n\r\n        emit SetInterestInfo(msg.sender,_interestRate,_interestInterval);\r\n    }\r\n\r\n    function getAssetBalance(address account)public view returns(uint256){\r\n        return calInterestAmount(assetInfoMap[account].baseAsset,newAccumulatedRate());\r\n    }\r\n\r\n    function rpower(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                let xx := mul(x, x)\r\n                if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                let xxRound := add(xx, half)\r\n                if lt(xxRound, xx) { revert(0,0) }\r\n                x := div(xxRound, base)\r\n                if mod(n,2) {\r\n                    let zx := mul(z, x)\r\n                    if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                    let zxRound := add(zx, half)\r\n                    if lt(zxRound, zx) { revert(0,0) }\r\n                    z := div(zxRound, base)\r\n                }\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n//    modifier settleInterest(){\r\n//        _interestSettlement();\r\n//        _;\r\n//    }\r\n    /**\r\n     * @dev the auxiliary function for _mineSettlementAll.\r\n     */\r\n    function _interestSettlement()internal{\r\n        uint256 _interestInterval = interestInterval;\r\n        if (_interestInterval>0){\r\n            accumulatedRate = newAccumulatedRate();\r\n            latestSettleTime = currentTime()/_interestInterval*_interestInterval;\r\n        }else{\r\n            latestSettleTime = currentTime();\r\n        }\r\n    }\r\n\r\n    function newAccumulatedRate()internal  view returns (uint256){\r\n        uint256 newRate = rpower(uint256(rayDecimals+interestRate),(currentTime()-latestSettleTime)/interestInterval,rayDecimals);\r\n        return accumulatedRate.mul(newRate)/rayDecimals;\r\n    }\r\n\r\n    function currentTime() internal view returns (uint256){\r\n        return block.timestamp;\r\n    }\r\n\r\n    function calBaseAmount(uint256 amount, uint256 _interestRate) internal pure returns(uint256){\r\n        return amount.mul(InterestDecimals)/_interestRate;\r\n    }\r\n\r\n    function calInterestAmount(uint256 amount, uint256 _interestRate) internal pure returns(uint256){\r\n        return amount.mul(_interestRate)/InterestDecimals;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeMulsig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recieptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetFloor\",\"type\":\"uint256\"}],\"name\":\"InitContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interestInterval\",\"type\":\"uint256\"}],\"name\":\"SetInterestInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subOrigin\",\"type\":\"uint256\"}],\"name\":\"SubAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferVCoinToTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"TransferCoinToTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"originAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAsset\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInterestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetFloor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetSc\",\"type\":\"address\"}],\"name\":\"initContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeMulsig\",\"type\":\"address\"}],\"name\":\"resetSafeMulsig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeMulsig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetSc\",\"type\":\"address\"}],\"name\":\"setCoinAndTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setDepositStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestInterval\",\"type\":\"uint256\"}],\"name\":\"setInterestInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetFloor\",\"type\":\"uint256\"}],\"name\":\"setPoolLimitation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setWithdrawStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetSc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vCoinAmount\",\"type\":\"uint256\"}],\"name\":\"transferVCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PreGenesisWithSafe", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001f77d23de5be41362a16d381828d224190ca8bc9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ee98b76684301eddeda5b5eb876b3094f8e29e7134d87f483e7662e75be3ce84"}]}