{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\ninterface ComptrollerInterface {\r\n    function admin() external view returns (address);\r\n    function adminHasRights() external view returns (bool);\r\n    function fuseAdminHasRights() external view returns (bool);\r\n}\r\n\r\ninterface IFuseFeeDistributor {\r\n    function minBorrowEth() external view returns (uint256);\r\n    function maxSupplyEth() external view returns (uint256);\r\n    function maxUtilizationRate() external view returns (uint256);\r\n    function interestFeeRate() external view returns (uint256);\r\n    function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation) external view returns (bool);\r\n    function cErc20DelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\r\n    function cEtherDelegateWhitelist(address oldImplementation, address newImplementation, bool allowResign) external view returns (bool);\r\n    function latestComptrollerImplementation(address oldImplementation) external view returns (address);\r\n    function latestCErc20Delegate(address oldImplementation) external view returns (address cErc20Delegate, bool allowResign, bytes memory becomeImplementationData);\r\n    function latestCEtherDelegate(address oldImplementation) external view returns (address cEtherDelegate, bool allowResign, bytes memory becomeImplementationData);\r\n    function deployCEther(bytes calldata constructorData) external returns (address);\r\n    function deployCErc20(bytes calldata constructorData) external returns (address);\r\n    function () external payable;\r\n}\r\n\r\n/**\r\n * @title CToken\r\n * @notice Built solely to change a faulty IRM.\r\n */\r\ncontract CToken {\r\n    /**\r\n     * @notice Implementation address for this contract\r\n     */\r\n    address public implementation;\r\n\r\n    /**\r\n     * @notice Administrator for Fuse\r\n     */\r\n    IFuseFeeDistributor internal constant fuseAdmin = IFuseFeeDistributor(0xa731585ab05fC9f83555cf9Bff8F58ee94e18F85);\r\n\r\n    /**\r\n     * @dev LEGACY USE ONLY: Administrator for this contract\r\n     */\r\n    address payable internal __admin;\r\n\r\n    /**\r\n     * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\r\n     */\r\n    bool internal __fuseAdminHasRights;\r\n\r\n    /**\r\n     * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\r\n     */\r\n    bool internal __adminHasRights;\r\n    \r\n    /**\r\n     * @dev Guard variable for re-entrancy checks\r\n     */\r\n    bool internal _notEntered;\r\n\r\n    /**\r\n     * @notice EIP-20 token name for this token\r\n     */\r\n    string internal name;\r\n\r\n    /**\r\n     * @notice EIP-20 token symbol for this token\r\n     */\r\n    string internal symbol;\r\n\r\n    /**\r\n     * @notice EIP-20 token decimals for this token\r\n     */\r\n    uint8 internal decimals;\r\n\r\n    /**\r\n     * @notice LEGACY USE ONLY: Pending administrator for this contract\r\n     */\r\n    address payable private __pendingAdmin;\r\n\r\n    /**\r\n     * @notice Contract which oversees inter-cToken operations\r\n     */\r\n    ComptrollerInterface internal comptroller;\r\n\r\n    /**\r\n     * @notice Model which tells what the current interest rate should be\r\n     */\r\n    address public interestRateModel;\r\n    \r\n    /**\r\n     * @notice Emitted when implementation is changed\r\n     */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n     * @notice Event emitted when interestRateModel is changed\r\n     */\r\n    event NewMarketInterestRateModel(address oldInterestRateModel, address newInterestRateModel);\r\n\r\n    /**\r\n     * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n    function _becomeImplementation(bytes memory data) public {\r\n        // Shh -- currently unused\r\n        data;\r\n        \r\n        address newInterestRateModel = 0x5FDCb640b181E19Ef7f77491d8D26E5fF6B7A4DF;\r\n        \r\n        // Used to store old model for use in the event that is emitted on success\r\n        address oldInterestRateModel;\r\n\r\n        // Track the market's current interest rate model\r\n        oldInterestRateModel = interestRateModel;\r\n\r\n        // Set the interest rate model to newInterestRateModel\r\n        interestRateModel = newInterestRateModel;\r\n\r\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\r\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementationInternal(address implementation_, bool allowResign, bytes memory becomeImplementationData) internal {\r\n        // Check whitelist\r\n        require(fuseAdmin.cErc20DelegateWhitelist(implementation, implementation_, allowResign), \"!impl\");\r\n\r\n        // Get old implementation\r\n        address oldImplementation = implementation;\r\n\r\n        // Store new implementation\r\n        implementation = implementation_;\r\n\r\n        // Call _becomeImplementation externally (delegating to new delegate's code)\r\n        _functionCall(address(this), abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData), \"!become\");\r\n\r\n        // Emit event\r\n        emit NewImplementation(oldImplementation, implementation);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n    function _setImplementationSafe(address implementation_, bool allowResign, bytes calldata becomeImplementationData) external {\r\n        // Check admin rights\r\n        require(hasAdminRights(), \"!admin\");\r\n\r\n        // Set implementation\r\n        _setImplementationInternal(implementation_, allowResign, becomeImplementationData);\r\n    }\r\n\r\n    /**\r\n     * @notice Function called before all delegator functions\r\n     * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary\r\n     */\r\n    function _prepare() external payable {}\r\n\r\n    /**\r\n     * @notice Returns a boolean indicating if the sender has admin rights\r\n     */\r\n    function hasAdminRights() internal view returns (bool) {\r\n        return (msg.sender == comptroller.admin() && comptroller.adminHasRights()) || (msg.sender == address(fuseAdmin) && comptroller.fuseAdminHasRights());\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     * @param errorMessage The revert string to return on failure.\r\n     */\r\n    function _functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.call(data);\r\n\r\n        if (!success) {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n\r\n        return returndata;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_prepare\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowResign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"}],\"name\":\"_setImplementationSafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CToken", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0ca4dd04a7cf60ff6ad48cc514540df889cc1c3600e4339f76bc1039b59e7440"}]}