{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.7;\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/randomPicker.sol\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract randomPicker is Ownable {\r\n    bool called = false;\r\n    uint[] tokenIds = [13093,13094,13095,13096,13097,13098,13099,13100,13101,13102,13103,13104,13105];\r\n    mapping (address => uint) addressToAllowance;\r\n    uint[] tempAllowance;\r\n    address[] tempAddresses;\r\n    address[9] Addresses = [0x8DE0A7F3B9789921bE6934fa132049790A9D8b59,0x019aCCBe7f0823598eA968b7271f39735016DA9B,0x01Fe13639b3C0B9127412b6f8210e4753ac1Da37,0xf17cD420B438529C27eafF9E0ba10eF3aC2560aC,\r\n    0x6b7a381c4B3E03A25772D91B95EEC51C12207E72,0xD66F3fd0f89f59409adAF7bDca536016A765670D,0x14F97F92Da702AF1eD4f09c5612Dd0Fd590403A0,0x7aC3a31b933575Abd7e249B8f391290A6c1844B9,\r\n    0xB0216d1b4BBE34FD82C786364707188fdcdd9363];\r\n    uint[] Allowances = [1,1,4,1,1,2,1,1,1];\r\n    mapping (address => uint[]) addressToTokenIds;\r\n    uint blockTimeStamp;\r\n    struct result{\r\n        address _ad;\r\n        uint[] tokenIds;\r\n    }\r\n\r\n    constructor() { \r\n        for (uint i; i< Addresses.length;i++){\r\n            addressToAllowance[Addresses[i]] = Allowances[i];\r\n            tempAllowance.push(Allowances[i]);\r\n            tempAddresses.push(Addresses[i]);\r\n        }\r\n    }\r\n\r\n    function runPicker() external onlyOwner {\r\n        require (called == false, \"already runned\");\r\n        blockTimeStamp = block.timestamp; // store the block hash used as seed for the picker\r\n        for (uint i; i<tokenIds.length;i++){\r\n\r\n            uint random = randomNum(blockTimeStamp, i); // get a random number based on the remaining addresses with positive allowance\r\n\r\n            addressToTokenIds[tempAddresses[random]].push(tokenIds[i]); // push the tokenId to the picked address \r\n            tempAllowance[random]--; // decrement the temporary allowance storage\r\n\r\n            if (tempAllowance[random] ==0 && tempAddresses.length >1) // if the remaining allowance = 0, then delete the address from the array so it can't pick it anymore\r\n                remove(random);\r\n        }\r\n        called = true;\r\n    }\r\n\r\n    function randomNum(uint _BTS, uint256 _tokenId) public view returns(uint256) { // return a number between 0 and the number of remaining addresses\r\n      if (tempAddresses.length == 1) return 0;\r\n      uint256 num = uint(keccak256(abi.encodePacked(_BTS, _tokenId))) % tempAddresses.length;\r\n      return num;\r\n    }\r\n\r\n    function getAllowanceForAddress(address _ad) public view returns (uint) { // return the initial allowance of a specific address\r\n        return addressToAllowance[_ad];\r\n    }\r\n\r\n    function remove(uint index) internal { // remove an address from the array\r\n        for (uint i = index; i<(tempAddresses.length-1); i++){\r\n                tempAddresses[i] = tempAddresses[i+1];\r\n                tempAllowance[i] = tempAllowance[i+1];\r\n        }\r\n        tempAddresses.pop();\r\n        tempAllowance.pop();\r\n    }\r\n\r\n    function getResults() external view returns (result[9] memory){ // get the results of the picker\r\n        result[9] memory results;\r\n        for (uint i;i<9;i++){\r\n            results[i]._ad = Addresses[i];\r\n            results[i].tokenIds = addressToTokenIds[Addresses[i]];\r\n        }\r\n        return results;\r\n    }\r\n\r\n    function getUsedTimestamp () external view returns (uint){ // return the hash used as seed\r\n        return blockTimeStamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"getAllowanceForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResults\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct randomPicker.result[9]\",\"name\":\"\",\"type\":\"tuple[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"randomNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runPicker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "randomPicker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a65ba7634f160e07333b97729914ad0f899e5ff5edc026590d49cdd0d5c3d702"}]}