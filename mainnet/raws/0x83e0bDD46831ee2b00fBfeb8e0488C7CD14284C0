{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/interfaces/IMarketSIHandlerDataStorage.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market si handler data storage interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IMarketSIHandlerDataStorage  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\r\n\tfunction updateRewardPerBlockStorage(uint256 _rewardPerBlock) external returns (bool);\r\n\r\n\tfunction getRewardInfo(address userAddr) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\r\n\r\n\tfunction getMarketRewardInfo() external view returns (uint256, uint256, uint256);\r\n\tfunction setMarketRewardInfo(uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardPerBlock) external returns (bool);\r\n\r\n\tfunction getUserRewardInfo(address userAddr) external view returns (uint256, uint256, uint256);\r\n\tfunction setUserRewardInfo(address userAddr, uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardAmount) external returns (bool);\r\n\r\n\tfunction getBetaRate() external view returns (uint256);\r\n\tfunction setBetaRate(uint256 _betaRate) external returns (bool);\r\n}\r\n\r\n// File: contracts/Errors.sol\r\npragma solidity 0.6.12;\r\n\r\ncontract Modifier {\r\n    string internal constant ONLY_OWNER = \"O\";\r\n    string internal constant ONLY_MANAGER = \"M\";\r\n    string internal constant CIRCUIT_BREAKER = \"emergency\";\r\n}\r\n\r\ncontract ManagerModifier is Modifier {\r\n    string internal constant ONLY_HANDLER = \"H\";\r\n    string internal constant ONLY_LIQUIDATION_MANAGER = \"LM\";\r\n    string internal constant ONLY_BREAKER = \"B\";\r\n}\r\n\r\ncontract HandlerDataStorageModifier is Modifier {\r\n    string internal constant ONLY_BIFI_CONTRACT = \"BF\";\r\n}\r\n\r\ncontract SIDataStorageModifier is Modifier {\r\n    string internal constant ONLY_SI_HANDLER = \"SI\";\r\n}\r\n\r\ncontract HandlerErrors is Modifier {\r\n    string internal constant USE_VAULE = \"use value\";\r\n    string internal constant USE_ARG = \"use arg\";\r\n    string internal constant EXCEED_LIMIT = \"exceed limit\";\r\n    string internal constant NO_LIQUIDATION = \"no liquidation\";\r\n    string internal constant NO_LIQUIDATION_REWARD = \"no enough reward\";\r\n    string internal constant NO_EFFECTIVE_BALANCE = \"not enough balance\";\r\n    string internal constant TRANSFER = \"err transfer\";\r\n}\r\n\r\ncontract SIErrors is Modifier { }\r\n\r\ncontract InterestErrors is Modifier { }\r\n\r\ncontract LiquidationManagerErrors is Modifier {\r\n    string internal constant NO_DELINQUENT = \"not delinquent\";\r\n}\r\n\r\ncontract ManagerErrors is ManagerModifier {\r\n    string internal constant REWARD_TRANSFER = \"RT\";\r\n    string internal constant UNSUPPORTED_TOKEN = \"UT\";\r\n}\r\n\r\ncontract OracleProxyErrors is Modifier {\r\n    string internal constant ZERO_PRICE = \"price zero\";\r\n}\r\n\r\ncontract RequestProxyErrors is Modifier { }\r\n\r\ncontract ManagerDataStorageErrors is ManagerModifier {\r\n    string internal constant NULL_ADDRESS = \"err addr null\";\r\n}\r\n\r\n// File: contracts/context/BlockContext.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's BlockContext contract\r\n * @notice BiFi getter Contract for Block Context Information\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract BlockContext {\r\n    function _blockContext() internal view returns(uint256 context) {\r\n        // block number chain\r\n        context = block.number;\r\n\r\n        // block timestamp chain\r\n        // context = block.timestamp;\r\n    }\r\n}\r\n\r\n// File: contracts/marketHandler/marketHandlerDataStorage/MarketSIHandlerDataStorage.sol\r\n// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market si handler data storage contract\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract MarketSIHandlerDataStorage is IMarketSIHandlerDataStorage, SIDataStorageModifier, BlockContext {\r\n\tbool emergency;\r\n\r\n\taddress owner;\r\n\r\n\taddress SIHandlerAddr;\r\n\r\n\tMarketRewardInfo marketRewardInfo;\r\n\r\n\tmapping(address => UserRewardInfo) userRewardInfo;\r\n\r\n\tstruct MarketRewardInfo {\r\n\t\tuint256 rewardLane;\r\n\t\tuint256 rewardLaneUpdateAt;\r\n\t\tuint256 rewardPerBlock;\r\n\t}\r\n\r\n\tstruct UserRewardInfo {\r\n\t\tuint256 rewardLane;\r\n\t\tuint256 rewardLaneUpdateAt;\r\n\t\tuint256 rewardAmount;\r\n\t}\r\n\r\n\tuint256 betaRate;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, ONLY_OWNER);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlySIHandler {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == SIHandlerAddr) || (msgSender == owner), ONLY_SI_HANDLER);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier circuitBreaker {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((!emergency) || (msgSender == owner), CIRCUIT_BREAKER);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor (address _SIHandlerAddr) public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t\tSIHandlerAddr = _SIHandlerAddr;\r\n\t\tbetaRate = 5 * (10 ** 17);\r\n\t\tmarketRewardInfo.rewardLaneUpdateAt = _blockContext();\r\n\t}\r\n\r\n\tfunction ownershipTransfer(address _owner) onlyOwner external returns (bool)\r\n\t{\r\n\t\towner = _owner;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setCircuitBreaker(bool _emergency) onlySIHandler external override returns (bool)\r\n\t{\r\n\t\temergency = _emergency;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setSIHandlerAddr(address _SIHandlerAddr) onlyOwner public returns (bool)\r\n\t{\r\n\t\tSIHandlerAddr = _SIHandlerAddr;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction updateRewardPerBlockStorage(uint256 _rewardPerBlock) onlySIHandler circuitBreaker external override returns (bool)\r\n\t{\r\n\t\tmarketRewardInfo.rewardPerBlock = _rewardPerBlock;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getSIHandlerAddr() public view returns (address)\r\n\t{\r\n\t\treturn SIHandlerAddr;\r\n\t}\r\n\r\n\tfunction getRewardInfo(address userAddr) external view override returns (uint256, uint256, uint256, uint256, uint256, uint256)\r\n\t{\r\n\t\tMarketRewardInfo memory market = marketRewardInfo;\r\n\t\tUserRewardInfo memory user = userRewardInfo[userAddr];\r\n\t\treturn (market.rewardLane, market.rewardLaneUpdateAt, market.rewardPerBlock, user.rewardLane, user.rewardLaneUpdateAt, user.rewardAmount);\r\n\t}\r\n\r\n\tfunction getMarketRewardInfo() external view override returns (uint256, uint256, uint256)\r\n\t{\r\n\t\tMarketRewardInfo memory vars = marketRewardInfo;\r\n\t\treturn (vars.rewardLane, vars.rewardLaneUpdateAt, vars.rewardPerBlock);\r\n\t}\r\n\r\n\tfunction setMarketRewardInfo(uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardPerBlock) onlySIHandler circuitBreaker external override returns (bool)\r\n\t{\r\n\t\tMarketRewardInfo memory vars;\r\n\t\tvars.rewardLane = _rewardLane;\r\n\t\tvars.rewardLaneUpdateAt = _rewardLaneUpdateAt;\r\n\t\tvars.rewardPerBlock = _rewardPerBlock;\r\n\t\tmarketRewardInfo = vars;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getUserRewardInfo(address userAddr) external view override returns (uint256, uint256, uint256)\r\n\t{\r\n\t\tUserRewardInfo memory vars = userRewardInfo[userAddr];\r\n\t\treturn (vars.rewardLane, vars.rewardLaneUpdateAt, vars.rewardAmount);\r\n\t}\r\n\r\n\tfunction setUserRewardInfo(address userAddr, uint256 _rewardLane, uint256 _rewardLaneUpdateAt, uint256 _rewardAmount) onlySIHandler circuitBreaker external override returns (bool)\r\n\t{\r\n\t\tUserRewardInfo memory vars;\r\n\t\tvars.rewardLane = _rewardLane;\r\n\t\tvars.rewardLaneUpdateAt = _rewardLaneUpdateAt;\r\n\t\tvars.rewardAmount = _rewardAmount;\r\n\t\tuserRewardInfo[userAddr] = vars;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getBetaRate() external view override returns (uint256)\r\n\t{\r\n\t\treturn betaRate;\r\n\t}\r\n\r\n\tfunction setBetaRate(uint256 _betaRate) onlyOwner external override returns (bool)\r\n\t{\r\n\t\tbetaRate = _betaRate;\r\n\t\treturn true;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SIHandlerAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getBetaRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSIHandlerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betaRate\",\"type\":\"uint256\"}],\"name\":\"setBetaRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergency\",\"type\":\"bool\"}],\"name\":\"setCircuitBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardLane\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLaneUpdateAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setMarketRewardInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SIHandlerAddr\",\"type\":\"address\"}],\"name\":\"setSIHandlerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLane\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLaneUpdateAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setUserRewardInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlockStorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketSIHandlerDataStorage", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000093948aa8488f522d5b079af84fe411fbce476e9f", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8824a4bed5973594e993f79956cc9c71e754a087d7b418417f04a19c32e30b3f"}]}