{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/swappers/SwappersRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2022 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/swappers/ISwapper.sol\\\";\\nimport \\\"../interfaces/swappers/ISwappersRegistry.sol\\\";\\nimport \\\"../Auth2.sol\\\";\\n\\n\\ncontract SwappersRegistry is ISwappersRegistry, Auth2 {\\n\\n    struct SwapperInfo {\\n        uint240 id;\\n        bool exists;\\n    }\\n\\n    mapping(ISwapper => SwapperInfo) internal swappersInfo;\\n    ISwapper[] internal swappers;\\n\\n    constructor(address _vaultParameters) Auth2(_vaultParameters) {}\\n\\n    function getSwappersLength() external view override returns (uint) {\\n        return swappers.length;\\n    }\\n\\n    function getSwapperId(ISwapper _swapper) external view override returns (uint) {\\n        require(hasSwapper(_swapper), \\\"Unit Protocol Swappers: SWAPPER_IS_NOT_EXIST\\\");\\n\\n        return uint(swappersInfo[_swapper].id);\\n    }\\n\\n    function getSwapper(uint _id) external view override returns (ISwapper) {\\n        return swappers[_id];\\n    }\\n\\n    function hasSwapper(ISwapper _swapper) public view override returns (bool) {\\n        return swappersInfo[_swapper].exists;\\n    }\\n\\n    function getSwappers() external view override returns (ISwapper[] memory) {\\n        return swappers;\\n    }\\n\\n    function add(ISwapper _swapper) public onlyManager {\\n        require(address(_swapper) != address(0), \\\"Unit Protocol Swappers: ZERO_ADDRESS\\\");\\n        require(!hasSwapper(_swapper), \\\"Unit Protocol Swappers: SWAPPER_ALREADY_EXISTS\\\");\\n\\n        swappers.push(_swapper);\\n        swappersInfo[_swapper] = SwapperInfo(uint240(swappers.length - 1), true);\\n\\n        emit SwapperAdded(_swapper);\\n    }\\n\\n    function remove(ISwapper _swapper) public onlyManager {\\n        require(address(_swapper) != address(0), \\\"Unit Protocol Swappers: ZERO_ADDRESS\\\");\\n        require(hasSwapper(_swapper), \\\"Unit Protocol Swappers: SWAPPER_IS_NOT_EXIST\\\");\\n\\n        uint id = uint(swappersInfo[_swapper].id);\\n        delete swappersInfo[_swapper];\\n\\n        uint lastId = swappers.length - 1;\\n        if (id != lastId) {\\n            ISwapper lastSwapper = swappers[lastId];\\n            swappers[id] = lastSwapper;\\n            swappersInfo[lastSwapper] = SwapperInfo(uint240(id), true);\\n        }\\n        swappers.pop();\\n\\n        emit SwapperRemoved(_swapper);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swappers/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2022 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\ninterface ISwapper {\\n\\n    /**\\n     * @notice Predict asset amount after usdp swap\\n     */\\n    function predictAssetOut(address _asset, uint256 _usdpAmountIn) external view returns (uint predictedAssetAmount);\\n\\n    /**\\n     * @notice Predict USDP amount after asset swap\\n     */\\n    function predictUsdpOut(address _asset, uint256 _assetAmountIn) external view returns (uint predictedUsdpAmount);\\n\\n    /**\\n     * @notice usdp must be approved to swapper\\n     * @dev asset must be sent to user after swap\\n     */\\n    function swapUsdpToAsset(address _user, address _asset, uint256 _usdpAmount, uint256 _minAssetAmount) external returns (uint swappedAssetAmount);\\n\\n    /**\\n     * @notice asset must be approved to swapper\\n     * @dev usdp must be sent to user after swap\\n     */\\n    function swapAssetToUsdp(address _user, address _asset, uint256 _assetAmount, uint256 _minUsdpAmount) external returns (uint swappedUsdpAmount);\\n\\n    /**\\n     * @notice DO NOT SEND tokens to contract manually. For usage in contracts only.\\n     * @dev for gas saving with usage in contracts tokens must be send directly to contract instead\\n     * @dev asset must be sent to user after swap\\n     */\\n    function swapUsdpToAssetWithDirectSending(address _user, address _asset, uint256 _usdpAmount, uint256 _minAssetAmount) external returns (uint swappedAssetAmount);\\n\\n    /**\\n     * @notice DO NOT SEND tokens to contract manually. For usage in contracts only.\\n     * @dev for gas saving with usage in contracts tokens must be send directly to contract instead\\n     * @dev usdp must be sent to user after swap\\n     */\\n    function swapAssetToUsdpWithDirectSending(address _user, address _asset, uint256 _assetAmount, uint256 _minUsdpAmount) external returns (uint swappedUsdpAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swappers/ISwappersRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2022 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"./ISwapper.sol\\\";\\n\\n\\ninterface ISwappersRegistry {\\n    event SwapperAdded(ISwapper swapper);\\n    event SwapperRemoved(ISwapper swapper);\\n\\n    function getSwapperId(ISwapper _swapper) external view returns (uint);\\n    function getSwapper(uint _id) external view returns (ISwapper);\\n    function hasSwapper(ISwapper _swapper) external view returns (bool);\\n\\n    function getSwappersLength() external view returns (uint);\\n    function getSwappers() external view returns (ISwapper[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Auth2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"./VaultParameters.sol\\\";\\n\\n\\n/**\\n * @title Auth2\\n * @dev Manages USDP's system access\\n * @dev copy of Auth from VaultParameters.sol but with immutable vaultParameters for saving gas\\n **/\\ncontract Auth2 {\\n\\n    // address of the the contract with vault parameters\\n    VaultParameters public immutable vaultParameters;\\n\\n    constructor(address _parameters) {\\n        require(_parameters != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n\\n        vaultParameters = VaultParameters(_parameters);\\n    }\\n\\n    // ensures tx's sender is a manager\\n    modifier onlyManager() {\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is able to modify the Vault\\n    modifier hasVaultAccess() {\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is the Vault\\n    modifier onlyVault() {\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n\\n/**\\n * @title Auth\\n * @dev Manages USDP's system access\\n **/\\ncontract Auth {\\n\\n    // address of the the contract with vault parameters\\n    VaultParameters public vaultParameters;\\n\\n    constructor(address _parameters) {\\n        vaultParameters = VaultParameters(_parameters);\\n    }\\n\\n    // ensures tx's sender is a manager\\n    modifier onlyManager() {\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is able to modify the Vault\\n    modifier hasVaultAccess() {\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is the Vault\\n    modifier onlyVault() {\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\\n\\n\\n/**\\n * @title VaultParameters\\n **/\\ncontract VaultParameters is Auth {\\n\\n    // map token to stability fee percentage; 3 decimals\\n    mapping(address => uint) public stabilityFee;\\n\\n    // map token to liquidation fee percentage, 0 decimals\\n    mapping(address => uint) public liquidationFee;\\n\\n    // map token to USDP mint limit\\n    mapping(address => uint) public tokenDebtLimit;\\n\\n    // permissions to modify the Vault\\n    mapping(address => bool) public canModifyVault;\\n\\n    // managers\\n    mapping(address => bool) public isManager;\\n\\n    // enabled oracle types\\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\\n\\n    // address of the Vault\\n    address payable public vault;\\n\\n    // The foundation address\\n    address public foundation;\\n\\n    /**\\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\\n     * hashed with Keccak-256.\\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\\n    **/\\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n\\n        isManager[msg.sender] = true;\\n        vault = _vault;\\n        foundation = _foundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Grants and revokes manager's status of any address\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setManager(address who, bool permit) external onlyManager {\\n        isManager[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the foundation address\\n     * @param newFoundation The new foundation address\\n     **/\\n    function setFoundation(address newFoundation) external onlyManager {\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        foundation = newFoundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets ability to use token as the main collateral\\n     * @param asset The address of the main collateral token\\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\\n     * @param usdpLimit The USDP token issue limit\\n     * @param oracles The enables oracle types\\n     **/\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValue,\\n        uint liquidationFeeValue,\\n        uint usdpLimit,\\n        uint[] calldata oracles\\n    ) external onlyManager {\\n        setStabilityFee(asset, stabilityFeeValue);\\n        setLiquidationFee(asset, liquidationFeeValue);\\n        setTokenDebtLimit(asset, usdpLimit);\\n        for (uint i=0; i < oracles.length; i++) {\\n            setOracleType(oracles[i], asset, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a permission for an address to modify the Vault\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setVaultAccess(address who, bool permit) external onlyManager {\\n        canModifyVault[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the year stability fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The stability fee percentage (3 decimals)\\n     **/\\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\\n        stabilityFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The liquidation fee percentage (0 decimals)\\n     **/\\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\n        liquidationFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Enables/disables oracle types\\n     * @param _type The type of the oracle\\n     * @param asset The address of the main collateral token\\n     * @param enabled The control flag\\n     **/\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\\n        isOracleTypeEnabled[_type][asset] = enabled;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets USDP limit for a specific collateral\\n     * @param asset The address of the main collateral token\\n     * @param limit The limit number\\n     **/\\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\\n        tokenDebtLimit[asset] = limit;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"SwapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"SwapperRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSwapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"getSwapperId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwappers\",\"outputs\":[{\"internalType\":\"contract ISwapper[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwappersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"hasSwapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwappersRegistry", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}