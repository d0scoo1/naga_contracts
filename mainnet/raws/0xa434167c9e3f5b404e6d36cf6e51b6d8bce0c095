{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MaticX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IValidatorShare.sol\\\";\\nimport \\\"./interfaces/IValidatorRegistry.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IMaticX.sol\\\";\\n\\ncontract MaticX is\\n\\tIMaticX,\\n\\tERC20Upgradeable,\\n\\tAccessControlUpgradeable,\\n\\tPausableUpgradeable\\n{\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\taddress private validatorRegistry;\\n\\taddress private stakeManager;\\n\\taddress private polygonERC20;\\n\\n\\taddress public override treasury;\\n\\tstring public override version;\\n\\tuint8 public override feePercent;\\n\\n\\tbytes32 public constant INSTANT_POOL_OWNER = keccak256(\\\"IPO\\\");\\n\\taddress public override instantPoolOwner;\\n\\tuint256 public override instantPoolMatic;\\n\\tuint256 public override instantPoolMaticX;\\n\\n\\t/// @notice Mapping of all user ids with withdraw requests.\\n\\tmapping(address => WithdrawalRequest[]) private userWithdrawalRequests;\\n\\n\\t/**\\n\\t * @param _validatorRegistry - Address of the validator registry\\n\\t * @param _stakeManager - Address of the stake manager\\n\\t * @param _polygonERC20 - Address of matic token on Ethereum\\n\\t * @param _manager - Address of the manager\\n\\t * @param _instantPoolOwner - Address of the instant pool owner\\n\\t * @param _treasury - Address of the treasury\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _validatorRegistry,\\n\\t\\taddress _stakeManager,\\n\\t\\taddress _polygonERC20,\\n\\t\\taddress _manager,\\n\\t\\taddress _instantPoolOwner,\\n\\t\\taddress _treasury\\n\\t) external override initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t__Pausable_init();\\n\\t\\t__ERC20_init(\\\"Liquid Staking Matic\\\", \\\"MaticX\\\");\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, _manager);\\n\\t\\t_setupRole(INSTANT_POOL_OWNER, _instantPoolOwner);\\n\\t\\tinstantPoolOwner = _instantPoolOwner;\\n\\n\\t\\tvalidatorRegistry = _validatorRegistry;\\n\\t\\tstakeManager = _stakeManager;\\n\\t\\ttreasury = _treasury;\\n\\t\\tpolygonERC20 = _polygonERC20;\\n\\n\\t\\tfeePercent = 5;\\n\\n\\t\\tIERC20Upgradeable(polygonERC20).safeApprove(\\n\\t\\t\\tstakeManager,\\n\\t\\t\\ttype(uint256).max\\n\\t\\t);\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////\\n\\t/////                                                    ///\\n\\t/////             ***Instant Pool Interactions***        ///\\n\\t/////                                                    ///\\n\\t////////////////////////////////////////////////////////////\\n\\n\\t// Uses instantPoolOwner funds.\\n\\tfunction provideInstantPoolMatic(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(INSTANT_POOL_OWNER)\\n\\t{\\n\\t\\trequire(_amount > 0, \\\"Invalid amount\\\");\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\tinstantPoolMatic += _amount;\\n\\t}\\n\\n\\tfunction provideInstantPoolMaticX(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(INSTANT_POOL_OWNER)\\n\\t{\\n\\t\\trequire(_amount > 0, \\\"Invalid amount\\\");\\n\\t\\tIERC20Upgradeable(address(this)).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\tinstantPoolMaticX += _amount;\\n\\t}\\n\\n\\tfunction withdrawInstantPoolMaticX(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(INSTANT_POOL_OWNER)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tinstantPoolMaticX >= _amount,\\n\\t\\t\\t\\\"Withdraw amount cannot exceed maticX in instant pool\\\"\\n\\t\\t);\\n\\n\\t\\tinstantPoolMaticX -= _amount;\\n\\t\\tIERC20Upgradeable(address(this)).safeTransfer(\\n\\t\\t\\tinstantPoolOwner,\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\t}\\n\\n\\tfunction withdrawInstantPoolMatic(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(INSTANT_POOL_OWNER)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tinstantPoolMatic >= _amount,\\n\\t\\t\\t\\\"Withdraw amount cannot exceed matic in instant pool\\\"\\n\\t\\t);\\n\\n\\t\\tinstantPoolMatic -= _amount;\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransfer(instantPoolOwner, _amount);\\n\\t}\\n\\n\\t// Uses instantPoolMatic funds\\n\\tfunction mintMaticXToInstantPool()\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(INSTANT_POOL_OWNER)\\n\\t{\\n\\t\\trequire(instantPoolMatic > 0, \\\"Matic amount cannot be 0\\\");\\n\\n\\t\\tuint256 maticxMinted = helper_delegate_to_mint(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tinstantPoolMatic\\n\\t\\t);\\n\\t\\tinstantPoolMaticX += maticxMinted;\\n\\t\\tinstantPoolMatic = 0;\\n\\t}\\n\\n\\tfunction swapMaticForMaticXViaInstantPool(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t{\\n\\t\\trequire(_amount > 0, \\\"Invalid amount\\\");\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\t(uint256 amountToMint, , ) = convertMaticToMaticX(_amount);\\n\\t\\trequire(\\n\\t\\t\\tinstantPoolMaticX >= amountToMint,\\n\\t\\t\\t\\\"Not enough maticX to instant swap\\\"\\n\\t\\t);\\n\\n\\t\\tIERC20Upgradeable(address(this)).safeTransfer(msg.sender, amountToMint);\\n\\t\\tinstantPoolMatic += _amount;\\n\\t\\tinstantPoolMaticX -= amountToMint;\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////\\n\\t/////                                                    ///\\n\\t/////             ***Staking Contract Interactions***    ///\\n\\t/////                                                    ///\\n\\t////////////////////////////////////////////////////////////\\n\\n\\t/**\\n\\t * @dev Send funds to MaticX contract and mints MaticX to msg.sender\\n\\t * @notice Requires that msg.sender has approved _amount of MATIC to this contract\\n\\t * @param _amount - Amount of MATIC sent from msg.sender to this contract\\n\\t * @return Amount of MaticX shares generated\\n\\t */\\n\\tfunction submit(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(_amount > 0, \\\"Invalid amount\\\");\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\treturn helper_delegate_to_mint(msg.sender, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Stores user's request to withdraw into WithdrawalRequest struct\\n\\t * @param _amount - Amount of maticX that is requested to withdraw\\n\\t */\\n\\tfunction requestWithdraw(uint256 _amount) external override whenNotPaused {\\n\\t\\trequire(_amount > 0, \\\"Invalid amount\\\");\\n\\n\\t\\t(uint256 totalAmount2WithdrawInMatic, , ) = convertMaticXToMatic(\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\t_burn(msg.sender, _amount);\\n\\n\\t\\tuint256 leftAmount2WithdrawInMatic = totalAmount2WithdrawInMatic;\\n\\t\\tuint256 totalDelegated = getTotalStakeAcrossAllValidators();\\n\\n\\t\\trequire(\\n\\t\\t\\ttotalDelegated >= totalAmount2WithdrawInMatic,\\n\\t\\t\\t\\\"Too much to withdraw\\\"\\n\\t\\t);\\n\\n\\t\\tuint256[] memory validators = IValidatorRegistry(validatorRegistry)\\n\\t\\t\\t.getValidators();\\n\\t\\tuint256 preferredValidatorId = IValidatorRegistry(validatorRegistry)\\n\\t\\t\\t.preferredWithdrawalValidatorId();\\n\\t\\tuint256 currentIdx = 0;\\n\\t\\tfor (; currentIdx < validators.length; ++currentIdx) {\\n\\t\\t\\tif (preferredValidatorId == validators[currentIdx]) break;\\n\\t\\t}\\n\\n\\t\\twhile (leftAmount2WithdrawInMatic > 0) {\\n\\t\\t\\tuint256 validatorId = validators[currentIdx];\\n\\n\\t\\t\\taddress validatorShare = IStakeManager(stakeManager)\\n\\t\\t\\t\\t.getValidatorContract(validatorId);\\n\\t\\t\\t(uint256 validatorBalance, ) = getTotalStake(\\n\\t\\t\\t\\tIValidatorShare(validatorShare)\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 amount2WithdrawFromValidator = (validatorBalance <=\\n\\t\\t\\t\\tleftAmount2WithdrawInMatic)\\n\\t\\t\\t\\t? validatorBalance\\n\\t\\t\\t\\t: leftAmount2WithdrawInMatic;\\n\\n\\t\\t\\tIValidatorShare(validatorShare).sellVoucher_new(\\n\\t\\t\\t\\tamount2WithdrawFromValidator,\\n\\t\\t\\t\\ttype(uint256).max\\n\\t\\t\\t);\\n\\n\\t\\t\\tuserWithdrawalRequests[msg.sender].push(\\n\\t\\t\\t\\tWithdrawalRequest(\\n\\t\\t\\t\\t\\tIValidatorShare(validatorShare).unbondNonces(address(this)),\\n\\t\\t\\t\\t\\tIStakeManager(stakeManager).epoch() +\\n\\t\\t\\t\\t\\t\\tIStakeManager(stakeManager).withdrawalDelay(),\\n\\t\\t\\t\\t\\tvalidatorShare\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\n\\t\\t\\tleftAmount2WithdrawInMatic -= amount2WithdrawFromValidator;\\n\\t\\t\\tcurrentIdx = currentIdx + 1 < validators.length\\n\\t\\t\\t\\t? currentIdx + 1\\n\\t\\t\\t\\t: 0;\\n\\t\\t}\\n\\n\\t\\temit RequestWithdraw(msg.sender, _amount, totalAmount2WithdrawInMatic);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Claims tokens from validator share and sends them to the\\n\\t * address if the request is in the userWithdrawalRequests\\n\\t * @param _idx - User withdrawal request array index\\n\\t */\\n\\tfunction claimWithdrawal(uint256 _idx) external override whenNotPaused {\\n\\t\\t_claimWithdrawal(msg.sender, _idx);\\n\\t}\\n\\n\\tfunction withdrawRewards(uint256 _validatorId)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\taddress validatorShare = IStakeManager(stakeManager)\\n\\t\\t\\t.getValidatorContract(_validatorId);\\n\\n\\t\\tuint256 balanceBeforeRewards = IERC20Upgradeable(polygonERC20)\\n\\t\\t\\t.balanceOf(address(this));\\n\\t\\tIValidatorShare(validatorShare).withdrawRewards();\\n\\t\\tuint256 rewards = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t) - balanceBeforeRewards;\\n\\n\\t\\temit WithdrawRewards(_validatorId, rewards);\\n\\t\\treturn rewards;\\n\\t}\\n\\n\\tfunction stakeRewardsAndDistributeFees(uint256 _validatorId)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tIValidatorRegistry(validatorRegistry).validatorIdExists(\\n\\t\\t\\t\\t_validatorId\\n\\t\\t\\t),\\n\\t\\t\\t\\\"Doesn't exist in validator registry\\\"\\n\\t\\t);\\n\\n\\t\\taddress validatorShare = IStakeManager(stakeManager)\\n\\t\\t\\t.getValidatorContract(_validatorId);\\n\\n\\t\\tuint256 rewards = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t) - instantPoolMatic;\\n\\n\\t\\trequire(rewards > 0, \\\"Reward is zero\\\");\\n\\n\\t\\tuint256 treasuryFees = (rewards * feePercent) / 100;\\n\\n\\t\\tif (treasuryFees > 0) {\\n\\t\\t\\tIERC20Upgradeable(polygonERC20).safeTransfer(\\n\\t\\t\\t\\ttreasury,\\n\\t\\t\\t\\ttreasuryFees\\n\\t\\t\\t);\\n\\t\\t\\temit DistributeFees(treasury, treasuryFees);\\n\\t\\t}\\n\\n\\t\\tuint256 amountStaked = rewards - treasuryFees;\\n\\t\\tIValidatorShare(validatorShare).buyVoucher(amountStaked, 0);\\n\\n\\t\\temit StakeRewards(_validatorId, amountStaked);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Migrate the staked tokens to another validaor\\n\\t */\\n\\tfunction migrateDelegation(\\n\\t\\tuint256 _fromValidatorId,\\n\\t\\tuint256 _toValidatorId,\\n\\t\\tuint256 _amount\\n\\t) external override whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(\\n\\t\\t\\tIValidatorRegistry(validatorRegistry).validatorIdExists(\\n\\t\\t\\t\\t_fromValidatorId\\n\\t\\t\\t),\\n\\t\\t\\t\\\"From validator id does not exist in our registry\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tIValidatorRegistry(validatorRegistry).validatorIdExists(\\n\\t\\t\\t\\t_toValidatorId\\n\\t\\t\\t),\\n\\t\\t\\t\\\"To validator id does not exist in our registry\\\"\\n\\t\\t);\\n\\n\\t\\tIStakeManager(stakeManager).migrateDelegation(\\n\\t\\t\\t_fromValidatorId,\\n\\t\\t\\t_toValidatorId,\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\temit MigrateDelegation(_fromValidatorId, _toValidatorId, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Flips the pause state\\n\\t */\\n\\tfunction togglePause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tpaused() ? _unpause() : _pause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev API for getting total stake of this contract from validatorShare\\n\\t * @param _validatorShare - Address of validatorShare contract\\n\\t * @return Total stake of this contract and MATIC -> share exchange rate\\n\\t */\\n\\tfunction getTotalStake(IValidatorShare _validatorShare)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256, uint256)\\n\\t{\\n\\t\\treturn _validatorShare.getTotalStake(address(this));\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////\\n\\t/////                                                    ///\\n\\t/////            ***Helpers & Utilities***               ///\\n\\t/////                                                    ///\\n\\t////////////////////////////////////////////////////////////\\n\\n\\tfunction helper_delegate_to_mint(address deposit_sender, uint256 _amount)\\n\\t\\tinternal\\n\\t\\twhenNotPaused\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t(uint256 amountToMint, , ) = convertMaticToMaticX(_amount);\\n\\n\\t\\t_mint(deposit_sender, amountToMint);\\n\\t\\temit Submit(deposit_sender, _amount);\\n\\n\\t\\tuint256 preferredValidatorId = IValidatorRegistry(validatorRegistry)\\n\\t\\t\\t.preferredDepositValidatorId();\\n\\t\\taddress validatorShare = IStakeManager(stakeManager)\\n\\t\\t\\t.getValidatorContract(preferredValidatorId);\\n\\t\\tIValidatorShare(validatorShare).buyVoucher(_amount, 0);\\n\\n\\t\\temit Delegate(preferredValidatorId, _amount);\\n\\t\\treturn amountToMint;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Claims tokens from validator share and sends them to the\\n\\t * address if the request is in the userWithdrawalRequests\\n\\t * @param _to - Address of the withdrawal request owner\\n\\t * @param _idx - User withdrawal request array index\\n\\t */\\n\\tfunction _claimWithdrawal(address _to, uint256 _idx)\\n\\t\\tinternal\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 amountToClaim = 0;\\n\\t\\tuint256 balanceBeforeClaim = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tWithdrawalRequest[] storage userRequests = userWithdrawalRequests[_to];\\n\\t\\tWithdrawalRequest memory userRequest = userRequests[_idx];\\n\\t\\trequire(\\n\\t\\t\\tIStakeManager(stakeManager).epoch() >= userRequest.requestEpoch,\\n\\t\\t\\t\\\"Not able to claim yet\\\"\\n\\t\\t);\\n\\n\\t\\tIValidatorShare(userRequest.validatorAddress).unstakeClaimTokens_new(\\n\\t\\t\\tuserRequest.validatorNonce\\n\\t\\t);\\n\\n\\t\\t// swap with the last item and pop it.\\n\\t\\tuserRequests[_idx] = userRequests[userRequests.length - 1];\\n\\t\\tuserRequests.pop();\\n\\n\\t\\tamountToClaim =\\n\\t\\t\\tIERC20Upgradeable(polygonERC20).balanceOf(address(this)) -\\n\\t\\t\\tbalanceBeforeClaim;\\n\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransfer(_to, amountToClaim);\\n\\n\\t\\temit ClaimWithdrawal(_to, _idx, amountToClaim);\\n\\t\\treturn amountToClaim;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that converts arbitrary maticX to Matic\\n\\t * @param _balance - Balance in maticX\\n\\t * @return Balance in Matic, totalShares and totalPooledMATIC\\n\\t */\\n\\tfunction convertMaticXToMatic(uint256 _balance)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 totalShares = totalSupply();\\n\\t\\ttotalShares = totalShares == 0 ? 1 : totalShares;\\n\\n\\t\\tuint256 totalPooledMATIC = getTotalPooledMatic();\\n\\t\\ttotalPooledMATIC = totalPooledMATIC == 0 ? 1 : totalPooledMATIC;\\n\\n\\t\\tuint256 balanceInMATIC = (_balance * (totalPooledMATIC)) / totalShares;\\n\\n\\t\\treturn (balanceInMATIC, totalShares, totalPooledMATIC);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that converts arbitrary Matic to maticX\\n\\t * @param _balance - Balance in Matic\\n\\t * @return Balance in maticX, totalShares and totalPooledMATIC\\n\\t */\\n\\tfunction convertMaticToMaticX(uint256 _balance)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 totalShares = totalSupply();\\n\\t\\ttotalShares = totalShares == 0 ? 1 : totalShares;\\n\\n\\t\\tuint256 totalPooledMatic = getTotalPooledMatic();\\n\\t\\ttotalPooledMatic = totalPooledMatic == 0 ? 1 : totalPooledMatic;\\n\\n\\t\\tuint256 balanceInMaticX = (_balance * totalShares) / totalPooledMatic;\\n\\n\\t\\treturn (balanceInMaticX, totalShares, totalPooledMatic);\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////\\n\\t/////                                                    ///\\n\\t/////                 ***Setters***                      ///\\n\\t/////                                                    ///\\n\\t////////////////////////////////////////////////////////////\\n\\n\\t/**\\n\\t * @dev Function that sets fee percent\\n\\t * @notice Callable only by manager\\n\\t * @param _feePercent - Fee percent (10 = 10%)\\n\\t */\\n\\tfunction setFeePercent(uint8 _feePercent)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(_feePercent <= 100, \\\"_feePercent must not exceed 100\\\");\\n\\n\\t\\tfeePercent = _feePercent;\\n\\n\\t\\temit SetFeePercent(_feePercent);\\n\\t}\\n\\n\\tfunction setInstantPoolOwner(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(instantPoolOwner != _address, \\\"Old address == new address\\\");\\n\\n\\t\\t_revokeRole(INSTANT_POOL_OWNER, instantPoolOwner);\\n\\t\\tinstantPoolOwner = _address;\\n\\t\\t_setupRole(INSTANT_POOL_OWNER, _address);\\n\\n\\t\\temit SetInstantPoolOwner(_address);\\n\\t}\\n\\n\\tfunction setTreasury(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\ttreasury = _address;\\n\\n\\t\\temit SetTreasury(_address);\\n\\t}\\n\\n\\tfunction setValidatorRegistry(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\tvalidatorRegistry = _address;\\n\\n\\t\\temit SetValidatorRegistry(_address);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that sets the new version\\n\\t * @param _version - New version that will be set\\n\\t */\\n\\tfunction setVersion(string calldata _version)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\tversion = _version;\\n\\n\\t\\temit SetVersion(_version);\\n\\t}\\n\\n\\t////////////////////////////////////////////////////////////\\n\\t/////                                                    ///\\n\\t/////                 ***Getters***                      ///\\n\\t/////                                                    ///\\n\\t////////////////////////////////////////////////////////////\\n\\n\\t/**\\n\\t * @dev Helper function for that returns total pooled MATIC\\n\\t * @return Total pooled MATIC\\n\\t */\\n\\tfunction getTotalStakeAcrossAllValidators()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 totalStake;\\n\\t\\tuint256[] memory validators = IValidatorRegistry(validatorRegistry)\\n\\t\\t\\t.getValidators();\\n\\t\\tfor (uint256 i = 0; i < validators.length; ++i) {\\n\\t\\t\\taddress validatorShare = IStakeManager(stakeManager)\\n\\t\\t\\t\\t.getValidatorContract(validators[i]);\\n\\t\\t\\t(uint256 currValidatorShare, ) = getTotalStake(\\n\\t\\t\\t\\tIValidatorShare(validatorShare)\\n\\t\\t\\t);\\n\\n\\t\\t\\ttotalStake += currValidatorShare;\\n\\t\\t}\\n\\n\\t\\treturn totalStake;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that calculates total pooled Matic\\n\\t * @return Total pooled Matic\\n\\t */\\n\\tfunction getTotalPooledMatic() public view override returns (uint256) {\\n\\t\\tuint256 totalStaked = getTotalStakeAcrossAllValidators();\\n\\t\\treturn totalStaked;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Retrieves all withdrawal requests initiated by the given address\\n\\t * @param _address - Address of an user\\n\\t * @return userWithdrawalRequests array of user withdrawal requests\\n\\t */\\n\\tfunction getUserWithdrawalRequests(address _address)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (WithdrawalRequest[] memory)\\n\\t{\\n\\t\\treturn userWithdrawalRequests[_address];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Retrieves shares amount of a given withdrawal request\\n\\t * @param _address - Address of an user\\n\\t * @return _idx index of the withdrawal request\\n\\t */\\n\\tfunction getSharesAmountOfUserWithdrawalRequest(\\n\\t\\taddress _address,\\n\\t\\tuint256 _idx\\n\\t) external view override returns (uint256) {\\n\\t\\tWithdrawalRequest memory userRequest = userWithdrawalRequests[_address][\\n\\t\\t\\t_idx\\n\\t\\t];\\n\\t\\tIValidatorShare validatorShare = IValidatorShare(\\n\\t\\t\\tuserRequest.validatorAddress\\n\\t\\t);\\n\\t\\tIValidatorShare.DelegatorUnbond memory unbond = validatorShare\\n\\t\\t\\t.unbonds_new(address(this), userRequest.validatorNonce);\\n\\n\\t\\treturn unbond.shares;\\n\\t}\\n\\n\\tfunction getContracts()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\taddress _stakeManager,\\n\\t\\t\\taddress _polygonERC20,\\n\\t\\t\\taddress _validatorRegistry\\n\\t\\t)\\n\\t{\\n\\t\\t_stakeManager = stakeManager;\\n\\t\\t_polygonERC20 = polygonERC20;\\n\\t\\t_validatorRegistry = validatorRegistry;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IValidatorShare {\\n\\tstruct DelegatorUnbond {\\n\\t\\tuint256 shares;\\n\\t\\tuint256 withdrawEpoch;\\n\\t}\\n\\n\\tfunction minAmount() external view returns (uint256);\\n\\n\\tfunction unbondNonces(address _address) external view returns (uint256);\\n\\n\\tfunction validatorId() external view returns (uint256);\\n\\n\\tfunction delegation() external view returns (bool);\\n\\n\\tfunction buyVoucher(uint256 _amount, uint256 _minSharesToMint)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n\\n\\tfunction sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn)\\n\\t\\texternal;\\n\\n\\tfunction unstakeClaimTokens_new(uint256 unbondNonce) external;\\n\\n\\tfunction restake() external returns (uint256, uint256);\\n\\n\\tfunction withdrawRewards() external;\\n\\n\\tfunction getTotalStake(address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\tfunction unbonds_new(address _address, uint256 _unbondNonce)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (DelegatorUnbond memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title IValidatorRegistry\\n/// @notice Node validator registry interface\\ninterface IValidatorRegistry {\\n\\tfunction addValidator(uint256 _validatorId) external;\\n\\n\\tfunction removeValidator(uint256 _validatorId) external;\\n\\n\\tfunction setPreferredDepositValidatorId(uint256 _validatorId) external;\\n\\n\\tfunction setPreferredWithdrawalValidatorId(uint256 _validatorId) external;\\n\\n\\tfunction setMaticX(address _maticX) external;\\n\\n\\tfunction setVersion(string memory _version) external;\\n\\n\\tfunction togglePause() external;\\n\\n\\tfunction version() external view returns (string memory);\\n\\n\\tfunction preferredDepositValidatorId() external view returns (uint256);\\n\\n\\tfunction preferredWithdrawalValidatorId() external view returns (uint256);\\n\\n\\tfunction validatorIdExists(uint256 _validatorId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\tfunction getContracts()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress _stakeManager,\\n\\t\\t\\taddress _polygonERC20,\\n\\t\\t\\taddress _maticX\\n\\t\\t);\\n\\n\\tfunction getValidatorId(uint256 _index) external view returns (uint256);\\n\\n\\tfunction getValidators() external view returns (uint256[] memory);\\n\\n\\tevent AddValidator(uint256 indexed _validatorId);\\n\\tevent RemoveValidator(uint256 indexed _validatorId);\\n\\tevent SetPreferredDepositValidatorId(uint256 indexed _validatorId);\\n\\tevent SetPreferredWithdrawalValidatorId(uint256 indexed _validatorId);\\n\\tevent SetMaticX(address _address);\\n\\tevent SetVersion(string _version);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title polygon stake manager interface.\\n/// @notice User to interact with the polygon stake manager.\\ninterface IStakeManager {\\n\\t/// @notice Request unstake a validator.\\n\\t/// @param validatorId validator id.\\n\\tfunction unstake(uint256 validatorId) external;\\n\\n\\t/// @notice Get the validator id using the user address.\\n\\t/// @param user user that own the validator in our case the validator contract.\\n\\t/// @return return the validator id\\n\\tfunction getValidatorId(address user) external view returns (uint256);\\n\\n\\t/// @notice get the validator contract used for delegation.\\n\\t/// @param validatorId validator id.\\n\\t/// @return return the address of the validator contract.\\n\\tfunction getValidatorContract(uint256 validatorId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address);\\n\\n\\t/// @notice Withdraw accumulated rewards\\n\\t/// @param validatorId validator id.\\n\\tfunction withdrawRewards(uint256 validatorId) external;\\n\\n\\t/// @notice Get validator total staked.\\n\\t/// @param validatorId validator id.\\n\\tfunction validatorStake(uint256 validatorId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/// @notice Allows to unstake the staked tokens on the stakeManager.\\n\\t/// @param validatorId validator id.\\n\\tfunction unstakeClaim(uint256 validatorId) external;\\n\\n\\t/// @notice Allows to migrate the staked tokens to another validator.\\n\\t/// @param fromValidatorId From validator id.\\n\\t/// @param toValidatorId To validator id.\\n\\t/// @param amount amount in Matic.\\n\\tfunction migrateDelegation(\\n\\t\\tuint256 fromValidatorId,\\n\\t\\tuint256 toValidatorId,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\t/// @notice Returns a withdrawal delay.\\n\\tfunction withdrawalDelay() external view returns (uint256);\\n\\n\\t/// @notice Transfers amount from delegator\\n\\tfunction delegationDeposit(\\n\\t\\tuint256 validatorId,\\n\\t\\tuint256 amount,\\n\\t\\taddress delegator\\n\\t) external returns (bool);\\n\\n\\tfunction epoch() external view returns (uint256);\\n\\n\\tenum Status {\\n\\t\\tInactive,\\n\\t\\tActive,\\n\\t\\tLocked,\\n\\t\\tUnstaked\\n\\t}\\n\\n\\tstruct Validator {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 reward;\\n\\t\\tuint256 activationEpoch;\\n\\t\\tuint256 deactivationEpoch;\\n\\t\\tuint256 jailTime;\\n\\t\\taddress signer;\\n\\t\\taddress contractAddress;\\n\\t\\tStatus status;\\n\\t\\tuint256 commissionRate;\\n\\t\\tuint256 lastCommissionUpdate;\\n\\t\\tuint256 delegatorsReward;\\n\\t\\tuint256 delegatedAmount;\\n\\t\\tuint256 initialRewardPerStake;\\n\\t}\\n\\n\\tfunction validators(uint256 _index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Validator memory);\\n\\n\\t// TODO: Remove it and use stakeFor instead\\n\\tfunction createValidator(uint256 _validatorId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaticX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IValidatorShare.sol\\\";\\nimport \\\"./IValidatorRegistry.sol\\\";\\n\\n/// @title MaticX interface.\\ninterface IMaticX is IERC20Upgradeable {\\n\\tstruct WithdrawalRequest {\\n\\t\\tuint256 validatorNonce;\\n\\t\\tuint256 requestEpoch;\\n\\t\\taddress validatorAddress;\\n\\t}\\n\\n\\tfunction version() external view returns (string memory);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction feePercent() external view returns (uint8);\\n\\n\\tfunction instantPoolOwner() external view returns (address);\\n\\n\\tfunction instantPoolMatic() external view returns (uint256);\\n\\n\\tfunction instantPoolMaticX() external view returns (uint256);\\n\\n\\tfunction initialize(\\n\\t\\taddress _validatorRegistry,\\n\\t\\taddress _stakeManager,\\n\\t\\taddress _token,\\n\\t\\taddress _manager,\\n\\t\\taddress _instant_pool_manager,\\n\\t\\taddress _treasury\\n\\t) external;\\n\\n\\tfunction provideInstantPoolMatic(uint256 _amount) external;\\n\\n\\tfunction provideInstantPoolMaticX(uint256 _amount) external;\\n\\n\\tfunction withdrawInstantPoolMaticX(uint256 _amount) external;\\n\\n\\tfunction withdrawInstantPoolMatic(uint256 _amount) external;\\n\\n\\tfunction mintMaticXToInstantPool() external;\\n\\n\\tfunction swapMaticForMaticXViaInstantPool(uint256 _amount) external;\\n\\n\\tfunction submit(uint256 _amount) external returns (uint256);\\n\\n\\tfunction requestWithdraw(uint256 _amount) external;\\n\\n\\tfunction claimWithdrawal(uint256 _idx) external;\\n\\n\\tfunction withdrawRewards(uint256 _validatorId) external returns (uint256);\\n\\n\\tfunction stakeRewardsAndDistributeFees(uint256 _validatorId) external;\\n\\n\\tfunction migrateDelegation(\\n\\t\\tuint256 _fromValidatorId,\\n\\t\\tuint256 _toValidatorId,\\n\\t\\tuint256 _amount\\n\\t) external;\\n\\n\\tfunction togglePause() external;\\n\\n\\tfunction convertMaticXToMatic(uint256 _balance)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction convertMaticToMaticX(uint256 _balance)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction setFeePercent(uint8 _feePercent) external;\\n\\n\\tfunction setInstantPoolOwner(address _address) external;\\n\\n\\tfunction setValidatorRegistry(address _address) external;\\n\\n\\tfunction setTreasury(address _address) external;\\n\\n\\tfunction setVersion(string calldata _version) external;\\n\\n\\tfunction getUserWithdrawalRequests(address _address)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (WithdrawalRequest[] memory);\\n\\n\\tfunction getSharesAmountOfUserWithdrawalRequest(\\n\\t\\taddress _address,\\n\\t\\tuint256 _idx\\n\\t) external view returns (uint256);\\n\\n\\tfunction getTotalStake(IValidatorShare _validatorShare)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\tfunction getTotalStakeAcrossAllValidators() external view returns (uint256);\\n\\n\\tfunction getTotalPooledMatic() external view returns (uint256);\\n\\n\\tfunction getContracts()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress _stakeManager,\\n\\t\\t\\taddress _polygonERC20,\\n\\t\\t\\taddress _validatorRegistry\\n\\t\\t);\\n\\n\\tevent Submit(address indexed _from, uint256 _amount);\\n\\tevent Delegate(uint256 indexed _validatorId, uint256 _amountDelegated);\\n\\tevent RequestWithdraw(\\n\\t\\taddress indexed _from,\\n\\t\\tuint256 _amountMaticX,\\n\\t\\tuint256 _amountMatic\\n\\t);\\n\\tevent ClaimWithdrawal(\\n\\t\\taddress indexed _from,\\n\\t\\tuint256 indexed _idx,\\n\\t\\tuint256 _amountClaimed\\n\\t);\\n\\tevent WithdrawRewards(uint256 indexed _validatorId, uint256 _rewards);\\n\\tevent StakeRewards(uint256 indexed _validatorId, uint256 _amountStaked);\\n\\tevent DistributeFees(address indexed _address, uint256 _amount);\\n\\tevent MigrateDelegation(\\n\\t\\tuint256 indexed _fromValidatorId,\\n\\t\\tuint256 indexed _toValidatorId,\\n\\t\\tuint256 _amount\\n\\t);\\n\\tevent SetFeePercent(uint8 _feePercent);\\n\\tevent SetInstantPoolOwner(address _address);\\n\\tevent SetTreasury(address _address);\\n\\tevent SetValidatorRegistry(address _address);\\n\\tevent SetVersion(string _version);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountClaimed\",\"type\":\"uint256\"}],\"name\":\"ClaimWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountDelegated\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromValidatorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toValidatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MigrateDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountMaticX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountMatic\",\"type\":\"uint256\"}],\"name\":\"RequestWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"}],\"name\":\"SetFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetInstantPoolOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetValidatorRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"SetVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountStaked\",\"type\":\"uint256\"}],\"name\":\"StakeRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Submit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"WithdrawRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTANT_POOL_OWNER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"claimWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"convertMaticToMaticX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"convertMaticXToMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validatorRegistry\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getSharesAmountOfUserWithdrawalRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPooledMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValidatorShare\",\"name\":\"_validatorShare\",\"type\":\"address\"}],\"name\":\"getTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakeAcrossAllValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserWithdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validatorNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"internalType\":\"struct IMaticX.WithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_instantPoolOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantPoolMatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantPoolMaticX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantPoolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromValidatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toValidatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMaticXToInstantPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideInstantPoolMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideInstantPoolMaticX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInstantPoolOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setValidatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"stakeRewardsAndDistributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"submit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapMaticForMaticXViaInstantPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantPoolMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantPoolMaticX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorId\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MaticX", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}