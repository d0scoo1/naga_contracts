{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ClaimTracker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract ClaimTracker {\\n    mapping(uint256 => bool) public unclaimed;\\n    IERC721 public nft;\\n\\n    constructor(IERC721 nft_, uint256[] memory tokenIds_) {\\n        nft = nft_;\\n        for(uint256 i = 0; i<tokenIds_.length; i++){\\n            unclaimed[tokenIds_[i]] = true;\\n        }\\n    }\\n\\n    function claim(uint256 tokenId_) public {\\n        require(msg.sender == nft.ownerOf(tokenId_), \\\"Not owner of declared nft\\\");\\n        require(unclaimed[tokenId_], \\\"tokenId is unclaimable\\\");\\n        unclaimed[tokenId_] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimTracker", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000053b217e1f76925b3afd4a0d3ce0dd8e11a822846000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000680000000000000000000000000000000000000000000000000000000000000f040000000000000000000000000000000000000000000000000000000000000cc60000000000000000000000000000000000000000000000000000000000000d100000000000000000000000000000000000000000000000000000000000000ed300000000000000000000000000000000000000000000000000000000000011080000000000000000000000000000000000000000000000000000000000000d2700000000000000000000000000000000000000000000000000000000000016b700000000000000000000000000000000000000000000000000000000000019fc00000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000f6f00000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000b1a000000000000000000000000000000000000000000000000000000000000171600000000000000000000000000000000000000000000000000000000000017840000000000000000000000000000000000000000000000000000000000000a6f000000000000000000000000000000000000000000000000000000000000113600000000000000000000000000000000000000000000000000000000000002480000000000000000000000000000000000000000000000000000000000000b4b0000000000000000000000000000000000000000000000000000000000000ece000000000000000000000000000000000000000000000000000000000000174a00000000000000000000000000000000000000000000000000000000000019f50000000000000000000000000000000000000000000000000000000000001a29000000000000000000000000000000000000000000000000000000000000146300000000000000000000000000000000000000000000000000000000000010a1000000000000000000000000000000000000000000000000000000000000056400000000000000000000000000000000000000000000000000000000000007ed00000000000000000000000000000000000000000000000000000000000003c800000000000000000000000000000000000000000000000000000000000008c7000000000000000000000000000000000000000000000000000000000000018900000000000000000000000000000000000000000000000000000000000000e60000000000000000000000000000000000000000000000000000000000000c5c0000000000000000000000000000000000000000000000000000000000000fe500000000000000000000000000000000000000000000000000000000000010e500000000000000000000000000000000000000000000000000000000000016f700000000000000000000000000000000000000000000000000000000000017ec00000000000000000000000000000000000000000000000000000000000016e5000000000000000000000000000000000000000000000000000000000000021e000000000000000000000000000000000000000000000000000000000000076f00000000000000000000000000000000000000000000000000000000000019d700000000000000000000000000000000000000000000000000000000000010b30000000000000000000000000000000000000000000000000000000000000971000000000000000000000000000000000000000000000000000000000000048d00000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000d1800000000000000000000000000000000000000000000000000000000000011f60000000000000000000000000000000000000000000000000000000000000fc900000000000000000000000000000000000000000000000000000000000003d7000000000000000000000000000000000000000000000000000000000000049b000000000000000000000000000000000000000000000000000000000000010500000000000000000000000000000000000000000000000000000000000008810000000000000000000000000000000000000000000000000000000000000a690000000000000000000000000000000000000000000000000000000000000d490000000000000000000000000000000000000000000000000000000000000dea000000000000000000000000000000000000000000000000000000000000032b00000000000000000000000000000000000000000000000000000000000001880000000000000000000000000000000000000000000000000000000000001467000000000000000000000000000000000000000000000000000000000000163100000000000000000000000000000000000000000000000000000000000018ea000000000000000000000000000000000000000000000000000000000000064200000000000000000000000000000000000000000000000000000000000008a4000000000000000000000000000000000000000000000000000000000000093200000000000000000000000000000000000000000000000000000000000014f600000000000000000000000000000000000000000000000000000000000007e90000000000000000000000000000000000000000000000000000000000000558000000000000000000000000000000000000000000000000000000000000031200000000000000000000000000000000000000000000000000000000000017e200000000000000000000000000000000000000000000000000000000000005eb00000000000000000000000000000000000000000000000000000000000018e000000000000000000000000000000000000000000000000000000000000018da00000000000000000000000000000000000000000000000000000000000010f70000000000000000000000000000000000000000000000000000000000000738000000000000000000000000000000000000000000000000000000000000031d00000000000000000000000000000000000000000000000000000000000016fd0000000000000000000000000000000000000000000000000000000000000d300000000000000000000000000000000000000000000000000000000000000cde00000000000000000000000000000000000000000000000000000000000018af0000000000000000000000000000000000000000000000000000000000000cb20000000000000000000000000000000000000000000000000000000000000be900000000000000000000000000000000000000000000000000000000000009900000000000000000000000000000000000000000000000000000000000000eb0000000000000000000000000000000000000000000000000000000000000002b00000000000000000000000000000000000000000000000000000000000018d1000000000000000000000000000000000000000000000000000000000000105b000000000000000000000000000000000000000000000000000000000000038a00000000000000000000000000000000000000000000000000000000000000ed000000000000000000000000000000000000000000000000000000000000156800000000000000000000000000000000000000000000000000000000000003d200000000000000000000000000000000000000000000000000000000000002ad000000000000000000000000000000000000000000000000000000000000121000000000000000000000000000000000000000000000000000000000000007b1000000000000000000000000000000000000000000000000000000000000077400000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000e5700000000000000000000000000000000000000000000000000000000000011780000000000000000000000000000000000000000000000000000000000001916000000000000000000000000000000000000000000000000000000000000086f00000000000000000000000000000000000000000000000000000000000019c80000000000000000000000000000000000000000000000000000000000000094000000000000000000000000000000000000000000000000000000000000059e000000000000000000000000000000000000000000000000000000000000126f000000000000000000000000000000000000000000000000000000000000067e0000000000000000000000000000000000000000000000000000000000000a680000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000048a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}