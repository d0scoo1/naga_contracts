{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    /// @return \u8fd4\u56detoken\u7684\u53d1\u884c\u91cf\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    /// @param _owner \u67e5\u8be2\u4ee5\u592a\u574a\u5730\u5740token\u4f59\u989d\r\n    /// @return The balance \u8fd4\u56de\u4f59\u989d\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    /// @notice msg.sender\uff08\u4ea4\u6613\u53d1\u9001\u8005\uff09\u53d1\u9001 _value\uff08\u4e00\u5b9a\u6570\u91cf\uff09\u7684 token \u5230 _to\uff08\u63a5\u53d7\u8005\uff09  \r\n    /// @param _to \u63a5\u6536\u8005\u7684\u5730\u5740\r\n    /// @param _value \u53d1\u9001token\u7684\u6570\u91cf\r\n    /// @return \u662f\u5426\u6210\u529f\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    /// @notice \u53d1\u9001\u8005 \u53d1\u9001 _value\uff08\u4e00\u5b9a\u6570\u91cf\uff09\u7684 token \u5230 _to\uff08\u63a5\u53d7\u8005\uff09  \r\n    /// @param _from \u53d1\u9001\u8005\u7684\u5730\u5740\r\n    /// @param _to \u63a5\u6536\u8005\u7684\u5730\u5740\r\n    /// @param _value \u53d1\u9001\u7684\u6570\u91cf\r\n    /// @return \u662f\u5426\u6210\u529f\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    /// @notice \u53d1\u884c\u65b9 \u6279\u51c6 \u4e00\u4e2a\u5730\u5740\u53d1\u9001\u4e00\u5b9a\u6570\u91cf\u7684token\r\n    /// @param _spender \u9700\u8981\u53d1\u9001token\u7684\u5730\u5740\r\n    /// @param _value \u53d1\u9001token\u7684\u6570\u91cf\r\n    /// @return \u662f\u5426\u6210\u529f\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    /// @param _owner \u62e5\u6709token\u7684\u5730\u5740\r\n    /// @param _spender \u53ef\u4ee5\u53d1\u9001token\u7684\u5730\u5740\r\n    /// @return \u8fd8\u5141\u8bb8\u53d1\u9001\u7684token\u7684\u6570\u91cf\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    /// \u53d1\u9001Token\u4e8b\u4ef6\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    /// \u6279\u51c6\u4e8b\u4ef6\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //\u9ed8\u8ba4token\u53d1\u884c\u91cf\u4e0d\u80fd\u8d85\u8fc7(2^256 - 1)\r\n        //\u5982\u679c\u4f60\u4e0d\u8bbe\u7f6e\u53d1\u884c\u91cf\uff0c\u5e76\u4e14\u968f\u7740\u65f6\u95f4\u7684\u53d1\u578b\u66f4\u591a\u7684token\uff0c\u9700\u8981\u786e\u4fdd\u6ca1\u6709\u8d85\u8fc7\u6700\u5927\u503c\uff0c\u4f7f\u7528\u4e0b\u9762\u7684 if \u8bed\u53e5\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //\u5411\u4e0a\u9762\u7684\u65b9\u6cd5\u4e00\u6837\uff0c\u5982\u679c\u4f60\u60f3\u786e\u4fdd\u53d1\u884c\u91cf\u4e0d\u8d85\u8fc7\u6700\u5927\u503c\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract CoinExchangeToken is StandardToken {\r\n\r\n    function () {\r\n        //if ether is sent to this address, send it back.\r\n        throw;\r\n    }\r\n\r\n    /* Public variables of the token */\r\n\r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    uint8 public decimals;                //\u5c0f\u6570\u4f4dHow many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol;                 //An identifier: eg SBX\r\n    string public version = 'H0.1';       //\u7248\u672c\u53f7human 0.1 standard. Just an arbitrary versioning scheme.\r\n\r\n    function CoinExchangeToken(\r\n        uint256 _initialAmount,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol\r\n        ) {\r\n        balances[msg.sender] = _initialAmount;               // \u628a\u5408\u7ea6\u7684\u53d1\u5e03\u8005\u7684\u4f59\u989d\u8bbe\u7f6e\u4e3a\u53d1\u884c\u91cf\u7684\u6570\u91cf,Give the creator all initial tokens\r\n        totalSupply = _initialAmount;                        // \u53d1\u884c\u91cfUpdate total supply\r\n        name = _tokenName;                                   // token\u540d\u79f0Set the name for display purposes\r\n        decimals = _decimalUnits;                            // token\u5c0f\u6570\u4f4dAmount of decimals for display purposes\r\n        symbol = _tokenSymbol;                               // token\u6807\u8bc6Set the symbol for display purposes\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    /* \u6279\u51c6\u7136\u540e\u8c03\u7528\u63a5\u6536\u5408\u7ea6 */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //\u8c03\u7528\u4f60\u60f3\u8981\u901a\u77e5\u5408\u7ea6\u7684 receiveApprovalcall \u65b9\u6cd5 \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u53ef\u4ee5\u4e0d\u9700\u8981\u5305\u542b\u5728\u8fd9\u4e2a\u5408\u7ea6\u91cc\u7684\u3002\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        //\u5047\u8bbe\u8fd9\u4e48\u505a\u662f\u53ef\u4ee5\u6210\u529f\uff0c\u4e0d\u7136\u5e94\u8be5\u8c03\u7528vanilla approve\u3002\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "CoinExchangeToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000011436f696e45786368616e6765546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034345540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://23e079df79bb0eb5949ca8e6b8ae9bef5280dc5f389d187128336c5cc5896026"}]}