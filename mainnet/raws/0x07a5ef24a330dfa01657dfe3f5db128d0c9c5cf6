{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Mevbot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IDYDX.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\n\\ncontract Mevbot is ICallee {\\n  address private immutable executor;\\n  uint private constant MAX_INT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  uint private constant FLASH_LOAN_FEE = 2;\\n  \\n  IWETH9 private constant WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n  ISoloMargin private constant soloMargin = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\\n\\n  modifier onlyExecutor() {\\n    require(msg.sender == executor);\\n    _;\\n  }\\n\\n  constructor(address _myWallet, address _executor) {\\n    executor = _executor;\\n    WETH.approve(address(soloMargin), MAX_INT);\\n    bool success = WETH.approve(_myWallet, MAX_INT);\\n    require(success, \\\"approve failed\\\");\\n  }\\n\\n  receive() external payable {}\\n\\n  function flashLoan(uint loanAmount, address[] memory _targets, bytes[] memory _payloads, uint _percentage_to_miner) external onlyExecutor {\\n    Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n    operations[0] = Actions.ActionArgs({\\n      actionType: Actions.ActionType.Withdraw,\\n      accountId: 0,\\n      amount: Types.AssetAmount({\\n        sign: false,\\n        denomination: Types.AssetDenomination.Wei,\\n        ref: Types.AssetReference.Delta,\\n        value: loanAmount // Amount to borrow\\n      }),\\n      primaryMarketId: 0, // WETH\\n      secondaryMarketId: 0,\\n      otherAddress: address(this),\\n      otherAccountId: 0,\\n      data: \\\"\\\"\\n    });\\n    \\n    operations[1] = Actions.ActionArgs({\\n      actionType: Actions.ActionType.Call,\\n      accountId: 0,\\n      amount: Types.AssetAmount({\\n        sign: false,\\n        denomination: Types.AssetDenomination.Wei,\\n        ref: Types.AssetReference.Delta,\\n        value: 0\\n      }),\\n      primaryMarketId: 0,\\n      secondaryMarketId: 0,\\n      otherAddress: address(this),\\n      otherAccountId: 0,\\n      data: abi.encode(\\n        _targets,\\n        _payloads,\\n        loanAmount,\\n        _percentage_to_miner\\n      )\\n    });\\n    \\n    operations[2] = Actions.ActionArgs({\\n      actionType: Actions.ActionType.Deposit,\\n      accountId: 0,\\n      amount: Types.AssetAmount({\\n          sign: true,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: loanAmount + FLASH_LOAN_FEE // Repayment amount with 2 wei fee\\n      }),\\n      primaryMarketId: 0, // WETH\\n      secondaryMarketId: 0,\\n      otherAddress: address(this),\\n      otherAccountId: 0,\\n      data: \\\"\\\"\\n    });\\n\\n    Account.Info[] memory accountInfos = new Account.Info[](1);\\n    accountInfos[0] = Account.Info({owner: address(this), number: 1});\\n\\n    soloMargin.operate(accountInfos, operations);\\n  }\\n\\n  function resolver(uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) internal {\\n    require (_targets.length == _payloads.length, \\\"Payload is not equal to target length\\\");\\n    uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\\n\\n    for (uint256 i = 0; i < _targets.length; i++) {\\n      (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);\\n      require(_success); _response;\\n    }\\n\\n    uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\\n    require(_wethBalanceAfter > _wethBalanceBefore, \\\"Operation would loose money\\\");\\n\\n    uint256 _ethBalance = address(this).balance;\\n\\n    if (_ethBalance < _ethAmountToCoinbase) {\\n      WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\\n    }\\n    block.coinbase.transfer(_ethAmountToCoinbase);\\n  }\\n\\n  // This is the function called by dydx after giving us the loan\\n  function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external override {\\n    // Decode the passed variables from the data object\\n    (\\n      // This must match the variables defined in the Call object above\\n      address[] memory _targets,\\n      bytes[] memory _payloads,\\n      uint loanAmount,\\n      uint _percentage_to_miner\\n    ) = abi.decode(data, (\\n      address [], bytes [], uint, uint\\n    ));\\n\\n    resolver(_percentage_to_miner, _targets, _payloads);\\n    // It can be useful for debugging to have a verbose error message when\\n    // the loan can't be paid, since dydx doesn't provide one\\n    require(WETH.balanceOf(address(this)) > loanAmount + FLASH_LOAN_FEE, \\\"CANNOT REPAY LOAN\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDYDX.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface ICallee {\\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;\\n}\\n\\n// These definitions are taken from across multiple dydx contracts, and are\\n// limited to just the bare minimum necessary to make flash loans work.\\nlibrary Types {\\n    enum AssetDenomination { Wei, Par }\\n    enum AssetReference { Delta, Target }\\n    struct AssetAmount {\\n        bool sign;\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n}\\n\\nlibrary Account {\\n    struct Info {\\n        address owner;\\n        uint256 number;\\n    }\\n}\\n\\nlibrary Actions {\\n    enum ActionType {\\n        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call\\n    }\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n}\\n\\ninterface ISoloMargin {\\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2021\\npragma solidity ^0.8.0;\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 _amount) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_percentage_to_miner\",\"type\":\"uint256\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Mevbot", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d82af9ae7c547cf81580d550c0460d31a94353120000000000000000000000006103b4e867cfaf2328e947c0f767a42a06a0340f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}