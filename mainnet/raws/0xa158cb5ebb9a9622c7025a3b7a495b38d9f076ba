{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./libraries/Decimal.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\n\\n/// @notice This contract represent interest rate calculation model for a pool\\ncontract InterestRateModel is IInterestRateModel {\\n    using Decimal for uint256;\\n\\n    /// @notice Base interest rate (as 18-digit decimal)\\n    uint256 public immutable baseRate;\\n\\n    /// @notice Interest rate multiplier (as 18-digit decimal)\\n    uint256 public immutable multiplier;\\n\\n    /// @notice Interest rate jump multiplier (as 18-digit decimal)\\n    uint256 public immutable jumpMultiplier;\\n\\n    /// @notice Utilization above which jump multiplier is applied\\n    uint256 public immutable kink;\\n\\n    /// @notice Contract's constructor\\n    /// @param baseRate_ Base rate value\\n    /// @param multiplier_ Multiplier value\\n    /// @param jumpMultiplier_ Jump multiplier value\\n    /// @param kink_ Kink value\\n    constructor(\\n        uint256 baseRate_,\\n        uint256 multiplier_,\\n        uint256 jumpMultiplier_,\\n        uint256 kink_\\n    ) {\\n        baseRate = baseRate_;\\n        multiplier = multiplier_;\\n        jumpMultiplier = jumpMultiplier_;\\n        kink = kink_;\\n    }\\n\\n    /// @notice Function that calculates utilization rate for pool\\n    /// @param balance Total pool balance\\n    /// @param borrows Total pool borrows\\n    /// @param reserves Sum of pool reserves and insurance\\n    /// @return Utilization rate\\n    function utilizationRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure returns (uint256) {\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n        return borrows.divDecimal(balance + borrows - reserves);\\n    }\\n\\n    /// @notice Function that calculates borrow interest rate for pool\\n    /// @param balance Total pool balance\\n    /// @param borrows Total pool borrows\\n    /// @param reserves Sum of pool reserves and insurance\\n    /// @return Borrow rate per second\\n    function getBorrowRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public view returns (uint256) {\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        uint256 util = utilizationRate(balance, borrows, reserves);\\n        if (util <= kink) {\\n            return baseRate + multiplier.mulDecimal(util);\\n        } else {\\n            return\\n                baseRate +\\n                multiplier.mulDecimal(kink) +\\n                jumpMultiplier.mulDecimal(util - kink);\\n        }\\n    }\\n\\n    /// @notice Function that calculates supply interest rate for pool\\n    /// @param balance Total pool balance\\n    /// @param borrows Total pool borrows\\n    /// @param reserves Sum of pool reserves and insurance\\n    /// @param reserveFactor Pool reserve factor\\n    /// @return Supply rate per second\\n    function getSupplyRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactor\\n    ) external view returns (uint256) {\\n        uint256 util = utilizationRate(balance, borrows, reserves);\\n\\n        return\\n            util\\n                .mulDecimal(getBorrowRate(balance, borrows, reserves))\\n                .mulDecimal(Decimal.ONE - reserveFactor);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Decimal {\\n    /// @notice Number one as 18-digit decimal\\n    uint256 internal constant ONE = 1e18;\\n\\n    /**\\n     * @notice Internal function for 10-digits decimal division\\n     * @param number Integer number\\n     * @param decimal Decimal number\\n     * @return Returns multiplied numbers\\n     */\\n    function mulDecimal(uint256 number, uint256 decimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (number * decimal) / ONE;\\n    }\\n\\n    /**\\n     * @notice Internal function for 10-digits decimal multiplication\\n     * @param number Integer number\\n     * @param decimal Decimal number\\n     * @return Returns integer number divided by second\\n     */\\n    function divDecimal(uint256 number, uint256 decimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (number * ONE) / decimal;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 balance,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    ) external view returns (uint256);\\n\\n    function utilizationRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external pure returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 balance,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactor\\n    ) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "InterestRateModel", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000004b9a1eff000000000000000000000000000000000000000000000000000000007ada725e00000000000000000000000000000000000000000000000000000007620d06ef0000000000000000000000000000000000000000000000000bcbce7f1b150000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}