{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b <= a, s);\r\n        c = a - b;\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b > 0, s);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] memory self, address addr) public pure returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] memory self, address addr) public pure returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract TransferableTokenHelper{\r\n  uint256 public decimals;\r\n}\r\n\r\nlibrary TransferableToken{\r\n  using SafeERC20 for IERC20;\r\n\r\n  function transfer(address target_token, address payable to, uint256 amount) public {\r\n    if(target_token == address(0x0)){\r\n      (bool status, ) = to.call.value(address(this).balance)(\"\");\r\n      require(status, \"TransferableToken, transfer eth failed\");\r\n    }else{\r\n      IERC20(target_token).safeTransfer(to, amount);\r\n    }\r\n  }\r\n\r\n  function balanceOfAddr(address target_token, address _of) public view returns(uint256){\r\n    if(target_token == address(0x0)){\r\n      return address(_of).balance;\r\n    }else{\r\n      return IERC20(target_token).balanceOf(address(_of));\r\n    }\r\n  }\r\n\r\n  function decimals(address target_token) public view returns(uint256) {\r\n    if(target_token == address(0x0)){\r\n      return 18;\r\n    }else{\r\n      return TransferableTokenHelper(target_token).decimals();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes memory _data\r\n    ) public;\r\n}\r\ncontract TransferEventCallBack{\r\n  function onTransfer(address _from, address _to, uint256 _amount) public;\r\n}\r\n\r\ncontract ERC20Base {\r\n    string public name;                //The Token's name: e.g. GTToken\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"AET_0.1\"; //An arbitrary versioning scheme\r\n\r\n    using AddressArray for address[];\r\n    address[] public transferListeners;\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n    event NewTransferListener(address _addr);\r\n    event RemoveTransferListener(address _addr);\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct Checkpoint {\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    ERC20Base public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a ERC20Base\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    constructor(\r\n        ERC20Base _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )  public\r\n    {\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = _parentToken;\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // The standard ERC 20 transferFrom functionality\r\n        if (allowed[_from][msg.sender] < _amount)\r\n            return false;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n        require(parentSnapShotBlock < block.number);\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != address(0)) && (_to != address(this)));\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n        // An event to make the transfer easy to find on the blockchain\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {\r\n        require(approve(address(_spender), _amount));\r\n\r\n        _spender.receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            address(this),\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function _generateTokens(address _owner, uint _amount) internal returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(address(0), _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function _destroyTokens(address _owner, uint _amount) internal returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function _enableTransfers(bool _transfersEnabled) internal {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\r\n        if (checkpoints.length == 0)\r\n            return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock)\r\n            return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    function onTransferDone(address _from, address _to, uint256 _amount) internal {\r\n      for(uint i = 0; i < transferListeners.length; i++){\r\n        TransferEventCallBack t = TransferEventCallBack(transferListeners[i]);\r\n        t.onTransfer(_from, _to, _amount);\r\n      }\r\n    }\r\n\r\n    function _addTransferListener(address _addr) internal {\r\n      transferListeners.push(_addr);\r\n      emit NewTransferListener(_addr);\r\n    }\r\n    function _removeTransferListener(address _addr) internal{\r\n      transferListeners.remove(_addr);\r\n      emit RemoveTransferListener(_addr);\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    //function () external payable {\r\n        //require(false, \"cannot transfer ether to this contract\");\r\n    //}\r\n}\r\n\r\n\r\n\r\ncontract CFControllerInterface{\r\n  function withdraw(uint256 _amount) public;\r\n  function deposit(uint256 _amount) public;\r\n  function get_current_pool() public view returns(ICurvePool);\r\n}\r\n\r\ncontract TokenInterfaceERC20{\r\n  function destroyTokens(address _owner, uint _amount) public returns(bool);\r\n  function generateTokens(address _owner, uint _amount) public returns(bool);\r\n}\r\n\r\ncontract CFVaultV2 is Ownable, ReentrancyGuard{\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n  using TransferableToken for address;\r\n\r\n  address public target_token;\r\n  CFControllerInterface public controller;\r\n\r\n  uint256 public ratio_base;\r\n  uint256 public withdraw_fee_ratio;\r\n  address payable public fee_pool;\r\n  address public lp_token;\r\n  uint256 public max_amount;\r\n  uint256 public slip;\r\n\r\n  //@param _target_token, means ETH if it's 0x0\r\n  constructor(address _target_token, address _lp_token, address _controller) public {\r\n    require(_controller != address(0x0), \"invalid controller\");\r\n    target_token = _target_token;\r\n    controller = CFControllerInterface(_controller);\r\n    ratio_base = 10000;\r\n    lp_token = _lp_token;\r\n  }\r\n\r\n  event ChangeMaxAmount(uint256 old, uint256 _new);\r\n  function set_max_amount(uint _amount) public onlyOwner{\r\n    uint256 old = max_amount;\r\n    max_amount = _amount;\r\n    emit ChangeMaxAmount(old, max_amount);\r\n  }\r\n\r\n  event CFFDeposit(address from, uint256 target_amount, uint256 cff_amount, uint256 virtual_price);\r\n  event CFFDepositFee(address from, uint256 target_amount, uint256 fee_amount);\r\n\r\n  event ChangeSlippage(uint256 old, uint256 _new);\r\n  function set_slippage(uint256 _slip) public onlyOwner{\r\n    //base: 10000\r\n    uint256 old = slip;\r\n    slip = _slip;\r\n    emit ChangeSlippage(old, slip);\r\n  }\r\n\r\n  function deposit(uint256 _amount) public payable nonReentrant{\r\n    require(controller != CFControllerInterface(0x0) && controller.get_current_pool() != ICurvePool(0x0), \"paused\");\r\n    if(target_token == address(0x0)){\r\n      require(_amount == msg.value, \"inconsist amount\");\r\n    }else{\r\n      require(IERC20(target_token).allowance(msg.sender, address(this)) >= _amount, \"CFVault: not enough allowance\");\r\n    }\r\n\r\n    require(_amount <= max_amount, \"too large amount\");\r\n    require(slip != 0, \"Slippage not set\");\r\n    require(_amount != 0, \"too small amount\");\r\n\r\n\r\n    uint tt_before = TransferableToken.balanceOfAddr(target_token, address(controller.get_current_pool()));\r\n    if(target_token != address(0x0)){\r\n      IERC20(target_token).safeTransferFrom(msg.sender, address(controller.get_current_pool()), _amount);\r\n    }else{\r\n      TransferableToken.transfer(target_token, address(controller.get_current_pool()).toPayable(), _amount);\r\n    }\r\n    uint tt_after = TransferableToken.balanceOfAddr(target_token, address(controller.get_current_pool()));\r\n    require(tt_after.safeSub(tt_before) == _amount, \"token inflation\");\r\n\r\n    uint256 lp_amount;\r\n    uint lp_before = controller.get_current_pool().get_lp_token_balance();\r\n    {\r\n      uint dec = uint(10)**(TransferableToken.decimals(target_token));\r\n      uint vir = controller.get_current_pool().get_virtual_price();\r\n      uint min_amount = _amount.safeMul(uint(1e32)).safeMul(slip).safeDiv(dec).safeDiv(vir);\r\n\r\n\r\n      controller.deposit(_amount);\r\n\r\n      uint lp_after = controller.get_current_pool().get_lp_token_balance();\r\n      lp_amount = lp_after.safeSub(lp_before);\r\n\r\n      require(lp_amount >= min_amount, \"Slippage\");\r\n    }\r\n\r\n    uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();\r\n    require(d <= 18, \"invalid decimal\");\r\n    uint cff_amount = 0;\r\n    if (lp_before == 0){\r\n      cff_amount = lp_amount.safeMul(uint256(10)**18).safeDiv(uint256(10)**d);\r\n    }\r\n    else{\r\n      cff_amount = lp_amount.safeMul(IERC20(lp_token).totalSupply()).safeDiv(lp_before);\r\n    }\r\n    TokenInterfaceERC20(lp_token).generateTokens(msg.sender, cff_amount);\r\n    emit CFFDeposit(msg.sender, _amount, cff_amount, get_virtual_price());\r\n  }\r\n\r\n\r\n  event CFFWithdraw(address from, uint256 target_amount, uint256 cff_amount, uint256 target_fee, uint256 virtual_price);\r\n  //@_amount: CFLPToken amount\r\n  function withdraw(uint256 _amount) public nonReentrant{\r\n    require(controller != CFControllerInterface(0x0) && controller.get_current_pool() != ICurvePool(0x0), \"paused\");\r\n    require(slip != 0, \"Slippage not set\");\r\n    uint256 amount = IERC20(lp_token).balanceOf(msg.sender);\r\n    require(amount >= _amount, \"no enough LP tokens\");\r\n\r\n    uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());\r\n\r\n    uint dec = uint(10)**(TransferableToken.decimals(target_token));\r\n    uint vir = controller.get_current_pool().get_virtual_price();\r\n    uint min_amount = LP_token_amount.safeMul(vir).safeMul(slip).safeMul(dec).safeDiv(uint(1e40));\r\n\r\n    uint256 _before = TransferableToken.balanceOfAddr(target_token, address(this));\r\n    controller.withdraw(LP_token_amount);\r\n    uint256 _after = TransferableToken.balanceOfAddr(target_token, address(this));\r\n    uint256 target_amount = _after.safeSub(_before);\r\n\r\n    require(target_amount >= min_amount, \"Slippage\");\r\n\r\n\r\n    if(withdraw_fee_ratio != 0 && fee_pool != address(0x0)){\r\n      uint256 f = target_amount.safeMul(withdraw_fee_ratio).safeDiv(ratio_base);\r\n      uint256 r = target_amount.safeSub(f);\r\n      TransferableToken.transfer(target_token, msg.sender, r);\r\n      TransferableToken.transfer(target_token, fee_pool, f);\r\n      TokenInterfaceERC20(lp_token).destroyTokens(msg.sender, _amount);\r\n      emit CFFWithdraw(msg.sender, r, _amount, f, get_virtual_price());\r\n    }else{\r\n      TransferableToken.transfer(target_token, msg.sender, target_amount);\r\n      TokenInterfaceERC20(lp_token).destroyTokens(msg.sender, _amount);\r\n      emit CFFWithdraw(msg.sender, target_amount, _amount, 0, get_virtual_price());\r\n    }\r\n  }\r\n\r\n  event ChangeWithdrawFee(uint256 old, uint256 _new);\r\n  function changeWithdrawFee(uint256 _fee) public onlyOwner{\r\n    require(_fee < ratio_base, \"invalid fee\");\r\n    uint256 old = withdraw_fee_ratio;\r\n    withdraw_fee_ratio = _fee;\r\n    emit ChangeWithdrawFee(old, withdraw_fee_ratio);\r\n  }\r\n\r\n  event ChangeController(address old, address _new);\r\n  function changeController(address _ctrl) public onlyOwner{\r\n    address old = address(controller);\r\n    controller = CFControllerInterface(_ctrl);\r\n    emit ChangeController(old, address(controller));\r\n  }\r\n\r\n  event ChangeFeePool(address old, address _new);\r\n  function changeFeePool(address payable _fp) public onlyOwner{\r\n    address old = fee_pool;\r\n    fee_pool = _fp;\r\n    emit ChangeFeePool(old, fee_pool);\r\n  }\r\n\r\n  function get_virtual_price() public view returns(uint256){\r\n    ICurvePool cp = controller.get_current_pool();\r\n    uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());\r\n    uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());\r\n    if(v2 == 0){\r\n      return 0;\r\n    }\r\n    return v1.safeMul(cp.get_virtual_price()).safeDiv(v2);\r\n  }\r\n\r\n  function get_asset() public view returns(uint256) {\r\n      return controller.get_current_pool().get_lp_token_balance();\r\n  }\r\n\r\n  function() external payable{}\r\n}\r\n\r\ncontract CFVaultV2Factory{\r\n  event NewCFVault(address addr);\r\n\r\n  function createCFVault(address _target_token, address _lp_token, address _controller) public returns(address){\r\n    CFVaultV2 cf = new CFVaultV2(_target_token, _lp_token, _controller);\r\n    cf.transferOwnership(msg.sender);\r\n    emit NewCFVault(address(cf));\r\n    return address(cf);\r\n  }\r\n\r\n}\r\n\r\n\r\n// legacy interface for this\r\ncontract ICurvePool {\r\n    function deposit(uint256 _amount) public;\r\n    function withdraw(uint256 _amount) public;\r\n    function earnReward(address[] memory yieldtokens) public;\r\n\r\n    function get_virtual_price() public view returns(uint256);\r\n    function get_lp_token_balance() public view returns(uint256);\r\n    function get_lp_token_addr() public view returns(address);\r\n\r\n    function setController(address, address) public;\r\n}\r\n\r\n// external interfaces\r\ncontract ICurveDepositGate {\r\n    function add_liquidity(address _pool, uint256[4] memory _deposit_amounts, uint256 _min_mint_amount) public;\r\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) public;\r\n}\r\ncontract ICurveVirtualPrive{\r\n    function get_virtual_price() public view returns(uint256);\r\n}\r\ncontract IFeiDelegator is IERC20 {\r\n    function balanceOfUnderlying(address owner) public returns(uint256);\r\n    function mint(uint256 mintAmount) public;\r\n    function redeemUnderlying(uint256 redeemAmount) public;\r\n}\r\ncontract IFeiRewardsDistributor {\r\n    function claimRewards(address holder, address[] memory cTokens) public;\r\n}\r\n\r\ncontract CFPoolV3 is Ownable, ICurvePool{\r\n    using SafeMath for uint256;\r\n\r\n    address public controller;\r\n    address public vault;\r\n\r\n    IERC20 public target_token;\r\n    ICurveDepositGate public curve_deposit_gate;\r\n    IERC20 public curve_lp_token;\r\n    IFeiDelegator public fei_delegator;\r\n    IFeiRewardsDistributor public fei_rewards_distributor;\r\n    \r\n    uint256 public underlying_curve_lp_balance;   // curve lp\r\n\r\n    constructor(address _fei_delegator, address _fei_rewards_distributor) public {\r\n        // pool spcificly build for Fei.money\r\n        target_token = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        curve_deposit_gate = ICurveDepositGate(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\r\n        curve_lp_token = IERC20(0x06cb22615BA53E60D67Bf6C341a0fD5E718E1655);\r\n        fei_delegator = IFeiDelegator(_fei_delegator); // passing as param for test purpose\r\n        fei_rewards_distributor = IFeiRewardsDistributor(_fei_rewards_distributor);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == controller || msg.sender == vault);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * on start, target token already at dealer\r\n     * deposit to curve'pool and then fei's pool\r\n     */\r\n    function deposit(uint256 amount) public onlyAdmin {\r\n        // deposit to curve's f3 pool\r\n        target_token.approve(address(curve_deposit_gate), 0);\r\n        target_token.approve(address(curve_deposit_gate), amount);\r\n        curve_deposit_gate.add_liquidity(address(curve_lp_token), [0, 0, amount, 0], 0);\r\n        \r\n        // deposit to fei's pool\r\n        uint256 curve_lp_amount = curve_lp_token.balanceOf(address(this));\r\n        curve_lp_token.approve(address(fei_delegator), 0);\r\n        curve_lp_token.approve(address(fei_delegator), curve_lp_amount);\r\n        fei_delegator.mint(curve_lp_amount);\r\n\r\n        underlying_curve_lp_balance = underlying_curve_lp_balance+curve_lp_amount;\r\n    }\r\n\r\n    /**\r\n     * withdraw from fei's pool\r\n     * withdraw from curve's pool\r\n     * send back to vault\r\n     * @param amount in fei's lp token\r\n     */\r\n    function withdraw(uint256 amount) public onlyAdmin {\r\n        // withdraw from fei's pool\r\n        // require(amount < fei_delegator.balanceOf(address(this)))\r\n        fei_delegator.redeemUnderlying(amount);\r\n        // withdraw from curve's pool\r\n        uint256 curve_lp_amount = curve_lp_token.balanceOf(address(this));\r\n        curve_lp_token.approve(address(curve_deposit_gate), 0);\r\n        curve_lp_token.approve(address(curve_deposit_gate), curve_lp_amount);\r\n        curve_deposit_gate.remove_liquidity_one_coin(address(curve_lp_token), curve_lp_amount, 2, 0);\r\n\r\n        target_token.transfer(vault, target_token.balanceOf(address(this)));\r\n        underlying_curve_lp_balance = underlying_curve_lp_balance-curve_lp_amount;\r\n    }\r\n\r\n    /**\r\n     * mint rewards\r\n     * transfer to controller\r\n     */\r\n    function earnReward(address[] memory yield_tokens) public onlyAdmin {\r\n        address[] memory ctokens = new address[](1);\r\n        ctokens[0] = address(fei_delegator);\r\n        fei_rewards_distributor.claimRewards(address(this), ctokens);\r\n\r\n        for (uint i = 0; i < yield_tokens.length; i++) {\r\n            uint256 balance = IERC20(yield_tokens[i]).balanceOf(address(this));\r\n            IERC20(yield_tokens[i]).transfer(controller, balance);\r\n        }\r\n    }\r\n\r\n    \r\n    function get_lp_token_balance() public view returns(uint256) {\r\n        return underlying_curve_lp_balance;\r\n    }\r\n    function get_lp_token_addr() public view returns(address) {\r\n        return address(fei_delegator);\r\n    }\r\n    function get_virtual_price() public view returns(uint256) {\r\n        uint256 vir = ICurveVirtualPrive(address(curve_lp_token)).get_virtual_price();\r\n        //uint256 b = fei_delegator.balanceOf(address(this));\r\n        //return underlying_curve_lp_balance.safeMul(vir);\r\n        return vir;\r\n    }\r\n\r\n    function setController(address _controller) public onlyOwner {\r\n        controller = _controller;\r\n    }\r\n\r\n    function setController(address _controller, address _vault) public onlyOwner{\r\n        controller = _controller;\r\n        vault = _vault;\r\n    }\r\n\r\n    function setVault(address _vault) public onlyOwner {\r\n        vault = _vault;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract YieldHandlerInterface{\r\n  function handleExtraToken(address from, address target_token, uint256 amount, uint min_amount) public;\r\n}\r\n\r\ncontract SushiUniInterfaceERC20{\r\n  function getAmountsOut(uint256 amountIn, address[] memory path) public view returns(uint256[] memory);\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn,   uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external ;\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\n\r\ncontract CRVExchangeV2 is Ownable{\r\n  address public crv_token;\r\n  using AddressArray for address[];\r\n  using SafeERC20 for IERC20;\r\n\r\n  struct path_info{\r\n    address dex;\r\n    address[] path;\r\n  }\r\n  mapping(bytes32 => path_info) public paths;\r\n  bytes32[] public path_indexes;\r\n\r\n  address weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n  constructor(address _crv) public{\r\n    if(_crv == address(0x0)){\r\n      crv_token = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    }else{\r\n      crv_token = _crv;\r\n    }\r\n  }\r\n  function path_from_addr(uint index) public view returns(address){\r\n    return paths[path_indexes[index]].path[0];\r\n  }\r\n  function path_to_addr(uint index) public view returns(address){\r\n    return paths[path_indexes[index]].path[paths[path_indexes[index]].path.length - 1];\r\n  }\r\n\r\n  function handleCRV(address target_token, uint256 amount, uint min_amount) public{\r\n    handleExtraToken(crv_token, target_token, amount, min_amount);\r\n  }\r\n\r\n  function handleExtraToken(address from, address target_token, uint256 amount, uint min_amount) public{\r\n    uint256 maxOut = 0;\r\n    uint256 fpi = 0;\r\n\r\n    for(uint pi = 0; pi < path_indexes.length; pi ++){\r\n      if(path_from_addr(pi) != from || path_to_addr(pi) != target_token){\r\n        continue;\r\n      }\r\n      uint256 t = get_out_for_dex_path(pi, amount);\r\n      if( t > maxOut ){\r\n        fpi = pi;\r\n        maxOut = t;\r\n      }\r\n    }\r\n\r\n    address dex = paths[path_indexes[fpi]].dex;\r\n    IERC20(from).safeTransferFrom(msg.sender, address(this), amount);\r\n    IERC20(from).safeApprove(dex, amount);\r\n    if(target_token == weth){\r\n      SushiUniInterfaceERC20(dex).swapExactTokensForETHSupportingFeeOnTransferTokens(amount, min_amount, paths[path_indexes[fpi]].path, address(this), block.timestamp + 10800);\r\n      uint256 target_amount = address(this).balance;\r\n      require(target_amount >= min_amount, \"slippage screwed you\");\r\n      (bool status, ) = msg.sender.call.value(target_amount)(\"\");\r\n      require(status, \"CRVExchange transfer eth failed\");\r\n    }else{\r\n      SushiUniInterfaceERC20(dex).swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, min_amount, paths[path_indexes[fpi]].path, address(this), block.timestamp + 10800);\r\n      uint256 target_amount = IERC20(target_token).balanceOf(address(this));\r\n      require(target_amount >= min_amount, \"slippage screwed you\");\r\n      IERC20(target_token).safeTransfer(address(msg.sender), target_amount);\r\n    }\r\n  }\r\n\r\n  function get_out_for_dex_path(uint pi, uint256 _amountIn) internal view returns(uint256) {\r\n    address dex = paths[path_indexes[pi]].dex;\r\n    uint256[] memory ret = SushiUniInterfaceERC20(dex).getAmountsOut(_amountIn, paths[path_indexes[pi]].path);\r\n    return ret[ret.length - 1];\r\n  }\r\n\r\n  event AddPath(bytes32 hash, address dex, address[] path);\r\n  function addPath(address dex, address[] memory path) public onlyOwner{\r\n    SushiUniInterfaceERC20(dex).getAmountsOut(1e18, path); //This is a double check\r\n    bytes32 hash = keccak256(abi.encodePacked(dex, path));\r\n    require(paths[hash].path.length == 0, \"already exist path\");\r\n    path_indexes.push(hash);\r\n    paths[hash].path = path;\r\n    paths[hash].dex = dex;\r\n    emit AddPath(hash, dex, path);\r\n  }\r\n\r\n  event RemovePath(bytes32 hash);\r\n  function removePath(address dex, address[] memory path) public onlyOwner{\r\n    bytes32 hash = keccak256(abi.encodePacked(dex, path));\r\n    removePathWithHash(hash);\r\n  }\r\n\r\n  function removePathWithHash(bytes32 hash) public onlyOwner{\r\n    require(paths[hash].path.length != 0, \"path not exist\");\r\n    delete paths[hash];\r\n    for(uint i = 0; i < path_indexes.length; i++){\r\n      if(path_indexes[i] == hash){\r\n          path_indexes[i] = path_indexes[path_indexes.length - 1];\r\n          delete path_indexes[path_indexes.length - 1];\r\n          path_indexes.length --;\r\n          emit RemovePath(hash);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function() external payable{}\r\n}\r\n\r\n\r\n\r\ncontract CFControllerV3 is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using TransferableToken for address;\r\n    using AddressArray for address[];\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address public pool;\r\n\r\n    uint256 public last_earn_block;\r\n    uint256 public earn_gap;\r\n    address public target_token;\r\n    address[] public yield_tokens;\r\n\r\n    address public fee_pool;\r\n    uint256 public harvest_fee_ratio;\r\n    uint256 public ratio_base;\r\n\r\n\r\n    YieldHandlerInterface public yield_handler;\r\n\r\n    address public vault;\r\n    address weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    //@param _target, when it's 0, means ETH\r\n    constructor(address _target, uint256 _earn_gap) public{\r\n        last_earn_block = 0;\r\n        require(_target != address(0x0), \"invalid target address\");\r\n        require(_earn_gap != 0, \"invalid earn gap\");\r\n        target_token = _target;\r\n        earn_gap = _earn_gap;\r\n        ratio_base = 10000;\r\n    }\r\n\r\n    function setVault(address _vault) public onlyOwner{\r\n        require(_vault != address(0x0), \"invalid vault\");\r\n        vault = _vault;\r\n    }\r\n\r\n    modifier onlyVault{\r\n        require(msg.sender == vault, \"only vault can call this\");\r\n        _;\r\n    }\r\n\r\n    function get_current_pool() public view returns(ICurvePool) {\r\n        return ICurvePool(pool);\r\n    }\r\n\r\n    function deposit(uint256 _amount) public onlyVault {\r\n        ICurvePool(pool).deposit(_amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public onlyVault{\r\n        ICurvePool(pool).withdraw(_amount);\r\n    }\r\n\r\n    event EarnExtra(address addr, address token, uint256 amount);\r\n    /**\r\n    * @param min_amount in target token\r\n    * @notice least min_amount blocks to call this\r\n    */\r\n    function earnReward(uint min_amount) public onlyOwner{\r\n        require(yield_handler != YieldHandlerInterface(0x0), \"invalid yield handler\");\r\n        require(block.number.safeSub(last_earn_block) >= earn_gap, \"not long enough\");\r\n        last_earn_block = block.number;\r\n\r\n        // call earn yield here\r\n        ICurvePool(pool).earnReward(yield_tokens);\r\n        // @here: yield tokens at controller\r\n    \r\n        // swap: yield tokens -> target token\r\n        for(uint i = 0; i < yield_tokens.length; i++){\r\n            uint256 amount = IERC20(yield_tokens[i]).balanceOf(address(this));\r\n            if(amount > 0){\r\n                IERC20(yield_tokens[i]).approve(address(yield_handler), amount);\r\n                if(target_token == address(0x0)){\r\n                    yield_handler.handleExtraToken(yield_tokens[i], weth, amount, min_amount);\r\n                }else{\r\n                    yield_handler.handleExtraToken(yield_tokens[i], target_token, amount, min_amount);\r\n                }\r\n            }\r\n        }\r\n\r\n        // @here: target tokan at controller\r\n\r\n        uint256 amount = TransferableToken.balanceOfAddr(target_token, address(this));\r\n        _refundTarget(amount);\r\n    }\r\n\r\n    event CFFRefund(uint256 amount, uint256 fee);\r\n    function _refundTarget(uint256 _amount) internal {\r\n        if(_amount == 0){\r\n            return ;\r\n        }\r\n        if(harvest_fee_ratio != 0 && fee_pool != address(0x0)){\r\n            uint256 f = _amount.safeMul(harvest_fee_ratio).safeDiv(ratio_base);\r\n            emit CFFRefund(_amount, f);\r\n            _amount = _amount.safeSub(f);\r\n            if(f != 0){\r\n                TransferableToken.transfer(target_token, fee_pool.toPayable(), f);\r\n            }\r\n        } else {\r\n            emit CFFRefund(_amount, 0);\r\n        }\r\n        TransferableToken.transfer(target_token, pool.toPayable(), _amount);\r\n        ICurvePool(pool).deposit(_amount);\r\n    }\r\n\r\n    function pause() public onlyOwner{\r\n        pool = address(0x0);\r\n    }\r\n\r\n    event AddYieldToken(address _new);\r\n    function addYieldToken(address _new) public onlyOwner{\r\n        require(_new != address(0x0), \"invalid extra token\");\r\n        yield_tokens.push(_new);\r\n        emit AddYieldToken(_new);\r\n    }\r\n\r\n    event RemoveYieldToken(address _addr);\r\n    function removeYieldToken(address _addr) public onlyOwner{\r\n        require(_addr != address(0x0), \"invalid address\");\r\n        uint len = yield_tokens.length;\r\n        for(uint i = 0; i < len; i++){\r\n            if(yield_tokens[i] == _addr){\r\n                yield_tokens[i] = yield_tokens[len - 1];\r\n                yield_tokens[len - 1] =address(0x0);\r\n                yield_tokens.length = len - 1;\r\n                emit RemoveYieldToken(_addr);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    event ChangeYieldHandler(address old, address _new);\r\n    function changeYieldHandler(address _new) public onlyOwner{\r\n        address old = address(yield_handler);\r\n        yield_handler = YieldHandlerInterface(_new);\r\n        emit ChangeYieldHandler(old, address(yield_handler));\r\n    }\r\n\r\n    event ChangePool(address old, address _new);\r\n    function changePool(address _p) public onlyOwner{\r\n        address old = pool;\r\n        pool = _p;\r\n        emit ChangePool(old, pool);\r\n    }\r\n\r\n    event ChangeFeePool(address old, address _new);\r\n    function changeFeePool(address _fp) public onlyOwner{\r\n        address old = fee_pool;\r\n        fee_pool = _fp;\r\n        emit ChangeFeePool(old, fee_pool);\r\n    }\r\n\r\n    event ChangeHarvestFee(uint256 old, uint256 _new);\r\n    function changeHarvestFee(uint256 _fee) public onlyOwner{\r\n        require(_fee < ratio_base, \"invalid fee\");\r\n        uint256 old = harvest_fee_ratio;\r\n        harvest_fee_ratio = _fee;\r\n        emit ChangeHarvestFee(old, harvest_fee_ratio);\r\n    }\r\n\r\n    function() external payable{}\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeYieldToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratio_base\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_current_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeYieldHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeHarvestFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_p\",\"type\":\"address\"}],\"name\":\"changePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_earn_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"addYieldToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yield_handler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvest_fee_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fp\",\"type\":\"address\"}],\"name\":\"changeFeePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"earnReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earn_gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_earn_gap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CFFRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"AddYieldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemoveYieldToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeYieldHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeFeePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangeHarvestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "CFControllerV3", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "SafeMath:f4638d6e94a83bab51adbd42aa68cee57c1cf012;TransferableToken:aba5b11b8154c6b79dec64bacb7533dab65164b5", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cfc3d06449500303a5f9f2bd9e4f32097b5aa10098652c58378506a191715b24"}]}