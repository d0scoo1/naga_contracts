{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.4;\r\n\r\n// \u5347\u7ea7\u5408\u7ea6\r\ncontract Nest36Withdraw {\r\n\r\n\t//==========NHBTC\u672a\u9886\u53d6\u53c2\u6570\r\n\t// NHBTC Owner\r\n\taddress constant NHBTC_OWNER = 0x3CeeFBbB0e6C60cf64DB9D17B94917D6D78cec05;\r\n\t// NHBTC\u5730\u5740\r\n\taddress constant NHBTC_ADDRESS = 0x1F832091fAf289Ed4f50FE7418cFbD2611225d46;\r\n\t// NHBTC\u672a\u9886\u53d6\u6570\u91cf\r\n\t// uint256 constant NHBTC_AMOUNT = 38216800000000000000000;\r\n\t\r\n\r\n\t//==========NN\u672a\u9886\u53d6NEST\u53c2\u6570\r\n\t// NN\u9886\u53d6\u5408\u7ea6\u5730\u5740\r\n\taddress constant NNREWARDPOOL_ADDRESS = 0xf1A7201749fA81463799383D7D0565B6bfECE757;\r\n\t// NN\u672a\u9886\u53d6NEST\u6570\u91cf\r\n\t// uint256 constant NN_NEST_AMOUNT = 3441295249408000000000000;\r\n\r\n\t//==========\u6316\u77ff\u8d44\u91d1\u53c2\u6570\r\n\t// \u77ff\u5de50x4FD6CEAc4FF7c5F4d57A4043cbaA1862F227145A\u79c1\u94a5\u51fa\u73b0\u95ee\u9898\uff0c\u5bfc\u81f4\u6709\u4e24\u7b14nest\u62a5\u4ef7\u5355(6886, 6885)\u4e0d\u80fd\u6b63\u5e38\u5173\u95ed\r\n\t// \u7ecf\u5176\u786e\u8ba4\uff0c\u4e24\u7b14\u62a5\u4ef7\u5355\u5185\u9501\u5b9a\u768460eth\u548c2996558.362758784295450000nest\u534f\u52a9\u5176\u8f6c\u5165\u5230\u5176\u63d0\u4f9b\u7684\u65b0\u5730\u57400xA05684C9e3A1d62a4EBC5a9FFB13030Bbe5e82a8\r\n\t// \u65b0\u77ff\u5de5\u5730\u5740\r\n\taddress constant NEW_MINER = 0xA05684C9e3A1d62a4EBC5a9FFB13030Bbe5e82a8;\r\n\t// \u6316\u77ffETH\u8d44\u91d1\r\n\tuint256 constant ETH_AMOUNT_MINING = 60000000000000000000;\r\n\t// \u6316\u77ffNEST\u8d44\u91d1\r\n\tuint256 constant NEST_AMOUNT_MINING = 2996558362758784295450000;\r\n\r\n\t// NEST\u5730\u5740\r\n\taddress constant NEST_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\t// NEST3.5\u6316\u77ff\u5408\u7ea6\u5730\u5740\r\n\taddress constant NEST_MINING_ADDRESS = 0x243f207F9358cf67243aDe4A8fF3C5235aa7b8f6;\r\n\t// 3.5\u77ff\u6c60\u5408\u7ea6\u5730\u5740\r\n\taddress constant NEST_POOL_ADDRESS = 0xCA208DCfbEF22941D176858A640190C2222C8c8F;\r\n\r\n\t// \u7ba1\u7406\u5458\r\n    address public _owner;\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    // \u6062\u590d3.5\u7ba1\u7406\u5458\r\n    function setGov35() public onlyOwner {\r\n        INestPool(NEST_POOL_ADDRESS).setGovernance(_owner);\r\n    }\r\n\r\n    function doit() public onlyOwner {\r\n    \tINestPool NestPool = INestPool(NEST_POOL_ADDRESS);\r\n    \t// \u96f6:\u8bbe\u7f6e\u5730\u5740\r\n    \tNestPool.setContracts(address(0x0), address(this), address(0x0), address(0x0), address(0x0), address(0x0), address(0x0), address(0x0));\r\n\r\n    \t// \u4e00:\u8f6c\u79fb\u6316\u77ff\u8d44\u91d1\r\n    \t// 1_1.\u66f4\u6362ETH\u8d26\u672c\u3001\u66f4\u6362NEST\u8d26\u672c\r\n    \tNestPool.transferEthInPool(NEST_POOL_ADDRESS, NEW_MINER, ETH_AMOUNT_MINING);\r\n    \tNestPool.transferNestInPool(NEST_POOL_ADDRESS, NEW_MINER, NEST_AMOUNT_MINING);\r\n    \t// 1_2.\u7ed9\u65b0\u77ff\u5de5\u5730\u5740\u8f6cETH\u548cNEST\r\n    \tNestPool.withdrawEthAndToken(NEW_MINER, ETH_AMOUNT_MINING, NEST_ADDRESS, NEST_AMOUNT_MINING);\r\n\r\n    \t// \u4e8c:\u8f6c\u79fbNN\u672a\u9886\u53d6\u7684NEST\r\n    \tuint256 NN_NestAmount = NestPool.getMinerNest(NNREWARDPOOL_ADDRESS);\r\n    \t// 2_1.\u66f4\u6362NEST\u8d26\u672c\r\n    \tNestPool.transferNestInPool(NNREWARDPOOL_ADDRESS, _owner, NN_NestAmount);\r\n    \t// 2_2.\u7ed9\u7ba1\u7406\u5458\u8f6c\u8d26NEST\r\n    \tNestPool.withdrawToken(_owner, NEST_ADDRESS, NN_NestAmount);\r\n\r\n    \t// \u4e09:NHBTC\u8f6c\u8d26\r\n    \tuint256 NHBTCAmount = NestPool.balanceOfTokenInPool(NHBTC_OWNER, NHBTC_ADDRESS);\r\n    \tNestPool.withdrawToken(NHBTC_OWNER, NHBTC_ADDRESS, NHBTCAmount);\r\n\r\n    \t// \u56db:\u6062\u590d\u5730\u5740\r\n    \tNestPool.setContracts(address(0x0), NEST_MINING_ADDRESS, address(0x0), address(0x0), address(0x0), address(0x0), address(0x0), address(0x0));\r\n\r\n    \t// \u4e94:\u6062\u590d3.5\u7ba1\u7406\u5458\r\n    \tsetGov35();\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// 3.5\u77ff\u6c60\u5408\u7ea6\r\ninterface INestPool {\r\n    // \u8bbe\u7f6e\u7ba1\u7406\u5458\r\n    function setGovernance(address _gov) external;\r\n    // \u8bbe\u7f6e\u5730\u5740\r\n    function setContracts(\r\n            address NestToken, address NestMining, \r\n            address NestStaking, address NTokenController, \r\n            address NNToken, address NNRewardPool, \r\n            address NestQuery, address NestDAO\r\n        ) external;\r\n    // \u8f6c\u79fbnest\u8d26\u672c\r\n    function transferNestInPool(address from, address to, uint256 amount) external;\r\n    // \u8f6c\u79fbETH\u8d26\u672c\r\n    function transferEthInPool(address from, address to, uint256 amount) external;\r\n    // \u7ed9\u77ff\u5de5\u5730\u5740\u8f6c\u8d26ETH\u548cNEST\r\n    function withdrawEthAndToken(address miner, uint256 ethAmount, address token, uint256 tokenAmount) external;\r\n    // \u8f6c\u51faToken\r\n    function withdrawToken(address miner, address token, uint256 tokenAmount) external;\r\n    // \u67e5\u8be2NEST\u6570\u91cf\r\n    function getMinerNest(address miner) external view returns (uint256 nestAmount);\r\n    // \u67e5\u8be2\u5176\u4ed6token\u6570\u91cf\r\n    function balanceOfTokenInPool(address miner, address token) external view returns (uint256);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGov35\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Nest36Withdraw", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://72acca742e2b30046b429636464ae967c8684b0bcb0f5137e1f772b049f638ab"}]}