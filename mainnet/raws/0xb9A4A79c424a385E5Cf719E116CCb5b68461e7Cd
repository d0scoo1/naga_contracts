{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs \\u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) \\u003e\\u003e 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"},\"EIP712Whitelisting.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\ncontract EIP712Whitelisting {\\n  using ECDSA for bytes32;\\n\\n  // The key used to sign whitelist signatures.\\n  // We will check to ensure that the key that signed the signature\\n  // is this one that we expect.\\n  address whitelistSigningKey = address(0);\\n\\n  // Domain Separator is the EIP-712 defined structure that defines what contract\\n  // and chain these signatures can be used for.  This ensures people can\\u0027t take\\n  // a signature used to mint on one contract and use it for another, or a signature\\n  // from testnet to replay on mainnet.\\n  // It has to be created in the constructor so we can dynamically grab the chainId.\\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#definition-of-domainseparator\\n  bytes32 public DOMAIN_SEPARATOR;\\n\\n  // The typehash for the data type specified in the structured data\\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-typehash\\n  // This should match whats in the client side whitelist signing code\\n  // https://github.com/msfeldstein/EIP712-whitelisting/blob/main/test/signWhitelist.ts#L22\\n  bytes32 public constant MINTER_TYPEHASH = keccak256(\\\"Minter(address wallet)\\\");\\n\\n  constructor(string memory tokenName, string memory version) {\\n    // This should match whats in the client side whitelist signing code\\n    // https://github.com/msfeldstein/EIP712-whitelisting/blob/main/test/signWhitelist.ts#L12\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        // This should match the domain you set in your client side signing.\\n        keccak256(bytes(tokenName)),\\n        keccak256(bytes(version)),\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _setWhitelistSigningAddress(address newSigningKey) internal {\\n    whitelistSigningKey = newSigningKey;\\n  }\\n\\n  modifier requiresWhitelist(bytes calldata signature) {\\n    require(whitelistSigningKey != address(0), \\\"Whitelist not enabled; please set the private key.\\\");\\n    // Verify EIP-712 signature by recreating the data structure\\n    // that we signed on the client side, and then using that to recover\\n    // the address that signed the signature for this data.\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(MINTER_TYPEHASH, msg.sender))));\\n    // Use the recover method to see what address was used to create\\n    // the signature on this data.\\n    // Note that if the digest doesn\\u0027t exactly match what was signed we\\u0027ll\\n    // get a random recovered address.\\n    address recoveredAddress = digest.recover(signature);\\n    require(recoveredAddress == whitelistSigningKey, \\\"Invalid signature\\\");\\n    _;\\n  }\\n}\\n\"},\"MintingRouter.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d  \u255a\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557   \u255a\u2588\u2588\u2554\u255d      \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2557   \u2588\u2588\u2551       \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d        \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\npragma solidity 0.8.13;\\n\\n// Imports\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./EIP712Whitelisting.sol\\\";\\n\\n/// NFT Interface\\ninterface INFT {\\n    function mint(address recipient, uint256 quantity) external;\\n    function preminted() external view returns (bool);\\n    function MAX_SUPPLY() external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n}\\n\\n/**\\n * @title The Minting Router contract.\\n */\\ncontract MintingRouter is EIP712Whitelisting, ReentrancyGuard, Ownable {\\n    // The available sale types.\\n    enum SaleRoundType {\\n        WHITELIST,\\n        PUBLIC\\n    }\\n\\n    // The sale round details.\\n    struct SaleRound {\\n        // The type of the sale.\\n        SaleRoundType saleType;\\n        // The price of a token during the sale round.\\n        uint256 price;\\n        // The total number of tokens available for minting during the sale round.\\n        uint256 totalAmount;\\n        // The total number of tokens available for minting by a single wallet during the sale round.\\n        uint256 limitAmountPerWallet;\\n        // The maximum number of tokens available for minting per single transaction.\\n        uint256 maxAmountPerMint;\\n        // The flag that indicates if the sale round is enabled.\\n        bool enabled;\\n    }\\n\\n    /// @notice Indicates that tokens are unlimited.\\n    uint256 private constant UNLIMITED_AMOUNT = 0;\\n    /// @notice The current sale round details.\\n    SaleRound public saleRound;\\n    /// @notice The current sale round index.\\n    uint256 public currentSaleIndex;\\n    /// @notice The number of NFTs minted during an ongoing sale round.\\n    uint256 public totalMintedAmountCurrentRound;\\n    /// @notice The number of NFTs minted during a sale round.\\n    mapping(uint256 =\\u003e uint256) public mintedAmountPerRound;\\n    /// @notice The NFT contract.\\n    INFT private _nftContract;\\n    /// @notice The number of NFTs minted during a sale round per wallet.\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) private _mintedAmountPerAddress;\\n\\n    /**\\n     * @notice The smart contract constructor that initializes the minting router.\\n     * @param nftContract_ The NFT contract.\\n     * @param tokenName The name of the NFT token.\\n     * @param version The version of the project.\\n     */\\n    constructor(INFT nftContract_, string memory tokenName, string memory version) EIP712Whitelisting(tokenName, version)   {\\n        // Initialize the variables.\\n        _nftContract = nftContract_;\\n        // Set the initial dummy value for the current sale index.\\n        currentSaleIndex = type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Changes the current sale details.\\n     * @param price The price of an NFT for the current sale round.\\n     * @param totalAmount The total amount of NFTs available for the current sale round.\\n     * @param limitAmountPerWallet The total number of NFTs that can be minted by a single wallet during the sale round.\\n     * @param maxAmountPerMint The maximum number of tokens available for minting per single transaction.\\n     */\\n    function changeSaleRoundParams(\\n        uint256 price,\\n        uint256 totalAmount,\\n        uint8 limitAmountPerWallet,\\n        uint256 maxAmountPerMint\\n    ) external onlyOwner {\\n        saleRound.price = price;\\n        saleRound.totalAmount = totalAmount;\\n        saleRound.limitAmountPerWallet = limitAmountPerWallet;\\n        saleRound.maxAmountPerMint = maxAmountPerMint;\\n    }\\n\\n    /**\\n     * @notice Creates a new sale round.\\n     * @dev Requires sales to be disabled and reserves to be minted.\\n     * @param saleType The type of the sale round (WHITELIST - 0, PUBLIC SALE - 1).\\n     * @param price The price of an NFT for the current sale round.\\n     * @param totalAmount The total amount of NFTs available for the current sale round.\\n     * @param limitAmountPerWallet The total number of NFTs that can be minted by a single wallet during the sale round.\\n     * @param maxAmountPerMint The maximum number of tokens available for minting per single transaction.\\n     */\\n    function createSaleRound(\\n        SaleRoundType saleType,\\n        uint256 price,\\n        uint256 totalAmount,\\n        uint256 limitAmountPerWallet,\\n        uint256 maxAmountPerMint\\n    ) external onlyOwner {\\n        // Check if the reserves are minted.\\n        bool preminted = _nftContract.preminted();\\n        require(preminted == true, \\\"Must mint reserved tokens\\\");\\n        // Check if the sales are closed.\\n        require(saleRound.enabled == false, \\\"Must disable the current round\\\");\\n        // Increment the sale round index.\\n        if (currentSaleIndex == type(uint256).max) {\\n            currentSaleIndex = 0;\\n        } else {\\n            currentSaleIndex += 1;\\n        }\\n        // Set new sale parameters.\\n        saleRound.price = price;\\n        saleRound.totalAmount = totalAmount;\\n        saleRound.limitAmountPerWallet = limitAmountPerWallet;\\n        saleRound.maxAmountPerMint = maxAmountPerMint;\\n        saleRound.saleType = saleType;\\n\\n        // Reset the number of tokens minted during the round.\\n        totalMintedAmountCurrentRound = 0;\\n    }\\n\\n    /**\\n     * @notice Starts the sale round.\\n     */\\n    function enableSaleRound() external onlyOwner {\\n        require(saleRound.enabled == false, \\\"Sale round was already enabled\\\");\\n        saleRound.enabled = true;\\n    }\\n\\n    /**\\n     * @notice Closes the sale round.\\n     */\\n    function disableSaleRound() external onlyOwner {\\n        require(saleRound.enabled == true, \\\"Sale round was already disabled\\\");\\n        saleRound.enabled = false;\\n    }\\n\\n    /**\\n     * @notice Mints NFTs during whitelist sale rounds.\\n     * @dev Requires the current sale round to be a WHITELIST round.\\n     * @param recipient The address that will receive the minted NFT.\\n     * @param quantity The number of NFTs to mint.\\n     * @param signature The signature of a whitelisted minter.\\n     */\\n    function whitelistMint(address recipient, uint256 quantity, bytes calldata signature) external payable requiresWhitelist(signature) nonReentrant {\\n        require(saleRound.saleType == SaleRoundType.WHITELIST, \\\"Not a whitelist round\\\");\\n        _mint(msg.value, recipient, quantity);\\n    }\\n\\n    /**\\n     * @notice Mints NFTs during public sale rounds.\\n     * @dev Requires the current sale round to be a PUBLIC round.\\n     * @param recipient The address that will receive the minted NFT.\\n     * @param quantity The number of NFTs to mint.\\n     */\\n    function publicMint(address recipient, uint256 quantity) external payable nonReentrant {\\n        require(saleRound.saleType == SaleRoundType.PUBLIC, \\\"Not a public round\\\");\\n        _mint(msg.value, recipient, quantity);\\n    }\\n\\n    /**\\n     * @notice Sets the address that is used during whitelist generation.\\n     * @param signer The address used during whitelist generation.\\n     */\\n    function setWhitelistSigningAddress(address signer) public onlyOwner {\\n        _setWhitelistSigningAddress(signer);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds to the owner wallet.\\n     */\\n    function withdraw() public onlyOwner returns(bool) {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of tokens a minter is allowed to mint.\\n     * @param minter The minter address.\\n     * @return The number of tokens that a minter can mint.\\n     */\\n    function allowedTokenCount(address minter) public view returns (uint256) {\\n        if (saleRound.enabled == false) {\\n            return 0;\\n        }\\n        // Calculate the allowed number of tokens to mint by a wallet.\\n        uint256 allowedWalletCount = saleRound.limitAmountPerWallet != UNLIMITED_AMOUNT\\n        ? (saleRound.limitAmountPerWallet \\u003e _mintedAmountPerAddress[currentSaleIndex][minter]\\n        ? saleRound.limitAmountPerWallet - _mintedAmountPerAddress[currentSaleIndex][minter] : 0)\\n        : _nftContract.MAX_SUPPLY() - _nftContract.totalSupply();\\n        // Calculate the total number of tokens left.\\n        uint256 availableTokenCount = saleRound.totalAmount != UNLIMITED_AMOUNT\\n        ? (saleRound.totalAmount \\u003e mintedAmountPerRound[currentSaleIndex]\\n        ? saleRound.totalAmount - mintedAmountPerRound[currentSaleIndex] : 0)\\n        : _nftContract.MAX_SUPPLY() - _nftContract.totalSupply();\\n        // Calculate the limit of the number of tokens per single mint.\\n        uint256 allowedAmountPerMint = saleRound.maxAmountPerMint != UNLIMITED_AMOUNT\\n        ? saleRound.maxAmountPerMint : _nftContract.MAX_SUPPLY() - _nftContract.totalSupply();\\n        // Get the minimum of all values.\\n        uint256 allowedTokens = allowedWalletCount \\u003c availableTokenCount ? allowedWalletCount : availableTokenCount;\\n        allowedTokens = allowedAmountPerMint \\u003c allowedTokens ? allowedAmountPerMint : allowedTokens;\\n        return allowedTokens;\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens left for the running sale round.\\n     */\\n    function tokensLeft() public view returns (uint256) {\\n        if (saleRound.enabled == false) {\\n            return 0;\\n        }\\n\\n        return saleRound.totalAmount != UNLIMITED_AMOUNT\\n        ? (saleRound.totalAmount \\u003e mintedAmountPerRound[currentSaleIndex]\\n        ? saleRound.totalAmount - mintedAmountPerRound[currentSaleIndex] : 0)\\n        : _nftContract.MAX_SUPPLY() - _nftContract.totalSupply();\\n    }\\n\\n    /**\\n     * @notice Mints NFTs.\\n     * @param value The purchase fee.\\n     * @param recipient The address that will receive the minted NFT.\\n     * @param quantity The number of NFTs to mint.\\n     */\\n    function _mint(uint256 value, address recipient, uint256 quantity) private {\\n        require(saleRound.enabled == true, \\\"Sale round is disabled\\\");\\n        require(quantity \\u003e 0, \\\"Quantity must be \\u003e 0\\\");\\n\\n        if (saleRound.maxAmountPerMint != UNLIMITED_AMOUNT) {\\n            require(quantity \\u003c= saleRound.maxAmountPerMint, \\\"Max mint amount exceeded\\\");\\n        }\\n\\n        if (saleRound.totalAmount != UNLIMITED_AMOUNT) {\\n            require(totalMintedAmountCurrentRound + quantity \\u003c= saleRound.totalAmount, \\\"Max sale amount reached\\\");\\n        }\\n\\n        if (saleRound.limitAmountPerWallet != UNLIMITED_AMOUNT) {\\n            uint256 mintedAmountSoFar = _mintedAmountPerAddress[currentSaleIndex][recipient];\\n            require(mintedAmountSoFar + quantity \\u003c= saleRound.limitAmountPerWallet, \\\"Max minted per address reached\\\");\\n        }\\n\\n        require(value \\u003e= saleRound.price * quantity, \\\"Insufficient funds\\\");\\n        _nftContract.mint(recipient, quantity);\\n        totalMintedAmountCurrentRound += quantity;\\n        // update total minted amount of this address\\n        _mintedAmountPerAddress[currentSaleIndex][recipient] += quantity;\\n        mintedAmountPerRound[currentSaleIndex] += quantity;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract INFT\",\"name\":\"nftContract_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"allowedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limitAmountPerWallet\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerMint\",\"type\":\"uint256\"}],\"name\":\"changeSaleRoundParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingRouter.SaleRoundType\",\"name\":\"saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmountPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerMint\",\"type\":\"uint256\"}],\"name\":\"createSaleRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSaleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSaleRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSaleRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedAmountPerRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleRound\",\"outputs\":[{\"internalType\":\"enum MintingRouter.SaleRoundType\",\"name\":\"saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmountPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerMint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setWhitelistSigningAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintedAmountCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintingRouter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e283dddc1d93e40e3748de182ff0219cd154372e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000e536e65616b7920476f626c696e730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://db4fcc35abcabe4bc4648c82218a1de5bf64f44037ba034c767166efb48dd179"}]}