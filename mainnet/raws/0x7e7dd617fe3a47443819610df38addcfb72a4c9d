{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/IPiRatGame.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPiRatGame {\r\n}\r\n// File: contracts/IBOOTY.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBOOTY {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function claimBooty(address owner) external;\r\n    function burnExternal(address from, uint256 amount) external;\r\n    function initTimeStamp(address owner, uint256 timeStamp) external;\r\n    function showPendingClaimable(address owner) external view returns (uint256);\r\n    function showEarningRate(address owner) external view returns (uint256);\r\n    function claimGift(address to) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IPiRats.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IPiRats is IERC721 {\r\n\r\n    struct CrewCaptain {\r\n        bool isCrew;\r\n        uint8 body;\r\n        uint8 clothes;\r\n        uint8 face;\r\n        uint8 mouth;\r\n        uint8 eyes;\r\n        uint8 head;\r\n        uint8 legendRank;\r\n    }\r\n    \r\n    function paidTokens() external view returns (uint256);\r\n    function maxTokens() external view returns (uint256);\r\n    function mintPiRat(address recipient, uint16 amount, uint256 seed) external;\r\n    function plankPiRat(address recipient, uint16 amount, uint256 seed, uint256 _burnToken) external;\r\n    function getTokenTraits(uint256 tokenId) external view returns (CrewCaptain memory);\r\n    function isCrew(uint256 tokenId) external view returns(bool);\r\n    function getBalanceCrew(address owner) external view returns (uint16);\r\n    function getBalanceCaptain(address owner) external view returns (uint16);\r\n    function getTotalRank(address owner) external view returns (uint256);\r\n    function walletOfOwner(address owner) external view returns (uint256[] memory);\r\n    function getTotalPiratsMinted() external view returns(uint256 totalPiratsMinted);\r\n    function getTotalPiratsBurned() external view returns(uint256 totalPiratsBurned);\r\n    function getTotalPirats() external view returns(uint256 totalPirats);\r\n  \r\n}\r\n// File: contracts/IPOTMTraits.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IPOTMTraits {\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n  function selectMintTraits(uint256 seed) external view returns (IPiRats.CrewCaptain memory t);\r\n  function selectPlankTraits(uint256 seed) external view returns (IPiRats.CrewCaptain memory t);\r\n}\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/PiRatGame.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////\r\n//     \u2554\u2550\u2557\u2566\u2566\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557       //\r\n//     \u2560\u2550\u255d\u2551\u2560\u2566\u255d\u2560\u2550\u2563 \u2551 \u255a\u2550\u2557       //\r\n//     \u2569  \u2569\u2569\u255a\u2550\u2569 \u2569 \u2569 \u255a\u2550\u255d       //\r\n//     \u2554\u2550\u2557\u2554\u2550\u2557  \u2554\u2566\u2557\u2566 \u2566\u2554\u2550\u2557      //\r\n//     \u2551 \u2551\u2560\u2563    \u2551 \u2560\u2550\u2563\u2551\u2563       //\r\n//     \u255a\u2550\u255d\u255a     \u2569 \u2569 \u2569\u255a\u2550\u255d      //\r\n//\u2554\u2566\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557\u2566  \u2566\u2554\u2550\u2557\u2566\u2550\u2557\u2554\u2550\u2557\u2554\u2550\u2557//\r\n//\u2551\u2551\u2551\u2551\u2563  \u2551 \u2560\u2550\u2563\u255a\u2557\u2554\u255d\u2551\u2563 \u2560\u2566\u255d\u255a\u2550\u2557\u2551\u2563 //\r\n//\u2569 \u2569\u255a\u2550\u255d \u2569 \u2569 \u2569 \u255a\u255d \u255a\u2550\u255d\u2569\u255a\u2550\u255a\u2550\u255d\u255a\u2550\u255d//\r\n////////////////////////////////\r\n\r\ncontract PiRatGame is IPiRatGame, Ownable, ReentrancyGuard, Pausable {\r\n\r\n    /// GENERAL SETUP ///\r\n    bool public publicSaleStarted;\r\n\r\n    uint256 public constant PRESALE_PRICE = 0.0420 ether;\r\n    uint256 public constant MINT_PRICE = 0.0420 ether;\r\n\r\n    uint256 private maxBootyCost = 5000 ether;\r\n\r\n    /// WHITELIST SETUP ///\r\n    struct Whitelist {\r\n        bool isWhitelisted;\r\n        uint16 numMinted;\r\n    }\r\n    \r\n    mapping(address => Whitelist) private _whitelistAddresses;\r\n\r\n    /// LEGENDLIST SETUP ///\r\n    struct Legendlist {\r\n        bool isLegendlisted;\r\n        bool giftAvailable;\r\n    }\r\n\r\n    mapping(address => Legendlist) private _legendlistAddresses;\r\n\r\n    /// MINT SETUP ///\r\n    struct MintCommit {\r\n        uint16 amount;\r\n    }\r\n\r\n    event MintCommitted(address indexed owner, uint256 indexed amount);\r\n    event MintRevealed(address indexed owner, uint256 indexed amount);\r\n\r\n    uint16 private _mintCommitId = 0;\r\n    uint16 public pendingMintAmt;\r\n\r\n    mapping(address => mapping(uint16 => MintCommit)) private _mintCommits;   \r\n\r\n    mapping(address => uint16) private _pendingMintCommitId;\r\n\r\n    /// WALK THE PLANK SETUP ///\r\n    struct PlankCommit {\r\n        uint16 amount;\r\n    }\r\n\r\n    event PlankCommitted(address indexed owner, uint256 indexed amount);\r\n    event PlankRevealed(address indexed owner, uint256 indexed amount);\r\n\r\n    uint16 private _plankCommitId = 20000;\r\n    uint16 private pendingPlankAmt;\r\n\r\n    mapping(uint16 => uint256) private _plankCommitRandoms;\r\n    mapping(address => mapping(uint16 => PlankCommit)) private _plankCommits;\r\n    mapping(address => uint16) private _pendingPlankCommitId;\r\n\r\n    /// RANDOM NUMBER SETUP ///\r\n    mapping(uint256 => uint256) private commitIdToRandomNumber;\r\n    mapping(address => uint256) private commitTimeStamp; \r\n\r\n    IPiRats public potm;\r\n    IBOOTY public booty;\r\n\r\n    constructor()    \r\n    {\r\n        _pause();\r\n    }\r\n\r\n    /// MODIFIERS ///\r\n\r\n    modifier requireContractsSet() {\r\n        require(\r\n            address(booty) != address(0) && \r\n            address(potm) != address(0), \"Contracts not set\");\r\n      _;\r\n    }\r\n\r\n    /// WHITELIST ///\r\n    \r\n    function addToWhitelist(address[] calldata addressesToAdd) public onlyOwner {\r\n        for (uint256 i = 0; i < addressesToAdd.length; i++) {\r\n            _whitelistAddresses[addressesToAdd[i]] = Whitelist(true, 0);\r\n        }\r\n    }\r\n\r\n    function addToLegendlist(address[] calldata addressesToAdd) public onlyOwner {\r\n        for (uint256 i = 0; i < addressesToAdd.length; i++) {\r\n            _legendlistAddresses[addressesToAdd[i]] = Legendlist(true, true);\r\n        }\r\n    }\r\n\r\n    function setPublicSaleStart(bool started) external onlyOwner {\r\n        publicSaleStarted = started;\r\n        if(publicSaleStarted) {\r\n        }\r\n    }\r\n\r\n    /// MINTING ///\r\n\r\n    function commitPirat(uint16 amount) external payable whenNotPaused nonReentrant {\r\n        require(tx.origin == msg.sender, \"Only EOA\");\r\n        require(_pendingMintCommitId[msg.sender] == 0, \"Already have pending mints\");\r\n        uint256 totalPirats = potm.getTotalPirats();\r\n        uint256 totalPending = pendingMintAmt + pendingPlankAmt;\r\n        uint256 maxTokens = potm.maxTokens();\r\n        uint256 paidTokens = potm.paidTokens();\r\n        require(totalPirats + totalPending + amount <= maxTokens, \"All tokens minted\");\r\n        require(amount > 0 && amount <= 10, \"Invalid mint amount\");\r\n        if (totalPirats < paidTokens) {\r\n            require(totalPirats + totalPending + amount <= paidTokens, \"All tokens on-sale already sold\");\r\n            if(publicSaleStarted) {\r\n                require(msg.value == amount * MINT_PRICE, \"Invalid payment amount\");\r\n            } else {\r\n                require(amount * PRESALE_PRICE == msg.value, \"Invalid payment amount\");\r\n                require(_whitelistAddresses[msg.sender].isWhitelisted, \"Not on whitelist\");\r\n                require(_whitelistAddresses[msg.sender].numMinted + amount <= 5, \"too many mints\");\r\n                _whitelistAddresses[msg.sender].numMinted += uint16(amount);\r\n            }\r\n        } else {\r\n            require(msg.value == 0);\r\n        }\r\n        uint256 totalBootyCost = 0;\r\n        for (uint i = 1; i <= amount; i++) {\r\n            totalBootyCost += mintCost(totalPirats + totalPending + i);\r\n            }\r\n        if (totalBootyCost > 0) {\r\n            booty.burnExternal(msg.sender, totalBootyCost);\r\n        }\r\n        _mintCommitId += 1;\r\n        uint16 commitId = _mintCommitId;\r\n        _mintCommits[msg.sender][commitId] = MintCommit(amount);       \r\n        _pendingMintCommitId[msg.sender] = commitId;\r\n        pendingMintAmt += amount;\r\n        uint256 randomNumber = _rand(commitId);\r\n        commitIdToRandomNumber[commitId] = randomNumber;        \r\n        commitTimeStamp[msg.sender] = block.timestamp;\r\n        emit MintCommitted(msg.sender, amount);\r\n    }\r\n\r\n    function mintCost(uint256 tokenId) public view returns (uint256) {\r\n        if (tokenId <= potm.paidTokens()) return 0;\r\n        if (tokenId <= potm.maxTokens() * 2 / 4) return 1000 ether;  // 50%\r\n        if (tokenId <= potm.maxTokens() * 3 / 4) return 3000 ether;  // 75%\r\n        return maxBootyCost;\r\n    }\r\n\r\n    function revealPiRat() public whenNotPaused nonReentrant {\r\n        address recipient = msg.sender;\r\n        uint16 mintCommitIdCur = getMintCommitId(recipient);\r\n        uint256 _timeStamp = commitTimeStamp[recipient];\r\n        uint256 mintSeedCur = getRandomSeed(mintCommitIdCur);\r\n        require(_timeStamp != block.timestamp, \"Please wait, PiRat is still Training!\");\r\n        require(mintSeedCur > 0, \"random seed not set\");\r\n        uint16 amount = getPendingMintAmount(recipient);\r\n        potm.mintPiRat(recipient, amount, mintSeedCur);\r\n        pendingMintAmt -= amount;\r\n        delete _mintCommits[recipient][_mintCommitId];        \r\n        delete _pendingMintCommitId[recipient];\r\n        delete commitIdToRandomNumber[mintCommitIdCur];\r\n        delete commitTimeStamp[recipient];\r\n        emit MintRevealed(recipient, amount);\r\n    }\r\n\r\n    /// WALK THE PLANK ///\r\n\r\n    function walkPlank() external whenNotPaused nonReentrant {\r\n        require(tx.origin == msg.sender, \"Only EOA\");\r\n        require(_pendingPlankCommitId[msg.sender] == 0, \"Already have pending mints\");\r\n        uint16 totalPirats = uint16(potm.getTotalPirats());\r\n        uint16 totalPending = pendingMintAmt + pendingPlankAmt;\r\n        uint256 maxTokens = potm.maxTokens();\r\n        require(totalPirats + totalPending + 1 <= maxTokens, \"All tokens minted\");\r\n        uint256 totalBootyCost = 0;\r\n        for (uint i = 1; i <= 1; i++) {\r\n            totalBootyCost += plankCost(totalPirats + totalPending + i);\r\n            }\r\n        if (totalBootyCost > 0) {\r\n            booty.burnExternal(msg.sender, totalBootyCost);\r\n        }\r\n        _plankCommitId += 1;\r\n        uint16 commitId = _plankCommitId;\r\n        _plankCommits[msg.sender][commitId] = PlankCommit(1);       \r\n        _pendingPlankCommitId[msg.sender] = commitId;\r\n        pendingPlankAmt += 1;\r\n        uint256 randomNumber = _rand(commitId);\r\n        commitIdToRandomNumber[commitId] = randomNumber;        \r\n        commitTimeStamp[msg.sender] = block.timestamp;\r\n        emit PlankCommitted(msg.sender, 1);\r\n    }\r\n\r\n    function plankCost(uint256 tokenId) public view returns (uint256) {\r\n        if (tokenId <= potm.paidTokens()) return 1500 ether; // 25%\r\n        if (tokenId <= potm.maxTokens() * 2 / 4) return 2500 ether;  // 50%\r\n        if (tokenId <= potm.maxTokens() * 3 / 4) return 4500 ether;  // 75%\r\n        return 7500 ether; // 100%\r\n    }\r\n\r\n    function revealPlankPiRat(uint256 tokenId) public whenNotPaused nonReentrant {\r\n        require(potm.isCrew(tokenId), \"Only Crew can Walk The Plank\");\r\n        address recipient = msg.sender;\r\n        uint256 _timeStamp = commitTimeStamp[recipient];\r\n        require(_timeStamp != (block.timestamp + 2), \"Please wait, PiRat is still Training!\");\r\n        uint16 plankCommitIdCur = getPlankCommitId(recipient);\r\n        uint256 plankSeedCur = getRandomSeed(plankCommitIdCur);\r\n        require(plankSeedCur > 0, \"random seed not set\");\r\n        potm.plankPiRat(recipient, 1, plankSeedCur, tokenId);\r\n        pendingPlankAmt--;\r\n        delete _plankCommits[recipient][_plankCommitId];        \r\n        delete _pendingPlankCommitId[recipient];\r\n        delete commitTimeStamp[recipient];\r\n        delete commitIdToRandomNumber[plankCommitIdCur];\r\n        emit PlankRevealed(recipient, 1);\r\n    }\r\n\r\n    /// CLAIMING $BOOTY /// \r\n\r\n    function claimBooty(address owner) public {\r\n        require(tx.origin == msg.sender, \"Only EOA\");\r\n        booty.claimBooty(owner);\r\n    }\r\n\r\n    /// EXTERNAL ///\r\n\r\n    function getPendingMintAmount(address addr) public view returns (uint16 amount) {\r\n        uint16 mintCommitIdCur = _pendingMintCommitId[addr];\r\n        require(mintCommitIdCur > 0, \"No pending commit\");\r\n        MintCommit memory mintCommit = _mintCommits[addr][mintCommitIdCur];\r\n        amount = mintCommit.amount;\r\n    }\r\n\r\n    function getMintCommitId(address addr) public view returns (uint16) {\r\n        require(_pendingMintCommitId[addr] != 0, \"no pending commits\");\r\n        return _pendingMintCommitId[addr];\r\n    }\r\n\r\n    function hasMintPending(address addr) public view returns (bool) {\r\n        return _pendingMintCommitId[addr] != 0;\r\n    }\r\n\r\n    function readyToRevealMint(address addr) public view returns (bool) {\r\n        uint16 mintCommitIdCur = _pendingMintCommitId[addr];\r\n        return getRandomSeed(mintCommitIdCur) !=0;\r\n    }\r\n\r\n    function getPendingPlankAmount(address addr) public view returns (uint16 amount) {\r\n        uint16 plankCommitIdCur = _pendingPlankCommitId[addr];\r\n        require(plankCommitIdCur > 0, \"No pending commit\");\r\n        PlankCommit memory plankCommit = _plankCommits[addr][plankCommitIdCur];\r\n        amount = plankCommit.amount;\r\n    }\r\n\r\n    function getPlankCommitId(address addr) public view returns (uint16) {\r\n        require(_pendingPlankCommitId[addr] != 0, \"no pending commits\");\r\n        return _pendingPlankCommitId[addr];\r\n    }\r\n\r\n    function hasPlankPending(address addr) public view returns (bool) {\r\n        return _pendingPlankCommitId[addr] != 0;\r\n    }\r\n\r\n    function readyToRevealPlank(address addr) public view returns (bool) {\r\n        uint16 plankCommitIdCur = _pendingPlankCommitId[addr];\r\n        return getRandomSeed(plankCommitIdCur) !=0;\r\n    }\r\n\r\n    function claimLegendGift(address addr) public {\r\n        require(_legendlistAddresses[addr].isLegendlisted, \"Not on Legend list\");\r\n        require(_legendlistAddresses[addr].giftAvailable, \"Gift already claimed\");\r\n        booty.claimGift(addr);\r\n        _legendlistAddresses[addr].giftAvailable = false;\r\n    }\r\n\r\n    /// OWNER ///\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\r\n        if (_paused) _pause();\r\n        else _unpause();\r\n    }\r\n\r\n    function setContracts(address _booty, address _potm) external onlyOwner {\r\n        booty = IBOOTY(_booty);       \r\n        potm = IPiRats(_potm);\r\n\r\n    }\r\n\r\n    function deleteMintCommits (address recipient) external onlyOwner {\r\n        uint16 mintCommitIdCur = getMintCommitId(recipient);\r\n        uint256 mintSeedCur = getRandomSeed(mintCommitIdCur);\r\n        require(mintSeedCur > 0, \"No seed set\");\r\n        uint16 amount = getPendingMintAmount(recipient);\r\n        pendingMintAmt -= amount;\r\n        delete _mintCommits[recipient][_mintCommitId];        \r\n        delete _pendingMintCommitId[recipient];\r\n        delete commitIdToRandomNumber[mintCommitIdCur];\r\n        delete commitTimeStamp[recipient];\r\n    }\r\n\r\n    function deletePlankCommits (address recipient) external onlyOwner {\r\n        uint16 plankCommitIdCur = getPlankCommitId(recipient);\r\n        uint256 plankSeedCur = getRandomSeed(plankCommitIdCur);\r\n        require(plankSeedCur > 0, \"random seed not set\");\r\n        pendingPlankAmt--;\r\n        delete _plankCommits[recipient][_plankCommitId];        \r\n        delete _pendingPlankCommitId[recipient];\r\n        delete commitTimeStamp[recipient];\r\n        delete commitIdToRandomNumber[plankCommitIdCur];\r\n    }\r\n    /// READ ///\r\n\r\n    function _rand(uint256 seed) private view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(block.timestamp, seed)));\r\n    }\r\n\r\n    function getRandomSeed(uint16 commitId) private view returns (uint256 randomNumber) {\r\n        randomNumber = commitIdToRandomNumber[commitId];\r\n    }\r\n\r\n    /// SHOW ///\r\n\r\n    function showBootyBalance(address owner) public view returns (uint256 bootyBalance) {\r\n        bootyBalance = booty.balanceOf(owner);\r\n    }\r\n\r\n    function showClaimableBooty(address owner) public view returns (uint256 pendingBooty) {\r\n        pendingBooty = booty.showPendingClaimable(owner);\r\n    }\r\n\r\n    function showEarningRate(address owner) public view returns (uint256 dailyBooty) {\r\n        dailyBooty = booty.showEarningRate(owner);\r\n    }\r\n\r\n    function showTotalMinted() public view returns (uint256 totalMinted) {\r\n        totalMinted = potm.getTotalPiratsMinted();\r\n    }\r\n\r\n    function showTotalBurned() public view returns (uint256 totalBurned) {\r\n        totalBurned = potm.getTotalPiratsBurned();\r\n    }\r\n\r\n    function showTotalSupply() public view returns (uint256 totalSupply) {\r\n        totalSupply = potm.getTotalPirats();\r\n    }\r\n\r\n    function showBalanceCrew(address owner) public view returns (uint16 _balanceCrew) {\r\n        _balanceCrew = potm.getBalanceCrew(owner);\r\n    }\r\n\r\n    function showBalanceCaptain(address owner) public view returns (uint16 _balanceCaptain) {\r\n        _balanceCaptain = potm.getBalanceCaptain(owner);\r\n    }\r\n\r\n    function showTotalRank(address owner) public view returns (uint256 _totalRank) {\r\n        _totalRank = potm.getTotalRank(owner);\r\n    }\r\n\r\n    function showWhitelistStatus(address owner) public view returns (bool) {\r\n        return _whitelistAddresses[owner].isWhitelisted;\r\n    }\r\n\r\n    function showWhitelistRemaininMints(address owner) public view returns (uint256) {\r\n        return (5 - _whitelistAddresses[owner].numMinted);\r\n    }\r\n\r\n    function showLegendStatus(address owner) public view returns (bool) {\r\n        return _legendlistAddresses[owner].isLegendlisted;\r\n    }\r\n\r\n    function showGiftAvailable(address owner) public view returns (bool) {\r\n        return _legendlistAddresses[owner].giftAvailable;\r\n    }\r\n\r\n    function showIsCrew(uint256 tokenId) public view returns (bool) {\r\n        return potm.isCrew(tokenId);\r\n    }\r\n}\r\n// 0xHooch //", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlankCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlankRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToAdd\",\"type\":\"address[]\"}],\"name\":\"addToLegendlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToAdd\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booty\",\"outputs\":[{\"internalType\":\"contract IBOOTY\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claimBooty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimLegendGift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"commitPirat\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deleteMintCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deletePlankCommits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMintCommitId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingMintAmount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPendingPlankAmount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPlankCommitId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasMintPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasPlankPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMintAmt\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"plankCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potm\",\"outputs\":[{\"internalType\":\"contract IPiRats\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"readyToRevealMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"readyToRevealPlank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealPiRat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revealPlankPiRat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_booty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_potm\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"name\":\"setPublicSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showBalanceCaptain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"_balanceCaptain\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showBalanceCrew\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"_balanceCrew\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showBootyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bootyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showClaimableBooty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingBooty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showEarningRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyBooty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showGiftAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"showIsCrew\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showLegendStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTotalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTotalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showTotalRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRank\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showWhitelistRemaininMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walkPlank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PiRatGame", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c82e3a1aa9ff4b25e95159a4d5412d0d56b1fabb85d6f0acdcded208c98e4328"}]}