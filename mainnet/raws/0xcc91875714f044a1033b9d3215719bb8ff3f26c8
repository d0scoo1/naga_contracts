{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: NONE\r\n\r\n//    ____ _                                  \r\n//   / ___| |__   __ _ _ __ __ _  ___  \r\n//  | |   | '_ \\ / _` | '__/ _` |/ _ \\\r\n//  | |___| | | | (_| | | | (_| |  __/\r\n//   \\____|_|_|_|\\__,_|_|  \\__, |\\___|\r\n//         _ __            |___/\r\n//  __   _|___ \\\r\n//  \\ \\ / / __) |\r\n//   \\ V / / __/\r\n//    \\_/ |_____|\r\n                \r\npragma solidity 0.8.10;\r\n\r\ninterface IERC721 {\r\n\tfunction ownerOf(uint256 _user) external view returns(address);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n    }\r\n}\r\n\r\ncontract Charge is ERC20(\"ChargeV2\", \"ChargeV2\"), ReentrancyGuard {\r\n    uint256 constant private rewardtimeframe = 86400; \r\n\tuint256 private FirstRedeemRate = 70 ether; \r\n\tbool private isPauseEnabled;\r\n    address private _owner;\r\n    IERC20 chargeContract;\r\n    mapping(address => uint) private rateForNFT;\r\n    mapping(address => mapping(uint => uint)) private lastUpdateMap;\r\n\r\n\tconstructor() {\r\n\t\t_owner = _msgSender();\r\n\r\n        // Charge V1\r\n        chargeContract = IERC20(0x0235a4Fa8374fd49BB2f01aC953f99748756f3Bd);\r\n        // Charged Punks\r\n        rateForNFT[0x14b98025B6e87c0B8F297F4456797D22cbDF99a8] = 10;\r\n\t}\r\n\r\n    function payRateFrom(address nftContract) private view returns (uint) {\r\n        unchecked {\r\n            return rateForNFT[nftContract] * 1e18;\r\n        }\r\n    }\r\n\r\n\tfunction aGetRewards(uint256[] calldata _tokenIds, address nftContract) nonReentrant external {\r\n        require(isPauseEnabled == false, \"Staking is on pause\");\r\n        uint256 count =  _tokenIds.length;\r\n\t\tuint256 ramount = 0;\r\n\t\tuint256 tamount = 0;\r\n        uint256 payRate = payRateFrom(nftContract);\r\n        uint256 time = block.timestamp;\r\n\r\n        require(payRate > 0, \"This NFT cant generate CHARGE\");\r\n\r\n        unchecked {\r\n            for(uint256 i = 0; i < count; i++) {\r\n                uint punk = _tokenIds[i];\r\n                require(msg.sender == IERC721(nftContract).ownerOf(punk), \"You are not the owner of this punk\");\r\n                if(lastUpdateMap[nftContract][punk] == 0) {\r\n                    ramount = FirstRedeemRate;\r\n                } else {\r\n                    ramount = uint(time - lastUpdateMap[nftContract][punk]) / rewardtimeframe * payRate;\r\n                }\r\n                \r\n                if(ramount > 1){\r\n                    lastUpdateMap[nftContract][punk] = time;\r\n                    tamount += ramount;\r\n                }\r\n            }\r\n        }\r\n\t\trequire(tamount > 1, \"Your punks didn't work hard enough\");\t\r\n\t\t_mint(msg.sender, tamount);\r\n\t}\r\n\r\n\tfunction aGetReward(uint256 _punk, address nftContract) nonReentrant external {\r\n        require(isPauseEnabled == false, \"Staking is on pause\");\r\n\t\trequire(msg.sender == IERC721(nftContract).ownerOf(_punk), \"You are not the owner of this punk\");\r\n\r\n\t\tuint256 ramount = 0;\r\n        uint payRate = payRateFrom(nftContract);\r\n\r\n        require(payRate > 0, \"This NFT cant generate CHARGE\");\r\n\r\n\t\tif(lastUpdateMap[nftContract][_punk] == 0) {\r\n\t\t    ramount = FirstRedeemRate;\r\n\t\t} else {\r\n            unchecked {\r\n                ramount = uint(block.timestamp - lastUpdateMap[nftContract][_punk]) / rewardtimeframe * payRate;\r\n            }\r\n        }\r\n\r\n\t\trequire(ramount > 1, \"Your punk didn't work hard enough\");\r\n\t\tlastUpdateMap[nftContract][_punk] = block.timestamp;\r\n\t\t_mint(msg.sender, ramount);\r\n\t}\r\n\r\n    function bResetStaking(uint[] calldata _tokenIds, address nftContract) external nonReentrant {\r\n        unchecked {\r\n            for (uint256 index = 0; index < _tokenIds.length; index++) {\r\n                lastUpdateMap[nftContract][_tokenIds[index]] = block.timestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n\tfunction zSetPauseStatus(bool _isPauseEnabled) external {\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        isPauseEnabled = _isPauseEnabled;\r\n    }\r\n\t\r\n\tfunction zMint(uint256 coins) external {\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t    coins = coins * 1 ether;\r\n        _mint(msg.sender, coins);\r\n\t}\r\n\t\r\n\tfunction zAirdrop(address[] calldata _addresses, uint256 coins) external {\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        if(coins < 1 ether) {\r\n            coins = coins * 1 ether;\r\n        }\r\n        unchecked {\r\n            for (uint256 ind = 0; ind < _addresses.length; ind++) {\r\n                _mint(_addresses[ind], coins);\r\n            }\r\n        }\r\n\t}\r\n\r\n\tfunction zAirdropToTokens(uint256[] calldata _tokenIds, uint256 coins, address nftContract) external {\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\tcoins = coins * 1 ether;\r\n        if(coins < 1 ether) {\r\n            coins = coins * 1 ether;\r\n        }\r\n        unchecked {\r\n            for (uint256 ind = 0; ind < _tokenIds.length; ind++) {\r\n                _mint(address(IERC721(nftContract).ownerOf(_tokenIds[ind])), coins);\r\n            }\r\n        }\r\n    }\r\n\r\n    function zSetFirstRedeemRate(uint256 _FirstRedeemRate) external {\r\n        require(_FirstRedeemRate != 0, \"Cant set a redeemRate of Zero for first\");\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\tFirstRedeemRate = _FirstRedeemRate * 1e18;\r\n    }\r\n\r\n    function zUpdateRewardTime(uint256[] calldata _tokenIds, uint256 newTime, address nftContract) external {\r\n\t    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\tfor (uint256 index = 0; index < _tokenIds.length; index++) {\r\n            lastUpdateMap[nftContract][_tokenIds[index]] = newTime;\r\n\t    }\r\n\t}\r\n\r\n    function zGenerationRate(uint[] calldata amounts, address[] calldata nftContracts) external {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        require(amounts.length == nftContracts.length, \"Must have equal array size\");\r\n\r\n        for (uint256 index = 0; index < amounts.length; index++) {\r\n            rateForNFT[nftContracts[index]] = amounts[index];\r\n\t    }\r\n    }\r\n\r\n    function zTradeYa(uint amount) external nonReentrant {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(chargeContract.allowance(msg.sender, address(this)) >= amount, \"Not enough allowance\");\r\n        require(chargeContract.transferFrom(msg.sender, address(this), amount));\r\n\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    function lastTimestamp(uint punkId, address nftContract) external view returns (uint) {\r\n        return lastUpdateMap[nftContract][punkId];\r\n    }\r\n\r\n    function zCheckReward(uint256 _punk, address nftContract) external view returns (uint)  {\r\n        require(isPauseEnabled == false, \"Staking is on pause\");\r\n\t\tuint256 ramount = 0;\r\n        uint payRate = payRateFrom(nftContract);\r\n\r\n        require(payRate > 0, \"This NFT cant generate CHARGE\");\r\n\r\n\t\tif(lastUpdateMap[nftContract][_punk] == 0) {\r\n\t\t    ramount = FirstRedeemRate;\r\n\t\t} else {\r\n            unchecked {\r\n                ramount = uint(block.timestamp - lastUpdateMap[nftContract][_punk]) / rewardtimeframe * payRate;\r\n            }\r\n        }\r\n        return ramount;\r\n\t}\r\n\r\n    function zCheckRewards(uint256[] calldata _punk, address nftContract) external view returns (uint)  {\r\n        uint rAmount = 0;\r\n        for (uint256 index = 0; index < _punk.length; index++) {\r\n            rAmount += this.zCheckReward(_punk[index], nftContract);\r\n\t    }\r\n        return rAmount;\r\n    }\r\n\r\n    function viewTime() external view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_punk\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"aGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"aGetRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"bResetStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"zAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"zAirdropToTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_punk\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"zCheckReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_punk\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"zCheckRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"nftContracts\",\"type\":\"address[]\"}],\"name\":\"zGenerationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"zMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_FirstRedeemRate\",\"type\":\"uint256\"}],\"name\":\"zSetFirstRedeemRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPauseEnabled\",\"type\":\"bool\"}],\"name\":\"zSetPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zTradeYa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"zUpdateRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Charge", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87870c0f55e4c43c1757221ff584e1735cef51dea6b9d620cd9ce2c21a8e22cf"}]}