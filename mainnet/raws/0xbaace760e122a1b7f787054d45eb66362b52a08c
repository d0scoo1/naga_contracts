{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: AngoraStaker.sol\r\n\r\n\r\n// File: anotest.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of decimals in the token\r\n     */\r\n    function decimals() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the floor of the division of two numbers\r\n     *\r\n     * This divides two numbers and rounds down\r\n     */\r\n    function floorDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        return a / b - (a % b == 0 ? 1 : 0);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n        \r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// solhint-disable not-rely-on-time, avoid-low-level-calls\r\ncontract AngoraStaker is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public stakingToken; // Staking token\r\n\r\n    uint256 private _totalSupply; // Total staked amount\r\n    uint256 private _totalRewards;  // Total amount for rewards\r\n    uint256 private _stakeRequired = 100e18; // Minimum stake amount\r\n\r\n    // Set standard contract data in ContractData struct\r\n    ContractData private _data = ContractData({\r\n        isActive: 0,\r\n        reentrant: 1,\r\n        timeFinished: 0,\r\n        baseMultiplier: 1e18\r\n    });\r\n\r\n    mapping (address => UserDeposit) private _deposits; // Track all user deposits\r\n    mapping (address => uint256) private _userRewardPaid; // Track all user claims\r\n\r\n    // Store global contract data in packed struct\r\n    struct ContractData {\r\n        uint8 isActive;\r\n        uint8 reentrant;\r\n        uint64 timeFinished;\r\n        uint64 baseMultiplier;\r\n    }\r\n\r\n    // Store user deposit data in packed struct\r\n    struct UserDeposit {\r\n        uint8 lock; // 1 = 1 7 days; 2 = 30 days; 3 = 90 days\r\n        uint64 timestamp;\r\n        uint256 staked;\r\n    }\r\n\r\n    constructor(IERC20 ) {\r\n        stakingToken = IERC20(0x60a5C1c2f75f61B1B8aDFD66B04dcE40d29fEecE);\r\n    }\r\n\r\n    // ===== MODIFIERS ===== //\r\n\r\n    /**\r\n     * @dev Reentrancy protection\r\n     */\r\n    modifier nonReentrant()\r\n    {\r\n        require(_data.reentrant == 1, \"Reentrancy not allowed\");\r\n        _data.reentrant = 2;\r\n        _;\r\n        _data.reentrant = 1;\r\n    }\r\n\r\n    // ===== PAYABLE DEFAULTS ====== //\r\n\r\n   \r\n\r\n    // ===== VIEW FUNCTIONS ===== //\r\n\r\n    /**\r\n     * @dev Check total amount staked\r\n     *\r\n     * @return totalSupply the total amount staked\r\n     */\r\n    function totalSupply() external view returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Check total rewards amount\r\n     *\r\n     * @notice this assumes that staking token is the same as reward token\r\n     *\r\n     * @return totalRewards the total balance of contract - amount staked\r\n     */\r\n    function totalRewards() external view returns (uint256)\r\n    {\r\n        return _totalRewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Check base multiplier of contract\r\n     *\r\n     * @notice Normalized to 1e18 = 100%. Contract currently uses a 1x, 2x, and 3x multiplier\r\n     * based on how long the user locks their stake for (in UserDeposit struct).\r\n     * Therefore max baseMultiplier would be <= 333e15 (33.3%).\r\n     *\r\n     * @return baseMultiplier 1e18 normalized percentage to start \r\n     */\r\n    function baseMultiplier() external view returns (uint256)\r\n    {\r\n        return _data.baseMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks amount staked for account.\r\n     *\r\n     * @param account the user account to look up.\r\n     *\r\n     * @return staked the total amount staked from account.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256)\r\n    {\r\n        return _deposits[account].staked;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks all user deposit data for account.\r\n     *\r\n     * @param account the user account to look up.\r\n     *\r\n     * @return userDeposit the entire deposit data.\r\n     */\r\n    function getDeposit(address account) external view returns (UserDeposit memory)\r\n    {\r\n        return _deposits[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if staking contract is active.\r\n     *\r\n     * @notice _isActive is stored as uint where 0 = false; 1 = true.\r\n     *\r\n     * @return isActive boolean true if 1; false if not.\r\n     */\r\n    function isActive() external view returns (bool)\r\n    {\r\n        return _data.isActive == 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Check current minimum stake amount\r\n     *\r\n     * @return minimum the min stake amount\r\n     */\r\n    function getMinimumStake() external view returns (uint256)\r\n    {\r\n        return _stakeRequired;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks when staking finished.\r\n     *\r\n     * @notice if 0, staking is still active.\r\n     *\r\n     * @return timeFinished the block timestamp of when staking completed.\r\n     */\r\n    function timeEnded() external view returns (uint256)\r\n    {\r\n        return _data.timeFinished;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks pending rewards currently accumulating for month.\r\n     *\r\n     * @notice These rewards are prorated for the current period (month).\r\n     * Users cannot withdraw rewards until a full month has passed.\r\n     * If a user makes an additional deposit mid-month, these pending rewards\r\n     * will be added to their new staked amount, and lock time reset.\r\n     *\r\n     * @param account the user account to use for calculation.\r\n     *\r\n     * @return pending the pending reward for the current period.\r\n     */\r\n    function pendingReward(address account) public view returns (uint256)\r\n    {\r\n        // If staking rewards are finished, should always return 0\r\n        if (_data.timeFinished > 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Get deposit record for account\r\n        UserDeposit memory userDeposit = _deposits[account];\r\n\r\n        if (userDeposit.staked == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Calculate total time, week/months, and time delta between\r\n        uint256 timePassed = block.timestamp - userDeposit.timestamp;\r\n        uint256 daysPassed = timePassed > 0 ? Math.floorDiv(timePassed, 86400) : 0;\r\n        uint256 interimTime = timePassed - (daysPassed * 86400);\r\n\r\n        // Calculate pending rewards based on prorated time from the current period\r\n        uint256 pending = userDeposit.staked * (_data.baseMultiplier * uint256(userDeposit.lock)) / 1e18 * interimTime / 2628000;\r\n        return pending;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks current earned rewards for account.\r\n     *\r\n     * @notice These rewards are calculated by the number of full week/months\r\n     * passed since deposit, based on the multiplier set by the user based on\r\n     * lockup time (i.e. 1x for 7 days, 2x for 30 days, 3x for 90 days).\r\n     * This function subtracts withdrawn rewards from the calculation so if\r\n     * total rewards are 100 coins, but 50 are withdrawn,\r\n     * it should return 50.\r\n     *\r\n     * @param account the user account to use for calculation.\r\n     *\r\n     * @return totalReward the total rewards the user has earned.\r\n     */\r\n    function earned(address account) public view returns (uint256)\r\n    {\r\n        // Get deposit record for account\r\n        UserDeposit memory userDeposit = _deposits[account];\r\n        \r\n        // Get total rewards paid already\r\n        uint256 rewardPaid = _userRewardPaid[account];\r\n\r\n        // If a final timestamp is set, use that instead of current timestamp\r\n        uint256 endTime = _data.timeFinished == 0 ? block.timestamp : _data.timeFinished;\r\n        uint256 daysPassed = Math.floorDiv(endTime - userDeposit.timestamp, 86400);\r\n\r\n        // If no days have passed, return 0\r\n        if (daysPassed == 0) return 0;\r\n\r\n        // Calculate total earned - amount already paid\r\n        uint256 totalReward = userDeposit.staked * ((_data.baseMultiplier * userDeposit.lock) * daysPassed) / 1e18 - rewardPaid;\r\n        \r\n        return totalReward;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if user can withdraw their stake.\r\n     *\r\n     * @notice uses the user's lock chosen on deposit, multiplied\r\n     * by the amount of seconds in a day.\r\n     *\r\n     * @param account the user account to check.\r\n     *\r\n     * @return canWithdraw boolean value determining if user can withdraw stake.\r\n     */\r\n    function withdrawable(address account) public view returns (bool)\r\n    {\r\n        UserDeposit memory userDeposit = _deposits[account];\r\n        uint256 unlockTime = _getUnlockTime(userDeposit.timestamp, userDeposit.lock);\r\n        \r\n        if (block.timestamp < unlockTime) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if current time past lock time.\r\n     *\r\n     * @param timestamp the user's initial lock time.\r\n     * @param lock the lock multiplier chosen (1 = 7 days, 2 = 30 days, 3 = 90 days).\r\n     *\r\n     * @return unlockTime the timestamp after which a user can withdraw.\r\n     */\r\n    function _getUnlockTime(uint64 timestamp, uint8 lock) private pure returns (uint256)\r\n    {\r\n        if (lock == 1) {\r\n            // Add one week\r\n            return timestamp + (86400 * 7);\r\n        } else if (lock == 2) {\r\n            // Add one months\r\n            return timestamp + (86400 * 30);            \r\n        } else {\r\n            // Add three months\r\n            return timestamp + (86400 * 90);\r\n        }\r\n    }\r\n\r\n    // ===== MUTATIVE FUNCTIONS ===== //\r\n\r\n    /**\r\n     * @dev Deposit and stake funds\r\n     *\r\n     * @param amount the amount of tokens to stake\r\n     * @param lock the lock multiplier (1 = 7 days, 2 = 30 days, 3 = 90 days).\r\n     *\r\n     * @notice Users cannot change lock periods if adding additional stake\r\n     */\r\n    function deposit(uint256 amount, uint8 lock) external payable nonReentrant\r\n    {\r\n        // Check if staking is active\r\n        require(_data.isActive != 0, \"Staking inactive\");\r\n        require(lock > 0 && lock < 4, \"Lock must be 1, 2, or 3\");\r\n        require(amount > 0, \"Amount cannot be 0\");\r\n\r\n        // Get existing user deposit. All 0s if non-existent\r\n        UserDeposit storage userDeposit = _deposits[msg.sender];\r\n\r\n        require(userDeposit.staked + amount >= _stakeRequired, \"Need to meet minimum stake\");\r\n\r\n        // Transfer token\r\n        stakingToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        // If user's current stake is greater than 0, we need to get\r\n        // earned and pending rewards and add them to stake and total\r\n        if (userDeposit.staked > 0) {\r\n            uint256 earnedAmount = earned(msg.sender);\r\n            uint256 pendingAmount = pendingReward(msg.sender);\r\n            uint256 combinedAmount = earnedAmount + pendingAmount;\r\n\r\n            // Update user's claimed amount\r\n            _userRewardPaid[msg.sender] += combinedAmount;\r\n\r\n            // Update total rewards by subtracting earned/pending amounts\r\n            _totalRewards -= combinedAmount;\r\n\r\n            // Update total supply and current stake\r\n            _totalSupply += amount + combinedAmount;\r\n\r\n            // Save new deposit data\r\n            userDeposit.staked += amount + combinedAmount;\r\n            userDeposit.timestamp = uint64(block.timestamp);\r\n\r\n            if (lock > userDeposit.lock || block.timestamp > _getUnlockTime(userDeposit.timestamp, userDeposit.lock)) {\r\n                userDeposit.lock = lock;\r\n            }\r\n        } else {\r\n            // Create new deposit record for user with new lock time\r\n            userDeposit.lock = lock;\r\n            userDeposit.timestamp = uint64(block.timestamp);\r\n            userDeposit.staked = amount;\r\n\r\n            // Add new amount to total supply\r\n            _totalSupply += amount;\r\n        }\r\n\r\n        emit Deposited(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws a user's stake.\r\n     *\r\n     * @param amount the amount to withdraw.\r\n     *\r\n     * @notice must be past unlock time.\r\n     */\r\n    function withdraw(uint256 amount) external payable nonReentrant\r\n    {\r\n        // Get user deposit info in storage\r\n        UserDeposit storage userDeposit = _deposits[msg.sender];\r\n\r\n        // Check if user can withdraw amount\r\n        require(userDeposit.staked > 0, \"User has no stake\");\r\n        require(withdrawable(msg.sender), \"Lock still active\");\r\n        require(amount <= userDeposit.staked, \"Withdraw amount too high\");\r\n\r\n        // Get earned rewards and paid rewards\r\n        uint256 earnedRewards = earned(msg.sender);\r\n\r\n        // Calculate amount to withdraw\r\n        uint256 amountToWithdraw = amount + earnedRewards;\r\n\r\n        // Check if user is withdrawing their total stake\r\n        if (userDeposit.staked == amount) {\r\n            // If withdrawing full amount we no longer care about paid rewards\r\n            _userRewardPaid[msg.sender] = 0;\r\n            // We only need to set staked to 0 because it is the only\r\n            // value checked on future deposits\r\n            userDeposit.staked = 0;\r\n        } else {\r\n            uint256 daysForStaking;\r\n            if (userDeposit.lock == 1) {\r\n                daysForStaking = 7;\r\n            } else if (userDeposit.lock == 2) {\r\n                daysForStaking = 30;\r\n            } else if (userDeposit.lock == 3) {\r\n                daysForStaking = 90;\r\n            }\r\n            // Remove amount from staked\r\n            userDeposit.staked -= amount;\r\n            // Start fresh\r\n            _userRewardPaid[msg.sender] = 0;\r\n            // Set new timestamp to 7, 30, or 90 days prior so users can still withdraw\r\n            // from original stake time but rewards essentially restart\r\n            userDeposit.timestamp = uint64(block.timestamp - (86400 * daysForStaking));\r\n            _userRewardPaid[msg.sender] = earned(msg.sender);\r\n        }\r\n\r\n        // Update total staked amount and rewards amount\r\n        _totalSupply -= amount;\r\n        _totalRewards -= earnedRewards;\r\n\r\n        // Transfer tokens to user\r\n        stakingToken.safeTransfer(msg.sender, amountToWithdraw);\r\n\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdrawal in case rewards have been pulled\r\n     *\r\n     * @notice Only available after staking is closed and\r\n     * all reward tokens have been withdrawn.\r\n     */\r\n    function emergencyWithdrawal() external payable\r\n    {\r\n        require(_data.isActive == 0, \"Staking must be closed\");\r\n        require(_data.timeFinished > 0, \"Staking must be closed\");\r\n        require(_totalRewards == 0, \"Use normal withdraw\");\r\n\r\n        // Get user deposit info\r\n        uint256 amountToWithdraw = _deposits[msg.sender].staked;\r\n        require(amountToWithdraw > 0, \"No stake to withdraw\");\r\n\r\n        // Reset all data\r\n        _userRewardPaid[msg.sender] = 0;\r\n        _deposits[msg.sender].staked = 0;\r\n\r\n        // Update total staked amount\r\n        _totalSupply -= amountToWithdraw;\r\n\r\n        // Transfer tokens to user\r\n        stakingToken.safeTransfer(msg.sender, amountToWithdraw);\r\n\r\n        emit Withdrawal(msg.sender, amountToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims earned rewards.\r\n     */\r\n    function claimRewards() external payable nonReentrant\r\n    {\r\n        // Get user's earned rewards\r\n        uint256 amountToWithdraw = earned(msg.sender);\r\n        \r\n        require(amountToWithdraw > 0, \"No rewards to withdraw\");\r\n        require(amountToWithdraw <= _totalRewards, \"Not enough rewards in contract\");\r\n\r\n        // Add amount to user's withdraw rewards\r\n        _userRewardPaid[msg.sender] += amountToWithdraw;\r\n\r\n        // Update total rewards\r\n        _totalRewards -= amountToWithdraw;\r\n\r\n        stakingToken.safeTransfer(msg.sender, amountToWithdraw);\r\n\r\n        emit RewardsClaimed(amountToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @dev Update minimum stake amount\r\n     *\r\n     * @param minimum the new minimum stake account\r\n     */\r\n    function updateMinimum(uint256 minimum) external payable onlyOwner\r\n    {\r\n        _stakeRequired = minimum;\r\n        \r\n        emit MinimumUpdated(minimum);\r\n    }\r\n\r\n  function updateMultiplier(uint64 multiplier) external payable onlyOwner\r\n    {\r\n        _data.baseMultiplier = multiplier;\r\n        \r\n        emit MultiplierUpdated(multiplier);\r\n    }\r\n    /**\r\n     * @dev Funds rewards for contract\r\n     *\r\n     * @param amount the amount of tokens to fund\r\n     */\r\n    function fundStaking(uint256 amount) external payable onlyOwner\r\n    {\r\n        require(amount > 0, \"Amount cannot be 0\");\r\n\r\n        _totalRewards += amount;\r\n\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        emit StakingFunded(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws rewards tokens\r\n     *\r\n     * @notice Requires rewards to be closed. This\r\n     * function is intended to pull leftover tokens\r\n     * once all users have claimed rewards.\r\n     */\r\n    function withdrawRewardTokens() external payable onlyOwner\r\n    {\r\n        require(_data.timeFinished > 0, \"Staking must be complete\");\r\n\r\n        uint256 amountToWithdraw = _totalRewards;\r\n        _totalRewards = 0;\r\n\r\n        stakingToken.safeTransfer(owner(), amountToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @dev Closes reward period\r\n     *\r\n     * @notice This is a one-way function. Once staking is closed, it\r\n     * cannot be re-enabled. Use cautiously.\r\n     */\r\n    function closeRewards() external payable onlyOwner\r\n    {\r\n        require(_data.isActive == 1, \"Contract already inactive\");\r\n        _data.isActive = 0;\r\n        _data.timeFinished = uint64(block.timestamp);\r\n        \r\n        emit StakingEnded(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables staking\r\n     */\r\n    function enableStaking() external payable onlyOwner\r\n    {\r\n        require(_data.isActive == 0, \"Staking already active\");\r\n        _data.isActive = 1;\r\n\r\n        emit StakingEnabled();\r\n    }\r\n\r\n    // ===== EVENTS ===== //\r\n\r\n    event StakingFunded(uint256 amount);\r\n    event StakingEnabled();\r\n    event StakingEnded(uint256 timestamp);\r\n    event RewardsClaimed(uint256 amount);\r\n    event Deposited(address indexed account, uint256 amount);\r\n    event Withdrawal(address indexed account, uint256 amount);\r\n    event MinimumUpdated(uint256 newMinimum);\r\n    event MultiplierUpdated(uint256 newMultiplier);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"MultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakingEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lock\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableStaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundStaking\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"lock\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"internalType\":\"struct AngoraStaker.UserDeposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEnded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"updateMinimum\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"multiplier\",\"type\":\"uint64\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AngoraStaker", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000060a5c1c2f75f61b1b8adfd66b04dce40d29feece", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://320e41f515daf5a7949f8e4e543506312e047daf782d9d0fef94374d556178a6"}]}