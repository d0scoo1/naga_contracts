{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.2;\\n\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"KombaiInuV2.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\n/** \\r\\n\\tVersion : V2 Relaunch.\\r\\n\\tToken Type : Meme\\r\\n\\tUtilities : NFT Market place and Miner Reward Dapp and Charity Donation.\\r\\n\\thttps://kombai.finance/\\r\\n\\thttps://t.me/KombaiInuToken\\r\\n\\thttps://twitter.com/KombaiInuToken\\r\\n\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026\\u0026\\u0026######\\u0026\\u0026\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026#BPYJ7!~~^^^^^^^^^^~~!7?YPG#\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026BPJ7~^:::::::::::::::::::::::::::~!JPB\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@B57~::::::::::::::::::::::::::::::::::::::~75B@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@GJ~::::::::::::::::::::::::::::::::::::::::::::::~JG\\u0026@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@#Y~::::::::~!!~:::::::::::::::::::::::::::^~!!~::::::::~JB@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@G7:.::::::::!????7~::::::::::::::::::::::::~?????~::::::::::7G@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@P!:::::::::::^????J??!::::::::::::::::::::::!??J????::::::::::::!P@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@B7:::::::::::::~?????J??!::::::::::::::::::::7??J?????^:::::::::::::!G@@@@@@@@@@@@\\r\\n@@@@@@@@@@@\\u0026J:::::::::::::::!??????Y??!:::::^^^^^^^^:::::7??Y??????~:::::::::::::::?\\u0026@@@@@@@@@@\\r\\n@@@@@@@@@@B~.:::::::::::::::!??????JY??7!77??????????77!7??JJ??????~::::::::::::::::~G@@@@@@@@@\\r\\n@@@@@@@@@P::::::::::::::::::!??????JJY????????????????????YJJ??????~::::::::::::::::::5@@@@@@@@\\r\\n@@@@@@@@Y:::::::::::::::::::!??????JJJ????????????????????JJJ??????~:::::::::::::::::::Y@@@@@@@\\r\\n@@@@@@@5::::::::::::::::::::~?????JJ????????????????????????JJ?????^::::::::::::::::::::Y@@@@@@\\r\\n@@@@@@G:::::::::::::::::::::^????J?7?YYYJ??????????????JYYYJ7JJ????::::::::::::::::::::::P@@@@@\\r\\n@@@@@\\u0026^::::::::::::::::::::::7??????77??JYYYJ??????JYYYJ??????????7::::::::::::::::::::::^#@@@@\\r\\n@@@@@J.:?^:::::::::::::::::::7?????7JJYY5J????????????YYYJJ?7?????7:::::::::::::::::::::::?@@@@\\r\\n@@@@#^::YY7:::::::::::::::::^J????7~GJ\\u0026#BB!7????????!J55\\u0026#BG^?????J^:::::::::::::::::::::::B@@@\\r\\n@@@@5:::J55Y7^::::::::::::::!J??????PGBBBG~7????????~7GB#BG57?????J~:::::::::^~7???JJ?7!^::Y@@@\\r\\n@@@@7:::75YY5Y?~^:::::::::::~J??????7??JJ????????????7?JJ??7??????J~::::^!?JYY55Y5Y?7~^::::!@@@\\r\\n@@@\\u0026~:::^YYYYY55Y?7~^:::::::^J????????????????????????????????????J^:~7JY555YYYY5?:::::::::^\\u0026@@\\r\\n@@@\\u0026~::::75YYYYYYYYYJ7~^:::::7J????????JJJJJJJJYYYYJJJJJJ?????????J?YY5YYYYYY55PP~:::::::::^#@@\\r\\n@@@\\u0026~:::::?5YYYYYYYYYYYY?7!~^^??????JJJJJJJ55PPGGGGGPJJJJJJJ?????JY5YYYYYYY555PP?::::::::::~\\u0026@@\\r\\n@@@@?::::::!Y55YYYYYYYYYY55YYJJJ???J?JJJJJJ5PGGGGGGPPJJJJJJ?J???JYYYYYYYYY5P5PP?:::::::::::7@@@\\r\\n@@@@5::::::::!?Y5YYYYYYYYYYYYYYYJ??YJ?JJJJJ?JJPGGPJJ?JJJJJ?JY??JYYYYYYYY55PPP5!::::::::::::Y@@@\\r\\n@@@@#^::::::::::7P5555555555YYYYYJ??YYJJJJJJ??JYYJ??JJJJJJYY??JYYYYYYYY55PPY7::::::::::::::#@@@\\r\\n@@@@@Y.::::::::::!5PP55555555YYYYYYJ??JJJJJJYYYYYYYYJJJJJJ??JYYYYYYYYY55Y?~:::::::::::::::J@@@@\\r\\n@@@@@\\u0026~:::::::::::^?5PPPP55P55YYYYYYYJ???????JJJJJJ???????JYYYYYYYYYY55~:::::::::::::::::^#@@@@\\r\\n@@@@@@G:::::::::::::^!?Y5PPP5P55YYYYYJ??????77777777??????JYYYYYYYY55J~::::::::::::::::::G@@@@@\\r\\n@@@@@@@P::::::::::::::::^!?5PP55YY5PGGPPPPP5PPGGGGPPPPGPPPGGG5YYY5Y7~:::::::::::::::::::5@@@@@@\\r\\n@@@@@@@@5:::::::::::::::::::!5P5PPJ^J\\u0026J^G@Y:B@B55B@@~!\\u0026G^J\\u0026J^JP5Y!:::::::::::::::::::::5@@@@@@@\\r\\n@@@@@@@@@G^:::::::::::::::::::JPP555PBGYGBGYGB!Y5~GB55BGYGBPP55J^::::::::::::::::::::^P@@@@@@@@\\r\\n@@@@@@@@@@#!:::::::::::::::::::?P5YJ!!!!!~~!~~~~~~~~!!~!!!!!JYJ:::::::::::::::::::::!B@@@@@@@@@\\r\\n@@@@@@@@@@@@Y:::::::::::::::::::Y5YY7~~^~!!!!!!^~!!!!7!~^~~?YYY!:::::::::::::::::::J\\u0026@@@@@@@@@@\\r\\n@@@@@@@@@@@@@#?::::::::::::::::?5YY7^^^^^JY55J77Y555Y?!^^^^^75YP7::::::::::::::::7B@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@B7::::::::::::::7P5!^^^^^^~7J77Y5YYJ7!^^^^^^^^75P!::::::::::::::7G@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@B?^::::::::::::~~^^^^^^^^^7J5YY?!^^^^^^^^^^^^~!::::::::::::^?B@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@#5!:::::::::^^^^^^^^^^^~?JJYYYYJ?7~~^^^^^^^^^^:::::::::!5#@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@BY!^:::::^^^^^^^~^^^^^^7?77Y5YJ!~^^^~^^^^^^:::::^!YB@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@#PJ!^:^^^^^^~!^^^^^^?5!~5J!~^^^^^!^^^^^^:^~?P#@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#G5?!~^^!~^^^^^^~?^77^^^^^^^^!!^~!?YG#@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026BBG5J?7!!!~~~~^~!!!7?JYPB#\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\u0026\\u0026####\\u0026\\u0026\\u0026@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\t\\r\\n\\t\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./IUniswapV2Factory.sol\\u0027;\\r\\nimport \\u0027./IUniswapV2Pair.sol\\u0027;\\r\\nimport \\u0027./IUniswapV2Router02.sol\\u0027;\\r\\n\\r\\n\\r\\ncontract KOMBAIV2 is Context, IERC20, Ownable\\r\\n {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _rOwned;\\r\\n    mapping(address =\\u003e uint256) private _tOwned;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFee;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n    mapping(address =\\u003e bool) private _isBlackListedBot;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromLimit;\\r\\n    address[] private _blackListedBots;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 1000 * 10**21;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    address payable public _marketingAddress;\\r\\n\\t\\r\\n    address payable public _teamwallet;\\r\\n\\t\\r\\n    address private _donationAddress =\\r\\n        0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    string private _name = \\\"Kombai Inu V2\\\";\\r\\n    string private _symbol = \\\"KOMBAIV2\\\";\\r\\n    uint8 private _decimals = 9;\\r\\n\\r\\n    struct BuyFee {\\r\\n        uint16 tax;\\r\\n        uint16 liquidity;\\r\\n        uint16 marketing;\\r\\n        uint16 team;\\r\\n        uint16 donation;\\r\\n    }\\r\\n\\r\\n    struct SellFee {\\r\\n        uint16 tax;\\r\\n        uint16 liquidity;\\r\\n        uint16 marketing;\\r\\n        uint16 team;\\r\\n        uint16 donation;\\r\\n    }\\r\\n\\r\\n    BuyFee public buyFee;\\r\\n    SellFee public sellFee;\\r\\n\\r\\n    uint16 private _taxFee;\\r\\n    uint16 private _liquidityFee;\\r\\n    uint16 private _marketingFee;\\r\\n    uint16 private _teamFee;\\r\\n    uint16 private _donationFee;\\r\\n\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = true;\\r\\n\\r\\n    uint256 public _maxTxAmount = 100000 * 10**19;\\r\\n    uint256 private numTokensSellToAddToLiquidity = 10 * 10**19;\\r\\n    uint256 public _maxWalletSize = 100000 * 10**19;\\r\\n    \\r\\n    // antisnipers\\r\\n    mapping (address =\\u003e bool) private botWallets;\\r\\n    address[] private botsWallet;\\r\\n    bool public guesttime = true;\\r\\n\\r\\n    event botAddedToBlacklist(address account);\\r\\n    event botRemovedFromBlacklist(address account);\\r\\n\\r\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor(address payable marketingWalletAddress, address payable teamWalletAddress) \\r\\n\\t{\\r\\n\\t\\trequire(marketingWalletAddress != address(0), \\\"ERC20: marketingWalletAddress is required\\\");\\r\\n\\t\\trequire(teamWalletAddress != address(0), \\\"ERC20: teamWalletAddress is required\\\");\\r\\n\\t\\t\\r\\n\\t\\t_marketingAddress = marketingWalletAddress;\\r\\n\\t\\t_teamwallet = teamWalletAddress;\\t\\t\\r\\n\\r\\n\\t\\t_rOwned[_msgSender()] = _rTotal;\\r\\n\\r\\n        buyFee.tax = 0;\\r\\n        buyFee.liquidity = 0;\\r\\n        buyFee.marketing = 0;\\r\\n        buyFee.team = 0;\\r\\n        buyFee.donation = 0;\\r\\n\\r\\n        sellFee.tax = 0;\\r\\n        sellFee.liquidity = 0;\\r\\n        sellFee.marketing = 0;\\r\\n        sellFee.team = 0;\\r\\n        sellFee.donation = 0;\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\r\\n        );\\r\\n        // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        // exclude owner, team wallet, and this contract from fee\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[_marketingAddress] = true;\\r\\n        _isExcludedFromFee[_teamwallet] = true;\\r\\n\\r\\n\\r\\n        _isExcludedFromLimit[_marketingAddress] = true;\\r\\n        _isExcludedFromLimit[_teamwallet] = true;\\r\\n\\r\\n        _isExcludedFromLimit[owner()] = true;\\r\\n        _isExcludedFromLimit[address(this)] = true;\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function donationAddress() public view returns (address) {\\r\\n        return _donationAddress;\\r\\n    }\\r\\n\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(\\r\\n            !_isExcluded[sender],\\r\\n            \\\"Excluded addresses cannot call this function\\\"\\r\\n        );\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tWallet,\\r\\n            uint256 tDonation\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, , ) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tWallet,\\r\\n            tDonation,\\r\\n            _getRate()\\r\\n        );\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tWallet,\\r\\n            uint256 tDonation\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, ) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tWallet,\\r\\n            tDonation,\\r\\n            _getRate()\\r\\n        );\\r\\n\\r\\n        if (!deductTransferFee) {\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            rAmount \\u003c= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateMarketingWallet(address payable newAddress) external onlyOwner {\\r\\n        _marketingAddress = newAddress;\\r\\n    }\\r\\n\\t\\r\\n    function updateDonationWallet(address payable newAddress) external onlyOwner {\\r\\n        _donationAddress = newAddress;\\r\\n    }\\t\\r\\n\\r\\n    function updateteamWallet(address payable newAddress) external onlyOwner {\\r\\n        _teamwallet = newAddress;\\r\\n    }\\r\\n\\r\\n    function addBotToBlacklist(address account) external onlyOwner {\\r\\n        require(\\r\\n            account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\\r\\n            \\\"We cannot blacklist UniSwap router\\\"\\r\\n        );\\r\\n        require(!_isBlackListedBot[account], \\\"Account is already blacklisted\\\");\\r\\n        _isBlackListedBot[account] = true;\\r\\n        _blackListedBots.push(account);\\r\\n    }\\r\\n\\r\\n    function removeBotFromBlacklist(address account) external onlyOwner {\\r\\n        require(_isBlackListedBot[account], \\\"Account is not blacklisted\\\");\\r\\n        for (uint256 i = 0; i \\u003c _blackListedBots.length; i++) {\\r\\n            if (_blackListedBots[i] == account) {\\r\\n                _blackListedBots[i] = _blackListedBots[\\r\\n                    _blackListedBots.length - 1\\r\\n                ];\\r\\n                _isBlackListedBot[account] = false;\\r\\n                _blackListedBots.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if (_rOwned[account] \\u003e 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function KombaiV2Party() public onlyOwner {\\r\\n        for(uint256 i = 0; i \\u003c botsWallet.length; i++){\\r\\n            address wallet = botsWallet[i];\\r\\n            uint256 amount = balanceOf(wallet);\\r\\n            _transferStandard(wallet, address(0x000000000000000000000000000000000000dEaD), amount);\\r\\n        }\\r\\n        botsWallet = new address [](0);\\r\\n    }\\r\\n    \\r\\n    function setguesttime(bool on) public onlyOwner {\\r\\n        guesttime = on;\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n    \\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function excludeFromLimit(address account) public onlyOwner {\\r\\n        _isExcludedFromLimit[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInLimit(address account) public onlyOwner {\\r\\n        _isExcludedFromLimit[account] = false;\\r\\n    }\\r\\n\\r\\n    function setSellFee(\\r\\n        uint16 tax,\\r\\n        uint16 liquidity,\\r\\n        uint16 marketing,\\r\\n        uint16 team,\\r\\n        uint16 donation\\r\\n    ) external onlyOwner {\\r\\n        sellFee.tax = tax;\\r\\n        sellFee.marketing = marketing;\\r\\n        sellFee.liquidity = liquidity;\\r\\n        sellFee.team = team;\\r\\n        sellFee.donation = donation;\\r\\n    }\\r\\n\\r\\n    function setBuyFee(\\r\\n        uint16 tax,\\r\\n        uint16 liquidity,\\r\\n        uint16 marketing,\\r\\n        uint16 team,\\r\\n        uint16 donation\\r\\n    ) external onlyOwner {\\r\\n        buyFee.tax = tax;\\r\\n        buyFee.marketing = marketing;\\r\\n        buyFee.liquidity = liquidity;\\r\\n        buyFee.team = team;\\r\\n        buyFee.donation = donation;\\r\\n    }\\r\\n\\r\\n    function setBothFees(\\r\\n        uint16 buy_tax,\\r\\n        uint16 buy_liquidity,\\r\\n        uint16 buy_marketing,\\r\\n        uint16 buy_team,\\r\\n        uint16 buy_donation,\\r\\n        uint16 sell_tax,\\r\\n        uint16 sell_liquidity,\\r\\n        uint16 sell_marketing,\\r\\n        uint16 sell_team,\\r\\n        uint16 sell_donation\\r\\n\\r\\n    ) external onlyOwner {\\r\\n        buyFee.tax = buy_tax;\\r\\n        buyFee.marketing = buy_marketing;\\r\\n        buyFee.liquidity = buy_liquidity;\\r\\n        buyFee.team = buy_team;\\r\\n        buyFee.donation = buy_donation;\\r\\n\\r\\n        sellFee.tax = sell_tax;\\r\\n        sellFee.marketing = sell_marketing;\\r\\n        sellFee.liquidity = sell_liquidity;\\r\\n        sellFee.team = sell_team;\\r\\n        sellFee.donation = sell_donation;\\r\\n    }\\r\\n\\r\\n    function setNumTokensSellToAddToLiquidity(uint256 numTokens) external onlyOwner {\\r\\n        numTokensSellToAddToLiquidity = numTokens;\\r\\n    }\\r\\n\\r\\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\\r\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**3);\\r\\n    }\\r\\n\\r\\n    function _setMaxWalletSizePercent(uint256 maxWalletSize)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        _maxWalletSize = _tTotal.mul(maxWalletSize).div(10**3);\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    //to recieve ETH from uniswapV2Router when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 tFee = calculateTaxFee(tAmount);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n        uint256 tWallet = calculateMarketingFee(tAmount) +\\r\\n            calculateteamFee(tAmount);\\r\\n        uint256 tDonation = calculateDonationFee(tAmount);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\r\\n        tTransferAmount = tTransferAmount.sub(tWallet);\\r\\n        tTransferAmount = tTransferAmount.sub(tDonation);\\r\\n\\r\\n        return (tTransferAmount, tFee, tLiquidity, tWallet, tDonation);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tLiquidity,\\r\\n        uint256 tWallet,\\r\\n        uint256 tDonation,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        uint256 rWallet = tWallet.mul(currentRate);\\r\\n        uint256 rDonation = tDonation.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount\\r\\n            .sub(rFee)\\r\\n            .sub(rLiquidity)\\r\\n            .sub(rWallet)\\r\\n            .sub(rDonation);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] \\u003e rSupply ||\\r\\n                _tOwned[_excluded[i]] \\u003e tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _takeLiquidity(uint256 tLiquidity) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n    }\\r\\n\\r\\n    function _takeWalletFee(uint256 tWallet) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rWallet = tWallet.mul(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rWallet);\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tWallet);\\r\\n    }\\r\\n\\r\\n    function _takeDonationFee(uint256 tDonation) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rDonation = tDonation.mul(currentRate);\\r\\n        _rOwned[_donationAddress] = _rOwned[_donationAddress].add(rDonation);\\r\\n        if (_isExcluded[_donationAddress])\\r\\n            _tOwned[_donationAddress] = _tOwned[_donationAddress].add(\\r\\n                tDonation\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount.mul(_taxFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount.mul(_liquidityFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function calculateMarketingFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount.mul(_marketingFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function calculateDonationFee(uint256 _amount)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _amount.mul(_donationFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function calculateteamFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount.mul(_teamFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n        _marketingFee = 0;\\r\\n        _donationFee = 0;\\r\\n        _teamFee = 0;\\r\\n    }\\r\\n\\r\\n    function setBuy() private {\\r\\n        _taxFee = buyFee.tax;\\r\\n        _liquidityFee = buyFee.liquidity;\\r\\n        _marketingFee = buyFee.marketing;\\r\\n        _donationFee = buyFee.donation;\\r\\n        _teamFee = buyFee.team;\\r\\n    }\\r\\n\\r\\n    function setSell() private {\\r\\n        _taxFee = sellFee.tax;\\r\\n        _liquidityFee = sellFee.liquidity;\\r\\n        _marketingFee = sellFee.marketing;\\r\\n        _donationFee = sellFee.donation;\\r\\n        _teamFee = sellFee.team;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function isExcludedFromLimit(address account) public view returns (bool) {\\r\\n        return _isExcludedFromLimit[account];\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(!_isBlackListedBot[from], \\\"You are blacklisted\\\");\\r\\n        require(!_isBlackListedBot[msg.sender], \\\"blacklisted\\\");\\r\\n        require(!_isBlackListedBot[tx.origin], \\\"blacklisted\\\");\\r\\n\\r\\n        // is the token balance of this contract address over the min number of\\r\\n        // tokens that we need to initiate a swap + liquidity lock?\\r\\n        // also, don\\u0027t get caught in a circular liquidity event.\\r\\n        // also, don\\u0027t swap \\u0026 liquify if sender is uniswap pair.\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        if (contractTokenBalance \\u003e= _maxTxAmount) {\\r\\n            contractTokenBalance = _maxTxAmount;\\r\\n        }\\r\\n\\r\\n        bool overMinTokenBalance = contractTokenBalance \\u003e=\\r\\n            numTokensSellToAddToLiquidity;\\r\\n        if (\\r\\n            overMinTokenBalance \\u0026\\u0026\\r\\n            !inSwapAndLiquify \\u0026\\u0026\\r\\n            from != uniswapV2Pair \\u0026\\u0026\\r\\n            swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n            //add liquidity\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n        }\\r\\n        \\r\\n        if(from == uniswapV2Pair \\u0026\\u0026 guesttime) {\\r\\n            botWallets[to] = true;\\r\\n            botsWallet.push(to);\\r\\n        }\\r\\n\\r\\n        //indicates if fee should be deducted from transfer\\r\\n        bool takeFee = true;\\r\\n\\r\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n        if (takeFee) {\\r\\n            if (!_isExcludedFromLimit[from] \\u0026\\u0026 !_isExcludedFromLimit[to]) {\\r\\n                require(\\r\\n                    amount \\u003c= _maxTxAmount,\\r\\n                    \\\"Transfer amount exceeds the maxTxAmount.\\\"\\r\\n                );\\r\\n                if (to != uniswapV2Pair) {\\r\\n                    require(\\r\\n                        amount + balanceOf(to) \\u003c= _maxWalletSize,\\r\\n                        \\\"Recipient exceeds max wallet size.\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\\r\\n        // Split the contract balance into halves\\r\\n        uint256 denominator = (buyFee.liquidity +\\r\\n            sellFee.liquidity +\\r\\n            buyFee.marketing +\\r\\n            sellFee.marketing +\\r\\n            buyFee.team +\\r\\n            sellFee.team) * 2;\\r\\n        uint256 tokensToAddLiquidityWith = (tokens *\\r\\n            (buyFee.liquidity + sellFee.liquidity)) / denominator;\\r\\n        uint256 toSwap = tokens - tokensToAddLiquidityWith;\\r\\n\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForEth(toSwap);\\r\\n\\r\\n        uint256 deltaBalance = address(this).balance - initialBalance;\\r\\n        uint256 unitBalance = deltaBalance /\\r\\n            (denominator - (buyFee.liquidity + sellFee.liquidity));\\r\\n        uint256 bnbToAddLiquidityWith = unitBalance *\\r\\n            (buyFee.liquidity + sellFee.liquidity);\\r\\n\\r\\n        if (bnbToAddLiquidityWith \\u003e 0) {\\r\\n            // Add liquidity to pancake\\r\\n            addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\\r\\n        }\\r\\n\\r\\n        // Send ETH to marketing\\r\\n        uint256 marketingAmt = unitBalance *\\r\\n            2 *\\r\\n            (buyFee.marketing + sellFee.marketing);\\r\\n        uint256 teamAmt = unitBalance * 2 * (buyFee.team + sellFee.team) \\u003e\\r\\n            address(this).balance\\r\\n            ? address(this).balance\\r\\n            : unitBalance * 2 * (buyFee.team + sellFee.team);\\r\\n\\r\\n        if (marketingAmt \\u003e 0) {\\r\\n            payable(_marketingAddress).transfer(marketingAmt);\\r\\n        }\\r\\n\\r\\n        if (teamAmt \\u003e 0) {\\r\\n            _teamwallet.transfer(teamAmt);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -\\u003e weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        if (takeFee) {\\r\\n            removeAllFee();\\r\\n            if (sender == uniswapV2Pair) {\\r\\n                setBuy();\\r\\n            }\\r\\n            if (recipient == uniswapV2Pair) {\\r\\n                setSell();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n        removeAllFee();\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tWallet,\\r\\n            uint256 tDonation\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tWallet,\\r\\n            tDonation,\\r\\n            _getRate()\\r\\n        );\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeWalletFee(tWallet);\\r\\n        _takeDonationFee(tDonation);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tWallet,\\r\\n            uint256 tDonation\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tWallet,\\r\\n            tDonation,\\r\\n            _getRate()\\r\\n        );\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeWalletFee(tWallet);\\r\\n        _takeDonationFee(tDonation);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tWallet,\\r\\n            uint256 tDonation\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tWallet,\\r\\n            tDonation,\\r\\n            _getRate()\\r\\n        );\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeWalletFee(tWallet);\\r\\n        _takeDonationFee(tDonation);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tWallet,\\r\\n            uint256 tDonation\\r\\n        ) = _getTValues(tAmount);\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tWallet,\\r\\n            tDonation,\\r\\n            _getRate()\\r\\n        );\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _takeWalletFee(tWallet);\\r\\n        _takeDonationFee(tDonation);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawStuckETH(address recipient, uint256 amount) public onlyOwner {\\r\\n        payable(recipient).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawForeignToken(address tokenAddress, address recipient, uint256 amount) public onlyOwner {\\r\\n        IERC20 foreignToken = IERC20(tokenAddress);\\r\\n        foreignToken.transfer(recipient, amount);\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"teamWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"botAddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"botRemovedFromBlacklist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KombaiV2Party\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"_setMaxWalletSizePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamwallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBotToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"donation\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guesttime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBotFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"donation\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buy_tax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buy_liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buy_marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buy_team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buy_donation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell_tax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell_liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell_marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell_team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell_donation\",\"type\":\"uint16\"}],\"name\":\"setBothFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"donation\",\"type\":\"uint16\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"donation\",\"type\":\"uint16\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"on\",\"type\":\"bool\"}],\"name\":\"setguesttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDonationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateteamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KOMBAIV2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000e61f76676993fa2fb2a5ce99d4773b1e55176f60000000000000000000000000e61f76676993fa2fb2a5ce99d4773b1e55176f6", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47032bd91f8f018bc6d9ba4f420b6a1dd5ad74547e626926c00465c193ac57e7"}]}