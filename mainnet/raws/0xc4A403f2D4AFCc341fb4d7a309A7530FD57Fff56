{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/INodeOperatorRegistry.sol\\\";\\nimport \\\"./interfaces/IValidatorFactory.sol\\\";\\nimport \\\"./interfaces/IValidator.sol\\\";\\nimport \\\"./interfaces/IStMATIC.sol\\\";\\n\\n/// @title NodeOperatorRegistry\\n/// @author 2021 ShardLabs.\\n/// @notice NodeOperatorRegistry is the main contract that manage validators\\n/// @dev NodeOperatorRegistry is the main contract that manage operators.\\ncontract NodeOperatorRegistry is\\n    INodeOperatorRegistry,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    enum NodeOperatorStatus {\\n        INACTIVE,\\n        ACTIVE,\\n        STOPPED,\\n        UNSTAKED,\\n        CLAIMED,\\n        EXIT,\\n        JAILED,\\n        EJECTED\\n    }\\n    /// @notice The node operator struct\\n    /// @param status node operator status(INACTIVE, ACTIVE, STOPPED, CLAIMED, UNSTAKED, EXIT, JAILED, EJECTED).\\n    /// @param name node operator name.\\n    /// @param rewardAddress Validator public key used for access control and receive rewards.\\n    /// @param validatorId validator id of this node operator on the polygon stake manager.\\n    /// @param signerPubkey public key used on heimdall.\\n    /// @param validatorShare validator share contract used to delegate for on polygon.\\n    /// @param validatorProxy the validator proxy, the owner of the validator.\\n    /// @param commissionRate the commission rate applied by the operator on polygon.\\n    /// @param maxDelegateLimit max delegation limit that StMatic contract will delegate to this operator each time delegate function is called.\\n    struct NodeOperator {\\n        NodeOperatorStatus status;\\n        string name;\\n        address rewardAddress;\\n        bytes signerPubkey;\\n        address validatorShare;\\n        address validatorProxy;\\n        uint256 validatorId;\\n        uint256 commissionRate;\\n        uint256 maxDelegateLimit;\\n    }\\n\\n    /// @notice all the roles.\\n    bytes32 public constant REMOVE_OPERATOR_ROLE =\\n        keccak256(\\\"LIDO_REMOVE_OPERATOR\\\");\\n    bytes32 public constant PAUSE_OPERATOR_ROLE =\\n        keccak256(\\\"LIDO_PAUSE_OPERATOR\\\");\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"LIDO_DAO\\\");\\n\\n    /// @notice contract version.\\n    string public version;\\n    /// @notice total node operators.\\n    uint256 private totalNodeOperators;\\n\\n    /// @notice validatorFactory address.\\n    address private validatorFactory;\\n    /// @notice stakeManager address.\\n    address private stakeManager;\\n    /// @notice polygonERC20 token (Matic) address.\\n    address private polygonERC20;\\n    /// @notice stMATIC address.\\n    address private stMATIC;\\n\\n    /// @notice keeps track of total number of operators\\n    uint256 nodeOperatorCounter;\\n\\n    /// @notice min amount allowed to stake per validator.\\n    uint256 public minAmountStake;\\n\\n    /// @notice min HeimdallFees allowed to stake per validator.\\n    uint256 public minHeimdallFees;\\n\\n    /// @notice commision rate applied to all the operators.\\n    uint256 public commissionRate;\\n\\n    /// @notice allows restake.\\n    bool public allowsRestake;\\n\\n    /// @notice default max delgation limit.\\n    uint256 public defaultMaxDelegateLimit;\\n\\n    /// @notice This stores the operators ids.\\n    uint256[] private operatorIds;\\n\\n    /// @notice Mapping of all owners with node operator id. Mapping is used to be able to\\n    /// extend the struct.\\n    mapping(address => uint256) private operatorOwners;\\n\\n\\n    /// @notice Mapping of all node operators. Mapping is used to be able to extend the struct.\\n    mapping(uint256 => NodeOperator) private operators;\\n\\n    /// --------------------------- Modifiers-----------------------------------\\n\\n    /// @notice Check if the msg.sender has permission.\\n    /// @param _role role needed to call function.\\n    modifier userHasRole(bytes32 _role) {\\n        checkCondition(hasRole(_role, msg.sender), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /// @notice Check if the amount is inbound.\\n    /// @param _amount amount to stake.\\n    modifier checkStakeAmount(uint256 _amount) {\\n        checkCondition(_amount >= minAmountStake, \\\"Invalid amount\\\");\\n        _;\\n    }\\n\\n    /// @notice Check if the heimdall fee is inbound.\\n    /// @param _heimdallFee heimdall fee.\\n    modifier checkHeimdallFees(uint256 _heimdallFee) {\\n        checkCondition(_heimdallFee >= minHeimdallFees, \\\"Invalid fees\\\");\\n        _;\\n    }\\n\\n    /// @notice Check if the maxDelegateLimit is less or equal to 10 Billion.\\n    /// @param _maxDelegateLimit max delegate limit.\\n    modifier checkMaxDelegationLimit(uint256 _maxDelegateLimit) {\\n        checkCondition(\\n            _maxDelegateLimit <= 10000000000 ether,\\n            \\\"Max amount <= 10B\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Check if the rewardAddress is already used.\\n    /// @param _rewardAddress new reward address.\\n    modifier checkIfRewardAddressIsUsed(address _rewardAddress) {\\n        checkCondition(\\n            operatorOwners[_rewardAddress] == 0 && _rewardAddress != address(0),\\n            \\\"Address used\\\"\\n        );\\n        _;\\n    }\\n\\n    /// -------------------------- initialize ----------------------------------\\n\\n    /// @notice Initialize the NodeOperator contract.\\n    function initialize(\\n        address _validatorFactory,\\n        address _stakeManager,\\n        address _polygonERC20,\\n        address _stMATIC\\n    ) external initializer {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        validatorFactory = _validatorFactory;\\n        stakeManager = _stakeManager;\\n        polygonERC20 = _polygonERC20;\\n        stMATIC = _stMATIC;\\n\\n        minAmountStake = 10 * 10**18;\\n        minHeimdallFees = 20 * 10**18;\\n        defaultMaxDelegateLimit = 10 ether;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(REMOVE_OPERATOR_ROLE, msg.sender);\\n        _setupRole(PAUSE_OPERATOR_ROLE, msg.sender);\\n        _setupRole(DAO_ROLE, msg.sender);\\n    }\\n\\n    /// ----------------------------- API --------------------------------------\\n\\n    /// @notice Add a new node operator to the system.\\n    /// @dev The operator life cycle starts when we call the addOperator\\n    /// func allows adding a new operator. During this call, a new validatorProxy is\\n    /// deployed by the ValidatorFactory which we can use later to interact with the\\n    /// Polygon StakeManager. At the end of this call, the status of the operator\\n    /// will be INACTIVE.\\n    /// @param _name the node operator name.\\n    /// @param _rewardAddress address used for ACL and receive rewards.\\n    /// @param _signerPubkey public key used on heimdall len 64 bytes.\\n    function addOperator(\\n        string memory _name,\\n        address _rewardAddress,\\n        bytes memory _signerPubkey\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        userHasRole(DAO_ROLE)\\n        checkIfRewardAddressIsUsed(_rewardAddress)\\n    {\\n        nodeOperatorCounter++;\\n        address validatorProxy = IValidatorFactory(validatorFactory).create();\\n\\n        operators[nodeOperatorCounter] = NodeOperator({\\n            status: NodeOperatorStatus.INACTIVE,\\n            name: _name,\\n            rewardAddress: _rewardAddress,\\n            validatorId: 0,\\n            signerPubkey: _signerPubkey,\\n            validatorShare: address(0),\\n            validatorProxy: validatorProxy,\\n            commissionRate: commissionRate,\\n            maxDelegateLimit: defaultMaxDelegateLimit\\n        });\\n        operatorIds.push(nodeOperatorCounter);\\n        totalNodeOperators++;\\n        operatorOwners[_rewardAddress] = nodeOperatorCounter;\\n\\n        emit AddOperator(nodeOperatorCounter);\\n    }\\n\\n    /// @notice Allows to stop an operator from the system.\\n    /// @param _operatorId the node operator id.\\n    function stopOperator(uint256 _operatorId)\\n        external\\n        override\\n    {\\n\\n        (, NodeOperator storage no) = getOperator(_operatorId);\\n        require(\\n            no.rewardAddress == msg.sender || hasRole(DAO_ROLE, msg.sender), \\\"unauthorized\\\"\\n        );\\n        NodeOperatorStatus status = getOperatorStatus(no);\\n        checkCondition(\\n            status == NodeOperatorStatus.ACTIVE || status == NodeOperatorStatus.INACTIVE ||\\n            status == NodeOperatorStatus.JAILED\\n        , \\\"Invalid status\\\");\\n\\n        if (status == NodeOperatorStatus.INACTIVE) {\\n            no.status = NodeOperatorStatus.EXIT;\\n        } else {\\n            IStMATIC(stMATIC).withdrawTotalDelegated(no.validatorShare);\\n            no.status = NodeOperatorStatus.STOPPED;\\n        }\\n        emit StopOperator(_operatorId);\\n    }\\n\\n    /// @notice Allows to remove an operator from the system.when the operator status is\\n    /// set to EXIT the GOVERNANCE can call the removeOperator func to delete the operator,\\n    /// and the validatorProxy used to interact with the Polygon stakeManager.\\n    /// @param _operatorId the node operator id.\\n    function removeOperator(uint256 _operatorId)\\n        external\\n        override\\n        whenNotPaused\\n        userHasRole(REMOVE_OPERATOR_ROLE)\\n    {\\n        (, NodeOperator storage no) = getOperator(_operatorId);\\n        checkCondition(no.status == NodeOperatorStatus.EXIT, \\\"Invalid status\\\");\\n\\n        // update the operatorIds array by removing the operator id.\\n        for (uint256 idx = 0; idx < operatorIds.length - 1; idx++) {\\n            if (_operatorId == operatorIds[idx]) {\\n                operatorIds[idx] = operatorIds[operatorIds.length - 1];\\n                break;\\n            }\\n        }\\n        operatorIds.pop();\\n\\n        totalNodeOperators--;\\n        IValidatorFactory(validatorFactory).remove(no.validatorProxy);\\n        delete operatorOwners[no.rewardAddress];\\n        delete operators[_operatorId];\\n\\n        emit RemoveOperator(_operatorId);\\n    }\\n\\n    /// @notice Allows a validator that was already staked on the polygon stake manager\\n    /// to join the PoLido protocol.\\n    function joinOperator() external override whenNotPaused {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.INACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n\\n        IStakeManager sm = IStakeManager(stakeManager);\\n        uint256 validatorId = sm.getValidatorId(msg.sender);\\n\\n        checkCondition(validatorId != 0, \\\"ValidatorId=0\\\");\\n\\n        IStakeManager.Validator memory poValidator = sm.validators(validatorId);\\n\\n        checkCondition(\\n            poValidator.contractAddress != address(0),\\n            \\\"Validator has no ValidatorShare\\\"\\n        );\\n\\n        checkCondition(\\n            (poValidator.status == IStakeManager.Status.Active\\n                ) && poValidator.deactivationEpoch == 0 ,\\n            \\\"Validator isn't ACTIVE\\\"\\n        );\\n\\n        checkCondition(\\n            poValidator.signer ==\\n                address(uint160(uint256(keccak256(no.signerPubkey)))),\\n            \\\"Invalid Signer\\\"\\n        );\\n\\n        IValidator(no.validatorProxy).join(\\n            validatorId,\\n            sm.NFTContract(),\\n            msg.sender,\\n            no.commissionRate,\\n            stakeManager\\n        );\\n\\n        no.validatorId = validatorId;\\n\\n        address validatorShare = sm.getValidatorContract(validatorId);\\n        no.validatorShare = validatorShare;\\n\\n        emit JoinOperator(operatorId);\\n    }\\n\\n    /// ------------------------Stake Manager API-------------------------------\\n\\n    /// @notice Allows to stake a validator on the Polygon stakeManager contract.\\n    /// @dev The stake func allows each operator's owner to stake, but before that,\\n    /// the owner has to approve the amount + Heimdall fees to the ValidatorProxy.\\n    /// At the end of this call, the status of the operator is set to ACTIVE.\\n    /// @param _amount amount to stake.\\n    /// @param _heimdallFee heimdall fees.\\n    function stake(uint256 _amount, uint256 _heimdallFee)\\n        external\\n        override\\n        whenNotPaused\\n        checkStakeAmount(_amount)\\n        checkHeimdallFees(_heimdallFee)\\n    {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.INACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n\\n        (uint256 validatorId, address validatorShare) = IValidator(\\n            no.validatorProxy\\n        ).stake(\\n                msg.sender,\\n                _amount,\\n                _heimdallFee,\\n                true,\\n                no.signerPubkey,\\n                no.commissionRate,\\n                stakeManager,\\n                polygonERC20\\n            );\\n\\n        no.validatorId = validatorId;\\n        no.validatorShare = validatorShare;\\n\\n        emit StakeOperator(operatorId, _amount, _heimdallFee);\\n    }\\n\\n    /// @notice Allows to restake Matics to Polygon stakeManager\\n    /// @dev restake allows an operator's owner to increase the total staked amount\\n    /// on Polygon. The owner has to approve the amount to the ValidatorProxy then make\\n    /// a call.\\n    /// @param _amount amount to stake.\\n    function restake(uint256 _amount, bool _restakeRewards)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        checkCondition(allowsRestake, \\\"Restake is disabled\\\");\\n        if (_amount == 0) {\\n            revert(\\\"Amount is ZERO\\\");\\n        }\\n\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.ACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n        IValidator(no.validatorProxy).restake(\\n            msg.sender,\\n            no.validatorId,\\n            _amount,\\n            _restakeRewards,\\n            stakeManager,\\n            polygonERC20\\n        );\\n\\n        emit RestakeOperator(operatorId, _amount, _restakeRewards);\\n    }\\n\\n    /// @notice Unstake a validator from the Polygon stakeManager contract.\\n    /// @dev when the operators's owner wants to quite the PoLido protocol he can call\\n    /// the unstake func, in this case, the operator status is set to UNSTAKED.\\n    function unstake() external override whenNotPaused {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        NodeOperatorStatus status = getOperatorStatus(no);\\n        checkCondition(\\n            status == NodeOperatorStatus.ACTIVE ||\\n            status == NodeOperatorStatus.JAILED ||\\n            status == NodeOperatorStatus.EJECTED,\\n            \\\"Invalid status\\\"\\n        );\\n        if (status == NodeOperatorStatus.ACTIVE) {\\n            IValidator(no.validatorProxy).unstake(no.validatorId, stakeManager);\\n        }\\n        _unstake(operatorId, no);\\n    }\\n\\n    /// @notice The DAO unstake the operator if it was unstaked by the stakeManager.\\n    /// @dev when the operator was unstaked by the stage Manager the DAO can use this\\n    /// function to update the operator status and also withdraw the delegated tokens,\\n    /// without waiting for the owner to call the unstake function\\n    /// @param _operatorId operator id.\\n    function unstake(uint256 _operatorId) external userHasRole(DAO_ROLE) {\\n        NodeOperator storage no = operators[_operatorId];\\n        NodeOperatorStatus status = getOperatorStatus(no);\\n        checkCondition(status == NodeOperatorStatus.EJECTED, \\\"Invalid status\\\");\\n        _unstake(_operatorId, no);\\n    }\\n\\n    function _unstake(uint256 _operatorId, NodeOperator storage no)\\n        private\\n        whenNotPaused\\n    {\\n        IStMATIC(stMATIC).withdrawTotalDelegated(no.validatorShare);\\n        no.status = NodeOperatorStatus.UNSTAKED;\\n\\n        emit UnstakeOperator(_operatorId);\\n    }\\n\\n    /// @notice Allows the operator's owner to migrate the validator ownership to rewardAddress.\\n    /// This can be done only in the case where this operator was stopped by the DAO.\\n    function migrate() external override nonReentrant {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(no.status == NodeOperatorStatus.STOPPED, \\\"Invalid status\\\");\\n        IValidator(no.validatorProxy).migrate(\\n            no.validatorId,\\n            IStakeManager(stakeManager).NFTContract(),\\n            no.rewardAddress\\n        );\\n\\n        no.status = NodeOperatorStatus.EXIT;\\n        emit MigrateOperator(operatorId);\\n    }\\n\\n    /// @notice Allows to unjail the validator and turn his status from UNSTAKED to ACTIVE.\\n    /// @dev when an operator is JAILED the owner can switch back and stake the\\n    /// operator by calling the unjail func, in this case, the operator status is set\\n    /// to back ACTIVE.\\n    function unjail() external override whenNotPaused {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.JAILED,\\n            \\\"Invalid status\\\"\\n        );\\n\\n        IValidator(no.validatorProxy).unjail(no.validatorId, stakeManager);\\n\\n        emit Unjail(operatorId);\\n    }\\n\\n    /// @notice Allows to top up heimdall fees.\\n    /// @dev the operator's owner can topUp the heimdall fees by calling the\\n    /// topUpForFee, but before that node operator needs to approve the amount of heimdall\\n    /// fees to his validatorProxy.\\n    /// @param _heimdallFee amount\\n    function topUpForFee(uint256 _heimdallFee)\\n        external\\n        override\\n        whenNotPaused\\n        checkHeimdallFees(_heimdallFee)\\n    {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.ACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n        IValidator(no.validatorProxy).topUpForFee(\\n            msg.sender,\\n            _heimdallFee,\\n            stakeManager,\\n            polygonERC20\\n        );\\n\\n        emit TopUpHeimdallFees(operatorId, _heimdallFee);\\n    }\\n\\n    /// @notice Allows to unstake staked tokens after withdraw delay.\\n    /// @dev after the unstake the operator and waiting for the Polygon withdraw_delay\\n    /// the owner can transfer back his staked balance by calling\\n    /// unsttakeClaim, after that the operator status is set to CLAIMED\\n    function unstakeClaim() external override whenNotPaused {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.UNSTAKED,\\n            \\\"Invalid status\\\"\\n        );\\n        uint256 amount = IValidator(no.validatorProxy).unstakeClaim(\\n            no.validatorId,\\n            msg.sender,\\n            stakeManager,\\n            polygonERC20\\n        );\\n\\n        no.status = NodeOperatorStatus.CLAIMED;\\n        emit UnstakeClaim(operatorId, amount);\\n    }\\n\\n    /// @notice Allows withdraw heimdall fees\\n    /// @dev the operator's owner can claim the heimdall fees.\\n    /// func, after that the operator status is set to EXIT.\\n    /// @param _accumFeeAmount accumulated heimdall fees\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external override whenNotPaused {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            no.status == NodeOperatorStatus.CLAIMED,\\n            \\\"Invalid status\\\"\\n        );\\n        IValidator(no.validatorProxy).claimFee(\\n            _accumFeeAmount,\\n            _index,\\n            _proof,\\n            no.rewardAddress,\\n            stakeManager,\\n            polygonERC20\\n        );\\n\\n        no.status = NodeOperatorStatus.EXIT;\\n        emit ClaimFee(operatorId);\\n    }\\n\\n    /// @notice Allows the operator's owner to withdraw rewards.\\n    function withdrawRewards() external override whenNotPaused {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        checkCondition(\\n            getOperatorStatus(no) == NodeOperatorStatus.ACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n        address rewardAddress = no.rewardAddress;\\n        uint256 rewards = IValidator(no.validatorProxy).withdrawRewards(\\n            no.validatorId,\\n            rewardAddress,\\n            stakeManager,\\n            polygonERC20\\n        );\\n\\n        emit WithdrawRewards(operatorId, rewardAddress, rewards);\\n    }\\n\\n    /// @notice Allows the operator's owner to update signer publickey.\\n    /// @param _signerPubkey new signer publickey\\n    function updateSigner(bytes memory _signerPubkey)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        NodeOperatorStatus status = getOperatorStatus(no);\\n        checkCondition(\\n            status == NodeOperatorStatus.ACTIVE || status == NodeOperatorStatus.INACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n        if (no.status == NodeOperatorStatus.ACTIVE) {\\n            IValidator(no.validatorProxy).updateSigner(\\n                no.validatorId,\\n                _signerPubkey,\\n                stakeManager\\n            );\\n        }\\n\\n        no.signerPubkey = _signerPubkey;\\n\\n        emit UpdateSignerPubkey(operatorId);\\n    }\\n\\n    /// @notice Allows the operator owner to update the name.\\n    /// @param _name new operator name.\\n    function setOperatorName(string memory _name)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        // uint256 operatorId = getOperatorId(msg.sender);\\n        // NodeOperator storage no = operators[operatorId];\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        NodeOperatorStatus status = getOperatorStatus(no);\\n\\n        checkCondition(\\n            status == NodeOperatorStatus.ACTIVE || status == NodeOperatorStatus.INACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n        no.name = _name;\\n\\n        emit NewName(operatorId, _name);\\n    }\\n\\n    /// @notice Allows the operator owner to update the rewardAddress.\\n    /// @param _rewardAddress new reward address.\\n    function setOperatorRewardAddress(address _rewardAddress)\\n        external\\n        override\\n        whenNotPaused\\n        checkIfRewardAddressIsUsed(_rewardAddress)\\n    {\\n        (uint256 operatorId, NodeOperator storage no) = getOperator(0);\\n        no.rewardAddress = _rewardAddress;\\n\\n        operatorOwners[_rewardAddress] = operatorId;\\n        delete operatorOwners[msg.sender];\\n\\n        emit NewRewardAddress(operatorId, _rewardAddress);\\n    }\\n\\n    /// -------------------------------DAO--------------------------------------\\n\\n    /// @notice Allows the DAO to set the operator defaultMaxDelegateLimit.\\n    /// @param _defaultMaxDelegateLimit default max delegation amount.\\n    function setDefaultMaxDelegateLimit(uint256 _defaultMaxDelegateLimit)\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n        checkMaxDelegationLimit(_defaultMaxDelegateLimit)\\n    {\\n        defaultMaxDelegateLimit = _defaultMaxDelegateLimit;\\n    }\\n\\n    /// @notice Allows the DAO to set the operator maxDelegateLimit.\\n    /// @param _operatorId operator id.\\n    /// @param _maxDelegateLimit max amount to delegate .\\n    function setMaxDelegateLimit(uint256 _operatorId, uint256 _maxDelegateLimit)\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n        checkMaxDelegationLimit(_maxDelegateLimit)\\n    {\\n        (, NodeOperator storage no) = getOperator(_operatorId);\\n        no.maxDelegateLimit = _maxDelegateLimit;\\n    }\\n\\n    /// @notice Allows to set the commission rate used.\\n    function setCommissionRate(uint256 _commissionRate)\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n    {\\n        commissionRate = _commissionRate;\\n    }\\n\\n    /// @notice Allows the dao to update commission rate for an operator.\\n    /// @param _operatorId id of the operator\\n    /// @param _newCommissionRate new commission rate\\n    function updateOperatorCommissionRate(\\n        uint256 _operatorId,\\n        uint256 _newCommissionRate\\n    ) external override userHasRole(DAO_ROLE) {\\n        (, NodeOperator storage no) = getOperator(_operatorId);\\n        checkCondition(\\n            no.rewardAddress != address(0) ||\\n                no.status == NodeOperatorStatus.ACTIVE,\\n            \\\"Invalid status\\\"\\n        );\\n\\n        if (no.status == NodeOperatorStatus.ACTIVE) {\\n            IValidator(no.validatorProxy).updateCommissionRate(\\n                no.validatorId,\\n                _newCommissionRate,\\n                stakeManager\\n            );\\n        }\\n\\n        no.commissionRate = _newCommissionRate;\\n\\n        emit UpdateCommissionRate(_operatorId, _newCommissionRate);\\n    }\\n\\n    /// @notice Allows to update the stake amount and heimdall fees\\n    /// @param _minAmountStake min amount to stake\\n    /// @param _minHeimdallFees min amount of heimdall fees\\n    function setStakeAmountAndFees(\\n        uint256 _minAmountStake,\\n        uint256 _minHeimdallFees\\n    )\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n        checkStakeAmount(_minAmountStake)\\n        checkHeimdallFees(_minHeimdallFees)\\n    {\\n        minAmountStake = _minAmountStake;\\n        minHeimdallFees = _minHeimdallFees;\\n    }\\n\\n    /// @notice Allows to pause the contract.\\n    function togglePause() external override userHasRole(PAUSE_OPERATOR_ROLE) {\\n        paused() ? _unpause() : _pause();\\n    }\\n\\n    /// @notice Allows to toggle restake.\\n    function setRestake(bool _restake) external override userHasRole(DAO_ROLE) {\\n        allowsRestake = _restake;\\n    }\\n\\n    /// @notice Allows to set the StMATIC contract address.\\n    function setStMATIC(address _stMATIC)\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n    {\\n        stMATIC = _stMATIC;\\n    }\\n\\n    /// @notice Allows to set the validator factory contract address.\\n    function setValidatorFactory(address _validatorFactory)\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n    {\\n        validatorFactory = _validatorFactory;\\n    }\\n\\n    /// @notice Allows to set the stake manager contract address.\\n    function setStakeManager(address _stakeManager)\\n        external\\n        override\\n        userHasRole(DAO_ROLE)\\n    {\\n        stakeManager = _stakeManager;\\n    }\\n\\n    /// @notice Allows to set the contract version.\\n    /// @param _version contract version\\n    function setVersion(string memory _version)\\n        external\\n        override\\n        userHasRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        version = _version;\\n    }\\n\\n    /// @notice Allows to get a node operator by msg.sender.\\n    /// @param _owner a valid address of an operator owner, if not set msg.sender will be used.\\n    /// @return op returns a node operator.\\n    function getNodeOperator(address _owner)\\n        external\\n        view\\n        returns (NodeOperator memory)\\n    {\\n        uint256 operatorId = operatorOwners[_owner];\\n        return _getNodeOperator(operatorId);\\n    }\\n\\n    /// @notice Allows to get a node operator by _operatorId.\\n    /// @param _operatorId the id of the operator.\\n    /// @return op returns a node operator.\\n    function getNodeOperator(uint256 _operatorId)\\n        external\\n        view\\n        returns (NodeOperator memory)\\n    {\\n        return _getNodeOperator(_operatorId);\\n    }\\n\\n    function _getNodeOperator(uint256 _operatorId)\\n        private\\n        view\\n        returns (NodeOperator memory)\\n    {\\n        (, NodeOperator memory nodeOperator) = getOperator(_operatorId);\\n        nodeOperator.status = getOperatorStatus(nodeOperator);\\n        return nodeOperator;\\n    }\\n\\n    function getOperatorStatus(NodeOperator memory _op)\\n        private\\n        view\\n        returns (NodeOperatorStatus res)\\n    {\\n        if (_op.status == NodeOperatorStatus.STOPPED) {\\n            res = NodeOperatorStatus.STOPPED;\\n        } else if (_op.status == NodeOperatorStatus.CLAIMED) {\\n            res = NodeOperatorStatus.CLAIMED;\\n        } else if (_op.status == NodeOperatorStatus.EXIT) {\\n            res = NodeOperatorStatus.EXIT;\\n        } else if (_op.status == NodeOperatorStatus.UNSTAKED) {\\n            res = NodeOperatorStatus.UNSTAKED;\\n        } else {\\n            IStakeManager.Validator memory v = IStakeManager(stakeManager)\\n                .validators(_op.validatorId);\\n            if (\\n                v.status == IStakeManager.Status.Active &&\\n                v.deactivationEpoch == 0\\n            ) {\\n                res = NodeOperatorStatus.ACTIVE;\\n            } else if (\\n                (\\n                    v.status == IStakeManager.Status.Active ||\\n                    v.status == IStakeManager.Status.Locked\\n                ) &&\\n                v.deactivationEpoch != 0\\n            ) {\\n                res = NodeOperatorStatus.EJECTED;\\n            } else if (\\n                v.status == IStakeManager.Status.Locked &&\\n                v.deactivationEpoch == 0\\n            ) {\\n                res = NodeOperatorStatus.JAILED;\\n            } else {\\n                res = NodeOperatorStatus.INACTIVE;\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows to get a validator share address.\\n    /// @param _operatorId the id of the operator.\\n    /// @return va returns a stake manager validator.\\n    function getValidatorShare(uint256 _operatorId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        (, NodeOperator memory op) = getOperator(_operatorId);\\n        return op.validatorShare;\\n    }\\n\\n    /// @notice Allows to get a validator from stake manager.\\n    /// @param _operatorId the id of the operator.\\n    /// @return va returns a stake manager validator.\\n    function getValidator(uint256 _operatorId)\\n        external\\n        view\\n        returns (IStakeManager.Validator memory va)\\n    {\\n        (, NodeOperator memory op) = getOperator(_operatorId);\\n        va = IStakeManager(stakeManager).validators(op.validatorId);\\n    }\\n\\n    /// @notice Allows to get a validator from stake manager.\\n    /// @param _owner user address.\\n    /// @return va returns a stake manager validator.\\n    function getValidator(address _owner)\\n        external\\n        view\\n        returns (IStakeManager.Validator memory va)\\n    {\\n        (, NodeOperator memory op) = getOperator(operatorOwners[_owner]);\\n        va = IStakeManager(stakeManager).validators(op.validatorId);\\n    }\\n\\n    /// @notice Get the stMATIC contract addresses\\n    function getContracts()\\n        external\\n        view\\n        override\\n        returns (\\n            address _validatorFactory,\\n            address _stakeManager,\\n            address _polygonERC20,\\n            address _stMATIC\\n        )\\n    {\\n        _validatorFactory = validatorFactory;\\n        _stakeManager = stakeManager;\\n        _polygonERC20 = polygonERC20;\\n        _stMATIC = stMATIC;\\n    }\\n\\n    /// @notice Get the global state\\n    function getState()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _totalNodeOperator,\\n            uint256 _totalInactiveNodeOperator,\\n            uint256 _totalActiveNodeOperator,\\n            uint256 _totalStoppedNodeOperator,\\n            uint256 _totalUnstakedNodeOperator,\\n            uint256 _totalClaimedNodeOperator,\\n            uint256 _totalExitNodeOperator,\\n            uint256 _totalJailedNodeOperator,\\n            uint256 _totalEjectedNodeOperator\\n        )\\n    {\\n        uint256 operatorIdsLength = operatorIds.length;\\n        _totalNodeOperator = operatorIdsLength;\\n        for (uint256 idx = 0; idx < operatorIdsLength; idx++) {\\n            uint256 operatorId = operatorIds[idx];\\n            NodeOperator memory op = operators[operatorId];\\n            NodeOperatorStatus status = getOperatorStatus(op);\\n\\n            if (status == NodeOperatorStatus.INACTIVE) {\\n                _totalInactiveNodeOperator++;\\n            } else if (status == NodeOperatorStatus.ACTIVE) {\\n                _totalActiveNodeOperator++;\\n            } else if (status == NodeOperatorStatus.STOPPED) {\\n                _totalStoppedNodeOperator++;\\n            } else if (status == NodeOperatorStatus.UNSTAKED) {\\n                _totalUnstakedNodeOperator++;\\n            } else if (status == NodeOperatorStatus.CLAIMED) {\\n                _totalClaimedNodeOperator++;\\n            } else if (status == NodeOperatorStatus.JAILED) {\\n                _totalJailedNodeOperator++;\\n            } else if (status == NodeOperatorStatus.EJECTED) {\\n                _totalEjectedNodeOperator++;\\n            } else {\\n                _totalExitNodeOperator++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Get operatorIds.\\n    function getOperatorIds()\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return operatorIds;\\n    }\\n\\n    /// @notice Returns an operatorInfo list.\\n    /// @param _allWithStake if true return all operators with ACTIVE, EJECTED, JAILED.\\n    /// @param _delegation if true return all operators that delegation is set to true.\\n    /// @return Returns a list of operatorInfo.\\n    function getOperatorInfos(\\n        bool _delegation,\\n        bool _allWithStake\\n    ) external view override returns (Operator.OperatorInfo[] memory) {\\n        Operator.OperatorInfo[]\\n            memory operatorInfos = new Operator.OperatorInfo[](\\n                totalNodeOperators\\n            );\\n\\n        uint256 length = operatorIds.length;\\n        uint256 index;\\n\\n        for (uint256 idx = 0; idx < length; idx++) {\\n            uint256 operatorId = operatorIds[idx];\\n            NodeOperator storage no = operators[operatorId];\\n            NodeOperatorStatus status = getOperatorStatus(no);\\n\\n            // if operator status is not ACTIVE we continue. But, if _allWithStake is true\\n            // we include EJECTED and JAILED operators.\\n            if (\\n                status != NodeOperatorStatus.ACTIVE &&\\n                !(_allWithStake &&\\n                    (status == NodeOperatorStatus.EJECTED ||\\n                        status == NodeOperatorStatus.JAILED))\\n            ) continue;\\n\\n            // if true we check if the operator delegation is true.\\n            if (_delegation) {\\n                if (!IValidatorShare(no.validatorShare).delegation()) continue;\\n            }\\n\\n            operatorInfos[index] = Operator.OperatorInfo({\\n                operatorId: operatorId,\\n                validatorShare: no.validatorShare,\\n                maxDelegateLimit: no.maxDelegateLimit,\\n                rewardAddress: no.rewardAddress\\n            });\\n            index++;\\n        }\\n        if (index != totalNodeOperators) {\\n            Operator.OperatorInfo[]\\n                memory operatorInfosOut = new Operator.OperatorInfo[](index);\\n\\n            for (uint256 i = 0; i < index; i++) {\\n                operatorInfosOut[i] = operatorInfos[i];\\n            }\\n            return operatorInfosOut;\\n        }\\n        return operatorInfos;\\n    }\\n\\n    /// @notice Checks condition and displays the message\\n    /// @param _condition a condition\\n    /// @param _message message to display\\n    function checkCondition(bool _condition, string memory _message)\\n        private\\n        pure\\n    {\\n        require(_condition, _message);\\n    }\\n\\n    /// @notice Retrieve the operator struct based on the operatorId\\n    /// @param _operatorId id of the operator\\n    /// @return NodeOperator structure\\n    function getOperator(uint256 _operatorId)\\n        private\\n        view\\n        returns (uint256, NodeOperator storage)\\n    {\\n        if (_operatorId == 0) {\\n            _operatorId = getOperatorId(msg.sender);\\n        }\\n        NodeOperator storage no = operators[_operatorId];\\n        require(no.rewardAddress != address(0), \\\"Operator not found\\\");\\n        return (_operatorId, no);\\n    }\\n\\n    /// @notice Retrieve the operator struct based on the operator owner address\\n    /// @param _user address of the operator owner\\n    /// @return NodeOperator structure\\n    function getOperatorId(address _user) private view returns (uint256) {\\n        uint256 operatorId = operatorOwners[_user];\\n        checkCondition(operatorId != 0, \\\"Operator not found\\\");\\n        return operatorId;\\n    }\\n\\n    /// -------------------------------Events-----------------------------------\\n\\n    /// @notice A new node operator was added.\\n    /// @param operatorId node operator id.\\n    event AddOperator(uint256 operatorId);\\n\\n    /// @notice A new node operator joined.\\n    /// @param operatorId node operator id.\\n    event JoinOperator(uint256 operatorId);\\n\\n    /// @notice A node operator was removed.\\n    /// @param operatorId node operator id.\\n    event RemoveOperator(uint256 operatorId);\\n\\n    /// @param operatorId node operator id.\\n    event StopOperator(uint256 operatorId);\\n\\n    /// @param operatorId node operator id.\\n    event MigrateOperator(uint256 operatorId);\\n\\n    /// @notice A node operator was staked.\\n    /// @param operatorId node operator id.\\n    event StakeOperator(\\n        uint256 operatorId,\\n        uint256 amount,\\n        uint256 heimdallFees\\n    );\\n\\n    /// @notice A node operator restaked.\\n    /// @param operatorId node operator id.\\n    /// @param amount amount to restake.\\n    /// @param restakeRewards restake rewards.\\n    event RestakeOperator(\\n        uint256 operatorId,\\n        uint256 amount,\\n        bool restakeRewards\\n    );\\n\\n    /// @notice A node operator was unstaked.\\n    /// @param operatorId node operator id.\\n    event UnstakeOperator(uint256 operatorId);\\n\\n    /// @notice TopUp heimadall fees.\\n    /// @param operatorId node operator id.\\n    /// @param amount amount.\\n    event TopUpHeimdallFees(uint256 operatorId, uint256 amount);\\n\\n    /// @notice Withdraw rewards.\\n    /// @param operatorId node operator id.\\n    /// @param rewardAddress reward address.\\n    /// @param amount amount.\\n    event WithdrawRewards(\\n        uint256 operatorId,\\n        address rewardAddress,\\n        uint256 amount\\n    );\\n\\n    /// @notice claims unstake.\\n    /// @param operatorId node operator id.\\n    /// @param amount amount.\\n    event UnstakeClaim(uint256 operatorId, uint256 amount);\\n\\n    /// @notice update signer publickey.\\n    /// @param operatorId node operator id.\\n    event UpdateSignerPubkey(uint256 operatorId);\\n\\n    /// @notice claim herimdall fee.\\n    /// @param operatorId node operator id.\\n    event ClaimFee(uint256 operatorId);\\n\\n    /// @notice update commission rate.\\n    event UpdateCommissionRate(uint256 operatorId, uint256 newCommissionRate);\\n\\n    /// @notice Unjail a validator.\\n    event Unjail(uint256 operatorId);\\n\\n    /// @notice update operator name.\\n    event NewName(uint256 operatorId, string name);\\n\\n    /// @notice update operator name.\\n    event NewRewardAddress(uint256 operatorId, address rewardAddress);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../lib/Operator.sol\\\";\\n\\n/// @title INodeOperatorRegistry\\n/// @author 2021 ShardLabs\\n/// @notice Node operator registry interface\\ninterface INodeOperatorRegistry {\\n    /// @notice Allows to add a new node operator to the system.\\n    /// @param _name the node operator name.\\n    /// @param _rewardAddress public address used for ACL and receive rewards.\\n    /// @param _signerPubkey public key used on heimdall len 64 bytes.\\n    function addOperator(\\n        string memory _name,\\n        address _rewardAddress,\\n        bytes memory _signerPubkey\\n    ) external;\\n\\n    /// @notice Allows to stop a node operator.\\n    /// @param _operatorId node operator id.\\n    function stopOperator(uint256 _operatorId) external;\\n\\n    /// @notice Allows to remove a node operator from the system.\\n    /// @param _operatorId node operator id.\\n    function removeOperator(uint256 _operatorId) external;\\n\\n    /// @notice Allows a staked validator to join the system.\\n    function joinOperator() external;\\n\\n    /// @notice Allows to stake an operator on the Polygon stakeManager.\\n    /// This function calls Polygon transferFrom so the totalAmount(_amount + _heimdallFee)\\n    /// has to be approved first.\\n    /// @param _amount amount to stake.\\n    /// @param _heimdallFee heimdallFee to stake.\\n    function stake(uint256 _amount, uint256 _heimdallFee) external;\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param _amount amount to stake.\\n    /// @param _restakeRewards restake rewards.\\n    function restake(uint256 _amount, bool _restakeRewards) external;\\n\\n    /// @notice Allows the operator's owner to migrate the NFT. This can be done only\\n    /// if the DAO stopped the operator.\\n    function migrate() external;\\n\\n    /// @notice Allows to unstake an operator from the stakeManager. After the withdraw_delay\\n    /// the operator owner can call claimStake func to withdraw the staked tokens.\\n    function unstake() external;\\n\\n    /// @notice Allows to topup heimdall fees on polygon stakeManager.\\n    /// @param _heimdallFee amount to topup.\\n    function topUpForFee(uint256 _heimdallFee) external;\\n\\n    /// @notice Allows to claim staked tokens on the stake Manager after the end of the\\n    /// withdraw delay\\n    function unstakeClaim() external;\\n\\n    /// @notice Allows an owner to withdraw rewards from the stakeManager.\\n    function withdrawRewards() external;\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _signerPubkey update signer public key\\n    function updateSigner(bytes memory _signerPubkey) external;\\n\\n    /// @notice Allows to claim the heimdall fees staked by the owner of the operator\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator and switch from UNSTAKE status to STAKED\\n    function unjail() external;\\n\\n    /// @notice Allows an operator's owner to set the operator name.\\n    function setOperatorName(string memory _name) external;\\n\\n    /// @notice Allows an operator's owner to set the operator rewardAddress.\\n    function setOperatorRewardAddress(address _rewardAddress) external;\\n\\n    /// @notice Allows the DAO to set _defaultMaxDelegateLimit.\\n    function setDefaultMaxDelegateLimit(uint256 _defaultMaxDelegateLimit)\\n        external;\\n\\n    /// @notice Allows the DAO to set _maxDelegateLimit for an operator.\\n    function setMaxDelegateLimit(uint256 _operatorId, uint256 _maxDelegateLimit)\\n        external;\\n\\n    /// @notice Allows the DAO to set _commissionRate.\\n    function setCommissionRate(uint256 _commissionRate) external;\\n\\n    /// @notice Allows the DAO to set _commissionRate for an operator.\\n    /// @param _operatorId id of the operator\\n    /// @param _newCommissionRate new commission rate\\n    function updateOperatorCommissionRate(\\n        uint256 _operatorId,\\n        uint256 _newCommissionRate\\n    ) external;\\n\\n    /// @notice Allows the DAO to set _minAmountStake and _minHeimdallFees.\\n    function setStakeAmountAndFees(\\n        uint256 _minAmountStake,\\n        uint256 _minHeimdallFees\\n    ) external;\\n\\n    /// @notice Allows to pause/unpause the node operator contract.\\n    function togglePause() external;\\n\\n    /// @notice Allows the DAO to enable/disable restake.\\n    function setRestake(bool _restake) external;\\n\\n    /// @notice Allows the DAO to set stMATIC contract.\\n    function setStMATIC(address _stMATIC) external;\\n\\n    /// @notice Allows the DAO to set validator factory contract.\\n    function setValidatorFactory(address _validatorFactory) external;\\n\\n    /// @notice Allows the DAO to set stake manager contract.\\n    function setStakeManager(address _stakeManager) external;\\n\\n    /// @notice Allows to set contract version.\\n    function setVersion(string memory _version) external;\\n\\n    /// @notice Get the stMATIC contract addresses\\n    function getContracts()\\n        external\\n        view\\n        returns (\\n            address _validatorFactory,\\n            address _stakeManager,\\n            address _polygonERC20,\\n            address _stMATIC\\n        );\\n\\n    /// @notice Allows to get stats.\\n    function getState()\\n        external\\n        view\\n        returns (\\n            uint256 _totalNodeOperator,\\n            uint256 _totalInactiveNodeOperator,\\n            uint256 _totalActiveNodeOperator,\\n            uint256 _totalStoppedNodeOperator,\\n            uint256 _totalUnstakedNodeOperator,\\n            uint256 _totalClaimedNodeOperator,\\n            uint256 _totalExitNodeOperator,\\n            uint256 _totalSlashedNodeOperator,\\n            uint256 _totalEjectedNodeOperator\\n        );\\n\\n    /// @notice Allows to get a list of operatorInfo.\\n    function getOperatorInfos(bool _delegation, bool _allActive)\\n        external\\n        view\\n        returns (Operator.OperatorInfo[] memory);\\n\\n\\n    /// @notice Allows to get all the operator ids.\\n    function getOperatorIds() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorFactory.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../Validator.sol\\\";\\n\\n/// @title IValidatorFactory.\\n/// @author 2021 ShardLabs\\ninterface IValidatorFactory {\\n    /// @notice Deploy a new validator proxy contract.\\n    /// @return return the address of the deployed contract.\\n    function create() external returns (address);\\n\\n    /// @notice Remove a validator proxy from the validators.\\n    function remove(address _validatorProxy) external;\\n\\n    /// @notice Set the node operator contract address.\\n    function setOperator(address _operator) external;\\n\\n    /// @notice Set validator implementation contract address.\\n    function setValidatorImplementation(address _validatorImplementation)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"../Validator.sol\\\";\\n\\n/// @title IValidator.\\n/// @author 2021 ShardLabs\\n/// @notice Validator interface.\\ninterface IValidator {\\n    /// @notice Allows to stake a validator on the Polygon stakeManager contract.\\n    /// @dev Stake a validator on the Polygon stakeManager contract.\\n    /// @param _sender msg.sender.\\n    /// @param _amount amount to stake.\\n    /// @param _heimdallFee herimdall fees.\\n    /// @param _acceptDelegation accept delegation.\\n    /// @param _signerPubkey signer public key used on the heimdall.\\n    /// @param _commisionRate commision rate of a validator\\n    function stake(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _heimdallFee,\\n        bool _acceptDelegation,\\n        bytes memory _signerPubkey,\\n        uint256 _commisionRate,\\n        address stakeManager,\\n        address polygonERC20\\n    ) external returns (uint256, address);\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param sender operator owner which approved tokens to the validato contract.\\n    /// @param validatorId validator id.\\n    /// @param amount amount to stake.\\n    /// @param stakeRewards restake rewards.\\n    /// @param stakeManager stake manager address\\n    /// @param polygonERC20 address of the MATIC token\\n    function restake(\\n        address sender,\\n        uint256 validatorId,\\n        uint256 amount,\\n        bool stakeRewards,\\n        address stakeManager,\\n        address polygonERC20\\n    ) external;\\n\\n    /// @notice Unstake a validator from the Polygon stakeManager contract.\\n    /// @dev Unstake a validator from the Polygon stakeManager contract by passing the validatorId\\n    /// @param _validatorId validatorId.\\n    /// @param _stakeManager address of the stake manager\\n    function unstake(uint256 _validatorId, address _stakeManager) external;\\n\\n    /// @notice Allows to top up heimdall fees.\\n    /// @param _heimdallFee amount\\n    /// @param _sender msg.sender\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function topUpForFee(\\n        address _sender,\\n        uint256 _heimdallFee,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external;\\n\\n    /// @notice Allows to withdraw rewards from the validator.\\n    /// @dev Allows to withdraw rewards from the validator using the _validatorId. Only the\\n    /// owner can request withdraw in this the owner is this contract.\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress user address used to transfer the staked tokens.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    /// @return Returns the amount transfered to the user.\\n    function withdrawRewards(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external returns (uint256);\\n\\n    /// @notice Allows to claim staked tokens on the stake Manager after the end of the\\n    /// withdraw delay\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress user address used to transfer the staked tokens.\\n    /// @return Returns the amount transfered to the user.\\n    function unstakeClaim(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external returns (uint256);\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _validatorId validator id\\n    /// @param _signerPubkey update signer public key\\n    /// @param _stakeManager stake manager address\\n    function updateSigner(\\n        uint256 _validatorId,\\n        bytes memory _signerPubkey,\\n        address _stakeManager\\n    ) external;\\n\\n    /// @notice Allows to claim the heimdall fees.\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    /// @param _ownerRecipient owner recipient\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof,\\n        address _ownerRecipient,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external;\\n\\n    /// @notice Allows to update the commision rate of a validator\\n    /// @param _validatorId operator id\\n    /// @param _newCommissionRate commission rate\\n    /// @param _stakeManager stake manager address\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId operator id\\n    function unjail(uint256 _validatorId, address _stakeManager) external;\\n\\n    /// @notice Allows to migrate the ownership to an other user.\\n    /// @param _validatorId operator id.\\n    /// @param _stakeManagerNFT stake manager nft contract.\\n    /// @param _rewardAddress reward address.\\n    function migrate(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress\\n    ) external;\\n\\n    /// @notice Allows a validator that was already staked on the polygon stake manager\\n    /// to join the PoLido protocol.\\n    /// @param _validatorId validator id\\n    /// @param _stakeManagerNFT address of the staking NFT\\n    /// @param _rewardAddress address that will receive the rewards from staking\\n    /// @param _newCommissionRate commission rate\\n    /// @param _stakeManager address of the stake manager\\n    function join(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStMATIC.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IValidatorShare.sol\\\";\\nimport \\\"./INodeOperatorRegistry.sol\\\";\\nimport \\\"./INodeOperatorRegistry.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IPoLidoNFT.sol\\\";\\nimport \\\"./IFxStateRootTunnel.sol\\\";\\n\\n/// @title StMATIC interface.\\n/// @author 2021 ShardLabs\\ninterface IStMATIC is IERC20Upgradeable {\\n    struct RequestWithdraw {\\n        uint256 amount2WithdrawFromStMATIC;\\n        uint256 validatorNonce;\\n        uint256 requestEpoch;\\n        address validatorAddress;\\n    }\\n\\n    struct FeeDistribution {\\n        uint8 dao;\\n        uint8 operators;\\n        uint8 insurance;\\n    }\\n\\n    function withdrawTotalDelegated(address _validatorShare) external;\\n\\n    function nodeOperatorRegistry() external returns (INodeOperatorRegistry);\\n\\n    function entityFees()\\n        external\\n        returns (\\n            uint8,\\n            uint8,\\n            uint8\\n        );\\n\\n    function getMaticFromTokenId(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakeManager() external view returns (IStakeManager);\\n\\n    function poLidoNFT() external view returns (IPoLidoNFT);\\n\\n    function fxStateRootTunnel() external view returns (IFxStateRootTunnel);\\n\\n    function version() external view returns (string memory);\\n\\n    function dao() external view returns (address);\\n\\n    function insurance() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function lastWithdrawnValidatorId() external view returns (uint256);\\n\\n    function totalBuffered() external view returns (uint256);\\n\\n    function delegationLowerBound() external view returns (uint256);\\n\\n    function rewardDistributionLowerBound() external view returns (uint256);\\n\\n    function reservedFunds() external view returns (uint256);\\n\\n    function submitThreshold() external view returns (uint256);\\n\\n    function submitHandler() external view returns (bool);\\n\\n    function getMinValidatorBalance() external view returns (uint256);\\n\\n    function token2WithdrawRequest(uint256 _requestId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function DAO() external view returns (bytes32);\\n\\n    function initialize(\\n        address _nodeOperatorRegistry,\\n        address _token,\\n        address _dao,\\n        address _insurance,\\n        address _stakeManager,\\n        address _poLidoNFT,\\n        address _fxStateRootTunnel,\\n        uint256 _submitThreshold\\n    ) external;\\n\\n    function submit(uint256 _amount) external returns (uint256);\\n\\n    function requestWithdraw(uint256 _amount) external;\\n\\n    function delegate() external;\\n\\n    function claimTokens(uint256 _tokenId) external;\\n\\n    function distributeRewards() external;\\n\\n    function claimTokens2StMatic(uint256 _tokenId) external;\\n\\n    function togglePause() external;\\n\\n    function getTotalStake(IValidatorShare _validatorShare)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLiquidRewards(IValidatorShare _validatorShare)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalStakeAcrossAllValidators() external view returns (uint256);\\n\\n    function getTotalPooledMatic() external view returns (uint256);\\n\\n    function convertStMaticToMatic(uint256 _balance)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function convertMaticToStMatic(uint256 _balance)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setFees(\\n        uint8 _daoFee,\\n        uint8 _operatorsFee,\\n        uint8 _insuranceFee\\n    ) external;\\n\\n    function setDaoAddress(address _address) external;\\n\\n    function setInsuranceAddress(address _address) external;\\n\\n    function setNodeOperatorRegistryAddress(address _address) external;\\n\\n    function setDelegationLowerBound(uint256 _delegationLowerBound) external;\\n\\n    function setRewardDistributionLowerBound(\\n        uint256 _rewardDistributionLowerBound\\n    ) external;\\n\\n    function setPoLidoNFT(address _poLidoNFT) external;\\n\\n    function setFxStateRootTunnel(address _fxStateRootTunnel) external;\\n\\n    function setSubmitThreshold(uint256 _submitThreshold) external;\\n\\n    function flipSubmitHandler() external;\\n\\n    function setVersion(string calldata _version) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Operator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nlibrary Operator {\\n    struct OperatorInfo {\\n        uint256 operatorId;\\n        address validatorShare;\\n        uint256 maxDelegateLimit;\\n        address rewardAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Validator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IValidator.sol\\\";\\nimport \\\"./interfaces/INodeOperatorRegistry.sol\\\";\\n\\n/// @title ValidatorImplementation\\n/// @author 2021 ShardLabs.\\n/// @notice The validator contract is a simple implementation of the stakeManager API, the\\n/// ValidatorProxies use this contract to interact with the stakeManager.\\n/// When a ValidatorProxy calls this implementation the state is copied\\n/// (owner, implementation, operatorRegistry), then they are used to check if the msg-sender is the\\n/// node operator contract, and if the validatorProxy implementation match with the current\\n/// validator contract.\\ncontract Validator is IERC721Receiver, IValidator {\\n    using SafeERC20 for IERC20;\\n\\n    address private implementation;\\n    address private operatorRegistry;\\n    address private validatorFactory;\\n\\n    /// @notice Check if the operator contract is the msg.sender.\\n    modifier isOperatorRegistry() {\\n        require(\\n            msg.sender == operatorRegistry,\\n            \\\"Caller should be the operator contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Allows to stake on the Polygon stakeManager contract by\\n    /// calling stakeFor function and set the user as the equal to this validator proxy\\n    /// address.\\n    /// @param _sender the address of the operator-owner that approved Matics.\\n    /// @param _amount the amount to stake with.\\n    /// @param _heimdallFee the heimdall fees.\\n    /// @param _acceptDelegation accept delegation.\\n    /// @param _signerPubkey signer public key used on the heimdall node.\\n    /// @param _commissionRate validator commision rate\\n    /// @return Returns the validatorId and the validatorShare contract address.\\n    function stake(\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _heimdallFee,\\n        bool _acceptDelegation,\\n        bytes memory _signerPubkey,\\n        uint256 _commissionRate,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry returns (uint256, address) {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n\\n        uint256 totalAmount = _amount + _heimdallFee;\\n        polygonERC20.safeTransferFrom(_sender, address(this), totalAmount);\\n        polygonERC20.safeApprove(address(stakeManager), totalAmount);\\n        stakeManager.stakeFor(\\n            address(this),\\n            _amount,\\n            _heimdallFee,\\n            _acceptDelegation,\\n            _signerPubkey\\n        );\\n\\n        uint256 validatorId = stakeManager.getValidatorId(address(this));\\n        address validatorShare = stakeManager.getValidatorContract(validatorId);\\n        if (_commissionRate > 0) {\\n            stakeManager.updateCommissionRate(validatorId, _commissionRate);\\n        }\\n\\n        return (validatorId, validatorShare);\\n    }\\n\\n    /// @notice Restake validator rewards or new Matics validator on stake manager.\\n    /// @param _sender operator's owner that approved tokens to the validator contract.\\n    /// @param _validatorId validator id.\\n    /// @param _amount amount to stake.\\n    /// @param _stakeRewards restake rewards.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function restake(\\n        address _sender,\\n        uint256 _validatorId,\\n        uint256 _amount,\\n        bool _stakeRewards,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry {\\n        if (_amount > 0) {\\n            IERC20 polygonERC20 = IERC20(_polygonERC20);\\n            polygonERC20.safeTransferFrom(_sender, address(this), _amount);\\n            polygonERC20.safeApprove(address(_stakeManager), _amount);\\n        }\\n        IStakeManager(_stakeManager).restake(_validatorId, _amount, _stakeRewards);\\n    }\\n\\n    /// @notice Unstake a validator from the Polygon stakeManager contract.\\n    /// @param _validatorId validatorId.\\n    /// @param _stakeManager address of the stake manager\\n    function unstake(uint256 _validatorId, address _stakeManager)\\n        external\\n        override\\n        isOperatorRegistry\\n    {\\n        // stakeManager\\n        IStakeManager(_stakeManager).unstake(_validatorId);\\n    }\\n\\n    /// @notice Allows a validator to top-up the heimdall fees.\\n    /// @param _sender address that approved the _heimdallFee amount.\\n    /// @param _heimdallFee amount.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function topUpForFee(\\n        address _sender,\\n        uint256 _heimdallFee,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n\\n        polygonERC20.safeTransferFrom(_sender, address(this), _heimdallFee);\\n        polygonERC20.safeApprove(address(stakeManager), _heimdallFee);\\n        stakeManager.topUpForFee(address(this), _heimdallFee);\\n    }\\n\\n    /// @notice Allows to withdraw rewards from the validator using the _validatorId. Only the\\n    /// owner can request withdraw. The rewards are transfered to the _rewardAddress.\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress reward address.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function withdrawRewards(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry returns (uint256) {\\n        IStakeManager(_stakeManager).withdrawRewards(_validatorId);\\n\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n        uint256 balance = polygonERC20.balanceOf(address(this));\\n        polygonERC20.safeTransfer(_rewardAddress, balance);\\n\\n        return balance;\\n    }\\n\\n    /// @notice Allows to unstake the staked tokens (+rewards) and transfer them\\n    /// to the owner rewardAddress.\\n    /// @param _validatorId validator id.\\n    /// @param _rewardAddress rewardAddress address.\\n    /// @param _stakeManager stake manager address\\n    /// @param _polygonERC20 address of the MATIC token\\n    function unstakeClaim(\\n        uint256 _validatorId,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry returns (uint256) {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        stakeManager.unstakeClaim(_validatorId);\\n        // polygonERC20\\n        // stakeManager\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n        uint256 balance = polygonERC20.balanceOf(address(this));\\n        polygonERC20.safeTransfer(_rewardAddress, balance);\\n\\n        return balance;\\n    }\\n\\n    /// @notice Allows to update signer publickey.\\n    /// @param _validatorId validator id.\\n    /// @param _signerPubkey new publickey.\\n    /// @param _stakeManager stake manager address\\n    function updateSigner(\\n        uint256 _validatorId,\\n        bytes memory _signerPubkey,\\n        address _stakeManager\\n    ) external override isOperatorRegistry {\\n        IStakeManager(_stakeManager).updateSigner(_validatorId, _signerPubkey);\\n    }\\n\\n    /// @notice Allows withdraw heimdall fees.\\n    /// @param _accumFeeAmount accumulated heimdall fees.\\n    /// @param _index index.\\n    /// @param _proof proof.\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof,\\n        address _rewardAddress,\\n        address _stakeManager,\\n        address _polygonERC20\\n    ) external override isOperatorRegistry {\\n        IStakeManager stakeManager = IStakeManager(_stakeManager);\\n        stakeManager.claimFee(_accumFeeAmount, _index, _proof);\\n\\n        IERC20 polygonERC20 = IERC20(_polygonERC20);\\n        uint256 balance = polygonERC20.balanceOf(address(this));\\n        polygonERC20.safeTransfer(_rewardAddress, balance);\\n    }\\n\\n    /// @notice Allows to update commission rate of a validator.\\n    /// @param _validatorId validator id.\\n    /// @param _newCommissionRate new commission rate.\\n    /// @param _stakeManager stake manager address\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) public override isOperatorRegistry {\\n        IStakeManager(_stakeManager).updateCommissionRate(\\n            _validatorId,\\n            _newCommissionRate\\n        );\\n    }\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId validator id\\n    function unjail(uint256 _validatorId, address _stakeManager)\\n        external\\n        override\\n        isOperatorRegistry\\n    {\\n        IStakeManager(_stakeManager).unjail(_validatorId);\\n    }\\n\\n    /// @notice Allows to transfer the validator nft token to the reward address a validator.\\n    /// @param _validatorId operator id.\\n    /// @param _stakeManagerNFT stake manager nft contract.\\n    /// @param _rewardAddress reward address.\\n    function migrate(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress\\n    ) external override isOperatorRegistry {\\n        IERC721 erc721 = IERC721(_stakeManagerNFT);\\n        erc721.approve(_rewardAddress, _validatorId);\\n        erc721.safeTransferFrom(address(this), _rewardAddress, _validatorId);\\n    }\\n\\n    /// @notice Allows a validator that was already staked on the polygon stake manager\\n    /// to join the PoLido protocol.\\n    /// @param _validatorId validator id\\n    /// @param _stakeManagerNFT address of the staking NFT\\n    /// @param _rewardAddress address that will receive the rewards from staking\\n    /// @param _newCommissionRate commission rate\\n    /// @param _stakeManager address of the stake manager\\n    function join(\\n        uint256 _validatorId,\\n        address _stakeManagerNFT,\\n        address _rewardAddress,\\n        uint256 _newCommissionRate,\\n        address _stakeManager\\n    ) external override isOperatorRegistry {\\n        IERC721 erc721 = IERC721(_stakeManagerNFT);\\n        erc721.safeTransferFrom(_rewardAddress, address(this), _validatorId);\\n        updateCommissionRate(_validatorId, _newCommissionRate, _stakeManager);\\n    }\\n\\n    /// @notice Allows to get the version of the validator implementation.\\n    /// @return Returns the version.\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    /// @notice Implement @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol interface.\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title polygon stake manager interface.\\n/// @author 2021 ShardLabs\\n/// @notice User to interact with the polygon stake manager.\\ninterface IStakeManager {\\n    /// @notice Stake a validator on polygon stake manager.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @param amount amount to stake.\\n    /// @param heimdallFee heimdall fees.\\n    /// @param acceptDelegation accept delegation.\\n    /// @param signerPubkey signer publickey used in heimdall node.\\n    function stakeFor(\\n        address user,\\n        uint256 amount,\\n        uint256 heimdallFee,\\n        bool acceptDelegation,\\n        bytes memory signerPubkey\\n    ) external;\\n\\n    /// @notice Restake Matics for a validator on polygon stake manager.\\n    /// @param validatorId validator id.\\n    /// @param amount amount to stake.\\n    /// @param stakeRewards restake rewards.\\n    function restake(\\n        uint256 validatorId,\\n        uint256 amount,\\n        bool stakeRewards\\n    ) external;\\n\\n    /// @notice Request unstake a validator.\\n    /// @param validatorId validator id.\\n    function unstake(uint256 validatorId) external;\\n\\n    /// @notice Increase the heimdall fees.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @param heimdallFee heimdall fees.\\n    function topUpForFee(address user, uint256 heimdallFee) external;\\n\\n    /// @notice Get the validator id using the user address.\\n    /// @param user user that own the validator in our case the validator contract.\\n    /// @return return the validator id\\n    function getValidatorId(address user) external view returns (uint256);\\n\\n    /// @notice get the validator contract used for delegation.\\n    /// @param validatorId validator id.\\n    /// @return return the address of the validator contract.\\n    function getValidatorContract(uint256 validatorId)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Withdraw accumulated rewards\\n    /// @param validatorId validator id.\\n    function withdrawRewards(uint256 validatorId) external;\\n\\n    /// @notice Get validator total staked.\\n    /// @param validatorId validator id.\\n    function validatorStake(uint256 validatorId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Allows to unstake the staked tokens on the stakeManager.\\n    /// @param validatorId validator id.\\n    function unstakeClaim(uint256 validatorId) external;\\n\\n    /// @notice Allows to update the signer pubkey\\n    /// @param _validatorId validator id\\n    /// @param _signerPubkey update signer public key\\n    function updateSigner(uint256 _validatorId, bytes memory _signerPubkey)\\n        external;\\n\\n    /// @notice Allows to claim the heimdall fees.\\n    /// @param _accumFeeAmount accumulated fees amount\\n    /// @param _index index\\n    /// @param _proof proof\\n    function claimFee(\\n        uint256 _accumFeeAmount,\\n        uint256 _index,\\n        bytes memory _proof\\n    ) external;\\n\\n    /// @notice Allows to update the commision rate of a validator\\n    /// @param _validatorId operator id\\n    /// @param _newCommissionRate commission rate\\n    function updateCommissionRate(\\n        uint256 _validatorId,\\n        uint256 _newCommissionRate\\n    ) external;\\n\\n    /// @notice Allows to unjail a validator.\\n    /// @param _validatorId id of the validator that is to be unjailed\\n    function unjail(uint256 _validatorId) external;\\n\\n    /// @notice Returns a withdrawal delay.\\n    function withdrawalDelay() external view returns (uint256);\\n\\n    /// @notice Transfers amount from delegator\\n    function delegationDeposit(\\n        uint256 validatorId,\\n        uint256 amount,\\n        address delegator\\n    ) external returns (bool);\\n\\n    function epoch() external view returns (uint256);\\n\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Locked,\\n        Unstaked\\n    }\\n\\n    struct Validator {\\n        uint256 amount;\\n        uint256 reward;\\n        uint256 activationEpoch;\\n        uint256 deactivationEpoch;\\n        uint256 jailTime;\\n        address signer;\\n        address contractAddress;\\n        Status status;\\n        uint256 commissionRate;\\n        uint256 lastCommissionUpdate;\\n        uint256 delegatorsReward;\\n        uint256 delegatedAmount;\\n        uint256 initialRewardPerStake;\\n    }\\n\\n    function validators(uint256 _index)\\n        external\\n        view\\n        returns (Validator memory);\\n\\n    /// @notice Returns the address of the nft contract\\n    function NFTContract() external view returns (address);\\n\\n    /// @notice Returns the validator accumulated rewards on stake manager.\\n    function validatorReward(uint256 validatorId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorShare.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IValidatorShare {\\n    struct DelegatorUnbond {\\n        uint256 shares;\\n        uint256 withdrawEpoch;\\n    }\\n\\n    function unbondNonces(address _address) external view returns (uint256);\\n\\n    function activeAmount() external view returns (uint256);\\n\\n    function validatorId() external view returns (uint256);\\n\\n    function withdrawExchangeRate() external view returns (uint256);\\n\\n    function withdrawRewards() external;\\n\\n    function unstakeClaimTokens() external;\\n\\n    function minAmount() external view returns (uint256);\\n\\n    function getLiquidRewards(address user) external view returns (uint256);\\n\\n    function delegation() external view returns (bool);\\n\\n    function updateDelegation(bool _delegation) external;\\n\\n    function buyVoucher(uint256 _amount, uint256 _minSharesToMint)\\n        external\\n        returns (uint256);\\n\\n    function sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn)\\n        external;\\n\\n    function unstakeClaimTokens_new(uint256 unbondNonce) external;\\n\\n    function unbonds_new(address _address, uint256 _unbondNonce)\\n        external\\n        view\\n        returns (DelegatorUnbond memory);\\n\\n    function getTotalStake(address user)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function restake() external returns (uint256, uint256);\\n\\n    function unlock() external;\\n\\n    function lock() external;\\n\\n    function drain(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    ) external;\\n\\n    function slash(uint256 _amount) external;\\n\\n    function migrateOut(address user, uint256 amount) external;\\n\\n    function migrateIn(address user, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoLidoNFT.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/// @title PoLidoNFT interface.\\n/// @author 2021 ShardLabs\\ninterface IPoLidoNFT is IERC721Upgradeable {\\n    function mint(address _to) external returns (uint256);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function isApprovedOrOwner(address _spender, uint256 _tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setStMATIC(address _stMATIC) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFxStateRootTunnel.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2021 ShardLabs\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IFxStateRootTunnel {\\n    function latestData() external view returns (bytes memory);\\n\\n    function setFxChildTunnel(address _fxChildTunnel) external;\\n\\n    function sendMessageToChild(bytes memory message) external;\\n\\n    function setStMATIC(address _stMATIC) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"AddOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"ClaimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"JoinOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"MigrateOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"NewRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"RemoveOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"restakeRewards\",\"type\":\"bool\"}],\"name\":\"RestakeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heimdallFees\",\"type\":\"uint256\"}],\"name\":\"StakeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"StopOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TopUpHeimdallFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"Unjail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"UnstakeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCommissionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCommissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"}],\"name\":\"UpdateSignerPubkey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubkey\",\"type\":\"bytes\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowsRestake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accumFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxDelegateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_validatorFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stMATIC\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getNodeOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"enum NodeOperatorRegistry.NodeOperatorStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"validatorShare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelegateLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct NodeOperatorRegistry.NodeOperator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"getNodeOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"enum NodeOperatorRegistry.NodeOperatorStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signerPubkey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"validatorShare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelegateLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct NodeOperatorRegistry.NodeOperator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_delegation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allWithStake\",\"type\":\"bool\"}],\"name\":\"getOperatorInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"operatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorShare\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxDelegateLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"internalType\":\"struct Operator.OperatorInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInactiveNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalActiveNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStoppedNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUnstakedNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimedNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalExitNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalJailedNodeOperator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalEjectedNodeOperator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IStakeManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCommissionUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorsReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialRewardPerStake\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.Validator\",\"name\":\"va\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jailTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IStakeManager.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCommissionUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatorsReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialRewardPerStake\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.Validator\",\"name\":\"va\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"getValidatorShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stMATIC\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHeimdallFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_restakeRewards\",\"type\":\"bool\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMaxDelegateLimit\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxDelegateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDelegateLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxDelegateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setOperatorName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"setOperatorRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_restake\",\"type\":\"bool\"}],\"name\":\"setRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stMATIC\",\"type\":\"address\"}],\"name\":\"setStMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHeimdallFees\",\"type\":\"uint256\"}],\"name\":\"setStakeAmountAndFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeManager\",\"type\":\"address\"}],\"name\":\"setStakeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorFactory\",\"type\":\"address\"}],\"name\":\"setValidatorFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_heimdallFee\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"stopOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heimdallFee\",\"type\":\"uint256\"}],\"name\":\"topUpForFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unjail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCommissionRate\",\"type\":\"uint256\"}],\"name\":\"updateOperatorCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signerPubkey\",\"type\":\"bytes\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NodeOperatorRegistry", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}