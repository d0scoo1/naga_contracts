{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\nBirds of Prey\r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n        \r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract BirdsOfPrey is Context, IERC20, Ownable {\r\n    using Address for address;\r\n\r\n    address payable public operationsAddress;\r\n    address payable public devAddress;\r\n    address payable public futureOwnerAddress;     \r\n        \r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n    bool public limitsInEffect = true;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1 * 1e9 * 1e18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private constant _name = \"Birds of Prey\";\r\n    string private constant _symbol = \"PREY\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    // these values are pretty much arbitrary since they get overwritten for every txn, but the placeholders make it easier to work with current contract.\r\n    uint256 private _taxFee;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    uint256 private _operationsFee;\r\n    \r\n    uint256 private _liquidityFee;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    \r\n    uint256 private constant BUY = 1;\r\n    uint256 private constant SELL = 2;\r\n    uint256 private constant TRANSFER = 3;\r\n    uint256 private buyOrSellSwitch;\r\n\r\n    uint256 public _buyTaxFee = 100;\r\n    uint256 public _buyLiquidityFee = 200;\r\n    uint256 public _buyOperationsFee = 300;\r\n    uint256 public _buyDevFee = 200;\r\n\r\n    uint256 public _sellTaxFee = 100;\r\n    uint256 public _sellLiquidityFee = 200;\r\n    uint256 public _sellOperationsFee = 300;\r\n    uint256 public _sellDevFee = 200;\r\n\r\n    uint256 public _sellTaxFeeExtra = 200;\r\n    uint256 public _sellLiquidityFeeExtra = 300;\r\n    uint256 public _sellOperationsFeeExtra = 1000;\r\n    uint256 public _sellDevFeeExtra = 1000;\r\n\r\n    mapping (address => bool) public extraTaxWallets;\r\n\r\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\r\n    uint256 public blockForPenaltyEnd;\r\n    mapping (address => bool) public boughtEarly;\r\n    uint256 public botsCaught;\r\n    \r\n    uint256 public _liquidityTokensToSwap;\r\n    uint256 public _operationsTokensToSwap;\r\n    uint256 public _devTokensToSwap;\r\n    \r\n    uint256 public maxTransactionAmount;\r\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\r\n    uint256 public maxWallet;\r\n    \r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 private minimumTokensBeforeSwap;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public tradingActive = false;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    \r\n    event SetAutomatedMarketMakerPair(address pair, bool value);\r\n    \r\n    event ExcludeFromReward(address excludedAddress);\r\n    \r\n    event IncludeInReward(address includedAddress);\r\n    \r\n    event ExcludeFromFee(address excludedAddress);\r\n    \r\n    event IncludeInFee(address includedAddress);\r\n    \r\n    event SetBuyFee(uint256 operationsFee, uint256 liquidityFee, uint256 reflectFee, uint256 devFee);\r\n    \r\n    event SetSellFee(uint256 operationsFee, uint256 liquidityFee, uint256 reflectFee, uint256 devFee);\r\n\r\n    event SetSellFeeExtra(uint256 operationsFee, uint256 liquidityFee, uint256 reflectFee, uint256 devFee);\r\n    \r\n    event TransferForeignToken(address token, uint256 amount);\r\n    \r\n    event UpdatedOperationsAddress(address operations);\r\n\r\n    event UpdatedDevAddress(address dev);\r\n    \r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n\r\n    event CaughtEarlyBuyer(address sniper);\r\n\r\n    event EnabledTrading();\r\n\r\n    event RemovedLimits();\r\n    \r\n    event TransferDelayDisabled();\r\n\r\n    event UpdatedPrivateMaxSell(uint256 amount);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() payable {\r\n        _rOwned[address(this)] = _rTotal/100*35;\r\n        _rOwned[msg.sender] = _rTotal/100*65;\r\n\r\n        \r\n        maxTransactionAmount = _tTotal * 2 / 1000;\r\n        maxWallet = _tTotal / 100;\r\n        minimumTokensBeforeSwap = _tTotal * 50 / 100000;\r\n        \r\n        operationsAddress = payable(0x7f69cb5724e4F8Fe5e43347315F11c06C60e928f);\r\n        devAddress = payable(0xaB7ABe1D921dEB1A2d0D5182Faa3E6bc5175604F);\r\n        futureOwnerAddress = payable(0xd629817c3E53DAae1d2BDa952d2d5aaFE3cc752d);\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(0xdead)] = true;\r\n        _isExcludedFromFee[operationsAddress] = true;\r\n        _isExcludedFromFee[futureOwnerAddress] = true;\r\n        \r\n        excludeFromMaxTransaction(owner(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        excludeFromMaxTransaction(operationsAddress, true);\r\n        excludeFromMaxTransaction(futureOwnerAddress, true);\r\n        \r\n        excludeFromReward(msg.sender);\r\n        excludeFromReward(futureOwnerAddress);\r\n        \r\n        emit Transfer(address(0), address(this), _tTotal/100*35);\r\n        emit Transfer(address(0), address(msg.sender), _tTotal/100*65);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    // remove limits when ready\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        transferDelayEnabled = false;\r\n        maxTransactionAmount = _tTotal;\r\n        maxWallet = _tTotal;\r\n        emit RemovedLimits();\r\n    }\r\n    \r\n    // disable Transfer delay\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n        emit TransferDelayDisabled();\r\n    }\r\n    \r\n    function removeBoughtEarly(address[] calldata wallets) external onlyOwner {\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            boughtEarly[wallets[i]] = false;\r\n        }\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n            \r\n    function minimumTokensBeforeSwapAmount() external view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n     // change the minimum amount of tokens to sell from fees\r\n    function updateMinimumTokensBeforeSwap(uint256 newAmount) external onlyOwner{\r\n  \t    require(newAmount >= _tTotal * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n  \t    require(newAmount <= _tTotal * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\r\n  \t    minimumTokensBeforeSwap = newAmount;\r\n  \t}\r\n\r\n    function updateMaxAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (_tTotal * 1 / 1000)/1e18, \"Cannot set maxTransactionAmount lower than 0.1%\");\r\n        maxTransactionAmount = newNum * (1e18);\r\n    }\r\n\r\n    function updateMaxWallet(uint256 newNum) external onlyOwner {\r\n        require(newNum >= (_tTotal * 1 / 100)/1e18, \"Cannot set maxTransactionAmount lower than 1%\");\r\n        maxWallet = newNum * (1e18);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != lpPair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        _isExcludedMaxTransactionAmount[pair] = value;\r\n        if(value){excludeFromReward(pair);}\r\n        if(!value){includeInReward(pair);}\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / (currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        require(_excluded.length + 1 <= 50, \"Cannot exclude more than 50 accounts.  Include a previously excluded address.\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) public onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if(!tradingActive){\r\n            require(_isExcludedFromFee[from] || _isExcludedFromFee[to], \"Trading is not active yet.\");\r\n        }\r\n\r\n        if(!earlyBuyPenaltyInEffect()){\r\n            require(!boughtEarly[from] || to == owner() || to == address(0xdead), \"Bots cannot transfer tokens in or out except to owner or dead address.\");\r\n        }\r\n\r\n        if(limitsInEffect){\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !inSwapAndLiquify && \r\n                !_isExcludedFromFee[from] &&\r\n                !_isExcludedFromFee[to]\r\n            ){                \r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \r\n                if (transferDelayEnabled){\r\n                    if (to != address(dexRouter) && to != address(lpPair)){\r\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number && _holderLastTransferTimestamp[to] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                        _holderLastTransferTimestamp[to] = block.number;\r\n                    }\r\n                }\r\n                \r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                } \r\n                //when sell\r\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                    require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\r\n                }\r\n                else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n        // swap and liquify\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            swapAndLiquifyEnabled &&\r\n            balanceOf(lpPair) > 0 &&\r\n            !_isExcludedFromFee[to] &&\r\n            !_isExcludedFromFee[from] &&\r\n            automatedMarketMakerPairs[to] &&\r\n            overMinimumTokenBalance\r\n        ) {\r\n            swapBack();\r\n        }\r\n\r\n        removeAllFee();\r\n        \r\n        buyOrSellSwitch = TRANSFER;\r\n        \r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            if((earlyBuyPenaltyInEffect() || (amount >= maxTransactionAmount - .9 ether && blockForPenaltyEnd + 4 >= block.number)) && automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to]){\r\n                \r\n                if(!earlyBuyPenaltyInEffect()){\r\n                    maxTransactionAmount -= 1;\r\n                }\r\n\r\n                if(!boughtEarly[to]){\r\n                    boughtEarly[to] = true;\r\n                    botsCaught += 1;\r\n                    emit CaughtEarlyBuyer(to);\r\n                }\r\n\r\n                _taxFee = _buyTaxFee;\r\n                _liquidityFee = _buyLiquidityFee + _buyOperationsFee + _buyDevFee;\r\n                if(_liquidityFee > 0){\r\n                    buyOrSellSwitch = BUY;\r\n                }\r\n            }\r\n\r\n            // extra sell penalty for certain airdropped wallets\r\n            if(extraTaxWallets[from] && automatedMarketMakerPairs[to]){\r\n                _taxFee = _sellTaxFeeExtra;\r\n                _liquidityFee = _sellLiquidityFeeExtra + _sellOperationsFeeExtra + _sellDevFeeExtra;\r\n                if(_liquidityFee > 0){\r\n                    buyOrSellSwitch = SELL;\r\n                }\r\n            }\r\n\r\n            // Buy\r\n            if (automatedMarketMakerPairs[from]) {\r\n                _taxFee = _buyTaxFee;\r\n                _liquidityFee = _buyLiquidityFee + _buyOperationsFee + _buyDevFee;\r\n                if(_liquidityFee > 0){\r\n                    buyOrSellSwitch = BUY;\r\n                }\r\n            } \r\n            // Sell\r\n            else if (automatedMarketMakerPairs[to]) {\r\n                _taxFee = _sellTaxFee;\r\n                _liquidityFee = _sellLiquidityFee + _sellOperationsFee + _sellDevFee;\r\n                if(_liquidityFee > 0){\r\n                    buyOrSellSwitch = SELL;\r\n                }\r\n            }\r\n        }\r\n        \r\n        _tokenTransfer(from, to, amount);\r\n        \r\n        restoreAllFee();\r\n        \r\n    }\r\n\r\n    function earlyBuyPenaltyInEffect() public view returns (bool){\r\n        return block.number < blockForPenaltyEnd;\r\n    }\r\n\r\n    function swapBack() private lockTheSwap {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = _liquidityTokensToSwap + _operationsTokensToSwap + _devTokensToSwap;\r\n        bool success;\r\n\r\n        // prevent overly large contract sells.\r\n        if(contractBalance >= minimumTokensBeforeSwap * 10){\r\n            contractBalance = minimumTokensBeforeSwap * 10;\r\n        }\r\n\r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n        \r\n        // Halve the amount of liquidity tokens\r\n        uint256 tokensForLiquidity = contractBalance * _liquidityTokensToSwap / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance-(tokensForLiquidity);\r\n        \r\n        swapTokensForETH(amountToSwapForETH);\r\n        \r\n        uint256 ethBalance = address(this).balance;\r\n        \r\n        uint256 ethForOperations = ethBalance* (_operationsTokensToSwap) / (totalTokensToSwap - (_liquidityTokensToSwap/2));\r\n        uint256 ethForDev = ethBalance* (_devTokensToSwap) / (totalTokensToSwap - (_liquidityTokensToSwap/2));\r\n        \r\n        uint256 ethForLiquidity = ethBalance - ethForOperations - ethForDev;\r\n\r\n        _liquidityTokensToSwap = 0;\r\n        _operationsTokensToSwap = 0;    \r\n        _devTokensToSwap = 0;    \r\n        \r\n        if(tokensForLiquidity > 0 && ethForLiquidity > 0){\r\n            addLiquidity(tokensForLiquidity, ethForLiquidity);\r\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\r\n        }\r\n        \r\n        (success,) = address(devAddress).call{value: ethForDev}(\"\");\r\n\r\n        // send remainder to operations\r\n        (success,) = address(operationsAddress).call{value: address(this).balance}(\"\");\r\n    }\r\n    \r\n    // force Swap back if slippage above 49% for launch.\r\n    function forceSwapBack() external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        require(contractBalance >= minimumTokensBeforeSwap, \"Can only swap back if above the threshold.\");\r\n        swapBack();\r\n        emit OwnerForcedSwapBack(block.timestamp);\r\n    }\r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\r\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\r\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal-(rFee);\r\n        _tFeeTotal = _tFeeTotal+(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount-(tFee)-(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLiquidity,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount*(currentRate);\r\n        uint256 rFee = tFee*(currentRate);\r\n        uint256 rLiquidity = tLiquidity*(currentRate);\r\n        uint256 rTransferAmount = rAmount-(rFee)-(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / (tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply-(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply-(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal / (_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        if(buyOrSellSwitch == BUY){\r\n            _liquidityTokensToSwap += tLiquidity * _buyLiquidityFee / _liquidityFee;\r\n            _operationsTokensToSwap += tLiquidity * _buyOperationsFee / _liquidityFee;\r\n            _devTokensToSwap += tLiquidity * _buyDevFee / _liquidityFee;\r\n        } else if(buyOrSellSwitch == SELL){\r\n            _liquidityTokensToSwap += tLiquidity * _sellLiquidityFee / _liquidityFee;\r\n            _operationsTokensToSwap += tLiquidity * _sellOperationsFee / _liquidityFee;\r\n            _devTokensToSwap += tLiquidity * _sellDevFee / _liquidityFee;\r\n        }\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity * (currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _taxFee / 10000;\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount * _liquidityFee / 10000;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n\r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludeFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludeInFee(account);\r\n    }\r\n\r\n    function setBuyFee(uint256 buyTaxFee, uint256 buyLiquidityFee, uint256 buyOperationsFee, uint256 buyDevFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _buyTaxFee = buyTaxFee;\r\n        _buyLiquidityFee = buyLiquidityFee;\r\n        _buyOperationsFee = buyOperationsFee;\r\n        _buyDevFee = buyDevFee;\r\n        require(_buyTaxFee + _buyLiquidityFee + _buyOperationsFee + _buyDevFee <= 1500, \"Must keep buy taxes below 15%\");\r\n        emit SetBuyFee(buyOperationsFee, buyLiquidityFee, buyTaxFee, buyDevFee);\r\n    }\r\n\r\n    function setSellFee(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellOperationsFee, uint256 sellDevFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _sellTaxFee = sellTaxFee;\r\n        _sellLiquidityFee = sellLiquidityFee;\r\n        _sellOperationsFee = sellOperationsFee;\r\n        _sellDevFee = sellDevFee;\r\n        require(_sellTaxFee + _sellLiquidityFee + _sellOperationsFee + _sellDevFee <= 2500, \"Must keep sell taxes below 25%\");\r\n        emit SetSellFee(sellOperationsFee, sellLiquidityFee, sellTaxFee, sellDevFee);\r\n    }\r\n\r\n    function setSellFeeExtra(uint256 sellTaxFee, uint256 sellLiquidityFee, uint256 sellOperationsFee, uint256 sellDevFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _sellTaxFeeExtra = sellTaxFee;\r\n        _sellLiquidityFeeExtra = sellLiquidityFee;\r\n        _sellOperationsFeeExtra = sellOperationsFee;\r\n        _sellDevFeeExtra = sellDevFee;\r\n        require(_sellTaxFeeExtra + _sellLiquidityFeeExtra + _sellOperationsFeeExtra + _sellDevFeeExtra <= 2500, \"Must keep sell taxes below 25%\");\r\n        emit SetSellFeeExtra(sellOperationsFee, sellLiquidityFee, sellTaxFee, sellDevFee);\r\n    }\r\n    \r\n    function setOperationsAddress(address _operationsAddress) external onlyOwner {\r\n        require(_operationsAddress != address(0), \"_operationsAddress address cannot be 0\");\r\n        operationsAddress = payable(_operationsAddress);\r\n        emit UpdatedOperationsAddress(_operationsAddress);\r\n    }\r\n\r\n    function setDevAddress(address _devAddress) external onlyOwner {\r\n        require(_devAddress != address(0), \"_devAddress address cannot be 0\");\r\n        devAddress = payable(_devAddress);\r\n        emit UpdatedDevAddress(_devAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    // To receive ETH from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function transferForeignToken(address _token, address _to)\r\n        external\r\n        onlyOwner\r\n        returns (bool _sent)\r\n    {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this) || !tradingActive, \"Can't withdraw native tokens when trading is active\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n        emit TransferForeignToken(_token, _contractBalance);\r\n    }\r\n    \r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function addExtraTaxWallets(address[] calldata wallets, bool extraTax) external onlyOwner {\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            extraTaxWallets[wallets[i]] = extraTax;\r\n        }\r\n    }\r\n\r\n    function launch(uint256 blocksForPenalty) external onlyOwner {\r\n        require(!tradingActive, \"Trading is already active, cannot relaunch.\");\r\n        require(blocksForPenalty < 10, \"Cannot make penalty blocks more than 10\");\r\n\r\n        removeAllFee();\r\n\r\n        maxTransactionAmount = _tTotal * 1 / 1000;\r\n\r\n        //standard enable trading\r\n        tradingActive = true;\r\n        swapAndLiquifyEnabled = true;\r\n        tradingActiveBlock = block.number;\r\n        blockForPenaltyEnd = tradingActiveBlock + blocksForPenalty;\r\n        emit EnabledTrading();\r\n\r\n        // initialize router\r\n        IDexRouter _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        dexRouter = _dexRouter;\r\n\r\n        // create pair\r\n        lpPair = IDexFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\r\n        excludeFromMaxTransaction(address(lpPair), true);\r\n        _setAutomatedMarketMakerPair(address(lpPair), true);\r\n   \r\n        // add the liquidity\r\n\r\n        require(address(this).balance > 0, \"Must have ETH on contract to launch\");\r\n\r\n        require(balanceOf(address(this)) > 0, \"Must have Tokens on contract to launch\");\r\n\r\n        _approve(address(this), address(dexRouter), balanceOf(address(this)));\r\n        dexRouter.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            futureOwnerAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        _transfer(msg.sender, futureOwnerAddress, balanceOf(msg.sender));\r\n        restoreAllFee();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"CaughtEarlyBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operationsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operationsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operationsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFeeExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferDelayDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"UpdatedDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operations\",\"type\":\"address\"}],\"name\":\"UpdatedOperationsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdatedPrivateMaxSell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operationsTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFeeExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFeeExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellOperationsFeeExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFeeExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"extraTax\",\"type\":\"bool\"}],\"name\":\"addExtraTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraTaxWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureOwnerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksForPenalty\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"removeBoughtEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyOperationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDevFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationsAddress\",\"type\":\"address\"}],\"name\":\"setOperationsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOperationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellOperationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeeExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BirdsOfPrey", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24343023118f4cd8c2a844e432dcf7c74b3f3b488af963d9b818cd6d0be00d2c"}]}