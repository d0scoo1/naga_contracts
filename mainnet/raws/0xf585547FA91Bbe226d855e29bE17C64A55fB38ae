{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./LendingPoolToken.sol\\\";\\nimport \\\"./libraries/PeriodStaking.sol\\\";\\nimport \\\"./libraries/LinearStaking.sol\\\";\\nimport \\\"./libraries/Funding.sol\\\";\\n\\n/// @title LendingPool\\n/// @dev\\ncontract LendingPool is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n    event LendingPoolInitialized(address _address, string id, address lendingPoolToken);\\n\\n    /// @dev unique identifier\\n    string public id;\\n\\n    /// @dev LendingPoolToken of the pool\\n    LendingPoolToken public lendingPoolToken;\\n\\n    /// @dev Storage for funding logic\\n    mapping(uint256 => Funding.FundingStorage) private fundingStorage;\\n\\n    /// @dev Storage for linear staking logic\\n    mapping(uint256 => LinearStaking.LinearStakingStorage) private linearStakingStorage;\\n\\n    /// @dev Storage for period staking logic\\n    mapping(uint256 => PeriodStaking.PeriodStakingStorage) private periodStakingStorage;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {} // solhint-disable-line\\n\\n    /// @dev initialization of the lendingPool (required since upgradable contracts can not be initialized via constructor)\\n    /// @param _lendingPoolId unique identifier\\n    /// @param _lendingPoolTokenSymbol symbol of the LendingPoolToken\\n    function initialize(string memory _lendingPoolId, string memory _lendingPoolTokenSymbol) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        pause();\\n\\n        id = _lendingPoolId;\\n\\n        lendingPoolToken = new LendingPoolToken(_lendingPoolId, _lendingPoolTokenSymbol);\\n\\n        emit LendingPoolInitialized(address(this), _lendingPoolId, address(lendingPoolToken));\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////GENERAL/////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev pauses the lendingPool. Only affects function with pausable related modifiers\\n    function pause() public onlyOwner {\\n        super._pause();\\n    }\\n\\n    /// @dev unpauses the lendingPool. In order to unpause the configuration must be consistent. Only affects function with pausable related modifiers\\n    function unpause() public onlyOwner {\\n        super._unpause();\\n    }\\n\\n    /// @dev returns the current version of this smart contract\\n    /// @return the current version of this smart contract\\n    function getVersion() public pure virtual returns (string memory) {\\n        return \\\"V1\\\";\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////////FUNDING/////////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Set whether a token should be accepted for funding the pool\\n    /// @param fundingToken the funding token\\n    /// @param accepted whether it is accepted\\n    function setFundingToken(IERC20 fundingToken, bool accepted) public onlyOwner {\\n        Funding.setFundingToken(fundingStorage[0], fundingToken, accepted);\\n    }\\n\\n    /// @dev returns the accepted funding tokens\\n    function getFundingTokens() external view returns (IERC20[] memory) {\\n        return fundingStorage[0]._fundingTokens;\\n    }\\n\\n    /// @dev returns true if wallet is whitelisted (primary funder wallet)\\n    function isPrimaryFunder(address wallet) public view returns (bool) {\\n        return fundingStorage[0].primaryFunders[wallet] || fundingStorage[0].disablePrimaryFunderCheck;\\n    }\\n\\n    /// @dev Change primaryFunder status of an address\\n    /// @param primaryFunder the address\\n    /// @param accepted whether its accepted as primaryFunder\\n    function setPrimaryFunder(address primaryFunder, bool accepted) public onlyOwner {\\n        Funding.setPrimaryFunder(fundingStorage[0], primaryFunder, accepted);\\n    }\\n\\n    /// @dev returns true if wallet is borrower wallet\\n    function isBorrower(address wallet) external view returns (bool) {\\n        return fundingStorage[0].borrowers[wallet];\\n    }\\n\\n    /// @dev Change borrower status of an address\\n    /// @param borrower the address\\n    /// @param accepted whether its accepted as primaryFunder\\n    function setBorrower(address borrower, bool accepted) public {\\n        require(_msgSender() == owner() || fundingStorage[0].borrowers[_msgSender()], \\\"caller address is no borrower or owner\\\");\\n        Funding.setBorrower(fundingStorage[0], borrower, accepted);\\n    }\\n\\n    /// @dev returns current and last IDs of funding requests (linked list)\\n    function getFundingRequestIDs() external view returns (uint256, uint256) {\\n        return (fundingStorage[0].currentFundingRequestId, fundingStorage[0].lastFundingRequestId);\\n    }\\n\\n    /// @dev Borrower adds funding request\\n    /// @param amount funding request amount\\n    /// @param durationDays days that funding request is open\\n    /// @param interestRate interest rate for funding request\\n    function addFundingRequest(\\n        uint256 amount,\\n        uint256 durationDays,\\n        uint256 interestRate\\n    ) public whenNotPaused {\\n        Funding.addFundingRequest(fundingStorage[0], amount, durationDays, interestRate);\\n    }\\n\\n    /// @dev Borrower cancels funding request\\n    /// @param fundingRequestId funding request id to cancel\\n    function cancelFundingRequest(uint256 fundingRequestId) public whenNotPaused {\\n        Funding.cancelFundingRequest(fundingStorage[0], fundingRequestId);\\n    }\\n\\n    /// @dev Get information about the funding Request with the funding request ID\\n    /// @param fundingRequestId the funding request ID\\n    /// @return the FundingRequest structure selected with _fundingRequestID\\n    function getFundingRequest(uint256 fundingRequestId) public view whenNotPaused returns (Funding.FundingRequest memory) {\\n        return fundingStorage[0].fundingRequests[fundingRequestId];\\n    }\\n\\n    /// @dev Allows primary funders to fund the pool\\n    /// @param fundingToken token used for the funding\\n    /// @param fundingTokenAmount funding amount (funding token decimals)\\n    function fund(IERC20 fundingToken, uint256 fundingTokenAmount) public whenNotPaused {\\n        Funding.fund(fundingStorage[0], fundingToken, fundingTokenAmount, lendingPoolToken);\\n    }\\n\\n    /// @dev Get an exchange rate for an ERC20<>Currnecy conversion\\n    /// @param token the token\\n    /// @return the exchange rate and the decimals of the exchange rate\\n    function getExchangeRate(IERC20 token) public view returns (uint256, uint8) {\\n        return Funding.getExchangeRate(fundingStorage[0], token);\\n    }\\n\\n    /// @dev Adds a mapping between a token, currency and ChainLink price feed\\n    /// @param token the token\\n    /// @param chainLinkFeed the ChainLink price feed\\n    /// @param invertChainLinkFeedAnswer whether the rate returned by the chainLinkFeed needs to be inverted to match the token-currency pair order\\n    function setFundingTokenChainLinkFeed(\\n        IERC20 token,\\n        AggregatorV3Interface chainLinkFeed,\\n        bool invertChainLinkFeedAnswer\\n    ) external onlyOwner {\\n        Funding.setFundingTokenChainLinkFeed(fundingStorage[0], token, chainLinkFeed, invertChainLinkFeedAnswer);\\n    }\\n\\n    /// @dev Get a ChainLink price feed for a token-currency pair\\n    /// @param token the token\\n    /// @return the ChainLink price feed\\n    function getFundingTokenChainLinkFeeds(IERC20 token) public view returns (AggregatorV3Interface) {\\n        return fundingStorage[0].fundingTokenChainLinkFeeds[token];\\n    }\\n\\n    function setDisablePrimaryFunderCheck(bool disable) public onlyOwner {\\n        fundingStorage[0].disablePrimaryFunderCheck = disable;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////LINEAR STAKING//////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Sets the rewardTokensPerBlock for a stakedToken-rewardToken pair\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @param rewardTokensPerBlock rewardTokens per rewardToken per block (rewardToken decimals)\\n    function setRewardTokensPerBlockLinear(\\n        IERC20 stakedToken,\\n        IERC20 rewardToken,\\n        uint256 rewardTokensPerBlock\\n    ) public onlyOwner {\\n        LinearStaking.setRewardTokensPerBlockLinear(linearStakingStorage[0], stakedToken, rewardToken, rewardTokensPerBlock);\\n    }\\n\\n    /// @dev Get tokens that can be staked in linear staking\\n    function getStakableTokens() external view returns (IERC20[] memory) {\\n        return linearStakingStorage[0].stakableTokens;\\n    }\\n\\n    /// @dev Get available rewards for linear staking\\n    /// @param rewardToken the reward token\\n    function getAvailableLinearStakingRewards(IERC20 rewardToken) external view returns (uint256) {\\n        return linearStakingStorage[0].availableRewards[rewardToken];\\n    }\\n\\n    /// @dev Lock or unlock the rewards for a staked token during linear staking\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @param rewardsLocked true = lock; false = unlock\\n    function setRewardsLockedLinear(\\n        IERC20 stakedToken,\\n        IERC20 rewardToken,\\n        bool rewardsLocked\\n    ) public onlyOwner {\\n        LinearStaking.setRewardsLockedLinear(linearStakingStorage[0], stakedToken, rewardToken, rewardsLocked);\\n    }\\n\\n    /// @dev Staking of a stakable token\\n    /// @param stakableToken the stakeable token\\n    /// @param amount the amount to stake (stakableToken decimals)\\n    function stakeLinear(IERC20 stakableToken, uint256 amount) public whenNotPaused {\\n        LinearStaking.stakeLinear(linearStakingStorage[0], stakableToken, amount);\\n    }\\n\\n    /// @dev Get the staked balance for a specific token and wallet\\n    /// @param wallet the wallet\\n    /// @param stakableToken the staked token\\n    /// @return the staked balance (stakableToken decimals)\\n    function getStakedBalanceLinear(address wallet, IERC20 stakableToken) public view returns (uint256) {\\n        return LinearStaking.getStakedBalanceLinear(linearStakingStorage[0], wallet, stakableToken);\\n    }\\n\\n    /// @dev Unstaking of a staked token\\n    /// @param stakedToken the staked token\\n    /// @param amount the amount to unstake\\n    function unstakeLinear(IERC20 stakedToken, uint256 amount) public whenNotPaused {\\n        LinearStaking.unstakeLinear(linearStakingStorage[0], stakedToken, amount);\\n    }\\n\\n    /// @dev Calculates the outstanding rewards for a wallet, staked token and reward token\\n    /// @param wallet the wallet\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @return the outstading rewards (rewardToken decimals)\\n    function calculateRewardsLinear(\\n        address wallet,\\n        IERC20 stakedToken,\\n        IERC20 rewardToken\\n    ) public view returns (uint256) {\\n        return LinearStaking.calculateRewardsLinear(linearStakingStorage[0], wallet, stakedToken, rewardToken);\\n    }\\n\\n    /// @dev Claims all rewards for a staked tokens\\n    /// @param stakedToken the staked token\\n    function claimRewardsLinear(IERC20 stakedToken) public whenNotPaused {\\n        LinearStaking.claimRewardsLinear(linearStakingStorage[0], stakedToken);\\n    }\\n\\n    /// @dev Check if rewards for a staked token are locked or not\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @return true = locked; false = unlocked\\n    function getRewardsLocked(IERC20 stakedToken, IERC20 rewardToken) public view returns (bool) {\\n        return linearStakingStorage[0].rewardConfigurations[stakedToken].rewardsLocked[rewardToken];\\n    }\\n\\n    /// @dev Allows the deposit of reward funds. This is usually used by the borrower or treasury\\n    /// @param rewardToken the reward token\\n    /// @param amount the amount of tokens (rewardToken decimals)\\n    function depositRewardsLinear(IERC20 rewardToken, uint256 amount) public {\\n        LinearStaking.depositRewardsLinear(linearStakingStorage[0], rewardToken, amount);\\n    }\\n\\n    function getRewardTokens(IERC20 stakedToken) public view returns (IERC20[] memory) {\\n        return linearStakingStorage[0].rewardConfigurations[stakedToken].rewardTokens;\\n        // return LinearStaking.getRewardTokens(linearStakingStorage[0], stakedToken);\\n    }\\n\\n    /// @dev Allows owner to withdraw tokens for maintenance / recovery purposes\\n    /// @param token the token\\n    /// @param amount the amount to be withdrawn\\n    /// @param to the address to withdraw to\\n    function withdrawTokens(\\n        IERC20 token,\\n        uint256 amount,\\n        address to\\n    ) public onlyOwner {\\n        Util.checkedTransfer(token, to, amount);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    /////////////////////////////PERIOD STAKING//////////////////////////////\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    /// @dev Set the duration of the reward period\\n    /// @param duration duration in blocks of the reward period\\n    function setRewardPeriodDuration(uint256 duration) external onlyOwner {\\n        periodStakingStorage[0].duration = duration;\\n    }\\n\\n    function setEndRewardPeriod(uint256 periodEnd) external onlyOwner {\\n        PeriodStaking.setEndRewardPeriod(periodStakingStorage[0], periodEnd);\\n    }\\n\\n    /// @dev Get variables of the period staking\\n    /// @return returns the id, duration and the rward token of the current reward period\\n    function getPeriodStakingInfo()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            IERC20\\n        )\\n    {\\n        return (periodStakingStorage[0].currentRewardPeriodId, periodStakingStorage[0].duration, periodStakingStorage[0].rewardToken);\\n    }\\n\\n    /// @dev Set the reward token of the reward period\\n    /// @param rewardToken the rward token of the reward period\\n    function setRewardPeriodRewardToken(IERC20 rewardToken) external onlyOwner {\\n        periodStakingStorage[0].rewardToken = rewardToken;\\n    }\\n\\n    /// @dev Get the reward period\\n    /// @return returns the struct of the reward period\\n    function getRewardPeriod(uint256 rewardPeriodId) external view returns (PeriodStaking.RewardPeriod memory) {\\n        return periodStakingStorage[0].rewardPeriods[rewardPeriodId];\\n    }\\n\\n    /// @dev Get all reward periods\\n    /// @return returns an array including the structs of all reward periods\\n    function getRewardPeriods() external view returns (PeriodStaking.RewardPeriod[] memory) {\\n        return PeriodStaking.getRewardPeriods(periodStakingStorage[0]);\\n    }\\n\\n    /// @dev Get all open FundingRequests\\n    /// @return all open FundingRequests\\n    function getOpenFundingRequests() external view returns (Funding.FundingRequest[] memory) {\\n        return Funding.getOpenFundingRequests(fundingStorage[0]);\\n    }\\n\\n    /// @dev Start next reward period\\n    function startNextRewardPeriod() external {\\n        PeriodStaking.startNextRewardPeriod(periodStakingStorage[0], 0);\\n    }\\n\\n    /// @dev Start the next reward period\\n    /// @param periodStart start block of the period, 0 == follow previous period, 1 == start at current block, >1 use passed value\\n    function startNextRewardPeriodCustom(uint256 periodStart) external onlyOwner {\\n        PeriodStaking.startNextRewardPeriod(periodStakingStorage[0], periodStart);\\n    }\\n\\n    /// @dev deposit rewards for staking period\\n    /// @param rewardPeriodId staking period id\\n    /// @param totalRewards total rewards to be deposited\\n    function depositRewardPeriodRewards(uint256 rewardPeriodId, uint256 totalRewards) public onlyOwner {\\n        PeriodStaking.depositRewardPeriodRewards(periodStakingStorage[0], rewardPeriodId, totalRewards);\\n    }\\n\\n    /// @dev Get staking score of a wallet for a certain staking period\\n    /// @param wallet wallet address\\n    /// @param period staking period id\\n    function getWalletRewardPeriodStakingScore(address wallet, uint256 period) public view returns (uint256) {\\n        return PeriodStaking.getWalletRewardPeriodStakingScore(periodStakingStorage[0], wallet, period);\\n    }\\n\\n    /// @dev Get the amount of lendingPoolTokens staked with period staking for a wallet\\n    /// @param wallet wallet address\\n    function getWalletStakedAmountRewardPeriod(address wallet) public view returns (uint256) {\\n        return periodStakingStorage[0].walletStakedAmounts[wallet].stakedBalance;\\n    }\\n\\n    /// @dev stake Lending Pool Token during reward period\\n    /// @param amount amount of Lending Pool Token to stake\\n    function stakeRewardPeriod(uint256 amount) external {\\n        PeriodStaking.stakeRewardPeriod(periodStakingStorage[0], amount, lendingPoolToken);\\n    }\\n\\n    /// @dev unstake Lending Pool Token during reward period\\n    /// @param amount amount of Lending Pool Token to unstake\\n    function unstakeRewardPeriod(uint256 amount) external {\\n        PeriodStaking.unstakeRewardPeriod(periodStakingStorage[0], amount, lendingPoolToken);\\n    }\\n\\n    /// @dev claim rewards of staking period\\n    /// @param rewardPeriodId staking period id\\n    function claimRewardPeriod(uint256 rewardPeriodId) external {\\n        PeriodStaking.claimRewardPeriod(periodStakingStorage[0], rewardPeriodId, lendingPoolToken);\\n    }\\n\\n    /// @dev calculate rewards for a wallet of a certain staking period\\n    /// @param wallet wallet address\\n    /// @param rewardPeriodId staking period id\\n    /// @param projectedTotalRewards projected total rewards for staking period\\n    function calculateWalletRewardsPeriod(\\n        address wallet,\\n        uint256 rewardPeriodId,\\n        uint256 projectedTotalRewards\\n    ) public view returns (uint256) {\\n        return PeriodStaking.calculateWalletRewardsPeriod(periodStakingStorage[0], wallet, rewardPeriodId, projectedTotalRewards);\\n    }\\n\\n    /// @dev calculate rewards for a wallet of a certain staking period providing a yield percentage\\n    /// @param wallet wallet address\\n    /// @param rewardPeriodId staking period id\\n    /// @param yieldPeriod Period based 4-digits precision percentage value e.g 5% p.a. => 50000 (1.25% per 3 months Period)\\n    function calculateWalletRewardsYieldPeriod(\\n        address wallet,\\n        uint256 rewardPeriodId,\\n        uint256 yieldPeriod\\n    ) public view returns (uint256) {\\n        return PeriodStaking.calculateWalletRewardsYieldPeriod(periodStakingStorage[0], wallet, rewardPeriodId, yieldPeriod, lendingPoolToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendingPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title LendingPoolToken\\n/// @author Florence Finance\\n/// @dev Every LendingPool has its own LendingPoolToken which can be minted and burned by the LendingPool\\ncontract LendingPoolToken is ERC20, Ownable {\\n    /// @dev\\n    /// @param _lendingPoolId (uint256) id of the LendingPool this token belongs to\\n    /// @param _name (string) name of the token (see ERC20)\\n    /// @param _symbol (string) symbol of the token (see ERC20)\\n    // solhint-disable-next-line\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\\n\\n    /// @dev Allows owner to mint tokens.\\n    /// @param _receiver (address) receiver of the minted tokens\\n    /// @param _amount (uint256) the amount to mint (18 decimals)\\n    function mint(address _receiver, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"LendingPoolToken: invalidAmount\\\");\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /// @dev Allows owner to burn tokens.\\n    /// @param _amount (uint256) the amount to burn (18 decimals)\\n    function burn(uint256 _amount) external {\\n        require(_amount > 0, \\\"LendingPoolToken: invalidAmount\\\");\\n        _burn(msg.sender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PeriodStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"./Util.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @title Period staking contract\\n/// @dev this library contains all funcionality related to the period staking mechanism\\n/// Lending Pool Token (LPT) owner stake their LPTs within an active staking period (e.g. staking period could be three months)\\n/// The LPTs can remain staked over several consecutive periods while accumulating staking rewards (currently USDC token).\\n/// The amount of staking rewards depends on the total staking score per staking period of the LPT owner address and\\n/// on the total amount of rewards distrubuted for this staking period\\n/// E.g. Staking period is 90 days and total staking rewards is 900 USDC\\n/// LPT staker 1 stakes 100 LPTs during the whole 90 days\\n/// LPT staker 2 starts staking after 45 days and stakes 100 LPTs until the end of the staking period\\n/// staker 1 staking score is 600 and staker 2 staking score is 300\\n/// staker 1 claims 600 USDC after staking period is completed\\n/// staker 2 claims 300 USDC after staking period is completed\\n/// the staking rewards need to be claimed actively after each staking period is completed and the total rewards have been deposited to the contract by the Borrower\\n\\nlibrary PeriodStaking {\\n    event StakedPeriod(address indexed staker, IERC20 indexed stakableToken, uint256 amount);\\n    event UnstakedPeriod(address indexed unstaker, IERC20 indexed stakedToken, uint256 amount, uint256 totalStakedBalance);\\n    event ClaimedRewardsPeriod(address indexed claimer, IERC20 stakedToken, IERC20 rewardToken, uint256 amount);\\n    event ChangedEndRewardPeriod(uint256 indexed _periodId, uint256 _periodStart, uint256 _periodEnd);\\n\\n    struct PeriodStakingStorage {\\n        mapping(uint256 => RewardPeriod) rewardPeriods;\\n        mapping(address => WalletStakingState) walletStakedAmounts;\\n        mapping(uint256 => mapping(address => uint256)) walletStakingScores;\\n        uint256 currentRewardPeriodId;\\n        uint256 duration;\\n        IERC20 rewardToken;\\n        mapping(uint256 => mapping(address => uint256)) walletRewardableCapital;\\n    }\\n\\n    struct RewardPeriod {\\n        uint256 id;\\n        uint256 start;\\n        uint256 end;\\n        uint256 totalRewards;\\n        uint256 totalStakingScore;\\n        uint256 finalStakedAmount;\\n        IERC20 rewardToken;\\n    }\\n\\n    struct WalletStakingState {\\n        uint256 stakedBalance;\\n        uint256 lastUpdate;\\n        mapping(IERC20 => uint256) outstandingRewards;\\n    }\\n\\n    /// @dev Get the struct/info of all reward periods\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @return returns the array including all reward period structs\\n    function getRewardPeriods(PeriodStakingStorage storage periodStakingStorage) external view returns (RewardPeriod[] memory) {\\n        RewardPeriod[] memory rewardPeriodsArray = new RewardPeriod[](periodStakingStorage.currentRewardPeriodId);\\n\\n        for (uint256 i = 1; i <= periodStakingStorage.currentRewardPeriodId; i++) {\\n            RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[i];\\n            rewardPeriodsArray[i - 1] = rewardPeriod;\\n        }\\n        return rewardPeriodsArray;\\n    }\\n\\n    /// @dev End the current reward period\\n    /// @param periodEnd block number of new end of the current reward period\\n    /// periodEnd == 0 sets current reward period end to current block number\\n    function setEndRewardPeriod(PeriodStakingStorage storage periodStakingStorage, uint256 periodEnd) external {\\n        RewardPeriod storage currentRewardPeriod = periodStakingStorage.rewardPeriods[periodStakingStorage.currentRewardPeriodId];\\n        require(currentRewardPeriod.id > 0, \\\"no reward periods\\\");\\n        require(currentRewardPeriod.start < block.number && currentRewardPeriod.end > block.number, \\\"not inside any reward period\\\");\\n\\n        if (periodEnd == 0) {\\n            currentRewardPeriod.end = block.number;\\n        } else {\\n            require(periodEnd >= block.number, \\\"end of period in the past\\\");\\n            currentRewardPeriod.end = periodEnd;\\n        }\\n        emit ChangedEndRewardPeriod(currentRewardPeriod.id, currentRewardPeriod.start, currentRewardPeriod.end);\\n    }\\n\\n    /// @dev Start the next reward period\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param periodStart start block of the period, 0 == follow previous period, 1 == start at current block, >1 use passed value\\n    function startNextRewardPeriod(PeriodStakingStorage storage periodStakingStorage, uint256 periodStart) external {\\n        require(periodStakingStorage.duration > 0 && address(periodStakingStorage.rewardToken) != address(0), \\\"duration and/or rewardToken not configured\\\");\\n\\n        RewardPeriod storage currentRewardPeriod = periodStakingStorage.rewardPeriods[periodStakingStorage.currentRewardPeriodId];\\n        if (periodStakingStorage.currentRewardPeriodId > 0) {\\n            require(currentRewardPeriod.end > 0 && currentRewardPeriod.end < block.number, \\\"current period has not ended yet\\\");\\n        }\\n        periodStakingStorage.currentRewardPeriodId += 1;\\n        RewardPeriod storage nextRewardPeriod = periodStakingStorage.rewardPeriods[periodStakingStorage.currentRewardPeriodId];\\n        nextRewardPeriod.rewardToken = periodStakingStorage.rewardToken;\\n\\n        nextRewardPeriod.id = periodStakingStorage.currentRewardPeriodId;\\n\\n        if (periodStart == 0) {\\n            nextRewardPeriod.start = currentRewardPeriod.end != 0 ? currentRewardPeriod.end : block.number;\\n        } else if (periodStart == 1) {\\n            nextRewardPeriod.start = block.number;\\n        } else {\\n            nextRewardPeriod.start = periodStart;\\n        }\\n\\n        nextRewardPeriod.end = nextRewardPeriod.start + periodStakingStorage.duration;\\n        nextRewardPeriod.finalStakedAmount = currentRewardPeriod.finalStakedAmount;\\n        nextRewardPeriod.totalStakingScore = currentRewardPeriod.finalStakedAmount * (nextRewardPeriod.end - nextRewardPeriod.start);\\n    }\\n\\n    /// @dev Deposit the rewards (USDC token) for a reward period\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param rewardPeriodId The ID of the reward period\\n    /// @param _totalRewards total amount of period rewards to deposit\\n    function depositRewardPeriodRewards(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        uint256 rewardPeriodId,\\n        uint256 _totalRewards\\n    ) public {\\n        RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[rewardPeriodId];\\n\\n        require(rewardPeriod.end > 0 && rewardPeriod.end < block.number, \\\"period has not ended\\\");\\n\\n        periodStakingStorage.rewardPeriods[rewardPeriodId].totalRewards = Util.checkedTransferFrom(rewardPeriod.rewardToken, msg.sender, address(this), _totalRewards);\\n    }\\n\\n    /// @dev Updates the staking score for a wallet over all staking periods\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    function updatePeriod(PeriodStakingStorage storage periodStakingStorage) internal {\\n        WalletStakingState storage walletStakedAmount = periodStakingStorage.walletStakedAmounts[msg.sender];\\n        if (walletStakedAmount.stakedBalance > 0 && walletStakedAmount.lastUpdate < periodStakingStorage.currentRewardPeriodId && walletStakedAmount.lastUpdate > 0) {\\n            uint256 i = walletStakedAmount.lastUpdate + 1;\\n            for (; i <= periodStakingStorage.currentRewardPeriodId; i++) {\\n                RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[i];\\n                periodStakingStorage.walletStakingScores[i][msg.sender] = walletStakedAmount.stakedBalance * (rewardPeriod.end - rewardPeriod.start);\\n                periodStakingStorage.walletRewardableCapital[i][msg.sender] = walletStakedAmount.stakedBalance;\\n            }\\n        }\\n        walletStakedAmount.lastUpdate = periodStakingStorage.currentRewardPeriodId;\\n    }\\n\\n    /// @dev Calculate the staking score for a wallet for a given rewards period\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param wallet wallet address\\n    /// @param period period ID for which to calculate the staking rewards\\n    /// @return wallet staking score for a given rewards period\\n    function getWalletRewardPeriodStakingScore(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        address wallet,\\n        uint256 period\\n    ) public view returns (uint256) {\\n        WalletStakingState storage walletStakedAmount = periodStakingStorage.walletStakedAmounts[wallet];\\n        RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[period];\\n        if (walletStakedAmount.lastUpdate > 0 && walletStakedAmount.lastUpdate < period) {\\n            return walletStakedAmount.stakedBalance * (rewardPeriod.end - rewardPeriod.start);\\n        } else {\\n            return periodStakingStorage.walletStakingScores[period][wallet];\\n        }\\n    }\\n\\n    /// @dev Stake Lending Pool Token in current rewards period\\n    /// @notice emits event StakedPeriod\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param amount amount of LPT to stake\\n    /// @param lendingPoolToken Lending Pool Token address\\n    function stakeRewardPeriod(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        uint256 amount,\\n        IERC20 lendingPoolToken\\n    ) external {\\n        RewardPeriod storage currentRewardPeriod = periodStakingStorage.rewardPeriods[periodStakingStorage.currentRewardPeriodId];\\n        require(currentRewardPeriod.start <= block.number && currentRewardPeriod.end > block.number, \\\"no active period\\\");\\n\\n        updatePeriod(periodStakingStorage);\\n\\n        amount = Util.checkedTransferFrom(lendingPoolToken, msg.sender, address(this), amount);\\n        emit StakedPeriod(msg.sender, lendingPoolToken, amount);\\n\\n        periodStakingStorage.walletStakedAmounts[msg.sender].stakedBalance += amount;\\n\\n        currentRewardPeriod.finalStakedAmount += amount;\\n\\n        currentRewardPeriod.totalStakingScore += (currentRewardPeriod.end - block.number) * amount;\\n\\n        periodStakingStorage.walletStakingScores[periodStakingStorage.currentRewardPeriodId][msg.sender] += (currentRewardPeriod.end - block.number) * amount;\\n        uint256 value = calculateRewardableCapital(currentRewardPeriod, amount, false);\\n        periodStakingStorage.walletRewardableCapital[periodStakingStorage.currentRewardPeriodId][msg.sender] += value;\\n    }\\n\\n    /// @dev Unstake Lending Pool Token\\n    /// @notice emits event UnstakedPeriod\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param amount amount of LPT to unstake\\n    /// @param lendingPoolToken Lending Pool Token address\\n    function unstakeRewardPeriod(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        uint256 amount,\\n        IERC20 lendingPoolToken\\n    ) external {\\n        require(amount <= periodStakingStorage.walletStakedAmounts[msg.sender].stakedBalance, \\\"amount greater than staked amount\\\");\\n        updatePeriod(periodStakingStorage);\\n\\n        RewardPeriod storage currentRewardPeriod = periodStakingStorage.rewardPeriods[periodStakingStorage.currentRewardPeriodId];\\n\\n        periodStakingStorage.walletStakedAmounts[msg.sender].stakedBalance -= amount;\\n        currentRewardPeriod.finalStakedAmount -= amount;\\n        if (currentRewardPeriod.end > block.number) {\\n            currentRewardPeriod.totalStakingScore -= (currentRewardPeriod.end - block.number) * amount;\\n            periodStakingStorage.walletStakingScores[periodStakingStorage.currentRewardPeriodId][msg.sender] -= (currentRewardPeriod.end - block.number) * amount;\\n            uint256 value = calculateRewardableCapital(currentRewardPeriod, amount, false);\\n            periodStakingStorage.walletRewardableCapital[periodStakingStorage.currentRewardPeriodId][msg.sender] -= value;\\n        }\\n        lendingPoolToken.transfer(msg.sender, amount);\\n        emit UnstakedPeriod(msg.sender, lendingPoolToken, amount, periodStakingStorage.walletStakedAmounts[msg.sender].stakedBalance);\\n    }\\n\\n    /// @dev Claim rewards (USDC) for a certain staking period\\n    /// @notice emits event ClaimedRewardsPeriod\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param rewardPeriodId period ID of which to claim staking rewards\\n    /// @param lendingPoolToken Lending Pool Token address\\n    function claimRewardPeriod(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        uint256 rewardPeriodId,\\n        IERC20 lendingPoolToken\\n    ) external {\\n        RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[rewardPeriodId];\\n        require(rewardPeriod.end > 0 && rewardPeriod.end < block.number && rewardPeriod.totalRewards > 0, \\\"period not ready for claiming\\\");\\n        updatePeriod(periodStakingStorage);\\n\\n        require(periodStakingStorage.walletStakingScores[rewardPeriodId][msg.sender] > 0, \\\"no rewards to claim\\\");\\n\\n        uint256 payableRewardAmount = calculatePeriodRewards(\\n            rewardPeriod.rewardToken,\\n            rewardPeriod.totalRewards,\\n            rewardPeriod.totalStakingScore,\\n            periodStakingStorage.walletStakingScores[rewardPeriodId][msg.sender]\\n        );\\n        periodStakingStorage.walletStakingScores[rewardPeriodId][msg.sender] = 0;\\n\\n        // This condition can never be true, because:\\n        // calculateRewardsPeriod can never have a walletStakingScore > totalPeriodStakingScore\\n        // require(payableRewardAmount > 0, \\\"no rewards to claim\\\");\\n\\n        rewardPeriod.rewardToken.transfer(msg.sender, payableRewardAmount);\\n        emit ClaimedRewardsPeriod(msg.sender, lendingPoolToken, rewardPeriod.rewardToken, payableRewardAmount);\\n    }\\n\\n    /// @dev Calculate the staking rewards of a staking period for a wallet address\\n    /// @param periodStakingStorage pointer to period staking storage struct\\n    /// @param rewardPeriodId period ID for which to calculate the rewards\\n    /// @param projectedTotalRewards The amount of total rewards which is planned to be deposited at the end of the staking period\\n    /// @return returns the amount of staking rewards for a wallet address for a certain staking period\\n    function calculateWalletRewardsPeriod(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        address wallet,\\n        uint256 rewardPeriodId,\\n        uint256 projectedTotalRewards\\n    ) public view returns (uint256) {\\n        RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[rewardPeriodId];\\n        if (projectedTotalRewards == 0) {\\n            projectedTotalRewards = rewardPeriod.totalRewards;\\n        }\\n        return\\n            calculatePeriodRewards(\\n                rewardPeriod.rewardToken,\\n                projectedTotalRewards,\\n                rewardPeriod.totalStakingScore,\\n                getWalletRewardPeriodStakingScore(periodStakingStorage, wallet, rewardPeriodId)\\n            );\\n    }\\n\\n    function calculateWalletRewardsYieldPeriod(\\n        PeriodStakingStorage storage periodStakingStorage,\\n        address wallet,\\n        uint256 rewardPeriodId,\\n        uint256 yieldPeriod,\\n        IERC20 lendingPoolToken\\n    ) public view returns (uint256) {\\n        RewardPeriod storage rewardPeriod = periodStakingStorage.rewardPeriods[rewardPeriodId];\\n        if (rewardPeriod.id == 0) return 0; // request for non-existent periodID\\n\\n        if (rewardPeriod.totalRewards != 0) {\\n            return calculateWalletRewardsPeriod(periodStakingStorage, wallet, rewardPeriodId, rewardPeriod.totalRewards);\\n        }\\n\\n        uint256 walletRewardableCapital = periodStakingStorage.walletRewardableCapital[rewardPeriod.id][wallet];\\n        uint256 currentStakedBalance = periodStakingStorage.walletStakedAmounts[wallet].stakedBalance;\\n\\n        if (currentStakedBalance != 0 && walletRewardableCapital == 0) {\\n            walletRewardableCapital = calculateRewardableCapital(rewardPeriod, currentStakedBalance, true);\\n        } else if (rewardPeriod.end > block.number) {\\n            walletRewardableCapital -= calculateRewardableCapital(rewardPeriod, currentStakedBalance, false);\\n        }\\n\\n        uint256 walletRewards18 = (walletRewardableCapital * yieldPeriod) / 10000 / 100;\\n        return Util.convertDecimalsERC20(walletRewards18, lendingPoolToken, rewardPeriod.rewardToken);\\n    }\\n\\n    /// @dev Calculate the total amount of payable rewards\\n    /// @param rewardToken The reward token (e.g. USDC)\\n    /// @param totalPeriodRewards The total amount of rewards for a certain period\\n    /// @param totalPeriodStakingScore The total staking score (of all wallet addresses during a certain staking period)\\n    /// @param walletStakingScore The total staking score (of one wallet address during a certain staking period)\\n    /// @return returns the total payable amount of staking rewards\\n    function calculatePeriodRewards(\\n        IERC20 rewardToken,\\n        uint256 totalPeriodRewards,\\n        uint256 totalPeriodStakingScore,\\n        uint256 walletStakingScore\\n    ) public view returns (uint256) {\\n        if (totalPeriodStakingScore == 0) {\\n            return 0;\\n        }\\n        uint256 rewardTokenDecimals = Util.getERC20Decimals(rewardToken);\\n\\n        uint256 _numerator = (walletStakingScore * totalPeriodRewards) * 10**(rewardTokenDecimals + 1);\\n        // with rounding of last digit\\n        uint256 payableRewardAmount = ((_numerator / totalPeriodStakingScore) + 5) / 10;\\n\\n        return payableRewardAmount / (uint256(10)**rewardTokenDecimals);\\n    }\\n\\n    function calculateRewardableCapital(\\n        RewardPeriod memory rewardPeriod,\\n        uint256 amount,\\n        bool invert\\n    ) internal view returns (uint256) {\\n        uint256 blockNumber = block.number;\\n        if (block.number > rewardPeriod.end) {\\n            // if (invert) {\\n            blockNumber = rewardPeriod.end;\\n            // } else {\\n            //     blockNumber = rewardPeriod.start;\\n            // }\\n        }\\n        uint256 stakingDuration;\\n        if (invert) {\\n            stakingDuration = (blockNumber - rewardPeriod.start) * 10**18;\\n        } else {\\n            stakingDuration = (rewardPeriod.end - blockNumber) * 10**18;\\n        }\\n        uint256 periodDuration = (rewardPeriod.end - rewardPeriod.start);\\n\\n        if (periodDuration == 0 || stakingDuration == 0 || amount == 0) {\\n            return 0;\\n        }\\n        return (amount * (stakingDuration / periodDuration)) / 10**18;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LinearStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Util.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Linear staking contract\\n/// @dev this library contains all funcionality related to the linear staking mechanism\\n/// Curve Token owner stake their curve token and receive Medici (MDC) token as rewards.\\n/// The amount of reward token (MDC) is calculated based on:\\n/// - the number of staked curve token\\n/// - the number of blocks the curve tokens are beig staked\\n/// - the amount of MDC rewards per Block per staked curve token\\n/// E.g. 10 MDC reward token per block per staked curve token\\n/// staker 1 stakes 100 curve token and claims rewards (MDC) after 200 Blocks\\n/// staker 1 recieves 200000 MDC reward tokens (200 blocks * 10 MDC/Block/CurveToken * 100 CurveToken)\\n\\nlibrary LinearStaking {\\n    event RewardTokensPerBlockUpdated(IERC20 stakedToken, IERC20 rewardToken, uint256 oldRewardTokensPerBlock, uint256 newRewardTokensPerBlock);\\n    event RewardsLockedUpdated(IERC20 stakedToken, IERC20 rewardToken, bool rewardsLocked);\\n    event StakedLinear(address indexed staker, IERC20 indexed stakableToken, uint256 amount);\\n    event UnstakedLinear(address indexed unstaker, IERC20 indexed stakedToken, uint256 amount, uint256 totalStakedBalance);\\n    event ClaimedRewardsLinear(address indexed claimer, IERC20 stakedToken, IERC20 rewardToken, uint256 amount);\\n    event RewardsDeposited(address depositor, IERC20 rewardToken, uint256 amount);\\n\\n    struct LinearStakingStorage {\\n        IERC20[] stakableTokens;\\n        /// @dev configuration of rewards for particular stakable tokens\\n        mapping(IERC20 => RewardConfiguration) rewardConfigurations;\\n        /// @dev storage of accumulated staking rewards for the pool participants addresses\\n        mapping(address => mapping(IERC20 => WalletStakingState)) walletStakingStates;\\n        /// @dev amount of tokens available to be distributed as staking rewards\\n        mapping(IERC20 => uint256) availableRewards;\\n    }\\n\\n    struct RewardConfiguration {\\n        bool isStakable;\\n        IERC20[] rewardTokens;\\n        // mapping(IERC20 => uint256) rewardTokensPerBlock; //Old, should be removed when new algorithm is implemented\\n\\n        // RewardToken => BlockNumber => RewardTokensPerBlock\\n        mapping(IERC20 => mapping(uint256 => uint256)) rewardTokensPerBlockHistory;\\n        // RewardToken => BlockNumbers/Keys of rewardTokensPerBlockHistory[RewardToken][BlockNumbers]\\n        mapping(IERC20 => uint256[]) rewardTokensPerBlockHistoryBlocks;\\n        mapping(IERC20 => bool) rewardsLocked;\\n    }\\n\\n    struct WalletStakingState {\\n        uint256 stakedBalance;\\n        uint256 lastUpdate;\\n        mapping(IERC20 => uint256) outstandingRewards;\\n    }\\n\\n    /// @dev Sets the rewardTokensPerBlock for a stakedToken-rewardToken pair\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @param rewardTokensPerBlock rewardTokens per rewardToken per block (rewardToken decimals)\\n    function setRewardTokensPerBlockLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        IERC20 stakedToken,\\n        IERC20 rewardToken,\\n        uint256 rewardTokensPerBlock\\n    ) public {\\n        require(address(stakedToken) != address(0) && address(rewardToken) != address(0), \\\"token adress cannot be zero\\\");\\n\\n        RewardConfiguration storage rewardConfiguration = linearStakingStorage.rewardConfigurations[stakedToken];\\n\\n        uint256[] storage rewardTokensPerBlockHistoryBlocks = rewardConfiguration.rewardTokensPerBlockHistoryBlocks[rewardToken];\\n\\n        uint256 currentRewardTokensPerBlock = 0;\\n\\n        if (rewardTokensPerBlockHistoryBlocks.length > 0) {\\n            uint256 lastRewardTokensPerBlockBlock = rewardTokensPerBlockHistoryBlocks[rewardTokensPerBlockHistoryBlocks.length - 1];\\n            currentRewardTokensPerBlock = rewardConfiguration.rewardTokensPerBlockHistory[rewardToken][lastRewardTokensPerBlockBlock];\\n        }\\n\\n        require(rewardTokensPerBlock != currentRewardTokensPerBlock, \\\"rewardTokensPerBlock already set to expected value\\\");\\n\\n        if (rewardTokensPerBlock != 0 && currentRewardTokensPerBlock == 0) {\\n            rewardConfiguration.rewardTokens.push(rewardToken);\\n            if (rewardConfiguration.rewardTokens.length == 1) {\\n                linearStakingStorage.stakableTokens.push(stakedToken);\\n            }\\n        }\\n\\n        if (rewardTokensPerBlock == 0 && currentRewardTokensPerBlock != 0) {\\n            Util.removeValueFromArray(rewardToken, rewardConfiguration.rewardTokens);\\n            if (rewardConfiguration.rewardTokens.length == 0) {\\n                Util.removeValueFromArray(stakedToken, linearStakingStorage.stakableTokens);\\n            }\\n        }\\n\\n        rewardConfiguration.isStakable = rewardTokensPerBlock != 0;\\n\\n        rewardConfiguration.rewardTokensPerBlockHistory[rewardToken][block.number] = rewardTokensPerBlock;\\n        rewardTokensPerBlockHistoryBlocks.push(block.number);\\n\\n        emit RewardTokensPerBlockUpdated(stakedToken, rewardToken, currentRewardTokensPerBlock, rewardTokensPerBlock);\\n    }\\n\\n    /// @dev Locks/Unlocks the reward token (MDC) for a certain staking token (Curve Token)\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @param rewardsLocked true = lock rewards; false = unlock rewards\\n    function setRewardsLockedLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        IERC20 stakedToken,\\n        IERC20 rewardToken,\\n        bool rewardsLocked\\n    ) public {\\n        require(address(stakedToken) != address(0) && address(rewardToken) != address(0), \\\"token adress cannot be zero\\\");\\n\\n        if (linearStakingStorage.rewardConfigurations[stakedToken].rewardsLocked[rewardToken] != rewardsLocked) {\\n            linearStakingStorage.rewardConfigurations[stakedToken].rewardsLocked[rewardToken] = rewardsLocked;\\n            emit RewardsLockedUpdated(stakedToken, rewardToken, rewardsLocked);\\n        }\\n    }\\n\\n    /// @dev Staking of a stakable token\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param stakableToken the stakeable token\\n    /// @param amount the amount to stake (stakableToken decimals)\\n    function stakeLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        IERC20 stakableToken,\\n        uint256 amount\\n    ) public {\\n        require(amount > 0, \\\"amount must be greater zero\\\");\\n        require(linearStakingStorage.rewardConfigurations[stakableToken].isStakable, \\\"token is not stakable\\\");\\n        updateRewardSnapshotLinear(linearStakingStorage, msg.sender, stakableToken);\\n        linearStakingStorage.walletStakingStates[msg.sender][stakableToken].stakedBalance += Util.checkedTransferFrom(stakableToken, msg.sender, address(this), amount);\\n        emit StakedLinear(msg.sender, stakableToken, amount);\\n    }\\n\\n    /// @dev Unstaking of a staked token\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param stakedToken the staked token\\n    /// @param amount the amount to unstake\\n    function unstakeLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        IERC20 stakedToken,\\n        uint256 amount\\n    ) public {\\n        amount = Math.min(amount, linearStakingStorage.walletStakingStates[msg.sender][stakedToken].stakedBalance);\\n        require(amount > 0, \\\"amount must be greater zero\\\");\\n        updateRewardSnapshotLinear(linearStakingStorage, msg.sender, stakedToken);\\n        linearStakingStorage.walletStakingStates[msg.sender][stakedToken].stakedBalance -= amount;\\n        stakedToken.transfer(msg.sender, amount);\\n        uint256 totalStakedBalance = linearStakingStorage.walletStakingStates[msg.sender][stakedToken].stakedBalance;\\n        emit UnstakedLinear(msg.sender, stakedToken, amount, totalStakedBalance);\\n        // emit UnstakedLinear(msg.sender, stakedToken, amount);\\n    }\\n\\n    /// @dev Updates the outstanding rewards for a specific wallet and staked token. This needs to be called every time before any changes to staked balances are made\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param wallet the wallet\\n    /// @param stakedToken the staked token\\n    function updateRewardSnapshotLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        address wallet,\\n        IERC20 stakedToken\\n    ) internal {\\n        uint256 lastUpdate = linearStakingStorage.walletStakingStates[wallet][stakedToken].lastUpdate;\\n\\n        if (lastUpdate != 0) {\\n            IERC20[] memory rewardTokens = linearStakingStorage.rewardConfigurations[stakedToken].rewardTokens;\\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\\n                IERC20 rewardToken = rewardTokens[i];\\n                uint256 newOutstandingRewards = calculateRewardsLinear(linearStakingStorage, wallet, stakedToken, rewardToken);\\n                linearStakingStorage.walletStakingStates[wallet][stakedToken].outstandingRewards[rewardToken] = newOutstandingRewards;\\n            }\\n        }\\n        linearStakingStorage.walletStakingStates[wallet][stakedToken].lastUpdate = block.number;\\n    }\\n\\n    /// @dev Calculates the outstanding rewards for a wallet, staked token and reward token\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param wallet the wallet\\n    /// @param stakedToken the staked token\\n    /// @param rewardToken the reward token\\n    /// @return the outstading rewards (rewardToken decimals)\\n    function calculateRewardsLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        address wallet,\\n        IERC20 stakedToken,\\n        IERC20 rewardToken\\n    ) public view returns (uint256) {\\n        uint256 lastUpdate = linearStakingStorage.walletStakingStates[wallet][stakedToken].lastUpdate;\\n\\n        if (lastUpdate != 0) {\\n            uint256 stakedBalance = linearStakingStorage.walletStakingStates[wallet][stakedToken].stakedBalance / 10**Util.getERC20Decimals(stakedToken);\\n\\n            uint256 accumulatedRewards; // = 0\\n            uint256 rewardRangeStart;\\n            uint256 rewardRangeStop = block.number;\\n            uint256 rewardRangeTokensPerBlock;\\n            uint256 rewardRangeBlocks;\\n\\n            uint256[] memory fullHistory = linearStakingStorage.rewardConfigurations[stakedToken].rewardTokensPerBlockHistoryBlocks[rewardToken];\\n            uint256 i = fullHistory.length - 1;\\n            for (; i >= 0; i--) {\\n                rewardRangeStart = fullHistory[i]; // Block numbers at which the rewards per Block changed in history\\n                rewardRangeTokensPerBlock = linearStakingStorage.rewardConfigurations[stakedToken].rewardTokensPerBlockHistory[rewardToken][fullHistory[i]];\\n\\n                if (rewardRangeStart < lastUpdate) {\\n                    rewardRangeStart = lastUpdate;\\n                }\\n\\n                rewardRangeBlocks = rewardRangeStop - rewardRangeStart;\\n\\n                accumulatedRewards += stakedBalance * rewardRangeBlocks * rewardRangeTokensPerBlock;\\n\\n                if (rewardRangeStart == lastUpdate) break;\\n\\n                rewardRangeStop = rewardRangeStart;\\n            }\\n\\n            uint256 outStandingRewards = linearStakingStorage.walletStakingStates[wallet][stakedToken].outstandingRewards[rewardToken];\\n\\n            return (outStandingRewards + accumulatedRewards);\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev Claims all rewards for a staked tokens\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param stakedToken the staked token\\n    function claimRewardsLinear(LinearStakingStorage storage linearStakingStorage, IERC20 stakedToken) public {\\n        updateRewardSnapshotLinear(linearStakingStorage, msg.sender, stakedToken);\\n\\n        IERC20[] memory rewardTokens = linearStakingStorage.rewardConfigurations[stakedToken].rewardTokens;\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            IERC20 rewardToken = rewardTokens[i];\\n\\n            if (linearStakingStorage.rewardConfigurations[stakedToken].rewardsLocked[rewardToken]) {\\n                //rewards for the token are not claimable yet\\n                continue;\\n            }\\n\\n            uint256 rewardAmount = linearStakingStorage.walletStakingStates[msg.sender][stakedToken].outstandingRewards[rewardToken];\\n            uint256 payableRewardAmount = Math.min(rewardAmount, linearStakingStorage.availableRewards[rewardToken]);\\n            require(payableRewardAmount > 0, \\\"no rewards available for payout\\\");\\n\\n            linearStakingStorage.walletStakingStates[msg.sender][stakedToken].outstandingRewards[rewardToken] -= payableRewardAmount;\\n            linearStakingStorage.availableRewards[rewardToken] -= payableRewardAmount;\\n\\n            rewardToken.transfer(msg.sender, payableRewardAmount);\\n            emit ClaimedRewardsLinear(msg.sender, stakedToken, rewardToken, payableRewardAmount);\\n        }\\n    }\\n\\n    /// @dev Allows the deposit of reward funds. This is usually used by the borrower or treasury\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param rewardToken the reward token\\n    /// @param amount the amount of tokens (rewardToken decimals)\\n    function depositRewardsLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        IERC20 rewardToken,\\n        uint256 amount\\n    ) public {\\n        linearStakingStorage.availableRewards[rewardToken] += Util.checkedTransferFrom(rewardToken, msg.sender, address(this), amount);\\n        emit RewardsDeposited(msg.sender, rewardToken, amount);\\n    }\\n\\n    /// @dev Get the staked balance for a specific token and wallet\\n    /// @param linearStakingStorage pointer to linear staking storage struct\\n    /// @param wallet the wallet\\n    /// @param stakableToken the staked token\\n    /// @return the staked balance (stakableToken decimals)\\n    function getStakedBalanceLinear(\\n        LinearStakingStorage storage linearStakingStorage,\\n        address wallet,\\n        IERC20 stakableToken\\n    ) public view returns (uint256) {\\n        return linearStakingStorage.walletStakingStates[wallet][stakableToken].stakedBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Funding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../LendingPoolToken.sol\\\";\\nimport \\\"./Util.sol\\\";\\n\\n/// @title Funding contract\\n/// @dev this library contains all funcionality related to the funding mechanism\\n/// A borrower creates a new funding request to fund an amount of Lending Pool Token (LPT)\\n/// A whitelisted primary funder buys LPT from the open funding request with own USDC\\n/// The treasury wallet is a MultiSig wallet\\n/// The funding request can be cancelled by the borrower\\n\\nlibrary Funding {\\n    /// @dev Emitted when a funding request is added\\n    /// @param fundingRequestId id of the funding request\\n    /// @param borrower borrower / creator of the funding request\\n    /// @param amount amount raised in LendingPoolTokens\\n    /// @param durationDays duration of the underlying loan\\n    /// @param interestRate interest rate of the underlying loan\\n    event FundingRequestAdded(uint256 fundingRequestId, address borrower, uint256 amount, uint256 durationDays, uint256 interestRate);\\n\\n    /// @dev Emitted when a funding request is cancelled\\n    /// @param fundingRequestId id of the funding request\\n    event FundingRequestCancelled(uint256 fundingRequestId);\\n\\n    /// @dev Emitted when a funding request is (partially) filled\\n    /// @param funder the funder\\n    /// @param fundingToken the token used to fund\\n    /// @param fundingTokenAmount the amount funded\\n    /// @param lendingPoolTokenAmount the amount of LendingPoolTokens the funder received\\n    event Funded(address indexed funder, IERC20 fundingToken, uint256 fundingTokenAmount, uint256 lendingPoolTokenAmount);\\n\\n    /// @dev Emitted when a token is added or removed as funding token\\n    /// @param token the token\\n    /// @param accepted whether it can be used to fund\\n    event FundingTokenUpdated(IERC20 token, bool accepted);\\n\\n    /// @dev Emitted when an address primaryFunder status changes\\n    /// @param primaryFunder the address\\n    /// @param accepted whether the address can fund loans\\n    event PrimaryFunderUpdated(address primaryFunder, bool accepted);\\n\\n    /// @dev Emitted when an address borrower status changes\\n    /// @param borrower the address\\n    /// @param accepted whether the address can borrow from the pool\\n    event BorrowerUpdated(address borrower, bool accepted);\\n\\n    /// @dev Contains all state data pertaining to funding\\n    struct FundingStorage {\\n        mapping(uint256 => FundingRequest) fundingRequests; //FundingRequest.id => FundingRequest\\n        uint256 currentFundingRequestId; //id of the next FundingRequest to be proccessed\\n        uint256 lastFundingRequestId; //id of the last FundingRequest in the\\n        mapping(address => bool) primaryFunders; //address => whether its allowed to fund loans\\n        mapping(IERC20 => bool) fundingTokens; //token => whether it can be used to fund loans\\n        IERC20[] _fundingTokens; //all fundingTokens that can be used to fund loans\\n        mapping(address => bool) borrowers; //address => whether its allowed to act as borrower / create FundingRequests\\n        mapping(IERC20 => AggregatorV3Interface) fundingTokenChainLinkFeeds; //fudingToken => ChainLink feed which provides a conversion rate for the fundingToken to the pools loans base currency (e.g. USDC => EURSUD)\\n        mapping(IERC20 => bool) invertChainLinkFeedAnswer; //fudingToken => whether the data provided by the ChainLink feed should be inverted (not all ChainLink feeds are Token->BaseCurrency, some could be BaseCurrency->Token)\\n        bool disablePrimaryFunderCheck;\\n    }\\n    /// @dev A FundingRequest represents a borrowers desire to raise funds for a loan. (Double linked list)\\n    struct FundingRequest {\\n        uint256 id; //id of the funding request\\n        address borrower; //the borrower who created the funding request\\n        uint256 amount; //the amount to be raised denominated in LendingPoolTokens\\n        uint256 durationDays; //duration of the underlying loan in days\\n        uint256 interestRate; //interest rate of the underlying  loan (2 decimals)\\n        uint256 amountFilled; //amount that has already been filled by primary funders\\n        FundingRequestState state; //state of the funding request\\n        uint256 next; //id of the next funding request\\n        uint256 prev; //id of the previous funding request\\n    }\\n\\n    /// @dev State of a FundingRequest\\n    enum FundingRequestState {\\n        OPEN, //the funding request is open and ready to be filled\\n        FILLED, //the funding request has been filled completely\\n        CANCELLED //the funding request has been cancelled\\n    }\\n\\n    /// @dev modifier to make function callable by borrower only\\n    modifier onlyBorrower(FundingStorage storage fundingStorage) {\\n        require(fundingStorage.borrowers[msg.sender], \\\"caller address is no borrower\\\");\\n        _;\\n    }\\n\\n    /// @dev Get all open FundingRequests\\n    /// @param fundingStorage FundingStorage\\n    /// @return all open FundingRequests\\n    function getOpenFundingRequests(FundingStorage storage fundingStorage) external view returns (FundingRequest[] memory) {\\n        FundingRequest[] memory fundingRequests = new FundingRequest[](fundingStorage.lastFundingRequestId - fundingStorage.currentFundingRequestId + 1);\\n        uint256 i = fundingStorage.currentFundingRequestId;\\n        for (; i <= fundingStorage.lastFundingRequestId; i++) {\\n            fundingRequests[i - fundingStorage.currentFundingRequestId] = fundingStorage.fundingRequests[i];\\n        }\\n        return fundingRequests;\\n    }\\n\\n    /// @dev Allows borrowers to submit a FundingRequest\\n    /// @param fundingStorage FundingStorage\\n    /// @param amount the amount to be raised denominated in LendingPoolTokens\\n    /// @param durationDays duration of the underlying loan in days\\n    /// @param interestRate interest rate of the underlying loan (2 decimals)\\n    function addFundingRequest(\\n        FundingStorage storage fundingStorage,\\n        uint256 amount,\\n        uint256 durationDays,\\n        uint256 interestRate\\n    ) public onlyBorrower(fundingStorage) {\\n        require(amount > 0 && durationDays > 0 && interestRate > 0, \\\"invalid funding request data\\\");\\n\\n        uint256 previousFundingRequestId = fundingStorage.lastFundingRequestId;\\n\\n        uint256 fundingRequestId = ++fundingStorage.lastFundingRequestId;\\n\\n        if (previousFundingRequestId != 0) {\\n            fundingStorage.fundingRequests[previousFundingRequestId].next = fundingRequestId;\\n        }\\n\\n        emit FundingRequestAdded(fundingRequestId, msg.sender, amount, durationDays, interestRate);\\n\\n        fundingStorage.fundingRequests[fundingRequestId] = FundingRequest(\\n            fundingRequestId,\\n            msg.sender,\\n            amount,\\n            durationDays,\\n            interestRate,\\n            0,\\n            FundingRequestState.OPEN,\\n            0,\\n            previousFundingRequestId\\n        );\\n\\n        if (fundingStorage.currentFundingRequestId == 0) {\\n            fundingStorage.currentFundingRequestId = fundingStorage.lastFundingRequestId;\\n        }\\n    }\\n\\n    /// @dev Allows borrowers to cancel their own funding request as long as it has not been partially or fully filled\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingRequestId the id of the funding request to cancel\\n    function cancelFundingRequest(FundingStorage storage fundingStorage, uint256 fundingRequestId) public onlyBorrower(fundingStorage) {\\n        require(fundingStorage.fundingRequests[fundingRequestId].id != 0, \\\"funding request not found\\\");\\n        require(fundingStorage.fundingRequests[fundingRequestId].state == FundingRequestState.OPEN, \\\"funding request already processing\\\");\\n\\n        emit FundingRequestCancelled(fundingRequestId);\\n\\n        fundingStorage.fundingRequests[fundingRequestId].state = FundingRequestState.CANCELLED;\\n\\n        FundingRequest storage currentRequest = fundingStorage.fundingRequests[fundingRequestId];\\n\\n        if (currentRequest.prev != 0) {\\n            fundingStorage.fundingRequests[currentRequest.prev].next = currentRequest.next;\\n        }\\n\\n        if (currentRequest.next != 0) {\\n            fundingStorage.fundingRequests[currentRequest.next].prev = currentRequest.prev;\\n        }\\n\\n        uint256 saveNext = fundingStorage.fundingRequests[fundingRequestId].next;\\n        fundingStorage.fundingRequests[fundingRequestId].prev = 0;\\n        fundingStorage.fundingRequests[fundingRequestId].next = 0;\\n\\n        if (fundingStorage.currentFundingRequestId == fundingRequestId) {\\n            fundingStorage.currentFundingRequestId = saveNext; // can be zero which is fine\\n        }\\n    }\\n\\n    /// @dev Allows primary funders to fund borrowers fundingRequests. In return for their\\n    ///      funding they receive LendingPoolTokens based on the rate provided by the configured ChainLinkFeed\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken token used for the funding (e.g. USDC)\\n    /// @param fundingTokenAmount funding amount\\n    /// @param lendingPoolToken the LendingPoolToken which will be minted to the funders wallet in return\\n    function fund(\\n        FundingStorage storage fundingStorage,\\n        IERC20 fundingToken,\\n        uint256 fundingTokenAmount,\\n        LendingPoolToken lendingPoolToken\\n    ) public {\\n        require(fundingStorage.primaryFunders[msg.sender] || fundingStorage.disablePrimaryFunderCheck, \\\"address is not primary funder\\\");\\n        require(fundingStorage.fundingTokens[fundingToken], \\\"unrecognized funding token\\\");\\n        require(fundingStorage.currentFundingRequestId != 0, \\\"no active funding request\\\");\\n\\n        (uint256 exchangeRate, uint256 exchangeRateDecimals) = getExchangeRate(fundingStorage, fundingToken);\\n\\n        FundingRequest storage currentFundingRequest = fundingStorage.fundingRequests[fundingStorage.currentFundingRequestId];\\n        uint256 currentFundingNeedInLPT = currentFundingRequest.amount - currentFundingRequest.amountFilled;\\n\\n        uint256 currentFundingNeedInFundingToken = (Util.convertDecimalsERC20(currentFundingNeedInLPT, lendingPoolToken, fundingToken) * exchangeRate) /\\n            (uint256(10)**exchangeRateDecimals);\\n\\n        if (fundingTokenAmount > currentFundingNeedInFundingToken) {\\n            fundingTokenAmount = currentFundingNeedInFundingToken;\\n        }\\n\\n        uint256 lendingPoolTokenAmount = ((Util.convertDecimalsERC20(fundingTokenAmount, fundingToken, lendingPoolToken) * (uint256(10)**exchangeRateDecimals)) / exchangeRate);\\n\\n        //require(lendingPoolTokenAmount <= currentFundingNeed, \\\"amount exceeds requested funding\\\");\\n        Util.checkedTransferFrom(fundingToken, msg.sender, currentFundingRequest.borrower, fundingTokenAmount);\\n        currentFundingRequest.amountFilled += lendingPoolTokenAmount;\\n\\n        if (currentFundingRequest.amount == currentFundingRequest.amountFilled) {\\n            currentFundingRequest.state = FundingRequestState.FILLED;\\n\\n            fundingStorage.currentFundingRequestId = currentFundingRequest.next; // this can be zero which is ok\\n        }\\n\\n        lendingPoolToken.mint(msg.sender, lendingPoolTokenAmount);\\n        emit Funded(msg.sender, fundingToken, fundingTokenAmount, lendingPoolTokenAmount);\\n    }\\n\\n    /// @dev Returns an exchange rate to convert from a funding token to the pools underlying loan currency\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken the fundingToken\\n    /// @return the exchange rate and the decimals of the exchange rate\\n    function getExchangeRate(FundingStorage storage fundingStorage, IERC20 fundingToken) public view returns (uint256, uint8) {\\n        require(address(fundingStorage.fundingTokenChainLinkFeeds[fundingToken]) != address(0), \\\"no exchange rate available\\\");\\n\\n        (, int256 exchangeRate, , , ) = fundingStorage.fundingTokenChainLinkFeeds[fundingToken].latestRoundData();\\n        require(exchangeRate != 0, \\\"zero exchange rate\\\");\\n\\n        uint8 exchangeRateDecimals = fundingStorage.fundingTokenChainLinkFeeds[fundingToken].decimals();\\n\\n        if (fundingStorage.invertChainLinkFeedAnswer[fundingToken]) {\\n            exchangeRate = int256(10**(exchangeRateDecimals * 2)) / exchangeRate;\\n        }\\n\\n        return (uint256(exchangeRate), exchangeRateDecimals);\\n    }\\n\\n    /// @dev Maps a funding token to a ChainLinkFeed\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken the fundingToken\\n    /// @param fundingTokenChainLinkFeed the ChainLink price feed\\n    /// @param invertChainLinkFeedAnswer whether the rate returned by the chainLinkFeed needs to be inverted to match the token-currency pair order\\n    function setFundingTokenChainLinkFeed(\\n        FundingStorage storage fundingStorage,\\n        IERC20 fundingToken,\\n        AggregatorV3Interface fundingTokenChainLinkFeed,\\n        bool invertChainLinkFeedAnswer\\n    ) external {\\n        fundingStorage.fundingTokenChainLinkFeeds[fundingToken] = fundingTokenChainLinkFeed;\\n        fundingStorage.invertChainLinkFeedAnswer[fundingToken] = invertChainLinkFeedAnswer;\\n    }\\n\\n    /// @dev Set whether a token should be accepted for funding the pool\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken the token\\n    /// @param accepted whether it is accepted\\n    function setFundingToken(\\n        FundingStorage storage fundingStorage,\\n        IERC20 fundingToken,\\n        bool accepted\\n    ) public {\\n        if (fundingStorage.fundingTokens[fundingToken] != accepted) {\\n            fundingStorage.fundingTokens[fundingToken] = accepted;\\n            emit FundingTokenUpdated(fundingToken, accepted);\\n            if (accepted) {\\n                fundingStorage._fundingTokens.push(fundingToken);\\n            } else {\\n                Util.removeValueFromArray(fundingToken, fundingStorage._fundingTokens);\\n            }\\n        }\\n    }\\n\\n    /// @dev Change primaryFunder status of an address\\n    /// @param fundingStorage FundingStorage\\n    /// @param primaryFunder the address\\n    /// @param accepted whether its accepted as primaryFunder\\n    function setPrimaryFunder(\\n        FundingStorage storage fundingStorage,\\n        address primaryFunder,\\n        bool accepted\\n    ) public {\\n        if (fundingStorage.primaryFunders[primaryFunder] != accepted) {\\n            fundingStorage.primaryFunders[primaryFunder] = accepted;\\n            emit PrimaryFunderUpdated(primaryFunder, accepted);\\n        }\\n    }\\n\\n    /// @dev Change borrower status of an address\\n    /// @param fundingStorage FundingStorage\\n    /// @param borrower the borrower address\\n    /// @param accepted whether the address is a borrower\\n    function setBorrower(\\n        FundingStorage storage fundingStorage,\\n        address borrower,\\n        bool accepted\\n    ) public {\\n        if (fundingStorage.borrowers[borrower] != accepted) {\\n            fundingStorage.borrowers[borrower] = accepted;\\n            emit BorrowerUpdated(borrower, accepted);\\n            if (fundingStorage.borrowers[msg.sender]) {\\n                fundingStorage.borrowers[msg.sender] = false;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Util.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nlibrary Util {\\n    /// @dev Return the decimals of an ERC20 token (if the implementations offers it)\\n    /// @param _token (IERC20) the ERC20 token\\n    /// @return  (uint8) the decimals\\n    function getERC20Decimals(IERC20 _token) internal view returns (uint8) {\\n        return IERC20Metadata(address(_token)).decimals();\\n    }\\n\\n    function checkedTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        require(amount > 0, \\\"checkedTransferFrom: amount zero\\\");\\n        uint256 balanceBefore = token.balanceOf(to);\\n        token.transferFrom(from, to, amount);\\n        uint256 receivedAmount = token.balanceOf(to) - balanceBefore;\\n        require(receivedAmount == amount, \\\"checkedTransferFrom: not amount\\\");\\n        return receivedAmount;\\n    }\\n\\n    /// @dev A checked Token transfer; raises if the token transfer amount is not equal to the transferred amount\\n    /// this might happen if the token ERC20 contract is hacked\\n    /// @param token (address) the address of the ERC20 token to transfer\\n    /// @param to (address) receiver address\\n    /// @param amount (uint256) the desired amount to transfer\\n    /// @return  (uint256) the received amount that was transferred\\n    /// IMPORTANT: the return value will only be returned to another smart contract,\\n    /// but never to the testing environment, because if the transaction goes through,\\n    /// a receipt is returned and not a (uint256)\\n    function checkedTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        require(amount > 0, \\\"checkedTransfer: amount zero\\\");\\n        uint256 balanceBefore = token.balanceOf(to);\\n        token.transfer(to, amount);\\n        uint256 receivedAmount = token.balanceOf(to) - balanceBefore;\\n        require(receivedAmount == amount, \\\"checkedTransfer: not amount\\\");\\n        return receivedAmount;\\n    }\\n\\n    /// @dev Converts a number from one decimal precision to the other\\n    /// @param _number (uint256) the number\\n    /// @param _currentDecimals (uint256) the current decimals of the number\\n    /// @param _targetDecimals (uint256) the desired decimals for the number\\n    /// @return  (uint256) the number with _targetDecimals decimals\\n    function convertDecimals(\\n        uint256 _number,\\n        uint256 _currentDecimals,\\n        uint256 _targetDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 diffDecimals;\\n\\n        uint256 amountCorrected = _number;\\n\\n        if (_targetDecimals < _currentDecimals) {\\n            diffDecimals = _currentDecimals - _targetDecimals;\\n            amountCorrected = _number / (uint256(10)**diffDecimals);\\n        } else if (_targetDecimals > _currentDecimals) {\\n            diffDecimals = _targetDecimals - _currentDecimals;\\n            amountCorrected = _number * (uint256(10)**diffDecimals);\\n        }\\n\\n        return (amountCorrected);\\n    }\\n\\n    /// @dev Converts a number from one decimal precision to the other based on two ERC20 Tokens\\n    /// @param _number (uint256) the number\\n    /// @param _sourceToken (address) the source ERC20 Token\\n    /// @param _targetToken (address) the target ERC20 Token\\n    /// @return  (uint256) the number with _targetDecimals decimals\\n    function convertDecimalsERC20(\\n        uint256 _number,\\n        IERC20 _sourceToken,\\n        IERC20 _targetToken\\n    ) internal view returns (uint256) {\\n        return convertDecimals(_number, getERC20Decimals(_sourceToken), getERC20Decimals(_targetToken));\\n    }\\n\\n    function removeValueFromArray(IERC20 value, IERC20[] storage array) internal {\\n        bool shift = false;\\n        uint256 i = 0;\\n        while (i < array.length - 1) {\\n            if (array[i] == value) shift = true;\\n            if (shift) {\\n                array[i] = array[i + 1];\\n            }\\n            i++;\\n        }\\n        array.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/Funding.sol\": {\r\n        \"Funding\": \"0xc66696dfc137a7399a26355e058c916fc9c0ddb1\"\r\n      },\r\n      \"contracts/libraries/LinearStaking.sol\": {\r\n        \"LinearStaking\": \"0xe4deebfeb1b0b4b6bdccd0a1aeba5a96b0bb39fd\"\r\n      },\r\n      \"contracts/libraries/PeriodStaking.sol\": {\r\n        \"PeriodStaking\": \"0x6935fd0ea533f0bd00313e21ba6cc00a3941c9f8\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lendingPoolToken\",\"type\":\"address\"}],\"name\":\"LendingPoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"addFundingRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"calculateRewardsLinear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPeriodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectedTotalRewards\",\"type\":\"uint256\"}],\"name\":\"calculateWalletRewardsPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPeriodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldPeriod\",\"type\":\"uint256\"}],\"name\":\"calculateWalletRewardsYieldPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingRequestId\",\"type\":\"uint256\"}],\"name\":\"cancelFundingRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPeriodId\",\"type\":\"uint256\"}],\"name\":\"claimRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"claimRewardsLinear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPeriodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"depositRewardPeriodRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardsLinear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundingTokenAmount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getAvailableLinearStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingRequestId\",\"type\":\"uint256\"}],\"name\":\"getFundingRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFilled\",\"type\":\"uint256\"},{\"internalType\":\"enum Funding.FundingRequestState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"}],\"internalType\":\"struct Funding.FundingRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingRequestIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFundingTokenChainLinkFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenFundingRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFilled\",\"type\":\"uint256\"},{\"internalType\":\"enum Funding.FundingRequestState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"}],\"internalType\":\"struct Funding.FundingRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriodStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPeriodId\",\"type\":\"uint256\"}],\"name\":\"getRewardPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakingScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct PeriodStaking.RewardPeriod\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPeriods\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakingScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct PeriodStaking.RewardPeriod[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getRewardsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakableTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakableToken\",\"type\":\"address\"}],\"name\":\"getStakedBalanceLinear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getWalletRewardPeriodStakingScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletStakedAmountRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lendingPoolId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lendingPoolTokenSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBorrower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isPrimaryFunder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolToken\",\"outputs\":[{\"internalType\":\"contract LendingPoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"setBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"setDisablePrimaryFunderCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodEnd\",\"type\":\"uint256\"}],\"name\":\"setEndRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"setFundingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"chainLinkFeed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertChainLinkFeedAnswer\",\"type\":\"bool\"}],\"name\":\"setFundingTokenChainLinkFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primaryFunder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"setPrimaryFunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRewardPeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardPeriodRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokensPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardTokensPerBlockLinear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"rewardsLocked\",\"type\":\"bool\"}],\"name\":\"setRewardsLockedLinear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakableToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeLinear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNextRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodStart\",\"type\":\"uint256\"}],\"name\":\"startNextRewardPeriodCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLinear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LendingPool", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}