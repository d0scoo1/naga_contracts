{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/tokenization/StableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {DebtTokenBase} from './base/DebtTokenBase.sol';\\r\\nimport {MathUtils} from '../libraries/math/MathUtils.sol';\\r\\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\\r\\nimport {IStableDebtToken} from '../../interfaces/IStableDebtToken.sol';\\r\\nimport {ILendingPool} from '../../interfaces/ILendingPool.sol';\\r\\nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';\\r\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\r\\n\\r\\n/**\\r\\n * @title StableDebtToken\\r\\n * @notice Implements a stable debt token to track the borrowing positions of users\\r\\n * at stable rate mode\\r\\n * @author Aave\\r\\n **/\\r\\ncontract StableDebtToken is IStableDebtToken, DebtTokenBase {\\r\\n  using WadRayMath for uint256;\\r\\n\\r\\n  uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\r\\n\\r\\n  uint256 internal _avgStableRate;\\r\\n  mapping(address => uint40) internal _timestamps;\\r\\n  mapping(address => uint256) internal _usersStableRate;\\r\\n  uint40 internal _totalSupplyTimestamp;\\r\\n\\r\\n  ILendingPool internal _pool;\\r\\n  address internal _underlyingAsset;\\r\\n  IAaveIncentivesController internal _incentivesController;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the debt token.\\r\\n   * @param pool The address of the lending pool where this aToken will be used\\r\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n   * @param incentivesController The smart contract managing potential incentives distribution\\r\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\r\\n   * @param debtTokenName The name of the token\\r\\n   * @param debtTokenSymbol The symbol of the token\\r\\n   */\\r\\n  function initialize(\\r\\n    ILendingPool pool,\\r\\n    address underlyingAsset,\\r\\n    IAaveIncentivesController incentivesController,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string memory debtTokenName,\\r\\n    string memory debtTokenSymbol,\\r\\n    bytes calldata params\\r\\n  ) public override initializer {\\r\\n    _setName(debtTokenName);\\r\\n    _setSymbol(debtTokenSymbol);\\r\\n    _setDecimals(debtTokenDecimals);\\r\\n\\r\\n    _pool = pool;\\r\\n    _underlyingAsset = underlyingAsset;\\r\\n    _incentivesController = incentivesController;\\r\\n\\r\\n    emit Initialized(\\r\\n      underlyingAsset,\\r\\n      address(pool),\\r\\n      address(incentivesController),\\r\\n      debtTokenDecimals,\\r\\n      debtTokenName,\\r\\n      debtTokenSymbol,\\r\\n      params\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the revision of the stable debt token implementation\\r\\n   * @return The debt token implementation revision\\r\\n   **/\\r\\n  function getRevision() internal pure virtual override returns (uint256) {\\r\\n    return DEBT_TOKEN_REVISION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the average stable rate across all the stable rate debt\\r\\n   * @return the average stable rate\\r\\n   **/\\r\\n  function getAverageStableRate() external view virtual override returns (uint256) {\\r\\n    return _avgStableRate;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the timestamp of the last user action\\r\\n   * @return The last update timestamp\\r\\n   **/\\r\\n  function getUserLastUpdated(address user) external view virtual override returns (uint40) {\\r\\n    return _timestamps[user];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the stable rate of the user\\r\\n   * @param user The address of the user\\r\\n   * @return The stable rate of user\\r\\n   **/\\r\\n  function getUserStableRate(address user) external view virtual override returns (uint256) {\\r\\n    return _usersStableRate[user];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the current user debt balance\\r\\n   * @return The accumulated debt of the user\\r\\n   **/\\r\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n    uint256 accountBalance = super.balanceOf(account);\\r\\n    uint256 stableRate = _usersStableRate[account];\\r\\n    if (accountBalance == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 cumulatedInterest =\\r\\n      MathUtils.calculateCompoundedInterest(stableRate, _timestamps[account]);\\r\\n    return accountBalance.rayMul(cumulatedInterest);\\r\\n  }\\r\\n\\r\\n  struct MintLocalVars {\\r\\n    uint256 previousSupply;\\r\\n    uint256 nextSupply;\\r\\n    uint256 amountInRay;\\r\\n    uint256 newStableRate;\\r\\n    uint256 currentAvgStableRate;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints debt token to the `onBehalfOf` address.\\r\\n   * -  Only callable by the LendingPool\\r\\n   * - The resulting rate is the weighted average between the rate of the new debt\\r\\n   * and the rate of the previous debt\\r\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\r\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\r\\n   * @param onBehalfOf The address receiving the debt tokens\\r\\n   * @param amount The amount of debt tokens to mint\\r\\n   * @param rate The rate of the debt being minted\\r\\n   **/\\r\\n  function mint(\\r\\n    address user,\\r\\n    address onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 rate\\r\\n  ) external override onlyLendingPool returns (bool) {\\r\\n    MintLocalVars memory vars;\\r\\n\\r\\n    if (user != onBehalfOf) {\\r\\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\\r\\n    }\\r\\n\\r\\n    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(onBehalfOf);\\r\\n\\r\\n    vars.previousSupply = totalSupply();\\r\\n    vars.currentAvgStableRate = _avgStableRate;\\r\\n    vars.nextSupply = _totalSupply = vars.previousSupply.add(amount);\\r\\n\\r\\n    vars.amountInRay = amount.wadToRay();\\r\\n\\r\\n    vars.newStableRate = _usersStableRate[onBehalfOf]\\r\\n      .rayMul(currentBalance.wadToRay())\\r\\n      .add(vars.amountInRay.rayMul(rate))\\r\\n      .rayDiv(currentBalance.add(amount).wadToRay());\\r\\n\\r\\n    require(vars.newStableRate <= type(uint128).max, Errors.SDT_STABLE_DEBT_OVERFLOW);\\r\\n    _usersStableRate[onBehalfOf] = vars.newStableRate;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    _totalSupplyTimestamp = _timestamps[onBehalfOf] = uint40(block.timestamp);\\r\\n\\r\\n    // Calculates the updated average stable rate\\r\\n    vars.currentAvgStableRate = _avgStableRate = vars\\r\\n      .currentAvgStableRate\\r\\n      .rayMul(vars.previousSupply.wadToRay())\\r\\n      .add(rate.rayMul(vars.amountInRay))\\r\\n      .rayDiv(vars.nextSupply.wadToRay());\\r\\n\\r\\n    _mint(onBehalfOf, amount.add(balanceIncrease), vars.previousSupply);\\r\\n\\r\\n    emit Transfer(address(0), onBehalfOf, amount);\\r\\n\\r\\n    emit Mint(\\r\\n      user,\\r\\n      onBehalfOf,\\r\\n      amount,\\r\\n      currentBalance,\\r\\n      balanceIncrease,\\r\\n      vars.newStableRate,\\r\\n      vars.currentAvgStableRate,\\r\\n      vars.nextSupply\\r\\n    );\\r\\n\\r\\n    return currentBalance == 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burns debt of `user`\\r\\n   * @param user The address of the user getting his debt burned\\r\\n   * @param amount The amount of debt tokens getting burned\\r\\n   **/\\r\\n  function burn(address user, uint256 amount) external override onlyLendingPool {\\r\\n    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(user);\\r\\n\\r\\n    uint256 previousSupply = totalSupply();\\r\\n    uint256 newAvgStableRate = 0;\\r\\n    uint256 nextSupply = 0;\\r\\n    uint256 userStableRate = _usersStableRate[user];\\r\\n\\r\\n    // Since the total supply and each single user debt accrue separately,\\r\\n    // there might be accumulation errors so that the last borrower repaying\\r\\n    // mght actually try to repay more than the available debt supply.\\r\\n    // In this case we simply set the total supply and the avg stable rate to 0\\r\\n    if (previousSupply <= amount) {\\r\\n      _avgStableRate = 0;\\r\\n      _totalSupply = 0;\\r\\n    } else {\\r\\n      nextSupply = _totalSupply = previousSupply.sub(amount);\\r\\n      uint256 firstTerm = _avgStableRate.rayMul(previousSupply.wadToRay());\\r\\n      uint256 secondTerm = userStableRate.rayMul(amount.wadToRay());\\r\\n\\r\\n      // For the same reason described above, when the last user is repaying it might\\r\\n      // happen that user rate * user balance > avg rate * total supply. In that case,\\r\\n      // we simply set the avg rate to 0\\r\\n      if (secondTerm >= firstTerm) {\\r\\n        newAvgStableRate = _avgStableRate = _totalSupply = 0;\\r\\n      } else {\\r\\n        newAvgStableRate = _avgStableRate = firstTerm.sub(secondTerm).rayDiv(nextSupply.wadToRay());\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (amount == currentBalance) {\\r\\n      _usersStableRate[user] = 0;\\r\\n      _timestamps[user] = 0;\\r\\n    } else {\\r\\n      //solium-disable-next-line\\r\\n      _timestamps[user] = uint40(block.timestamp);\\r\\n    }\\r\\n    //solium-disable-next-line\\r\\n    _totalSupplyTimestamp = uint40(block.timestamp);\\r\\n\\r\\n    if (balanceIncrease > amount) {\\r\\n      uint256 amountToMint = balanceIncrease.sub(amount);\\r\\n      _mint(user, amountToMint, previousSupply);\\r\\n      emit Mint(\\r\\n        user,\\r\\n        user,\\r\\n        amountToMint,\\r\\n        currentBalance,\\r\\n        balanceIncrease,\\r\\n        userStableRate,\\r\\n        newAvgStableRate,\\r\\n        nextSupply\\r\\n      );\\r\\n    } else {\\r\\n      uint256 amountToBurn = amount.sub(balanceIncrease);\\r\\n      _burn(user, amountToBurn, previousSupply);\\r\\n      emit Burn(user, amountToBurn, currentBalance, balanceIncrease, newAvgStableRate, nextSupply);\\r\\n    }\\r\\n\\r\\n    emit Transfer(user, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the increase in balance since the last user interaction\\r\\n   * @param user The address of the user for which the interest is being accumulated\\r\\n   * @return The previous principal balance, the new principal balance and the balance increase\\r\\n   **/\\r\\n  function _calculateBalanceIncrease(address user)\\r\\n    internal\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    uint256 previousPrincipalBalance = super.balanceOf(user);\\r\\n\\r\\n    if (previousPrincipalBalance == 0) {\\r\\n      return (0, 0, 0);\\r\\n    }\\r\\n\\r\\n    // Calculation of the accrued interest since the last accumulation\\r\\n    uint256 balanceIncrease = balanceOf(user).sub(previousPrincipalBalance);\\r\\n\\r\\n    return (\\r\\n      previousPrincipalBalance,\\r\\n      previousPrincipalBalance.add(balanceIncrease),\\r\\n      balanceIncrease\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the principal and total supply, the average borrow rate and the last supply update timestamp\\r\\n   **/\\r\\n  function getSupplyData()\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint40\\r\\n    )\\r\\n  {\\r\\n    uint256 avgRate = _avgStableRate;\\r\\n    return (super.totalSupply(), _calcTotalSupply(avgRate), avgRate, _totalSupplyTimestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the the total supply and the average stable rate\\r\\n   **/\\r\\n  function getTotalSupplyAndAvgRate() public view override returns (uint256, uint256) {\\r\\n    uint256 avgRate = _avgStableRate;\\r\\n    return (_calcTotalSupply(avgRate), avgRate);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total supply\\r\\n   **/\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return _calcTotalSupply(_avgStableRate);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the timestamp at which the total supply was updated\\r\\n   **/\\r\\n  function getTotalSupplyLastUpdated() public view override returns (uint40) {\\r\\n    return _totalSupplyTimestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the principal debt balance of the user from\\r\\n   * @param user The user's address\\r\\n   * @return The debt balance of the user since the last burn/mint action\\r\\n   **/\\r\\n  function principalBalanceOf(address user) external view virtual override returns (uint256) {\\r\\n    return super.balanceOf(user);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n   **/\\r\\n  function UNDERLYING_ASSET_ADDRESS() public view returns (address) {\\r\\n    return _underlyingAsset;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the lending pool where this aToken is used\\r\\n   **/\\r\\n  function POOL() public view returns (ILendingPool) {\\r\\n    return _pool;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the incentives controller contract\\r\\n   **/\\r\\n  function getIncentivesController() external view override returns (IAaveIncentivesController) {\\r\\n    return _getIncentivesController();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev For internal usage in the logic of the parent contracts\\r\\n   **/\\r\\n  function _getIncentivesController() internal view override returns (IAaveIncentivesController) {\\r\\n    return _incentivesController;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev For internal usage in the logic of the parent contracts\\r\\n   **/\\r\\n  function _getUnderlyingAssetAddress() internal view override returns (address) {\\r\\n    return _underlyingAsset;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev For internal usage in the logic of the parent contracts\\r\\n   **/\\r\\n  function _getLendingPool() internal view override returns (ILendingPool) {\\r\\n    return _pool;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the total supply\\r\\n   * @param avgRate The average rate at which the total supply increases\\r\\n   * @return The debt balance of the user since the last burn/mint action\\r\\n   **/\\r\\n  function _calcTotalSupply(uint256 avgRate) internal view virtual returns (uint256) {\\r\\n    uint256 principalSupply = super.totalSupply();\\r\\n\\r\\n    if (principalSupply == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 cumulatedInterest =\\r\\n      MathUtils.calculateCompoundedInterest(avgRate, _totalSupplyTimestamp);\\r\\n\\r\\n    return principalSupply.rayMul(cumulatedInterest);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints stable debt tokens to an user\\r\\n   * @param account The account receiving the debt tokens\\r\\n   * @param amount The amount being minted\\r\\n   * @param oldTotalSupply the total supply before the minting event\\r\\n   **/\\r\\n  function _mint(\\r\\n    address account,\\r\\n    uint256 amount,\\r\\n    uint256 oldTotalSupply\\r\\n  ) internal {\\r\\n    uint256 oldAccountBalance = _balances[account];\\r\\n    _balances[account] = oldAccountBalance.add(amount);\\r\\n\\r\\n    if (address(_incentivesController) != address(0)) {\\r\\n      _incentivesController.handleAction(account, oldTotalSupply, oldAccountBalance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Burns stable debt tokens of an user\\r\\n   * @param account The user getting his debt burned\\r\\n   * @param amount The amount being burned\\r\\n   * @param oldTotalSupply The total supply before the burning event\\r\\n   **/\\r\\n  function _burn(\\r\\n    address account,\\r\\n    uint256 amount,\\r\\n    uint256 oldTotalSupply\\r\\n  ) internal {\\r\\n    uint256 oldAccountBalance = _balances[account];\\r\\n    _balances[account] = oldAccountBalance.sub(amount, Errors.SDT_BURN_EXCEEDS_BALANCE);\\r\\n\\r\\n    if (address(_incentivesController) != address(0)) {\\r\\n      _incentivesController.handleAction(account, oldTotalSupply, oldAccountBalance);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/DebtTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {ILendingPool} from '../../../interfaces/ILendingPool.sol';\\r\\nimport {ICreditDelegationToken} from '../../../interfaces/ICreditDelegationToken.sol';\\r\\nimport {\\r\\n  VersionedInitializable\\r\\n} from '../../libraries/aave-upgradeability/VersionedInitializable.sol';\\r\\nimport {IncentivizedERC20} from '../IncentivizedERC20.sol';\\r\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\r\\n\\r\\n/**\\r\\n * @title DebtTokenBase\\r\\n * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken\\r\\n * @author Aave\\r\\n */\\r\\n\\r\\nabstract contract DebtTokenBase is\\r\\n  IncentivizedERC20('DEBTTOKEN_IMPL', 'DEBTTOKEN_IMPL', 0),\\r\\n  VersionedInitializable,\\r\\n  ICreditDelegationToken\\r\\n{\\r\\n  mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\r\\n\\r\\n  /**\\r\\n   * @dev Only lending pool can call functions marked by this modifier\\r\\n   **/\\r\\n  modifier onlyLendingPool {\\r\\n    require(_msgSender() == address(_getLendingPool()), Errors.CT_CALLER_MUST_BE_LENDING_POOL);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev delegates borrowing power to a user on the specific debt token\\r\\n   * @param delegatee the address receiving the delegated borrowing power\\r\\n   * @param amount the maximum amount being delegated. Delegation will still\\r\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\r\\n   * force a delegator HF to go below 1)\\r\\n   **/\\r\\n  function approveDelegation(address delegatee, uint256 amount) external override {\\r\\n    _borrowAllowances[_msgSender()][delegatee] = amount;\\r\\n    emit BorrowAllowanceDelegated(_msgSender(), delegatee, _getUnderlyingAssetAddress(), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev returns the borrow allowance of the user\\r\\n   * @param fromUser The user to giving allowance\\r\\n   * @param toUser The user to give allowance to\\r\\n   * @return the current allowance of toUser\\r\\n   **/\\r\\n  function borrowAllowance(address fromUser, address toUser)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _borrowAllowances[fromUser][toUser];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Being non transferrable, the debt token does not implement any of the\\r\\n   * standard ERC20 functions for transfer and allowance.\\r\\n   **/\\r\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n    recipient;\\r\\n    amount;\\r\\n    revert('TRANSFER_NOT_SUPPORTED');\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    owner;\\r\\n    spender;\\r\\n    revert('ALLOWANCE_NOT_SUPPORTED');\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n    spender;\\r\\n    amount;\\r\\n    revert('APPROVAL_NOT_SUPPORTED');\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) public virtual override returns (bool) {\\r\\n    sender;\\r\\n    recipient;\\r\\n    amount;\\r\\n    revert('TRANSFER_NOT_SUPPORTED');\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    spender;\\r\\n    addedValue;\\r\\n    revert('ALLOWANCE_NOT_SUPPORTED');\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    spender;\\r\\n    subtractedValue;\\r\\n    revert('ALLOWANCE_NOT_SUPPORTED');\\r\\n  }\\r\\n\\r\\n  function _decreaseBorrowAllowance(\\r\\n    address delegator,\\r\\n    address delegatee,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    uint256 newAllowance =\\r\\n      _borrowAllowances[delegator][delegatee].sub(amount, Errors.BORROW_ALLOWANCE_NOT_ENOUGH);\\r\\n\\r\\n    _borrowAllowances[delegator][delegatee] = newAllowance;\\r\\n\\r\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _getUnderlyingAssetAddress(), newAllowance);\\r\\n  }\\r\\n\\r\\n  function _getUnderlyingAssetAddress() internal view virtual returns (address);\\r\\n\\r\\n  function _getLendingPool() internal view virtual returns (ILendingPool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\r\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\r\\n\\r\\ninterface ILendingPool {\\r\\n  /**\\r\\n   * @dev Emitted on deposit()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address initiating the deposit\\r\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\r\\n   * @param amount The amount deposited\\r\\n   * @param referral The referral code used\\r\\n   **/\\r\\n  event Deposit(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referral\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on withdraw()\\r\\n   * @param reserve The address of the underlyng asset being withdrawn\\r\\n   * @param user The address initiating the withdrawal, owner of aTokens\\r\\n   * @param to Address that will receive the underlying\\r\\n   * @param amount The amount to be withdrawn\\r\\n   **/\\r\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n   * @param reserve The address of the underlying asset being borrowed\\r\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n   * initiator of the transaction on flashLoan()\\r\\n   * @param onBehalfOf The address that will be getting the debt\\r\\n   * @param amount The amount borrowed out\\r\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n   * @param borrowRate The numeric rate at which the user has borrowed\\r\\n   * @param referral The referral code used\\r\\n   **/\\r\\n  event Borrow(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 borrowRateMode,\\r\\n    uint256 borrowRate,\\r\\n    uint16 indexed referral\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on repay()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n   * @param amount The amount repaid\\r\\n   **/\\r\\n  event Repay(\\r\\n    address indexed reserve,\\r\\n    address indexed user,\\r\\n    address indexed repayer,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on swapBorrowRateMode()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user swapping his rate mode\\r\\n   * @param rateMode The rate mode that the user wants to swap to\\r\\n   **/\\r\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   **/\\r\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user enabling the usage as collateral\\r\\n   **/\\r\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on rebalanceStableBorrowRate()\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param user The address of the user for which the rebalance has been executed\\r\\n   **/\\r\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on flashLoan()\\r\\n   * @param target The address of the flash loan receiver contract\\r\\n   * @param initiator The address initiating the flash loan\\r\\n   * @param asset The address of the asset being flash borrowed\\r\\n   * @param amount The amount flash borrowed\\r\\n   * @param premium The fee flash borrowed\\r\\n   * @param referralCode The referral code used\\r\\n   **/\\r\\n  event FlashLoan(\\r\\n    address indexed target,\\r\\n    address indexed initiator,\\r\\n    address indexed asset,\\r\\n    uint256 amount,\\r\\n    uint256 premium,\\r\\n    uint16 referralCode\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pause is triggered.\\r\\n   */\\r\\n  event Paused();\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pause is lifted.\\r\\n   */\\r\\n  event Unpaused();\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\r\\n   * LendingPoolCollateral manager using a DELEGATECALL\\r\\n   * This allows to have the events in the generated ABI for LendingPool.\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\r\\n   * @param liquidator The address of the liquidator\\r\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  event LiquidationCall(\\r\\n    address indexed collateralAsset,\\r\\n    address indexed debtAsset,\\r\\n    address indexed user,\\r\\n    uint256 debtToCover,\\r\\n    uint256 liquidatedCollateralAmount,\\r\\n    address liquidator,\\r\\n    bool receiveAToken\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\r\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\r\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\r\\n   * gets added to the LendingPool ABI\\r\\n   * @param reserve The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The new liquidity rate\\r\\n   * @param stableBorrowRate The new stable borrow rate\\r\\n   * @param variableBorrowRate The new variable borrow rate\\r\\n   * @param liquidityIndex The new liquidity index\\r\\n   * @param variableBorrowIndex The new variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed reserve,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 stableBorrowRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to deposit\\r\\n   * @param amount The amount to be deposited\\r\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n   *   is a different wallet\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function deposit(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n   * @param asset The address of the underlying asset to withdraw\\r\\n   * @param amount The underlying amount to be withdrawn\\r\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n   * @param asset The address of the underlying asset to borrow\\r\\n   * @param amount The amount to be borrowed\\r\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n   * if he has been given credit delegation allowance\\r\\n   **/\\r\\n  function borrow(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 interestRateMode,\\r\\n    uint16 referralCode,\\r\\n    address onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repay(\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 rateMode,\\r\\n    address onBehalfOf\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param rateMode The rate mode that the user wants to swap to\\r\\n   **/\\r\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n   * - Users can be rebalanced if the following conditions are satisfied:\\r\\n   *     1. Usage ratio is above 95%\\r\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\r\\n   *        borrowed at a stable rate and depositors are not earning enough\\r\\n   * @param asset The address of the underlying asset borrowed\\r\\n   * @param user The address of the user to be rebalanced\\r\\n   **/\\r\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\r\\n   * @param asset The address of the underlying asset deposited\\r\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\r\\n   **/\\r\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n   * @param user The address of the borrower getting liquidated\\r\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n   * to receive the underlying collateral asset directly\\r\\n   **/\\r\\n  function liquidationCall(\\r\\n    address collateralAsset,\\r\\n    address debtAsset,\\r\\n    address user,\\r\\n    uint256 debtToCover,\\r\\n    bool receiveAToken\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n   * as long as the amount taken plus a fee is returned.\\r\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\r\\n   * For further details please visit https://developers.aave.com\\r\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\r\\n   * @param assets The addresses of the assets being flash-borrowed\\r\\n   * @param amounts The amounts amounts being flash-borrowed\\r\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\r\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n   * @param params Variadic packed params to pass to the receiver as extra information\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata modes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the user account data across all the reserves\\r\\n   * @param user The address of the user\\r\\n   * @return totalCollateralETH the total collateral in ETH of the user\\r\\n   * @return totalDebtETH the total debt in ETH of the user\\r\\n   * @return availableBorrowsETH the borrowing power left of the user\\r\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\r\\n   * @return ltv the loan to value of the user\\r\\n   * @return healthFactor the current health factor of the user\\r\\n   **/\\r\\n  function getUserAccountData(address user)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 totalCollateralETH,\\r\\n      uint256 totalDebtETH,\\r\\n      uint256 availableBorrowsETH,\\r\\n      uint256 currentLiquidationThreshold,\\r\\n      uint256 ltv,\\r\\n      uint256 healthFactor\\r\\n    );\\r\\n\\r\\n  function initReserve(\\r\\n    address reserve,\\r\\n    address aTokenAddress,\\r\\n    address stableDebtAddress,\\r\\n    address variableDebtAddress,\\r\\n    address interestRateStrategyAddress\\r\\n  ) external;\\r\\n\\r\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\r\\n    external;\\r\\n\\r\\n  function setConfiguration(address reserve, uint256 configuration) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The configuration of the reserve\\r\\n   **/\\r\\n  function getConfiguration(address asset)\\r\\n    external\\r\\n    view\\r\\n    returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the configuration of the user across all the reserves\\r\\n   * @param user The user address\\r\\n   * @return The configuration of the user\\r\\n   **/\\r\\n  function getUserConfiguration(address user)\\r\\n    external\\r\\n    view\\r\\n    returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized income normalized income of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized variable debt per unit of asset\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the state and configuration of the reserve\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @return The state of the reserve\\r\\n   **/\\r\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n  function finalizeTransfer(\\r\\n    address asset,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    uint256 balanceFromAfter,\\r\\n    uint256 balanceToBefore\\r\\n  ) external;\\r\\n\\r\\n  function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\r\\n\\r\\n  function setPause(bool val) external;\\r\\n\\r\\n  function paused() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @title LendingPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n * - Owned by the Aave Governance\\r\\n * @author Aave\\r\\n **/\\r\\ninterface ILendingPoolAddressesProvider {\\r\\n  event MarketIdSet(string newMarketId);\\r\\n  event LendingPoolUpdated(address indexed newAddress);\\r\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n  event EmergencyAdminUpdated(address indexed newAddress);\\r\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\r\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\r\\n  event PriceOracleUpdated(address indexed newAddress);\\r\\n  event LendingRateOracleUpdated(address indexed newAddress);\\r\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\r\\n\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  function setMarketId(string calldata marketId) external;\\r\\n\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\r\\n\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  function getLendingPool() external view returns (address);\\r\\n\\r\\n  function setLendingPoolImpl(address pool) external;\\r\\n\\r\\n  function getLendingPoolConfigurator() external view returns (address);\\r\\n\\r\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\r\\n\\r\\n  function getLendingPoolCollateralManager() external view returns (address);\\r\\n\\r\\n  function setLendingPoolCollateralManager(address manager) external;\\r\\n\\r\\n  function getPoolAdmin() external view returns (address);\\r\\n\\r\\n  function setPoolAdmin(address admin) external;\\r\\n\\r\\n  function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n  function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n  function getPriceOracle() external view returns (address);\\r\\n\\r\\n  function setPriceOracle(address priceOracle) external;\\r\\n\\r\\n  function getLendingRateOracle() external view returns (address);\\r\\n\\r\\n  function setLendingRateOracle(address lendingRateOracle) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //tokens addresses\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint8 id;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: Reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICreditDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface ICreditDelegationToken {\\r\\n  event BorrowAllowanceDelegated(\\r\\n    address indexed fromUser,\\r\\n    address indexed toUser,\\r\\n    address asset,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev delegates borrowing power to a user on the specific debt token\\r\\n   * @param delegatee the address receiving the delegated borrowing power\\r\\n   * @param amount the maximum amount being delegated. Delegation will still\\r\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\r\\n   * force a delegator HF to go below 1)\\r\\n   **/\\r\\n  function approveDelegation(address delegatee, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the borrow allowance of the user\\r\\n   * @param fromUser The user to giving allowance\\r\\n   * @param toUser The user to give allowance to\\r\\n   * @return the current allowance of toUser\\r\\n   **/\\r\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @title VersionedInitializable\\r\\n *\\r\\n * @dev Helper contract to implement initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n *\\r\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\r\\n */\\r\\nabstract contract VersionedInitializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  uint256 private lastInitializedRevision = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    uint256 revision = getRevision();\\r\\n    require(\\r\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\r\\n      'Contract instance has already been initialized'\\r\\n    );\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      lastInitializedRevision = revision;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev returns the revision number of the contract\\r\\n   * Needs to be defined in the inherited class as a constant.\\r\\n   **/\\r\\n  function getRevision() internal pure virtual returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if and only if the function is running in the constructor\\r\\n   **/\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    uint256 cs;\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      cs := extcodesize(address())\\r\\n    }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/IncentivizedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {Context} from '../../dependencies/openzeppelin/contracts/Context.sol';\\r\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {IERC20Detailed} from '../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\r\\nimport {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';\\r\\nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';\\r\\n\\r\\n/**\\r\\n * @title ERC20\\r\\n * @notice Basic ERC20 implementation\\r\\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\\r\\n **/\\r\\nabstract contract IncentivizedERC20 is Context, IERC20, IERC20Detailed {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping(address => uint256) internal _balances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n  uint256 internal _totalSupply;\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n  uint8 private _decimals;\\r\\n\\r\\n  constructor(\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    uint8 decimals\\r\\n  ) public {\\r\\n    _name = name;\\r\\n    _symbol = symbol;\\r\\n    _decimals = decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The name of the token\\r\\n   **/\\r\\n  function name() public view override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The symbol of the token\\r\\n   **/\\r\\n  function symbol() public view override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The decimals of the token\\r\\n   **/\\r\\n  function decimals() public view override returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The total supply of the token\\r\\n   **/\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The balance of the token\\r\\n   **/\\r\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Abstract function implemented by the child aToken/debtToken. \\r\\n   * Done this way in order to not break compatibility with previous versions of aTokens/debtTokens\\r\\n   **/\\r\\n  function _getIncentivesController() internal view virtual returns(IAaveIncentivesController);\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a transfer of tokens from _msgSender() to recipient\\r\\n   * @param recipient The recipient of the tokens\\r\\n   * @param amount The amount of tokens being transferred\\r\\n   * @return `true` if the transfer succeeds, `false` otherwise\\r\\n   **/\\r\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    emit Transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the allowance of spender on the tokens owned by owner\\r\\n   * @param owner The owner of the tokens\\r\\n   * @param spender The user allowed to spend the owner's tokens\\r\\n   * @return The amount of owner's tokens spender is allowed to spend\\r\\n   **/\\r\\n  function allowance(address owner, address spender)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows `spender` to spend the tokens owned by _msgSender()\\r\\n   * @param spender The user allowed to spend _msgSender() tokens\\r\\n   * @return `true`\\r\\n   **/\\r\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a transfer of token from sender to recipient, if _msgSender() is allowed to do so\\r\\n   * @param sender The owner of the tokens\\r\\n   * @param recipient The recipient of the tokens\\r\\n   * @param amount The amount of tokens being transferred\\r\\n   * @return `true` if the transfer succeeds, `false` otherwise\\r\\n   **/\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) public virtual override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(\\r\\n      sender,\\r\\n      _msgSender(),\\r\\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\\r\\n    );\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Increases the allowance of spender to spend _msgSender() tokens\\r\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\r\\n   * @param addedValue The amount being added to the allowance\\r\\n   * @return `true`\\r\\n   **/\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Decreases the allowance of spender to spend _msgSender() tokens\\r\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\r\\n   * @param subtractedValue The amount being subtracted to the allowance\\r\\n   * @return `true`\\r\\n   **/\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    _approve(\\r\\n      _msgSender(),\\r\\n      spender,\\r\\n      _allowances[_msgSender()][spender].sub(\\r\\n        subtractedValue,\\r\\n        'ERC20: decreased allowance below zero'\\r\\n      )\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _transfer(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\r\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\r\\n\\r\\n    _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n    uint256 oldSenderBalance = _balances[sender];\\r\\n    _balances[sender] = oldSenderBalance.sub(amount, 'ERC20: transfer amount exceeds balance');\\r\\n    uint256 oldRecipientBalance = _balances[recipient];\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n\\r\\n    if (address(_getIncentivesController()) != address(0)) {\\r\\n      uint256 currentTotalSupply = _totalSupply;\\r\\n      _getIncentivesController().handleAction(sender, currentTotalSupply, oldSenderBalance);\\r\\n      if (sender != recipient) {\\r\\n        _getIncentivesController().handleAction(recipient, currentTotalSupply, oldRecipientBalance);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), 'ERC20: mint to the zero address');\\r\\n\\r\\n    _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n    uint256 oldTotalSupply = _totalSupply;\\r\\n    _totalSupply = oldTotalSupply.add(amount);\\r\\n\\r\\n    uint256 oldAccountBalance = _balances[account];\\r\\n    _balances[account] = oldAccountBalance.add(amount);\\r\\n\\r\\n    if (address(_getIncentivesController()) != address(0)) {\\r\\n      _getIncentivesController().handleAction(account, oldTotalSupply, oldAccountBalance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), 'ERC20: burn from the zero address');\\r\\n\\r\\n    _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n    uint256 oldTotalSupply = _totalSupply;\\r\\n    _totalSupply = oldTotalSupply.sub(amount);\\r\\n\\r\\n    uint256 oldAccountBalance = _balances[account];\\r\\n    _balances[account] = oldAccountBalance.sub(amount, 'ERC20: burn amount exceeds balance');\\r\\n\\r\\n    if (address(_getIncentivesController()) != address(0)) {\\r\\n      _getIncentivesController().handleAction(account, oldTotalSupply, oldAccountBalance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\r\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function _setName(string memory newName) internal {\\r\\n    _name = newName;\\r\\n  }\\r\\n\\r\\n  function _setSymbol(string memory newSymbol) internal {\\r\\n    _symbol = newSymbol;\\r\\n  }\\r\\n\\r\\n  function _setDecimals(uint8 newDecimals) internal {\\r\\n    _decimals = newDecimals;\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address payable) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {IERC20} from './IERC20.sol';\\r\\n\\r\\ninterface IERC20Detailed is IERC20 {\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a, 'SafeMath: addition overflow');\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b <= a, errorMessage);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return div(a, b, 'SafeMath: division by zero');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    // Solidity only automatically asserts when dividing by 0\\r\\n    require(b > 0, errorMessage);\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return mod(a, b, 'SafeMath: modulo by zero');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts with custom message when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b != 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IAaveIncentivesController {\\r\\n  event RewardsAccrued(address indexed user, uint256 amount);\\r\\n\\r\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n  event RewardsClaimed(\\r\\n    address indexed user,\\r\\n    address indexed to,\\r\\n    address indexed claimer,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event ClaimerSet(address indexed user, address indexed claimer);\\r\\n\\r\\n  /*\\r\\n   * @dev Returns the configuration of the distribution for a certain asset\\r\\n   * @param asset The address of the reference asset of the distribution\\r\\n   * @return The asset index, the emission per second and the last updated timestamp\\r\\n   **/\\r\\n  function getAssetData(address asset)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\r\\n   * @param user The address of the user\\r\\n   * @param claimer The address of the claimer\\r\\n   */\\r\\n  function setClaimer(address user, address claimer) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\r\\n   * @param user The address of the user\\r\\n   * @return The claimer address\\r\\n   */\\r\\n  function getClaimer(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Configure assets for a certain rewards emission\\r\\n   * @param assets The assets to incentivize\\r\\n   * @param emissionsPerSecond The emission for each asset\\r\\n   */\\r\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\r\\n    external;\\r\\n\\r\\n  /**\\r\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\r\\n   * @param asset The address of the user\\r\\n   * @param userBalance The balance of the user of the asset in the lending pool\\r\\n   * @param totalSupply The total supply of the asset in the lending pool\\r\\n   **/\\r\\n  function handleAction(\\r\\n    address asset,\\r\\n    uint256 userBalance,\\r\\n    uint256 totalSupply\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\r\\n   * @param user The address of the user\\r\\n   * @return The rewards\\r\\n   **/\\r\\n  function getRewardsBalance(address[] calldata assets, address user)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\r\\n   * @param amount Amount of rewards to claim\\r\\n   * @param to Address that will be receiving the rewards\\r\\n   * @return Rewards claimed\\r\\n   **/\\r\\n  function claimRewards(\\r\\n    address[] calldata assets,\\r\\n    uint256 amount,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\r\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\r\\n   * @param amount Amount of rewards to claim\\r\\n   * @param user Address to check and claim rewards\\r\\n   * @param to Address that will be receiving the rewards\\r\\n   * @return Rewards claimed\\r\\n   **/\\r\\n  function claimRewardsOnBehalf(\\r\\n    address[] calldata assets,\\r\\n    uint256 amount,\\r\\n    address user,\\r\\n    address to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev returns the unclaimed rewards of the user\\r\\n   * @param user the address of the user\\r\\n   * @return the unclaimed user rewards\\r\\n   */\\r\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev returns the unclaimed rewards of the user\\r\\n   * @param user the address of the user\\r\\n   * @param asset The asset to incentivize\\r\\n   * @return the user index for the asset\\r\\n   */\\r\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\r\\n   */\\r\\n  function REWARD_TOKEN() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\r\\n   */\\r\\n  function PRECISION() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the distribution end timestamp of the emissions\\r\\n   */\\r\\n  function DISTRIBUTION_END() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aave\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\r\\n * @dev Error messages prefix glossary:\\r\\n *  - VL = ValidationLogic\\r\\n *  - MATH = Math libraries\\r\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\r\\n *  - AT = AToken\\r\\n *  - SDT = StableDebtToken\\r\\n *  - VDT = VariableDebtToken\\r\\n *  - LP = LendingPool\\r\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\r\\n *  - LPC = LendingPoolConfiguration\\r\\n *  - RL = ReserveLogic\\r\\n *  - LPCM = LendingPoolCollateralManager\\r\\n *  - P = Pausable\\r\\n */\\r\\nlibrary Errors {\\r\\n  //common errors\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\r\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\r\\n\\r\\n  //contract specific errors\\r\\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\r\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\r\\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\r\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\r\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\r\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\r\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\r\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\r\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\r\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\r\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\r\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\r\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\r\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\r\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\r\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\r\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\r\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\r\\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\r\\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\r\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\r\\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\r\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\r\\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\r\\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\r\\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\r\\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\r\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\r\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\r\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\r\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\r\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\r\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\r\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\r\\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\\r\\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\r\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\r\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\r\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\r\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\r\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\r\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\r\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\r\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\r\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\r\\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\r\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\r\\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\\r\\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\r\\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\\r\\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\r\\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\r\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\r\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\r\\n  string public constant RC_INVALID_LTV = '67';\\r\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\r\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\r\\n  string public constant RC_INVALID_DECIMALS = '70';\\r\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\r\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\r\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\r\\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\r\\n  string public constant UL_INVALID_INDEX = '77';\\r\\n  string public constant LP_NOT_CONTRACT = '78';\\r\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\r\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\r\\n\\r\\n  enum CollateralManagerErrors {\\r\\n    NO_ERROR,\\r\\n    NO_COLLATERAL_AVAILABLE,\\r\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\r\\n    CURRRENCY_NOT_BORROWED,\\r\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\r\\n    NOT_ENOUGH_LIQUIDITY,\\r\\n    NO_ACTIVE_RESERVE,\\r\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\r\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\r\\n    FROZEN_RESERVE\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\\r\\nimport {WadRayMath} from './WadRayMath.sol';\\r\\n\\r\\nlibrary MathUtils {\\r\\n  using SafeMath for uint256;\\r\\n  using WadRayMath for uint256;\\r\\n\\r\\n  /// @dev Ignoring leap years\\r\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\r\\n\\r\\n  /**\\r\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\r\\n   * @param rate The interest rate, in ray\\r\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\r\\n   **/\\r\\n\\r\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    //solium-disable-next-line\\r\\n    uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\r\\n\\r\\n    return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\r\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\r\\n   *\\r\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\r\\n   *\\r\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\r\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\r\\n   *\\r\\n   * @param rate The interest rate, in ray\\r\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n   * @return The interest rate compounded during the timeDelta, in ray\\r\\n   **/\\r\\n  function calculateCompoundedInterest(\\r\\n    uint256 rate,\\r\\n    uint40 lastUpdateTimestamp,\\r\\n    uint256 currentTimestamp\\r\\n  ) internal pure returns (uint256) {\\r\\n    //solium-disable-next-line\\r\\n    uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\r\\n\\r\\n    if (exp == 0) {\\r\\n      return WadRayMath.ray();\\r\\n    }\\r\\n\\r\\n    uint256 expMinusOne = exp - 1;\\r\\n\\r\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\r\\n\\r\\n    uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\r\\n\\r\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\r\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\r\\n\\r\\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\r\\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\r\\n\\r\\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\r\\n   * @param rate The interest rate (in ray)\\r\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\r\\n   **/\\r\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {Errors} from '../helpers/Errors.sol';\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @author Aave\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\r\\n **/\\r\\n\\r\\nlibrary WadRayMath {\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant halfWAD = WAD / 2;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant halfRAY = RAY / 2;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  /**\\r\\n   * @return One ray, 1e27\\r\\n   **/\\r\\n  function ray() internal pure returns (uint256) {\\r\\n    return RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return One wad, 1e18\\r\\n   **/\\r\\n\\r\\n  function wad() internal pure returns (uint256) {\\r\\n    return WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e27/2\\r\\n   **/\\r\\n  function halfRay() internal pure returns (uint256) {\\r\\n    return halfRAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e18/2\\r\\n   **/\\r\\n  function halfWad() internal pure returns (uint256) {\\r\\n    return halfWAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a*b, in wad\\r\\n   **/\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * b + halfWAD) / WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a/b, in wad\\r\\n   **/\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * WAD + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a*b, in ray\\r\\n   **/\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * b + halfRAY) / RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a/b, in ray\\r\\n   **/\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * RAY + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Casts ray down to wad\\r\\n   * @param a Ray\\r\\n   * @return a casted to wad, rounded half up to the nearest wad\\r\\n   **/\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\r\\n    uint256 result = halfRatio + a;\\r\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\r\\n\\r\\n    return result / WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts wad up to ray\\r\\n   * @param a Wad\\r\\n   * @return a converted in ray\\r\\n   **/\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 result = a * WAD_RAY_RATIO;\\r\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\r\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\r\\n\\r\\n/**\\r\\n * @title IStableDebtToken\\r\\n * @notice Defines the interface for the stable debt token\\r\\n * @dev It does not inherit from IERC20 to save in code size\\r\\n * @author Aave\\r\\n **/\\r\\n\\r\\ninterface IStableDebtToken is IInitializableDebtToken {\\r\\n  /**\\r\\n   * @dev Emitted when new stable debt is minted\\r\\n   * @param user The address of the user who triggered the minting\\r\\n   * @param onBehalfOf The recipient of stable debt tokens\\r\\n   * @param amount The amount minted\\r\\n   * @param currentBalance The current balance of the user\\r\\n   * @param balanceIncrease The increase in balance since the last action of the user\\r\\n   * @param newRate The rate of the debt after the minting\\r\\n   * @param avgStableRate The new average stable rate after the minting\\r\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\r\\n   **/\\r\\n  event Mint(\\r\\n    address indexed user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 currentBalance,\\r\\n    uint256 balanceIncrease,\\r\\n    uint256 newRate,\\r\\n    uint256 avgStableRate,\\r\\n    uint256 newTotalSupply\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when new stable debt is burned\\r\\n   * @param user The address of the user\\r\\n   * @param amount The amount being burned\\r\\n   * @param currentBalance The current balance of the user\\r\\n   * @param balanceIncrease The the increase in balance since the last action of the user\\r\\n   * @param avgStableRate The new average stable rate after the burning\\r\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\r\\n   **/\\r\\n  event Burn(\\r\\n    address indexed user,\\r\\n    uint256 amount,\\r\\n    uint256 currentBalance,\\r\\n    uint256 balanceIncrease,\\r\\n    uint256 avgStableRate,\\r\\n    uint256 newTotalSupply\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Mints debt token to the `onBehalfOf` address.\\r\\n   * - The resulting rate is the weighted average between the rate of the new debt\\r\\n   * and the rate of the previous debt\\r\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\r\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\r\\n   * @param onBehalfOf The address receiving the debt tokens\\r\\n   * @param amount The amount of debt tokens to mint\\r\\n   * @param rate The rate of the debt being minted\\r\\n   **/\\r\\n  function mint(\\r\\n    address user,\\r\\n    address onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint256 rate\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns debt of `user`\\r\\n   * - The resulting rate is the weighted average between the rate of the new debt\\r\\n   * and the rate of the previous debt\\r\\n   * @param user The address of the user getting his debt burned\\r\\n   * @param amount The amount of debt tokens getting burned\\r\\n   **/\\r\\n  function burn(address user, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the average rate of all the stable rate loans.\\r\\n   * @return The average stable rate\\r\\n   **/\\r\\n  function getAverageStableRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the stable rate of the user debt\\r\\n   * @return The stable rate of the user\\r\\n   **/\\r\\n  function getUserStableRate(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the timestamp of the last update of the user\\r\\n   * @return The timestamp\\r\\n   **/\\r\\n  function getUserLastUpdated(address user) external view returns (uint40);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the principal, the total supply and the average stable rate\\r\\n   **/\\r\\n  function getSupplyData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint40\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the timestamp of the last update of the total supply\\r\\n   * @return The timestamp\\r\\n   **/\\r\\n  function getTotalSupplyLastUpdated() external view returns (uint40);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the total supply and the average stable rate\\r\\n   **/\\r\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the principal debt balance of the user\\r\\n   * @return The debt balance of the user since the last burn/mint action\\r\\n   **/\\r\\n  function principalBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the incentives controller contract\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport {ILendingPool} from './ILendingPool.sol';\\r\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\r\\n\\r\\n/**\\r\\n * @title IInitializableDebtToken\\r\\n * @notice Interface for the initialize function common between debt tokens\\r\\n * @author Aave\\r\\n **/\\r\\ninterface IInitializableDebtToken {\\r\\n  /**\\r\\n   * @dev Emitted when a debt token is initialized\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param pool The address of the associated lending pool\\r\\n   * @param incentivesController The address of the incentives controller for this aToken\\r\\n   * @param debtTokenDecimals the decimals of the debt token\\r\\n   * @param debtTokenName the name of the debt token\\r\\n   * @param debtTokenSymbol the symbol of the debt token\\r\\n   * @param params A set of encoded parameters for additional initialization\\r\\n   **/\\r\\n  event Initialized(\\r\\n    address indexed underlyingAsset,\\r\\n    address indexed pool,\\r\\n    address incentivesController,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string debtTokenName,\\r\\n    string debtTokenSymbol,\\r\\n    bytes params\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the debt token.\\r\\n   * @param pool The address of the lending pool where this aToken will be used\\r\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n   * @param incentivesController The smart contract managing potential incentives distribution\\r\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\r\\n   * @param debtTokenName The name of the token\\r\\n   * @param debtTokenSymbol The symbol of the token\\r\\n   */\\r\\n  function initialize(\\r\\n    ILendingPool pool,\\r\\n    address underlyingAsset,\\r\\n    IAaveIncentivesController incentivesController,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string memory debtTokenName,\\r\\n    string memory debtTokenSymbol,\\r\\n    bytes calldata params\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"contract IAaveIncentivesController\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"principalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StableDebtToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}