{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"AirdropHelper.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\nimport \\\"./ERC721.sol\\\";\\n\\ncontract AirdropHelper{\\n    address constant Owner = 0xcc5cDaB325689Bcd654aB8611c528e60CC8CBe6A;\\n    ERC721 constant LV = ERC721(0x9df8Aa7C681f33E442A0d57B838555da863504f3);\\n\\n    mapping(address =\\u003e uint) wl;\\n\\n    constructor(address[] memory _wl, uint[] memory tokenIds) {\\n        require(_wl.length == tokenIds.length);\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            wl[_wl[i]] = tokenIds[i];\\n        }\\n    }\\n\\n    function mint() public payable {\\n        require(msg.value == 0.44 ether, \\\"Minting requires 0.44 ETH\\\");\\n        require(wl[msg.sender] != 0, \\\"You are not on the whitelist\\\");\\n\\n        // Remove from whitelist\\n        wl[msg.sender] = 0;\\n\\n\\n        // Transfer the tokenId they were assigned\\n        LV.transferFrom(Owner, msg.sender, wl[msg.sender]);\\n    }\\n\\n    function withdraw() public {\\n        require(msg.sender == Owner);\\n        (bool success, ) = Owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity \\u003e=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/distractedm1nd/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n\\n    mapping(uint256 =\\u003e address) public ownerOf;\\n\\n    mapping(uint256 =\\u003e address) public getApproved;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            totalSupply++;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            totalSupply--;\\n\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wl\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AirdropHelper", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000000280000000000000000000000009c7086f55c7bade71217862f770953651db9c0900000000000000000000000003a91a0e7bc63f57f8461269e976dae04cbfbdda3000000000000000000000000d8d1b44bd72cdd5f0e1de71801e0417c9d1b2a62000000000000000000000000d4af804b5fc981c889e7b7c3af0e8d8ac2e2630d0000000000000000000000005d8725a8831f7497026a775c41252adb26416c27000000000000000000000000ed98524488d0abbef964b0ea675c01382ca9cd6f000000000000000000000000a651ab767dfd8beec267abc3b4e7f29a3300fb6a0000000000000000000000005f86fa39cd5d3e4e64bb9aa7d05cb3a815d08896000000000000000000000000644e70a4ae9315325e6fdb519b1ae865e2b5390200000000000000000000000058b0ccb8770bfe14782619dd711f80fbd4faf0d40000000000000000000000001fec03eb0dbd4190deb139e429a9de6c29de70a6000000000000000000000000d900b8f22710f7651f913af4c78fa7b6f42b9d150000000000000000000000001178c316e3f64edcc29ade6bf5e3f559499bfc6400000000000000000000000040b6b169fc9aaa1380375ebcc4be40d19f37e1ff0000000000000000000000006f9cfacca63145c906fae462433aa1d1f147eec9000000000000000000000000d11071fd3dfd4fbdf3ee8fbe88d97894cf77737500000000000000000000000066f158c507c0fe235dcedae3a2a629d1b6dfbff3000000000000000000000000e5efe24f3539a6368dbd8834d4d0ab6437e11156000000000000000000000000151def52a4d39755eafc9f0519865e65488b65d2000000000000000000000000faf7908b8465e4f9509cbd5322ace740fe9a1d6b000000000000000000000000f1723fb71b6f48b86af1f4e27c879a422a5f2cb1000000000000000000000000e0d4938f6325f0f4f944a581fc5bb68faa07f47a00000000000000000000000097bc942a5f258ab1b6c977c51ea1e990ca6a58340000000000000000000000001965550fffbb33fe98beccd4ba6cfe54c1cbb067000000000000000000000000b65e6aa60a7abb93ca4acc15dfd2e81be5ac5eac000000000000000000000000bbbbbeeafeb67500d974ed44c5cd10dd91c1ee7d0000000000000000000000001013604e012a917e33104bb0c63cc98e1b8d2bdc00000000000000000000000040f249a353a66df0ade87d7c587146fce7531a790000000000000000000000009d8a72e842bd0c029f7e68d324483b2dd49b53f500000000000000000000000012feace0fe62ab7f10b9993f76e4e75c8f6039b800000000000000000000000019b6688bf5fb29cacf079e9f17bac2a914c42b1d000000000000000000000000308ac1e045f249375a262c45390117c3b8e796c400000000000000000000000073d05c2ea70dfc3b220444c94567dbc84bb0d24c000000000000000000000000684607a5a4c25b10b11c117c65944eba2bb3099c000000000000000000000000e49d2030c4dfaf3a04e15d1861ee8b8b701da662000000000000000000000000470dcf13c705bd7e917c2c1c067cf661eb2eae9200000000000000000000000038e48bc08b4ce333d66e6466486f363aa652e5660000000000000000000000002df6d7e9bf3f6e17a59cf68f6723ba1011d3b8b2000000000000000000000000793d3ae3cda6c01f61a19df0cddf9063bf55cef20000000000000000000000006c0e5da63b95bd4b35269bef2e22621f31e5b84700000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000f4d0000000000000000000000000000000000000000000000000000000000000f520000000000000000000000000000000000000000000000000000000000000f4f0000000000000000000000000000000000000000000000000000000000000f500000000000000000000000000000000000000000000000000000000000000f590000000000000000000000000000000000000000000000000000000000000f5a0000000000000000000000000000000000000000000000000000000000000f4b0000000000000000000000000000000000000000000000000000000000000f580000000000000000000000000000000000000000000000000000000000000f570000000000000000000000000000000000000000000000000000000000000f4c0000000000000000000000000000000000000000000000000000000000000f550000000000000000000000000000000000000000000000000000000000000f560000000000000000000000000000000000000000000000000000000000000f690000000000000000000000000000000000000000000000000000000000000f5f0000000000000000000000000000000000000000000000000000000000000f5b0000000000000000000000000000000000000000000000000000000000000f600000000000000000000000000000000000000000000000000000000000000f610000000000000000000000000000000000000000000000000000000000000f620000000000000000000000000000000000000000000000000000000000000f6b0000000000000000000000000000000000000000000000000000000000000f630000000000000000000000000000000000000000000000000000000000000f640000000000000000000000000000000000000000000000000000000000000f5c0000000000000000000000000000000000000000000000000000000000000f820000000000000000000000000000000000000000000000000000000000000f850000000000000000000000000000000000000000000000000000000000000f750000000000000000000000000000000000000000000000000000000000000f780000000000000000000000000000000000000000000000000000000000000f7c0000000000000000000000000000000000000000000000000000000000000f700000000000000000000000000000000000000000000000000000000000000f710000000000000000000000000000000000000000000000000000000000000f720000000000000000000000000000000000000000000000000000000000000f8e0000000000000000000000000000000000000000000000000000000000000f8f0000000000000000000000000000000000000000000000000000000000000f890000000000000000000000000000000000000000000000000000000000000f8a0000000000000000000000000000000000000000000000000000000000000f9e0000000000000000000000000000000000000000000000000000000000000f9a0000000000000000000000000000000000000000000000000000000000000f540000000000000000000000000000000000000000000000000000000000000f530000000000000000000000000000000000000000000000000000000000000f5d0000000000000000000000000000000000000000000000000000000000000f5e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ce69ba5f00e0dc7fb4e7137b6259a5c6734a1fec696b6d645421dc2f08b90eb"}]}