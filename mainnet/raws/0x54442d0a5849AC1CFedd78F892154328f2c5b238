{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/arteQArtDrop.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for art\u00e8Q Investment Fund (https://arteq.io).\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"./ERC721URIStorage.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IarteQTaskFinalizer.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io> <kam.cpp@gmail.com>\\n///\\n/// @notice Use at your own risk\\ncontract arteQArtDrop is ERC721URIStorage, IERC2981 {\\n\\n    string private constant DEFAULT_TOKEN_URI = \\\"DEFAULT_TOKEN_URI\\\";\\n\\n    uint256 public constant MAX_NR_TOKENS_PER_ACCOUNT = 5;\\n    uint256 public constant MAX_RESERVATIONS_COUNT = 10000;\\n\\n    int256 public constant LOCKED_STAGE = 0;\\n    int256 public constant WHITELISTING_STAGE = 2;\\n    int256 public constant RESERVATION_STAGE = 3;\\n    int256 public constant DISTRIBUTION_STAGE = 4;\\n\\n    // Counter for token IDs\\n    uint256 private _tokenIdCounter;\\n\\n    // Counter for pre-minted token IDs\\n    uint256 private _preMintedTokenIdCounter;\\n\\n    // number of tokens owned by the contract\\n    uint256 _contractBalance;\\n\\n    address private _adminContract;\\n\\n    // in wei\\n    uint256 private _pricePerToken;\\n    // in wei\\n    uint256 private _serviceFee;\\n\\n    string private _defaultTokenURI;\\n\\n    address _royaltyWallet;\\n    uint256 _royaltyPercentage;\\n\\n    // The current art drop stage. It can have the following values:\\n    //\\n    //   0: Locked / Read-only mode\\n    //   2: Selection of the registered wallets (whitelisting)\\n    //   3: Reservation / Purchase stage\\n    //   4: Distribution of the tokens / Drop stage\\n    //\\n    // * 1 is missing from the above list. That's to keep the off-chain\\n    //   and on-chain states in sync.\\n    // * Only admin accounts with a quorum of votes can change the\\n    //   current stage.\\n    // * Some functions only work in certain stages.\\n    // * When the 4th stage (last stage) is finished, the contract\\n    //   will be put back into locked mode (stage 0).\\n    // * Admins can only advance/retreat the current stage by movements of +1 or -1.\\n    int256 private _stage;\\n\\n    // A mapping from the whitelisted addresses to the maximum number of tokens they can obtain\\n    mapping(address => uint256) _whitelistedAccounts;\\n\\n    // Counts the number of whitelisted accounts\\n    uint256 _whitelistedAccountsCounter;\\n\\n    // Counts the number of reserved tokens\\n    uint256 _reservedTokensCounter;\\n\\n    // Enabled reservations without a need to be whitelisted\\n    bool _canReserveWithoutBeingWhitelisted;\\n\\n    // An operator which is allowed to perform certain operations such as adding whitelisted\\n    // accounts, removing them, or doing the token reservation for credit card payments. These\\n    // accounts can only be defined by a quorom of votes among admins.\\n    mapping(address => uint256) _operators;\\n\\n    event WhitelistedAccountAdded(address doer, address account, uint256 maxNrOfTokensToObtain);\\n    event WhitelistedAccountRemoved(address doer, address account);\\n    event PricePerTokenChanged(address doer, uint256 adminTaskId, uint256 oldValue, uint256 newValue);\\n    event ServiceFeeChanged(address doer, uint256 adminTaskId, uint256 oldValue, uint256 newValue);\\n    event StageChanged(address doer, uint256 adminTaskId, int256 oldValue, int256 newValue);\\n    event OperatorAdded(address doer, uint256 adminTaskId, address toBeOperatorAccount);\\n    event OperatorRemoved(address doer, uint256 adminTaskId, address toBeRemovedOperatorAccount);\\n    event DefaultTokenURIChanged(address doer, uint256 adminTaskId, string newValue);\\n    event TokensReserved(address doer, address target, uint256 nrOfTokensToReserve);\\n    event Deposited(address doer, uint256 priceOfTokens, uint256 serviceFee, uint256 totalValue);\\n    event Returned(address doer, address target, uint256 returnedValue);\\n    event Withdrawn(address doer, address target, uint256 amount);\\n    event TokenURIChanged(address doer, uint256 tokenId, string newValue);\\n    event GenesisTokenURIChanged(address doer, uint256 adminTaskId, string newValue);\\n    event RoyaltyWalletChanged(address doer, uint256 adminTaskId, address newRoyaltyWallet);\\n    event RoyaltyPercentageChanged(address doer, uint256 adminTaskId, uint256 newRoyaltyPercentage);\\n    event CanReserveWithoutBeingWhitelistedChanged(address doer, uint256 adminTaskId, bool newValue);\\n\\n    modifier adminApprovalRequired(uint256 adminTaskId) {\\n        _;\\n        // This must succeed otherwise the tx gets reverted\\n        IarteQTaskFinalizer(_adminContract).finalizeTask(msg.sender, adminTaskId);\\n    }\\n\\n    modifier onlyLockedStage() {\\n        require(_stage == LOCKED_STAGE, \\\"arteQArtDrop: only callable in locked stage\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelistingStage() {\\n        require(_stage == WHITELISTING_STAGE, \\\"arteQArtDrop: only callable in whitelisting stage\\\");\\n        _;\\n    }\\n\\n    modifier onlyReservationStage() {\\n        require(_stage == RESERVATION_STAGE, \\\"arteQArtDrop: only callable in reservation stage\\\");\\n        _;\\n    }\\n\\n    modifier onlyReservationAndDistributionStages() {\\n        require(_stage == RESERVATION_STAGE || _stage == DISTRIBUTION_STAGE, \\\"arteQArtDrop: only callable in reservation and distribution stage\\\");\\n        _;\\n    }\\n\\n    modifier onlyDistributionStage() {\\n        require(_stage == DISTRIBUTION_STAGE, \\\"arteQArtDrop: only callable in distribution stage\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhenNotLocked() {\\n        require(_stage > 1, \\\"arteQArtDrop: only callable in not-locked stages\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhenNotInReservationStage() {\\n        require(_stage != RESERVATION_STAGE, \\\"arteQArtDrop: only callable in a non-reservation stage\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(_operators[msg.sender] > 0, \\\"arteQArtDrop: not an operator account\\\");\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    constructor(\\n        address adminContract,\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialPricePerToken,\\n        uint256 initialServiceFee,\\n        string memory initialDefaultTokenURI,\\n        string memory initialGenesisTokenURI\\n    ) ERC721(name, symbol) {\\n\\n        require(adminContract != address(0), \\\"arteQArtDrop: admin contract cannot be zero\\\");\\n        require(adminContract.code.length > 0, \\\"arteQArtDrop: non-contract account for admin contract\\\");\\n        require(initialPricePerToken > 0, \\\"arteQArtDrop: zero initial price per token\\\");\\n        require(bytes(initialDefaultTokenURI).length > 0, \\\"arteQArtDrop: invalid default token uri\\\");\\n        require(bytes(initialGenesisTokenURI).length > 0, \\\"arteQArtDrop: invalid genesis token uri\\\");\\n\\n        _adminContract = adminContract;\\n\\n        _pricePerToken = initialPricePerToken;\\n        emit PricePerTokenChanged(msg.sender, 0, 0, _pricePerToken);\\n\\n        _serviceFee = initialServiceFee;\\n        emit ServiceFeeChanged(msg.sender, 0, 0, _serviceFee);\\n\\n        _defaultTokenURI = initialDefaultTokenURI;\\n        emit DefaultTokenURIChanged(msg.sender, 0, _defaultTokenURI);\\n\\n        _tokenIdCounter = 1;\\n        _preMintedTokenIdCounter = 1;\\n        _contractBalance = 0;\\n\\n        _whitelistedAccountsCounter = 0;\\n        _reservedTokensCounter = 0;\\n\\n        // Contract is locked/read-only by default.\\n        _stage = 0;\\n        emit StageChanged(msg.sender, 0, 0, _stage);\\n\\n        // Mint genesis token. Contract will be the eternal owner of the genesis token.\\n        _mint(address(0), address(this), 0);\\n        _setTokenURI(0, initialGenesisTokenURI);\\n        _contractBalance += 1;\\n        emit GenesisTokenURIChanged(msg.sender, 0, initialGenesisTokenURI);\\n\\n        _royaltyWallet = address(this);\\n        emit RoyaltyWalletChanged(msg.sender, 0, _royaltyWallet);\\n\\n        _royaltyPercentage = 10;\\n        emit RoyaltyPercentageChanged(msg.sender, 0, _royaltyPercentage);\\n\\n        _canReserveWithoutBeingWhitelisted = false;\\n        emit CanReserveWithoutBeingWhitelistedChanged(msg.sender, 0, _canReserveWithoutBeingWhitelisted);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (_exists(tokenId)) {\\n            string memory tokenURIValue = super.tokenURI(tokenId);\\n            if (keccak256(bytes(tokenURIValue)) == keccak256(bytes(DEFAULT_TOKEN_URI))) {\\n                return _defaultTokenURI;\\n            }\\n            return tokenURIValue;\\n        }\\n        if (tokenId >= 1 && tokenId < _preMintedTokenIdCounter) {\\n            return _defaultTokenURI;\\n        }\\n        revert(\\\"arteQArtDrop: token id does not exist\\\");\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        if (_exists(tokenId)) {\\n            return super.ownerOf(tokenId);\\n        }\\n        if (tokenId >= 1 && tokenId < _preMintedTokenIdCounter) {\\n            return address(this);\\n        }\\n        revert(\\\"arteQArtDrop: token is does not exist\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(this)) {\\n            return _contractBalance;\\n        }\\n        return super.balanceOf(owner);\\n    }\\n\\n    function preMint(uint256 nr) external\\n      onlyOperator {\\n        for (uint256 i = 0; i < nr; i++) {\\n            require(_preMintedTokenIdCounter <= MAX_RESERVATIONS_COUNT, \\\"arteQArtDrop: cannot pre-mint more\\\");\\n            emit Transfer(address(0), address(this), _preMintedTokenIdCounter);\\n            _preMintedTokenIdCounter += 1;\\n        }\\n        _contractBalance += nr;\\n    }\\n\\n    function pricePerToken() external view returns (uint256) {\\n        return _pricePerToken;\\n    }\\n\\n    function serviceFee() external view returns (uint256) {\\n        return _serviceFee;\\n    }\\n\\n    function defaultTokenURI() external view returns (string memory) {\\n        return _defaultTokenURI;\\n    }\\n\\n    function nrPreMintedTokens() external view returns (uint256) {\\n        return _preMintedTokenIdCounter - 1;\\n    }\\n\\n    function stage() external view returns (int256) {\\n        return _stage;\\n    }\\n\\n    function royaltyPercentage() external view returns (uint256) {\\n        return _royaltyPercentage;\\n    }\\n\\n    function royaltyWallet() external view returns (address) {\\n        return _royaltyWallet;\\n    }\\n\\n    function nrOfWhitelistedAccounts() external view returns (uint256) {\\n        return _whitelistedAccountsCounter;\\n    }\\n\\n    function nrOfReservedTokens() external view returns (uint256) {\\n        return _reservedTokensCounter;\\n    }\\n\\n    function canReserveWithoutBeingWhitelisted() external view returns (bool) {\\n        return _canReserveWithoutBeingWhitelisted;\\n    }\\n\\n    function setPricePerToken(uint256 adminTaskId, uint256 newValue) external\\n      onlyWhenNotLocked\\n      onlyWhenNotInReservationStage\\n      adminApprovalRequired(adminTaskId) {\\n        require(newValue > 0, \\\"arteQArtDrop: new price cannot be zero\\\");\\n        uint256 oldValue = _pricePerToken;\\n        _pricePerToken = newValue;\\n        emit PricePerTokenChanged(msg.sender, adminTaskId, oldValue, _pricePerToken);\\n    }\\n\\n    function setServiceFee(uint256 adminTaskId, uint256 newValue) external\\n      onlyWhenNotLocked\\n      onlyWhenNotInReservationStage\\n      adminApprovalRequired(adminTaskId) {\\n        require(newValue > 0, \\\"arteQArtDrop: new price cannot be zero\\\");\\n        uint256 oldValue = _serviceFee;\\n        _serviceFee = newValue;\\n        emit ServiceFeeChanged(msg.sender, adminTaskId, oldValue, _serviceFee);\\n    }\\n\\n    function setDefaultTokenURI(uint256 adminTaskId, string memory newValue) external\\n      onlyWhenNotLocked\\n      onlyWhenNotInReservationStage\\n      adminApprovalRequired(adminTaskId) {\\n        require(bytes(newValue).length > 0, \\\"arteQArtDrop: empty string\\\");\\n        _defaultTokenURI = newValue;\\n        emit DefaultTokenURIChanged(msg.sender, adminTaskId, _defaultTokenURI);\\n    }\\n\\n    function setGenesisTokenURI(uint256 adminTaskId, string memory newValue) external\\n      onlyLockedStage\\n      adminApprovalRequired(adminTaskId) {\\n        require(bytes(newValue).length > 0, \\\"arteQArtDrop: empty string\\\");\\n        _setTokenURI(0, newValue);\\n        emit GenesisTokenURIChanged(msg.sender, adminTaskId, newValue);\\n    }\\n\\n    function setRoyaltyWallet(uint256 adminTaskId, address newRoyaltyWallet) external\\n      adminApprovalRequired(adminTaskId) {\\n        require(newRoyaltyWallet != address(0), \\\"arteQArtDrop: invalid royalty wallet\\\");\\n        _royaltyWallet = newRoyaltyWallet;\\n        emit RoyaltyWalletChanged(msg.sender, adminTaskId, newRoyaltyWallet);\\n    }\\n\\n    function setRoyaltyPercentage(uint256 adminTaskId, uint256 newRoyaltyPercentage) external\\n      adminApprovalRequired(adminTaskId) {\\n        require(newRoyaltyPercentage >= 0 && newRoyaltyPercentage <= 75, \\\"arteQArtDrop: invalid royalty percentage\\\");\\n        _royaltyPercentage = newRoyaltyPercentage;\\n        emit RoyaltyPercentageChanged(msg.sender, adminTaskId, newRoyaltyPercentage);\\n    }\\n\\n    function setCanReserveWithoutBeingWhitelisted(uint256 adminTaskId, bool newValue) external\\n      adminApprovalRequired(adminTaskId) {\\n        _canReserveWithoutBeingWhitelisted = newValue;\\n        emit CanReserveWithoutBeingWhitelistedChanged(msg.sender, adminTaskId, newValue);\\n    }\\n\\n    function retreatStage(uint256 adminTaskId) external\\n      adminApprovalRequired(adminTaskId) {\\n        int256 oldStage = _stage;\\n        _stage -= 1;\\n        if (_stage == -1) {\\n            _stage = 4;\\n        } else if (_stage == 1) {\\n            _stage = 0;\\n        }\\n        emit StageChanged(msg.sender, adminTaskId, oldStage, _stage);\\n    }\\n\\n    function advanceStage(uint256 adminTaskId) external\\n      adminApprovalRequired(adminTaskId) {\\n        int256 oldStage = _stage;\\n        _stage += 1;\\n        if (_stage == 5) {\\n            _stage = 0;\\n        } else if (_stage == 1) {\\n            _stage = 2;\\n        }\\n        emit StageChanged(msg.sender, adminTaskId, oldStage, _stage);\\n    }\\n\\n    function addOperator(uint256 adminTaskId, address toBeOperatorAccount) external\\n      adminApprovalRequired(adminTaskId) {\\n        require(toBeOperatorAccount != address(0), \\\"arteQArtDrop: cannot set zero as operator\\\");\\n        require(_operators[toBeOperatorAccount] == 0, \\\"arteQArtDrop: already an operator\\\");\\n        _operators[toBeOperatorAccount] = 1;\\n        emit OperatorAdded(msg.sender, adminTaskId, toBeOperatorAccount);\\n    }\\n\\n    function removeOperator(uint256 adminTaskId, address toBeRemovedOperatorAccount) external\\n      adminApprovalRequired(adminTaskId) {\\n        require(toBeRemovedOperatorAccount != address(0), \\\"arteQArtDrop: cannot remove zero as operator\\\");\\n        require(_operators[toBeRemovedOperatorAccount] == 1, \\\"arteQArtDrop: not an operator\\\");\\n        _operators[toBeRemovedOperatorAccount] = 0;\\n        emit OperatorRemoved(msg.sender, adminTaskId, toBeRemovedOperatorAccount);\\n    }\\n\\n    function isOperator(address account) external view returns(bool) {\\n        return _operators[account] == 1;\\n    }\\n\\n    function addToWhitelistedAccounts(\\n      address[] memory accounts,\\n      uint[] memory listOfMaxNrOfTokensToObtain\\n    ) external\\n      onlyOperator\\n      onlyWhitelistingStage {\\n        require(accounts.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        require(listOfMaxNrOfTokensToObtain.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        require(accounts.length == listOfMaxNrOfTokensToObtain.length, \\\"arteQArtDrop: different lengths\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            uint256 maxNrOfTokensToObtain = listOfMaxNrOfTokensToObtain[i];\\n\\n            require(account != address(0), \\\"arteQArtDrop: cannot whitelist zero address\\\");\\n            require(maxNrOfTokensToObtain >= 1 && maxNrOfTokensToObtain <= MAX_NR_TOKENS_PER_ACCOUNT,\\n                \\\"arteQArtDrop: invalid nr of tokens to obtain\\\");\\n            require(account.code.length == 0, \\\"arteQArtDrop: cannot whitelist a contract\\\");\\n            require(_whitelistedAccounts[account] == 0, \\\"arteQArtDrop: already whitelisted\\\");\\n\\n            _whitelistedAccounts[account] = maxNrOfTokensToObtain;\\n            _whitelistedAccountsCounter += 1;\\n\\n            emit WhitelistedAccountAdded(msg.sender, account, maxNrOfTokensToObtain);\\n        }\\n    }\\n\\n    function removeFromWhitelistedAccounts(address[] memory accounts) external\\n      onlyOperator\\n      onlyWhitelistingStage {\\n        require(accounts.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n\\n            require(account != address(0), \\\"arteQArtDrop: cannot remove zero address\\\");\\n            require(_whitelistedAccounts[account] > 0, \\\"arteQArtDrop: account is not whitelisted\\\");\\n\\n            _whitelistedAccounts[account] = 0;\\n            _whitelistedAccountsCounter -= 1;\\n\\n            emit WhitelistedAccountRemoved(msg.sender, account);\\n        }\\n    }\\n\\n    function whitelistedNrOfTokens(address account) external view returns (uint256) {\\n        if (!_canReserveWithoutBeingWhitelisted) {\\n            return _whitelistedAccounts[account];\\n        }\\n        if (_whitelistedAccounts[account] == 0) {\\n            return MAX_NR_TOKENS_PER_ACCOUNT;\\n        }\\n        return _whitelistedAccounts[account];\\n    }\\n\\n    // Only callable by a whitelisted account\\n    //\\n    // * Account must have sent enough ETH to cover the price of all tokens + service fee\\n    // * Account cannot reserve more than what has been whitelisted for\\n    function reserveTokens(uint256 nrOfTokensToReserve) external payable\\n      onlyReservationAndDistributionStages {\\n        require(msg.value > 0, \\\"arteQArtDrop: zero funds\\\");\\n        require(nrOfTokensToReserve > 0, \\\"arteQArtDrop: zero tokens to reserve\\\");\\n\\n        if (_canReserveWithoutBeingWhitelisted && _whitelistedAccounts[msg.sender] == 0) {\\n            _whitelistedAccounts[msg.sender] = 5;\\n        }\\n\\n        require(_whitelistedAccounts[msg.sender] > 0, \\\"arteQArtDrop: not a whitelisted account\\\");\\n        require(nrOfTokensToReserve <= _whitelistedAccounts[msg.sender],\\n              \\\"arteQArtDrop: exceeding the reservation allowance\\\");\\n        require((_reservedTokensCounter + nrOfTokensToReserve) <= MAX_RESERVATIONS_COUNT,\\n                \\\"arteQArtDrop: exceeding max number of reservations\\\");\\n\\n        // Handle payments\\n        uint256 priceOfTokens = nrOfTokensToReserve * _pricePerToken;\\n        uint256 priceToPay = priceOfTokens + _serviceFee;\\n        require(msg.value >= priceToPay, \\\"arteQArtDrop: insufficient funds\\\");\\n        uint256 remainder = msg.value - priceToPay;\\n        if (remainder > 0) {\\n            (bool success, ) = msg.sender.call{value: remainder}(new bytes(0));\\n            require(success, \\\"arteQArtDrop: failed to send the remainder\\\");\\n            emit Returned(msg.sender, msg.sender, remainder);\\n        }\\n        emit Deposited(msg.sender, priceOfTokens, _serviceFee, priceToPay);\\n\\n        _reserveTokens(msg.sender, nrOfTokensToReserve);\\n    }\\n\\n    // This method is called by an operator to complete the reservation of fiat payments\\n    // such as credit card, iDeal, etc.\\n    function reserveTokensForAccounts(\\n      address[] memory accounts,\\n      uint256[] memory listOfNrOfTokensToReserve\\n    ) external\\n      onlyOperator\\n      onlyReservationAndDistributionStages {\\n        require(accounts.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        require(listOfNrOfTokensToReserve.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        require(accounts.length == listOfNrOfTokensToReserve.length, \\\"arteQArtDrop: different lengths\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            uint256 nrOfTokensToReserve = listOfNrOfTokensToReserve[i];\\n\\n            require(account != address(0), \\\"arteQArtDrop: cannot be zero address\\\");\\n\\n            if (_canReserveWithoutBeingWhitelisted && _whitelistedAccounts[account] == 0) {\\n                _whitelistedAccounts[account] = 5;\\n            }\\n\\n            require(_whitelistedAccounts[account] > 0, \\\"arteQArtDrop: not a whitelisted account\\\");\\n            require(nrOfTokensToReserve <= _whitelistedAccounts[account],\\n                  \\\"arteQArtDrop: exceeding the reservation allowance\\\");\\n\\n            _reserveTokens(account, nrOfTokensToReserve);\\n        }\\n    }\\n\\n    function updateTokenURIs(uint256[] memory tokenIds, string[] memory newTokenURIs) external\\n      onlyOperator\\n      onlyDistributionStage {\\n        require(tokenIds.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        require(newTokenURIs.length > 0, \\\"arteQArtDrop: zero length\\\");\\n        require(tokenIds.length == newTokenURIs.length, \\\"arteQArtDrop: different lengths\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            string memory newTokenURI = newTokenURIs[i];\\n\\n            require(tokenId > 0, \\\"arteQArtDrop: cannot alter genesis token\\\");\\n            require(bytes(newTokenURI).length > 0, \\\"arteQArtDrop: empty string\\\");\\n\\n            _setTokenURI(tokenId, newTokenURI);\\n            emit TokenURIChanged(msg.sender, tokenId, newTokenURI);\\n        }\\n    }\\n\\n    function transferTo(address target, uint256 amount) external\\n      onlyOperator {\\n        require(target != address(0), \\\"arteQArtDrop: target cannot be zero\\\");\\n        require(amount > 0, \\\"arteQArtDrop: cannot transfer zero\\\");\\n        require(amount <= address(this).balance, \\\"arteQArtDrop: transfer more than balance\\\");\\n\\n        (bool success, ) = target.call{value: amount}(new bytes(0));\\n        require(success, \\\"arteQArtDrop: failed to transfer\\\");\\n\\n        emit Withdrawn(msg.sender, target, amount);\\n    }\\n\\n    function royaltyInfo(uint256, uint256 salePrice) external view virtual override returns (address, uint256) {\\n        uint256 royalty = (salePrice * _royaltyPercentage) / 100;\\n        return (_royaltyWallet, royalty);\\n    }\\n\\n    function _reserveTokens(address target, uint256 nrOfTokensToReserve) internal {\\n        for (uint256 i = 1; i <= nrOfTokensToReserve; i++) {\\n            uint256 newTokenId = _tokenIdCounter;\\n            _mint(address(this), target, newTokenId);\\n            _setTokenURI(newTokenId, DEFAULT_TOKEN_URI);\\n            _tokenIdCounter += 1;\\n            require(_reservedTokensCounter <= MAX_RESERVATIONS_COUNT,\\n                    \\\"arteQArtDrop: exceeding max number of reservations\\\");\\n            _reservedTokensCounter += 1;\\n        }\\n        if ((_contractBalance - 1) > nrOfTokensToReserve) {\\n            _contractBalance -= nrOfTokensToReserve;\\n        } else {\\n            _contractBalance = 1; // eventually, the contract must only own the genesis token\\n        }\\n        require(_contractBalance >= 1, \\\"arteQArtDrop: contract balance went below 1\\\");\\n        _whitelistedAccounts[target] -= nrOfTokensToReserve;\\n        require(_whitelistedAccounts[target] >= 0, \\\"arteQArtDrop: should not happen\\\");\\n        emit TokensReserved(msg.sender, target, nrOfTokensToReserve);\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"arteQArtDrop: cannot accept ether\\\");\\n    }\\n\\n    fallback() external payable {\\n        revert(\\\"arteQArtDrop: cannot accept ether\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721URIStorage.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for art\u00e8Q Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on OpenZeppelin Contracts v4.3.2 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\n\\n /**\\n  * @author Modified by Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n  *\\n  * @notice Use at your own risk\\n  *\\n  * Note: 2B has modified the original code to cover its needs as\\n  * part of art\u00e8Q Investment Fund ecosystem\\n  *\\n  * @dev ERC721 token with storage based token URI management.\\n  */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for art\u00e8Q Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n /**\\n  * @author Modified by Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n  *\\n  * @notice Use at your own risk\\n  *\\n  * Note: 2B has modified the original code to cover its needs as\\n  * part of art\u00e8Q Investment Fund ecosystem\\n  *\\n  * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n  * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n  * {ERC721Enumerable}.\\n  */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(address(0), to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address from, address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/IarteQTaskFinalizer.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for art\u00e8Q Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n/// @title The interface for finalizing tasks. Mainly used by art\u00e8Q contracts to\\n/// perform administrative tasks in conjuction with admin contract.\\ninterface IarteQTaskFinalizer {\\n\\n    event TaskFinalized(address finalizer, address origin, uint256 taskId);\\n\\n    function finalizeTask(address origin, uint256 taskId) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"dhfoDgvulfnTUtnIf\"\r\n        }\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"initialDefaultTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialGenesisTokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"CanReserveWithoutBeingWhitelistedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"DefaultTokenURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"GenesisTokenURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toBeOperatorAccount\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toBeRemovedOperatorAccount\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PricePerTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedValue\",\"type\":\"uint256\"}],\"name\":\"Returned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRoyaltyWallet\",\"type\":\"address\"}],\"name\":\"RoyaltyWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ServiceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"oldValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newValue\",\"type\":\"int256\"}],\"name\":\"StageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"TokenURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nrOfTokensToReserve\",\"type\":\"uint256\"}],\"name\":\"TokensReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxNrOfTokensToObtain\",\"type\":\"uint256\"}],\"name\":\"WhitelistedAccountAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAccountRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_STAGE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKED_STAGE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NR_TOKENS_PER_ACCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESERVATIONS_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVATION_STAGE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTING_STAGE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeOperatorAccount\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listOfMaxNrOfTokensToObtain\",\"type\":\"uint256[]\"}],\"name\":\"addToWhitelistedAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"}],\"name\":\"advanceStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canReserveWithoutBeingWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nrOfReservedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nrOfWhitelistedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nrPreMintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nr\",\"type\":\"uint256\"}],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelistedAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeRemovedOperatorAccount\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nrOfTokensToReserve\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listOfNrOfTokensToReserve\",\"type\":\"uint256[]\"}],\"name\":\"reserveTokensForAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"}],\"name\":\"retreatStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setCanReserveWithoutBeingWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setDefaultTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setGenesisTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPricePerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRoyaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRoyaltyWallet\",\"type\":\"address\"}],\"name\":\"setRoyaltyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adminTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"newTokenURIs\",\"type\":\"string[]\"}],\"name\":\"updateTokenURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistedNrOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "arteQArtDrop", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000554823b9ddb01304252b84dafedfb2214e7e5fd800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000905438e60010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000002c42656c7665646572652026206172746551202d20546865204b69737320627920477573746176204b6c696d740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002542656c766564657265416e6441727465515468654b69737342794775737461764b6c696d74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f61727465712e6d7970696e6174612e636c6f75642f697066732f516d6577367939514c767153554a32525a793978325558526663584a6d6e77444532507a525a564e4e65766f765a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005068747470733a2f2f61727465712e6d7970696e6174612e636c6f75642f697066732f516d63504a7a77795741726f6f5072386e655347517647774b6541515838545961627a744846573871626a6b487000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}