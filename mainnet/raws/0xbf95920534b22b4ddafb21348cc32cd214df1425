{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr), \"Illegal user rights\");\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\nlibrary RBAC\r\n{\r\n    using Roles for Roles.Role;\r\n\r\n    struct RolesManager\r\n    {\r\n        mapping (string => Roles.Role)  userRoles;\r\n        address owner;\r\n        bool isInit;\r\n    }\r\n\r\n    event RoleAdded(address addr, string roleName);\r\n    event RoleRemoved(address addr, string roleName);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function initialize(RolesManager storage rolesManager, address _owner) internal\r\n    {\r\n        rolesManager.owner = _owner;\r\n        rolesManager.userRoles[\"admin\"].add(msg.sender);\r\n        rolesManager.userRoles[\"mint\"].add(msg.sender);\r\n        addRole(rolesManager, _owner, \"admin\");\r\n        addRole(rolesManager, _owner, \"mint\");\r\n        addRole(rolesManager, _owner, \"burn\");\r\n        addRole(rolesManager, _owner, \"frozen\");\r\n        addRole(rolesManager, _owner, \"pause\");\r\n    }\r\n\r\n    modifier onlyAdmin(RolesManager storage rolesManager)\r\n    {\r\n        require(isAdmin(rolesManager), \"Adminable: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(RolesManager storage rolesManager) internal view returns(bool)\r\n    {\r\n        return (msg.sender == rolesManager.owner);\r\n    }\r\n\r\n    function isAdmin(RolesManager storage rolesManager) internal view returns(bool)\r\n    {\r\n        return hasRole(rolesManager, msg.sender, \"admin\") || msg.sender == rolesManager.owner;\r\n    }\r\n\r\n    /**\r\n    * @dev reverts if addr does not have role\r\n    * @param addr address\r\n    * @param roleName the name of the role\r\n    * // reverts\r\n    */\r\n    function checkRole(RolesManager storage rolesManager, address addr, string memory roleName) internal view\r\n    {\r\n        rolesManager.userRoles[roleName].check(addr);\r\n    }\r\n\r\n    /**\r\n    * @dev determine if addr has role\r\n    * @param addr address\r\n    * @param roleName the name of the role\r\n    * @return bool\r\n    */\r\n    function hasRole(RolesManager storage rolesManager, address addr, string memory roleName) internal view returns (bool)\r\n    {\r\n        return rolesManager.userRoles[roleName].has(addr);\r\n    }\r\n\r\n    /**\r\n    * @dev add a role to an address\r\n    * @param addr address\r\n    * @param roleName the name of the role\r\n    */\r\n    function addRole(RolesManager storage rolesManager, address addr, string memory roleName) internal onlyAdmin(rolesManager)\r\n    {\r\n        rolesManager.userRoles[roleName].add(addr);\r\n        emit RoleAdded(addr, roleName);\r\n    }\r\n\r\n    /**\r\n    * @dev remove a role from an address\r\n    * @param addr address\r\n    * @param roleName the name of the role\r\n    */\r\n    function removeRole(RolesManager storage rolesManager, address addr, string memory roleName) internal onlyAdmin(rolesManager)\r\n    {\r\n        rolesManager.userRoles[roleName].remove(addr);\r\n        emit RoleRemoved(addr, roleName);\r\n    }\r\n\r\n    function setOwner(RolesManager storage rolesManager, address newOwner) private onlyAdmin(rolesManager) {\r\n        address oldOwner = rolesManager.owner;\r\n        rolesManager.owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /** set owner null\r\n     */\r\n    function renounceOwnership(RolesManager storage rolesManager)  internal\r\n    {\r\n        setOwner(rolesManager, address(0));\r\n    }\r\n\r\n    /* transfer owner */\r\n    function transferOwnership(RolesManager storage rolesManager, address newOwner) internal\r\n    {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        setOwner(rolesManager, newOwner);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]", "ContractName": "RBAC", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0d755e6c4ac884a4da0897abcd31f249397234d549d0bfbea54abcc66928adc"}]}