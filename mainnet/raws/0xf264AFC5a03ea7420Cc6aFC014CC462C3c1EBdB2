{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n \r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contract/library/ErrorCode.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\nlibrary ErrorCode {\r\n\r\n    string constant FORBIDDEN = 'YouSwap:FORBIDDEN';\r\n    string constant IDENTICAL_ADDRESSES = 'YouSwap:IDENTICAL_ADDRESSES';\r\n    string constant ZERO_ADDRESS = 'YouSwap:ZERO_ADDRESS';\r\n    string constant INVALID_ADDRESSES = 'YouSwap:INVALID_ADDRESSES';\r\n    string constant BALANCE_INSUFFICIENT = 'YouSwap:BALANCE_INSUFFICIENT';\r\n    string constant REWARDTOTAL_LESS_THAN_REWARDPROVIDE = 'YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE';\r\n    string constant PARAMETER_TOO_LONG = 'YouSwap:PARAMETER_TOO_LONG';\r\n    string constant REGISTERED = 'YouSwap:REGISTERED';\r\n    string constant MINING_NOT_STARTED = 'YouSwap:MINING_NOT_STARTED';\r\n    string constant END_OF_MINING = 'YouSwap:END_OF_MINING';\r\n    string constant POOL_NOT_EXIST_OR_END_OF_MINING = 'YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING';\r\n    \r\n}\r\n// File: localhost/contract/interface/IYouswapInviteV1.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\ninterface IYouswapInviteV1 {\r\n\r\n    struct UserInfo {\r\n        address upper;//\u4e0a\u7ea7\r\n        address[] lowers;//\u4e0b\u7ea7\r\n        uint256 startBlock;//\u9080\u8bf7\u5757\u9ad8\r\n    }\r\n\r\n    event InviteV1(address indexed owner, address indexed upper, uint256 indexed height);//\u88ab\u9080\u8bf7\u4eba\u7684\u5730\u5740\uff0c\u9080\u8bf7\u4eba\u7684\u5730\u5740\uff0c\u9080\u8bf7\u5757\u9ad8\r\n\r\n    function inviteCount() external view returns (uint256);//\u9080\u8bf7\u4eba\u6570\r\n\r\n    function inviteUpper1(address) external view returns (address);//\u4e0a\u7ea7\u9080\u8bf7\r\n\r\n    function inviteUpper2(address) external view returns (address, address);//\u4e0a\u7ea7\u9080\u8bf7\r\n\r\n    function inviteLower1(address) external view returns (address[] memory);//\u4e0b\u7ea7\u9080\u8bf7\r\n\r\n    function inviteLower2(address) external view returns (address[] memory, address[] memory);//\u4e0b\u7ea7\u9080\u8bf7\r\n\r\n    function inviteLower2Count(address) external view returns (uint256, uint256);//\u4e0b\u7ea7\u9080\u8bf7\r\n    \r\n    function register() external returns (bool);//\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\r\n\r\n    function acceptInvitation(address) external returns (bool);//\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\r\n    \r\n    function inviteBatch(address[] memory) external returns (uint, uint);//\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\uff1a\u8f93\u5165\u6570\u91cf\uff0c\u6210\u529f\u6570\u91cf\r\n\r\n}\r\n// File: localhost/contract/implement/YouswapInviteV1.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\ncontract YouswapInviteV1 is IYouswapInviteV1 {\r\n\r\n    address public constant ZERO = address(0);\r\n    uint256 public startBlock;\r\n    address[] public inviteUserInfoV1;\r\n    mapping(address => UserInfo) public inviteUserInfoV2;\r\n\r\n    constructor () {\r\n        startBlock = block.number;\r\n    }\r\n    \r\n    function inviteCount() override external view returns (uint256) {\r\n        return inviteUserInfoV1.length;\r\n    }\r\n\r\n    function inviteUpper1(address _owner) override external view returns (address) {\r\n        return inviteUserInfoV2[_owner].upper;\r\n    }\r\n\r\n    function inviteUpper2(address _owner) override external view returns (address, address) {\r\n        address upper1 = inviteUserInfoV2[_owner].upper;\r\n        address upper2 = address(0);\r\n        if (address(0) != upper1) {\r\n            upper2 = inviteUserInfoV2[upper1].upper;\r\n        }\r\n\r\n        return (upper1, upper2);\r\n    }\r\n\r\n    function inviteLower1(address _owner) override external view returns (address[] memory) {\r\n        return inviteUserInfoV2[_owner].lowers;\r\n    }\r\n\r\n    function inviteLower2(address _owner) override external view returns (address[] memory, address[] memory) {\r\n        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\r\n        uint256 count = 0;\r\n        uint256 lowers1Len = lowers1.length;\r\n        for (uint256 i = 0; i < lowers1Len; i++) {\r\n            count += inviteUserInfoV2[lowers1[i]].lowers.length;\r\n        }\r\n        address[] memory lowers;\r\n        address[] memory lowers2 = new address[](count);\r\n        count = 0;\r\n        for (uint256 i = 0; i < lowers1Len; i++) {\r\n            lowers = inviteUserInfoV2[lowers1[i]].lowers;\r\n            for (uint256 j = 0; j < lowers.length; j++) {\r\n                lowers2[count] = lowers[j];\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        return (lowers1, lowers2);\r\n    }\r\n\r\n    function inviteLower2Count(address _owner) override external view returns (uint256, uint256) {\r\n        address[] memory lowers1 = inviteUserInfoV2[_owner].lowers;\r\n        uint256 lowers2Len = 0;\r\n        uint256 len = lowers1.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            lowers2Len += inviteUserInfoV2[lowers1[i]].lowers.length;\r\n        }\r\n        \r\n        return (lowers1.length, lowers2Len);\r\n    }\r\n\r\n    function register() override external returns (bool) {\r\n        UserInfo storage user = inviteUserInfoV2[tx.origin];\r\n        require(0 == user.startBlock, ErrorCode.REGISTERED);\r\n        user.upper = ZERO;\r\n        user.startBlock = block.number;\r\n        inviteUserInfoV1.push(tx.origin);\r\n        \r\n        emit InviteV1(tx.origin, user.upper, user.startBlock);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function acceptInvitation(address _inviter) override external returns (bool) {\r\n        require(msg.sender != _inviter, ErrorCode.FORBIDDEN);\r\n        UserInfo storage user = inviteUserInfoV2[msg.sender];\r\n        require(0 == user.startBlock, ErrorCode.REGISTERED);\r\n        UserInfo storage upper = inviteUserInfoV2[_inviter];\r\n        if (0 == upper.startBlock) {\r\n            upper.upper = ZERO;\r\n            upper.startBlock = block.number;\r\n            inviteUserInfoV1.push(_inviter);\r\n            \r\n            emit InviteV1(_inviter, upper.upper, upper.startBlock);\r\n        }\r\n        user.upper = _inviter;\r\n        upper.lowers.push(msg.sender);\r\n        user.startBlock = block.number;\r\n        inviteUserInfoV1.push(msg.sender);\r\n        \r\n        emit InviteV1(msg.sender, user.upper, user.startBlock);\r\n\r\n        return true;\r\n    }\r\n\r\n    function inviteBatch(address[] memory _invitees) override external returns (uint, uint) {\r\n        uint len = _invitees.length;\r\n        require(len <= 100, ErrorCode.PARAMETER_TOO_LONG);\r\n        UserInfo storage user = inviteUserInfoV2[msg.sender];\r\n        if (0 == user.startBlock) {\r\n            user.upper = ZERO;\r\n            user.startBlock = block.number;\r\n            inviteUserInfoV1.push(msg.sender);\r\n                        \r\n            emit InviteV1(msg.sender, user.upper, user.startBlock);\r\n        }\r\n        uint count = 0;\r\n        for (uint i = 0; i < len; i++) {\r\n            if ((address(0) != _invitees[i]) && (msg.sender != _invitees[i])) {\r\n                UserInfo storage lower = inviteUserInfoV2[_invitees[i]];\r\n                if (0 == lower.startBlock) {\r\n                    lower.upper = msg.sender;\r\n                    lower.startBlock = block.number;\r\n                    user.lowers.push(_invitees[i]);\r\n                    inviteUserInfoV1.push(_invitees[i]);\r\n                    count++;\r\n\r\n                    emit InviteV1(_invitees[i], msg.sender, lower.startBlock);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (len, count);\r\n    }\r\n\r\n}\r\n// File: localhost/contract/interface/ITokenYou.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\ninterface ITokenYou {\r\n    \r\n    function mint(address recipient, uint256 amount) external;\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n}\r\n\r\n// File: localhost/contract/interface/IYouswapFactoryV2.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n/**\r\n\u6316\u77ff\r\n */\r\ninterface IYouswapFactoryV2 {\r\n\r\n    /**\r\n    \u77ff\u6c60\u53ef\u89c6\u5316\u4fe1\u606f\r\n     */\r\n    struct PoolViewInfo {\r\n        address token;//token\u5408\u7ea6\u5730\u5740\r\n        string name;//\u540d\u79f0\r\n        uint256 multiple;//\u5956\u52b1\u500d\u6570\r\n        uint256 priority;//\u6392\u5e8f\r\n    }\r\n\r\n    /**\r\n    \u77ff\u6c60\u8d28\u62bc\u4fe1\u606f\r\n     */\r\n    struct PoolStakeInfo {\r\n        uint256 startBlock;//\u6316\u77ff\u5f00\u59cb\u5757\u9ad8\r\n        address token;//token\u5408\u7ea6\u5730\u5740\r\n        uint256 amount;//\u8d28\u62bc\u6570\u91cf\r\n        uint256 lastRewardBlock;//\u6700\u540e\u53d1\u653e\u5956\u52b1\u5757\u9ad8\r\n        uint256 totalPower;//\u603b\u7b97\u529b\r\n        uint256 powerRatio;//\u8d28\u62bc\u6570\u91cf\u5230\u7b97\u529b\u7cfb\u6570\r\n        uint256 maxStakeAmount;//\u6700\u5927\u8d28\u62bc\u6570\u91cf\r\n        uint256 endBlock;//\u6316\u77ff\u7ed3\u675f\u5757\u9ad8\r\n    }\r\n    \r\n    /**\r\n    \u77ff\u6c60\u5956\u52b1\u4fe1\u606f\r\n     */\r\n    struct PoolRewardInfo {        \r\n        address token;//\u6316\u77ff\u5956\u52b1\u5e01\u79cd:A/B/C\r\n        uint256 rewardTotal;//\u77ff\u6c60\u603b\u5956\u52b1\r\n        uint256 rewardPerBlock;//\u5355\u4e2a\u533a\u5757\u5956\u52b1\r\n        uint256 rewardProvide;//\u77ff\u6c60\u5df2\u53d1\u653e\u5956\u52b1\r\n        uint256 rewardPerShare;//\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n    }\r\n\r\n    /**\r\n    \u7528\u6237\u8d28\u62bc\u4fe1\u606f\r\n     */\r\n    struct UserStakeInfo {\r\n        uint256 startBlock;//\u8d28\u62bc\u5f00\u59cb\u5757\u9ad8\r\n        uint256 amount;//\u8d28\u62bc\u6570\u91cf\r\n        uint256 invitePower;//\u9080\u8bf7\u7b97\u529b\r\n        uint256 stakePower;//\u8d28\u62bc\u7b97\u529b\r\n        uint256[] invitePendingRewards;//\u5f85\u9886\u53d6\u5956\u52b1\r\n        uint256[] stakePendingRewards;//\u5f85\u9886\u53d6\u5956\u52b1\r\n        uint256[] inviteRewardDebts;//\u9080\u8bf7\u8d1f\u503a\r\n        uint256[] stakeRewardDebts;//\u8d28\u62bc\u8d1f\u503a\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    /**\r\n    \u81ea\u9080\u8bf7\r\n    self\uff1aSender\u5730\u5740\r\n     */\r\n    event InviteRegister(address indexed self);\r\n\r\n    /**\r\n    \u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\r\n\r\n    action\uff1atrue(\u65b0\u5efa\u77ff\u6c60)\uff0cfalse(\u66f4\u65b0\u77ff\u6c60)\r\n    poolId\uff1a\u77ff\u6c60ID\r\n    name\uff1a\u77ff\u6c60\u540d\u79f0\r\n    token\uff1a\u8d28\u62bctoken\u5408\u7ea6\u5730\u5740\r\n    powerRatio\uff1a\u8d28\u62bc\u6570\u91cf\u5230\u7b97\u529b\u7cfb\u6570=\u6700\u5c0f\u8d28\u62bc\u6570\u91cf\r\n    maxStakeAmount\uff1a\u6700\u5927\u8d28\u62bc\u6570\u91cf\r\n    startBlock\uff1a\u77ff\u6c60\u5f00\u59cb\u6316\u77ff\u5757\u9ad8\r\n    multiple\uff1a\u77ff\u6c60\u5956\u52b1\u500d\u6570\r\n    priority\uff1a\u77ff\u6c60\u6392\u5e8f\r\n    tokens\uff1a\u6316\u77ff\u5956\u52b1token\u5408\u7ea6\u5730\u5740\r\n    rewardTotal\uff1a\u6316\u77ff\u603b\u5956\u52b1\u6570\u91cf\r\n    rewardPerBlock\uff1a\u533a\u5757\u5956\u52b1\u6570\u91cf\r\n     */\r\n    event UpdatePool(bool action, uint256 poolId, string name, address indexed token, uint256 powerRatio, uint256 maxStakeAmount, uint256 startBlock, uint256 multiple, uint256 priority, address[] tokens, uint256[] _rewardTotals, uint256[] rewardPerBlocks);\r\n\r\n    /**\r\n    \u77ff\u6c60\u6316\u77ff\u7ed3\u675f\r\n    \r\n    poolId\uff1a\u77ff\u6c60ID\r\n     */\r\n    event EndPool(uint256 poolId);    \r\n    \r\n    /**\r\n    \u8d28\u62bc\r\n\r\n    poolId\uff1a\u77ff\u6c60ID\r\n    token\uff1atoken\u5408\u7ea6\u5730\u5740\r\n    from\uff1a\u8d28\u62bc\u8f6c\u51fa\u5730\u5740\r\n    amount\uff1a\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    event Stake(uint256 poolId, address indexed token, address indexed from, uint256 amount);\r\n\r\n    /**\r\n    \u7b97\u529b\r\n\r\n    poolId\uff1a\u77ff\u6c60ID\r\n    token\uff1atoken\u5408\u7ea6\u5730\u5740\r\n    totalPower\uff1a\u77ff\u6c60\u603b\u7b97\u529b\r\n    owner\uff1a\u7528\u6237\u5730\u5740\r\n    ownerInvitePower\uff1a\u7528\u6237\u9080\u8bf7\u7b97\u529b\r\n    ownerStakePower\uff1a\u7528\u6237\u8d28\u62bc\u7b97\u529b\r\n    upper1\uff1a\u4e0a1\u7ea7\u5730\u5740\r\n    upper1InvitePower\uff1a\u4e0a1\u7ea7\u9080\u8bf7\u7b97\u529b\r\n    upper2\uff1a\u4e0a2\u7ea7\u5730\u5740\r\n    upper2InvitePower\uff1a\u4e0a2\u7ea7\u9080\u8bf7\u7b97\u529b\r\n     */\r\n    event UpdatePower(uint256 poolId, address token, uint256 totalPower, address indexed owner, uint256 ownerInvitePower, uint256 ownerStakePower, address indexed upper1, uint256 upper1InvitePower, address indexed upper2, uint256 upper2InvitePower);    \r\n\r\n    /**\r\n    \u89e3\u8d28\u62bc\r\n    \r\n    poolId\uff1a\u77ff\u6c60ID\r\n    token\uff1atoken\u5408\u7ea6\u5730\u5740\r\n    to\uff1a\u89e3\u8d28\u62bc\u8f6c\u5165\u5730\u5740\r\n    amount\uff1a\u89e3\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    event UnStake(uint256 poolId, address indexed token, address indexed to, uint256 amount);\r\n    \r\n    /**\r\n    \u63d0\u53d6\u5956\u52b1\r\n\r\n    poolId\uff1a\u77ff\u6c60ID\r\n    token\uff1atoken\u5408\u7ea6\u5730\u5740\r\n    to\uff1a\u5956\u52b1\u8f6c\u5165\u5730\u5740\r\n    inviteAmount\uff1a\u5956\u52b1\u6570\u91cf\r\n    stakeAmount\uff1a\u5956\u52b1\u6570\u91cf\r\n     */\r\n    event WithdrawReward(uint256 poolId, address indexed token, address indexed to, uint256 inviteAmount, uint256 stakeAmount);\r\n    \r\n    /**\r\n    \u6316\u77ff\r\n\r\n    poolId\uff1a\u77ff\u6c60ID\r\n    token\uff1atoken\u5408\u7ea6\u5730\u5740\r\n    amount\uff1a\u5956\u52b1\u6570\u91cf\r\n     */\r\n    event Mint(uint256 poolId, address indexed token, uint256 amount);\r\n\r\n    /**\r\n    \u7d27\u6025\u63d0\u53d6\u5956\u52b1\u4e8b\u4ef6\r\n\r\n    token\uff1a\u9886\u53d6token\u5408\u7ea6\u5730\u5740\r\n    to\uff1a\u9886\u53d6\u5730\u5740\r\n    amount\uff1a\u9886\u53d6token\u6570\u91cf\r\n     */\r\n    event SafeWithdraw(address indexed token, address indexed to, uint256 amount);\r\n    \r\n    /**\r\n    \u8f6c\u79fbOwner\r\n\r\n    oldOwner\uff1a\u65e7Owner\r\n    newOwner\uff1a\u65b0Owner\r\n     */\r\n    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n    \u4fee\u6539OWNER\r\n     */\r\n    function transferOwnership(address owner) external;\r\n    \r\n    /**\r\n    \u8d28\u62bc\r\n    */\r\n    function stake(uint256 poolId, uint256 amount) external;\r\n    \r\n    /**\r\n    \u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function unStake(uint256 poolId, uint256 amount) external;\r\n    \r\n    /**\r\n    \u6279\u91cf\u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function unStakes(uint256[] memory _poolIds) external;\r\n    \r\n    /**\r\n    \u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function withdrawReward(uint256 poolId) external;\r\n\r\n    /**\r\n    \u6279\u91cf\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function withdrawRewards(uint256[] memory _poolIds) external;\r\n\r\n    /**\r\n    \u7d27\u6025\u8f6c\u79fbtoken\r\n    */\r\n    function safeWithdraw(address token, address to, uint256 amount) external;\r\n        \r\n    /**\r\n    \u7b97\u529b\u5360\u6bd4\r\n     */\r\n    function powerScale(uint256 poolId, address user) external view returns (uint256, uint256);\r\n    \r\n    /**\r\n    \u5f85\u9886\u53d6\u7684\u5956\u52b1\r\n     */\r\n    function pendingRewardV2(uint256 poolId, address user) external view returns (address[] memory, uint256[] memory);\r\n    \r\n    function pendingRewardV3(uint256 poolId, address user) external view returns (address[] memory, uint256[] memory, uint256[] memory);\r\n    \r\n    /**\r\n    \u901a\u8fc7token\u67e5\u8be2\u77ff\u6c60\u7f16\u53f7\r\n     */\r\n    function poolNumbers(address token) external view returns (uint256[] memory);\r\n\r\n    /**\r\n    \u77ff\u6c60ID\r\n     */\r\n    function poolIdsV2() external view returns (uint256[] memory);\r\n    \r\n    /**\r\n    \u8d28\u62bc\u6570\u91cf\u8303\u56f4\r\n     */\r\n    function stakeRange(uint256 poolId) external view returns (uint256, uint256);\r\n    \r\n    /**\r\n    \u8d28\u62bc\u6570\u91cf\u5230\u7b97\u529b\u7cfb\u6570\r\n     */\r\n    function getPowerRatio(uint256 poolId) external view returns (uint256);\r\n\r\n    function getRewardInfo(uint256 poolId, address user, uint256 index) external view returns (uint256, uint256, uint256, uint256);\r\n    \r\n    /**\r\n    \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n     */\r\n    function setOperateOwner(address user, bool state) external;\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    /**\r\n    \u65b0\u5efa\u77ff\u6c60\r\n     */\r\n    function addPool(string memory name, address token, uint256 powerRatio, uint256 startBlock, uint256 multiple, uint256 priority, address[] memory tokens, uint256[] memory rewardTotals, uint256[] memory rewardPerBlocks) external;\r\n        \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\r\n     */\r\n    function setRewardPerBlock(uint256 poolId, address token, uint256 rewardPerBlock) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u603b\u5956\u52b1\r\n     */\r\n    function setRewardTotal(uint256 poolId, address token, uint256 rewardTotal) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u540d\u79f0\r\n     */\r\n    function setName(uint256 poolId, string memory name) external;\r\n    \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u500d\u6570\r\n     */\r\n    function setMultiple(uint256 poolId, uint256 multiple) external;\r\n    \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6392\u5e8f\r\n     */\r\n    function setPriority(uint256 poolId, uint256 priority) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6700\u5927\u53ef\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) external;\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n}\r\n// File: localhost/contract/implement/YouswapFactoryV2.sol\r\n\r\n \r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n\r\ncontract YouswapFactoryV2 is IYouswapFactoryV2 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address public constant ZERO = address(0);\r\n    uint256 public constant INVITE_SELF_REWARD = 5;//\u8d28\u62bc\u81ea\u5956\u52b1\uff0c5%\r\n    uint256 public constant INVITE1_REWARD = 15;//1\u7ea7\u9080\u8bf7\u5956\u52b1\uff0c15%\r\n    uint256 public constant INVITE2_REWARD = 10;//2\u7ea7\u9080\u8bf7\u5956\u52b1\uff0c10%\r\n    \r\n    uint256 public deployBlock;//\u5408\u7ea6\u90e8\u7f72\u5757\u9ad8\r\n    address public owner;//\u6240\u6709\u6743\u9650\r\n    mapping(address => bool) public operateOwner;//\u8fd0\u8425\u6743\u9650\r\n    ITokenYou public you;//you contract\r\n    YouswapInviteV1 public invite;//invite contract\r\n\r\n    uint256 public poolCount = 0;//\u77ff\u6c60\u6570\u91cf\r\n    uint256[] public poolIds;//\u77ff\u6c60ID\r\n    mapping(uint256 => PoolViewInfo) public poolViewInfos;//\u77ff\u6c60\u53ef\u89c6\u5316\u4fe1\u606f\uff0cpoolID->PoolViewInfo\r\n    mapping(uint256 => PoolStakeInfo) public poolStakeInfos;//\u77ff\u6c60\u8d28\u62bc\u4fe1\u606f\uff0cpoolID->PoolStakeInfo\r\n    mapping(uint256 => PoolRewardInfo[]) public poolRewardInfos;//\u77ff\u6c60\u5956\u52b1\u4fe1\u606f\uff0cpoolID->PoolRewardInfo[]\r\n    mapping(uint256 => mapping(address => UserStakeInfo)) public userStakeInfos;//\u7528\u6237\u8d28\u62bc\u4fe1\u606f\uff0cpoolID->user-UserStakeInfo\r\n    mapping(address => uint256) public tokenPendingRewards;//\u73b0\u5b58token\u5956\u52b1\u6570\u91cf\uff0ctoken-amount\r\n    mapping(address => mapping(address => uint256)) public userReceiveRewards;//\u7528\u6237\u5df2\u9886\u53d6\u6570\u91cf\uff0ctoken->user->amount\r\n    \r\n    modifier onlyOwner() {//\u6821\u9a8cowner\u6743\u9650\r\n        require(owner == msg.sender, \"YouSwap:FORBIDDEN_NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperater() {//\u6821\u9a8c\u8fd0\u8425\u6743\u9650\r\n        require(operateOwner[msg.sender], \"YouSwap:FORBIDDEN_NOT_OPERATER\");\r\n        _;\r\n    }\r\n\r\n    constructor (ITokenYou _you, YouswapInviteV1 _invite) {\r\n        deployBlock = block.number;\r\n        owner = msg.sender;\r\n        invite = _invite;\r\n        you = _you;\r\n        _setOperateOwner(owner, true);//\u7ed9owner\u6388\u6743\u8fd0\u8425\u6743\u9650\r\n    }\r\n\r\n    /**\r\n    \u4fee\u6539OWNER\r\n     */\r\n    function transferOwnership(address _owner) override external onlyOwner {\r\n        require(ZERO != _owner, \"YouSwap:INVALID_ADDRESSES\");\r\n        emit TransferOwnership(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n    \r\n    /**\r\n    \u8d28\u62bc\r\n    */\r\n    function stake(uint256 poolId, uint256 amount) override external {\r\n        require(0 < amount, \"YouSwap:PARAMETER_ERROR\");\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\r\n        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startBlock <= block.number), \"YouSwap:POOL_NOT_EXIST_OR_MINT_NOT_START\");//\u662f\u5426\u5f00\u542f\u6316\u77ff\r\n        require((poolStakeInfo.powerRatio <= amount) && (poolStakeInfo.amount.add(amount) < poolStakeInfo.maxStakeAmount), \"YouSwap:STAKE_AMOUNT_TOO_SMALL_OR_TOO_LARGE\");\r\n        (, uint256 startBlock) = invite.inviteUserInfoV2(msg.sender);//sender\u662f\u5426\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\r\n        if (0 == startBlock) {\r\n            invite.register();//sender\u6ce8\u518c\u9080\u8bf7\u5173\u7cfb\r\n            emit InviteRegister(msg.sender);\r\n        }\r\n        IERC20(poolStakeInfo.token).safeTransferFrom(msg.sender, address(this), amount);//\u8f6c\u79fbsender\u7684\u8d28\u62bc\u8d44\u4ea7\u5230this\r\n        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);//\u83b7\u53d6\u4e0a2\u7ea7\u9080\u8bf7\u5173\u7cfb\r\n        initRewardInfo(poolId, msg.sender, upper1, upper2);\r\n        uint256[] memory rewardPerShares = computeReward(poolId);//\u8ba1\u7b97\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n        provideReward(poolId, rewardPerShares, msg.sender, upper1, upper2);//\u7ed9sender\u53d1\u653e\u6536\u76ca\uff0c\u7ed9upper1\uff0cupper2\u589e\u52a0\u5f85\u9886\u53d6\u6536\u76ca\r\n        addPower(poolId, msg.sender, amount, poolStakeInfo.powerRatio, upper1, upper2);//\u589e\u52a0sender\uff0cupper1\uff0cupper2\u7b97\u529b\r\n        setRewardDebt(poolId, rewardPerShares, msg.sender, upper1, upper2);//\u91cd\u7f6esender\uff0cupper1\uff0cupper2\u8d1f\u503a\r\n        emit Stake(poolId, poolStakeInfo.token, msg.sender, amount);\r\n    }\r\n    \r\n    /**\r\n    \u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function unStake(uint256 poolId, uint256 amount) override external {\r\n        _unStake(poolId, amount);\r\n    }\r\n    \r\n    /**\r\n    \u6279\u91cf\u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function unStakes(uint256[] memory _poolIds) override external {\r\n        require((0 < _poolIds.length) && (50 >= _poolIds.length), \"YouSwap:PARAMETER_ERROR_TOO_SHORT_OR_LONG\");\r\n        uint256 amount;\r\n        uint256 poolId;\r\n        for(uint i = 0; i < _poolIds.length; i++) {\r\n            poolId = _poolIds[i];\r\n            amount = userStakeInfos[poolId][msg.sender].amount;//sender\u7684\u8d28\u62bc\u6570\u91cf\r\n            if (0 < amount) {\r\n                _unStake(poolId, amount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n    \u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function withdrawReward(uint256 poolId) override external {\r\n        _withdrawReward(poolId);\r\n    }\r\n\r\n    /**\r\n    \u6279\u91cf\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function withdrawRewards(uint256[] memory _poolIds) override external {\r\n        require((0 < _poolIds.length) && (50 >= _poolIds.length), \"YouSwap:PARAMETER_ERROR_TOO_SHORT_OR_LONG\");\r\n        for(uint i = 0; i < _poolIds.length; i++) {\r\n            _withdrawReward(_poolIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u7d27\u6025\u8f6c\u79fbtoken\r\n    */\r\n    function safeWithdraw(address token, address to, uint256 amount) override external onlyOwner {\r\n        require((ZERO != token) && (ZERO != to) && (0 < amount), \"YouSwap:ZERO_ADDRESS_OR_ZERO_AMOUNT\");\r\n        require(IERC20(token).balanceOf(address(this)) >= amount, \"YouSwap:BALANCE_INSUFFICIENT\");\r\n        IERC20(token).safeTransfer(to, amount);//\u7d27\u6025\u8f6c\u79fb\u8d44\u4ea7\u5230to\u5730\u5740\r\n        emit SafeWithdraw(token, to, amount);\r\n    }\r\n    \r\n    /**\r\n    \u7b97\u529b\u5360\u6bd4\r\n     */\r\n    function powerScale(uint256 poolId, address user) override external view returns (uint256, uint256) {\r\n        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\r\n        if (0 == poolStakeInfo.totalPower) {\r\n            return (0, 0);\r\n        }\r\n        UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\r\n        return (userStakeInfo.invitePower.add(userStakeInfo.stakePower), poolStakeInfo.totalPower);\r\n    }\r\n    \r\n    /**\r\n    \u5f85\u9886\u53d6\u7684\u5956\u52b1\r\n     */\r\n    function pendingRewardV2(uint256 poolId, address user) override external view returns (address[] memory, uint256[] memory) {\r\n        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\r\n        address[] memory tokens = new address[](_poolRewardInfos.length);\r\n        uint256[] memory pendingRewards = new uint256[](_poolRewardInfos.length);\r\n        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\r\n        if (ZERO != poolStakeInfo.token) {\r\n            uint256 totalReward = 0;\r\n            uint256 rewardPre;\r\n            UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\r\n            for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n                PoolRewardInfo memory poolRewardInfo = _poolRewardInfos[i];\r\n                if (poolStakeInfo.startBlock <= block.number) {\r\n                    totalReward = 0;\r\n                    if (userStakeInfo.invitePendingRewards.length == _poolRewardInfos.length) {\r\n                        if (0 < poolStakeInfo.totalPower) {\r\n                            rewardPre = block.number.sub(poolStakeInfo.lastRewardBlock).mul(poolRewardInfo.rewardPerBlock);//\u5f85\u5feb\u7167\u5956\u52b1\r\n                            if (poolRewardInfo.rewardProvide.add(rewardPre) >= poolRewardInfo.rewardTotal) {//\u662f\u5426\u8d85\u51fa\u603b\u5956\u52b1\r\n                                rewardPre = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide);//\u6838\u51cf\u8d85\u51fa\u5956\u52b1\r\n                            }\r\n                            poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(rewardPre.mul(1e24).div(poolStakeInfo.totalPower));//\u7d2f\u52a0\u5f85\u5feb\u7167\u7684\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n                        }\r\n                        totalReward = userStakeInfo.invitePendingRewards[i];//\u5f85\u9886\u53d6\u5956\u52b1\r\n                        totalReward = totalReward.add(userStakeInfo.stakePendingRewards[i]);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                        totalReward = totalReward.add(userStakeInfo.invitePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.inviteRewardDebts[i]).div(1e24));//\u5f85\u5feb\u7167\u7684\u9080\u8bf7\u5956\u52b1\r\n                        totalReward = totalReward.add(userStakeInfo.stakePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.stakeRewardDebts[i]).div(1e24));//\u5f85\u5feb\u7167\u7684\u8d28\u62bc\u5956\u52b1\r\n                    }\r\n                    pendingRewards[i] = totalReward;\r\n                }\r\n                tokens[i] = poolRewardInfo.token;\r\n            }\r\n        }\r\n\r\n        return (tokens, pendingRewards);\r\n    }\r\n\r\n    /**\r\n    \u5f85\u9886\u53d6\u7684\u5956\u52b1\r\n     */\r\n    function pendingRewardV3(uint256 poolId, address user) override external view returns (address[] memory, uint256[] memory, uint256[] memory) {\r\n        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\r\n        address[] memory tokens = new address[](_poolRewardInfos.length);\r\n        uint256[] memory invitePendingRewards = new uint256[](_poolRewardInfos.length);\r\n        uint256[] memory stakePendingRewards = new uint256[](_poolRewardInfos.length);\r\n        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\r\n        if (ZERO != poolStakeInfo.token) {\r\n            uint256 inviteReward = 0;\r\n            uint256 stakeReward = 0;\r\n            uint256 rewardPre;\r\n            UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\r\n            for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n                PoolRewardInfo memory poolRewardInfo = _poolRewardInfos[i];\r\n                if (poolStakeInfo.startBlock <= block.number) {\r\n                    inviteReward = 0;\r\n                    stakeReward = 0;\r\n                    if (userStakeInfo.invitePendingRewards.length == _poolRewardInfos.length) {\r\n                        if (0 < poolStakeInfo.totalPower) {\r\n                            rewardPre = block.number.sub(poolStakeInfo.lastRewardBlock).mul(poolRewardInfo.rewardPerBlock);//\u5f85\u5feb\u7167\u5956\u52b1\r\n                            if (poolRewardInfo.rewardProvide.add(rewardPre) >= poolRewardInfo.rewardTotal) {//\u662f\u5426\u8d85\u51fa\u603b\u5956\u52b1\r\n                                rewardPre = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide);//\u6838\u51cf\u8d85\u51fa\u5956\u52b1\r\n                            }\r\n                            poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(rewardPre.mul(1e24).div(poolStakeInfo.totalPower));//\u7d2f\u52a0\u5f85\u5feb\u7167\u7684\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n                        }\r\n                        inviteReward = userStakeInfo.invitePendingRewards[i];//\u5f85\u9886\u53d6\u5956\u52b1\r\n                        stakeReward = userStakeInfo.stakePendingRewards[i];//\u5f85\u9886\u53d6\u5956\u52b1\r\n                        inviteReward = inviteReward.add(userStakeInfo.invitePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.inviteRewardDebts[i]).div(1e24));//\u5f85\u5feb\u7167\u7684\u9080\u8bf7\u5956\u52b1\r\n                        stakeReward = stakeReward.add(userStakeInfo.stakePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.stakeRewardDebts[i]).div(1e24));//\u5f85\u5feb\u7167\u7684\u8d28\u62bc\u5956\u52b1\r\n                    }\r\n                    invitePendingRewards[i] = inviteReward;\r\n                    stakePendingRewards[i] = stakeReward;\r\n                }\r\n                tokens[i] = poolRewardInfo.token;\r\n            }\r\n        }\r\n\r\n        return (tokens, invitePendingRewards, stakePendingRewards);\r\n    }\r\n    \r\n    /**\r\n    \u901a\u8fc7token\u67e5\u8be2\u77ff\u6c60\u7f16\u53f7\r\n     */\r\n    function poolNumbers(address token) override external view returns (uint256[] memory) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < poolIds.length; i++) {\r\n            if (poolViewInfos[poolIds[i]].token == token) {\r\n                count = count.add(1);\r\n            }\r\n        }\r\n        uint256[] memory ids = new uint256[](count);\r\n        count = 0;\r\n        for (uint i = 0; i < poolIds.length; i++) {\r\n            if (poolViewInfos[poolIds[i]].token == token) {\r\n                ids[count] = poolIds[i];\r\n                count = count.add(1);\r\n            }\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    /**\r\n    \u77ff\u6c60ID\r\n     */\r\n    function poolIdsV2() override external view returns (uint256[] memory) {\r\n        return poolIds;\r\n    }\r\n\r\n    /**\r\n    \u8d28\u62bc\u6570\u91cf\u8303\u56f4\r\n     */    \r\n    function stakeRange(uint256 poolId) override external view returns (uint256, uint256) {\r\n        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\r\n        if (ZERO == poolStakeInfo.token) {\r\n            return (0, 0);\r\n        }\r\n        return (poolStakeInfo.powerRatio, poolStakeInfo.maxStakeAmount.sub(poolStakeInfo.amount));\r\n    }\r\n    \r\n    /**\r\n    \u8d28\u62bc\u6570\u91cf\u5230\u7b97\u529b\u7cfb\u6570\r\n     */\r\n    function getPowerRatio(uint256 poolId) override external view returns (uint256) {\r\n        return poolStakeInfos[poolId].powerRatio;\r\n    }\r\n    \r\n    function getRewardInfo(uint256 poolId, address user, uint256 index) override external view returns (uint256, uint256, uint256, uint256) {\r\n        UserStakeInfo memory userStakeInfo = userStakeInfos[poolId][user];\r\n        return (userStakeInfo.invitePendingRewards[index], userStakeInfo.stakePendingRewards[index], userStakeInfo.inviteRewardDebts[index], userStakeInfo.stakeRewardDebts[index]);\r\n    }\r\n\r\n    /**\r\n    \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n     */\r\n    function setOperateOwner(address user, bool state) override external onlyOwner {\r\n        _setOperateOwner(user, state);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////    \r\n    \r\n    /**\r\n    \u65b0\u5efa\u77ff\u6c60\r\n     */\r\n    function addPool(string memory name, address token, uint256 powerRatio, uint256 startBlock, uint256 multiple, uint256 priority, address[] memory tokens, uint256[] memory _rewardTotals, uint256[] memory rewardPerBlocks) override external onlyOperater {\r\n        require((ZERO != token) && (address(this) != token), \"YouSwap:PARAMETER_ERROR_TOKEN\");\r\n        require(0 < powerRatio, \"YouSwap:POWERRATIO_MUST_GREATER_THAN_ZERO\");\r\n        require((0 < tokens.length) && (10 >= tokens.length) && (tokens.length == _rewardTotals.length) && (tokens.length == rewardPerBlocks.length), \"YouSwap:PARAMETER_ERROR_REWARD\");\r\n        startBlock = startBlock < block.number ? block.number : startBlock;//\u5408\u6cd5\u5f00\u59cb\u5757\u9ad8\r\n        uint256 poolId = poolCount.add(20000000);//\u77ff\u6c60ID\uff0c\u504f\u79fb20000000\uff0c\u4e0ev1\u533a\u5206\u5f00\r\n        poolIds.push(poolId);//\u5168\u90e8\u77ff\u6c60ID\r\n        poolCount = poolCount.add(1);//\u77ff\u6c60\u603b\u6570\u91cf\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];//\u77ff\u6c60\u53ef\u89c6\u5316\u4fe1\u606f\r\n        poolViewInfo.token = token;//\u77ff\u6c60\u8d28\u62bctoken\r\n        poolViewInfo.name = name;//\u77ff\u6c60\u540d\u79f0\r\n        poolViewInfo.multiple = multiple;//\u77ff\u6c60\u500d\u6570\r\n        if (0 < priority) {\r\n            poolViewInfo.priority = priority;//\u77ff\u6c60\u4f18\u5148\u7ea7\r\n        }else {\r\n            poolViewInfo.priority = poolIds.length.mul(100).add(75);//\u77ff\u6c60\u4f18\u5148\u7ea7\r\n        }\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];//\u77ff\u6c60\u8d28\u62bc\u4fe1\u606f\r\n        poolStakeInfo.startBlock = startBlock;//\u5f00\u59cb\u5757\u9ad8\r\n        poolStakeInfo.token = token;//\u77ff\u6c60\u8d28\u62bctoken\r\n        poolStakeInfo.amount = 0;//\u77ff\u6c60\u8d28\u62bc\u6570\u91cf\r\n        poolStakeInfo.lastRewardBlock = startBlock.sub(1);//\u77ff\u6c60\u4e0a\u6b21\u5feb\u7167\u5757\u9ad8\r\n        poolStakeInfo.totalPower = 0;//\u77ff\u6c60\u603b\u7b97\u529b\r\n        poolStakeInfo.powerRatio = powerRatio;//\u8d28\u62bc\u6570\u91cf\u5230\u7b97\u529b\u7cfb\u6570\r\n        poolStakeInfo.maxStakeAmount = 0;//\u6700\u5927\u8d28\u62bc\u6570\u91cf\r\n        poolStakeInfo.endBlock = 0;//\u77ff\u6c60\u7ed3\u675f\u5757\u9ad8\r\n        uint256 minRewardPerBlock = uint256(0) - uint256(1);//\u6700\u5c0f\u533a\u5757\u5956\u52b1\r\n        for(uint i = 0; i < tokens.length; i++) {\r\n            require((ZERO != tokens[i]) && (address(this) != tokens[i]), \"YouSwap:PARAMETER_ERROR_TOKEN\");\r\n            require(0 < _rewardTotals[i], \"YouSwap:PARAMETER_ERROR_REWARD_TOTAL\");\r\n            require(0 < rewardPerBlocks[i], \"YouSwap:PARAMETER_ERROR_REWARD_PER_BLOCK\");\r\n            if (address(you) != tokens[i]) {//\u975eyou\u5956\u52b1\r\n                tokenPendingRewards[tokens[i]] = tokenPendingRewards[tokens[i]].add(_rewardTotals[i]);\r\n                require(IERC20(tokens[i]).balanceOf(address(this)) >= tokenPendingRewards[tokens[i]], \"YouSwap:BALANCE_INSUFFICIENT\");//\u5956\u52b1\u6570\u91cf\u662f\u5426\u8db3\u989d\r\n            }\r\n            PoolRewardInfo memory poolRewardInfo;//\u77ff\u6c60\u5956\u52b1\u4fe1\u606f\r\n            poolRewardInfo.token = tokens[i];//\u5956\u52b1token\r\n            poolRewardInfo.rewardTotal = _rewardTotals[i];//\u603b\u5956\u52b1\r\n            poolRewardInfo.rewardPerBlock = rewardPerBlocks[i];//\u533a\u5757\u5956\u52b1\r\n            poolRewardInfo.rewardProvide = 0;//\u5df2\u53d1\u653e\u5956\u52b1\r\n            poolRewardInfo.rewardPerShare = 0;//\u5355\u4f4d\u7b97\u529b\u7b80\u5386\r\n            poolRewardInfos[poolId].push(poolRewardInfo);\r\n            if (minRewardPerBlock > poolRewardInfo.rewardPerBlock) {\r\n                minRewardPerBlock = poolRewardInfo.rewardPerBlock;\r\n                poolStakeInfo.maxStakeAmount = minRewardPerBlock.mul(1e24).mul(poolStakeInfo.powerRatio).div(13);\r\n            }\r\n        }\r\n        sendUpdatePoolEvent(true, poolId);\r\n    }\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\r\n     */\r\n    function setRewardPerBlock(uint256 poolId, address token, uint256 rewardPerBlock) override external onlyOperater {\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\r\n        require((ZERO != poolStakeInfo.token) && (0 == poolStakeInfo.endBlock), \"YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING\");//\u77ff\u6c60\u662f\u5426\u5b58\u5728\u3001\u662f\u5426\u7ed3\u675f\r\n        computeReward(poolId);//\u8ba1\u7b97\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n        uint256 minRewardPerBlock = uint256(0) - uint256(1);//\u6700\u5c0f\u533a\u5757\u5956\u52b1\r\n        PoolRewardInfo[] storage _poolRewardInfos = poolRewardInfos[poolId];\r\n        for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n            if (_poolRewardInfos[i].token == token) {\r\n                _poolRewardInfos[i].rewardPerBlock = rewardPerBlock;//\u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\r\n                sendUpdatePoolEvent(false, poolId);//\u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\u4e8b\u4ef6\r\n            }\r\n            if (minRewardPerBlock > _poolRewardInfos[i].rewardPerBlock) {\r\n                minRewardPerBlock = _poolRewardInfos[i].rewardPerBlock;\r\n                poolStakeInfo.maxStakeAmount = minRewardPerBlock.mul(1e24).mul(poolStakeInfo.powerRatio).div(13);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u603b\u5956\u52b1\r\n     */\r\n    function setRewardTotal(uint256 poolId, address token, uint256 rewardTotal) override external onlyOperater {\r\n        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\r\n        require((ZERO != poolStakeInfo.token) && (0 == poolStakeInfo.endBlock), \"YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING\");//\u77ff\u6c60\u662f\u5426\u5b58\u5728\u3001\u662f\u5426\u7ed3\u675f\r\n        computeReward(poolId);//\u8ba1\u7b97\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n        PoolRewardInfo[] storage _poolRewardInfos = poolRewardInfos[poolId];\r\n        for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n            if (_poolRewardInfos[i].token == token) {\r\n                require(_poolRewardInfos[i].rewardProvide <= rewardTotal, \"YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE\");//\u65b0\u603b\u5956\u52b1\u662f\u5426\u8d85\u51fa\u5df2\u53d1\u653e\u5956\u52b1\r\n                if (address(you) != token) {//\u975eyou\r\n                    if (_poolRewardInfos[i].rewardTotal > rewardTotal) {//\u65b0\u603b\u5956\u52b1\u5c0f\u4e8e\u65e7\u603b\u5956\u52b1\r\n                        tokenPendingRewards[token] = tokenPendingRewards[token].sub(_poolRewardInfos[i].rewardTotal.sub(rewardTotal));//\u51cf\u5c11\u65b0\u65e7\u5dee\u989d\r\n                    }else {//\u65b0\u603b\u5956\u52b1\u5927\u4e8e\u65e7\u603b\u5956\u52b1\r\n                        tokenPendingRewards[token] = tokenPendingRewards[token].add(rewardTotal.sub(_poolRewardInfos[i].rewardTotal));//\u589e\u52a0\u65b0\u65e7\u5dee\u989d\r\n                    }\r\n                    require(IERC20(token).balanceOf(address(this)) >= tokenPendingRewards[token], \"YouSwap:BALANCE_INSUFFICIENT\");//\u5956\u52b1\u6570\u91cf\u662f\u5426\u8db3\u989d\r\n                }\r\n                _poolRewardInfos[i].rewardTotal = rewardTotal;//\u4fee\u6539\u77ff\u6c60\u603b\u5956\u52b1\r\n                sendUpdatePoolEvent(false, poolId);//\u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\u4e8b\u4ef6\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u540d\u79f0\r\n     */\r\n    function setName(uint256 poolId, string memory name) override external onlyOperater {\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];\r\n        require(ZERO != poolViewInfo.token, \"YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING\");//\u77ff\u6c60\u662f\u5426\u5b58\u5728\r\n        poolViewInfo.name = name;//\u4fee\u6539\u77ff\u6c60\u540d\u79f0\r\n        sendUpdatePoolEvent(false, poolId);//\u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\u4e8b\u4ef6\r\n    }\r\n    \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u500d\u6570\r\n     */\r\n    function setMultiple(uint256 poolId, uint256 multiple) override external onlyOperater {\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];\r\n        require(ZERO != poolViewInfo.token, \"YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING\");//\u77ff\u6c60\u662f\u5426\u5b58\u5728\r\n        poolViewInfo.multiple = multiple;//\u4fee\u6539\u77ff\u6c60\u500d\u6570\r\n        sendUpdatePoolEvent(false, poolId);//\u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\u4e8b\u4ef6\r\n    }\r\n    \r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6392\u5e8f\r\n     */\r\n    function setPriority(uint256 poolId, uint256 priority) override external onlyOperater {\r\n        PoolViewInfo storage poolViewInfo = poolViewInfos[poolId];\r\n        require(ZERO != poolViewInfo.token, \"YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING\");//\u77ff\u6c60\u662f\u5426\u5b58\u5728\r\n        poolViewInfo.priority = priority;//\u4fee\u6539\u77ff\u6c60\u6392\u5e8f\r\n        sendUpdatePoolEvent(false, poolId);//\u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\u4e8b\u4ef6\r\n    }\r\n    \r\n    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) override external onlyOperater {\r\n        uint256 _maxStakeAmount;\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\r\n        require((ZERO != poolStakeInfo.token) && (0 == poolStakeInfo.endBlock), \"YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING\");//\u77ff\u6c60\u662f\u5426\u5b58\u5728\u3001\u662f\u5426\u7ed3\u675f\r\n        uint256 minRewardPerBlock = uint256(0) - uint256(1);//\u6700\u5c0f\u533a\u5757\u5956\u52b1\r\n        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\r\n        for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n            if (minRewardPerBlock > _poolRewardInfos[i].rewardPerBlock) {\r\n                minRewardPerBlock = _poolRewardInfos[i].rewardPerBlock;\r\n                _maxStakeAmount = minRewardPerBlock.mul(1e24).mul(poolStakeInfo.powerRatio).div(13);\r\n            }\r\n        }\r\n        require(poolStakeInfo.powerRatio <= maxStakeAmount && poolStakeInfo.amount <= maxStakeAmount && maxStakeAmount <= _maxStakeAmount, \"YouSwap:MAX_STAKE_AMOUNT_INVALID\");\r\n        poolStakeInfo.maxStakeAmount = maxStakeAmount;\r\n        sendUpdatePoolEvent(false, poolId);//\u66f4\u65b0\u77ff\u6c60\u4fe1\u606f\u4e8b\u4ef6\r\n    }\r\n\r\n    \r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    function _setOperateOwner(address user, bool state) internal onlyOwner {\r\n        operateOwner[user] = state;//\u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n    }\r\n\r\n    /**\r\n    \u8ba1\u7b97\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n     */\r\n    function computeReward(uint256 poolId) internal returns (uint256[] memory) {\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\r\n        PoolRewardInfo[] storage _poolRewardInfos = poolRewardInfos[poolId];\r\n        uint256[] memory rewardPerShares = new uint256[](_poolRewardInfos.length);\r\n        if (0 < poolStakeInfo.totalPower) {//\u6709\u7b97\u529b\u624d\u80fd\u53d1\u5956\u52b1\r\n            uint finishRewardCount = 0;\r\n            uint256 reward = 0;\r\n            uint256 blockCount = block.number.sub(poolStakeInfo.lastRewardBlock);//\u5f85\u53d1\u653e\u7684\u533a\u5757\u6570\u91cf\r\n            for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n                PoolRewardInfo storage poolRewardInfo = _poolRewardInfos[i];//\u77ff\u6c60\u5956\u52b1\u4fe1\u606f\r\n                reward = blockCount.mul(poolRewardInfo.rewardPerBlock);//\u4e24\u6b21\u5feb\u7167\u4e4b\u95f4\u603b\u5956\u52b1\r\n                if (poolRewardInfo.rewardProvide.add(reward) >= poolRewardInfo.rewardTotal) {//\u662f\u5426\u8d85\u51fa\u603b\u5956\u52b1\u6570\u91cf\r\n                    reward = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide);//\u6838\u51cf\u8d85\u51fa\u5956\u52b1\r\n                    finishRewardCount = finishRewardCount.add(1);//\u6316\u77ff\u7ed3\u675ftoken\u8ba1\u6570\r\n                }\r\n                poolRewardInfo.rewardProvide = poolRewardInfo.rewardProvide.add(reward);//\u66f4\u65b0\u5df2\u53d1\u653e\u5956\u52b1\u6570\u91cf\r\n                poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(reward.mul(1e24).div(poolStakeInfo.totalPower));//\u66f4\u65b0\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n                rewardPerShares[i] = poolRewardInfo.rewardPerShare;\r\n                if (0 < reward) {\r\n                    emit Mint(poolId, poolRewardInfo.token, reward);//\u6316\u77ff\u4e8b\u4ef6\r\n                }\r\n            }\r\n            poolStakeInfo.lastRewardBlock = block.number;//\u66f4\u65b0\u5feb\u7167\u5757\u9ad8\r\n            if (finishRewardCount == _poolRewardInfos.length) {//\u662f\u5426\u6316\u77ff\u7ed3\u675f\r\n                poolStakeInfo.endBlock = block.number;//\u6316\u77ff\u7ed3\u675f\u5757\u9ad8\r\n                emit EndPool(poolId);//\u6316\u77ff\u7ed3\u675f\u4e8b\u4ef6\r\n            }\r\n        }else {\r\n            for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n                rewardPerShares[i] = _poolRewardInfos[i].rewardPerShare;\r\n            }\r\n        }\r\n        return rewardPerShares;\r\n    }\r\n    \r\n    /**\r\n    \u589e\u52a0\u7b97\u529b\r\n     */\r\n    function addPower(uint256 poolId, address user, uint256 amount, uint256 powerRatio, address upper1, address upper2) internal {\r\n        uint256 power = amount.div(powerRatio);\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];//\u77ff\u6c60\u8d28\u62bc\u4fe1\u606f\r\n        poolStakeInfo.amount = poolStakeInfo.amount.add(amount);//\u66f4\u65b0\u77ff\u6c60\u8d28\u62bc\u6570\u91cf\r\n        poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(power);//\u66f4\u65b0\u77ff\u6c60\u603b\u7b97\u529b\r\n        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];//sender\u8d28\u62bc\u4fe1\u606f\r\n        userStakeInfo.amount = userStakeInfo.amount.add(amount);//\u66f4\u65b0sender\u8d28\u62bc\u6570\u91cf\r\n        userStakeInfo.stakePower = userStakeInfo.stakePower.add(power);//\u66f4\u65b0sender\u8d28\u62bc\u7b97\u529b\r\n        if (0 == userStakeInfo.startBlock) {\r\n            userStakeInfo.startBlock = block.number;//\u6316\u77ff\u5f00\u59cb\u5757\u9ad8\r\n        }\r\n        uint256 upper1InvitePower = 0;//upper1\u9080\u8bf7\u7b97\u529b\r\n        uint256 upper2InvitePower = 0;//upper2\u9080\u8bf7\u7b97\u529b\r\n        if (ZERO != upper1) {\r\n            uint256 inviteSelfPower = power.mul(INVITE_SELF_REWARD).div(100);//\u65b0\u589esender\u81ea\u9080\u8bf7\u7b97\u529b\r\n            userStakeInfo.invitePower = userStakeInfo.invitePower.add(inviteSelfPower);//\u66f4\u65b0sender\u9080\u8bf7\u7b97\u529b\r\n            poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(inviteSelfPower);//\u66f4\u65b0\u77ff\u6c60\u603b\u7b97\u529b\r\n            uint256 invite1Power = power.mul(INVITE1_REWARD).div(100);//\u65b0\u589eupper1\u9080\u8bf7\u7b97\u529b\r\n            UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];//upper1\u8d28\u62bc\u4fe1\u606f\r\n            upper1StakeInfo.invitePower = upper1StakeInfo.invitePower.add(invite1Power);//\u66f4\u65b0upper1\u9080\u8bf7\u7b97\u529b\r\n            upper1InvitePower = upper1StakeInfo.invitePower;\r\n            poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(invite1Power);//\u66f4\u65b0\u77ff\u6c60\u603b\u7b97\u529b\r\n            if (0 == upper1StakeInfo.startBlock) {\r\n                upper1StakeInfo.startBlock = block.number;//\u6316\u77ff\u5f00\u59cb\u5757\u9ad8\r\n            }\r\n            \r\n        }\r\n        if (ZERO != upper2) {\r\n            uint256 invite2Power = power.mul(INVITE2_REWARD).div(100);//\u65b0\u589eupper2\u9080\u8bf7\u7b97\u529b\r\n            UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];//upper2\u8d28\u62bc\u4fe1\u606f\r\n            upper2StakeInfo.invitePower = upper2StakeInfo.invitePower.add(invite2Power);//\u66f4\u65b0upper2\u9080\u8bf7\u7b97\u529b\r\n            upper2InvitePower = upper2StakeInfo.invitePower;\r\n            poolStakeInfo.totalPower = poolStakeInfo.totalPower.add(invite2Power);//\u66f4\u65b0\u77ff\u6c60\u603b\u7b97\u529b\r\n            if (0 == upper2StakeInfo.startBlock) {\r\n                upper2StakeInfo.startBlock = block.number;//\u6316\u77ff\u5f00\u59cb\u5757\u9ad8\r\n            }\r\n        }\r\n        emit UpdatePower(poolId, poolStakeInfo.token, poolStakeInfo.totalPower, user, userStakeInfo.invitePower, userStakeInfo.stakePower, upper1, upper1InvitePower, upper2, upper2InvitePower);//\u66f4\u65b0\u7b97\u529b\u4e8b\u4ef6\r\n    }\r\n\r\n    /**\r\n    \u51cf\u5c11\u7b97\u529b\r\n     */\r\n    function subPower(uint256 poolId, address user, uint256 amount, uint256 powerRatio, address upper1, address upper2) internal {\r\n        uint256 power = amount.div(powerRatio);\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];//\u77ff\u6c60\u8d28\u62bc\u4fe1\u606f\r\n        if (poolStakeInfo.amount <= amount) {\r\n            poolStakeInfo.amount = 0;//\u51cf\u5c11\u77ff\u6c60\u603b\u8d28\u62bc\u6570\u91cf\r\n        }else {\r\n            poolStakeInfo.amount = poolStakeInfo.amount.sub(amount);//\u51cf\u5c11\u77ff\u6c60\u603b\u8d28\u62bc\u6570\u91cf\r\n        }\r\n        if (poolStakeInfo.totalPower <= power) {\r\n            poolStakeInfo.totalPower = 0;//\u51cf\u5c11\u77ff\u6c60\u603b\u7b97\u529b\r\n        }else {\r\n            poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(power);//\u51cf\u5c11\u77ff\u6c60\u603b\u7b97\u529b\r\n        }\r\n        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];//sender\u8d28\u62bc\u4fe1\u606f\r\n        userStakeInfo.amount = userStakeInfo.amount.sub(amount);//\u51cf\u5c11sender\u8d28\u62bc\u6570\u91cf\r\n        if (userStakeInfo.stakePower <= power) {\r\n            userStakeInfo.stakePower = 0;//\u51cf\u5c11sender\u8d28\u62bc\u7b97\u529b\r\n        }else {\r\n            userStakeInfo.stakePower = userStakeInfo.stakePower.sub(power);//\u51cf\u5c11sender\u8d28\u62bc\u7b97\u529b\r\n        }\r\n        uint256 upper1InvitePower = 0;\r\n        uint256 upper2InvitePower = 0;\r\n        if (ZERO != upper1) {\r\n            uint256 inviteSelfPower = power.mul(INVITE_SELF_REWARD).div(100);//sender\u81ea\u9080\u8bf7\u7b97\u529b\r\n            if (poolStakeInfo.totalPower <= inviteSelfPower) {\r\n                poolStakeInfo.totalPower = 0;//\u51cf\u5c11\u77ff\u6c60sender\u81ea\u9080\u8bf7\u7b97\u529b\r\n            }else {\r\n                poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(inviteSelfPower);//\u51cf\u5c11\u77ff\u6c60sender\u81ea\u9080\u8bf7\u7b97\u529b\r\n            }\r\n            if (userStakeInfo.invitePower <= inviteSelfPower) {\r\n                userStakeInfo.invitePower = 0;//\u51cf\u5c11sender\u81ea\u9080\u8bf7\u7b97\u529b\r\n            }else {\r\n                userStakeInfo.invitePower = userStakeInfo.invitePower.sub(inviteSelfPower);//\u51cf\u5c11sender\u81ea\u9080\u8bf7\u7b97\u529b\r\n            }\r\n            uint256 invite1Power = power.mul(INVITE1_REWARD).div(100);//upper1\u9080\u8bf7\u7b97\u529b\r\n            if (poolStakeInfo.totalPower <= invite1Power) {\r\n                poolStakeInfo.totalPower = 0;//\u51cf\u5c11\u77ff\u6c60upper1\u9080\u8bf7\u7b97\u529b\r\n            }else {\r\n                poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(invite1Power);//\u51cf\u5c11\u77ff\u6c60upper1\u9080\u8bf7\u7b97\u529b\r\n            }\r\n            UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\r\n            if (upper1StakeInfo.invitePower <= invite1Power) {\r\n                upper1StakeInfo.invitePower = 0;//\u51cf\u5c11upper1\u9080\u8bf7\u7b97\u529b\r\n            }else {\r\n                upper1StakeInfo.invitePower = upper1StakeInfo.invitePower.sub(invite1Power);//\u51cf\u5c11upper1\u9080\u8bf7\u7b97\u529b\r\n            }\r\n            upper1InvitePower = upper1StakeInfo.invitePower;\r\n        }\r\n        if (ZERO != upper2) {\r\n                uint256 invite2Power = power.mul(INVITE2_REWARD).div(100);//upper2\u9080\u8bf7\u7b97\u529b\r\n                if (poolStakeInfo.totalPower <= invite2Power) {\r\n                    poolStakeInfo.totalPower = 0;//\u51cf\u5c11\u77ff\u6c60upper2\u9080\u8bf7\u7b97\u529b\r\n                }else {\r\n                    poolStakeInfo.totalPower = poolStakeInfo.totalPower.sub(invite2Power);//\u51cf\u5c11\u77ff\u6c60upper2\u9080\u8bf7\u7b97\u529b\r\n                }\r\n                UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\r\n                if (upper2StakeInfo.invitePower <= invite2Power) {\r\n                    upper2StakeInfo.invitePower = 0;//\u51cf\u5c11upper2\u9080\u8bf7\u7b97\u529b\r\n                }else {\r\n                    upper2StakeInfo.invitePower = upper2StakeInfo.invitePower.sub(invite2Power);//\u51cf\u5c11upper2\u9080\u8bf7\u7b97\u529b\r\n                }\r\n                upper2InvitePower = upper2StakeInfo.invitePower;\r\n        }\r\n        emit UpdatePower(poolId, poolStakeInfo.token, poolStakeInfo.totalPower, user, userStakeInfo.invitePower, userStakeInfo.stakePower, upper1, upper1InvitePower, upper2, upper2InvitePower);\r\n    }\r\n    \r\n    /**\r\n    //\u7ed9sender\u53d1\u653e\u6536\u76ca\uff0c\u7ed9upper1\uff0cupper2\u589e\u52a0\u5f85\u9886\u53d6\u6536\u76ca\r\n     */\r\n    function provideReward(uint256 poolId, uint256[] memory rewardPerShares, address user, address upper1, address upper2) internal {\r\n        uint256 reward = 0;\r\n        uint256 inviteReward = 0;\r\n        uint256 stakeReward = 0;\r\n        uint256 rewardPerShare = 0;\r\n        address token;\r\n        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];\r\n        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\r\n        for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n            token = _poolRewardInfos[i].token;//\u6316\u77ff\u5956\u52b1token\r\n            rewardPerShare = rewardPerShares[i];//\u5355\u4f4d\u7b97\u529b\u5956\u52b1\u7cfb\u6570\r\n            if ((0 < userStakeInfo.invitePower) || (0 < userStakeInfo.stakePower)) {\r\n                inviteReward = userStakeInfo.invitePower.mul(rewardPerShare).sub(userStakeInfo.inviteRewardDebts[i]).div(1e24);//\u9080\u8bf7\u5956\u52b1\r\n                stakeReward = userStakeInfo.stakePower.mul(rewardPerShare).sub(userStakeInfo.stakeRewardDebts[i]).div(1e24);//\u8d28\u62bc\u5956\u52b1\r\n                inviteReward = userStakeInfo.invitePendingRewards[i].add(inviteReward);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                stakeReward = userStakeInfo.stakePendingRewards[i].add(stakeReward);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                reward = inviteReward.add(stakeReward);\r\n            }\r\n            if (0 < reward) {\r\n                userStakeInfo.invitePendingRewards[i] = 0;//\u91cd\u7f6e\u5f85\u9886\u53d6\u5956\u52b1\r\n                userStakeInfo.stakePendingRewards[i] = 0;//\u91cd\u7f6e\u5f85\u9886\u53d6\u5956\u52b1\r\n                userReceiveRewards[token][user] = userReceiveRewards[token][user].add(reward);//\u589e\u52a0\u5df2\u9886\u53d6\u5956\u52b1\r\n                if (address(you) == token) {//you\r\n                    you.mint(user, reward);//\u6316you\r\n                }else {//\u975eyou\r\n                    tokenPendingRewards[token] = tokenPendingRewards[token].sub(reward);//\u51cf\u5c11\u5956\u52b1\u603b\u989d\r\n                    IERC20(token).safeTransfer(user, reward);//\u53d1\u653e\u5956\u52b1\r\n                }\r\n                emit WithdrawReward(poolId, token, user, inviteReward, stakeReward);\r\n            }\r\n            if (ZERO != upper1) {\r\n                UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\r\n                if ((0 < upper1StakeInfo.invitePower) || (0 < upper1StakeInfo.stakePower)) {\r\n                    inviteReward = upper1StakeInfo.invitePower.mul(rewardPerShare).sub(upper1StakeInfo.inviteRewardDebts[i]).div(1e24);//\u9080\u8bf7\u5956\u52b1\r\n                    stakeReward = upper1StakeInfo.stakePower.mul(rewardPerShare).sub(upper1StakeInfo.stakeRewardDebts[i]).div(1e24);//\u8d28\u62bc\u5956\u52b1\r\n                    upper1StakeInfo.invitePendingRewards[i] = upper1StakeInfo.invitePendingRewards[i].add(inviteReward);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                    upper1StakeInfo.stakePendingRewards[i] = upper1StakeInfo.stakePendingRewards[i].add(stakeReward);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                }\r\n            }\r\n            if (ZERO != upper2) {\r\n                UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\r\n                if ((0 < upper2StakeInfo.invitePower) || (0 < upper2StakeInfo.stakePower)) {\r\n                    inviteReward = upper2StakeInfo.invitePower.mul(rewardPerShare).sub(upper2StakeInfo.inviteRewardDebts[i]).div(1e24);//\u9080\u8bf7\u5956\u52b1\r\n                    stakeReward = upper2StakeInfo.stakePower.mul(rewardPerShare).sub(upper2StakeInfo.stakeRewardDebts[i]).div(1e24);//\u8d28\u62bc\u5956\u52b1\r\n                    upper2StakeInfo.invitePendingRewards[i] = upper2StakeInfo.invitePendingRewards[i].add(inviteReward);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                    upper2StakeInfo.stakePendingRewards[i] = upper2StakeInfo.stakePendingRewards[i].add(stakeReward);//\u5f85\u9886\u53d6\u5956\u52b1\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u91cd\u7f6e\u8d1f\u503a\r\n     */\r\n    function setRewardDebt(uint256 poolId, uint256[] memory rewardPerShares, address user, address upper1, address upper2) internal {\r\n        uint256 rewardPerShare = 0;\r\n        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];\r\n        for(uint i = 0; i < rewardPerShares.length; i++) {\r\n            rewardPerShare = rewardPerShares[i];//\u5355\u4f4d\u7b97\u529b\u5956\u52b1\u7cfb\u6570\r\n            userStakeInfo.inviteRewardDebts[i] = userStakeInfo.invitePower.mul(rewardPerShare);//\u91cd\u7f6esender\u9080\u8bf7\u8d1f\u503a\r\n            userStakeInfo.stakeRewardDebts[i] = userStakeInfo.stakePower.mul(rewardPerShare);//\u91cd\u7f6esender\u8d28\u62bc\u8d1f\u503a\r\n            if (ZERO != upper1) {\r\n                UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\r\n                upper1StakeInfo.inviteRewardDebts[i] = upper1StakeInfo.invitePower.mul(rewardPerShare);//\u91cd\u7f6eupper1\u9080\u8bf7\u8d1f\u503a\r\n                upper1StakeInfo.stakeRewardDebts[i] = upper1StakeInfo.stakePower.mul(rewardPerShare);//\u91cd\u7f6eupper1\u8d28\u62bc\u8d1f\u503a\r\n                if (ZERO != upper2) {\r\n                    UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\r\n                    upper2StakeInfo.inviteRewardDebts[i] = upper2StakeInfo.invitePower.mul(rewardPerShare);//\u91cd\u7f6eupper2\u9080\u8bf7\u8d1f\u503a\r\n                    upper2StakeInfo.stakeRewardDebts[i] = upper2StakeInfo.stakePower.mul(rewardPerShare);//\u91cd\u7f6eupper2\u8d28\u62bc\u8d1f\u503a\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u77ff\u6c60\u4fe1\u606f\u66f4\u65b0\u4e8b\u4ef6\r\n     */\r\n    function sendUpdatePoolEvent(bool action, uint256 poolId) internal {\r\n        PoolViewInfo memory poolViewInfo = poolViewInfos[poolId];\r\n        PoolStakeInfo memory poolStakeInfo = poolStakeInfos[poolId];\r\n        PoolRewardInfo[] memory _poolRewardInfos = poolRewardInfos[poolId];\r\n        address[] memory tokens = new address[](_poolRewardInfos.length);\r\n        uint256[] memory _rewardTotals = new uint256[](_poolRewardInfos.length);\r\n        uint256[] memory rewardPerBlocks = new uint256[](_poolRewardInfos.length);\r\n        for(uint i = 0; i < _poolRewardInfos.length; i++) {\r\n            tokens[i] = _poolRewardInfos[i].token;\r\n            _rewardTotals[i] = _poolRewardInfos[i].rewardTotal;\r\n            rewardPerBlocks[i] = _poolRewardInfos[i].rewardPerBlock;\r\n        }\r\n        emit UpdatePool(action, poolId, poolViewInfo.name, poolStakeInfo.token, poolStakeInfo.powerRatio, poolStakeInfo.maxStakeAmount, poolStakeInfo.startBlock, poolViewInfo.multiple, poolViewInfo.priority, tokens, _rewardTotals, rewardPerBlocks);\r\n    }\r\n\r\n    /**\r\n    \u89e3\u8d28\u62bc\r\n     */\r\n    function _unStake(uint256 poolId, uint256 amount) internal {        \r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\r\n        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startBlock <= block.number), \"YouSwap:POOL_NOT_EXIST_OR_MINING_NOT_START\");\r\n        require((0 < amount) && (userStakeInfos[poolId][msg.sender].amount >= amount), \"YouSwap:BALANCE_INSUFFICIENT\");\r\n        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);\r\n        initRewardInfo(poolId, msg.sender, upper1, upper2);\r\n        uint256[] memory rewardPerShares = computeReward(poolId);//\u8ba1\u7b97\u5355\u4f4d\u7b97\u529b\u5956\u52b1\u7cfb\u6570\r\n        provideReward(poolId, rewardPerShares, msg.sender, upper1, upper2);//\u7ed9sender\u53d1\u653e\u6536\u76ca\uff0c\u7ed9upper1\uff0cupper2\u589e\u52a0\u5f85\u9886\u53d6\u6536\u76ca\r\n        subPower(poolId, msg.sender, amount, poolStakeInfo.powerRatio, upper1, upper2);//\u51cf\u5c11\u7b97\u529b\r\n        setRewardDebt(poolId, rewardPerShares, msg.sender, upper1, upper2);//\u91cd\u7f6esender\uff0cupper1\uff0cupper2\u8d1f\u503a\r\n        IERC20(poolStakeInfo.token).safeTransfer(msg.sender, amount);//\u89e3\u8d28\u62bctoken\r\n        emit UnStake(poolId, poolStakeInfo.token, msg.sender, amount);\r\n    }    \r\n\r\n    function _withdrawReward(uint256 poolId) internal {\r\n        PoolStakeInfo storage poolStakeInfo = poolStakeInfos[poolId];\r\n        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startBlock <= block.number), \"YouSwap:POOL_NOT_EXIST_OR_MINING_NOT_START\");\r\n        (address upper1, address upper2) = invite.inviteUpper2(msg.sender);\r\n        initRewardInfo(poolId, msg.sender, upper1, upper2);\r\n        uint256[] memory rewardPerShares = computeReward(poolId);//\u8ba1\u7b97\u5355\u4f4d\u7b97\u529b\u5956\u52b1\u7cfb\u6570\r\n        provideReward(poolId, rewardPerShares, msg.sender, upper1, upper2);//\u7ed9sender\u53d1\u653e\u6536\u76ca\uff0c\u7ed9upper1\uff0cupper2\u589e\u52a0\u5f85\u9886\u53d6\u6536\u76ca\r\n        setRewardDebt(poolId, rewardPerShares, msg.sender, upper1, upper2);//\u91cd\u7f6esender\uff0cupper1\uff0cupper2\u8d1f\u503a\r\n    }\r\n    \r\n    function initRewardInfo(uint256 poolId, address user, address upper1, address upper2) internal {\r\n        uint count = poolRewardInfos[poolId].length;\r\n        UserStakeInfo storage userStakeInfo = userStakeInfos[poolId][user];\r\n        if (0 == userStakeInfo.invitePendingRewards.length) {\r\n            for(uint i = 0; i < count; i++) {\r\n                userStakeInfo.invitePendingRewards.push(0);//\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\r\n                userStakeInfo.stakePendingRewards.push(0);//\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\r\n                userStakeInfo.inviteRewardDebts.push(0);//\u521d\u59cb\u5316\u9080\u8bf7\u8d1f\u503a\r\n                userStakeInfo.stakeRewardDebts.push(0);//\u521d\u59cb\u5316\u8d28\u62bc\u8d1f\u503a\r\n            }\r\n        }\r\n        if (ZERO != upper1) {\r\n            UserStakeInfo storage upper1StakeInfo = userStakeInfos[poolId][upper1];\r\n            if (0 == upper1StakeInfo.invitePendingRewards.length) {\r\n                for(uint i = 0; i < count; i++) {\r\n                    upper1StakeInfo.invitePendingRewards.push(0);//\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\r\n                    upper1StakeInfo.stakePendingRewards.push(0);//\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\r\n                    upper1StakeInfo.inviteRewardDebts.push(0);//\u521d\u59cb\u5316\u9080\u8bf7\u8d1f\u503a\r\n                    upper1StakeInfo.stakeRewardDebts.push(0);//\u521d\u59cb\u5316\u8d28\u62bc\u8d1f\u503a\r\n                }\r\n            }\r\n            if (ZERO != upper2) {\r\n                UserStakeInfo storage upper2StakeInfo = userStakeInfos[poolId][upper2];\r\n                if (0 == upper2StakeInfo.invitePendingRewards.length) {\r\n                    for(uint i = 0; i < count; i++) {\r\n                        upper2StakeInfo.invitePendingRewards.push(0);//\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\r\n                        upper2StakeInfo.stakePendingRewards.push(0);//\u521d\u59cb\u5316\u5f85\u9886\u53d6\u6570\u91cf\r\n                        upper2StakeInfo.inviteRewardDebts.push(0);//\u521d\u59cb\u5316\u9080\u8bf7\u8d1f\u503a\r\n                        upper2StakeInfo.stakeRewardDebts.push(0);//\u521d\u59cb\u5316\u8d28\u62bc\u8d1f\u503a\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ITokenYou\",\"name\":\"_you\",\"type\":\"address\"},{\"internalType\":\"contract YouswapInviteV1\",\"name\":\"_invite\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"EndPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"}],\"name\":\"InviteRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SafeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"action\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powerRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_rewardTotals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPower\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerInvitePower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerStakePower\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upper1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upper1InvitePower\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upper2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upper2InvitePower\",\"type\":\"uint256\"}],\"name\":\"UpdatePower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inviteAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVITE1_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITE2_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITE_SELF_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"powerRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardTotals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPowerRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"contract YouswapInviteV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operateOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewardV2\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewardV3\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIdsV2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"poolNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolRewardInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardProvide\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolStakeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"powerRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolViewInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"powerScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiple\",\"type\":\"uint256\"}],\"name\":\"setMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOperateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"}],\"name\":\"setPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"}],\"name\":\"setRewardTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"stakeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"}],\"name\":\"unStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReceiveRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invitePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"you\",\"outputs\":[{\"internalType\":\"contract ITokenYou\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YouswapFactoryV2", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001d32916cfa6534d261ad53e2498ab95505bd251000000000000000000000000025310873e310b270aec5113a2d3037fa94166969", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://25532177b9a3af08f4fc5d512a9efe259993d9e6f16f19821b66c0a7c754b4ea"}]}