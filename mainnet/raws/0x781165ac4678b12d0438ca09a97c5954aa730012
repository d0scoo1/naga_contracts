{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n// Title: \u2310\u25e8-\u25e8 Caterpillar V2\r\n// Contract by: @backseats_eth\r\n\r\n// This is an experimental implementation of an allow list game for NounCats (NounCats.com / @NounCats on Twitter).\r\n// Periodically, this contract will open up and anyone can add themselves to the allow list before we mint.\r\n\r\n// NEW IN V2: Add yourself, add your friend, and give to a good cause!\r\n\r\n// Find V1 of the NounCaterpillar here: https://www.contractreader.io/contract/0x74a2867c2740bd3f12b4a5a78a9b6938782c445a\r\n\r\n// DISCLAIMER: Yes, there are better and gasless ways to run an allow list (like a Google Form, lol). \r\n// This is not our only way of taking addresses before mint. It's just a fun one. \r\ncontract NounCaterpillarV2 {\r\n    \r\n    // How many open slots are currently available in this contract\r\n    uint8 public openSlots;\r\n    \r\n    // Using a bytes32 array rather than an array of addresses to save space and save the user on gas costs. \r\n    // These will eventually be used in a Merkle tree which the bytes32[] also lends itself to.\r\n    bytes32[] public addresses;\r\n\r\n    // A mapping to make sure you haven't been here before\r\n    mapping(bytes32 => bool) private addressMapping;\r\n\r\n    // Owner and donation wallet addresses\r\n    address private owner = 0x3a6372B2013f9876a84761187d933DEe0653E377;\r\n    address private donationWallet = 0x1D4f4dd22cB0AF859E33DEaF1FF55d9f6251C56B;\r\n\r\n    // A simplified implementation of Ownable \r\n    modifier onlyOwner { \r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    /// @notice A function that only costs gas to add yourself to the allow list if there are open spots.\r\n    /// If Metamask or another wallet shows a ridiculous gas price, open slots == 0 or you're already on the list! Don't submit that transaction\r\n    function addMeToAllowList() external {\r\n        require(openSlots > 0, \"Wait for spots to open up\");\r\n        bytes32 encoded = keccak256(abi.encodePacked(msg.sender));\r\n        require(!addressMapping[encoded], \"Already on list\");\r\n        addressMapping[encoded] = true;\r\n        openSlots -= 1;\r\n        addresses.push(encoded);\r\n        delete encoded;\r\n    }\r\n\r\n    /// @notice Add your address *and* a friend's address to the Noun Cats allow list at any time, even if openSlots == 0. \r\n    /// All proceeds will be donated to a good cause, to be determined by the Noun Cats Discord.\r\n    /// @param _giveTo Address of the wallet of someone you want to add to the allow list\r\n    function giveTwoGetOne(address _giveTo) payable external { \r\n        require(msg.value == 0.01 ether, 'Wrong price');\r\n        bytes32 you = keccak256(abi.encodePacked(msg.sender));\r\n        bytes32 yourFriend = keccak256(abi.encodePacked(_giveTo));\r\n        require(!addressMapping[you], \"You're already on list\");\r\n        require(!addressMapping[yourFriend], \"They're already on list\");\r\n        addresses.push(you);\r\n        addresses.push(yourFriend);\r\n        delete you;\r\n        delete yourFriend;\r\n    }\r\n\r\n    /// @notice A function that allows the owner to open up new spots in the NounCaterpillar\r\n    function extendCaterpillar(uint8 _newSlots) external onlyOwner { \r\n        openSlots += _newSlots;\r\n    }\r\n    \r\n    /// @notice Withdraw funds from the contract\r\n    function withdraw() external payable onlyOwner { \r\n        payable(donationWallet).transfer(address(this).balance);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"addMeToAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newSlots\",\"type\":\"uint8\"}],\"name\":\"extendCaterpillar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_giveTo\",\"type\":\"address\"}],\"name\":\"giveTwoGetOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSlots\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "NounCaterpillarV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bdccd3aa0085d9b1fed4ce66e5fcd8dec34fa0d77aa2003151276e1f0a79b007"}]}