{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/FactoryUpgradeGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IFactoryUpgradeGate} from \\\"./interfaces/IFactoryUpgradeGate.sol\\\";\\nimport \\\"./utils/OwnableSkeleton.sol\\\";\\n\\ncontract FactoryUpgradeGate is IFactoryUpgradeGate, OwnableSkeleton {\\n    mapping(address => mapping(address => bool)) private _validUpgradePaths;\\n\\n    event UpgradePathRegistered(address newImpl, address oldImpl);\\n    event UpgradePathRemoved(address newImpl, address oldImpl);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner(), \\\"only owner\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        _setOwner(_owner);\\n    }\\n\\n    /// @notice Ensures the given upgrade path is valid and does not overwrite existing storage slots\\n    /// @param _newImpl The proposed implementation address\\n    /// @param _currentImpl The current implementation address\\n    function isValidUpgradePath(address _newImpl, address _currentImpl) external view returns (bool) {\\n        return _validUpgradePaths[_newImpl][_currentImpl];\\n    }\\n\\n    /// @notice Registers a new safe upgrade path for an implementation\\n    /// @param _newImpl The new implementation\\n    /// @param _supportedPrevImpls Safe implementations that can upgrade to this new implementation\\n    function registerNewUpgradePath(address _newImpl, address[] calldata _supportedPrevImpls) external onlyOwner {\\n        for (uint256 i = 0; i < _supportedPrevImpls.length; i++) {\\n            _validUpgradePaths[_newImpl][_supportedPrevImpls[i]] = true;\\n            emit UpgradePathRegistered(_newImpl, _supportedPrevImpls[i]);\\n        }\\n    }\\n\\n    /// @notice Unregisters an upgrade path, in case of emergency\\n    /// @param _newImpl the newer implementation\\n    /// @param _prevImpl the older implementation\\n    function unregisterUpgradePath(address _newImpl, address _prevImpl) external onlyOwner {\\n        _validUpgradePaths[_newImpl][_prevImpl] = false;\\n        emit UpgradePathRemoved(_newImpl, _prevImpl);\\n    }\\n}\"\r\n    },\r\n    \"src/interfaces/IFactoryUpgradeGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface IFactoryUpgradeGate {\\n  function isValidUpgradePath(address _newImpl, address _currentImpl) external returns (bool);\\n\\n  function registerNewUpgradePath(address _newImpl, address[] calldata _supportedPrevImpls) external;\\n\\n  function unregisterUpgradePath(address _newImpl, address _prevImpl) external;\\n}\"\r\n    },\r\n    \"src/utils/OwnableSkeleton.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This ownership interface matches OZ's ownable interface.\\n */\\ncontract OwnableSkeleton is IOwnable {\\n    address private _owner;\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _setOwner(address newAddress) internal {\\n        emit OwnershipTransferred(_owner, newAddress);\\n        _owner = newAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This ownership interface matches OZ's ownable interface.\\n *\\n */\\ninterface IOwnable {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"base64/=lib/base64/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"erc721a-upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"}],\"name\":\"UpgradePathRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"}],\"name\":\"UpgradePathRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currentImpl\",\"type\":\"address\"}],\"name\":\"isValidUpgradePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_supportedPrevImpls\",\"type\":\"address[]\"}],\"name\":\"registerNewUpgradePath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevImpl\",\"type\":\"address\"}],\"name\":\"unregisterUpgradePath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FactoryUpgradeGate", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "000000000000000000000000d1d1d4e36117ab794ec5d4c78cbd3a8904e691d0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}