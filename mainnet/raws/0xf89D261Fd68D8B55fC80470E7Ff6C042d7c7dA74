{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WattsTransferExtensionV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Developed by KG Technologies (https://kgtechnologies.io)\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract IBreedingContract {\\n    /**\\n     * @notice function to set the merkle root for breeding.\\n     *\\n     * @param _merkleRoot. The new merkle root to set.\\n     */\\n    function setMerkleRoot(bytes32 _merkleRoot) external {}\\n\\n    /**\\n     * @notice function to turn on/off breeding.\\n     *\\n     * @param _status. The new state of the breeding.\\n     */\\n    function setBreedingStatus(bool _status) external {}    \\n\\n    /**\\n     * @notice function to set the maximum amount of juniors that can be bred.\\n     *\\n     * @param max. The new maximum.\\n     */\\n    function setMaxBreedableJuniors(uint256 max) external {}\\n\\n    /**\\n     * @notice function to set the cooldown period for breeding a slotie.\\n     *\\n     * @param coolDown. The new cooldown period.\\n     */\\n    function setBreedCoolDown(uint256 coolDown) external {}\\n\\n    /**\\n     * @notice function to set the watts price for breeding two sloties.\\n     *\\n     * @param price. The new watts price.\\n     */\\n    function setBreedPice(uint256 price) external {}\\n\\n    /**\\n     * @dev WATTS OWNER\\n     */\\n\\n    function WATTSOWNER_TransferOwnership(address newOwner) external {}\\n\\n    function WATTSOWNER_SetSlotieNFT(address newSlotie) external {}\\n\\n    function WATTSOWNER_SetLockPeriod(uint256 newLockPeriod) external {}\\n\\n    function WATTSOWNER_SetIsBlackListed(address _set, bool _is) external {}\\n\\n    function WATTSOWNER_seeClaimableBalanceOfUser(address user) external view returns (uint256) {}\\n\\n    function WATTSOWNER_seeClaimableTotalSupply() external view returns (uint256) {}\\n\\n    function transferOwnership(address newOwner) public {}\\n}\\n\\nabstract contract IWatts is IERC20 {\\n    function burn(address _from, uint256 _amount) external {}\\n    function seeClaimableBalanceOfUser(address user) external view returns(uint256) {}\\n    function seeClaimableTotalSupply() external view returns(uint256) {}\\n    function burnClaimable(address _from, uint256 _amount) public {}\\n    function mintClaimable(address _to, uint256 _amount) public {}\\n    function transferOwnership(address newOwner) public {}\\n    function setSlotieNFT(address newSlotieNFT) external {}\\n    function setLockPeriod(uint256 newLockPeriod) external {}\\n    function setIsBlackListed(address _address, bool _isBlackListed) external {}\\n}\\n\\nabstract contract ISlotie is IERC721 {\\n    function nextTokenId() external view returns(uint256){}\\n}\\n\\n/**\\n * @title WattsTransferExtensionV2.\\n *\\n * @author KG Technologies (https://kgtechnologies.io).\\n *\\n * @notice This Smart Contract extends on the WATTS ERC-20 token with transfer functionality.\\n *\\n */\\ncontract WattsTransferExtensionV2 is Ownable {\\n\\n    /** \\n     * @notice The Smart Contract of Watts.\\n     * @dev ERC-20 Smart Contract \\n     */\\n    IWatts public watts;\\n\\n    /** \\n     * @notice The Breeding Contract.\\n     * @dev Breeding Smart Contract \\n     */\\n    IBreedingContract public breeding;\\n\\n    /** \\n     * @notice The Slotie Contract.\\n     * @dev Slotie Smart Contract \\n     */\\n    ISlotie public slotie;\\n\\n    mapping(address => bool) public blackListedRecipients;\\n\\n    /**\\n     * @dev Events\\n     */\\n    \\n    event transferFromExtension(address indexed sender, address indexed recipient, uint256 claimableTransfered, uint256 balanceTransfered);\\n    event blackListRecipientEvent(address indexed recipient, bool indexed shouldBlackList);\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\n    event WithdrawAllEvent(address indexed recipient, uint256 amount);\\n\\n    constructor(\\n        address slotieAddress,\\n        address wattsAddress,\\n        address breedingAddress\\n    ) Ownable() {\\n        slotie = ISlotie(slotieAddress);\\n        watts = IWatts(wattsAddress);\\n        breeding = IBreedingContract(breedingAddress);\\n\\n        blackListedRecipients[0x1C075F1c3083F67add5FFAb240DE1f604F978E83] = true; // Sushiswap WETH-WATTS LP Pair\\n    }\\n \\n    /**\\n     * @dev TRANSFER\\n     */\\n\\n    /**\\n     * @dev Allows users to transfer accumulated watts\\n     * to other addresses.\\n     */\\n    function transfer(\\n        uint256 amount,\\n        address recipient\\n    ) external {\\n        require(address(watts) != address(0), \\\"WATTS ADDRESS NOT SET\\\");\\n        require(watts.balanceOf(msg.sender) >= amount, \\\"TRANSFER EXCEEDS BALANCE\\\");\\n        require(amount > 0, \\\"CANNOT TRANSFER 0\\\");\\n        require(!blackListedRecipients[recipient], \\\"RECIPIENT BLACKLISTED\\\");\\n        \\n        uint256 claimableBalance = breeding.WATTSOWNER_seeClaimableBalanceOfUser(msg.sender);\\n        uint256 transferFromClaimable = claimableBalance >= amount ? amount : claimableBalance;\\n        uint256 transferFromBalance = claimableBalance >= amount ? 0 : amount - claimableBalance;\\n\\n        require(watts.allowance(msg.sender, address(this)) >= transferFromBalance, \\\"AMOUNT EXCEEDS ALLOWANCE\\\");\\n\\n        if (claimableBalance > 0) {\\n            watts.burnClaimable(msg.sender, transferFromClaimable);\\n            watts.mintClaimable(recipient, transferFromClaimable);\\n        }\\n        \\n        if (transferFromBalance > 0) {\\n            watts.transferFrom(msg.sender, recipient, transferFromBalance);\\n        }\\n\\n        emit transferFromExtension(msg.sender, recipient, transferFromClaimable, transferFromBalance);\\n    }  \\n\\n    /**\\n     * @dev SLOTIE ENUMERABLE EXTENSION\\n     */\\n    function slotieWalletOfOwner(address owner) external view returns (uint256[] memory) {\\n        uint256 _balance = slotie.balanceOf(owner);\\n        uint256[] memory _tokens = new uint256[] (_balance);\\n        uint256 _index;\\n        uint256 _loopThrough = slotie.nextTokenId();\\n        for (uint i = 1; i < _loopThrough; i++) {\\n            if (slotie.ownerOf(i) == address(0x0) && _tokens[_balance - 1] == 0) {\\n                _loopThrough++;\\n            }\\n            if (slotie.ownerOf(i) == owner) {\\n                _tokens[_index] = i;\\n                _index++;\\n            }\\n        }\\n        return _tokens;\\n    }\\n\\n    /** \\n     * @dev OWNER ONLY \\n     */\\n\\n    /**\\n     * @dev Method to blacklist or whitelist\\n     * an address from receiving WATTS\\n     */\\n    function blackListRecipient(address recipient, bool shouldBlackList) external onlyOwner {\\n        blackListedRecipients[recipient] = shouldBlackList;\\n        emit blackListRecipientEvent(recipient, shouldBlackList);\\n    }\\n\\n    /**\\n     * @notice function to set the merkle root for breeding.\\n     *\\n     * @param _merkleRoot. The new merkle root to set.\\n     */\\n    function BREEDOWNER_setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        breeding.setMerkleRoot(_merkleRoot);\\n    }\\n\\n    /**\\n     * @notice function to turn on/off breeding.\\n     *\\n     * @param _status. The new state of the breeding.\\n     */\\n    function BREEDOWNER_setBreedingStatus(bool _status) external onlyOwner {\\n        breeding.setBreedingStatus(_status);\\n    }    \\n\\n    /**\\n     * @notice function to set the maximum amount of juniors that can be bred.\\n     *\\n     * @param max. The new maximum.\\n     */\\n    function BREEDOWNER_setMaxBreedableJuniors(uint256 max) external onlyOwner {\\n        breeding.setMaxBreedableJuniors(max);\\n    }\\n\\n    /**\\n     * @notice function to set the cooldown period for breeding a slotie.\\n     *\\n     * @param coolDown. The new cooldown period.\\n     */\\n    function BREEDOWNER_setBreedCoolDown(uint256 coolDown) external onlyOwner {\\n        breeding.setBreedCoolDown(coolDown);\\n    }\\n\\n    /**\\n     * @notice function to set the watts price for breeding two sloties.\\n     *\\n     * @param price. The new watts price.\\n     */\\n    function BREEDOWNER_setBreedPice(uint256 price) external onlyOwner {\\n        breeding.setBreedPice(price);\\n    }\\n\\n    function BREEDOWNER_TransferOwnership(address newOwner) external onlyOwner {\\n        breeding.transferOwnership(newOwner);   \\n    }\\n\\n    /**\\n     * @dev WATTS OWNER\\n     */\\n\\n\\n    function WATTSOWNER_TransferOwnership(address newOwner) external onlyOwner {\\n        breeding.WATTSOWNER_TransferOwnership(newOwner);\\n    }\\n\\n    function WATTSOWNER_SetSlotieNFT(address newSlotie) external onlyOwner {\\n        breeding.WATTSOWNER_SetSlotieNFT(newSlotie);\\n    }\\n\\n    function WATTSOWNER_SetLockPeriod(uint256 newLockPeriod) external onlyOwner {\\n        breeding.WATTSOWNER_SetLockPeriod(newLockPeriod);\\n    }\\n\\n    function WATTSOWNER_SetIsBlackListed(address _set, bool _is) external onlyOwner {\\n        breeding.WATTSOWNER_SetIsBlackListed(_set, _is);\\n    }\\n\\n    function WATTSOWNER_seeClaimableBalanceOfUser(address user) external view returns (uint256) {\\n        return breeding.WATTSOWNER_seeClaimableBalanceOfUser(user);\\n    }\\n\\n    function WATTSOWNER_seeClaimableTotalSupply() external view returns (uint256) {\\n        return breeding.WATTSOWNER_seeClaimableTotalSupply();\\n    }\\n    \\n\\n    /**\\n     * @dev FINANCE\\n     */\\n\\n    /**\\n     * @notice Allows owner to withdraw funds generated from sale.\\n     *\\n     * @param _to. The address to send the funds to.\\n     */\\n    function withdrawAll(address _to) external onlyOwner {\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\n\\n        uint256 contractBalance = address(this).balance;\\n\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\n\\n        payable(_to).transfer(contractBalance);\\n\\n        emit WithdrawAllEvent(_to, contractBalance);\\n    }\\n\\n    /**\\n     * @dev Fallback function for receiving Ether\\n     */\\n    receive() external payable {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"slotieAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wattsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"breedingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"shouldBlackList\",\"type\":\"bool\"}],\"name\":\"blackListRecipientEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableTransfered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceTransfered\",\"type\":\"uint256\"}],\"name\":\"transferFromExtension\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"BREEDOWNER_TransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coolDown\",\"type\":\"uint256\"}],\"name\":\"BREEDOWNER_setBreedCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BREEDOWNER_setBreedPice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"BREEDOWNER_setBreedingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"BREEDOWNER_setMaxBreedableJuniors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"BREEDOWNER_setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_set\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_is\",\"type\":\"bool\"}],\"name\":\"WATTSOWNER_SetIsBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"WATTSOWNER_SetLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSlotie\",\"type\":\"address\"}],\"name\":\"WATTSOWNER_SetSlotieNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WATTSOWNER_TransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WATTSOWNER_seeClaimableBalanceOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WATTSOWNER_seeClaimableTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldBlackList\",\"type\":\"bool\"}],\"name\":\"blackListRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListedRecipients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breeding\",\"outputs\":[{\"internalType\":\"contract IBreedingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotie\",\"outputs\":[{\"internalType\":\"contract ISlotie\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"slotieWalletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watts\",\"outputs\":[{\"internalType\":\"contract IWatts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WattsTransferExtensionV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005fdb2b0c56afa73b8ca2228e6ab92be90325961d0000000000000000000000005058b77cbd029f56a11bd56326519e3ec0081cd00000000000000000000000009792fb4c8fcca2c18d836839c54d1d5f313a139e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}