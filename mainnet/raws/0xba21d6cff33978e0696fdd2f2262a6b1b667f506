{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// \ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\r\n// \ud83d\ude00                            \ud83d\ude00\r\n// \ud83d\ude00 https://emojisan.github.io \ud83d\ude00\r\n// \ud83d\ude00                            \ud83d\ude00\r\n// \ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\ud83d\ude00\r\n\r\n// part of NFT token interface used in this contract\r\n// https://etherscan.io/address/0xE3f2F807ba194ea0221B9109fb14Da600C9e1eb6\r\ninterface Emojisan {\r\n\r\n    function ownerOf(uint tokenId) external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n    function mint(uint tokenId) external;\r\n    function setMinter(address newMinter) external;\r\n}\r\n\r\ncontract EmojisanAuctionHouse {\r\n\r\n    event Bid(uint indexed tokenId);\r\n\r\n    struct Auction {\r\n        address owner;\r\n        uint128 currentPrice;\r\n    }\r\n\r\n    struct User {\r\n        uint128 balance;\r\n        uint32 bidBlock;\r\n    }\r\n\r\n    // NFT token address\r\n    // https://etherscan.io/address/0xE3f2F807ba194ea0221B9109fb14Da600C9e1eb6\r\n    Emojisan public constant emojisan = Emojisan(0xE3f2F807ba194ea0221B9109fb14Da600C9e1eb6);\r\n\r\n    uint[] public tokenByIndex;\r\n    mapping (uint => Auction) public auction;\r\n    mapping (address => User) public user;\r\n    uint32 private constant auctionTime = 20000;\r\n\r\n    address public whaleAddress;\r\n    uint32 public whaleStartTime;\r\n    uint128 public whaleBalance;\r\n    uint32 private constant whaleWithdrawDelay = 80000;\r\n\r\n    uint128 public ownerBalance;\r\n    uint private constant ownerTokenId = 128512;\r\n\r\n    function tokens() external view returns (uint[]) {\r\n        return tokenByIndex;\r\n    }\r\n\r\n    function tokensCount() external view returns (uint) {\r\n        return tokenByIndex.length;\r\n    }\r\n\r\n    function wantItForFree(uint tokenId) external {\r\n        // user \ud83d\udc64 can bid only on one 1\ufe0f\u20e3 token at a time \u23f1\ufe0f\r\n        require(block.number >= user[msg.sender].bidBlock + auctionTime);\r\n        // check auction has not started \ud83d\udeab\ud83c\udfac\r\n        require(auction[tokenId].owner == address(this));\r\n        auction[tokenId].owner = msg.sender;\r\n        user[msg.sender].bidBlock = uint32(block.number);\r\n        emojisan.mint(tokenId);\r\n        emit Bid(tokenId);\r\n    }\r\n\r\n    function wantItMoreThanYou(uint tokenId) external payable {\r\n        // user \ud83d\udc64 can bid only on one 1\ufe0f\u20e3 token at a time \u23f1\ufe0f\r\n        require(block.number >= user[msg.sender].bidBlock + auctionTime);\r\n        // check auction has not finished \ud83d\udeab\ud83c\udfc1\r\n        address previousOwner = auction[tokenId].owner;\r\n        require(block.number < user[previousOwner].bidBlock + auctionTime);\r\n        // fancy \ud83e\uddd0 price \ud83d\udcb0 calculation \ud83d\udcc8\r\n        // 0 \u27a1\ufe0f 0.002 \u27a1\ufe0f 0.004 \u27a1\ufe0f 0.008 \u27a1\ufe0f 0.016 \u27a1\ufe0f 0.032 \u27a1\ufe0f 0.064 \u27a1\ufe0f 0.128\r\n        // \u27a1\ufe0f 0.256 \u27a1\ufe0f 0.512 \u27a1\ufe0f 1 \u27a1\ufe0f 1.5 \u27a1\ufe0f 2 \u27a1\ufe0f 2.5 \u27a1\ufe0f 3 \u27a1\ufe0f 3.5 \u27a1\ufe0f 4 \u27a1\ufe0f ...\r\n        uint128 previousPrice = auction[tokenId].currentPrice;\r\n        uint128 price;\r\n        if (previousPrice == 0) {\r\n            price = 2 finney;\r\n        } else if (previousPrice < 500 finney) {\r\n            price = 2 * previousPrice;\r\n        } else {\r\n            price = (previousPrice + 500 finney) / 500 finney * 500 finney;\r\n        }\r\n        require(msg.value >= price);\r\n        uint128 priceDiff = price - previousPrice;\r\n        // previous \ud83d\udc64 gets what she \ud83d\ude46 paid \u2795 2\ufe0f\u20e35\ufe0f\u20e3%\r\n        user[previousOwner] = User({\r\n            balance: previousPrice + priceDiff / 4,\r\n            bidBlock: 0\r\n        });\r\n        // whale \ud83d\udc0b gets 5\ufe0f\u20e30\ufe0f\u20e3%\r\n        whaleBalance += priceDiff / 2;\r\n        // owner \ud83d\udc69 of token 128512 \ud83d\ude00 gets 2\ufe0f\u20e35\ufe0f\u20e3%\r\n        ownerBalance += priceDiff / 4;\r\n        auction[tokenId] = Auction({\r\n            owner: msg.sender,\r\n            currentPrice: price\r\n        });\r\n        user[msg.sender].bidBlock = uint32(block.number);\r\n        if (msg.value > price) {\r\n            // send back eth if someone sent too much \ud83d\udcb8\ud83d\udcb8\ud83d\udcb8\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n        emit Bid(tokenId);\r\n    }\r\n\r\n    function wantMyToken(uint tokenId) external {\r\n        Auction memory a = auction[tokenId];\r\n        // check auction has finished \ud83c\udfc1\r\n        require(block.number >= user[a.owner].bidBlock + auctionTime);\r\n        emojisan.transferFrom(this, a.owner, tokenId);\r\n    }\r\n\r\n    function wantMyEther() external {\r\n        uint amount = user[msg.sender].balance;\r\n        user[msg.sender].balance = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function wantToBeWhale() external {\r\n        // need to have more tokens \ud83d\udcb0 than current \ud83d\udc0b\r\n        require(emojisan.balanceOf(msg.sender) > emojisan.balanceOf(whaleAddress));\r\n        whaleAddress = msg.sender;\r\n        // whale \ud83d\udc33 needs to wait some time \u23f1\ufe0f before snatching that sweet \ud83c\udf6c eth \ud83e\udd11\r\n        whaleStartTime = uint32(block.number);\r\n    }\r\n\r\n    function whaleWantMyEther() external {\r\n        require(msg.sender == whaleAddress);\r\n        // check enough time \u23f1\ufe0f passed for whale \ud83d\udc33 to grab \ud83d\udcb5\ud83d\udcb7\ud83d\udcb6\ud83d\udcb4\r\n        require(block.number >= whaleStartTime + whaleWithdrawDelay);\r\n        // whale \ud83d\udc33 needs to wait some time \u23f1\ufe0f before snatching that sweet \ud83c\udf6d eth \ud83e\udd11 again\r\n        whaleStartTime = uint32(block.number);\r\n        uint amount = whaleBalance;\r\n        whaleBalance = 0;\r\n        whaleAddress.transfer(amount);\r\n    }\r\n\r\n    function ownerWantMyEther() external {\r\n        uint amount = ownerBalance;\r\n        ownerBalance = 0;\r\n        emojisan.ownerOf(ownerTokenId).transfer(amount);\r\n    }\r\n\r\n    function wantNewTokens(uint[] tokenIds) external {\r\n        // only owner \ud83d\udc69 of token 128512 \ud83d\ude00\r\n        require(msg.sender == emojisan.ownerOf(ownerTokenId));\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            auction[tokenIds[i]].owner = this;\r\n            tokenByIndex.push(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function wantNewMinter(address minter) external {\r\n        // only owner \ud83d\udc69 of token 128512 \ud83d\ude00\r\n        require(msg.sender == emojisan.ownerOf(ownerTokenId));\r\n        emojisan.setMinter(minter);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auction\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"wantNewMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wantItMoreThanYou\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emojisan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"whaleWantMyEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wantToBeWhale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"wantNewTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint128\"},{\"name\":\"bidBlock\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wantItForFree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wantMyEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"wantMyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWantMyEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"}]", "ContractName": "EmojisanAuctionHouse", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b1aab13aeda04c23daea9e5369d1276ad089cef30501523acfb708cbeee5d0c9"}]}