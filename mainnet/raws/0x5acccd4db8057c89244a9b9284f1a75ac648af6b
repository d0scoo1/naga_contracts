{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YogiesItemShop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n      _____                   _______                   _____                    _____                    _____                    _____          \\r\\n     |\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\         \\r\\n     |:\\\\____\\\\               /::::\\\\    \\\\               /::\\\\    \\\\                /::\\\\    \\\\                /::\\\\    \\\\                /::\\\\    \\\\        \\r\\n     |::|   |              /::::::\\\\    \\\\             /::::\\\\    \\\\               \\\\:::\\\\    \\\\              /::::\\\\    \\\\              /::::\\\\    \\\\       \\r\\n     |::|   |             /::::::::\\\\    \\\\           /::::::\\\\    \\\\               \\\\:::\\\\    \\\\            /::::::\\\\    \\\\            /::::::\\\\    \\\\      \\r\\n     |::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/\\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\     \\r\\n     |::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/  \\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\    \\r\\n     |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    \\\\:::\\\\    \\\\              /::::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\   \\r\\n     |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    / \\\\:::\\\\    \\\\    ____    /::::::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\    ___\\\\:::\\\\   \\\\:::\\\\    \\\\  \\r\\n     /::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /   \\\\:::\\\\ ___\\\\  /\\\\   \\\\  /:::/\\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\ \\r\\n    /::::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/  ___\\\\:::|    |/::\\\\   \\\\/:::/  \\\\:::\\\\____\\\\/:::/__\\\\:::\\\\   \\\\:::\\\\____\\\\/::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\\\r\\n   /:::/~~~~/~~       \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\ /\\\\  /:::|____|\\\\:::\\\\  /:::/    \\\\::/    /\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\r\\n  /:::/    /           \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    /::\\\\ \\\\::/    /  \\\\:::\\\\/:::/    / \\\\/____/  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/ \\r\\n /:::/    /             \\\\:::\\\\    /:::/    /     \\\\:::\\\\   \\\\:::\\\\ \\\\/____/    \\\\::::::/    /            \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\     \\r\\n/:::/    /               \\\\:::\\\\__/:::/    /       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/____/              \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\    \\r\\n\\\\::/    /                 \\\\::::::::/    /         \\\\:::\\\\  /:::/    /        \\\\:::\\\\    \\\\               \\\\:::\\\\   \\\\::/    /        \\\\:::\\\\  /:::/    /    \\r\\n \\\\/____/                   \\\\::::::/    /           \\\\:::\\\\/:::/    /          \\\\:::\\\\    \\\\               \\\\:::\\\\   \\\\/____/          \\\\:::\\\\/:::/    /     \\r\\n                            \\\\::::/    /             \\\\::::::/    /            \\\\:::\\\\    \\\\               \\\\:::\\\\    \\\\               \\\\::::::/    /      \\r\\n                             \\\\::/____/               \\\\::::/    /              \\\\:::\\\\____\\\\               \\\\:::\\\\____\\\\               \\\\::::/    /       \\r\\n                              ~~                      \\\\::/____/                \\\\::/    /                \\\\::/    /                \\\\::/    /        \\r\\n                                                                                \\\\/____/                  \\\\/____/                  \\\\/____/                                                                                                                                                                 \\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract IGemies is IERC20 {\\r\\n    function getEcoSystemBalance(address user) external view returns (uint256) {}\\r\\n    function spendEcosystemBalance(uint256 amount, address user) external {}\\r\\n}\\r\\n\\r\\nabstract contract IYogies is IERC721 {\\r\\n    function vaultStartPoint() external view returns (uint256) {}\\r\\n    function viyStartPoint() external view returns (uint256) {}\\r\\n    function getTotalStakedYogies(address user) external view returns (uint256) {}\\r\\n    function getYogiesRealOwner(uint256 yogie) external view returns (address) {}\\r\\n}\\r\\n\\r\\nabstract contract IYogieItem is IERC721 {\\r\\n    function mint(address recipient, uint256 amount) external {}   \\r\\n    function totalSupply() external view returns (uint256) {}\\r\\n    function balanceOf(address user) external view returns (uint256) {}\\r\\n}\\r\\n\\r\\ncontract YogiesItemShop is OwnableUpgradeable {\\r\\n\\r\\n    /** === External contracts === */\\r\\n    address public openseaProxyRegistryAddress;\\r\\n    \\r\\n    IGemies public gemies;\\r\\n    IYogies public yogies;\\r\\n    IERC721 public gYogies;\\r\\n\\r\\n    IYogieItem public houseNFT; // 0\\r\\n    IYogieItem public carNFT; // 1\\r\\n    IYogieItem public petsNFT; // 2\\r\\n\\r\\n    /** === Items data === */\\r\\n    uint256 public housePrice;\\r\\n    uint256 public carPrice;\\r\\n    uint256 public petPrice;\\r\\n\\r\\n    uint256 public houseSupply;\\r\\n    uint256 public carSupply;\\r\\n    uint256 public petSupply;\\r\\n\\r\\n    /** === Discount === */\\r\\n    uint256 public gYogieDiscount;\\r\\n    uint256 public VIYDiscount;\\r\\n    \\r\\n    /** EVENTS */\\r\\n    event PurchaseItem(address indexed buyer, uint256 indexed itemId);\\r\\n\\r\\n    constructor(\\r\\n        address _gemies,\\r\\n        address _yogies,\\r\\n        address _gYogies,\\r\\n        address _house,\\r\\n        address _car,\\r\\n        address _pet\\r\\n    ) {}\\r\\n\\r\\n    function initialize(\\r\\n        address _gemies,\\r\\n        address _yogies,\\r\\n        address _gYogies,\\r\\n        address _house,\\r\\n        address _car,\\r\\n        address _pet\\r\\n    ) public initializer {\\r\\n        __Ownable_init();            \\r\\n\\r\\n        gemies = IGemies(_gemies);\\r\\n        yogies = IYogies(_yogies);\\r\\n        gYogies = IERC721(_gYogies);\\r\\n\\r\\n        houseNFT = IYogieItem(_house);\\r\\n        carNFT = IYogieItem(_car);\\r\\n        petsNFT = IYogieItem(_pet);\\r\\n\\r\\n        housePrice = 60 ether;\\r\\n        carPrice = 450 ether;\\r\\n        petPrice = 450 ether;\\r\\n\\r\\n        houseSupply = 100;\\r\\n        carSupply = 0;\\r\\n        petSupply= 22;\\r\\n\\r\\n        gYogieDiscount = 25;\\r\\n        VIYDiscount = 25;\\r\\n    }\\r\\n\\r\\n    /** === Purchasing === */\\r\\n\\r\\n    function _validateVIY(uint256 yogieId) internal view returns (bool) {\\r\\n        return yogieId >= yogies.viyStartPoint();\\r\\n    }\\r\\n\\r\\n    function _getDiscountRate(bool isPets, uint256 providedYogie, bool isGenesis)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256) {\\r\\n            if (isGenesis && gYogies.balanceOf(msg.sender) > 0) {\\r\\n                return gYogieDiscount;\\r\\n            }\\r\\n\\r\\n            if (_validateVIY(providedYogie) && yogies.getYogiesRealOwner(providedYogie) == msg.sender && isPets) {\\r\\n                return VIYDiscount;\\r\\n            }\\r\\n\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n    function buyHouse(uint256 amount, uint256 providedYogie, bool isGenesis) external {\\r\\n        require(houseNFT.totalSupply() < houseSupply, \\\"Max houses sold\\\");\\r\\n        \\r\\n        uint256 discountRate = _getDiscountRate(false, providedYogie, isGenesis);\\r\\n        uint256 basePrice = housePrice * (100 - discountRate) / 100;\\r\\n        uint256 price = basePrice * amount;\\r\\n\\r\\n        require(gemies.getEcoSystemBalance(msg.sender) >= price, \\\"Gemies balance too low for item\\\");\\r\\n\\r\\n        gemies.spendEcosystemBalance(price, msg.sender);\\r\\n        houseNFT.mint(msg.sender, amount);\\r\\n\\r\\n        emit PurchaseItem(msg.sender, 0);\\r\\n    }\\r\\n\\r\\n    function buyCar(uint256 amount, uint256 providedYogie, bool isGenesis) external {\\r\\n        require(carNFT.totalSupply() < carSupply, \\\"Max cars sold\\\");\\r\\n        \\r\\n        uint256 discountRate = _getDiscountRate(false, providedYogie, isGenesis);\\r\\n        uint256 basePrice = carPrice * (100 - discountRate) / 100;\\r\\n        uint256 price = basePrice * amount;\\r\\n\\r\\n        require(gemies.getEcoSystemBalance(msg.sender) >= price, \\\"Gemies balance too low for item\\\");\\r\\n\\r\\n        gemies.spendEcosystemBalance(price, msg.sender);\\r\\n        carNFT.mint(msg.sender, amount);\\r\\n\\r\\n        emit PurchaseItem(msg.sender, 1);\\r\\n    }\\r\\n\\r\\n    function buyPets(uint256 amount, uint256 providedYogie, bool isGenesis) external {\\r\\n        require(petsNFT.totalSupply() < petSupply, \\\"Max pets sold\\\");\\r\\n        require(houseNFT.balanceOf(msg.sender) > 0, \\\"Need to have at least 1 house to buy pets\\\");\\r\\n        \\r\\n        uint256 discountRate = _getDiscountRate(true, providedYogie, isGenesis);\\r\\n        uint256 basePrice = petPrice * (100 - discountRate) / 100;\\r\\n        uint256 price = basePrice * amount;\\r\\n\\r\\n        require(gemies.getEcoSystemBalance(msg.sender) >= price, \\\"Gemies balance too low for item\\\");\\r\\n\\r\\n        gemies.spendEcosystemBalance(price, msg.sender);\\r\\n        petsNFT.mint(msg.sender, amount);\\r\\n\\r\\n        emit PurchaseItem(msg.sender, 2);\\r\\n    }\\r\\n\\r\\n    function housesLeft() external view returns (uint256) {\\r\\n        uint256 totalSupply = houseNFT.totalSupply();\\r\\n        if (totalSupply > houseSupply)\\r\\n            return 0;\\r\\n        else\\r\\n            return houseSupply - totalSupply;\\r\\n    }\\r\\n\\r\\n    function carsLeft() external view returns (uint256) {\\r\\n        uint256 totalSupply = carNFT.totalSupply();\\r\\n        if (totalSupply > carSupply)\\r\\n            return 0;\\r\\n        else\\r\\n            return carSupply - totalSupply;\\r\\n    }\\r\\n\\r\\n    function petsLeft() external view returns (uint256) {\\r\\n        uint256 totalSupply = petsNFT.totalSupply();\\r\\n        if (totalSupply > petSupply)\\r\\n            return 0;\\r\\n        else\\r\\n            return petSupply - totalSupply;\\r\\n    }\\r\\n    \\r\\n    /** === OWNER  ONLY === */\\r\\n\\r\\n    function setGemies(address _addr) external onlyOwner {\\r\\n        gemies = IGemies(_addr);\\r\\n    }\\r\\n\\r\\n    function setYogies(address _addr) external onlyOwner {\\r\\n        yogies = IYogies(_addr);\\r\\n    }\\r\\n\\r\\n    function setGYogies(address _addr) external onlyOwner {\\r\\n        gYogies = IERC721(_addr);\\r\\n    }\\r\\n\\r\\n    function setGYogieDiscount(uint256 newDiscount) external onlyOwner {\\r\\n        gYogieDiscount = newDiscount;\\r\\n    }\\r\\n\\r\\n    function setVIYDiscount(uint256 newDiscount) external onlyOwner {\\r\\n        VIYDiscount = newDiscount;\\r\\n    }\\r\\n\\r\\n    function setHouseNFT(address _new) external onlyOwner {\\r\\n        houseNFT = IYogieItem(_new);\\r\\n    }\\r\\n\\r\\n    function setCarNFT(address _new) external onlyOwner {\\r\\n        carNFT = IYogieItem(_new);\\r\\n    }\\r\\n\\r\\n    function setPetNFT(address _new) external onlyOwner {\\r\\n        petsNFT = IYogieItem(_new);\\r\\n    }\\r\\n\\r\\n    function setPrices(uint256 _housePrice, uint256 _carPrice, uint256 _petsPrice) external onlyOwner {\\r\\n        housePrice = _housePrice;\\r\\n        carPrice = _carPrice;\\r\\n        petPrice = _petsPrice;\\r\\n    }\\r\\n\\r\\n    function setSupplies(uint256 _houseSupply, uint256 _carSupply, uint256 _petsSupply) external onlyOwner {\\r\\n        houseSupply = _houseSupply;\\r\\n        carSupply = _carSupply;\\r\\n        petSupply = _petsSupply;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gemies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yogies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gYogies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_house\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_car\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"PurchaseItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VIYDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providedYogie\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGenesis\",\"type\":\"bool\"}],\"name\":\"buyCar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providedYogie\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGenesis\",\"type\":\"bool\"}],\"name\":\"buyHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providedYogie\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGenesis\",\"type\":\"bool\"}],\"name\":\"buyPets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carNFT\",\"outputs\":[{\"internalType\":\"contract IYogieItem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gYogieDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gYogies\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemies\",\"outputs\":[{\"internalType\":\"contract IGemies\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseNFT\",\"outputs\":[{\"internalType\":\"contract IYogieItem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"housePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"housesLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gemies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yogies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gYogies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_house\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_car\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openseaProxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petsNFT\",\"outputs\":[{\"internalType\":\"contract IYogieItem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setCarNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDiscount\",\"type\":\"uint256\"}],\"name\":\"setGYogieDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGYogies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGemies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setHouseNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setPetNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_housePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_carPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_petsPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_houseSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_carSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_petsSupply\",\"type\":\"uint256\"}],\"name\":\"setSupplies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDiscount\",\"type\":\"uint256\"}],\"name\":\"setVIYDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setYogies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yogies\",\"outputs\":[{\"internalType\":\"contract IYogies\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YogiesItemShop", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000075fb5de5fc69cc14a225ac198e052a62287ad49d000000000000000000000000cdd2c026b7c5efa9222c9050a1d1c72c567684420000000000000000000000007a5963206f1c5529430716de9feeb6b6da5c0518000000000000000000000000d980ade36fcc7b801957cbf43a35ead7cc3ed5e200000000000000000000000074ad5ba63531b1abbdf38eaba5bfe1ab36ce3498000000000000000000000000afde102eedf004eb469fe10ee1d7162a761566ed", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}