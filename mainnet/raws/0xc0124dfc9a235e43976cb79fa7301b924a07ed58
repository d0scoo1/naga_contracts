{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ncontract ISMtoysPortals {\r\n    struct Collection {\r\n        address contract_address;\r\n        uint256 price;\r\n        bool whitelisted;\r\n        bool only_holder;\r\n        Revenue[] revenue;\r\n    }\r\n\r\n    struct Revenue {\r\n        address account;\r\n        uint256 percentage;\r\n    }\r\n\r\n    struct Portal {\r\n        mapping(address => Collection) collections;\r\n        bool active;\r\n        bool defined;\r\n    }\r\n\r\n    struct Resume {\r\n        address contract_address;\r\n        uint256[] itemsIds;\r\n        uint256 quantity;\r\n    }\r\n\r\n    mapping(address => uint256) total_balances;\r\n    mapping(uint256 => Portal) portals;\r\n    uint256 public portalsRegistered;\r\n    address public owner;\r\n\r\n    event TransactionEvent(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 portalId\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You're not the owner of the contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(Collection[][] memory _portals, uint256[] memory portalsIds) {\r\n        portalsRegistered = 0;\r\n        owner = msg.sender;\r\n        registerMultiplePortals(_portals, portalsIds);\r\n    }\r\n\r\n    function registerMultiplePortals(\r\n        Collection[][] memory _portals,\r\n        uint256[] memory portalsIds\r\n    ) public onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < _portals.length; i++) {\r\n            registerPortal(_portals[i], portalsIds[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function registerPortal(Collection[] memory _portal, uint256 portalId)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(!portals[portalId].defined, \"portalId in use\");\r\n\r\n        for (uint256 i = 0; i < _portal.length; i++) {\r\n            addRevenueOrFail(\r\n                portalId,\r\n                _portal[i].revenue,\r\n                _portal[i].contract_address\r\n            );\r\n            portals[portalId]\r\n                .collections[_portal[i].contract_address]\r\n                .price = _portal[i].price;\r\n            portals[portalId]\r\n                .collections[_portal[i].contract_address]\r\n                .only_holder = _portal[i].only_holder;\r\n            portals[portalId]\r\n                .collections[_portal[i].contract_address]\r\n                .whitelisted = true;\r\n        }\r\n\r\n        portals[portalId].active = true;\r\n        portals[portalId].defined = true;\r\n        portalsRegistered++;\r\n        return true;\r\n    }\r\n\r\n    function removePortal(uint256 portalId) public onlyOwner returns (bool) {\r\n        portals[portalId].active = false;\r\n        return true;\r\n    }\r\n\r\n    function activePortal(uint256 portalId) public onlyOwner returns (bool) {\r\n        portals[portalId].active = true;\r\n        return true;\r\n    }\r\n\r\n    function addRevenueOrFail(\r\n        uint256 portalId,\r\n        Revenue[] memory _revenue,\r\n        address contract_address\r\n    ) private {\r\n        uint256 total = 0;\r\n        Revenue memory rev;\r\n        for (uint256 i = 0; i < _revenue.length; i++) {\r\n            total += _revenue[i].percentage;\r\n            rev.account = _revenue[i].account;\r\n            rev.percentage = _revenue[i].percentage;\r\n            portals[portalId].collections[contract_address].revenue.push(rev);\r\n        }\r\n        require(total == 100, \"Revenue percentages must sum 100\");\r\n    }\r\n\r\n    function setOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function deposit(uint256 portalId, Resume[] memory _resume)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        validateTokensAndValue(portalId, _resume);\r\n        emit TransactionEvent(msg.sender, address(0), msg.value, portalId);\r\n        return true;\r\n    }\r\n\r\n    function validateTokensAndValue(uint256 portalId, Resume[] memory _resume)\r\n        private\r\n    {\r\n        require(portals[portalId].active, \"Portal inactive\");\r\n        Resume memory currentResume;\r\n        uint256 price;\r\n        uint256 resumeLength = _resume.length;\r\n        require(resumeLength > 0, \"No data provided\");\r\n\r\n        for (uint256 i = 0; i < resumeLength; i++) {\r\n            currentResume.contract_address = _resume[i].contract_address;\r\n            currentResume.itemsIds = _resume[i].itemsIds;\r\n            currentResume.quantity = _resume[i].quantity;\r\n            require(\r\n                portals[portalId]\r\n                    .collections[currentResume.contract_address]\r\n                    .whitelisted,\r\n                \"Invalid collection\"\r\n            );\r\n            uint256 current_items_quantity = currentResume.itemsIds.length;\r\n            require(current_items_quantity > 0, \"No tokens provided\");\r\n            if (\r\n                portals[portalId]\r\n                    .collections[currentResume.contract_address]\r\n                    .only_holder\r\n            ) {\r\n                for (uint256 j = 0; j < currentResume.itemsIds.length; j++) {\r\n                    // call to collection contract\r\n                    require(\r\n                        msg.sender ==\r\n                            CollectionContract(currentResume.contract_address)\r\n                                .ownerOf(currentResume.itemsIds[j]),\r\n                        \"Invalid tokensId\"\r\n                    );\r\n                }\r\n            }\r\n            price +=\r\n                portals[portalId]\r\n                    .collections[currentResume.contract_address]\r\n                    .price *\r\n                currentResume.quantity;\r\n            shareRevenue(portalId, currentResume);\r\n        }\r\n        require(price != 0, \"Invalid quantity\");\r\n        require(msg.value == price, \"Invalid amount\");\r\n    }\r\n\r\n    function shareRevenue(uint256 portalId, Resume memory _resume) private {\r\n        Collection memory collection = portals[portalId].collections[\r\n            _resume.contract_address\r\n        ];\r\n        Revenue[] memory revs = collection.revenue;\r\n        uint256 value = collection.price * _resume.quantity;\r\n        uint256 total_distributed = 0;\r\n        uint256 curr_val;\r\n        for (uint256 i = 0; i < revs.length - 1; i++) {\r\n            curr_val = (value * revs[i].percentage) / 100;\r\n            total_balances[revs[i].account] += curr_val;\r\n            total_distributed += curr_val;\r\n        }\r\n        total_balances[revs[revs.length - 1].account] +=\r\n            value -\r\n            total_distributed;\r\n    }\r\n\r\n    function getBalance() external view onlyOwner returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getAccountBalance() external view returns (uint256) {\r\n        return total_balances[msg.sender];\r\n    }\r\n\r\n    function getPrice(uint256 portalId, address contract_address)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return portals[portalId].collections[contract_address].price;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external returns (bool) {\r\n        require(amount <= total_balances[msg.sender], \"Insufficient funds\");\r\n        // send amount ether in this contract to owner\r\n        (bool sent, ) = msg.sender.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        total_balances[msg.sender] -= amount;\r\n        emit TransactionEvent(address(0), msg.sender, amount, 0);\r\n        return true;\r\n    }\r\n}\r\n\r\n// ABI definition of collections\r\ncontract CollectionContract {\r\n    function ownerOf(uint256 tokenId) public returns (address) {}\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"only_holder\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct ISMtoysPortals.Revenue[]\",\"name\":\"revenue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ISMtoysPortals.Collection[][]\",\"name\":\"_portals\",\"type\":\"tuple[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"portalsIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"portalId\",\"type\":\"uint256\"}],\"name\":\"TransactionEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"portalId\",\"type\":\"uint256\"}],\"name\":\"activePortal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"portalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ISMtoysPortals.Resume[]\",\"name\":\"_resume\",\"type\":\"tuple[]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"portalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portalsRegistered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"only_holder\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct ISMtoysPortals.Revenue[]\",\"name\":\"revenue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ISMtoysPortals.Collection[][]\",\"name\":\"_portals\",\"type\":\"tuple[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"portalsIds\",\"type\":\"uint256[]\"}],\"name\":\"registerMultiplePortals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"only_holder\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct ISMtoysPortals.Revenue[]\",\"name\":\"revenue\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ISMtoysPortals.Collection[]\",\"name\":\"_portal\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"portalId\",\"type\":\"uint256\"}],\"name\":\"registerPortal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"portalId\",\"type\":\"uint256\"}],\"name\":\"removePortal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ISMtoysPortals", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000007c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000003a5051566b2241285be871f650c445a88a970edd0000000000000000000000000000000000000000000000000214e8348c4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047d5e4603e9a1c81aa2632f68e6c13b7dad3c8eb000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000009a3d00927bd22d97829c7d3a851249a1f4952a8c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000003d6a1f739e471c61328eb8a8d8d998e591c0fd420000000000000000000000000000000000000000000000000214e8348c4f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047d5e4603e9a1c81aa2632f68e6c13b7dad3c8eb000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000009a3d00927bd22d97829c7d3a851249a1f4952a8c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000006fc355d4e0ee44b292e50878f49798ff755a5bbc000000000000000000000000000000000000000000000000026db992a3b180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047d5e4603e9a1c81aa2632f68e6c13b7dad3c8eb0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000131bb3f2725ae092d0f5b7804060127216b9c5220000000000000000000000000000000000000000000000000000000000000014000000000000000000000000487b7a29fea0462024c25d9de3e20e8b86de7730000000000000000000000000000000000000000000000000026db992a3b180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047d5e4603e9a1c81aa2632f68e6c13b7dad3c8eb0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000131bb3f2725ae092d0f5b7804060127216b9c5220000000000000000000000000000000000000000000000000000000000000014000000000000000000000000df92f59b712cc0de16cf6cedd3fc3e03e6ea6e95000000000000000000000000000000000000000000000000026db992a3b180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000047d5e4603e9a1c81aa2632f68e6c13b7dad3c8eb0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000131bb3f2725ae092d0f5b7804060127216b9c5220000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c04e1163af2e9ca34903fea5530f21c0b1df1519ae96e7019c07f4d3b9f96e0c"}]}