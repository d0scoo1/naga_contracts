{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.11;\r\n\r\n// SPDX-License-Identifier:MIT\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract MultiSender {\r\n    address public owner;\r\n    IBEP20 public token;\r\n    mapping(address => bool) public FundTransferred;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"BEP20: Not an owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner, address _token) {\r\n        owner = _owner;\r\n        token = IBEP20(_token);\r\n    }\r\n\r\n    function tokenTransfer(address receiver, uint256 amount) internal {\r\n        token.transferFrom(owner, receiver, amount * 10**token.decimals());\r\n        FundTransferred[receiver] = true;\r\n    }\r\n\r\n    function multipletransfer(\r\n        address[] memory recivers,\r\n        uint256[] memory amount\r\n    ) public {\r\n        require(recivers.length == amount.length, \"unMatched Data\");\r\n        for (uint256 i; i < recivers.length; i++) {\r\n            tokenTransfer(recivers[i], amount[i]);\r\n        }\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeToken(address newToken) public onlyOwner {\r\n        token = IBEP20(newToken);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FundTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"multipletransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiSender", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dc3e12da231d0c01ce62e0160c99d6a846eebe700000000000000000000000009ce574a3f06e94fa61481c6df729ec0c1fd0f937", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a6b13ca25bbbc7cab27bf3a64480b48dc05f8153af9dc09cd3c88a9a8184ef5"}]}