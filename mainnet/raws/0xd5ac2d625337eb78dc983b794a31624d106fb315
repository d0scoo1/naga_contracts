{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @uniswap/lib/contracts/libraries/FullMath.sol\r\n\r\n// SPDX-License-Identifier: CC-BY-4.0\r\npragma solidity >=0.4.0;\r\n\r\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\r\n// license is CC-BY-4.0\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n\r\n        if (h == 0) return l / d;\r\n\r\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/Babylonian.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/BitMath.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nlibrary BitMath {\r\n    // returns the 0 indexed position of the most significant bit of the input x\r\n    // s.t. x >= 2**msb and x < 2**(msb+1)\r\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            r += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            r += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            r += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            r += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            r += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            r += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            r += 2;\r\n        }\r\n        if (x >= 0x2) r += 1;\r\n    }\r\n\r\n    // returns the 0 indexed position of the least significant bit of the input x\r\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\r\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\r\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\r\n\r\n        r = 255;\r\n        if (x & uint128(-1) > 0) {\r\n            r -= 128;\r\n        } else {\r\n            x >>= 128;\r\n        }\r\n        if (x & uint64(-1) > 0) {\r\n            r -= 64;\r\n        } else {\r\n            x >>= 64;\r\n        }\r\n        if (x & uint32(-1) > 0) {\r\n            r -= 32;\r\n        } else {\r\n            x >>= 32;\r\n        }\r\n        if (x & uint16(-1) > 0) {\r\n            r -= 16;\r\n        } else {\r\n            x >>= 16;\r\n        }\r\n        if (x & uint8(-1) > 0) {\r\n            r -= 8;\r\n        } else {\r\n            x >>= 8;\r\n        }\r\n        if (x & 0xf > 0) {\r\n            r -= 4;\r\n        } else {\r\n            x >>= 4;\r\n        }\r\n        if (x & 0x3 > 0) {\r\n            r -= 2;\r\n        } else {\r\n            x >>= 2;\r\n        }\r\n        if (x & 0x1 > 0) r -= 1;\r\n    }\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/FixedPoint.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity >=0.4.0;\r\n\r\n\r\n\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 public constant RESOLUTION = 112;\r\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z = 0;\r\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // multiply a UQ112x112 by an int and decode, returning an int\r\n    // reverts on overflow\r\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\r\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\r\n        require(z < 2**255, 'FixedPoint::muli: overflow');\r\n        return y < 0 ? -int256(z) : int256(z);\r\n    }\r\n\r\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\r\n    // lossy\r\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\r\n        if (self._x == 0 || other._x == 0) {\r\n            return uq112x112(0);\r\n        }\r\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\r\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\r\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\r\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\r\n\r\n        // partial products\r\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\r\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\r\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\r\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\r\n\r\n        // so the bit shift does not overflow\r\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\r\n\r\n        // this cannot exceed 256 bits, all values are 224 bits\r\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\r\n\r\n        // so the cast does not overflow\r\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\r\n\r\n        return uq112x112(uint224(sum));\r\n    }\r\n\r\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\r\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\r\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\r\n        if (self._x == other._x) {\r\n            return uq112x112(uint224(Q112));\r\n        }\r\n        if (self._x <= uint144(-1)) {\r\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\r\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\r\n            return uq112x112(uint224(value));\r\n        }\r\n\r\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\r\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\r\n        return uq112x112(uint224(result));\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // can be lossy\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    // reverts on overflow\r\n    // lossy\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\r\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    // lossy between 0/1 and 40 bits\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        if (self._x <= uint144(-1)) {\r\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\r\n        }\r\n\r\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\r\n        safeShiftBits -= safeShiftBits % 2;\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity >=0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/libraries/UniswapV2Library.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/UniswapV2OracleLibrary.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Ownable.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/genesisOracle/GenesisOracleData.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\ncontract GenesisOracleData {\r\n    uint256 btcDaySartTime = 1609459200;\r\n    uint256[] btcCumulativePrice =[13156445312852852539359295945662818759419881,13288872208569578371525385887174570655064771,13424990104470608910139046534678229196602339,13576010582627460012382040137815553501083556,13718353948100810240829766482855510374756456,13863751964579947155899545124117778945297264,14019368695514137871117205429174082285171872,14190956240363168830339614495427902738151333,14369545059231887761089065295675633119376988,14550366346775100595315741967053671358718210];\r\n}\r\n\r\n// File: contracts/genesisOracle/SlideWndOracle.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n//import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\r\n//import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// sliding window oracle that uses observations collected over a window to provide moving price averages in the past\r\n// `windowSize` with a precision of `windowSize / granularity`\r\n// note this is a singleton oracle and only needs to be deployed once per desired parameters, which\r\n// differs from the simple oracle which must be deployed once per pair.\r\ncontract GenesisOracle is Ownable,GenesisOracleData {\r\n    using FixedPoint for *;\r\n    using SafeMath for uint;\r\n    struct Observation {\r\n        uint timestamp;\r\n        uint price0;\r\n        uint price0Cumulative;\r\n    }\r\n\r\n    // the desired amount of time over which the moving average should be computed, e.g. 24 hours\r\n    uint256 public windowSize = 86400;//one day\r\n    // the number of observations stored for each pair, i.e. how many price observations are stored for the window.\r\n    // as granularity increases from 1, more frequent updates are needed, but moving averages become more precise.\r\n    // averages are computed over intervals with sizes in the range:\r\n    //   [windowSize - (windowSize / granularity) * 2, windowSize]\r\n    // e.g. if the window size is 24 hours, and the granularity is 24, the oracle will return the average price for\r\n    //   the period:\r\n    //   [now - [22 hours, 24 hours], now]\r\n    uint256 public granularity = 24;//24 times\r\n    // this is redundant with granularity and windowSize, but stored for gas savings & informational purposes.\r\n    uint256 public periodSize = windowSize/ granularity;\r\n\r\n    address public uniFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    //address public susiFactory = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\r\n    address public susiFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;//use uni\r\n\r\n    address public uniWbtcUsdtLp =  0x004375Dff511095CC5A197A54140a24eFEF3A416;//lp\r\n    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;//wbtc\r\n    //address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;//usdt\r\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;//usdc\r\n\r\n    address public btch = address(0);//btch\r\n   // address public susiWbtcUsdtLp = 0x784178D58b641a4FebF8D477a6ABd28504273132;//lp\r\n    address public susiBtchWbtcLp = address(0);\r\n\r\n    uint256 public btcDecimal = 1e8;\r\n    uint256 public usdcDecimal = 1e6;\r\n    uint256 public btchDecimal = 1e9;\r\n\r\n    uint256 public priceDecimal = 1e8;\r\n\r\n    uint256 public daySeconds = 86400;\r\n\r\n    uint256 public lastUpdateTime;\r\n\r\n    //tokenAddress=>dayIdx(timeStamp/86400)=>price\r\n    //WBTC/USDT, BTCH/WBTC\u4e24\u79cd\u5e01\u5bf9\uff0c\r\n    //WBTC/USDT\u9700\u8981365\uff0c24\uff0c\u5b9e\u65f6, UNI\r\n    //BTCH/WBTC\u9700\u898124\uff0c \u5b9e\u65f6\uff0cSUSHI\r\n    mapping(uint256=>uint256) public sushiBtchDayPrice;\r\n   // mapping(uint256=>uint256) public uiniAvgBtcDayPrice;\r\n    mapping(uint256=>uint256) public uiniAvgBtcDayCumulativePrice;\r\n    mapping(address =>mapping(uint256=>Observation)) public pairObservations;\r\n\r\n    event SetBtcAvg24Price(address indexed from,uint256 avgPrice,uint256 periodIdx);\r\n    event BtchAvg24Price(address indexed from,uint256 avgPrice,uint256 periodIdx);\r\n\r\n    constructor() public {\r\n        uint256 idx = btcDaySartTime/daySeconds;\r\n        for(uint256 i=0;i<btcCumulativePrice.length;i++){\r\n            uiniAvgBtcDayCumulativePrice[idx++] = btcCumulativePrice[i];\r\n        }\r\n    }\r\n\r\n    function setTimeWndGranularity(uint windowSize_, uint8 granularity_)  external onlyOwner {\r\n        require(granularity_ > 1, 'SlidingWindowOracle: GRANULARITY');\r\n        require(\r\n        (periodSize = windowSize_ / granularity_) * granularity_ == windowSize_,\r\n        'SlidingWindowOracle: WINDOW_NOT_EVENLY_DIVISIBLE'\r\n        );\r\n        windowSize = windowSize_;\r\n        granularity = granularity_;\r\n    }\r\n\r\n    function setFactoryAddress(address uniFactory_,address susiFactory_) external onlyOwner{\r\n        uniFactory = uniFactory_;\r\n        susiFactory = susiFactory_;\r\n    }\r\n\r\n    function initBtch(address btch_,uint256 btchDecimal_) external onlyOwner{\r\n        btch = btch_;\r\n        btchDecimal = btchDecimal_;\r\n    }\r\n\r\n    function setBtc(address wbtc_,uint256 btcDecimal_) external onlyOwner{\r\n        wbtc = wbtc_;\r\n        btcDecimal = btcDecimal_;\r\n    }\r\n\r\n    function setUsdc(address usdc_,uint256 usdcDecimal_) external onlyOwner{\r\n        usdc = usdc_;\r\n        usdcDecimal = usdcDecimal_;\r\n    }\r\n\r\n    function setBtcCumulativeDayPrice(uint256[] calldata _timestamps,uint256[] calldata _btcCumulativePrice) external onlyOwner {\r\n         require(_timestamps.length== _btcCumulativePrice.length,\"array length is not equal!\");\r\n         for(uint256 i=0;i<_timestamps.length;i++){\r\n            uint256 dayidx = _timestamps[i]/daySeconds;\r\n            uiniAvgBtcDayCumulativePrice[dayidx] = _btcCumulativePrice[i];\r\n        }\r\n    }\r\n\r\n    function btchSetCumulativeDayPrice(uint256[] calldata _timestamps,uint256[] calldata _btchDayCumulativeprices) external onlyOwner{\r\n        require(_timestamps.length== _btchDayCumulativeprices.length,\"array length is not equal!\");\r\n        for(uint256 i=0;i< _timestamps.length;i++) {\r\n            uint256 dayidx = _timestamps[i]/daySeconds;\r\n            sushiBtchDayPrice[dayidx] = _btchDayCumulativeprices[i];\r\n        }\r\n    }\r\n\r\n    function setBtcCumOberverVationData(uint256[] calldata _timestamps,uint256[] calldata _data)  external onlyOwner {\r\n        require(_timestamps.length==_data.length,\"array length is not equal\");\r\n        uint256 idx = 0;\r\n        for(uint256 i=0;i<_timestamps.length;i++)  {\r\n           idx = _timestamps[i]/periodSize;\r\n           pairObservations[wbtc][idx] = Observation(block.timestamp,0,_data[i]);\r\n       }\r\n    }\r\n\r\n    function btchSetCumOberverVationData(uint256[] calldata _timestamps,uint256[] calldata _data)  external onlyOwner {\r\n        require(_timestamps.length==_data.length,\"array length is not equal\");\r\n        uint256 idx = 0;\r\n        for(uint256 i=0;i<_timestamps.length;i++)  {\r\n           idx = _timestamps[i]/periodSize;\r\n           pairObservations[btch][idx] = Observation(block.timestamp,0,_data[i]);\r\n        }\r\n    }\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    function computeAmountOut(\r\n        uint priceCumulativeStart,\r\n        uint priceCumulativeEnd,\r\n        uint timeElapsed,\r\n        uint amountIn\r\n    ) internal pure returns (uint amountOut) {\r\n        if(timeElapsed==0) {\r\n            return 0;\r\n        }\r\n        // overflow is desired.\r\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n            uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\r\n        );\r\n\r\n        amountOut = priceAverage.mul(amountIn).decode144();\r\n    }\r\n//eAvgPrice(susiFactory,btch,btchDecimal,priceStart,priceEnd,startTime,endTime,wbtc);\r\n//getTimeAvgPrice(susiFactory,wbtc,btcDecimal,priceStart,priceEnd,startTime,endTime,usdc);\r\n    function getTimeAvgPrice(address factory,\r\n        address tokenIn,\r\n        uint amountIn,\r\n        uint priceInCumulativeStart,\r\n        uint priceInCumulativeEnd,\r\n        uint startTime,\r\n        uint endTime,\r\n        address tokenOut)\r\n        internal view returns (uint amountOut)\r\n    {\r\n        if(startTime==0||endTime==0||startTime>=block.timestamp\r\n           ||priceInCumulativeStart>priceInCumulativeEnd) {\r\n            return 0;\r\n        }\r\n\r\n        address pair = UniswapV2Library.pairFor(factory, tokenIn, tokenOut);\r\n        uint timeElapsed = block.timestamp.sub(startTime);\r\n        (uint price0Cumulative,,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\r\n        if(price0Cumulative<priceInCumulativeEnd) {\r\n            price0Cumulative = priceInCumulativeEnd;\r\n            timeElapsed = endTime.sub(startTime);\r\n        }\r\n        return computeAmountOut(priceInCumulativeStart, price0Cumulative, timeElapsed, amountIn);\r\n    }\r\n\r\n    //btch realtime price in wbtc\r\n    function getBTCHBTC() public view returns(uint256){\r\n        if(btch==address(0)||wbtc==address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        (uint256 btchReserve/*reserveA*/,uint256 wbtcReserve/*reserveB*/)= UniswapV2Library.getReserves(susiFactory, btch/*tokenA*/, wbtc/*tokenB*/);\r\n        if(btchReserve==0) {\r\n            return 0;\r\n        }\r\n\r\n        return UniswapV2Library.quote(btchDecimal,btchReserve,wbtcReserve);\r\n    }\r\n\r\n    //btch avg price(24 hours) in wbtc\r\n    function getBTCHBTC24() public view returns(uint256){\r\n        if(btch==address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 idx = block.timestamp/periodSize;\r\n        uint256 i = idx - daySeconds/periodSize;\r\n        uint startTime = pairObservations[btch][i].timestamp;\r\n        uint priceStart = pairObservations[btch][i].price0Cumulative;\r\n        if(priceStart==0) {\r\n            for(;i<idx;i++) {\r\n                priceStart = pairObservations[btch][i].price0Cumulative;\r\n                if(priceStart>0) {\r\n                    startTime = pairObservations[btch][i].timestamp;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        uint priceEnd = pairObservations[btch][idx].price0Cumulative;\r\n        uint j=idx;\r\n        uint endTime = pairObservations[btch][j].timestamp;\r\n        if(priceEnd==0) {\r\n            for(;j>i;j--) {\r\n                priceEnd = pairObservations[btch][j].price0Cumulative;\r\n                if(priceEnd>0) {\r\n                    endTime = pairObservations[btch][j].timestamp;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint timeAvgPrice = getTimeAvgPrice(susiFactory,btch,btchDecimal,priceStart,priceEnd,startTime,endTime,wbtc);\r\n        if(timeAvgPrice>0) {\r\n            return timeAvgPrice;\r\n        }\r\n\r\n        return getBTCHBTC();\r\n    }\r\n\r\n    //btch realtime price in wbtc\r\n    function getBTCUSDC() public view returns(uint256){\r\n        if(wbtc==address(0)||usdc==address(0)) {\r\n            return 0;\r\n        }\r\n        (uint256 btcReserve/*reserveA*/,uint256 usdcReserve/*reserveB*/)= UniswapV2Library.getReserves(uniFactory, wbtc/*tokenA*/, usdc/*tokenB*/);\r\n        if(btcReserve==0) {\r\n            return 0;\r\n        }\r\n        return UniswapV2Library.quote(btcDecimal,btcReserve,usdcReserve);\r\n    }\r\n\r\n    //btc avg price(24 hours) in wbtc\r\n    function getBTCUSDC24() public view returns(uint256){\r\n        if(wbtc==address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 idx = block.timestamp/periodSize;\r\n        uint256 i = idx - daySeconds/periodSize;\r\n        uint priceStart = pairObservations[wbtc][i].price0Cumulative;\r\n        uint startTime = pairObservations[wbtc][i].timestamp;\r\n        if(priceStart==0) {\r\n            for(;i<idx;i++) {\r\n                priceStart = pairObservations[wbtc][i].price0Cumulative;\r\n                if(priceStart>0) {\r\n                    startTime = pairObservations[wbtc][i].timestamp;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        uint priceEnd = pairObservations[wbtc][idx].price0Cumulative;\r\n        uint j=idx;\r\n        uint endTime = pairObservations[wbtc][j].timestamp;\r\n        if(priceEnd==0) {\r\n            for(;j>i;j--) {\r\n                priceEnd = pairObservations[wbtc][j].price0Cumulative;\r\n                if(priceEnd>0) {\r\n                    endTime = pairObservations[wbtc][j].timestamp;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint timeAvgPrice = getTimeAvgPrice(uniFactory,wbtc,btcDecimal,priceStart,priceEnd,startTime,endTime,usdc);\r\n        if(timeAvgPrice>0) {\r\n            return timeAvgPrice;\r\n        }\r\n\r\n        return getBTCUSDC();\r\n    }\r\n\r\n    function getBTCUSDC365() external view returns(uint256) {\r\n       uint256 dayidx = block.timestamp/daySeconds;\r\n       uint256 startIdx = dayidx -365;\r\n       uint startTime = startIdx*daySeconds;\r\n       uint priceStart = uiniAvgBtcDayCumulativePrice[startIdx];\r\n       if(priceStart==0) {\r\n           for(;startIdx<dayidx;startIdx++) {\r\n               priceStart = uiniAvgBtcDayCumulativePrice[startIdx];\r\n               if(priceStart>0) {\r\n                   startTime = startIdx*daySeconds;\r\n                   break;\r\n               }\r\n           }\r\n       }\r\n\r\n       uint priceEnd = uiniAvgBtcDayCumulativePrice[dayidx];\r\n       uint j=dayidx;\r\n       uint endTime = j*daySeconds;\r\n       if(priceEnd==0) {\r\n            for(;j>startIdx;j--) {\r\n                priceEnd = uiniAvgBtcDayCumulativePrice[j];\r\n                if(priceEnd>0) {\r\n                    endTime = j*daySeconds;\r\n                    break;\r\n                }\r\n            }\r\n       }\r\n       uint timeAvgPrice = getTimeAvgPrice(uniFactory,wbtc,btcDecimal,priceStart,priceEnd,startTime,endTime,usdc);\r\n       if(timeAvgPrice>0) {\r\n           return timeAvgPrice;\r\n       }\r\n       return  getBTCUSDC24();\r\n    }\r\n\r\n    function needUpdate() public view returns (bool) {\r\n        uint256 idx = block.timestamp/periodSize;\r\n        bool timeupdate = (block.timestamp-lastUpdateTime)>(periodSize/2);\r\n        bool uniupdate = (pairObservations[wbtc][idx].timestamp==0);\r\n        bool susiupdate = (pairObservations[btch][idx].timestamp==0);\r\n        return (uniupdate&&susiupdate&&timeupdate);\r\n    }\r\n\r\n    function update() external {\r\n        //will return if is not over periodSize/2\r\n        if((block.timestamp-lastUpdateTime)<(periodSize/2)) {\r\n            return;\r\n        }\r\n        //update observation for uni btc day price\r\n        updateOberverVation();\r\n        lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    // update the cumulative price for the observation at the current timestamp. each observation is updated at most\r\n    // once per epoch period.\r\n    function updateOberverVation() private {\r\n        uint256 idx = block.timestamp/periodSize;\r\n        uint256 price = 0;\r\n\r\n        if(wbtc!=address(0)) {\r\n            if(pairObservations[wbtc][idx].timestamp==0) {\r\n                address pair = UniswapV2Library.pairFor(uniFactory,wbtc,usdc);\r\n                (uint price0Cumulative,,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\r\n\r\n                price = getBTCUSDC();\r\n                pairObservations[wbtc][idx] = Observation(block.timestamp,price,price0Cumulative);\r\n\r\n                //record day price0Cumulative\r\n                uint256 dayidx = block.timestamp/daySeconds;\r\n                if(uiniAvgBtcDayCumulativePrice[dayidx]==0) {\r\n                    uiniAvgBtcDayCumulativePrice[dayidx]=price0Cumulative;\r\n                }\r\n\r\n                emit SetBtcAvg24Price(msg.sender,price,idx);\r\n            }\r\n        }\r\n\r\n        if(btch!=address(0)) {\r\n              if(pairObservations[btch][idx].timestamp==0) {\r\n                address pair = UniswapV2Library.pairFor(susiFactory,btch,wbtc);\r\n                (uint price0Cumulative,,) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\r\n\r\n                price = getBTCHBTC();\r\n                pairObservations[btch][idx] = Observation(block.timestamp,price,price0Cumulative);\r\n\r\n                emit BtchAvg24Price(msg.sender,price,idx);\r\n              }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodIdx\",\"type\":\"uint256\"}],\"name\":\"BtchAvg24Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodIdx\",\"type\":\"uint256\"}],\"name\":\"SetBtcAvg24Price\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"btcDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btchDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"name\":\"btchSetCumOberverVationData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_btchDayCumulativeprices\",\"type\":\"uint256[]\"}],\"name\":\"btchSetCumulativeDayPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCHBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCHBTC24\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCUSDC24\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBTCUSDC365\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"btch_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"btchDecimal_\",\"type\":\"uint256\"}],\"name\":\"initBtch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price0Cumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wbtc_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"btcDecimal_\",\"type\":\"uint256\"}],\"name\":\"setBtc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"name\":\"setBtcCumOberverVationData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_btcCumulativePrice\",\"type\":\"uint256[]\"}],\"name\":\"setBtcCumulativeDayPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"susiFactory_\",\"type\":\"address\"}],\"name\":\"setFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"granularity_\",\"type\":\"uint8\"}],\"name\":\"setTimeWndGranularity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcDecimal_\",\"type\":\"uint256\"}],\"name\":\"setUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sushiBtchDayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susiBtchWbtcLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susiFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uiniAvgBtcDayCumulativePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniWbtcUsdtLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GenesisOracle", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e6c823b3133b55b1b505fe89131b23fdf0c6670a6756047136a7e1f5aaa1df0"}]}