{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/staking.sol\r\n\r\n\r\npragma solidity ^0.8;\r\n\r\n\r\ncontract StakingRewards {\r\n\r\n    IERC20 public stakingToken;\r\n    IERC20 public rewardsToken;\r\n    \r\n    uint public rewardRate; // tokens distributed per second\r\n    uint public lastUpdateTime;\r\n    uint public rewardPerTokenStored;\r\n    uint public lockedTime; // in seconds\r\n    uint public initialTime; // in seconds\r\n    uint public maxTotalSupply; // max amount of staked tokens, 0 == unlimited\r\n    uint public totalSupply;\r\n    \r\n    address public owner;\r\n    \r\n    bool public paused = false;\r\n    \r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    mapping(address => uint) public rewards;\r\n    mapping(address => uint) public stakeStart;\r\n    mapping(address => uint) public balances;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event StartStaking(address indexed user, uint _amount);\r\n    event WitdrawStaked(address indexed user, uint _amount, bool _withPenalty);\r\n    event WitdrawRewards(address indexed user, uint _amount);\r\n    event Recovered(address token, uint amount);\r\n    \r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(address _stakingToken, address _rewardsToken, uint _rewardRate, uint _lockedTime, uint _initialTime, uint _maxTotalSupply) {\r\n        owner = msg.sender;\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsToken = IERC20(_rewardsToken);\r\n        rewardRate = _rewardRate;\r\n        lockedTime = _lockedTime;\r\n        initialTime = _initialTime;\r\n        maxTotalSupply = _maxTotalSupply;\r\n    }\r\n    \r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = block.timestamp;\r\n\r\n        rewards[account] = earned(account);\r\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        _;\r\n    }\r\n    \r\n    /* ========== VIEWS ========== */\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalSupply == 0) {\r\n            return 0;\r\n        }\r\n        return\r\n            rewardPerTokenStored +\r\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / totalSupply);\r\n    }\r\n\r\n    function earned(address account) public view returns (uint) {\r\n        if(balances[account] == 0) {\r\n            return rewards[account];\r\n        }\r\n        return\r\n            ((balances[account] *\r\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\r\n            rewards[account];\r\n    }\r\n    \r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function stake(uint _amount) external updateReward(msg.sender) {\r\n        require(!paused, \"Staking is Paused\");\r\n        require(maxTotalSupply == 0 || maxTotalSupply >= totalSupply + _amount, \"Max total supply exceeded\");\r\n\r\n        totalSupply += _amount;\r\n        balances[msg.sender] += _amount;\r\n        stakeStart[msg.sender] = block.timestamp;\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n        \r\n        emit StartStaking(msg.sender, _amount);\r\n    }\r\n    \r\n    function withdraw(uint _amount) external updateReward(msg.sender) {\r\n        require( (block.timestamp - stakeStart[msg.sender]) >= initialTime, \"Not time yet\" ); \r\n        require(balances[msg.sender] > 0, \"Nothing to withdraw\");\r\n        require(balances[msg.sender] >= _amount, \"Amount too high\");\r\n        \r\n        if((block.timestamp - stakeStart[msg.sender]) < lockedTime){\r\n            uint _amountToWithdraw = _amount - (_amount / 5); // penalty 20%\r\n            totalSupply -= _amount;\r\n            balances[msg.sender] -= _amount;\r\n            stakingToken.transfer(msg.sender, _amountToWithdraw);\r\n            \r\n            emit WitdrawStaked(msg.sender, _amountToWithdraw, true);\r\n            \r\n        }else{\r\n            totalSupply -= _amount;\r\n            balances[msg.sender] -= _amount;\r\n            stakingToken.transfer(msg.sender, _amount); // without penalty\r\n            \r\n            emit WitdrawStaked(msg.sender, _amount, false);\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        require( (block.timestamp - stakeStart[msg.sender]) >= initialTime, \"Not time yet\" );\r\n        \r\n        uint reward = rewards[msg.sender];\r\n\r\n        require(rewardsToken != stakingToken || stakingToken.balanceOf(address(this)) - reward >= totalSupply, \"Withdrawal of reward unavailable\");\r\n\r\n        rewards[msg.sender] = 0;\r\n        rewardsToken.transfer(msg.sender, reward);\r\n        \r\n        emit WitdrawRewards(msg.sender, reward);\r\n    }\r\n    \r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\r\n        require(_tokenAddress != address(stakingToken) || stakingToken.balanceOf(address(this)) - _tokenAmount >= totalSupply, \"Cannot withdraw staked tokens.\"); // can withdraw stakingToken but cannot withdraw the ones that are staked\r\n        \r\n        IERC20(_tokenAddress).transfer(owner, _tokenAmount);\r\n\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function changeRewardRate(uint _rewardRate) public onlyOwner{\r\n        require(_rewardRate > 0, \"Value too low\");\r\n\r\n        rewardRate = _rewardRate;\r\n    }\r\n    \r\n    function changeMaxTotalSupply(uint _maxTotalSupply) public onlyOwner{\r\n        maxTotalSupply = _maxTotalSupply;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner{\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function pause() public onlyOwner{\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner{\r\n        paused = false;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StartStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WitdrawRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_withPenalty\",\"type\":\"bool\"}],\"name\":\"WitdrawStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"changeMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"changeRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ae0d42f23c33338de15bfa89c7405c068d9dc0a0000000000000000000000007ae0d42f23c33338de15bfa89c7405c068d9dc0a0000000000000000000000000000000000000000000000000465cfa2958a2c000000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c1be4c96dfaa497095645da7427586e38b45f40be87408cd9975b89e0370060"}]}