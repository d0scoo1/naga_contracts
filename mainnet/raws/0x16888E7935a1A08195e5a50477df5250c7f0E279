{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/veDFManager/veDFManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"./veDFCore.sol\\\";\\r\\n\\r\\ncontract veDFManager is veDFCore {\\r\\n    IERC20Upgradeable public DF;\\r\\n\\r\\n    event SupplySDF(uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        IveDF _veDF,\\r\\n        IStakedDF _sDF,\\r\\n        IERC20Upgradeable _rewardToken,\\r\\n        uint256 _startTime,\\r\\n        address _rewardDistributor\\r\\n    ) public {\\r\\n        initialize(_veDF, _sDF, _rewardToken, _startTime, _rewardDistributor);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        IveDF _veDF,\\r\\n        IStakedDF _sDF,\\r\\n        IERC20Upgradeable _rewardToken,\\r\\n        uint256 _startTime,\\r\\n        address _rewardDistributor\\r\\n    ) public override {\\r\\n        require(\\r\\n            _sDF.DF() == IRewardDistributor(_rewardDistributor).rewardToken(),\\r\\n            \\\"veDFManager: vault distribution token error\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            address(_sDF) == address(_rewardToken),\\r\\n            \\\"veDFManager: Distributed as SDF\\\"\\r\\n        );\\r\\n\\r\\n        super.initialize(_veDF, _sDF, _rewardToken, _startTime, _rewardDistributor);\\r\\n        DF = IERC20Upgradeable(_sDF.DF());\\r\\n        DF.safeApprove(address(sDF), uint256(-1));\\r\\n    }\\r\\n\\r\\n    ///@notice Supply SDF to be distributed\\r\\n    ///@param _amount DF amount\\r\\n    function supplySDFUnderlying(uint256 _amount) public onlyOwner {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"veDFManager: supply SDF Underlying amount must greater than 0\\\"\\r\\n        );\\r\\n        DF.safeTransferFrom(rewardDistributor, address(this), _amount);\\r\\n        sDF.stake(address(this), _amount);\\r\\n        emit SupplySDF(_amount);\\r\\n    }\\r\\n\\r\\n    ///@notice Supply SDF to be distributed\\r\\n    ///@param _amount sDF amount\\r\\n    function supplySDF(uint256 _amount) external onlyOwner {\\r\\n        require(_amount > 0, \\\"veDFManager: supply SDF amount must greater than 0\\\");\\r\\n\\r\\n        //Calculate the number of needed DF based on _exchangeRate\\r\\n        uint256 _exchangeRate = sDF.getCurrentExchangeRate();\\r\\n        uint256 _underlyingAmount = _amount.rmul(_exchangeRate);\\r\\n        supplySDFUnderlying(_underlyingAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock DF and harvest veDF, One operation will DF lock\\r\\n     * @dev Create lock-up information and mint veDF on lock-up amount and duration.\\r\\n     * @param _amount DF token amount.\\r\\n     * @param _dueTime Due time timestamp, in seconds.\\r\\n     */\\r\\n    function createInOne(uint256 _amount, uint256 _dueTime)\\r\\n        external\\r\\n        sanityCheck(_amount)\\r\\n        isDueTimeValid(_dueTime)\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        DF.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        uint256 _sDFAmount = sDF.stake(address(this), _amount);\\r\\n\\r\\n        uint256 _duration = _dueTime.sub(block.timestamp);\\r\\n        uint256 _veDFAmount = veDF.create(msg.sender, _sDFAmount, _duration);\\r\\n\\r\\n        totalSupply = totalSupply.add(_veDFAmount);\\r\\n        balances[msg.sender] = balances[msg.sender].add(_veDFAmount);\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_veDFAmount);\\r\\n\\r\\n        emit Create(msg.sender, _sDFAmount, _duration, _veDFAmount);\\r\\n    }\\r\\n\\r\\n    function refillInOne(uint256 _amount)\\r\\n        external\\r\\n        sanityCheck(_amount)\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        DF.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _sDFAmount = sDF.stake(address(this), _amount);\\r\\n\\r\\n        uint256 _veDFAmount = veDF.refill(msg.sender, _sDFAmount);\\r\\n\\r\\n        (uint32 _dueTime, , ) = veDF.getLocker(msg.sender);\\r\\n\\r\\n        totalSupply = totalSupply.add(_veDFAmount);\\r\\n        balances[msg.sender] = balances[msg.sender].add(_veDFAmount);\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_veDFAmount);\\r\\n\\r\\n        emit Refill(msg.sender, _sDFAmount, _veDFAmount);\\r\\n    }\\r\\n\\r\\n    ///@param _increment The number of DF added to the original number of locked warehouses\\r\\n    function refreshInOne(uint256 _increment, uint256 _dueTime)\\r\\n        external\\r\\n        isDueTimeValid(_dueTime)\\r\\n        nonReentrant\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        (, , uint256 _lockedSDF) = veDF.getLocker(msg.sender);\\r\\n        uint256 _newSDF = _lockedSDF;\\r\\n\\r\\n        if (_increment > 0) {\\r\\n            DF.safeTransferFrom(msg.sender, address(this), _increment);\\r\\n            uint256 _incrementSDF = sDF.stake(address(this), _increment);\\r\\n            _newSDF = _newSDF.add(_incrementSDF);\\r\\n        }\\r\\n\\r\\n        uint256 _duration = _dueTime.sub(block.timestamp);\\r\\n        uint256 _oldVEDFAmount = balances[msg.sender];\\r\\n        (uint256 _newVEDFAmount, ) = veDF.refresh(msg.sender, _newSDF, _duration);\\r\\n\\r\\n        balances[msg.sender] = _newVEDFAmount;\\r\\n        userRewardPerTokenPaid[msg.sender] = rewardPerTokenStored;\\r\\n\\r\\n        totalSupply = totalSupply.add(_newVEDFAmount).sub(_oldVEDFAmount);\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_newVEDFAmount);\\r\\n        accSettledBalance = accSettledBalance.sub(_oldVEDFAmount);\\r\\n\\r\\n        emit Refresh(\\r\\n            msg.sender,\\r\\n            _lockedSDF,\\r\\n            _newSDF,\\r\\n            _duration,\\r\\n            _oldVEDFAmount,\\r\\n            _newVEDFAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _withdraw() internal {\\r\\n        (, , uint96 _lockedSDF) = veDF.getLocker(msg.sender);\\r\\n        uint256 _burnVEDF = veDF.withdraw(msg.sender);\\r\\n        uint256 _oldBalance = balances[msg.sender];\\r\\n\\r\\n        totalSupply = totalSupply.sub(_oldBalance);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_oldBalance);\\r\\n\\r\\n        //Since totalsupply is reduced and the operation must be performed after the lock expires,\\r\\n        //accsettledbalance should be reduced at the same time\\r\\n        accSettledBalance = accSettledBalance.sub(_oldBalance);\\r\\n\\r\\n        uint256 _DFAmount = sDF.unstake(address(this), _lockedSDF);\\r\\n        DF.safeTransfer(msg.sender, _DFAmount);\\r\\n\\r\\n        emit Withdraw(msg.sender, _burnVEDF, _oldBalance);\\r\\n    }\\r\\n\\r\\n    function getReward() public override updateReward(msg.sender) {\\r\\n        uint256 _reward = rewards[msg.sender];\\r\\n        if (_reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            rewardToken.safeTransfer(msg.sender, _reward);\\r\\n            emit RewardPaid(msg.sender, _reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRewardInOne() public updateReward(msg.sender) {\\r\\n        uint256 _reward = rewards[msg.sender];\\r\\n        if (_reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            uint256 _DFAmount = sDF.unstake(address(this), _reward);\\r\\n            DF.safeTransfer(msg.sender, _DFAmount);\\r\\n            emit RewardPaid(msg.sender, _reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exit2() external {\\r\\n        getReward();\\r\\n        _withdraw();\\r\\n    }\\r\\n\\r\\n    function exitInOne() external {\\r\\n        getRewardInOne();\\r\\n        _withdraw();\\r\\n    }\\r\\n\\r\\n    function earnedInOne(address _account)\\r\\n        public\\r\\n        updateReward(_account)\\r\\n        returns (uint256 _reward)\\r\\n    {\\r\\n        _reward = rewards[_account];\\r\\n        if (_reward > 0) {\\r\\n            uint256 _exchangeRate = sDF.getCurrentExchangeRate();\\r\\n            _reward = _reward.rmul(_exchangeRate);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/veDFManager/veDFCore.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./LPTokenWrapper.sol\\\";\\r\\nimport \\\"../interface/IStakedDF.sol\\\";\\r\\nimport \\\"../interface/IRewardDistributor.sol\\\";\\r\\nimport \\\"../library/SafeRatioMath.sol\\\";\\r\\nimport \\\"../library/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Minter of veDF\\r\\n * @dev The contract does not store parameters such as the number of SDFs\\r\\n */\\r\\ncontract veDFCore is\\r\\n    Ownable,\\r\\n    Initializable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    LPTokenWrapper\\r\\n{\\r\\n    using SafeRatioMath for uint256;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using SafeERC20Upgradeable for IStakedDF;\\r\\n\\r\\n    ///@dev Min lock step (seconds of a week).\\r\\n    uint256 internal constant MIN_STEP = 1 weeks;\\r\\n\\r\\n    ///@dev Token of reward\\r\\n    IERC20Upgradeable public rewardToken;\\r\\n    IStakedDF public sDF;\\r\\n    address public rewardDistributor;\\r\\n\\r\\n    uint256 public rewardRate = 0;\\r\\n\\r\\n    ///@dev The timestamp that started to distribute token reward.\\r\\n    uint256 public startTime;\\r\\n    uint256 public lastUpdateTime;\\r\\n    uint256 public rewardPerTokenStored;\\r\\n\\r\\n    uint256 public lastRateUpdateTime;\\r\\n    uint256 public rewardDistributedStored;\\r\\n\\r\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n    mapping(address => uint256) public rewards;\\r\\n\\r\\n    ///@dev Due time of settlement to node\\r\\n    uint256 public lastSettledTime;\\r\\n    ///@dev Total overdue balance settled\\r\\n    uint256 public accSettledBalance;\\r\\n\\r\\n    struct SettleLocalVars {\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 lastSettledTime;\\r\\n        uint256 accSettledBalance;\\r\\n        uint256 rewardPerToken;\\r\\n        uint256 rewardRate;\\r\\n        uint256 totalSupply;\\r\\n    }\\r\\n\\r\\n    struct Node {\\r\\n        uint256 rewardPerTokenSettled;\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    ///@dev due time timestamp => data\\r\\n    mapping(uint256 => Node) internal nodes;\\r\\n\\r\\n    event RewardRateUpdated(uint256 oldRewardRate, uint256 newRewardRate);\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n\\r\\n    ///@dev Emitted when `create` is called.\\r\\n    ///@param recipient Address of receiving veDF\\r\\n    ///@param sDFLocked Number of locked sDF\\r\\n    ///@param duration Lock duration\\r\\n    ///@param veDFReceived Number of veDF received\\r\\n    event Create(\\r\\n        address recipient,\\r\\n        uint256 sDFLocked,\\r\\n        uint256 duration,\\r\\n        uint256 veDFReceived\\r\\n    );\\r\\n\\r\\n    ///@dev Emitted when `refill` is called.\\r\\n    ///@param recipient Address of receiving veDF\\r\\n    ///@param sDFRefilled Increased number of sDF\\r\\n    ///@param veDFReceived Number of veDF received\\r\\n    event Refill(address recipient, uint256 sDFRefilled, uint256 veDFReceived);\\r\\n\\r\\n    ///@dev Emitted when `extend` is called.\\r\\n    ///@param recipient Address of receiving veDF\\r\\n    ///@param preDueTime Old expiration time\\r\\n    ///@param newDueTime New expiration time\\r\\n    ///@param duration Lock duration\\r\\n    ///@param veDFReceived Number of veDF received\\r\\n    event Extend(\\r\\n        address recipient,\\r\\n        uint256 preDueTime,\\r\\n        uint256 newDueTime,\\r\\n        uint256 duration,\\r\\n        uint256 veDFReceived\\r\\n    );\\r\\n\\r\\n    ///@dev Emitted when `refresh` is called.\\r\\n    ///@param recipient Address of receiving veDF\\r\\n    ///@param presDFLocked Old number of locked sDF\\r\\n    ///@param newsDFLocked New number of locked sDF\\r\\n    ///@param duration Lock duration\\r\\n    ///@param preveDFBalance Original veDF balance\\r\\n    ///@param newveDFBalance New of veDF balance\\r\\n    event Refresh(\\r\\n        address recipient,\\r\\n        uint256 presDFLocked,\\r\\n        uint256 newsDFLocked,\\r\\n        uint256 duration,\\r\\n        uint256 preveDFBalance,\\r\\n        uint256 newveDFBalance\\r\\n    );\\r\\n\\r\\n    ///@dev Emitted when `withdraw` is called.\\r\\n    ///@param recipient Address of receiving veDF\\r\\n    ///@param veDFBurned Amount of veDF burned\\r\\n    ///@param sDFRefunded Number of sDF returned\\r\\n    event Withdraw(address recipient, uint256 veDFBurned, uint256 sDFRefunded);\\r\\n\\r\\n    function initialize(\\r\\n        IveDF _veDF,\\r\\n        IStakedDF _sDF,\\r\\n        IERC20Upgradeable _rewardToken,\\r\\n        uint256 _startTime,\\r\\n        address _rewardDistributor\\r\\n    ) public virtual initializer {\\r\\n        require(\\r\\n            _startTime > block.timestamp,\\r\\n            \\\"veDFManager: Start time must be greater than the block timestamp\\\"\\r\\n        );\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n\\r\\n        veDF = _veDF;\\r\\n        sDF = _sDF;\\r\\n        rewardToken = _rewardToken;\\r\\n        startTime = _startTime;\\r\\n        lastSettledTime = _startTime;\\r\\n        lastUpdateTime = _startTime;\\r\\n        rewardDistributor = _rewardDistributor;\\r\\n\\r\\n        sDF.safeApprove(address(veDF), uint256(-1));\\r\\n    }\\r\\n\\r\\n    ///@notice Update distribution of historical nodes and users\\r\\n    ///@dev Basically all operations will be called\\r\\n    modifier updateReward(address _account) {\\r\\n        if (startTime <= block.timestamp) {\\r\\n            _settleNode(block.timestamp);\\r\\n            if (_account != address(0)) {\\r\\n                _updateUserReward(_account);\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateRewardDistributed() {\\r\\n        rewardDistributedStored = rewardDistributed();\\r\\n        lastRateUpdateTime = block.timestamp;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier sanityCheck(uint256 _amount) {\\r\\n        require(_amount != 0, \\\"veDFManager: Stake amount can not be zero!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///@dev Check duetime rules\\r\\n    modifier isDueTimeValid(uint256 _dueTime) {\\r\\n        require(\\r\\n            _dueTime > block.timestamp,\\r\\n            \\\"veDFManager: Due time must be greater than the current time\\\"\\r\\n        );\\r\\n        require(\\r\\n            _dueTime.sub(startTime).mod(MIN_STEP) == 0,\\r\\n            \\\"veDFManager: The minimum step size must be `MIN_STEP`\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRewardDistributor() {\\r\\n        require(\\r\\n            rewardDistributor == msg.sender,\\r\\n            \\\"veDFManager: caller is not the rewardDistributor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******** Owner functions ********/\\r\\n    /*********************************/\\r\\n\\r\\n    ///@notice Set a new reward rate\\r\\n    function setRewardRate(uint256 _rewardRate)\\r\\n        external\\r\\n        onlyRewardDistributor\\r\\n        updateRewardDistributed\\r\\n        updateReward(address(0))\\r\\n    {\\r\\n        uint256 _oldRewardRate = rewardRate;\\r\\n        rewardRate = _rewardRate;\\r\\n\\r\\n        emit RewardRateUpdated(_oldRewardRate, _rewardRate);\\r\\n    }\\r\\n\\r\\n    // This function allows governance to take unsupported tokens out of the\\r\\n    // contract, since this one exists longer than the other pools.\\r\\n    // This is in an effort to make someone whole, should they seriously\\r\\n    // mess up. There is no guarantee governance will vote to return these.\\r\\n    // It also allows for removal of airdropped tokens.\\r\\n    function rescueTokens(\\r\\n        IERC20Upgradeable _token,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyRewardDistributor {\\r\\n        _token.safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /****** Internal functions *******/\\r\\n    /*********************************/\\r\\n\\r\\n    ///@dev Update the expired lock of the history node and calculate the `rewardPerToken` at that time\\r\\n    function _settleNode(uint256 _now) private {\\r\\n        //Using local variables to save gas\\r\\n        SettleLocalVars memory _var;\\r\\n        _var.lastUpdateTime = lastUpdateTime;\\r\\n        _var.lastSettledTime = lastSettledTime;\\r\\n        _var.accSettledBalance = accSettledBalance;\\r\\n        _var.rewardPerToken = rewardPerTokenStored;\\r\\n        _var.rewardRate = rewardRate;\\r\\n        _var.totalSupply = totalSupply;\\r\\n\\r\\n        //Cycle through each node in the history\\r\\n        while (_var.lastSettledTime < _now) {\\r\\n            Node storage _node = nodes[_var.lastSettledTime];\\r\\n            if (_node.balance > 0) {\\r\\n                _var.rewardPerToken = _var.rewardPerToken.add(\\r\\n                    _var\\r\\n                        .lastSettledTime\\r\\n                        .sub(_var.lastUpdateTime)\\r\\n                        .mul(_var.rewardRate)\\r\\n                        .rdiv(_var.totalSupply.sub(_var.accSettledBalance))\\r\\n                );\\r\\n\\r\\n                //After the rewardpertoken is settled, add the balance of this node to accsettledbalance\\r\\n                _var.accSettledBalance = _var.accSettledBalance.add(\\r\\n                    _node.balance\\r\\n                );\\r\\n\\r\\n                //Record node settlement results\\r\\n                _node.rewardPerTokenSettled = _var.rewardPerToken;\\r\\n                //The first settlement is the time from the last operation to the first one behind it,\\r\\n                //and then updated to the next node time\\r\\n                _var.lastUpdateTime = _var.lastSettledTime;\\r\\n            }\\r\\n\\r\\n            //If accsettledbalance and totalsupply are equal,\\r\\n            //it is equivalent to all lock positions expire.\\r\\n            if (_var.accSettledBalance == _var.totalSupply) {\\r\\n                //At this time, update lastsettledtime, and then jump out of the loop\\r\\n                _var.lastSettledTime = MIN_STEP\\r\\n                    .sub(_now.sub(_var.lastSettledTime).mod(MIN_STEP))\\r\\n                    .add(_now);\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            //Update to next node time\\r\\n            _var.lastSettledTime += MIN_STEP;\\r\\n        }\\r\\n\\r\\n        accSettledBalance = _var.accSettledBalance;\\r\\n        lastSettledTime = _var.lastSettledTime;\\r\\n\\r\\n        rewardPerTokenStored = _var.totalSupply == _var.accSettledBalance\\r\\n            ? _var.rewardPerToken\\r\\n            : _var.rewardPerToken.add(\\r\\n                _now.sub(_var.lastUpdateTime).mul(_var.rewardRate).rdiv(\\r\\n                    _var.totalSupply.sub(_var.accSettledBalance)\\r\\n                )\\r\\n            );\\r\\n        lastUpdateTime = _now;\\r\\n    }\\r\\n\\r\\n    ///@dev Update the reward of specific users\\r\\n    function _updateUserReward(address _account) private {\\r\\n        (uint32 _dueTime, , ) = veDF.getLocker(_account);\\r\\n        uint256 _rewardPerTokenStored = rewardPerTokenStored;\\r\\n\\r\\n        if (_dueTime > 0) {\\r\\n            //If the user's lock expires, retrieve the rewardpertokenstored of the expired node\\r\\n            if (_dueTime < block.timestamp) {\\r\\n                _rewardPerTokenStored = nodes[_dueTime].rewardPerTokenSettled;\\r\\n            }\\r\\n\\r\\n            rewards[_account] = balances[_account]\\r\\n                .rmul(\\r\\n                    _rewardPerTokenStored.sub(userRewardPerTokenPaid[_account])\\r\\n                )\\r\\n                .add(rewards[_account]);\\r\\n        }\\r\\n\\r\\n        userRewardPerTokenPaid[_account] = _rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******* Users functions *********/\\r\\n    /*********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Lock StakedDF and harvest veDF.\\r\\n     * @dev Create lock-up information and mint veDF on lock-up amount and duration.\\r\\n     * @param _amount StakedDF token amount.\\r\\n     * @param _dueTime Due time timestamp, in seconds.\\r\\n     */\\r\\n    function create(uint256 _amount, uint256 _dueTime)\\r\\n        public\\r\\n        sanityCheck(_amount)\\r\\n        isDueTimeValid(_dueTime)\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        uint256 _duration = _dueTime.sub(block.timestamp);\\r\\n        sDF.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _veDFAmount = veDF.create(msg.sender, _amount, _duration);\\r\\n\\r\\n        totalSupply = totalSupply.add(_veDFAmount);\\r\\n        balances[msg.sender] = balances[msg.sender].add(_veDFAmount);\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_veDFAmount);\\r\\n\\r\\n        emit Create(msg.sender, _amount, _duration, _veDFAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Increased locked staked sDF and harvest veDF.\\r\\n     * @dev According to the expiration time in the lock information, the minted veDF.\\r\\n     * @param _amount StakedDF token amount.\\r\\n     */\\r\\n    function refill(uint256 _amount)\\r\\n        external\\r\\n        sanityCheck(_amount)\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        sDF.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _veDFAmount = veDF.refill(msg.sender, _amount);\\r\\n\\r\\n        (uint32 _dueTime, , ) = veDF.getLocker(msg.sender);\\r\\n\\r\\n        totalSupply = totalSupply.add(_veDFAmount);\\r\\n        balances[msg.sender] = balances[msg.sender].add(_veDFAmount);\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_veDFAmount);\\r\\n\\r\\n        emit Refill(msg.sender, _amount, _veDFAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Increase the lock duration and harvest veDF.\\r\\n     * @dev According to the amount of locked StakedDF and expansion time, the minted veDF.\\r\\n     * @param _dueTime new Due time timestamp, in seconds.\\r\\n     */\\r\\n    function extend(uint256 _dueTime)\\r\\n        external\\r\\n        isDueTimeValid(_dueTime)\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        (uint32 _oldDueTime, , ) = veDF.getLocker(msg.sender);\\r\\n        uint256 _oldBalance = balances[msg.sender];\\r\\n\\r\\n        //Subtract the user balance of the original node\\r\\n        nodes[_oldDueTime].balance = nodes[_oldDueTime].balance.sub(\\r\\n            _oldBalance\\r\\n        );\\r\\n\\r\\n        uint256 _duration = _dueTime.sub(_oldDueTime);\\r\\n        uint256 _veDFAmount = veDF.extend(msg.sender, _duration);\\r\\n\\r\\n        totalSupply = totalSupply.add(_veDFAmount);\\r\\n        balances[msg.sender] = balances[msg.sender].add(_veDFAmount);\\r\\n\\r\\n        //Add the user balance of the original node to the new node\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_veDFAmount).add(\\r\\n            _oldBalance\\r\\n        );\\r\\n\\r\\n        emit Extend(msg.sender, _oldDueTime, _dueTime, _duration, _veDFAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lock Staked sDF and and update veDF balance.\\r\\n     * @dev Update the lockup information and veDF balance, return the excess sDF to the user or receive transfer increased amount.\\r\\n     * @param _amount StakedDF token new amount.\\r\\n     * @param _dueTime Due time timestamp, in seconds.\\r\\n     */\\r\\n    function refresh(uint256 _amount, uint256 _dueTime)\\r\\n        external\\r\\n        sanityCheck(_amount)\\r\\n        isDueTimeValid(_dueTime)\\r\\n        nonReentrant\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        (, , uint256 _lockedSDF) = veDF.getLocker(msg.sender);\\r\\n        //If the new amount is greater than the original lock volume, the difference needs to be supplemented\\r\\n        if (_amount > _lockedSDF) {\\r\\n            sDF.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount.sub(_lockedSDF)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 _duration = _dueTime.sub(block.timestamp);\\r\\n        uint256 _oldVEDFAmount = balances[msg.sender];\\r\\n        uint256 _newVEDFAmount = veDF.refresh2(msg.sender, _amount, _duration);\\r\\n\\r\\n        balances[msg.sender] = _newVEDFAmount;\\r\\n        userRewardPerTokenPaid[msg.sender] = rewardPerTokenStored;\\r\\n\\r\\n        totalSupply = totalSupply.add(_newVEDFAmount).sub(_oldVEDFAmount);\\r\\n        nodes[_dueTime].balance = nodes[_dueTime].balance.add(_newVEDFAmount);\\r\\n        accSettledBalance = accSettledBalance.sub(_oldVEDFAmount);\\r\\n\\r\\n        emit Refresh(\\r\\n            msg.sender,\\r\\n            _lockedSDF,\\r\\n            _amount,\\r\\n            _duration,\\r\\n            _oldVEDFAmount,\\r\\n            _newVEDFAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unlock Staked sDF and burn veDF.\\r\\n     * @dev Burn veDF and clear lock information.\\r\\n     */\\r\\n    function _withdraw2() internal {\\r\\n        uint256 _burnVEDF = veDF.withdraw2(msg.sender);\\r\\n        uint256 _oldBalance = balances[msg.sender];\\r\\n\\r\\n        totalSupply = totalSupply.sub(_oldBalance);\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_oldBalance);\\r\\n\\r\\n        //Since totalsupply is reduced and the operation must be performed after the lock expires,\\r\\n        //accsettledbalance should be reduced at the same time\\r\\n        accSettledBalance = accSettledBalance.sub(_oldBalance);\\r\\n\\r\\n        emit Withdraw(msg.sender, _burnVEDF, _oldBalance);\\r\\n    }\\r\\n\\r\\n    ///@notice Extract reward\\r\\n    function getReward() public virtual updateReward(msg.sender) {\\r\\n        uint256 _reward = rewards[msg.sender];\\r\\n        if (_reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            rewardToken.safeTransferFrom(\\r\\n                rewardDistributor,\\r\\n                msg.sender,\\r\\n                _reward\\r\\n            );\\r\\n            emit RewardPaid(msg.sender, _reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exit() external {\\r\\n        getReward();\\r\\n        _withdraw2();\\r\\n    }\\r\\n\\r\\n    /*********************************/\\r\\n    /******** Query function *********/\\r\\n    /*********************************/\\r\\n\\r\\n    function rewardPerToken()\\r\\n        external\\r\\n        updateReward(address(0))\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    function rewardDistributed() public view returns (uint256) {\\r\\n        // Have not started yet\\r\\n        if (block.timestamp < startTime) {\\r\\n            return rewardDistributedStored;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            rewardDistributedStored.add(\\r\\n                block\\r\\n                    .timestamp\\r\\n                    .sub(MathUpgradeable.max(startTime, lastRateUpdateTime))\\r\\n                    .mul(rewardRate)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function earned(address _account)\\r\\n        public\\r\\n        updateReward(_account)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return rewards[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to query the information of the locker.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @return Information of the locker.\\r\\n     *         due time;\\r\\n     *         Lock up duration;\\r\\n     *         Lock up sDF amount;\\r\\n     */\\r\\n    function getLocker(address _lockerAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint96\\r\\n        )\\r\\n    {\\r\\n        return veDF.getLocker(_lockerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Used to query the information of the locker.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @param _startTime Start time.\\r\\n     * @param _dueTime Due time.\\r\\n     * @param _duration Lock up duration.\\r\\n     * @param _sDFAmount Lock up sDF amount.\\r\\n     * @param _veDFAmount veDF amount.\\r\\n     * @param _rewardAmount Reward amount.\\r\\n     * @param _lockedStatus Locked status, 0: no lockup; 1: locked; 2: Lock expired.\\r\\n     */\\r\\n    function getLockerInfo(address _lockerAddress)\\r\\n        external\\r\\n        returns (\\r\\n            uint32 _startTime,\\r\\n            uint32 _dueTime,\\r\\n            uint32 _duration,\\r\\n            uint96 _sDFAmount,\\r\\n            uint256 _veDFAmount,\\r\\n            uint256 _stakedveDF,\\r\\n            uint256 _rewardAmount,\\r\\n            uint256 _lockedStatus\\r\\n        )\\r\\n    {\\r\\n        (_dueTime, _duration, _sDFAmount) = veDF.getLocker(_lockerAddress);\\r\\n        _startTime = _dueTime > _duration ? _dueTime - _duration : 0;\\r\\n\\r\\n        _veDFAmount = veDF.balanceOf(_lockerAddress);\\r\\n\\r\\n        _rewardAmount = earned(_lockerAddress);\\r\\n\\r\\n        _lockedStatus = 2;\\r\\n        if (_dueTime > block.timestamp) {\\r\\n            _lockedStatus = 1;\\r\\n            _stakedveDF = _veDFAmount;\\r\\n        }\\r\\n        if (_dueTime == 0) _lockedStatus = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the expected amount of users.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @param _amount StakedDF token amount.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @return veDF amount.\\r\\n     */\\r\\n    function calcBalanceReceived(\\r\\n        address _lockerAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external view returns (uint256) {\\r\\n        return veDF.calcBalanceReceived(_lockerAddress, _amount, _duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the expected annual interest rate of users.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @return annual interest.\\r\\n     */\\r\\n    function estimateLockerAPY(address _lockerAddress)\\r\\n        external\\r\\n        updateReward(_lockerAddress)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _totalSupply = totalSupply.sub(accSettledBalance);\\r\\n        if (_totalSupply == 0) return 0;\\r\\n\\r\\n        (uint256 _dueTime, , uint96 _sDFAmount) = veDF.getLocker(_lockerAddress);\\r\\n        uint256 _principal = uint256(_sDFAmount);\\r\\n        if (_dueTime <= block.timestamp || _principal == 0) return 0;\\r\\n\\r\\n        uint256 _annualInterest = rewardRate\\r\\n            .mul(balances[_lockerAddress])\\r\\n            .mul(365 days)\\r\\n            .div(_totalSupply);\\r\\n\\r\\n        return _annualInterest.rdiv(_principal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Query veDF lock information.\\r\\n     * @return veDF total supply.\\r\\n     *         Total locked sDF\\r\\n     *         Total settlement due\\r\\n     *         Reward rate per second\\r\\n     */\\r\\n    function getLockersInfo()\\r\\n        external\\r\\n        updateReward(address(0))\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            veDF.totalSupply(),\\r\\n            sDF.balanceOf(address(veDF)),\\r\\n            accSettledBalance,\\r\\n            rewardRate\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/library/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\r\\n */\\r\\ncontract Ownable {\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    address payable public owner;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current pending owner.\\r\\n     */\\r\\n    address payable public pendingOwner;\\r\\n\\r\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\r\\n    event NewPendingOwner(\\r\\n        address indexed oldPendingOwner,\\r\\n        address indexed newPendingOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal {\\r\\n        owner = msg.sender;\\r\\n        emit NewOwner(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\r\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\r\\n     * @param newPendingOwner New pending owner.\\r\\n     */\\r\\n    function _setPendingOwner(address payable newPendingOwner)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\r\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\r\\n        );\\r\\n\\r\\n        // Gets current owner.\\r\\n        address oldPendingOwner = pendingOwner;\\r\\n\\r\\n        // Sets new pending owner.\\r\\n        pendingOwner = newPendingOwner;\\r\\n\\r\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\r\\n     */\\r\\n    function _acceptOwner() external {\\r\\n        require(\\r\\n            msg.sender == pendingOwner,\\r\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\r\\n        );\\r\\n\\r\\n        // Gets current values for events.\\r\\n        address oldOwner = owner;\\r\\n        address oldPendingOwner = pendingOwner;\\r\\n\\r\\n        // Set the new contract owner.\\r\\n        owner = pendingOwner;\\r\\n\\r\\n        // Clear the pendingOwner.\\r\\n        pendingOwner = address(0);\\r\\n\\r\\n        emit NewOwner(oldOwner, owner);\\r\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/SafeRatioMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeRatioMath {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    uint256 private constant BASE = 10**18;\\r\\n\\r\\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a.mul(BASE).div(b);\\r\\n    }\\r\\n\\r\\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a.mul(b).div(BASE);\\r\\n    }\\r\\n\\r\\n    function rdivup(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a.mul(BASE).add(b.sub(1)).div(b);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IRewardDistributor {\\r\\n\\r\\n    function addRecipient(address _recipient) external;\\r\\n    function removeRecipient(address _recipient) external;\\r\\n\\r\\n    function setRecipientRewardRate(address _recipient, uint256 _rewardRate) external;\\r\\n    function addRecipientAndSetRewardRate(address _recipient, uint256 _rewardRate) external;\\r\\n\\r\\n    function rescueStakingPoolTokens(\\r\\n        address _stakingPool,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external;\\r\\n\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    function getAllRecipients() external view returns (address[] memory _allRecipients);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IStakedDF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IStakedDF is IERC20Upgradeable {\\r\\n    function stake(address _recipient, uint256 _rawUnderlyingAmount)\\r\\n        external\\r\\n        returns (uint256 _tokenAmount);\\r\\n\\r\\n    function unstake(address _recipient, uint256 _rawTokenAmount)\\r\\n        external\\r\\n        returns (uint256 _tokenAmount);\\r\\n\\r\\n    function getCurrentExchangeRate()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _exchangeRate);\\r\\n\\r\\n    function DF() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/veDFManager/LPTokenWrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../interface/IveDF.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\ncontract LPTokenWrapper {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    IveDF public veDF;\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping(address => uint256) internal balances;\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IveDF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IveDF is IERC20Upgradeable {\\r\\n    function create(\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external returns (uint96);\\r\\n\\r\\n    function refresh(\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external returns (uint96, uint256);\\r\\n\\r\\n    function refresh2(\\r\\n        address _recipient,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external returns (uint96);\\r\\n\\r\\n    function refill(address _recipient, uint256 _amount)\\r\\n        external\\r\\n        returns (uint96);\\r\\n\\r\\n    function extend(address _recipient, uint256 _duration)\\r\\n        external\\r\\n        returns (uint96);\\r\\n\\r\\n    function withdraw(address _from) external returns (uint96);\\r\\n\\r\\n    function withdraw2(address _from) external returns (uint96);\\r\\n\\r\\n    /**\\r\\n     * @dev Used to query the information of the locker.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @return Information of the locker.\\r\\n     *         due time;\\r\\n     *         Lock up duration;\\r\\n     *         Lock up sDF amount;\\r\\n     */\\r\\n    function getLocker(address _lockerAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint96\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the expected amount of users.\\r\\n     * @param _lockerAddress veDF locker address.\\r\\n     * @param _amount Staked DF token amount.\\r\\n     * @param _duration Duration, in seconds.\\r\\n     * @return veDF amount.\\r\\n     */\\r\\n    function calcBalanceReceived(\\r\\n        address _lockerAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getAnnualInterestRate(\\r\\n        address _lockerAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _duration\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IveDF\",\"name\":\"_veDF\",\"type\":\"address\"},{\"internalType\":\"contract IStakedDF\",\"name\":\"_sDF\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sDFLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veDFReceived\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preDueTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDueTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veDFReceived\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sDFRefilled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veDFReceived\",\"type\":\"uint256\"}],\"name\":\"Refill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presDFLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newsDFLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preveDFBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newveDFBalance\",\"type\":\"uint256\"}],\"name\":\"Refresh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupplySDF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veDFBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sDFRefunded\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DF\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSettledBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"calcBalanceReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dueTime\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dueTime\",\"type\":\"uint256\"}],\"name\":\"createInOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earnedInOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"}],\"name\":\"estimateLockerAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitInOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dueTime\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"}],\"name\":\"getLocker\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"}],\"name\":\"getLockerInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_dueTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"_sDFAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_veDFAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedveDF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedStatus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardInOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IveDF\",\"name\":\"_veDF\",\"type\":\"address\"},{\"internalType\":\"contract IStakedDF\",\"name\":\"_sDF\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRateUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSettledTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refillInOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dueTime\",\"type\":\"uint256\"}],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dueTime\",\"type\":\"uint256\"}],\"name\":\"refreshInOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributedStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDF\",\"outputs\":[{\"internalType\":\"contract IStakedDF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplySDF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplySDFUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDF\",\"outputs\":[{\"internalType\":\"contract IveDF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "veDFManager", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006050b7040cf4ae3e60c3c1a5d0367b565a1460c100000000000000000000000041602ccf9b1f63ea1d0ab0f0a1d2f4fd0da53f6000000000000000000000000041602ccf9b1f63ea1d0ab0f0a1d2f4fd0da53f6000000000000000000000000000000000000000000000000000000000624954000000000000000000000000001d22afc7dc4bf336532dd6248d453c647ceca1b3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}