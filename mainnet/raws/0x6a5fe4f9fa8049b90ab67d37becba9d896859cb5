{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\ninterface Vizmesh {\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n}\r\n\r\ncontract VizmeshConfigMainnet {\r\n    address public vizmeshSmartContractAddress;\r\n    address public ownerAddress;\r\n    mapping (uint256 => bool) public isPauseds;\r\n    mapping (uint256 => ethNft) public ethNfts;\r\n    mapping (uint256 => otherNft) public otherNfts;\r\n    mapping (uint256 => coord) private coords;\r\n\r\n    constructor () {\r\n        ownerAddress = msg.sender;\r\n        vizmeshSmartContractAddress = 0xFDf676eF9A5A74F8279Cd5fC70B8c1b9116b05CD;\r\n    }\r\n\r\n    struct ethNft {\r\n        address nftSmartContractAddress;\r\n        uint256 nftTokenId;\r\n    }\r\n\r\n    struct otherNft {\r\n        string delimitedText;\r\n    }\r\n\r\n    struct coord {\r\n        int256 x;\r\n        int256 y;\r\n    }\r\n\r\n    function setVizmeshSmartContractAddress(address _vizmeshSmartContractAddress)\r\n        public\r\n    {\r\n        require(isOwnerOfSmartContract(), \"Must be smart contract owner\");\r\n        vizmeshSmartContractAddress = _vizmeshSmartContractAddress;\r\n    }\r\n\r\n    function setOwnerOfSmartContract(address _ownerAddress)\r\n        public\r\n    {\r\n        require(isOwnerOfSmartContract(), \"Must be smart contract owner\");\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n\r\n    function isOwnerOfSmartContract()\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return msg.sender == ownerAddress;\r\n    }\r\n\r\n    function isOwnerOfFrm(uint256 _frmId)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return Vizmesh(vizmeshSmartContractAddress).balanceOf(msg.sender, _frmId) == 1;\r\n    }\r\n\r\n    function setIsPaused(uint256 _frmId, bool isPaused)\r\n        public\r\n    {\r\n        require(isOwnerOfSmartContract(), \"Must be smart contract owner\");\r\n        isPauseds[_frmId] = isPaused;\r\n    }\r\n\r\n    function setCoord(uint256 _frmId, int32 _x, int32 _y)\r\n        public\r\n    {\r\n        require(isPauseds[_frmId] == false, \"FRM must not be paused\");\r\n        require(isOwnerOfFrm(_frmId) || isOwnerOfSmartContract(), \"Must be FRM owner or smart contract owner to update FRM coordinates.\");\r\n        coords[_frmId] = coord(_x, _y);\r\n    }\r\n\r\n    function setEthNft(uint256 _frmId, address _nftSmartContractAddress, uint256 _nftTokenId)\r\n        public\r\n    {\r\n        require(isPauseds[_frmId] == false, \"FRM must not be paused\");\r\n        require(isOwnerOfFrm(_frmId) || isOwnerOfSmartContract(), \"Must be FRM owner or smart contract owner to update FRM NFT.\");\r\n        ethNfts[_frmId] = ethNft(_nftSmartContractAddress, _nftTokenId);\r\n    }\r\n\r\n    function setOtherNft(uint256 _frmId, string memory _delimitedText)\r\n        public\r\n    {\r\n        require(isPauseds[_frmId] == false, \"FRM must not be paused\");\r\n        require(isOwnerOfFrm(_frmId) || isOwnerOfSmartContract(), \"Must FRM owner or smart contract owner to update FRM NFT.\");\r\n        otherNfts[_frmId] = otherNft(_delimitedText);\r\n    }\r\n\r\n    function getCoord(uint256 _frmId)\r\n        public \r\n        view\r\n        returns(coord memory)\r\n    {\r\n        if(coords[_frmId].x == 0){\r\n            return getDefaultCoord(_frmId);\r\n        }\r\n        else {\r\n            return coords[_frmId];\r\n        }\r\n    }\r\n\r\n    function getDefaultCoord(uint256 _frmId)\r\n        public\r\n        pure\r\n        returns(coord memory)\r\n    {\r\n        coord memory c = coord(0, 0);\r\n        int256 i;\r\n        int256 x;\r\n        int256 y;\r\n        for(i = 0; i < 255; i += 1) {\r\n            if(int256(_frmId) > (i * 2) * (i * 2)) {\r\n                continue;\r\n            }\r\n            else {\r\n                int256 thickness = i - 1;\r\n                int256 turn_length = thickness * 2 + 1;\r\n                int256 half_turn_length = thickness + 1;\r\n\r\n                int256 j;\r\n                int256 remainder = int256(_frmId) - (thickness * 2) * (thickness * 2);\r\n                  \r\n                //Start at 12 o'clock\r\n                x = 1;\r\n                y = thickness + 1;\r\n                for(j=1; j < remainder; j++) {\r\n                    if(j < half_turn_length) {\r\n                        x += 1;\r\n                    }\r\n                    else if(j < half_turn_length + turn_length ) {\r\n                        y -= 1;\r\n                        if (y == 0) {\r\n                            y -= 1;\r\n                        }\r\n                    }\r\n                    else if(j < half_turn_length + turn_length + turn_length) {\r\n                        x -= 1;\r\n                        if (x == 0) {\r\n                            x -= 1;\r\n                        }\r\n                    }\r\n                    else if(j < half_turn_length + turn_length + turn_length + turn_length) {\r\n                        y += 1;\r\n                        if (y == 0) {\r\n                            y += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        x += 1;\r\n                    }\r\n                }\r\n\r\n                c = coord(x, y);\r\n                break;\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethNfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftSmartContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"}],\"name\":\"getCoord\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct VizmeshConfigMainnet.coord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"}],\"name\":\"getDefaultCoord\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct VizmeshConfigMainnet.coord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"}],\"name\":\"isOwnerOfFrm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnerOfSmartContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPauseds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"otherNfts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"delimitedText\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"},{\"internalType\":\"int32\",\"name\":\"_x\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"_y\",\"type\":\"int32\"}],\"name\":\"setCoord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftSmartContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"}],\"name\":\"setEthNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frmId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_delimitedText\",\"type\":\"string\"}],\"name\":\"setOtherNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerOfSmartContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vizmeshSmartContractAddress\",\"type\":\"address\"}],\"name\":\"setVizmeshSmartContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vizmeshSmartContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VizmeshConfigMainnet", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f51a7723b7e9df49448624bc9e4151b0a6669ae60edcf674f9d4c826f333729"}]}