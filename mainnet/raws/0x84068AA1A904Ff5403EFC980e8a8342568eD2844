{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"PyeClaim/PyeClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract PyeClaim is Ownable, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    \\n    struct Allotment {\\n        uint256 allotedPYE;\\n        uint256 claimedPYE;\\n        uint256 claimedApple;\\n        uint256 claimedCherry;\\n    }\\n\\n    mapping(address => Allotment) public Allotments;\\n\\n    uint256 private claimDateIndex = 0; // multiplicative factor for each daily slice of Apl/Cher, representing each day since claimStartDate.\\n    uint256 private constant minIndex = 0;\\n    uint256 private constant maxIndex = 64; // capped at 64 days of Apl/Cher withdrawls \\n    uint256 public constant claimStartDate =  1655924400;  // This is exactly 30 days after startTime, when withdrawals are now possible.\\n    uint256 private claimDate = 1656010800; // claimStartDate + 1 day, updates regularly and keeps track of first daily withdrawl, requires 24hrs for increment \\n    \\n    address public PYE;\\n    address public Cherry;\\n    address public Apple;\\n\\n    uint256 public immutable startTime; // beginning of 30 day vesting window (unix timestamp)\\n    uint256 public immutable totalAllotments; // sum of every holder's Allotment.total (PYE tokens)\\n    uint256 public claimableApple;\\n    uint256 public claimableCherry;\\n    uint256 constant accuracyFactor = 1 * 10**18;\\n    \\n    event TokensClaimed(address _holder, uint256 _amountPYE, uint256 _amountApple, uint256 _amountCherry);\\n    event PYEFunded(address _depositor, uint256 _amount, uint256 _timestamp);\\n    event AppleFunded(address _depositor, uint256 _amount, uint256 _timestamp);\\n    event CherryFunded(address _depositor, uint256 _amount, uint256 _timestamp);\\n    event PYERemoved(address _withdrawer, uint256 _amount, uint256 _timestamp);\\n    event AppleRemoved(address _withdrawer,uint256 _amount, uint256 _timestamp);\\n    event CherryRemoved(address _withdrawer, uint256 _amount, uint256 _timestamp);\\n\\n   \\n    constructor(uint256 _startTime) {\\n        startTime = _startTime; //1653332400 for 24 May 2022 @ 12:00:00 PM UTC\\n        PYE = 0x5B232991854c790b29d3F7a145a7EFD660c9896c;\\n        Apple = 0x6f43a672D8024ba624651a5c2e63D129783dAd1F;\\n        Cherry = 0xD2858A1f93316242E81CF69B762361F59Fb9b18E;\\n        totalAllotments = (4 * 10**9) * 10**9; // 4 billion PYE tokens\\n    }\\n\\n    // @dev: disallows contracts from entering\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    // ------------------ Getter Fxns ----------------------\\n\\n    function getPYEAllotment(address _address) public view returns (uint256) {\\n        return Allotments[_address].allotedPYE;\\n    }\\n\\n    function getAPPLEAllotment(address _address) public view returns (uint256) {\\n        uint256 original = Allotments[_address].allotedPYE; // initial allotment\\n        uint256 weightedAllotment = (original.mul(accuracyFactor)).div(totalAllotments);\\n        uint256 allottedApple = ((weightedAllotment.mul(claimableApple)).div(accuracyFactor));\\n\\n        return allottedApple;\\n    }\\n\\n    function getCHERRYAllotment(address _address) public view returns (uint256) {\\n        uint256 original = Allotments[_address].allotedPYE; // initial allotment\\n        uint256 weightedAllotment = (original.mul(accuracyFactor)).div(totalAllotments);\\n        uint256 allottedCherry = ((weightedAllotment.mul(claimableCherry)).div(accuracyFactor));\\n\\n        return allottedCherry;\\n    }\\n\\n    function getClaimed(address _address) public view returns (uint256, uint256, uint256) {\\n        return \\n            (Allotments[_address].claimedPYE,\\n             Allotments[_address].claimedApple,\\n             Allotments[_address].claimedCherry);\\n    }\\n\\n    function getElapsedTime() public view returns (uint256) {\\n        return block.timestamp.sub(startTime);\\n    }\\n\\n    function getContractApple() public view returns (uint256) {\\n        return IERC20(Apple).balanceOf(address(this));\\n    }\\n\\n    function getContractCherry() public view returns (uint256) {\\n        return IERC20(Cherry).balanceOf(address(this));\\n    }\\n\\n    function getClaimDateIndex() public view returns (uint256) {\\n        return claimDateIndex;\\n    }\\n\\n    // ----------------- Setter Fxns -----------------------\\n\\n    function setPYE(address _PYE) public onlyOwner {PYE = _PYE;}\\n\\n    function setApple(address _Apple) public onlyOwner {Apple = _Apple;}\\n\\n    function setCherry(address _Cherry) public onlyOwner {Cherry = _Cherry;}\\n\\n    function setAllotment(address _address, uint256 _allotment) public onlyOwner {\\n        Allotments[_address].allotedPYE = _allotment;\\n    }\\n\\n    function setBatchAllotment(address[] calldata _holders, uint256[] calldata _allotments) external onlyOwner {\\n        for (uint256 i = 0; i < _holders.length; i++) {\\n            Allotments[_holders[i]].allotedPYE = _allotments[i];\\n        }\\n    }\\n\\n    function updateIndex() external {\\n        require(block.timestamp > claimDate && claimDateIndex <= maxIndex && claimDateIndex >= minIndex); {\\n            claimDateIndex = block.timestamp.sub(claimStartDate).div(86400);\\n            if (claimDateIndex > maxIndex) {claimDateIndex = maxIndex;}\\n            claimDate += 1 days;\\n        }\\n    }\\n\\n    // ----------------- Contract Funding/Removal Fxns -------------\\n\\n    function fundPYE(uint256 _amountPYE) external onlyOwner {\\n        IERC20(PYE).transferFrom(address(msg.sender), address(this), _amountPYE);\\n        emit PYEFunded(msg.sender, _amountPYE, block.timestamp);\\n    }\\n\\n    function fundApple(uint256 _amountApple) external onlyOwner {\\n        IERC20(Apple).transferFrom(address(msg.sender), address(this), _amountApple);\\n        claimableApple = claimableApple.add(_amountApple);\\n        emit AppleFunded(msg.sender, _amountApple, block.timestamp);\\n    }\\n\\n    function fundCherry(uint256 _amountCherry) external onlyOwner { \\n        IERC20(Cherry).transferFrom(address(msg.sender), address(this), _amountCherry);\\n        claimableCherry = claimableCherry.add(_amountCherry);\\n        emit CherryFunded(msg.sender, _amountCherry, block.timestamp);\\n    }\\n\\n    function removePYE(uint256 _amountPYE) external onlyOwner {\\n        require(getElapsedTime() < 30 days || getElapsedTime() > 180 days , \\\"Cannot withdraw PYE during the vesting period!\\\");\\n        require(_amountPYE <= IERC20(PYE).balanceOf(address(this)), \\\"Amount exceeds contract PYE balance!\\\");\\n        IERC20(PYE).transfer(address(msg.sender), _amountPYE);\\n        emit PYERemoved(msg.sender, _amountPYE, block.timestamp);\\n    }\\n\\n    function removeApple(uint256 _amountApple) external onlyOwner {\\n        require(getElapsedTime() > 180 days , \\\"Can only remove apple after vesting period!\\\");\\n        require(_amountApple <= IERC20(Apple).balanceOf(address(this)), \\\"Amount exceeds contract Apple balance!\\\");\\n        IERC20(Apple).transfer(address(msg.sender), _amountApple);\\n        claimableApple = claimableApple.sub(_amountApple);\\n        emit AppleRemoved(msg.sender, _amountApple, block.timestamp);\\n    }\\n\\n    function removeCherry(uint256 _amountCherry) external onlyOwner {\\n        require(getElapsedTime() > 180 days , \\\"Can only remove cherry after vesting period!\\\");\\n        require(_amountCherry <= IERC20(Cherry).balanceOf(address(this)), \\\"Amount exceeds contract Cherry balance!\\\");\\n        IERC20(Cherry).transfer(address(msg.sender), _amountCherry);\\n        claimableCherry = claimableCherry.sub(_amountCherry);\\n        emit CherryRemoved(msg.sender, _amountCherry, block.timestamp);\\n    }\\n\\n    // ----------------- Withdraw Fxn ----------------------\\n\\n    function claimTokens() external nonReentrant notContract() {\\n        require(getElapsedTime() > 30 days , \\\"You have not waited the 30-day cliff period!\\\");\\n        if(block.timestamp > claimDate && claimDateIndex <= maxIndex && claimDateIndex >= minIndex) {\\n            claimDateIndex = block.timestamp.sub(claimStartDate).div(86400);\\n            if (claimDateIndex > maxIndex) {claimDateIndex = maxIndex;}\\n            claimDate += 1 days;\\n        }\\n        uint256 original = Allotments[msg.sender].allotedPYE; // initial allotment\\n        uint256 withdrawn = Allotments[msg.sender].claimedPYE; // amount user has claimed\\n        uint256 available = original.sub(withdrawn); // amount left that can be claimed\\n        uint256 tenPercent = (original.mul((1 * 10**18))).div(10 * 10**18); // 10% of user's original allotment;\\n        uint256 dailyApple = (claimableApple.mul(15625 * 10**18)).div(1 * 10**6);\\n        uint256 dailyCherry = (claimableCherry.mul(15625 * 10**18)).div(1 * 10**6);\\n\\n        uint256 weightedAllotment = (original.mul(accuracyFactor)).div(totalAllotments);\\n        uint256 withdrawableApple = ((weightedAllotment.mul(dailyApple).div(1 * 10**18)).mul(claimDateIndex).div(accuracyFactor)).sub(Allotments[msg.sender].claimedApple);\\n        uint256 withdrawableCherry = ((weightedAllotment.mul(dailyCherry).div(1 * 10**18)).mul(claimDateIndex).div(accuracyFactor)).sub(Allotments[msg.sender].claimedCherry);\\n\\n        uint256 withdrawablePYE;\\n\\n        if (getElapsedTime() >= 93 days) {\\n            withdrawablePYE = available;\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 86 days && getElapsedTime() < 93 days) {\\n            withdrawablePYE = (9 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 79 days && getElapsedTime() < 86 days) {\\n            withdrawablePYE = (8 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 72 days && getElapsedTime() < 79 days) {\\n            withdrawablePYE = (7 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 65 days && getElapsedTime() < 72 days) {\\n            withdrawablePYE = (6 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 58 days && getElapsedTime() < 65 days) {\\n            withdrawablePYE = (5 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 51 days && getElapsedTime() < 58 days) {\\n            withdrawablePYE = (4 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 44 days && getElapsedTime() < 51 days) {\\n            withdrawablePYE = (3 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 37 days && getElapsedTime() < 44 days) {\\n            withdrawablePYE = (2 * tenPercent).sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else if (getElapsedTime() >= 30 days && getElapsedTime() < 37 days) {\\n            withdrawablePYE = tenPercent.sub(withdrawn);\\n            checkThenTransfer(withdrawablePYE, withdrawableApple, withdrawableCherry, available);\\n\\n        } else {\\n            withdrawablePYE = 0;\\n        }\\n    }\\n\\n    // ------------------------ Internal Helper/Transfer Fxns ------\\n\\n    function checkThenTransfer(uint256 _withdrawablePYE, uint256 _withdrawableApple, uint256 _withdrawableCherry, uint256 _available) internal {\\n        require(_withdrawablePYE <= _available && _withdrawablePYE <= IERC20(PYE).balanceOf(address(this)) , \\n            \\\"You have already claimed for this period, or you have claimed your total PYE allotment!\\\");\\n        require(_withdrawableApple <= getContractApple() && _withdrawableCherry <= getContractCherry() ,\\n            \\\"Cherry or Apple transfer exceeds contract balance!\\\");\\n\\n        if (_withdrawablePYE > 0) {\\n            IERC20(PYE).safeTransfer(msg.sender, _withdrawablePYE);\\n            Allotments[msg.sender].claimedPYE = Allotments[msg.sender].claimedPYE.add(_withdrawablePYE);\\n        }\\n        if (_withdrawableApple > 0) {\\n            IERC20(Apple).safeTransfer(msg.sender, _withdrawableApple);\\n            Allotments[msg.sender].claimedApple = Allotments[msg.sender].claimedApple.add(_withdrawableApple);\\n        }\\n        if (_withdrawableCherry > 0) {\\n            IERC20(Cherry).safeTransfer(msg.sender, _withdrawableCherry);\\n            Allotments[msg.sender].claimedCherry = Allotments[msg.sender].claimedCherry.add(_withdrawableCherry);\\n        }\\n\\n        emit TokensClaimed(msg.sender, _withdrawablePYE, _withdrawableApple, _withdrawableCherry);\\n    }\\n\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    // ----------------------- View Function To Calculate Withdraw Amt. -----\\n\\n    function calculateWithdrawableAmounts(address _address) external view returns (uint256, uint256, uint256) {\\n        \\n        uint256 original = Allotments[_address].allotedPYE; // initial allotment\\n        uint256 withdrawn = Allotments[_address].claimedPYE; // amount user has claimed\\n        uint256 available = original.sub(withdrawn); // amount left that can be claimed\\n        uint256 tenPercent = (original.mul((1 * 10**18))).div(10 * 10**18); // 10% of user's original allotment;\\n        uint256 dailyApple = (claimableApple.mul(15625 * 10**18)).div(1 * 10**6);\\n        uint256 dailyCherry = (claimableCherry.mul(15625 * 10**18)).div(1 * 10**6);\\n\\n        uint256 weightedAllotment = (original.mul(accuracyFactor)).div(totalAllotments);\\n        uint256 withdrawableApple = ((weightedAllotment.mul(dailyApple).div(1 * 10**18)).mul(getClaimDateIndex()).div(accuracyFactor)).sub(Allotments[_address].claimedApple);\\n        uint256 withdrawableCherry = ((weightedAllotment.mul(dailyCherry).div(1 * 10**18)).mul(getClaimDateIndex()).div(accuracyFactor)).sub(Allotments[_address].claimedCherry);\\n\\n        uint256 withdrawablePYE;\\n\\n        if (getElapsedTime() >= 93 days) {withdrawablePYE = available;\\n        } else if (getElapsedTime() >= 86 days && getElapsedTime() < 93 days) {withdrawablePYE = (9 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 79 days && getElapsedTime() < 86 days) {withdrawablePYE = (8 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 72 days && getElapsedTime() < 79 days) {withdrawablePYE = (7 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 65 days && getElapsedTime() < 72 days) {withdrawablePYE = (6 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 58 days && getElapsedTime() < 65 days) {withdrawablePYE = (5 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 51 days && getElapsedTime() < 58 days) {withdrawablePYE = (4 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 44 days && getElapsedTime() < 51 days) {withdrawablePYE = (3 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 37 days && getElapsedTime() < 44 days) {withdrawablePYE = (2 * tenPercent).sub(withdrawn);\\n        } else if (getElapsedTime() >= 30 days && getElapsedTime() < 37 days) {withdrawablePYE = tenPercent.sub(withdrawn);\\n        } else {withdrawablePYE = 0;}\\n\\n        return (withdrawablePYE, withdrawableApple, withdrawableCherry);\\n    }    \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AppleFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AppleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"CherryFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"CherryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"PYEFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"PYERemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountPYE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountApple\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountCherry\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Allotments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allotedPYE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedPYE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedApple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedCherry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Apple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Cherry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PYE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calculateWithdrawableAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableApple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableCherry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountApple\",\"type\":\"uint256\"}],\"name\":\"fundApple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountCherry\",\"type\":\"uint256\"}],\"name\":\"fundCherry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountPYE\",\"type\":\"uint256\"}],\"name\":\"fundPYE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAPPLEAllotment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCHERRYAllotment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimDateIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractApple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractCherry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElapsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPYEAllotment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountApple\",\"type\":\"uint256\"}],\"name\":\"removeApple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountCherry\",\"type\":\"uint256\"}],\"name\":\"removeCherry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountPYE\",\"type\":\"uint256\"}],\"name\":\"removePYE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allotment\",\"type\":\"uint256\"}],\"name\":\"setAllotment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Apple\",\"type\":\"address\"}],\"name\":\"setApple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allotments\",\"type\":\"uint256[]\"}],\"name\":\"setBatchAllotment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Cherry\",\"type\":\"address\"}],\"name\":\"setCherry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PYE\",\"type\":\"address\"}],\"name\":\"setPYE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllotments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PyeClaim", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000628bd9b0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}