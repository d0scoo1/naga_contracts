{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AltaFinanceEarnV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./EarnBase.sol\\\";\\n\\n/// @title Alta Finance EarnV2\\n/// @author Alta Finance Team\\n/// @notice This contract is a lending protocol where consumers lend crypto assets and earn stable yields secured by real estate.\\ncontract AltaFinanceEarnV2 is EarnBase {\\n    /// ALTA token\\n    IERC20Metadata public ALTA;\\n\\n    /// Address of wallet to receive funds\\n    address public feeAddress;\\n\\n    /// Percent of offer amount transferred to Alta Finance as a service fee (100 = 10%)\\n    uint256 public transferFee; // 100 = 10%\\n\\n    /// amount of alta to stake to reach tier 1\\n    uint256 public tier1Amount;\\n    /// amount of alta to stake to reach tier 2\\n    uint256 public tier2Amount;\\n\\n    /// multiplier for contracts that reach tier 1\\n    uint256 public immutable tier1Multiplier = 1150; // 1150 = 1.15x\\n    /// multiplier for contracts that reach tier 2\\n    uint256 public immutable tier2Multiplier = 1300; // 1250 = 1.25x\\n\\n    address safeAddress;\\n    address immutable treasury = 0x087183a411770a645A96cf2e31fA69Ab89e22F5E;\\n\\n    /// Boolean variable to guard against multiple initialization attempts\\n    bool initiated;\\n\\n    /// @param owner Address of the contract owner\\n    /// @param earnContractId index of earn contract in earnContracts\\n    event ContractOpened(address indexed owner, uint256 indexed earnContractId);\\n\\n    /// @param owner Address of the contract owner\\n    /// @param earnContractId index of earn contract in earnContracts\\n    event ContractClosed(address indexed owner, uint256 indexed earnContractId);\\n\\n    /// @param previousOwner Address of the previous contract owner\\n    /// @param newOwner Address of the new contract owner\\n    /// @param earnContractId Index of earn contract in earnContracts\\n    event ContractSold(\\n        address indexed previousOwner,\\n        address indexed newOwner,\\n        uint256 indexed earnContractId\\n    );\\n\\n    /// @param owner Address of the contract owner\\n    /// @param earnContractId Index of earn contract in earnContracts\\n    /// @param token Address of the token redeemed\\n    /// @param tokenAmount Amount of token redeemed\\n    /// @param altaAmount Amount of ALTA redeemed\\n    event Redemption(\\n        address indexed owner,\\n        uint256 indexed earnContractId,\\n        address token,\\n        uint256 tokenAmount,\\n        uint256 altaAmount\\n    );\\n\\n    /// @param buyer Address of the buyer\\n    /// @param offerId Index of offer in offers\\n    event ContractOffer(address indexed buyer, uint256 indexed offerId);\\n\\n    /// @param earnContractId Index of earn contract in earnContracts\\n    event ContractListed(uint256 indexed earnContractId);\\n\\n    /// @param earnContractId Index of earn contract in earnContracts\\n    event ContractListingRemoved(uint256 indexed earnContractId);\\n\\n    constructor() {\\n        _transferOwnership(treasury);\\n    }\\n\\n    enum ContractStatus {\\n        OPEN,\\n        CLOSED,\\n        FORSALE\\n    }\\n\\n    enum Tier {\\n        TIER0,\\n        TIER1,\\n        TIER2\\n    }\\n\\n    struct EarnTerm {\\n        uint128 time; // Time Locked (in Days);\\n        uint64 interestRate; // Base APR (simple interest) (1000 = 10%)\\n        uint64 altaRatio; // ALTA ratio (1000 = 10%)\\n        bool open; // True if open, False if closed\\n    }\\n\\n    struct EarnContract {\\n        address owner; // Contract Owner Address\\n        uint256 termIndex; // Index of Earn Term\\n        uint256 startTime; // Unix Epoch time started\\n        uint256 contractLength; // length of contract in seconds\\n        address token; // Token Address\\n        uint256 lentAmount; // Amount of token lent\\n        uint256 altaStaked; // Amount of ALTA staked\\n        uint256 baseTokenPaid; // Base Interest Paid\\n        uint256 altaPaid; // ALTA Interest Paid\\n        Tier tier; // TIER0, TIER1, TIER2\\n        ContractStatus status; // Open, Closed, or ForSale\\n    }\\n\\n    struct Offer {\\n        address buyer; // Buyer Address\\n        address to; // Address of Contract Owner\\n        uint256 earnContractId; // Earn Contract Id\\n        uint256 amount; // ALTA Amount\\n        bool accepted; // Accepted - false if pending\\n    }\\n\\n    EarnTerm[] public earnTerms;\\n    EarnContract[] public earnContracts;\\n    Offer[] public offers;\\n    mapping(address => bool) public acceptedAssets;\\n\\n    /// @return An array of type EarnContract\\n    function getAllEarnContracts() public view returns (EarnContract[] memory) {\\n        return earnContracts;\\n    }\\n\\n    /// @return An array of type EarnTerm\\n    function getAllEarnTerms() public view returns (EarnTerm[] memory) {\\n        return earnTerms;\\n    }\\n\\n    /// @return An array of type Offer\\n    function getAllOffers() public view returns (Offer[] memory) {\\n        return offers;\\n    }\\n\\n    /// Sends erc20 token to Alta Treasury Address and creates a contract with EarnContract[_id] terms for user.\\n    /// @param _earnTermsId Index of the earn term in earnTerms\\n    /// @param _amount Amount of token to be lent\\n    /// @param _token Token Address\\n    /// @param _altaStake Amount of Alta to stake in contract\\n    function openContract(\\n        uint256 _earnTermsId,\\n        uint256 _amount,\\n        IERC20Metadata _token,\\n        uint256 _altaStake\\n    ) public whenNotPaused {\\n        require(_amount > 0, \\\"Token amount must be greater than zero\\\");\\n\\n        EarnTerm memory earnTerm = earnTerms[_earnTermsId];\\n        require(earnTerm.open, \\\"Earn Term must be open\\\");\\n\\n        require(acceptedAssets[address(_token)], \\\"Token not accepted\\\");\\n\\n        // User needs to first approve the token to be spent\\n        require(\\n            _token.balanceOf(address(msg.sender)) >= _amount,\\n            \\\"Insufficient Tokens\\\"\\n        );\\n\\n        _token.transferFrom(msg.sender, address(this), _amount);\\n\\n        if (_altaStake > 0) {\\n            ALTA.transferFrom(msg.sender, address(this), _altaStake);\\n        }\\n\\n        Tier tier = getTier(_altaStake);\\n\\n        // Convert time of earnTerm from days to seconds\\n        uint256 earnSeconds = earnTerm.time * 1 days;\\n\\n        _createContract(\\n            _earnTermsId,\\n            earnSeconds,\\n            address(_token),\\n            _amount,\\n            _altaStake,\\n            tier\\n        );\\n    }\\n\\n    /// @notice Redeem the currrent base token + ALTA interest available for the contract\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    function redeem(uint256 _earnContractId) public {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        require(earnContract.owner == msg.sender);\\n        (uint256 baseTokenAmount, uint256 altaAmount) = redeemableValue(\\n            _earnContractId\\n        );\\n        earnContract.baseTokenPaid += baseTokenAmount;\\n        earnContract.altaPaid += altaAmount;\\n\\n        if (\\n            block.timestamp >=\\n            earnContract.startTime + earnContract.contractLength\\n        ) {\\n            _closeContract(_earnContractId);\\n        }\\n        emit Redemption(\\n            msg.sender,\\n            _earnContractId,\\n            earnContract.token,\\n            baseTokenAmount,\\n            altaAmount\\n        );\\n        IERC20Metadata Token = IERC20Metadata(earnContract.token);\\n        Token.transfer(msg.sender, baseTokenAmount);\\n        ALTA.transfer(msg.sender, altaAmount);\\n    }\\n\\n    /// @notice Redeem the tokens availabe for all earn contracts owned by the sender (gas savings)\\n    function redeemAll() public {\\n        uint256 length = earnContracts.length; // gas optimization\\n        EarnContract[] memory _contracts = earnContracts; // gas optimization\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_contracts[i].owner == msg.sender) {\\n                redeem(i);\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculate the currrent base token + ALTA available for the contract\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    /// @return baseTokenAmount Base token amount\\n    /// @return altaAmount ALTA amount\\n    function redeemableValue(uint256 _earnContractId)\\n        public\\n        view\\n        returns (uint256 baseTokenAmount, uint256 altaAmount)\\n    {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        EarnTerm memory earnTerm = earnTerms[earnContract.termIndex];\\n        IERC20Metadata Token = IERC20Metadata(earnContract.token);\\n\\n        uint256 timeOpen = block.timestamp -\\n            earnContracts[_earnContractId].startTime;\\n\\n        uint256 interestRate = getInterestRate(\\n            earnTerm.interestRate,\\n            earnContract.tier\\n        );\\n\\n        if (timeOpen <= earnContract.contractLength) {\\n            // Just interest\\n            baseTokenAmount =\\n                (earnContract.lentAmount * interestRate * timeOpen) /\\n                365 days /\\n                10000;\\n\\n            // Calculate the total amount of alta rewards accrued\\n            altaAmount = (((((earnContract.lentAmount * (10**ALTA.decimals())) /\\n                (10**Token.decimals())) * earnTerm.altaRatio) / 10000) * timeOpen / earnContract.contractLength);\\n        } else {\\n            // Calculate the total amount of base token to be paid out (principal + interest)\\n            uint256 baseRegInterest = ((earnContract.lentAmount *\\n                interestRate *\\n                earnContract.contractLength) /\\n                365 days /\\n                10000);\\n\\n            baseTokenAmount = baseRegInterest + earnContract.lentAmount;\\n\\n            // Calculate the total amount of alta rewards accrued + staked amount\\n            altaAmount = ((((earnContract.lentAmount * (10**ALTA.decimals())) /\\n                (10**Token.decimals())) * earnTerm.altaRatio) / 10000) + earnContract.altaStaked;\\n        }\\n\\n        baseTokenAmount = baseTokenAmount - earnContract.baseTokenPaid;\\n        altaAmount = altaAmount - earnContract.altaPaid;\\n        return (baseTokenAmount, altaAmount);\\n    }\\n\\n    /// @dev Calculate the currrent base token + ALTA available for the contract\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    /// @return baseTokenAmount Base token amount\\n    /// @return altaAmount ALTA amount\\n    function redeemableValue(uint256 _earnContractId, uint256 _time)\\n        public\\n        view\\n        returns (uint256 baseTokenAmount, uint256 altaAmount)\\n    {\\n        require(_time >= earnContracts[_earnContractId].startTime);\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        EarnTerm memory earnTerm = earnTerms[earnContract.termIndex];\\n        IERC20Metadata Token = IERC20Metadata(earnContract.token);\\n\\n        uint256 timeOpen = _time - earnContracts[_earnContractId].startTime;\\n\\n        uint256 interestRate = getInterestRate(\\n            earnTerm.interestRate,\\n            earnContract.tier\\n        );\\n\\n        if (timeOpen <= earnContract.contractLength) {\\n            // Just interest\\n            baseTokenAmount =\\n                (earnContract.lentAmount * interestRate * timeOpen) /\\n                365 days /\\n                10000;\\n\\n            // Calculate the total amount of alta rewards accrued\\n            altaAmount = (((((earnContract.lentAmount * (10**ALTA.decimals())) /\\n                (10**Token.decimals())) * earnTerm.altaRatio) / 10000) * timeOpen / earnContract.contractLength);\\n        } else {\\n            // Calculate the total amount of base token to be paid out (principal + interest)\\n            uint256 baseRegInterest = ((earnContract.lentAmount *\\n                interestRate *\\n                earnContract.contractLength) /\\n                365 days /\\n                10000);\\n\\n            baseTokenAmount = baseRegInterest + earnContract.lentAmount;\\n\\n            // Calculate the total amount of alta rewards accrued + staked amount\\n            altaAmount = ((((earnContract.lentAmount * (10**ALTA.decimals())) /\\n                (10**Token.decimals())) * earnTerm.altaRatio) / 10000) + earnContract.altaStaked;\\n        }\\n\\n        baseTokenAmount = baseTokenAmount - earnContract.baseTokenPaid;\\n        altaAmount = altaAmount - earnContract.altaPaid; \\n        return (baseTokenAmount, altaAmount);\\n    }\\n\\n    /// @notice Lists the associated earn contract for sale on the market\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    function putSale(uint256 _earnContractId) external whenNotPaused {\\n        require(\\n            msg.sender == earnContracts[_earnContractId].owner,\\n            \\\"Msg.sender is not the owner\\\"\\n        );\\n        earnContracts[_earnContractId].status = ContractStatus.FORSALE;\\n        emit ContractListed(_earnContractId);\\n    }\\n\\n    /// @notice Submits an offer for an earn contract listed on the market\\n    /// @dev User must sign an approval transaction for first. ALTA.approve(address(this), _amount);\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    /// @param _amount Amount of base token offered\\n    function makeOffer(uint256 _earnContractId, uint256 _amount)\\n        external\\n        whenNotPaused\\n    {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        require(\\n            earnContract.status == ContractStatus.FORSALE,\\n            \\\"Contract not for sale\\\"\\n        );\\n        require(msg.sender != earnContract.owner, \\\"Cannot make offer on own contract\\\");\\n\\n        Offer memory offer = Offer(\\n            msg.sender, // buyer\\n            earnContract.owner, // to\\n            _earnContractId, // earnContractId\\n            _amount, // amount\\n            false // accepted\\n        );\\n\\n        offers.push(offer);\\n        uint256 offerId = offers.length - 1;\\n\\n        IERC20Metadata(earnContract.token).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        emit ContractOffer(msg.sender, offerId);\\n    }\\n\\n    /// @notice Transfers the offer amount to the owner of the earn contract and transfers ownership of the contract to the buyer\\n    /// @param _offerId Index of offer in Offers\\n    function acceptOffer(uint256 _offerId) external whenNotPaused {\\n        Offer memory offer = offers[_offerId];\\n        uint256 earnContractId = offer.earnContractId;\\n        EarnContract memory earnContract = earnContracts[earnContractId];\\n\\n        require(\\n            msg.sender == earnContract.owner,\\n            \\\"Msg.sender is not the owner\\\"\\n        );\\n\\n        uint256 fee = (offer.amount * transferFee) / 1000;\\n\\n        if (fee > 0) {\\n            IERC20Metadata(earnContract.token).transfer(feeAddress, fee);\\n            offer.amount = offer.amount - fee;\\n        }\\n        IERC20Metadata(earnContract.token).transfer(offer.to, offer.amount);\\n\\n        offers[_offerId].accepted = true;\\n\\n        emit ContractSold(offer.to, offer.buyer, earnContractId);\\n        earnContracts[earnContractId].owner = offer.buyer;\\n\\n        _removeContractFromMarket(earnContractId);\\n    }\\n\\n    /// @notice Remove Contract From Market\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    function removeContractFromMarket(uint256 _earnContractId) external {\\n        require(\\n            msg.sender == earnContracts[_earnContractId].owner,\\n            \\\"Msg.sender is not the owner\\\"\\n        );\\n        _removeContractFromMarket(_earnContractId);\\n    }\\n\\n    /// @notice Sends offer funds back to buyer and removes the offer from the array\\n    /// @param _offerId Index of offer in Offers\\n    function removeOffer(uint256 _offerId) external {\\n        Offer memory offer = offers[_offerId];\\n        require(msg.sender == offer.buyer, \\\"Msg.sender is not the buyer\\\");\\n        EarnContract memory earnContract = earnContracts[offer.earnContractId];\\n        IERC20Metadata(earnContract.token).transfer(offer.buyer, offer.amount);\\n\\n        _removeOffer(_offerId);\\n    }\\n\\n    /// @param _interestRate Base interest rate before tier multipliers\\n    /// @param _tier Tier of the contract\\n    function getInterestRate(uint256 _interestRate, Tier _tier)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_tier == Tier.TIER0) {\\n            return _interestRate;\\n        } else if (_tier == Tier.TIER1) {\\n            return ((_interestRate * tier1Multiplier) / 1000);\\n        } else {\\n            return ((_interestRate * tier2Multiplier) / 1000);\\n        }\\n    }\\n\\n    /// @param _ALTA Address of ALTA Token contract\\n    /// @param _feeAddress Address of wallet to recieve loan funds\\n    function init(\\n        IERC20Metadata _ALTA,\\n        address _feeAddress\\n    ) external onlyOwner {\\n        require(!initiated, \\\"Contract already initiated\\\");\\n        ALTA = _ALTA;\\n        feeAddress = _feeAddress;\\n        transferFee = 3; // 3 = .3%\\n        tier1Amount = 10000 * (10**ALTA.decimals()); // 10,000 ALTA\\n        tier2Amount = 100000 * (10**ALTA.decimals()); // 100,000 ALTA\\n        initiated = true;\\n    }\\n\\n    /// @param _time Length of the contract in days\\n    /// @param _interestRate Base interest rate (1000 = 10%)\\n    /// @param _altaRatio Interest rate for ALTA (1000 = 10%)\\n    /// @dev Add an earn term with 8 parameters\\n    function addTerm(\\n        uint128 _time,\\n        uint64 _interestRate,\\n        uint64 _altaRatio\\n    ) public onlyOwner {\\n        earnTerms.push(EarnTerm(_time, _interestRate, _altaRatio, true));\\n    }\\n\\n    /// @param _earnTermsId index of the earn term in earnTerms\\n    function closeTerm(uint256 _earnTermsId) public onlyOwner {\\n        require(_earnTermsId < earnTerms.length);\\n        earnTerms[_earnTermsId].open = false;\\n    }\\n\\n    /// @param _earnTermsId index of the earn term in earnTerms\\n    function openTerm(uint256 _earnTermsId) public onlyOwner {\\n        require(_earnTermsId < earnTerms.length);\\n        earnTerms[_earnTermsId].open = true;\\n    }\\n\\n    /// @notice Close the contract flagged wallet for AML compliance. Owner will receive principal with no interest.\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    function closeContractAmlCheck(uint256 _earnContractId) external onlyOwner {\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        require(block.timestamp <= earnContract.startTime + 7 days);\\n        IERC20Metadata Token = IERC20Metadata(earnContract.token);\\n        _closeContract(_earnContractId);\\n        Token.transfer(msg.sender, earnContract.lentAmount);\\n    }\\n\\n    /// Set the transfer fee rate for contracts sold on the market place\\n    /// @param _transferFee Percent of accepted earn contract offer to be sent to Alta wallet\\n    function setTransferFee(uint256 _transferFee) external onlyOwner {\\n        transferFee = _transferFee;\\n    }\\n\\n    /// @notice Set the safe address for the contract\\n    /// @param _safeAddress Address of the safe contract\\n    function setSafeAddress(address _safeAddress) external onlyOwner {\\n        safeAddress = _safeAddress;\\n        _transferOwnership(_safeAddress);\\n    }\\n\\n    /// @notice Set ALTA ERC20 token address\\n    /// @param _ALTA Address of ALTA Token contract\\n    function setAltaAddress(address _ALTA) external onlyOwner {\\n        ALTA = IERC20Metadata(_ALTA);\\n    }\\n\\n    /// @notice Set the feeAddress\\n    /// @param _feeAddress Wallet address to recieve loan funds\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        require(_feeAddress != address(0));\\n        feeAddress = _feeAddress;\\n    }\\n\\n    /// @param _tier1Amount Amount of ALTA staked to be considered Tier 1\\n    /// @param _tier2Amount Amount of ALTA staked to be considered Tier 2\\n    function setStakeAmounts(uint256 _tier1Amount, uint256 _tier2Amount)\\n        external\\n        onlyOwner\\n    {\\n        tier1Amount = _tier1Amount;\\n        tier2Amount = _tier2Amount;\\n    }\\n\\n    /// @param _asset Address of token to be updated\\n    /// @param _accepted True if the token is accepted, false otherwise\\n    function updateAsset(address _asset, bool _accepted) external onlyOwner {\\n        acceptedAssets[_asset] = _accepted;\\n    }\\n\\n    /// @param _assets Array of token addresses to be updated\\n    /// @param _accepted True if the token is accepted, false otherwise\\n    function updateAssets(address[] memory _assets, bool _accepted) external onlyOwner {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            acceptedAssets[_assets[i]] = _accepted;\\n        }\\n    }\\n\\n    /// @param _earnTermsId Index of the earn term in earnTerms\\n    /// @param _earnSeconds Length of the contract in seconds\\n    /// @param _lentAmount Amount of token lent\\n    function _createContract(\\n        uint256 _earnTermsId,\\n        uint256 _earnSeconds,\\n        address _token,\\n        uint256 _lentAmount,\\n        uint256 _altaStake,\\n        Tier tier\\n    ) internal {\\n        EarnContract memory earnContract = EarnContract(\\n            msg.sender, // owner\\n            _earnTermsId, // termIndex\\n            block.timestamp, // startTime\\n            _earnSeconds, //contractLength,\\n            _token, // token\\n            _lentAmount, // lentAmount\\n            _altaStake, // altaStaked\\n            0, // baseTokenPaid\\n            0, // altaPaid\\n            tier, // tier\\n            ContractStatus.OPEN\\n        );\\n\\n        earnContracts.push(earnContract);\\n        uint256 id = earnContracts.length - 1;\\n        emit ContractOpened(msg.sender, id);\\n    }\\n\\n    /// @param _earnContractId index of earn contract in earnContracts\\n    function _closeContract(uint256 _earnContractId) internal {\\n        require(\\n            earnContracts[_earnContractId].status != ContractStatus.CLOSED,\\n            \\\"Contract is already closed\\\"\\n        );\\n        require(\\n            _earnContractId < earnContracts.length,\\n            \\\"Contract does not exist\\\"\\n        );\\n        EarnContract memory earnContract = earnContracts[_earnContractId];\\n        address owner = earnContract.owner;\\n        emit ContractClosed(owner, _earnContractId);\\n\\n        _removeAllContractOffers(_earnContractId);\\n        earnContracts[_earnContractId].status = ContractStatus.CLOSED;\\n    }\\n\\n    /// @param _offerId Index of offer in Offers\\n    function _removeOffer(uint256 _offerId) internal {\\n        require(_offerId < offers.length, \\\"Offer ID longer than array length\\\");\\n\\n        if (offers.length > 1) {\\n            offers[_offerId] = offers[offers.length - 1];\\n        }\\n        offers.pop();\\n    }\\n\\n    /// @notice Removes all contracts offers and sets the status flag back to open\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    function _removeContractFromMarket(uint256 _earnContractId) internal {\\n        earnContracts[_earnContractId].status = ContractStatus.OPEN;\\n        _removeAllContractOffers(_earnContractId);\\n        emit ContractListingRemoved(_earnContractId);\\n    }\\n\\n    /// @notice Sends all offer funds for an earn contract back to the buyer and removes them arrays and mappings\\n    /// @param _earnContractId Index of earn contract in earnContracts\\n    function _removeAllContractOffers(uint256 _earnContractId) internal {\\n        uint256 length = offers.length; // gas optimization\\n        Offer[] memory _offers = offers; // gas optimization\\n        if (length > 0) {\\n            for (uint256 i = length; i > 0; i--) {\\n                uint256 offerId = i - 1;\\n                if (_offers[offerId].earnContractId == _earnContractId) {\\n                    if (!_offers[offerId].accepted) {\\n                        IERC20Metadata(\\n                            earnContracts[_offers[offerId].earnContractId].token\\n                        ).transfer(_offers[offerId].buyer, _offers[offerId].amount);\\n                    }\\n                    _removeOffer(offerId);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @param _altaStaked Amount of ALTA staked to the contract\\n    function getTier(uint256 _altaStaked) internal view returns (Tier) {\\n        if (_altaStaked < tier1Amount) {\\n            return Tier.TIER0;\\n        } else if (_altaStaked < tier2Amount) {\\n            return Tier.TIER1;\\n        } else {\\n            return Tier.TIER2;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EarnBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract EarnBase is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    event Withdrawal(address indexed sender, uint256 amount);\\n    event Received(address, uint);\\n\\n    ///\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @param _token - token to be withdrawn\\n     * @param _to - address to withdraw to\\n     * @param _amount - amount of token to withdraw\\n     */\\n    function withdrawToken(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) public onlyOwner nonReentrant {\\n        require(_token.balanceOf(address(this)) >= _amount, \\\"Not enough token\\\");\\n        SafeERC20.safeTransfer(_token, _to, _amount);\\n        emit Withdrawal(_to, _amount);\\n    }\\n\\n    /**\\n     * @param _to address of transfer recipient\\n     * @param _amount amount of ether to be transferred\\n     */\\n    // Function to transfer Ether from this contract to address from input\\n    function transfer(address payable _to, uint256 _amount) public onlyOwner {\\n        // Note that \\\"to\\\" is declared as payable\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * Pause the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * Unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractListingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"ContractOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"}],\"name\":\"ContractSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALTA\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_time\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_interestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_altaRatio\",\"type\":\"uint64\"}],\"name\":\"addTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"closeContractAmlCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"}],\"name\":\"closeTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaPaid\",\"type\":\"uint256\"},{\"internalType\":\"enum AltaFinanceEarnV2.Tier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum AltaFinanceEarnV2.ContractStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnTerms\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"time\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"interestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaRatio\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEarnContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"termIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaPaid\",\"type\":\"uint256\"},{\"internalType\":\"enum AltaFinanceEarnV2.Tier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"enum AltaFinanceEarnV2.ContractStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct AltaFinanceEarnV2.EarnContract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEarnTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"time\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"interestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"altaRatio\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"internalType\":\"struct AltaFinanceEarnV2.EarnTerm[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct AltaFinanceEarnV2.Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"enum AltaFinanceEarnV2.Tier\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_ALTA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_altaStake\",\"type\":\"uint256\"}],\"name\":\"openContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnTermsId\",\"type\":\"uint256\"}],\"name\":\"openTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"putSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"redeemableValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"redeemableValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altaAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnContractId\",\"type\":\"uint256\"}],\"name\":\"removeContractFromMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"removeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ALTA\",\"type\":\"address\"}],\"name\":\"setAltaAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"}],\"name\":\"setSafeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2Amount\",\"type\":\"uint256\"}],\"name\":\"setStakeAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier1Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier1Multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier2Multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"updateAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AltaFinanceEarnV2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}