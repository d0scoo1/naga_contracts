{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MediTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NOLICENSE\\n                     \\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&.(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,@@@@@@@@@@@@%.&@@@..@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@&**&@@@@@@@@@.*#@@#*,,*@,..,&@@@&,.&,...,./@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@((((((/**@@@.,*,***&,.,*(@&@%,,,***%@@@@@@@@@@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@#*((((((((((((@.****@,,**@,,.******,,@(((((/*@....,*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@*#(((((((((((#%@*,*,,*@***@,,,**,,*****&#((((((((**@***@%***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@&#%(((((%%.,,**(,,,#***/,**,,*******@(((((((((((((*&@,,,....,**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@/@@@@@@@,..******,,,****,,*,,*@**/@*@#(((((((((((((((****@****@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@,........,****%,,,*,,,,,,@*,,,,*/#((((((((((*******((/@**@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@#@(******@**@,/,*,,,&***(,,,**#(((((***%@@%######(@(,../@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@,,*@@#(*/(**%***/,/,@,/#&,,#,.,*#@%***%**/&****/&&%&***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@,/&#******@*#,..............,,#,.,*#......../@(*******.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@,@@#&,****@*//,................,,,,*,,*#... ./((/,&*****(@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@%***(*/@,..................,%.***,,*,%..#******,,@(**.**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@%*,,(*/@@@.............@@@@@@%&**##****,...@********#,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@*.,#**#@/*@&,,,,,,...%@,,,/&@@/**.@,%@**#&@&&@@/****/#(,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@&*@&(###%@@@&#*,,@#@,...,#(/(**../.(/.,,,,*%@@@@**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@#####*. .@%,......,@  ...  (.(,.,,,(#@ ...... #&@@@**@@@,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@###,,*,,@,........,&     /.      @......./&...,,@(@,.,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@%@@@&%(@*...............,.....................&*****&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@/****,,.................................#(****(*@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@&//,@@@@@#..........*&@@...........*@@/***&***/&@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&%%&@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@(*(*/**,,,........@&((,&@.......,.&*(#/********@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@(/&,....../@((( ./.......,,@***(.....**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@*#....,.@&@,,,,,.,,,&(**(*......*@&///@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@**,,@&(,,,,,*,,@#****(.....,*%#(((((%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&**,,**%@%&******.....,*&(((((((#,.@@/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%&&&@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@%/****/@(,,,.,*&((((((((#@.. (@* @@@@@@@@@@@@@@@@@@@@@@@@@@@%#####################################&@@\\n// @@@@@@@@@@@@@@@@@@@@@@&..%@@@#@@@@@@@@@%%&*******,,,,*@/((((((((##*..&..@@ * %@@@@@@@@@@@@@@@@@@@@@@@%#####################################@@@\\n// @@@@@@@@@@@@@@@@@@@*,&,,&#%@@*,@@@@@@@%@%%&***/&*,,##(//((#(((###&..,.. (@&   *  @@@@@@@@@@@@@@@@@@@@######################################@@@\\n// @@@@@@@@@@@@@@@@,.....&*&&&**@@@@&..@@%%&%%&**,,,**@%%%@/####(#((&..&.   @@           @@@@@@@@@@@@@@@#####################################%@@@\\n// @@@@@@@@@@@@,.,%...&,,,&/**@@@,....@@%%%&&%*******/%%%%%&/(##((((,../,   &@         /    %@@@@@@@@@@@@@@@@@@@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@,,,...%..,(/,(**@@.....(@@&%%%&&&********@%&&&&&./((((@.. %.   @@   ..        .%%#&@@@@@@@@@@@@@@@@@@@@@############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@(.,@*(.,,%,.&.#*,*.....@@@@&&.#&&&#*******&&&&&&.....@(....&.   @@ ...,     .@        ,@@@@@@@@@@@@@@@@@&############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@..,***(#.&.%***/..,@@@  (@@@.@&&&******%&&&&&&  ..........@   .@&..../  ..&           @@@@@@@@@@@@@@@@@&############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@(.************,%..(/@     @@.@&&&/***(&&&&&#/.   ......*&,.   @@ ...@ ...#            @@@@@@@@@@@@@@@@@%############@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@,***********(/   /@#    ,@&*%&&&&*&&&@%%#/(&   ....&*,.     ##@ ..& ..&..             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@********&*#.     %     @(*%%%&&&&&&@(((((%    .........*%  &@  ..,..&..              /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@*****@***..     .(     * @%(%&&&&&&&((((#@    .........@. @@*  .&..,..    .           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@********,&.*@@@@@@@@@@# %%((&&&&@@@@@@@@@@@@@@@@@@@@@@&, @@/   .&@@@@@@@@@@@@@@@@@@/  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@         @@*******.,@@(        @@ &(/(%&&@@                    @@*@@*    *@@                  /@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@\\n// @@.         @@(*****/@@          @@@((((&&&@@.                   ,@@./     ,@@                      .@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@\\n// @@/          @@@***(@@           @@#(((#&&&@@/        @@@@&%#*.   @@&@&    .@@        @@@@@#          ,@@@@@@@@@@@@@*        @@@@@@@@@@@@@@@@@\\n// @@#           *@@*@@@            @@%#((&&&&@@&        @@@@@@@@@@@@@  &@    /@@        @@    @@@         @@@@@@@@@@@@#        @@@@@@@@@@@@@@@@@\\n// @@&             @@@.            .@@%%#%&&&&@@@                   @@  @(   ..@@        @@      @@,       &@@@@@@@@@@@&       ,@@@@@@@@@@@@@@@@@\\n// @@@..............@...... ........@@#((%&&&&&@@.................. @@ ##/  ..,@@....... @@      #@@.......*@@@@@@@@@@@&.......*@@@@@@@@@@@@@@@@@\\n// @@&.......@............%@........@@(((&&&&&@@@........&&&&&&&%/./@@@@    ./.@@........@@..    @@........@@@@@@@@@@@@(.......,@@@@@@@@@@@@@@@@@\\n// @@(.......@@/.........@@@........@@%@(&&&&&@@(........@@@@@@@@@@@@@@    #.(.@@........@@&&@@@@&........%@@@@@@@@@@@@,........@@@@@@@@@@@@@@@@@\\n// @@,.......@@@@.......@@@&........@@((%&&&&&@@,....................@@#  ..(,*@@........................@@@@@@@@@@@@@@.........@@@@@@@@@@@@@@@@@\\n// @@........@@@@@....,@@@@#........@@((&&&&&&@@.....................@@  ..#@%.@@.....................,@@@@@@@@@@@@@@@@.........@@@@@@@@@@@@@@@@@\\n// @@.,,,,,,,@@/*@@,,,@@*@@#,,,,,,,,@@((@&&&&&@@.,,,,,,,,,,,,,,,,,,,(@@ .,,@%.*@@,,,,,,,,,,,,,,..(@@@@@@@@@@@@@@@@@@@@@.,,,,,,,.@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n// @@@            @@@@@@@@@@@@@@@          /@@@@@@@@@@@@@@@@    .@@@@     @@@@@@@@@@@@@           @@@@@@@@@@@@@@     @@@@@#    @@@@@@@@@@@@@@@@@@\\n// @@@@@@(    @@@@@@@@@@@@@@@@@      %@(      @@@@@@@@@@@@@@    #@@@     @@@@@@@@@@@@@@    ,@@@@@@@@@@@@@@@@@@@@       @@@@    @@@@@@@@@@@@@@@@@@\\n// @@@@@@&    @@@@@@@@@@@@@@@@     @@@@@@@    /@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@         @@    @@@@@@@@@@@@@@@@@@\\n// @@@@@@%....@@@@@@@@@@@@@@@@ ... @@@@@@@....(@@@@@@@@@@@@@.......... @@@@@@@@@@@@@@@@.....    . @@@@@@@@@@@@@@....@@.........@@@@@@@@@@@@@@@@@@\\n// @@@@@@/....@@@@@@@@@@@@@@@@@......*#,.....,@@@@@@@@@@@@@@..../@@.....%@@@@@@@@@@@@@@.....%@@&#//@@@@@@@@@@@@@....@@@@.......@@@@@@@@@@@@@@@@@@\\n// @@@@@@,,,,,@@@@@@@@@@@@@@@@@@@/,,,,,,,,,&@@@@@@@@@@@@@@@@,,,,,@@@@,,,,.@@@@@@@@@@@@@,,,,,,,,,,,&@@@@@@@@@@@@@,,,,@@@@@@.,,,,@@@@@@@@@@@@@@@@@@\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IFactory{\\n        function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline) external;\\n}\\n\\ncontract MediTokenV2 is Context, IERC20, Ownable {\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _isExcluded;\\n    mapping (address => bool) private _isBot;\\n\\n    address[] private _excluded;\\n    \\n    bool public swapEnabled;\\n    bool private swapping;\\n\\n    IRouter public router;\\n    address public pair;\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    uint256 private _tTotal = 1000000000000000000 * 10**_decimals;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n\\n    \\n    uint256 public swapTokensAtAmount = 1000000 * 10**_decimals;\\n    uint256 public maxTxAmount = 2000000000000000 * 10**_decimals;\\n\\n    bool private _isTradingState = true;\\n    \\n    // Anti Dump //\\n    mapping (address => uint256) public _lastTrade;\\n    bool public coolDownEnabled = true;\\n    uint256 public coolDownTime = 69 seconds;\\n\\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\\n    address public devAddress = 0xC56d6d2ae78102C9D7a72bCab720ca1CAe97b2cC;\\n    address public charityAddress = 0xb3AaE54BE35E8044c8044F5488aAF3861279328B;\\n    address public marketingAddress = 0x45b495b912c33db96D57B18FbB5f4A439573D770;\\n\\n    address private routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;  //uniswap v2\\n\\n    string private constant _name = \\\"Medi Token V2\\\";\\n    string private constant _symbol = \\\"MEDI\\\";\\n\\n\\n    struct Taxes {\\n      uint256 rfi;\\n      uint256 burn;\\n      uint256 liquidity;\\n      uint256 charity;\\n      uint256 dev;\\n      uint256 marketing;   \\n    }\\n\\n    Taxes public taxes = Taxes(1,1,1,3,3,2);\\n\\n    struct TotFeesPaidStruct{\\n        uint256 rfi;\\n        uint256 burn;\\n        uint256 liquidity;\\n        uint256 charity;\\n        uint256 dev;\\n        uint256 marketing;\\n    }\\n    TotFeesPaidStruct public totFeesPaid;\\n\\n    struct valuesFromGetValues{\\n        uint256 rAmount;\\n        uint256 rTransferAmount;\\n        uint256 rRfi;\\n        uint256 rBurn;\\n        uint256 rLiquidity;\\n        uint256 rCharity;\\n        uint256 rDev;\\n        uint256 rMarketing;\\n        uint256 tTransferAmount;\\n        uint256 tRfi;\\n        uint256 tBurn;\\n        uint256 tLiquidity;\\n        uint256 tCharity;\\n        uint256 tDev;\\n        uint256 tMarketing;\\n    }\\n\\n    event FeesChanged();\\n    event UpdatedRouter(address oldRouter, address newRouter);\\n\\n    modifier lockTheSwap {\\n        swapping = true;\\n        _;\\n        swapping = false;\\n    }\\n\\n    constructor () {\\n        IRouter _router = IRouter(routerAddress);\\n        address _pair = IFactory(_router.factory())\\n            .createPair(address(this), _router.WETH());\\n\\n        router = _router;\\n        pair = _pair;\\n        \\n        excludeFromReward(pair);\\n        excludeFromReward(deadAddress);\\n\\n        _rOwned[owner()] = _rTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[charityAddress]=true;\\n        _isExcludedFromFee[devAddress]=true;\\n        _isExcludedFromFee[marketingAddress]=true;\\n        _isExcludedFromFee[deadAddress] = true;\\n\\n        _isTradingState = true;\\n        swapEnabled = true;\\n\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        require(_isTradingState == true, \\\"Trading is currently disabled.\\\");\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function tradingEnabled() public view returns (bool) {\\n        return _isTradingState;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferRfi) {\\n            valuesFromGetValues memory s = _getValues(tAmount, true);\\n            return s.rAmount;\\n        } else {\\n            valuesFromGetValues memory s = _getValues(tAmount, true);\\n            return s.rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount/currentRate;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner() {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function setTaxes(uint256 _rfi, uint256 _charity, uint256 _dev, uint256 _marketing, uint256 _liquidity, uint256 _burn) public onlyOwner {\\n        taxes.rfi = _rfi;\\n        taxes.charity = _charity;\\n        taxes.dev = _dev;\\n        taxes.marketing = _marketing;\\n        taxes.liquidity = _liquidity;\\n        taxes.burn = _burn;\\n        emit FeesChanged();\\n    }\\n\\n\\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\\n        _rTotal -=rRfi;\\n        totFeesPaid.rfi +=tRfi;\\n    }\\n\\n    function _takeLiquidity(uint256 rLiquidity, uint256 tLiquidity) private {\\n        totFeesPaid.liquidity +=tLiquidity;\\n\\n        if(_isExcluded[address(this)])\\n        {\\n            _tOwned[address(this)]+=tLiquidity;\\n        }\\n        _rOwned[address(this)] +=rLiquidity;\\n    }\\n\\n    function _takeDev(uint256 rDev, uint256 tDev) private {\\n        totFeesPaid.dev +=tDev;\\n\\n        if(_isExcluded[address(this)])\\n        {\\n            _tOwned[address(this)]+=tDev;\\n        }\\n        _rOwned[address(this)] +=rDev;\\n    }\\n    \\n    function _takeMarketing(uint256 rMarketing, uint256 tMarketing) private {\\n        totFeesPaid.marketing +=tMarketing;\\n\\n        if(_isExcluded[address(this)])\\n        {\\n            _tOwned[address(this)]+=tMarketing;\\n        }\\n        _rOwned[address(this)] +=rMarketing;\\n    }\\n\\n    function _takeCharity(uint256 rCharity, uint256 tCharity) private {\\n        totFeesPaid.charity +=tCharity;\\n\\n        if(_isExcluded[address(this)])\\n        {\\n            _tOwned[address(this)]+=tCharity;\\n        }\\n        _rOwned[address(this)] +=rCharity;\\n    }\\n\\n    function _takeBurn(uint256 rBurn, uint256 tBurn) private{\\n        totFeesPaid.burn +=tBurn;\\n\\n        if(_isExcluded[deadAddress])\\n        {\\n            _tOwned[deadAddress]+=tBurn;\\n        }\\n        _rOwned[deadAddress] +=rBurn;\\n    }\\n\\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\\n        to_return = _getTValues(tAmount, takeFee);\\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rCharity, to_return.rDev, to_return.rMarketing, to_return.rLiquidity, to_return.rBurn) = _getRValues(to_return, tAmount, takeFee, _getRate());\\n        return to_return;\\n    }\\n\\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\\n\\n        if(!takeFee) {\\n          s.tTransferAmount = tAmount;\\n          return s;\\n        }\\n        \\n        s.tRfi = tAmount*taxes.rfi/100;\\n        s.tCharity = tAmount*taxes.charity/100;\\n        s.tDev = tAmount*taxes.dev/100;\\n        s.tMarketing = tAmount*taxes.marketing/100;\\n        s.tLiquidity = tAmount*taxes.liquidity/100;\\n        s.tBurn = tAmount*taxes.burn/100;\\n        s.tTransferAmount = tAmount-s.tRfi-s.tCharity-s.tDev-s.tMarketing-s.tLiquidity-s.tBurn;\\n        return s;\\n    }\\n\\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rCharity, uint256 rDev, uint256 rMarketing, uint256 rLiquidity, uint256 rBurn) {\\n        rAmount = tAmount*currentRate;\\n\\n        if(!takeFee) {\\n          return(rAmount, rAmount, 0,0,0,0,0,0);\\n        }\\n\\n        rRfi = s.tRfi*currentRate;\\n        rCharity = s.tCharity*currentRate;\\n        rDev = s.tDev*currentRate;\\n        rMarketing = s.tMarketing*currentRate;\\n        rLiquidity = s.tLiquidity*currentRate;\\n        rBurn = s.rBurn*currentRate;\\n        rTransferAmount =  rAmount-rRfi-rCharity-rDev-rMarketing-rLiquidity-rBurn;\\n        return (rAmount, rTransferAmount, rRfi, rCharity, rDev, rMarketing, rLiquidity, rBurn);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply/tSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply-_rOwned[_excluded[i]];\\n            tSupply = tSupply-_tOwned[_excluded[i]];\\n        }\\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(amount <= balanceOf(from),\\\"You are trying to transfer more than your balance\\\");\\n        require(!_isBot[from] && !_isBot[to], \\\"You are a bot\\\");\\n        \\n\\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !swapping){\\n            require(amount <= maxTxAmount ,\\\"Amount is exceeding maxTxAmount\\\");\\n\\n            if(from != pair && coolDownEnabled){\\n                uint256 timePassed = block.timestamp - _lastTrade[from];\\n                require(timePassed > coolDownTime, \\\"You must wait coolDownTime\\\");\\n                _lastTrade[from] = block.timestamp;\\n            }\\n            if(to != pair && coolDownEnabled){\\n                uint256 timePassed2 = block.timestamp - _lastTrade[to];\\n                require(timePassed2 > coolDownTime, \\\"You must wait coolDownTime\\\");\\n                _lastTrade[to] = block.timestamp;\\n            }\\n        }\\n        \\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\\n        if(!swapping && swapEnabled && canSwap && from != pair && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\\n            swapAndLiquify(swapTokensAtAmount);\\n        }\\n\\n        _tokenTransfer(from, to, amount, !(_isExcludedFromFee[from] || _isExcludedFromFee[to]));\\n    }\\n\\n\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private {\\n\\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\\n\\n        if (_isExcluded[sender] ) {  //from excluded\\n                _tOwned[sender] = _tOwned[sender]-tAmount;\\n        }\\n        if (_isExcluded[recipient]) { //to excluded\\n                _tOwned[recipient] = _tOwned[recipient]+s.tTransferAmount;\\n        }\\n\\n        _rOwned[sender] = _rOwned[sender]-s.rAmount;\\n        _rOwned[recipient] = _rOwned[recipient]+s.rTransferAmount;\\n        \\n        _reflectRfi(s.rRfi, s.tRfi);\\n        _takeLiquidity(s.rLiquidity,s.tLiquidity);\\n        _takeDev(s.rDev, s.tDev);\\n        _takeMarketing(s.rMarketing, s.tMarketing);\\n        _takeCharity(s.rCharity, s.tCharity);\\n        _takeBurn(s.rBurn, s.tBurn);\\n\\n        emit Transfer(sender, deadAddress, s.tBurn);\\n        emit Transfer(sender, recipient, s.tTransferAmount);\\n        emit Transfer(sender, address(this), s.tLiquidity + s.tCharity + s.tDev + s.tMarketing);\\n        \\n    }\\n\\n    function swapAndLiquify(uint256 tokens) private lockTheSwap{\\n       // Split the contract balance into halves\\n        uint256 denominator = (taxes.liquidity + taxes.dev + taxes.charity + taxes.marketing ) * 2;\\n        uint256 tokensToAddLiquidityWith = tokens * taxes.liquidity / denominator;\\n        uint256 toSwap = tokens - tokensToAddLiquidityWith;\\n\\n        uint256 initialBalance = address(this).balance;\\n\\n        swapTokensForETH(toSwap);\\n\\n        uint256 deltaBalance = address(this).balance - initialBalance;\\n        uint256 unitBalance= deltaBalance / (denominator - taxes.liquidity);\\n        uint256 ethToAddLiquidityWith = unitBalance * taxes.liquidity;\\n\\n        if(ethToAddLiquidityWith > 0){\\n            // Add liquidity to uniswap\\n            addLiquidity(tokensToAddLiquidityWith, ethToAddLiquidityWith);\\n        }\\n\\n        uint256 devAmt = unitBalance * 2 * taxes.charity;\\n        if(devAmt > 0){\\n            payable(devAddress).transfer(devAmt);\\n        }\\n\\n        uint256 charityAmt = unitBalance * 2 * taxes.dev;\\n        if(charityAmt > 0){\\n            payable(charityAddress).transfer(charityAmt);\\n        }\\n\\n        uint256 marketingAmt = unitBalance * 2 * taxes.marketing;\\n        if(marketingAmt > 0){\\n            payable(marketingAddress).transfer(marketingAmt);\\n        }\\n\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        // add the liquidity\\n        router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function updatedevWallet(address newWallet) external onlyOwner{\\n        require(devAddress != newWallet ,'Wallet already set');\\n        devAddress = newWallet;\\n        _isExcludedFromFee[devAddress];\\n    }\\n\\n    function updatecharityWallet(address newWallet) external onlyOwner{\\n        require(charityAddress != newWallet ,'Wallet already set');\\n        charityAddress = newWallet;\\n        _isExcludedFromFee[charityAddress];\\n    }\\n\\n    function updatemarketingWallet(address newWallet) external onlyOwner{\\n        require(marketingAddress != newWallet ,'Wallet already set');\\n        marketingAddress = newWallet;\\n        _isExcludedFromFee[marketingAddress];\\n    }\\n\\n    function updatMaxTxAmt(uint256 amount) external onlyOwner{\\n        maxTxAmount = amount * 10 **_decimals;\\n    }\\n\\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner{\\n        swapTokensAtAmount = amount * 10 **_decimals;\\n    }\\n\\n    function updateSwapEnabled(bool _enabled) external onlyOwner{\\n        swapEnabled = _enabled;\\n    }\\n\\n    function updateCoolDownSettings(bool _enabled, uint256 _timeInSeconds) external onlyOwner{\\n        coolDownEnabled = _enabled;\\n        coolDownTime = _timeInSeconds * 1 seconds;\\n    }\\n\\n    function setAntibot(address account, bool state) external onlyOwner{\\n        require(_isBot[account] != state, 'Value already set');\\n        _isBot[account] = state;\\n    }\\n    \\n    function bulkAntiBot(address[] memory accounts, bool state) external onlyOwner{\\n        for(uint256 i = 0; i < accounts.length; i++){\\n            _isBot[accounts[i]] = state;\\n        }\\n    }\\n    \\n    function updateRouterAndPair(address newRouter, address newPair) external onlyOwner{\\n        router = IRouter(newRouter);\\n        pair = newPair;\\n    }\\n    \\n    function isBot(address account) public view returns(bool){\\n        return _isBot[account];\\n    }\\n    \\n\\n    //Use this in case ETH are sent to the contract by mistake\\n    function rescueETH(uint256 weiAmount) external onlyOwner{\\n        require(address(this).balance >= weiAmount, \\\"insufficient ETH balance\\\");\\n        payable(msg.sender).transfer(weiAmount);\\n    }\\n    \\n    // Function to allow admin to claim *other* BEP20 tokens sent to this contract (by mistake)\\n    // Owner cannot transfer out cakecoin from this smart contract\\n    function rescueAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\n    }\\n\\n    function setTradingState(bool _state) external onlyOwner{\\n        _isTradingState = _state;\\n    }\\n\\n    receive() external payable{\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTradingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updatMaxTxAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateCoolDownSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updatecharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updatedevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updatemarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MediTokenV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}