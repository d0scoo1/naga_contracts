{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/query/Querier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// Pellar 2022\\n\\ncontract Query {\\n  struct CallMapper {\\n    address contractAddress;\\n    bytes bytesCaller;\\n  }\\n  function getTokensByAccount(address _contract, address _account) public view returns (uint256[] memory) {\\n    uint256 balance = INFT(_contract).balanceOf(_account);\\n    uint256[] memory tokens = new uint256[](balance);\\n    for (uint256 i = 0; i < balance; i++) {\\n      tokens[i] = INFT(_contract).tokenOfOwnerByIndex(_account, i);\\n    }\\n    return tokens;\\n  }\\n\\n  function callContractsWith(CallMapper[] calldata _callers) public view returns (bool[] memory, bytes[] memory) {\\n    uint256 size = _callers.length;\\n    bool[] memory successes = new bool[](size);\\n    bytes[] memory responses = new bytes[](size);\\n    for (uint256 i = 0; i < _callers.length; i++) {\\n      (bool success, bytes memory res) = _callers[i].contractAddress.staticcall(_callers[i].bytesCaller);\\n      successes[i] = success;\\n      responses[i] = res;\\n    }\\n    return (successes, responses);\\n  }\\n}\\n\\ninterface INFT {\\n  function totalSupply() external view returns (uint256);\\n\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bytesCaller\",\"type\":\"bytes\"}],\"internalType\":\"struct Query.CallMapper[]\",\"name\":\"_callers\",\"type\":\"tuple[]\"}],\"name\":\"callContractsWith\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Query", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}