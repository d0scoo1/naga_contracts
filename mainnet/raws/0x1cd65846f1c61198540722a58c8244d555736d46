{"status": "1", "message": "OK", "result": [{"SourceCode": "/// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Vault {\r\n  enum Permission {\r\n    None,\r\n    Liquidate,\r\n    Partial,\r\n    Full\r\n  }\r\n\r\n  uint public LIQUIDATION_TIME = 30 days;\r\n  uint public ADD_USER_TIME = 10 days;\r\n\r\n  mapping (address => Permission) users;\r\n  mapping (address => uint) userActive;\r\n  uint public nextLiquidation = type(uint).max;\r\n\r\n  constructor(\r\n    address[] memory fullUsers,\r\n    address[] memory partialUsers,\r\n    address[] memory liquidators\r\n  ) {\r\n    for (uint8 x = 0; x < fullUsers.length; x++) {\r\n      users[fullUsers[x]] = Permission.Full;\r\n    }\r\n    for (uint8 x = 0; x < liquidators.length; x++) {\r\n      users[liquidators[x]] = Permission.Liquidate;\r\n    }\r\n    for (uint8 x = 0; x < partialUsers.length; x++) {\r\n      users[partialUsers[x]] = Permission.Partial;\r\n    }\r\n  }\r\n\r\n  receive () external payable {}\r\n\r\n  function requireActiveUser(address user, Permission perm) public view {\r\n    require(users[user] >= perm);\r\n    require(userActive[user] < block.timestamp);\r\n  }\r\n\r\n  function requireActiveLiquidation() public view {\r\n    require(nextLiquidation < block.timestamp);\r\n  }\r\n\r\n  function addUser(address user, Permission perm) public {\r\n    requireActiveUser(msg.sender, Permission.Partial);\r\n    users[user] = perm;\r\n    userActive[user] = block.timestamp + ADD_USER_TIME;\r\n  }\r\n\r\n  function removeUser(address user) public {\r\n    requireActiveUser(msg.sender, Permission.Partial);\r\n    users[user] = Permission.None;\r\n    userActive[user] = 0;\r\n  }\r\n\r\n  function withdrawEther(uint amount, address destination) public {\r\n    requireActiveUser(msg.sender, Permission.Full);\r\n    (bool sent, ) = destination.call{value: amount}(\"\");\r\n    require(sent);\r\n  }\r\n\r\n  function withdrawToken(address token, uint amount, address destination) public {\r\n    requireActiveUser(msg.sender, Permission.Full);\r\n    require(IERC20(token).transfer(destination, amount));\r\n  }\r\n\r\n  function beginLiquidation() public {\r\n    requireActiveUser(msg.sender, Permission.Liquidate);\r\n    nextLiquidation = block.timestamp + LIQUIDATION_TIME;\r\n  }\r\n\r\n  function cancelLiquidation() public {\r\n    requireActiveUser(msg.sender, Permission.Partial);\r\n    nextLiquidation = type(uint).max;\r\n  }\r\n\r\n  function liquidateWithdrawEther(uint amount, address destination) public {\r\n    requireActiveUser(msg.sender, Permission.Liquidate);\r\n    requireActiveLiquidation();\r\n    (bool sent, ) = destination.call{value: amount}(\"\");\r\n    require(sent);\r\n  }\r\n\r\n  function liquidateWithdrawToken(address token, uint amount, address destination) public {\r\n    requireActiveUser(msg.sender, Permission.Liquidate);\r\n    requireActiveLiquidation();\r\n    require(IERC20(token).transfer(destination, amount));\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fullUsers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"partialUsers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"liquidators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_USER_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Vault.Permission\",\"name\":\"perm\",\"type\":\"uint8\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"liquidateWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"liquidateWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireActiveLiquidation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Vault.Permission\",\"name\":\"perm\",\"type\":\"uint8\"}],\"name\":\"requireActiveUser\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000718f61d5144a67405855a5a54215dc15e119f4da0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ddec6c333538fcd3de7cfb56d6beed7fd8dee6040000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46cb5d431b9d0ed60a8ee64f1680aaf8acab3830f65c9478e8aefe562883c89d"}]}