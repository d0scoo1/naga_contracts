{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Doubler {\r\n  address payable public bank;\r\n  address payable public owner;\r\n  \r\n  event BalanceDeposited();\r\n  event BalanceWithdrawn();\r\n  event PaymentDoubled();\r\n  event PaymentLost();\r\n\r\n  constructor() payable {\r\n    bank = payable(address(this));\r\n    owner = payable(msg.sender);\r\n  }\r\n  \r\n  function deposit() external payable {\r\n    emit BalanceDeposited();\r\n  }\r\n\r\n  function doublePayment() external payable {\r\n    uint256 payment = msg.value;\r\n    uint256 win = payment * 2;\r\n    require(win < bank.balance, \"Payment too large.\");\r\n    uint rand = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, payment))) % 100;\r\n    if (rand <= 45) {\r\n      address payable user = payable(msg.sender);\r\n      (bool success, ) = user.call{value: win}(\"\");\r\n      require(success, \"Failed to send doubled payment.\");\r\n      emit PaymentDoubled();\r\n    } else {\r\n      emit PaymentLost();\r\n    }\r\n  }\r\n\r\n  function withdraw() external {\r\n    uint256 amount = bank.balance - 1000000;\r\n    require(amount > 0, \"Not enough balance to withdraw.\");\r\n    (bool success, ) = owner.call{value: amount}(\"\");\r\n    require(success, \"Failed to withdraw to owner.\");\r\n    emit BalanceWithdrawn();\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BalanceDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PaymentDoubled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PaymentLost\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doublePayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Doubler", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://903f9429f8677d0229e3d3ecfda45e36029c462723dcd06c269c2d599b5dbc37"}]}