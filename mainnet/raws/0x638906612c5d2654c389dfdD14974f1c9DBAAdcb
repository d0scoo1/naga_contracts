{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/external/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/spool-core/SpoolOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./interfaces/ISpoolOwner.sol\\\";\\r\\n\\r\\nabstract contract SpoolOwnable {\\r\\n    ISpoolOwner private immutable spoolOwner;\\r\\n    \\r\\n    constructor(ISpoolOwner _spoolOwner) {\\r\\n        require(\\r\\n            address(_spoolOwner) != address(0),\\r\\n            \\\"SpoolOwnable::constructor: Spool owner contract cannot be 0 address\\\"\\r\\n        );\\r\\n\\r\\n        spoolOwner = _spoolOwner;\\r\\n    }\\r\\n\\r\\n    function isSpoolOwner() internal view returns(bool) {\\r\\n        return spoolOwner.isSpoolOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() private view {\\r\\n        require(isSpoolOwner(), \\\"SpoolOwnable::_onlyOwner: Caller is not the Spool owner\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/external/spool-core/interfaces/ISpoolOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface ISpoolOwner {\\r\\n    function isSpoolOwner(address user) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IERC20Mintable is IERC20 {\\r\\n    function mint(address, uint256) external;\\r\\n\\r\\n    function burn(address, uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/vesting/IBaseVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/* ========== STRUCTS ========== */\\r\\n\\r\\n/** @notice Vest struct\\r\\n*   @param amount amount currently vested for user. changes as they claim, or if their vest is transferred to another address\\r\\n*   @param lastClaim timestamp of the last time the user claimed. is initially set to 0.\\r\\n*/\\r\\nstruct Vest {\\r\\n    uint192 amount;\\r\\n    uint64 lastClaim;\\r\\n}\\r\\n\\r\\n/** @notice Member struct\\r\\n*   @param prev address to transfer vest from\\r\\n*   @param next address to transfer vest to\\r\\n*/\\r\\nstruct Member {\\r\\n    address prev;\\r\\n    address next;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice {IBaseVesting} interface.\\r\\n *\\r\\n * @dev See {BaseVesting} for function descriptions.\\r\\n *\\r\\n */\\r\\ninterface IBaseVesting {\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    function total() external view returns (uint256);\\r\\n\\r\\n    function begin() external;\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event VestingInitialized(uint256 duration);\\r\\n\\r\\n    event Vested(address indexed from, uint256 amount);\\r\\n\\r\\n    event Transferred(Member indexed members, uint256 amount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/vesting/ISpoolPreDAOVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./IBaseVesting.sol\\\";\\r\\nimport \\\"../IERC20Mintable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice {ISpoolPreDAOVesting} interface.\\r\\n *\\r\\n * @dev See {SpoolPreDAOVesting} for function descriptions.\\r\\n *\\r\\n */\\r\\ninterface ISpoolPreDAOVesting is IBaseVesting {\\r\\n    function setVests(\\r\\n        address[] calldata members,\\r\\n        uint192[] calldata amounts\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vesting/BaseVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../external/spool-core/SpoolOwnable.sol\\\";\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/vesting/IBaseVesting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the {IBaseVesting} interface.\\r\\n *\\r\\n * @dev This contract is inherited by the other *Vesting.sol contracts in this folder.\\r\\n *      It implements common functions for all of them.\\r\\n */\\r\\ncontract BaseVesting is SpoolOwnable, IBaseVesting {\\r\\n    /* ========== LIBRARIES ========== */\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @notice the length of time (in seconds) the vesting is to last for.\\r\\n    uint256 public immutable vestingDuration;\\r\\n\\r\\n    /// @notice SPOOL token contract address, the token that is being vested.\\r\\n    IERC20 public immutable spoolToken;\\r\\n\\r\\n    /// @notice timestamp of vesting start\\r\\n    uint256 public start;\\r\\n\\r\\n    /// @notice timestamp of vesting end\\r\\n    uint256 public end;\\r\\n\\r\\n    /// @notice total amount of SPOOL token vested\\r\\n    uint256 public override total;\\r\\n\\r\\n    /// @notice map of member to Vest struct (see IBaseVesting)\\r\\n    mapping(address => Vest) public userVest;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice sets the contracts initial values\\r\\n     *\\r\\n     * @dev \\r\\n     *\\r\\n     *  Requirements:\\r\\n     *  - _spoolToken must not be the zero address\\r\\n     *\\r\\n     * @param spoolOwnable the spool owner contract that owns this contract\\r\\n     * @param _spoolToken SPOOL token contract address, the token that is being vested.\\r\\n     * @param _vestingDuration the length of time (in seconds) the vesting is to last for.\\r\\n     */\\r\\n    constructor(ISpoolOwner spoolOwnable, IERC20 _spoolToken, uint256 _vestingDuration) SpoolOwnable(spoolOwnable) {\\r\\n        require(_spoolToken != IERC20(address(0)), \\\"BaseVesting::constructor: Incorrect Token\\\");\\r\\n\\r\\n        spoolToken = _spoolToken;\\r\\n        vestingDuration = _vestingDuration;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount a user can claim at a given point in time.\\r\\n     *\\r\\n     * @dev\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - the vesting period has started\\r\\n     */\\r\\n    function getClaim()\\r\\n        external\\r\\n        view\\r\\n        hasStarted(true)\\r\\n        returns (uint256 vestedAmount)\\r\\n    {\\r\\n        Vest memory vest = userVest[msg.sender];\\r\\n        return _getClaim(vest.amount, vest.lastClaim);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim their pending vesting amount.\\r\\n     *\\r\\n     * @dev\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the vesting period has started\\r\\n     * - the caller must have a non-zero vested amount\\r\\n     */\\r\\n    function claim() external hasStarted(true) returns(uint256 vestedAmount) {\\r\\n        Vest memory vest = userVest[msg.sender];\\r\\n        vestedAmount = _getClaim(vest.amount, vest.lastClaim);\\r\\n        require(vestedAmount != 0, \\\"BaseVesting::claim: Nothing to claim\\\");\\r\\n        _claim(msg.sender, vestedAmount, vest);\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the vesting period to be initiated.\\r\\n     *\\r\\n     * @dev  the storage variable \\\"total\\\" contains the total amount of the SPOOL token that is being vested.\\r\\n     * this is transferred from the SPOOL owner here.\\r\\n     * \\r\\n     * Emits a {VestingInitialized} event from which the start and\\r\\n     * end can be calculated via it's attached timestamp.\\r\\n     * \\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the owner\\r\\n     * - owner has given allowance for \\\"total\\\" to this contract\\r\\n     */\\r\\n    function begin() external override onlyOwner hasStarted(false) {\\r\\n        spoolToken.safeTransferFrom(msg.sender, address(this), total);\\r\\n\\r\\n        start = block.timestamp;\\r\\n        end = block.timestamp + vestingDuration;\\r\\n\\r\\n        emit VestingInitialized(vestingDuration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to transfer all or part of a vest from one address to another\\r\\n     *\\r\\n     * @dev It allows for transfer of vest to any other address. However, in the case that the receiving address has any vested\\r\\n     * amount, it first checks for that, and if so, claims on behalf of that user, sending them any pending vested amount.\\r\\n     * This has to be done to ensure the vesting is fairly distributed.\\r\\n     *\\r\\n     * Emits a {Transferred} event indicating the members who were involved in the transfer\\r\\n     * as well as the amount that was transferred.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - the vesting period has started\\r\\n     * - specified transferAmount is not more than the previous member's vested amount\\r\\n     * \\r\\n     * @param members members list - \\\"prev\\\" for member to transfer from, \\\"next\\\" for member to transfer to\\r\\n     * @param transferAmount amount of SPOOL token to transfer\\r\\n     */\\r\\n    function transferVest(Member calldata members, uint256 transferAmount)\\r\\n        external\\r\\n        onlyOwner \\r\\n        hasStarted(true)\\r\\n    {\\r\\n        uint256 prevAmount = uint256(userVest[members.prev].amount);\\r\\n        require(transferAmount <= prevAmount && transferAmount > 0, \\\"BaseVesting::transferVest: invalid amount specified for transferring vest\\\");\\r\\n\\r\\n        /** \\r\\n         * NOTE \\r\\n         * We check if the member has any pending vest amount. \\r\\n         * if so: call claim with their address\\r\\n         * if not: update lastClaim (otherwise, is done inside _claim)\\r\\n         */\\r\\n        Vest memory newVest = userVest[members.next];\\r\\n        uint vestedAmount = _getClaim(newVest.amount, newVest.lastClaim);\\r\\n        if(vestedAmount != 0) {\\r\\n            _claim(members.next, vestedAmount, newVest);            \\r\\n        } else {\\r\\n            userVest[members.next].lastClaim = uint64(block.timestamp);\\r\\n        }\\r\\n\\r\\n        _transferVest(members, transferAmount);\\r\\n\\r\\n        emit Transferred(members, transferAmount);  \\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim their pending vesting amount (internal function)\\r\\n     *\\r\\n     * @dev Only accessible via the external \\\"claim\\\" function (in which case, msg.sender is used) or the transferVest function,\\r\\n     * which is only callable by the SPOOL owner\\r\\n     *\\r\\n     * Emits a {Vested} event indicating the user who claimed their vested tokens\\r\\n     * as well as the amount that was vested.\\r\\n     *\\r\\n     * @param member address to claim for\\r\\n     * @param vestedAmount amount to claim\\r\\n     * @param vest vesting info for \\\"member\\\"\\r\\n     */\\r\\n    function _claim(address member, uint256 vestedAmount, Vest memory vest) internal {\\r\\n\\r\\n        _claimVest(member, vestedAmount, vest);\\r\\n\\r\\n        emit Vested(member, vestedAmount);\\r\\n\\r\\n        spoolToken.safeTransfer(member, vestedAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows owner to set the vesting members and amounts (internal function)\\r\\n     *\\r\\n     * @dev Only accessible via the external setVests function located in the inheriting vesting contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - vesting must not already have started\\r\\n     * - input member and amount arrays must be the same size\\r\\n     * - values in amounts array must be greater than 0\\r\\n     *\\r\\n     * @param members array of addresses to set vesting for\\r\\n     * @param amounts array of SPOOL token vesting amounts to to be set for each address\\r\\n     */\\r\\n    function _setVests(address[] memory members, uint192[] memory amounts)\\r\\n        internal\\r\\n        hasStarted(false)\\r\\n    {\\r\\n        require(\\r\\n            members.length == amounts.length,\\r\\n            \\\"BaseVesting::_setVests: Incorrect Arguments\\\"\\r\\n        );\\r\\n\\r\\n        for(uint i = 0; i < members.length; i++){\\r\\n            for(uint j = (i+1); j < members.length; j++) {\\r\\n                require(members[i] != members[j], \\\"BaseVesting::_setVests: Members Not Unique\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        int192 totalDiff;\\r\\n        for (uint i = 0; i < members.length; i++) {\\r\\n            totalDiff += _setVest(members[i], amounts[i]);\\r\\n        }\\r\\n\\r\\n        // if the difference from the previous totals for these members is less than zero, subtract from total.\\r\\n        if(totalDiff < 0) {\\r\\n            total -= abs(totalDiff);\\r\\n        } else {\\r\\n            total += abs(totalDiff);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows owner to set the vesting amount for a member (internal function)\\r\\n     *\\r\\n     * @dev Only accessible via the internal _setVests function.\\r\\n     * This is a virtual function, it can be overriden by the inheriting vesting contracts.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - amount must be less than uint192 max (the maximum value that can be stored for amount)\\r\\n     *\\r\\n     * @param user the user to set vesting for\\r\\n     * @param amount the SPOOL token vesting amount to be set for this user\\r\\n     *\\r\\n     */\\r\\n    function _setVest(address user, uint192 amount)\\r\\n        internal\\r\\n        virtual\\r\\n        returns (int192 diff)\\r\\n    {\\r\\n        diff = int192(amount) - int192(userVest[user].amount);\\r\\n        userVest[user].amount = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim their pending vesting amount (internal, virtual function)\\r\\n     *\\r\\n     * @dev Only accessible via the internal _claimVest function.\\r\\n     * This is a virtual function, it can be overriden by the inheriting vesting contracts.\\r\\n     *\\r\\n     * @param member address to claim for\\r\\n     * @param vestedAmount amount to claim\\r\\n     * @param vest vesting info for \\\"member\\\"\\r\\n     */\\r\\n    function _claimVest(address member, uint256 vestedAmount, Vest memory vest)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        vest.amount -= uint192(vestedAmount);\\r\\n        vest.lastClaim = uint64(block.timestamp);\\r\\n\\r\\n        userVest[member] = vest;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to transfer all or part of a vest from one address to another (internal, virtual function)\\r\\n     *\\r\\n     * @dev Only accessible via the transferVest function.\\r\\n     * This is a virtual function, it can be overriden by the inheriting vesting contracts.\\r\\n     *\\r\\n     * @param members members list - \\\"prev\\\" for member to transfer from, \\\"next\\\" for member to transfer to\\r\\n     * @param transferAmount amount of SPOOL token to transfer\\r\\n     */\\r\\n    function _transferVest(Member memory members, uint256 transferAmount) \\r\\n        internal \\r\\n        virtual\\r\\n    {\\r\\n        userVest[members.prev].amount -= uint192(transferAmount);\\r\\n        userVest[members.next].amount += uint192(transferAmount); \\r\\n    }\\r\\n\\r\\n    /* ========== PRIVATE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the amount a user's vest is due. \\r\\n     * \\r\\n     * @dev\\r\\n     * To calculate, the following formula is utilized:\\r\\n     *\\r\\n     * - (remainingAmount * timeElapsed) / timeUntilEnd\\r\\n     *\\r\\n     * Each variable is described as follows:\\r\\n     *\\r\\n     * - remainingAmount (amount): Vesting amount remaining. Each claim subtracts from\\r\\n     * this amount to ensure calculations are properly conducted.\\r\\n     *\\r\\n     * - timeElapsed (block.timestamp.sub(lastClaim)): Time that has elapsed since the\\r\\n     * last claim.\\r\\n     *\\r\\n     * - timeUntilEnd (end.sub(lastClaim)): Time remaining for the particular vesting\\r\\n     * member's total duration.\\r\\n     *\\r\\n     * Vesting calculations are relative and always update the last\\r\\n     * claim timestamp as well as remaining amount whenever they\\r\\n     * are claimed.\\r\\n     * \\r\\n     * @param amount SPOOL token amount to claim\\r\\n     * @param lastClaim timestamp of the last time the user claimed\\r\\n     */\\r\\n    function _getClaim(uint256 amount, uint256 lastClaim)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _end = end;\\r\\n\\r\\n        if (block.timestamp >= _end) return amount;\\r\\n        if (lastClaim == 0) lastClaim = start;\\r\\n\\r\\n        return (amount * (block.timestamp - lastClaim)) / (_end - lastClaim);\\r\\n    }\\r\\n\\r\\n    /** @notice check if the vesting has or has not started\\r\\n     * \\r\\n     * @dev uses the \\\"start\\\" storage variable to check if the vesting has started or not (ie. if begin() has been successfully called)\\r\\n     *\\r\\n     * @param check boolean to validate if the vesting has or has not started\\r\\n     */\\r\\n    function _checkStarted(bool check) private view {                                  \\r\\n        require(\\r\\n            check ? start != 0 \\r\\n                   : start == 0,\\r\\n            check ? \\\"BaseVesting::_checkStarted: Vesting hasn't started yet\\\" \\r\\n                   : \\\"BaseVesting::_checkStarted: Vesting has already started\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* ========== HELPERS ========== */\\r\\n    \\r\\n    /** \\r\\n     * @notice get absolute value of an int192 value\\r\\n     *\\r\\n     * @param a signed integer to get absolute value of\\r\\n     *\\r\\n     * @return absolute value of input\\r\\n     */\\r\\n    function abs(int192 a) internal pure returns (uint192) {\\r\\n        return uint192(a < 0 ? -a : a);\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice hasStarted modifier\\r\\n     *\\r\\n     * @dev \\r\\n     * \\r\\n     * calls _checkStarted private function and continues execution\\r\\n     *\\r\\n     * @param check boolean to validate if the vesting has or has not started\\r\\n     */\\r\\n    modifier hasStarted(bool check) {\\r\\n        _checkStarted(check);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/vesting/SpoolPreDAOVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./BaseVesting.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/vesting/ISpoolPreDAOVesting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the {ISpoolPreDAOVesting} interface.\\r\\n *\\r\\n * @dev This contract inherits BaseVesting, this is where most of the functionality is located.\\r\\n *      It overrides some functions where necessary.\\r\\n */\\r\\ncontract SpoolPreDAOVesting is BaseVesting, ISpoolPreDAOVesting {\\r\\n    IERC20Mintable public immutable voSPOOL;\\r\\n\\r\\n    /**\\r\\n     * @notice sets the contracts initial values\\r\\n     *\\r\\n     * @param spoolOwnable the spool owner contract that owns this contract\\r\\n     * @param _voSPOOL Voting SPOOL token contract\\r\\n     * @param _spool SPOOL token contract address, the token that is being vested.\\r\\n     * @param _vestingDuration the length of time (in seconds) the vesting is to last for.\\r\\n     */\\r\\n    constructor(ISpoolOwner spoolOwnable, IERC20Mintable _voSPOOL, IERC20 _spool, uint256 _vestingDuration)        \\r\\n        BaseVesting(spoolOwnable, _spool, _vestingDuration)\\r\\n    {\\r\\n        voSPOOL = _voSPOOL;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows vests to be set. \\r\\n     *\\r\\n     * @dev\\r\\n     * internally calls _setVests function on BaseVesting.                        \\r\\n     *                                                                            \\r\\n     * Can be called an arbitrary number of times before `begin()` is called \\r\\n     * on the base contract.                                               \\r\\n     * \\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the owner\\r\\n     *\\r\\n     * @param members array of addresses to set vesting for\\r\\n     * @param amounts array of SPOOL token vesting amounts to to be set for each address\\r\\n     */\\r\\n    function setVests(\\r\\n        address[] calldata members,\\r\\n        uint192[] calldata amounts\\r\\n    ) external onlyOwner {\\r\\n\\r\\n        _setVests(members, amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice allows owner to set the vesting amount for a member (internal, override function)\\r\\n     *\\r\\n     * @dev overrides BaseVesting _setVest function. mints \\\"amount\\\" voting SPOOL tokens to user \\r\\n     * before calling _setVest in BaseVesting.\\r\\n     *\\r\\n     * If user has a previous vest amount set, we need to burn that amount of voSPOOL also. Then \\r\\n     * the current vest amount is minted in voSPOOL.\\r\\n     *\\r\\n     * @param user the user to set vesting for\\r\\n     * @param amount the SPOOL token vesting amount to be set for this user\\r\\n     *\\r\\n     */\\r\\n    function _setVest(address user, uint192 amount)\\r\\n        internal\\r\\n        override\\r\\n        returns (int192)\\r\\n    {\\r\\n        uint192 previousAmount = userVest[user].amount;\\r\\n        if(previousAmount > 0) \\r\\n        { \\r\\n            voSPOOL.burn(user, previousAmount);\\r\\n        }\\r\\n        voSPOOL.mint(user, amount);\\r\\n        return BaseVesting._setVest(user, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to claim their pending vesting amount (internal, override function)\\r\\n     *\\r\\n     * @dev overrides BaseVesting _claimVest function. burns \\\"amount\\\" voting SPOOL tokens from user \\r\\n     * before calling _claimVest in BaseVesting.\\r\\n     *\\r\\n     * @param member address to claim for\\r\\n     * @param vestedAmount amount to claim\\r\\n     * @param vest vesting info for \\\"member\\\"\\r\\n     */\\r\\n    function _claimVest(address member, uint256 vestedAmount, Vest memory vest)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        voSPOOL.burn(member, vestedAmount);\\r\\n        BaseVesting._claimVest(member, vestedAmount, vest);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to transfer all or part of a vest from one address to another (internal, override function)\\r\\n     *\\r\\n     * @dev \\r\\n     * overrides BaseVesting _transferVest function. burns \\\"transferAmount\\\" voting SPOOL tokens from previous user, \\r\\n     * mints same amount to next user, and calls  _transferVest in BaseVesting.\\r\\n     *\\r\\n     * @param members members list - \\\"prev\\\" for member to transfer from, \\\"next\\\" for member to transfer to\\r\\n     * @param transferAmount amount of SPOOL token to transfer\\r\\n     */\\r\\n    function _transferVest(Member memory members, uint256 transferAmount) \\r\\n        internal \\r\\n        override\\r\\n    {\\r\\n        voSPOOL.burn(members.prev, transferAmount);\\r\\n        voSPOOL.mint(members.next, transferAmount);\\r\\n        BaseVesting._transferVest(members, transferAmount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISpoolOwner\",\"name\":\"spoolOwnable\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Mintable\",\"name\":\"_voSPOOL\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_spool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"indexed\":true,\"internalType\":\"struct Member\",\"name\":\"members\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"VestingInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"begin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint192[]\",\"name\":\"amounts\",\"type\":\"uint192[]\"}],\"name\":\"setVests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spoolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"internalType\":\"struct Member\",\"name\":\"members\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"transferVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVest\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"lastClaim\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voSPOOL\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpoolPreDAOVesting", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000004f03f70a99e5c3b49d733ddd7458f80fa9b5a5b500000000000000000000000014199a3ceeeade52220425918ad2a2cc4b5cb16900000000000000000000000040803cea2b2a32bda1be61d3604af6a814e709760000000000000000000000000000000000000000000000000000000003c30a7c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}