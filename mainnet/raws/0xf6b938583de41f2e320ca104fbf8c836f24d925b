{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n * @title TrolltownElixirs\r\n * @author AhmYieTroll\r\n * @dev Used for Ethereum projects compatible with OpenSea\r\n */\r\npragma solidity ^0.8.0;\r\npragma solidity ^0.8.0;\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n}\r\npragma solidity ^0.8.1;\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        return account.code.length > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\npragma solidity ^0.8.0;\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\npragma solidity ^0.8.0;\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // back. This is the compiler's defense against contract upgrades and\r\n\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ncontract ERC721A is\r\n    Context,\r\n    ERC165,\r\n    IERC721,\r\n    IERC721Metadata,\r\n    IERC721Enumerable\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n        bool burned;\r\n    }\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n    uint256 private currentIndex = 0;\r\n    uint256 internal immutable collectionSize;\r\n    uint256 internal immutable maxBatchSize;\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => TokenOwnership) private _ownerships;\r\n    mapping(address => AddressData) private _addressData;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_,\r\n        uint256 collectionSize_\r\n    ) {\r\n        require(collectionSize_ > 0,\"ERC721A: collection must have a nonzero supply\");\r\n        require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxBatchSize = maxBatchSize_;\r\n        collectionSize = collectionSize_;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return currentIndex;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(owner != address(0), \"ERC721A: number minted query for the zero address\");\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\r\n        uint256 lowestTokenToCheck;\r\n        if (tokenId >= maxBatchSize) {\r\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\r\n        }\r\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (ownership.addr != address(0)) {\r\n                return ownership;\r\n            }\r\n        }\r\n        revert(\"ERC721A: unable to determine the owner of token\");\r\n    }\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721A: approval to current owner\");\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \"ERC721A: approve caller is not owner nor approved for all\");\r\n        _approve(to, tokenId, owner);\r\n    }\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from, address to, uint256 tokenId) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721A: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, \"\");\r\n    }\r\n    function _safeMint(address to, uint256 quantity, bytes memory _data) internal {\r\n        uint256 startTokenId = currentIndex;\r\n        require(to != address(0), \"ERC721A: mint to the zero address\");\r\n        require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n        _addressData[to].balance += uint128(quantity);\r\n        _addressData[to].numberMinted += uint128(quantity);\r\n        _ownerships[startTokenId].addr = to;\r\n        _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n        uint256 updatedIndex = startTokenId;\r\n        for (uint256 i = 0; i < quantity; i++) {\r\n            emit Transfer(address(0), to, updatedIndex);\r\n            require(_checkOnERC721Received(address(0), to, updatedIndex, _data), \"ERC721A: transfer to non ERC721Receiver implementer\");\r\n            updatedIndex++;\r\n        }\r\n        currentIndex = updatedIndex;\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n    function _transfer(address from, address to, uint256 tokenId) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n        require(isApprovedOrOwner, \"ERC721A: transfer caller is not owner nor approved\");\r\n        require(prevOwnership.addr == from, \"ERC721A: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n        _ownerships[tokenId].addr = to;\r\n        _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (_ownerships[nextTokenId].addr == address(0)) {\r\n            if (_exists(nextTokenId)) {\r\n                _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n            }\r\n        }\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n    function _approve(address to, uint256 tokenId, address owner) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n    uint256 public nextOwnerToExplicitlySet = 0;\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n        require(quantity > 0, \"quantity must be nonzero\");\r\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n        if (endIndex > collectionSize - 1) {\r\n            endIndex = collectionSize - 1;\r\n        }\r\n        require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n            if (_ownerships[i].addr == address(0)) {\r\n                TokenOwnership memory ownership = ownershipOf(i);\r\n                _ownerships[i].addr = ownership.addr;\r\n                _ownerships[i].startTimestamp = ownership.startTimestamp;\r\n            }\r\n        }\r\n        nextOwnerToExplicitlySet = endIndex + 1;\r\n    }\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\r\n    function _afterTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal virtual {}\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n        address from = prevOwnership.addr;\r\n        bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());\r\n        require(isApprovedOrOwner, \"NOT_OWNER_NOR_APPROVED\");\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n        _approve(address(0), tokenId, from);\r\n        AddressData storage addressData = _addressData[from];\r\n        addressData.balance -= 1;\r\n        _ownerships[tokenId].burned = true;\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n    }\r\n\r\n    function _burnFromContract(uint256 tokenId) internal virtual {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n        address from = prevOwnership.addr;\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n        _approve(address(0), tokenId, from);\r\n        AddressData storage addressData = _addressData[from];\r\n        addressData.balance -= 1;\r\n        _ownerships[tokenId].burned = true;\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ncontract TrolltownElixirs is Ownable, ERC721A, ReentrancyGuard {\r\n\r\n    string public prefix = \"\";\r\n    bool public claim = false;\r\n    bool public makeElixir = false;\r\n    uint256 public reserved = 1000;\r\n    uint256 public maxClaims = 10000;\r\n    uint256 public maxToken = reserved + maxClaims;\r\n    string private _baseTokenURI = \"http://207.180.200.146:1111/metadata/\";\r\n    mapping(address => bool) public isClaimed;\r\n    mapping(uint256 => bool) public isSuperElixir;\r\n    bytes32 public merkleRoots;\r\n    address private mutationContract;\r\n    event superElixir(uint256 _elixir);\r\n    constructor(string memory _NAME, string memory _SYMBOL)\r\n        ERC721A(_NAME, _SYMBOL, 1000, maxToken)\r\n    {}\r\n\r\n    modifier callerIsUser() {\r\n        require(tx.origin == msg.sender, \"The caller is another contract\");\r\n        _;\r\n    }\r\n\r\n    function numberMinted(address owner) public view returns (uint256) {\r\n        return _numberMinted(owner);\r\n    }\r\n\r\n    function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {\r\n        return ownershipOf(tokenId);\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        string memory _tokenURI = super.tokenURI(tokenId);\r\n        return bytes(_tokenURI).length > 0 ? string(abi.encodePacked(_tokenURI, prefix)): \"\";\r\n    }\r\n\r\n    function _leafFromAddressAndNumTokens(address _a, uint256 _n) private pure returns (bytes32){\r\n        return keccak256(abi.encodePacked(_a, _n));\r\n    }\r\n    \r\n    function _checkProof(bytes32[] calldata proof, bytes32 _hash) private view returns (bool) {\r\n        bytes32 el;\r\n        bytes32 h = _hash;\r\n        for (uint256 i = 0; i < proof.length; i += 1) {\r\n            el = proof[i];\r\n            if (h < el) {\r\n                h = keccak256(abi.encodePacked(h, el));\r\n            } else {\r\n                h = keccak256(abi.encodePacked(el, h));\r\n            }\r\n        }\r\n        return h == merkleRoots;\r\n    }\r\n\r\n    function claimDrop(bytes32[] calldata _proof, address _who, uint256 _quantity) external {\r\n        require(claim, \"AIRDROP_NOT_YET_STARTED\");\r\n        require(isClaimed[_who] != true, \"CLAIMED_ALREADY\");\r\n        require(_quantity > 0, \"INVALID_QUANTITY\");\r\n        require(_checkProof(_proof, _leafFromAddressAndNumTokens(_who, _quantity)), \"WRONG_PROOF\");\r\n        isClaimed[_who] = true;\r\n        _safeMint(_who, _quantity);\r\n    }\r\n\r\n    function makeSuperElixir(uint256[] memory tokenIds) external {\r\n        require(makeElixir, \"NOT_YET_STARTED\");\r\n        require(tokenIds.length == 3, \"THREE_TIER_1_REQUIRED_TO_MAKE_SUPER_ELIXIR\");\r\n        for( uint i = 0; i < tokenIds.length - 1; i++ ){\r\n            require(!isSuperElixir[tokenIds[i]], \"CANNOT_BURN_SUPER_ELIXIR\");\r\n            require(ownerOf(tokenIds[i]) == msg.sender, \"YOU_DONT_OWN_THIS_TOKEN\");\r\n            _burn(tokenIds[i]);\r\n        }\r\n        uint256 eID = tokenIds[tokenIds.length - 1];\r\n        if(ownerOf(eID) == msg.sender){\r\n            isSuperElixir[eID] = true;\r\n            emit superElixir(eID);\r\n        }else{\r\n            revert(\"NO_SWEEPING!\");\r\n        }\r\n    }\r\n\r\n    function ownerMint(address _address, uint256 quantity) external onlyOwner {\r\n        require(totalSupply() + quantity <= maxToken, \"NOT_ENOUGH_SUPPLY_TO_GIVEAWAY_DESIRED_AMOUNT\");\r\n        _safeMint(_address, quantity);\r\n    }\r\n\r\n    function burnElixirForMutate(uint256 _tokenId) external {\r\n        require(msg.sender == mutationContract);\r\n        _burnFromContract(_tokenId);\r\n    }\r\n\r\n    function setMutationContract(address _address) external onlyOwner {\r\n        mutationContract = _address;\r\n    }\r\n\r\n    function setAirdropRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoots = _merkleRoot;\r\n    }\r\n\r\n    function flipClaim() external onlyOwner {\r\n        claim = !claim;\r\n    }\r\n\r\n    function flipMakeElixir() external onlyOwner {\r\n        makeElixir = !makeElixir;\r\n    }\r\n\r\n    function setBaseURI(string calldata baseURI) external onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n    }\r\n\r\n    function setPrefix(string calldata _prefix) external onlyOwner {\r\n        prefix = _prefix;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_NAME\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_SYMBOL\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_elixir\",\"type\":\"uint256\"}],\"name\":\"superElixir\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnElixirForMutate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claimDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMakeElixir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isSuperElixir\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeElixir\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"makeSuperElixir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setAirdropRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMutationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"}],\"name\":\"setPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrolltownElixirs", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001c54726f6c6c746f776e204d75746174696f6e616c20456c697869727300000000000000000000000000000000000000000000000000000000000000000000000454544d4500000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06992c4be1965ee5f355b0265a1bbb1450c0caa02d40b04a2dd3989c7224341f"}]}