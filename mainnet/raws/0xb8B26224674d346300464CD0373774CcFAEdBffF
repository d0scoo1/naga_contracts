{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\n\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Context\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Counters\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/IAccessControl\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/IERC721Receiver\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/ReentrancyGuard\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Strings\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/ERC165\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/IERC721\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Pausable\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/AccessControl\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/Escrow\n\n/**\n * @title Escrow\n * @dev Base escrow contract, holds funds designated for a payee until they\n * withdraw them.\n *\n * Intended usage: This contract (and derived escrow contracts) should be a\n * standalone contract, that only interacts with the contract that instantiated\n * it. That way, it is guaranteed that all Ether will be handled according to\n * the `Escrow` rules, and there is no need to check for payable functions or\n * transfers in the inheritance tree. The contract that uses the escrow as its\n * payment method should be its owner, and provide public methods redirecting\n * to the escrow's deposit and withdraw.\n */\ncontract Escrow is Ownable {\n    using Address for address payable;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address => uint256) private _deposits;\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param payee The destination address of the funds.\n     */\n    function deposit(address payee) public payable virtual onlyOwner {\n        uint256 amount = msg.value;\n        _deposits[payee] += amount;\n        emit Deposited(payee, amount);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee The address whose funds will be withdrawn and transferred to.\n     */\n    function withdraw(address payable payee) public virtual onlyOwner {\n        uint256 payment = _deposits[payee];\n\n        _deposits[payee] = 0;\n\n        payee.sendValue(payment);\n\n        emit Withdrawn(payee, payment);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/IERC721Enumerable\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/IERC721Metadata\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/ERC721\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/PullPayment\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn't interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity's `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n */\nabstract contract PullPayment {\n    Escrow private immutable _escrow;\n\n    constructor() {\n        _escrow = new Escrow();\n    }\n\n    /**\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee Whose payments will be withdrawn.\n     */\n    function withdrawPayments(address payable payee) public virtual {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor's address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\n        _escrow.deposit{value: amount}(dest);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/ERC721Burnable\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/ERC721Enumerable\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.2/ERC721URIStorage\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n\n// Part: RPSCollectible\n\n/// @title Scissors Contract.\n/// Contract by RpsNft_Art\n/// Contract created by: (SHA-256) d735dfa8fa552fcb02c42894edebb4652d44697d1636b6125d2367caf2ade334\nabstract contract RPSCollectible is ERC721,\n                                    ERC721URIStorage,\n                                    ERC721Enumerable,\n                                    ERC721Burnable,\n                                    Ownable,\n                                    Pausable,\n                                    AccessControl,\n                                    PullPayment,\n                                    ReentrancyGuard {\n\n    // Events Declaration    \n    event preSales(bool on_off);\n    event preSalesCompleted();\n    event baseURIChanged(string _baseURI);\n    event maxPreSalesReached(uint256 _maxPresales);\n    event maxWhiteListReached(uint256 _maxWhiteList);   \n    event maxPublicSalesReached(uint256 _maxDrop);\n\n\n    // Usings\n    using Counters for Counters.Counter;\n    using Address for address; // isContract()\n    using Strings for uint256; // toString()\n\n    // Counters\n    Counters.Counter internal _tokenIdCounter;\n    Counters.Counter internal _presalesCounter;\n\n    // Keep track of per-wallet minting amounts during pre-sales\n    mapping(address => uint256) internal _preSalesMinted;\n\n    // Keep track of per-wallet minting amounts for white lists\n    mapping(address => uint256) internal _whiteListMinted;\n\n    // WhiteList controls\n    uint256 private wlAllocatedAmount = 0;\n    bool private wlAllocated = false;\n\n    string internal _baseTokenURI;\n    uint256 internal maxDrop;// = eg. 10000;\n    uint256 internal preSalesMintPrice; // = In Weis e.g 55000000000000000;\n    uint256 internal mintPrice; // = In Weis e.g. 75000000000000000;\n    uint256 internal maxPresales; // = e.g 3000\n    uint256 internal maxPresalesNFTAmount; // = e.g 2\n    uint256 internal maxWhiteListNFTAmount; // = e.g 5\n    uint256 internal maxSalesNFTAmount; // e.g 25\n    uint256 internal maxWhiteListAmount; // e.g 150; \n\n    bool internal _inPresalesMode = false;\n    bool internal _preSalesFinished = false;\n    bool internal _publicSalesFinished = false;\n\n    // List Roles\n    bytes32 public constant PRESALES_ROLE = keccak256(\"RPS_PRESALES\");\n    bytes32 public constant WHITELIST_ROLE = keccak256(\"RPS_WHITELIST\");\n    \n    /**\n     *\n     * Constructor : Owner created\n     *\n     */ \n    constructor(string memory _name, string memory _symbol)         \n        ERC721(_name,_symbol)\n        AccessControl() { // super constructors\n         \n        require(!(msg.sender.isContract())); // dev: The address is not an account\n\n        // set initial flags as false \n\n        //  (not in presales, presales not finished and public sales not finished)\n        _inPresalesMode = false;\n        _preSalesFinished = false;\n        _publicSalesFinished = false;\n\n        // do not allow minting to begin with\n        preSalesOff();\n        pause();\n        \n        // msg.sender (owner) is the root and admin\n        _presalesCounter.reset();\n        _tokenIdCounter.reset();\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        // Init white list\n        wlAllocatedAmount = 0;\n        wlAllocated = false;\n    }\n\n    /** ---- ANYONE CAN CALL, SOME EXTERNAL ONLY ---- */\n    \n    /**\n     * Returns number of white list allocated \n     */\n    function getWlAllocatedAmount() public view returns(uint256) {\n        return(wlAllocatedAmount);\n    }\n\n    /**\n     *\n     * Returns whether or not the contract is in preSales mode \n     *\n     */ \n    function inPresales() public view returns(bool) {\n        return (_inPresalesMode && !_preSalesFinished);\n    }\n\n    /**\n     *\n     * Returns whether or not the contract is in public Sales mode\n     *\n     */\n    function inPublicSales() public view returns(bool) {\n        return _preSalesFinished && !paused() && !_publicSalesFinished;\n    }\n\n    /**\n     *\n     * Returns whether or not preSales has finished\n     *\n     */\n    function preSalesFinished() public view returns(bool) {\n        return _preSalesFinished;\n    }\n\n\n    /**\n     *\n     * Returns whether or not public Sales has finished\n     *\n     */\n    function publicSalesFinished() public view returns(bool) {\n        return _publicSalesFinished;\n    }\n\n    /**\n     *\n     * Returns whether or not an address is in the presales list\n     *\n     */\n    function AddrInPresales(address _account) public view returns (bool){\n        return _inPresalesMode && \n              !_preSalesFinished && hasRole(PRESALES_ROLE,_account) && \n              (_preSalesMinted[_account]) < maxPresalesNFTAmount;\n    }\n\n    /**\n     *\n     * Returns whether or not an address is in the white list\n     *\n     */\n    function AddrInWhiteList(address _account) public view returns (bool){\n        return hasRole(WHITELIST_ROLE,_account) && \n              (_whiteListMinted[_account]) < maxWhiteListNFTAmount;\n    }\n\n    /**\n     *\n     * Returns whether or not caller function is in the presales list\n     *\n     */\n    function AmIinPresales() external view returns (bool) {\n        return AddrInPresales(msg.sender);\n    }\n\n    /**\n     *\n     * Returns max drop \n     *\n     */\n    function getMaxDrop() external view returns(uint256) {\n        return maxDrop;\n    }\n\n    /**\n     *\n     * Returns tokenURI for the provider token id\n     *\n     */\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\n        require(_exists(tokenId)); // dev: ERC721Metadata, URI query for nonexistent token\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(),\".json\")) : \"\";\n    }     \n\n   /**\n     *\n     * Payable mint during pre-sales\n     *\n     */\n    function preSalesMint(uint256 amount) public payable onlyRole(PRESALES_ROLE) {\n        require(!(msg.sender.isContract())); // dev: The address is not an account\n        require(totalSupply() + amount <= maxPresales); // dev: Pre-sales SOLD-OUT\n        require(!_preSalesFinished || msg.sender == owner()); // dev: Pre-sales has already finished\n        require(_inPresalesMode || msg.sender == owner()); // dev: Pre-sales has not started yet\n        require(!paused() || msg.sender == owner()); // dev: Minting is paused        \n        require(msg.value == preSalesMintPrice*amount || msg.sender == owner()); // dev: Wrong price provided\n        require(hasRole(PRESALES_ROLE, msg.sender) || msg.sender == owner()); // dev: Wallet not elligible\n        require(amount <= maxPresalesNFTAmount); // dev: Cannot mint the specified amount in pre-sales\n        require((_preSalesMinted[msg.sender] + amount) <= maxPresalesNFTAmount); // dev: Total pre-sales amount exceeded for wallet\n\n        // Mint the amount of tokens!\n        _coreMint(amount);\n\n        // this was the last pre-sales minting based on the max presales allowed\n        if(totalSupply() == maxPresales) {\n            _preSalesFinished = true;\n            _inPresalesMode = false;\n\n            emit maxPreSalesReached(maxPresales);\n        }\n\n        // Keep track of wallet's pre-mint amount\n        _preSalesMinted[msg.sender] += amount;\n    }\n\n    /**\n     * To allow owners to reserve some collectibles at the begginning\n     */\n    function initialMint(uint256 amount) external onlyOwner {                        \n        require(msg.sender == owner()); // dev: not owner              \n        require(!(msg.sender.isContract())); // dev: The address is not an account                                \n        require(!wlAllocated); // dev: initial amount already allocated        \n        require((wlAllocatedAmount + amount) <= maxWhiteListAmount); // dev: the initial amount is exceeded\n        require((totalSupply() + amount) <= maxDrop); // dev: SOLD OUT!\n        \n        // Mint the amount!\n        _coreMint(amount);\n\n        wlAllocatedAmount += amount;\n        \n        if(wlAllocatedAmount == maxWhiteListAmount) {\n            wlAllocated = true;\n            \n            emit maxWhiteListReached(maxWhiteListAmount);\n        }\n    }\n\n    /**\n     *\n     * Not Payable mint\n     *\n     */\n    function whiteListMint(uint256 amount) public onlyRole(WHITELIST_ROLE) {\n        require(!wlAllocated); // dev: initial amount already allocated\n        require(!(msg.sender.isContract())); // dev: The address is not an account\n        require((wlAllocatedAmount + amount) <= maxWhiteListAmount); // dev: the initial amount is exceeded                        \n        require(hasRole(WHITELIST_ROLE, msg.sender) || msg.sender == owner()); // dev: Wallet not elligible        \n        require(totalSupply() + amount <= maxDrop); // dev: SOLD OUT!\n        require((_whiteListMinted[msg.sender] + amount) <= maxWhiteListNFTAmount); // dev: Total amount exceeded for white-listed wallet\n\n        // Mint the amount of tokens!\n        _coreMint(amount);\n\n        wlAllocatedAmount += amount;\n        \n        if(wlAllocatedAmount >= maxWhiteListAmount) {\n            wlAllocated = true;\n            \n            emit maxWhiteListReached(maxWhiteListAmount);\n        }\n        \n        // Keep track of wallet's white list amount\n        _whiteListMinted[msg.sender] += amount;\n    }\n\n    /**\n     *\n     * Payable Public Sales mint version\n     *\n     */\n    function mint(uint256 amount) public payable {\n        require(!(msg.sender.isContract())); // dev: The address is not an account\n        require(_preSalesFinished || msg.sender == owner()); // dev: Pre-sales has not finished yet\n        require(!paused() || msg.sender == owner()); // dev: Minting is paused        \n        require(msg.value == mintPrice*amount || msg.sender == owner()); // dev: Wrong price provided\n        require(totalSupply() + amount <= maxDrop); // dev: SOLD OUT!\n        require(amount <= maxSalesNFTAmount); // dev: Specified amount exceeds per-wallet maximum mint\n\n        // Mint the amount!\n        _coreMint(amount);\n\n        // this was the last pre-sales minting based on the max presales allowed\n        if(totalSupply() == maxDrop) {\n           _publicSalesFinished = true;\n           emit maxPublicSalesReached(maxDrop);\n        }\n\n        // Reserve in TH as per Roadmap\n        _accumulateTH();\n    }\n\n    /** ---------- ONLY OWNER CAN CALL EXTERNALLY ------------ */\n    \n    /**\n     *\n     *  Change baseURI\n     * \n     */ \n    function setBaseURI(string memory baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n        emit baseURIChanged(_baseTokenURI);\n    }    \n\n    /**\n     *\n     * External function to allow to provide a list of addresses to be white listed \n     * \n     */\n    function addToWhiteList(address[] memory whiteListAddr) external onlyOwner {        \n        uint256 numAddrs = whiteListAddr.length;\n\n        for(uint256 i=0;i<numAddrs;i++) {\n            addToWhiteList(whiteListAddr[i]);\n        }\n    }\n\n    /**\n     *\n     * External function to allow to provide a list of addresses to be white listed \n     * fo presales\n     *\n     */\n    function addToPresalesList(address[] memory presalesAddr) external onlyOwner {\n        require(!_preSalesFinished); // dev: Pre-sales period has already finished\n        uint256 numAddrs = presalesAddr.length;\n\n        for(uint256 i=0;i<numAddrs;i++) {\n            addToPresalesList(presalesAddr[i]);\n        }\n    }\n\n\n    /** ---------- ONLY OWNER CAN CALL, EVERYWHERE ------------ */\n\n    /**\n     *\n     * Allow to pause minting\n     *\n     */\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    /**\n     *\n     * Allow to unpause minting\n     * \n     */\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    /**\n     *\n     * Allow to enable or disable pre-sales\n     *\n     */\n    function preSalesOn() public onlyOwner {\n        _inPresalesMode = true;\n        _preSalesFinished = false;\n        emit preSales(_inPresalesMode);\n    }\n\n    /**\n     * \n     * Stop presales\n     *\n     */\n    function preSalesOff() public onlyOwner {\n        _inPresalesMode = false;\n        emit preSales(_inPresalesMode);\n    }\n\n    /**\n     *\n     * Complete preSales\n     *\n     */\n    function preSalesComplete() public onlyOwner {\n        _preSalesFinished = true;\n        preSalesOff();\n        pause();\n\n        emit preSalesCompleted();\n    }\n\n    /** ------- INTERNAL CALLS ONLY, SOME ONLY BY OWNER -------- */\n    \n    /**\n     *\n     *  Returns baseURI for tokens\n     * \n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     *\n     * Internal: adds the individual provided wallet to the white list list\n     *\n     */\n    function addToWhiteList(address whiteListAddr) internal onlyOwner {\n        require(!whiteListAddr.isContract()); // dev: The address is not an account\n        require(!hasRole(WHITELIST_ROLE, whiteListAddr)); // dev: Already in list\n                \n        grantRole(WHITELIST_ROLE,whiteListAddr);        \n    }\n \n    /**\n     *\n     * Internal: adds the individual provided wallet to the presales list\n     *\n     */\n    function addToPresalesList(address presalesAddr) internal onlyOwner {\n        require(!presalesAddr.isContract()); // dev: The address is not an account\n        require(_presalesCounter.current() < maxPresales); // dev: Maximum number of presales reached\n        require(!hasRole(PRESALES_ROLE, presalesAddr)); // dev: Already in list\n        require(!_preSalesFinished);    // dev: Pre-sales period has already finished\n        \n        grantRole(PRESALES_ROLE,presalesAddr);\n        _presalesCounter.increment();\n    }\n \n    /**\n     *\n     * Internal mint function \n     *\n     */\n    function _coreMint(uint256 amount) internal {\n        uint256 tokenId;\n\n        for(uint256 i = 0; i < amount; i++) {\n            // Generate new tokenId\n            _tokenIdCounter.increment();\n            tokenId = _tokenIdCounter.current();    \n            \n            // mint the tokenId for caller \n            _safeMint(msg.sender, tokenId);\n        }\n    }\n\n    /** ------- OVERRIDES NEEDED BY SOLIDITY  -------- */\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        whenNotPaused\n        override(ERC721, ERC721Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n    \n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        require(maxDrop>0); // dev: cannot burn more\n        maxDrop = maxDrop-1;\n        super._burn(tokenId);\n    }\n\n    /** ------- VIRTUAL FUNCTIONS  -------- */\n    function emitMintEvent(uint256 number) internal virtual;\n    function _accumulateTH() internal virtual;\n\n    /** ------- HELPER FUNCTIONS DURING UNIT TEST, ONLY BY OWNER -------- */\n    function setMaxDrop(uint256 _maxPresales,uint256 _maxDrop,uint256 _maxWhiteListAmount) public onlyOwner {\n        require(_maxWhiteListAmount <= _maxDrop); // dev: max presales cannot be greater than maxDrop\n        require((_maxWhiteListAmount + _maxPresales) <= _maxDrop); // dev: whitelist and presales sum more than maxdrop\n        require(_maxDrop >= totalSupply()); // dev: cannot set maxDrop below already supply\n        require(_maxPresales <= _maxDrop); // dev: max presales cannot be greater than maxDrop\n                \n        maxDrop = _maxDrop;\n        maxPresales = _maxPresales;\n        maxWhiteListAmount = _maxWhiteListAmount;\n\n        _accumulateTH();\n    }\n\n    function setMaxDrop(uint256 _maxDrop) public onlyOwner {\n        require(_maxDrop >= totalSupply()); // dev: cannot set maxDrop below already supply\n\n        maxDrop = _maxDrop;\n        _accumulateTH();\n    }\n\n    function setMaxSalesNFTAmount(uint256 _maxSalesNFTAmount) public onlyOwner {\n        maxSalesNFTAmount = _maxSalesNFTAmount;\n    }\n\n    function setMaxWhiteListAmount(uint256 _maxWhiteListAmount) public onlyOwner {\n        maxWhiteListAmount = _maxWhiteListAmount;\n    }\n\n    /**\n     * Prizes related\n     */\n\n    // To avoid reentrancy\n    function withdrawPayments(address payable payee) public override nonReentrant whenNotPaused {\n        super.withdrawPayments(payee);\n    }\n\n    function sendGiveAway(uint256 _giveAwayId, address[] memory _winners) external onlyOwner virtual whenNotPaused {        \n    }\n        \n    /** Semi-random function to allow selection of winner for giveaways*/\n    function rand(uint256 div) public view returns(uint256) {\n \n       uint256 seed = uint256(keccak256(abi.encodePacked(\n            block.timestamp + block.difficulty +\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\n            block.gaslimit + \n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\n            block.number\n        )));\n\n        return (seed - ((seed / div) * div));\n    }\n\n}\n\n// File: Scissors.sol\n\n//                                                                                \n//                                     .,,,,,,,,,,,,,,,,,,,,,                     \n//                    ,,,,,,,,,,,,,,,,,,,,.                .,,,,                  \n//                  ,,,,                                      ,,,                 \n//                ,,,,      (((((       ,    ,     ((    ((    ,,                 \n//               ,,,      ((((/((((    ,,,,,,,,   ((((  (((    ,,,\n//                ,,.    ((((   (((.     ,,,,     ,((((((     ,,,              \n//                ,,.    ((((   (((.    ,,,,,,     ,((((((     ,,,                \n//                ,,,     (((((((((   .,,,  ,,,      ((((      ,,,                \n//                ,,,                                           ,,,               \n//                .,,    @@@@@@@@@    @@@@@@@@@    @@@@@@@@     ,,,               \n//                 ,,,   @@      @@   @@      @@  @@            ,,,\n//                 ,,,   @@      @    @@      @@    @@@         ,,,   \n//                 ,,,   @@@@@@@@@    @@@@@@@@@       @@@@@     ,,,\n//                 ,,,   @@      @    @@                @@@     ,,,              \n//                 ,,,   @@      @@   @@          @@@@@@@@@    ,,,.               \n//                  ,,,                                      ,,,,                 \n//                   ,,,,.               ,,,,,,,,,,,,,,,,,,,,,,                   \n//                      ,,,,,,,,,,,,,,,,,,,,.                                     \n//                                                                                \n//                                                                                \n\n/// @title Scissors Contract.\n/// Contract by RpsNft_Art\n/// Contract created by: (SHA-256) d735dfa8fa552fcb02c42894edebb4652d44697d1636b6125d2367caf2ade334\ncontract Scissors is RPSCollectible {\n   \n    // List of public ETH addresses of RPSNft_Art cofounders and other related participants\n    address private NGOAddress            = 0x633b7218644b83D57d90e7299039ebAb19698e9C; // UkraineDAO \n    address private ScissorsSisterAddress = 0x92dd828AF04277f1ae6A4b7B25b5fFfc69f3A677;\n    address private RockbiosaAddress      = 0x521A4b1A8A968A232ca2BeCfF66713b209Bca2d7;\n    address private PaperJamAddress       = 0x57032e15279f520cb98365138533793dfA32d214;\n    address private RoseLizardAddress     = 0x502f9198E63D1EEa55C8Bd62e134d8c04CB66B73;\n    address private SpockAddress          = 0xBF2117339eD7A9039D9B996a61876150DDcc6b37;\n    address private MarketingAddress      = 0x09870346A435E6Eb14887742824BBC7dAd066776;\n    address private FirstPrizeAddress     = 0xD0f5C2aD5abA241A18D8E95e761982D911Ed1B20;    \n    address private DreamOnAddress        = 0xFfFaBC56a346929f925ddF2dEEc86332CC1Ce437;\n\n    // Token Ids that will determine the VIPs (using ownerof)\n    uint256 [] private VIPTokens;\n    bool private VIPTokensSet=false;\n\n    // Events for NFT\n    event CreateScissors(uint256 indexed id);\n    event ReleaseTH(uint256 indexed _pct, uint256 _amount);\n    event AmountWithdrawn(address _target, uint256 _amount);\n \n    // Events for Prizes\n    event FirstGiveAwayCharged();\n    event SecondGiveAwayCharged(address[]);\n    event ThirdGiveAwayCharged(string _teamName,address[]);    \n\n    // Number of MAX_VIP_TOKENS\n    uint256 public constant MAX_VIP_TOKENS = 20;\n\n    // ETHs to acummulate in Treasure Hunt account\n    uint256 public constant TH_POOL =            50000000000000000000; // 50 ETH\n    uint256 public constant TH_FIRST =            5000000000000000000; // 5 ETH\n    uint256 public constant TH_SECOND =          10000000000000000000; // 10 ETH\n    uint256 public constant TH_THIRD =           15000000000000000000; // 15 ETH\n    uint256 public constant TH_FOURTH =          20000000000000000000; // 20 ETH\n\n    // PCT distributions\n    uint256 public constant COFOUNDER_PCT   = 16; // 16 PCT\n    uint256 public constant FIVE_PCT        = 5;  // 5 PCT\n\n    // Prizes    \n    uint256 public constant TH_PRIZE_PER_WALLET = 5000000000000000000; // 5 ETH\n\n    uint256 public constant FIRST_PRIZE = 1;\n    uint256 public constant SECOND_PRIZE = 2;\n    uint256 public constant THIRD_PRIZE = 3;\n\n    uint256 public constant FIRST_PRIZE_TOTAL_ETH_AMOUNT =  4000000000000000000;  // 4 ETH\n    uint256 public constant FIRST_PRIZE_FIRST_ETH_AMOUNT =  2500000000000000000;  // 2.5 ETH\n    uint256 public constant FIRST_PRIZE_SECOND_ETH_AMOUNT = 1000000000000000000;  // 1 ETH\n    uint256 public constant FIRST_PRIZE_THIRD_ETH_AMOUNT =   500000000000000000;  // 0.5 ETH\n\n    uint256 public constant SECOND_PRIZE_TOTAL_ETH_AMOUNT =  5000000000000000000;  // 5 ETH\n    uint256 public constant SECOND_PRIZE_PER_WALLET_ETH_AMOUNT = 250000000000000000;  // 0.25 ETH\n   \n    uint256 public constant TH_SECOND_PRIZE_MAX_WINNERS = 20;\n    uint256 public constant TH_THIRD_PRIZE_MAX_WINNERS = 10;\n\n    // track if prizes have been released\n    bool public first_prize_released = false;\n    bool public second_prize_released = false;\n    bool public third_prize_released = false;\n        \n    // Store the TH Secret - Winner will provide the team 50 ETH\n    uint256 private accumulatedTHPrize = 0;\n    bytes32 private th_secret = 0x0;\n    bool private th_secret_set = false;\n\n    // Usings\n    using Address for address;\n    \n    // Keep track of percentages achieved and accumulation for TH accomplished \n    bool _allocatedTH_25 = false;\n    bool _allocatedTH_50 = false;\n    bool _allocatedTH_75 = false;\n    bool _allocatedTH_100 = false;\n    \n    // table for 2nd prize winners\n    address[] public second_prize_winners;\n\n    // mapping to register potential 3rd prize winners. Each array of tokenids must be \n    // max of TH_THIRD_PRIZE_MAX_WINNERS. Address index is who represents a given group and who calls \n    // payable function to register group\n    mapping(string => address[]) public third_prize_players;\n\n    // keep track of team where addresses are registered against\n    mapping(address => string) public registered_th_addresses;\n\n    string public th_team_winner = '';\n\n    /**\n     *  RPS = Rock Paper Scissors\n     *  MWSA = Mintable Scissors Art\n     */    \n    constructor() RPSCollectible(\"RPS Scissors\", \"MSA\") {\n        require(!(msg.sender.isContract())); // dev: The address is not an account\n\n        // So far, to get the metadata from web but soon replace from\n        // pre-loaded IPFS\n        \n        //_baseTokenURI = \"ipfs://QmT9Qb3tQfvKC1bnXPqGo5UnBgdU2WK4kq5SzVo4zPcWig/\";\n        maxDrop = 10000;\n        \n        VIPTokensSet = false;\n\n        preSalesMintPrice       = 55000000000000000; // 0.055 ETH\n        mintPrice               = 70000000000000000; // 0.070 ETH\n        maxPresales             = 3500; // 1750 (250+1500) Max accts, each 2 max so max 3500 NFTs\n        maxPresalesNFTAmount    = 2; // Max number of NFTs per wallet to mint during pre-sales\n        maxWhiteListNFTAmount   = 2; // Max number of NFTs per wallet to mint per whitelisted account\n        maxSalesNFTAmount       = 25; // Max number of NFTs per wallet to mint during sales (no other control per account)\n        maxWhiteListAmount      = 150; // Max allowance for whitelisted tokens (including contract owners)\n\n        accumulatedTHPrize = 0;  // to keep track of accumulated TH balance as per roadmap\n        th_secret_set = false;   // to be set when secret is resolved\n    }\n\n    /** ---- ANYONE CAN CALL, SOME EXTERNAL ONLY ---- */\n   \n    /***\n     * \n     *  Maximum balance that can be withdrawn to secure future prices\n     *\n     */\n    function maxBalanceToWithdraw() public view returns(uint256) {\n        uint256 balance = address(this).balance;\n        int256 max_balance = int256(balance);\n        \n        // Do not transfer TH pool and prizes part\n        if(!_allocatedTH_25) {\n            // 25% has not been reached so do not allow to withdraw that part \n            max_balance = max_balance - int256 (TH_FIRST) - int256(FIRST_PRIZE_TOTAL_ETH_AMOUNT);\n        } else if(!_allocatedTH_50) {\n            // 50% has not been reached so do not allow to withdraw the TH part (5+10) and 1st prize\n            max_balance = max_balance - int256 (accumulatedTHPrize + TH_SECOND) - int256(FIRST_PRIZE_TOTAL_ETH_AMOUNT);\n        } else if(!_allocatedTH_75) {\n            // 75% has not been reached so do not allow to withdraw the TH part (5+10+15) and 2nd prize\n            max_balance = max_balance - int256 (accumulatedTHPrize + TH_THIRD) - int256(SECOND_PRIZE_TOTAL_ETH_AMOUNT);\n        } else if(!_allocatedTH_100 || !third_prize_released) {\n            //    100% has not been reached, do not allow to release the TH_POOL\n            // OR \n            //    100% reached BUT TH_POOL has not been released yet, do not allow to withdraw it\n            max_balance = max_balance - int256 (TH_POOL); \n        }             \n\n        // if max_balance is positive after ensuring Treasure Hunt \n        // payments, then we can distribute \n        if(max_balance > 0) {\n            balance = uint256(max_balance);\n        } else {\n            balance = 0;\n        }\n\n        return balance;\n    }\n\n    /**\n     *\n     * Charging the contract for test purposes: it is just fine by calling this empty payable method \n     *\n     */\n    function chargeContract() external payable {\n    }\n\n    /** ---------- ONLY OWNER CAN CALL ------------ */\n\n    /**\n     *\n     * Allow to withdraw the accumulated balance among founders, always prioritizing \n     * Treasure Hunt payments\n     *\n     */\n    function withdraw() external onlyOwner {\n        require(VIPTokensSet); // dev: VIP tokens unknown\n\n        // Keep amount for prizes\n        uint256 balance = maxBalanceToWithdraw();\n\n        require(balance > 0);  // dev: nothing to withdraw after securing prizes\n\n        // Calc stakes from max to withdraw \n        // Solidity missing floats -> first mul then div\n        uint256 cofounder_stk = (balance*COFOUNDER_PCT)/100;  // Co-founders\n        uint256 VIP_stk = cofounder_stk / VIPTokens.length;   // VIPs participation\n\n        // Early investor pct, NGO steak, For future marketing campaings, Participation of Dream On\n        uint256 five_pct = (balance*FIVE_PCT)/100;     \n                      \n        // Transfer for founders\n        transferFounders(cofounder_stk);\n\n        // Transfer to VIPs\n        transferVIPs(VIP_stk);\n\n        // Transfer to believer\n        payable(SpockAddress).transfer(five_pct);\n        emit AmountWithdrawn(SpockAddress, five_pct);\n\n        // Transfer to dream_on\n        payable(DreamOnAddress).transfer(five_pct);\n        emit AmountWithdrawn(DreamOnAddress, five_pct);\n\n        // Transfer to NGO\n        payable(NGOAddress).transfer(five_pct);\n        emit AmountWithdrawn(NGOAddress, five_pct);\n\n        // Pool for new marketing investment\n        payable(MarketingAddress).transfer(five_pct);\n        emit AmountWithdrawn(MarketingAddress, five_pct);\n    }\n\n    /**\n     *\n     * Sets the tokens for cofounding benefits\n     * \n     */\n    function setVIPTokens(uint256 [] memory _tokens) external onlyOwner {\n        uint256 len = _tokens.length;\n        require(len > 0); // dev: no tokens of VIPs provided \n        require(len <= MAX_VIP_TOKENS); // dev: max number of VIPs is 20  \n\n        VIPTokens = new uint256[](_tokens.length);\n        \n        for(uint256 i=0;i < len;i++) {\n            VIPTokens[i] = _tokens[i];\n        }\n\n        VIPTokensSet = true;\n    }\n\n    /**\n     * \n     * Allow changing addresses for cofounders\n     *\n     */ \n    function setFounderAddresses(address _ss, address _rb, address _pj, address _rl,address _sp,\n                                 address _ngo, address _ds, address _do) external onlyOwner {\n        ScissorsSisterAddress = _ss;\n        RockbiosaAddress = _rb;\n        PaperJamAddress = _pj;   \n        RoseLizardAddress = _rl;\n        SpockAddress = _sp;\n        NGOAddress = _ngo;\n        MarketingAddress = _ds;\n        DreamOnAddress = _do;\n    }\n\n    /**\n     * Set First and Second Prize addresses\n     */\n    function setPrizesAccounts(address _first) external onlyOwner {\n        require(!_first.isContract()); // dev: the address is not an account\n        \n        FirstPrizeAddress = _first;        \n    }\n\n    /** ---------- INTERNAL FUNCTIONS, SOME ONLY OWNER ------------ */\n\n    /**\n     *\n     * Specific event created when Scissor mints\n     *\n     */\n    function emitMintEvent(uint256 collectibleId) internal override {\n        emit CreateScissors(collectibleId);\n    }   \n\n    /**\n     *\n     * Function that is called per every mint and allocates treasure hunt\n     * as per roadmap\n     *\n     * It also accumulates for 1st and 2nd prize\n     *\n     */\n    function _accumulateTH() internal override {\n        \n        // Everything already allocated in TH\n        if(_allocatedTH_100)\n            return;\n\n        // Transfer amount of ETHs as per roadmap to TreasureHunt account (25%)\n        if(!_allocatedTH_25 && pctReached(25) && address(this).balance>TH_FIRST) {                        \n            _allocatedTH_25 = true;\n            accumulatedTHPrize += TH_FIRST;\n            emit ReleaseTH(25, TH_FIRST);\n        }\n\n        // Transfer amount of ETHs as per roadmap to TreasureHunt account (50%)\n        if(!_allocatedTH_50 && pctReached(50) && address(this).balance>(TH_SECOND + FIRST_PRIZE_TOTAL_ETH_AMOUNT)) {            \n            payable(FirstPrizeAddress).transfer(FIRST_PRIZE_TOTAL_ETH_AMOUNT);  // Transfer 1st prize\n            \n            _allocatedTH_50 = true;\n            accumulatedTHPrize += TH_SECOND;\n            emit ReleaseTH(50, TH_SECOND);\n        }\n\n        // Transfer amount of ETHs as per roadmap to TreasureHunt account (75%)\n        if(!_allocatedTH_75 && pctReached(75) && address(this).balance>(TH_THIRD + SECOND_PRIZE_TOTAL_ETH_AMOUNT)) {            \n            // send 2nd GiveAway to random owners\n            _secondGiveAway();\n\n            _allocatedTH_75 = true;\n            \n            // Accumulate for TH\n            accumulatedTHPrize += TH_THIRD;\n            emit ReleaseTH(75, TH_THIRD);\n        }\n\n        // Transfer amount of ETHs as per roadmap to TreasureHunt account (100%)\n        if(!_allocatedTH_100 && pctReached(100) && address(this).balance>TH_FOURTH) {    \n            _allocatedTH_100 = true;\n            accumulatedTHPrize += TH_FOURTH;\n            emit ReleaseTH(100,TH_FOURTH);\n        }\n    }\n\n    /**\n     *\n     * Transfer for Founders\n     *\n     */\n    function transferFounders(uint256 _amount) internal onlyOwner {\n\n        // divide remainder among founders\n        payable(RockbiosaAddress).transfer(_amount);\n        emit AmountWithdrawn(RockbiosaAddress, _amount);\n\n        payable(PaperJamAddress).transfer(_amount);\n        emit AmountWithdrawn(PaperJamAddress, _amount);\n\n        payable(ScissorsSisterAddress).transfer(_amount);\n        emit AmountWithdrawn(ScissorsSisterAddress, _amount);\n\n        payable(RoseLizardAddress).transfer(_amount);\n        emit AmountWithdrawn(RoseLizardAddress, _amount);\n    }\n\n    /**\n     *\n     * Transfer for VIPs\n     *\n     */\n    function transferVIPs(uint256 _amount) internal onlyOwner {\n        require(VIPTokensSet); // dev: VIP tokens unknown\n        \n        // Pull payments of a 10th of the total for VIP\n        // each VIP gets a pullpayment with proportional amount\n        for(uint256 i=0;i < VIPTokens.length;i++) {\n            // get the owner of the item to get payment\n            address _ccfAddr = ownerOf(VIPTokens[i]);\n            \n            _asyncTransfer(_ccfAddr, _amount);             \n            emit AmountWithdrawn(_ccfAddr, _amount);\n        }\n    }    \n\n    /**\n     * Prizes related functions\n     */\n\n    /**\n     * Returns whether a given percentage has been reached or not\n     */\n    function pctReached(uint256 pct) public view returns(bool) {\n        bool ret = false;\n        \n        if(pct == 25) {\n            ret = (totalSupply()>=(maxDrop / 4));\n        } else if(pct == 50) {            \n            ret=(totalSupply()>=(maxDrop / 2));   \n        } else if(pct == 75) {            \n            ret=(totalSupply()>=((3*maxDrop) / 4));\n        } else if(pct == 100) {\n            ret=(totalSupply()>=(maxDrop));\n        }\n\n        return(ret);\n    } \n    \n\n    /**\n     * Sets the TH secret up\n     */\n    function setSecret(bytes32 _secret) external onlyOwner {        \n        th_secret = _secret;\n\n        th_secret_set = true;\n    }\n\n    function reservedTHPrize() external view returns(uint256) {\n        return accumulatedTHPrize;\n    }\n\n    function sendGiveAway(uint256 _giveAwayId, address[] memory _winners) public override onlyOwner {\n        \n        uint256[3] memory _prizes = [FIRST_PRIZE_FIRST_ETH_AMOUNT, // 2.5 ETH\n                                     FIRST_PRIZE_SECOND_ETH_AMOUNT, //  1 ETH\n                                     FIRST_PRIZE_THIRD_ETH_AMOUNT]; //0.5 ETH\n        \n        if(_giveAwayId == FIRST_PRIZE) {\n            // send first GiveAway            \n            _firstGiveAway(_winners,_prizes);\n        }        \n    }\n\n    // Drop 1, once we have achieved 50% of the sales during first drop, \n    // the 3 community members from community members list, who have brought more new members \n    // to the community, will be rewarded with 2.5 ETH the first 1, 1 ETH the second, and 0.5 ETH the third.\n    // Total: 4 ETH\n    function _firstGiveAway(address[] memory _winners,uint256[3] memory _prizes) private onlyOwner {\n        require(pctReached(50)); // dev: 50% not achieved yet\n        require(!first_prize_released);  // dev: 1st prize already released \n        require(_winners.length <= 3);  // dev: winners array greater than 3 \n        require(address(this).balance >= FIRST_PRIZE_TOTAL_ETH_AMOUNT); // dev: not enough balance in contract\n                \n        for(uint256 i=0;i<_winners.length;i++) {\n            if(_winners[i] != address(0x0)) {                \n                _asyncTransfer(_winners[i],_prizes[i]);  // 2.5 ETH, 1 ETH, 0.5 ETH\n                    \n                // Flag prize as released\n                first_prize_released = true;\n                emit FirstGiveAwayCharged();\n            }    \n        }                \n    }\n\n    // Drop 1, after 75% minting 5 ETH are transferred to 20 random scissors owners (pull payment, 0.5 ETH each)\n    function _secondGiveAway() internal {\n        require(!second_prize_released);  // dev: 2nd prize already released \n        require(pctReached(75)); // dev: 75% not achieved yet\n        require(address(this).balance >= SECOND_PRIZE_PER_WALLET_ETH_AMOUNT); // dev: not enough balance in contract\n        \n        uint256 top_75_pct = (3*maxDrop)/4;  // calc the 75% of the maxDrop\n\n        second_prize_winners = new address[](TH_SECOND_PRIZE_MAX_WINNERS);\n\n        // Get 20 random tokenId numbers from 0...(maxDrop*3)/4\n        uint256 div = top_75_pct / TH_SECOND_PRIZE_MAX_WINNERS;\n        uint256 seed = rand(div) + 1;\n\n        // Add payment in escrow contract\n        for(uint256 i = 0; i < TH_SECOND_PRIZE_MAX_WINNERS; i++) {\n            second_prize_winners[i] = ownerOf(seed);\n            _asyncTransfer(second_prize_winners[i],SECOND_PRIZE_PER_WALLET_ETH_AMOUNT);\n            seed = seed + div;\n        }\n\n        second_prize_released = true;\n        emit SecondGiveAwayCharged(second_prize_winners);\n    }\n    \n    /**\n     * Returns the addresses of token owners (max of TH_THIRD_PRIZE_MAX_WINNERS)\n     * internally called by owner of the tokens\n     */\n    function getAddressesFromTokens(uint256 [] memory _tokens) internal returns (address [] memory) {\n            \n            address [] memory ret = new address[](_tokens.length);\n\n            for(uint256 i=0;i<_tokens.length;i++) {\n                address _tokenOwner = ownerOf(_tokens[i]);\n                require(msg.sender == _tokenOwner); // dev: caller is not the owner\n                ret[i] = _tokenOwner;\n            }\n\n            return ret;\n    }\n        \n    /**\n     * Helper function to determine if one of the addresses is already registered in a team\n     */\n    function addressesNotRegisteredInTeamYet(address[] memory _addrs) internal returns (bool) {\n        bool ret = true;\n\n        for(uint256 i=0;i<_addrs.length;i++) {\n            if(bytes(registered_th_addresses[_addrs[i]]).length != 0) { // Address already registered in a team\n                ret = false;\n                break;\n            } \n        }\n\n        return ret;\n    }\n\n    function addAddrToTeam(address _addr, string memory _teamName, uint256 _amount) internal returns(uint256) {\n\n        registered_th_addresses[_addr] = _teamName;                                            \n        \n        return _amount + 1;\n    }\n    /**\n     * Registers a new Team for TH prize\n     * - caller of this function will provide list of tokens he/she owns to include his address \n     *   in this team and to create the team \n     * - caller of this function is free of charge (only gas) \n     * - Returns: number of shares in the team (max of TH_THIRD_PRIZE_MAX_WINNERS-1)\n     */\n    function registerTHTeam(string memory _teamName, uint256[] memory _tokensTeam) external returns(uint256) {\n        require(_tokensTeam.length < TH_THIRD_PRIZE_MAX_WINNERS); // dev: tokens list size exceed maximum to create list\n        require(third_prize_players[_teamName].length == 0); // dev: team name already taken\n        uint256 ret = 0;\n\n        // Get addresses for tokens provided to create this team\n        address [] memory _addrs = getAddressesFromTokens(_tokensTeam); // Caller must but owner of the tokens or exception\n\n        // if some address already registered in another team, exception\n        require(addressesNotRegisteredInTeamYet(_addrs));\n\n        // Flag address as registered under _teamName so it cannot be registered in another team\n        for(uint256 i=0;i<_addrs.length;i++) {\n            ret = addAddrToTeam(_addrs[i],_teamName,ret);                                                                    \n        }\n\n        // Finally, we can register the team\n        third_prize_players[_teamName] = _addrs;\n\n        return ret;\n    }\n\n    /**\n     * Caller calls this function if he/she wants to join a TH team\n     */\n    function joinTHTeam(string memory _teamName, uint256[] memory _tokensTeam) external returns(uint256) {\n        require(third_prize_players[_teamName].length != 0); // dev: team name does not exist\n        require(third_prize_players[_teamName].length != TH_THIRD_PRIZE_MAX_WINNERS); // dev: team full\n\n        uint256 ret = 0;\n\n        // Get addresses for tokens provided to create this team\n        // Caller must but owner of the tokens or exception\n        address [] memory _addrs = getAddressesFromTokens(_tokensTeam); \n\n        // if some address already registered in another team, exception\n        require(addressesNotRegisteredInTeamYet(_addrs)); // dev: caller not in a team yet\n        \n        for(uint256 i=0;i<_addrs.length;i++) {                   \n            // if there still some room left, add new joiner\n            if(third_prize_players[_teamName].length < TH_THIRD_PRIZE_MAX_WINNERS) {\n                                                            \n                // Finally, we can register the team\n                third_prize_players[_teamName].push(_addrs[i]);\n                \n                ret = addAddrToTeam(_addrs[i],_teamName,ret);\n            }\n        }\n        \n        return ret;\n    }\n\n    /**\n     * Function that registered users need to call to provide decrypted message _plaintext \n     * If text matches the encrypted message, TH prize will be distributed to owners of scissors \n     * registered in the team from the caller attending to their participation\n     *     \n     */\n    function decryptForTHPrize(string memory _plaintext) external returns(bool) {                \n        require(th_secret_set); // dev: secret not set\n        require(pctReached(100)); // dev: 100% not achieved yet\n        require(!third_prize_released);  // dev: 3rd prize already released         \n        require(accumulatedTHPrize == TH_POOL); // dev: not enough balance in contract\n        require(address(this).balance >= TH_POOL); // dev: not enough balance in contract\n        require(bytes(registered_th_addresses[msg.sender]).length != 0); // dev: caller not registered in any team\n\n        if(keccak256(abi.encodePacked(_plaintext)) == th_secret) {             \n    \n            // Secret message found, release prize to winners in team\n\n            // Get the team name\n            th_team_winner = registered_th_addresses[msg.sender];\n\n            // Access the addresses list\n            address [] memory _winnersAddrs = third_prize_players[th_team_winner];\n                      \n            // Congrats winners\n            _charge3rdGiveAway(th_team_winner,_winnersAddrs);\n            \n            return true;\n        } else {\n            revert(\"RPS - Wrong, keep trying.\");            \n        }\n        \n        return false;\n    }\n\n    /**\n     * Returns addresses of TH winners\n     */\n    function getTHWinnerAddrs() external view returns(address[] memory) {\n        require(third_prize_released); // dev: TH prize not relased yet\n\n        return third_prize_players[th_team_winner];\n    }\n\n    /**\n     * Returns TH winner team name\n     */\n    function getTHTeamName() external view returns(string memory) {\n        require(third_prize_released); // dev: TH prize not relased yet\n        \n        return th_team_winner;\n    }\n\n    // The 50 ETH accumulated in the treasure account will be equally distributed among the winner group\n    // and the corresponding will be made available to them through pullpayment. \n    // Example if the group was formed by 10 people with 10 corresponding accounts, \n    // 5 ETH will be made available to them through pull payment.\n    function _charge3rdGiveAway(string memory _teamName, address[] memory _winners) internal {        \n                \n        // We transfer amount in the contract and from the contract to payees \n        // using pullpayment method\n        for(uint256 i=0;i<_winners.length;i++) {\n            _asyncTransfer(_winners[i],TH_PRIZE_PER_WALLET); // 5 ETH per wallet\n            accumulatedTHPrize -= TH_PRIZE_PER_WALLET;            \n        }\n\n        third_prize_released = true;\n\n        emit ThirdGiveAwayCharged(_teamName,_winners);\n    }\n\n\n    /**\n     * We will transfer any accumulated prize not provided to NGO account\n     */\n    function sendRemainderToNGO() external onlyOwner {\n        require(third_prize_released && accumulatedTHPrize > 0); // dev: prizes not released yet or no remaining       \n\n        // All prizes have been released, potential remainder to be sent to NGO\n        uint256 amount = accumulatedTHPrize;\n\n        payable(NGOAddress).transfer(amount);\n        emit AmountWithdrawn(NGOAddress, amount);\n    }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AmountWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CreateScissors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FirstGiveAwayCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pct\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseTH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"SecondGiveAwayCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"ThirdGiveAwayCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"baseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPresales\",\"type\":\"uint256\"}],\"name\":\"maxPreSalesReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxDrop\",\"type\":\"uint256\"}],\"name\":\"maxPublicSalesReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWhiteList\",\"type\":\"uint256\"}],\"name\":\"maxWhiteListReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"on_off\",\"type\":\"bool\"}],\"name\":\"preSales\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"preSalesCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"AddrInPresales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"AddrInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmIinPresales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COFOUNDER_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_PRIZE_FIRST_ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_PRIZE_SECOND_ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_PRIZE_THIRD_ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_PRIZE_TOTAL_ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIVE_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VIP_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALES_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_PRIZE_PER_WALLET_ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_PRIZE_TOTAL_ETH_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THIRD_PRIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_FIRST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_FOURTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_PRIZE_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_SECOND_PRIZE_MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_THIRD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TH_THIRD_PRIZE_MAX_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"presalesAddr\",\"type\":\"address[]\"}],\"name\":\"addToPresalesList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whiteListAddr\",\"type\":\"address[]\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargeContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_plaintext\",\"type\":\"string\"}],\"name\":\"decryptForTHPrize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first_prize_released\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTHTeamName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTHWinnerAddrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWlAllocatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPresales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPublicSales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokensTeam\",\"type\":\"uint256[]\"}],\"name\":\"joinTHTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBalanceToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"pctReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalesComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalesFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"preSalesMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalesOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalesOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalesFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokensTeam\",\"type\":\"uint256[]\"}],\"name\":\"registerTHTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered_th_addresses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedTHPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"second_prize_released\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"second_prize_winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_giveAwayId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"sendGiveAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRemainderToNGO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ss\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ngo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ds\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_do\",\"type\":\"address\"}],\"name\":\"setFounderAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDrop\",\"type\":\"uint256\"}],\"name\":\"setMaxDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPresales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWhiteListAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSalesNFTAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSalesNFTAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWhiteListAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWhiteListAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_first\",\"type\":\"address\"}],\"name\":\"setPrizesAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"setSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"setVIPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"th_team_winner\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"third_prize_players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"third_prize_released\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whiteListMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Scissors", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}