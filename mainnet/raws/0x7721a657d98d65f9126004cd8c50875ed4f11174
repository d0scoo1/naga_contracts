{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: bsl-1.1\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Like {\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n/// @title Reader of MetadataOracle core data\r\ninterface ICoreMetadataOracleReader {\r\n\r\n    struct Quote {\r\n        uint256 price;\r\n        uint32 updateTS;\r\n    }\r\n\r\n\r\n    /// @notice Gets a list of assets quoted by this oracle.\r\n    function getAssets() external view returns (address[] memory);\r\n\r\n    /// @notice Checks if an asset is quoted by this oracle.\r\n    function hasAsset(address asset) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Gets last known quotes for the assets.\r\n     * @param assets Assets to query\r\n     * @return quotes Prices and update timestamps for corresponding assets.\r\n     */\r\n    function quoteAssets(address[] calldata assets) external view returns (Quote[] memory quotes);\r\n}\r\n\r\n\r\ninterface IOracleUsd {\r\n    function assetToUsd(address asset, uint256 amount) external view returns (uint256);\r\n}\r\n\r\n\r\n/// @title MetadataOracle wrapper for Unit protocol\r\ncontract UnitMetadataOracle is IOracleUsd {\r\n    ICoreMetadataOracleReader public immutable metadataOracle;\r\n    uint256 public immutable maxPriceAgeSeconds;\r\n\r\n    constructor(address metadataOracle_, uint256 maxPriceAgeSeconds_) {\r\n        metadataOracle = ICoreMetadataOracleReader(metadataOracle_);\r\n        maxPriceAgeSeconds = maxPriceAgeSeconds_;\r\n    }\r\n\r\n    /**\r\n     * @notice Evaluates the cost of amount of asset in USD.\r\n     * @dev reverts on non-supported asset or stale price.\r\n     * @param asset evaluated asset\r\n     * @param amount amount of asset in the smallest units\r\n     * @return result USD value, scaled by 10**18 * 2**112\r\n     */\r\n    function assetToUsd(address asset, uint256 amount) external view override returns (uint256 result) {\r\n        address[] memory input = new address[](1);\r\n        input[0] = asset;\r\n        ICoreMetadataOracleReader.Quote memory quote = metadataOracle.quoteAssets(input)[0];\r\n        require(block.timestamp - quote.updateTS <= maxPriceAgeSeconds, 'STALE_PRICE');\r\n\r\n        uint256 decimals = uint256(IERC20Like(asset).decimals());\r\n        require(decimals < 256);\r\n        int256 scaleDecimals = 18 - int256(decimals);\r\n\r\n        result = quote.price * amount;\r\n        if (scaleDecimals > 0)\r\n            result *= uint256(10) ** uint256(scaleDecimals);\r\n        else if (scaleDecimals < 0)\r\n            result /= uint256(10) ** uint256(-scaleDecimals);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataOracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceAgeSeconds_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"assetToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceAgeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataOracle\",\"outputs\":[{\"internalType\":\"contract ICoreMetadataOracleReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnitMetadataOracle", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c169628d5cb5b6fcfde6a64a73066cfe163b58ce0000000000000000000000000000000000000000000000000000000000005460", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c5929f50a2e2b7eb52c9915a34e1e9b45cf33fae523fa30ca1b1f97f930329a"}]}