{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: HexagonMarketplace.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HexagonMarketplace is Ownable, ReentrancyGuard, ERC1155Holder {\r\n    \r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n    * @dev Interface ids to check which interface a nft contract supports, used to classify between an ERC721 and ERC1155 nft contracts\r\n    */\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /**\r\n    * @dev The divisor when calculating percent fees\r\n    */\r\n    uint constant BASIS_POINTS = 10000;\r\n\r\n    /**\r\n    * @dev This is the max percent fee that can be charged for using a token (10% max)\r\n    */\r\n    uint public constant MAX_FEE = 1000;\r\n\r\n    uint public minAuctionIncrement = 500;\r\n\r\n    /**\r\n    * @dev Struct containing contract address and fees for a payment token\r\n    */\r\n    struct PaymentToken {\r\n\r\n        address contractAddress;\r\n        uint fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Addresses of the payment tokens this marketplace accepts\r\n    */\r\n    PaymentToken[] public paymentTokens;\r\n\r\n    /**\r\n    * @dev amount of fees that can be pulled from the contract and sent into the other wallets in the protocal\r\n    */\r\n    mapping(uint => uint) public claimableAmount;\r\n\r\n    /**\r\n    * @dev authorized addresses that can update whitelisted collections info, allowing updates to occur upon request without multisig approval\r\n    */\r\n    mapping(address => bool) authorizedAddresses;\r\n\r\n    struct FeeAllocation {\r\n        address wallet;\r\n        uint percent;\r\n    }\r\n\r\n    FeeAllocation[] feeAllocations;\r\n\r\n    /**\r\n    * @dev A Struct containing all the payment info for a whitelisted collection.\r\n    */\r\n    struct Collection {\r\n        address royaltyRecipient;\r\n        uint royaltyFee;\r\n        uint royaltiesEarned;\r\n        uint currencyType;\r\n        uint minPrice;\r\n    }\r\n\r\n    /**\r\n    * @dev A Struct containing all the info for a nft listing or bid, this data is also used to generate a signature that checked to see if the owner of the nft signed it,\r\n    * authorizing the sale of the nft with these parameters if a buyer accepts.\r\n    */\r\n    struct Signature {\r\n        address contractAddress;\r\n        address userAddress;\r\n        uint256 tokenId;\r\n        uint256 quantity;\r\n        uint256 pricePerItem;\r\n        uint256 expiry;\r\n        uint256 nonce;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n    }\r\n\r\n    /**\r\n    * @dev Struct containing data about an nft for auction\r\n    */ \r\n    struct AuctionData {\r\n        uint tokenId;\r\n        uint highestBid;\r\n        uint expiry;\r\n        uint minBid;\r\n        uint quantity;\r\n        address highestBidder;\r\n        address collectionAddress;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev mapping from collection id -> tokenId -> owner -> auctionData\r\n    * ///@notice owner is used as a mapping because multiple owners can put of for auction the same erc1155 item\r\n    */\r\n    mapping(address => mapping(uint => mapping(address => AuctionData))) public AuctionMapping;\r\n\r\n    /**\r\n    * @dev A mapping of nft collection addresses of whitelisted collection, and the data corresponding to it (royalty fee, wallet address)\r\n    */\r\n    mapping(address => Collection) whitelistedCollections;\r\n\r\n    /**\r\n    * @dev A mapping of signatures and their validity. Signatures are signed messages from people offering bids on nfts they want to buy,\r\n    * or setting a listing price on an nft they wish to sell. After a trade goes through, or a listing/bid is canceled, the signature is mapped here to be invalid. \r\n    */\r\n    mapping(bytes32 => bool) invalidSignatures;\r\n\r\n    /**\r\n    * @dev Event emitted when a collection gets get added to the marketplace, allowing this contracts nfts to be traded on this marketplace\r\n    */\r\n    event CollectionWhitelisted(address nftAddress, address royaltyRecipient, uint royaltyFee, uint minPrice);\r\n\r\n    /**\r\n    * @dev Event emitted when a collection gets removed from the marketplace, meaning the contracts nfts can no longer trade on this marketplace\r\n    */\r\n    event CollectionRemoved(address nftAddress);\r\n\r\n    /**\r\n    * @dev Event emitted when a collection gets updated, either its royalty fees, or its wallet address\r\n    */\r\n    event CollectionUpdated(address nftAddress, address royaltyRecipient, uint royaltyFee, uint minPrice);\r\n\r\n    /**\r\n    * @dev Event emitted when a bid is accepted by the owner of the nft, and a trade takes place\r\n    */\r\n    event BidAccepted(\r\n        address indexed nftContractAddress,\r\n        uint256 indexed tokenId,\r\n        address indexed owner,\r\n        address buyer,\r\n        uint256 marketplaceFee,\r\n        uint256 creatorFee,\r\n        uint256 ownerRevenue,\r\n        uint256 value,\r\n        uint256 nonce\r\n    );\r\n\r\n    /**\r\n    * @dev Event emitted when a bid is canceled\r\n    */\r\n    event BidCanceled(\r\n        address indexed nftContractAddress,\r\n        uint256 indexed tokenId,\r\n        address indexed bidder,\r\n        uint256 nonce\r\n    );\r\n\r\n    /**\r\n    * @dev Event emitted when a listing is accepted by the buyer and a trade takes place\r\n    */\r\n    event ListingAccepted(\r\n        address indexed nftContractAddress,\r\n        uint256 indexed tokenId,\r\n        address indexed owner,\r\n        address buyer,\r\n        uint256 marketplaceFee,\r\n        uint256 creatorFee,\r\n        uint256 ownerRevenue,\r\n        uint256 value,\r\n        uint256 nonce\r\n    );\r\n\r\n    /**\r\n    * @dev Event emitted when a listing is canceled\r\n    */\r\n    event ListingCanceled(\r\n        address indexed nftContractAddress,\r\n        uint256 indexed tokenId,\r\n        address indexed owner,\r\n        uint256 nonce\r\n    );\r\n\r\n    /**\r\n    * @dev Event emitted when an auction is placed for an nft\r\n    */\r\n    event AuctionBid(address indexed collectionAddress, uint indexed tokenId, address indexed bidder, uint bid, address owner);\r\n\r\n    /**\r\n    * @dev Event emitted when an auction is placed for an nft\r\n    */\r\n    event AuctionPlaced(address indexed collectionAddress, uint indexed tokenId, address indexed owner);\r\n\r\n    /**\r\n    * @dev Event emitted when an auction is concluded\r\n    */\r\n    event AuctionConcluded(address indexed collectionAddress, uint indexed tokenId, address indexed bidder, uint bid, address owner);\r\n\r\n     /**\r\n    * @dev This is the domain used in EIP-712 signatures.\r\n    * It is not a constant so that the chainId can be determined dynamically.\r\n    */\r\n    bytes32 private DOMAIN_SEPARATOR;\r\n\r\n    /**\r\n    * @dev This name is used in the EIP-712 domain.\r\n    */\r\n    string private constant NAME = \"HEXAGONMarketplace\";\r\n\r\n    /**\r\n    * @dev This is a hash of the method signature used in the EIP-712 signature for bids.\r\n    */\r\n    bytes32 private constant ACCEPT_BID_TYPEHASH =\r\n        keccak256(\"AcceptBid(address contractAddress,uint256 tokenId,address userAddress,uint256 pricePerItem,uint256 quantity,uint256 expiry,uint256 nonce)\");\r\n\r\n     /**\r\n    * @dev This is a hash of the method signature used in the EIP-712 signature for listings.\r\n    */\r\n    bytes32 private constant ACCEPT_LISTING_TYPEHASH =\r\n        keccak256(\"AcceptListing(address contractAddress,uint256 tokenId,address userAddress,uint256 pricePerItem,uint256 quantity,uint256 expiry,uint256 nonce)\");\r\n\r\n    /**\r\n    * @dev Sets up the domain separator that is included in each signature\r\n    * Called once  by the constructor\r\n    */\r\n    function _initializeSignatures(uint chainId) internal {\r\n       \r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(NAME)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier ensuring the provided contract address has been whitelisted\r\n    */\r\n    modifier onlyWhitelisted(address nft) {\r\n        require(whitelistedCollections[nft].royaltyFee > 0, \"nft not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor inititializing the domain separator for signatures\r\n    */\r\n    constructor(uint chainId) {\r\n        _initializeSignatures(chainId);\r\n    }\r\n\r\n    /**\r\n    * @notice Allow a buyer to purchase the nfts at the price previously set.\r\n    * @dev The seller signs a message approving the price, and then the buyer calls this function\r\n    * and transfers the agreed upon tokens\r\n    */\r\n    function AcceptListing(Signature calldata listing) external nonReentrant onlyWhitelisted(listing.contractAddress) {\r\n\r\n        bytes32 signature = getSignature(ACCEPT_LISTING_TYPEHASH, listing);\r\n\r\n        // Revert if the signature is invalid, the terms are not as expected, or if the seller transferred the NFT.\r\n        require(recover(signature, listing.v, listing.r, listing.s) == listing.userAddress && invalidSignatures[signature] == false, \"AcceptListing: Invalid Signature\");\r\n\r\n        //Invalidate signature so it cannot be used again\r\n        invalidSignatures[signature] = true;\r\n        \r\n        // The signed message from the seller is only valid for a limited time.\r\n        require(listing.expiry > block.timestamp, \"AcceptListing: EXPIRED\");\r\n\r\n        require(listing.pricePerItem >= whitelistedCollections[listing.contractAddress].minPrice, \"Invalid Price\");\r\n\r\n        // Transfer the nft(s) from the owner to the bidder\r\n        // Will revert if the seller doesn't have the nfts\r\n        if (IERC165(listing.contractAddress).supportsInterface(INTERFACE_ID_ERC721)) {\r\n            IERC721(listing.contractAddress).transferFrom(listing.userAddress, msg.sender, listing.tokenId);\r\n            require(listing.quantity == 1, \"Only 1 nft can be sold\");\r\n        } else {\r\n            IERC1155(listing.contractAddress).safeTransferFrom(listing.userAddress, msg.sender, listing.tokenId, listing.quantity, bytes(\"\"));\r\n            require(listing.quantity > 0, \"Needs a quantity to sell\");\r\n        }\r\n\r\n        uint256 value = listing.pricePerItem * listing.quantity;\r\n\r\n        // Pay the creator the marketplace, and seller\r\n        // Will revert if the buyer doesn't have the funds\r\n        (uint256 marketplaceFee, uint256 creatorFee, uint256 ownerRevenue) = _distributeFunds(\r\n            value,\r\n            listing.userAddress,\r\n            msg.sender,\r\n            listing.contractAddress\r\n        );\r\n\r\n        emit ListingAccepted(\r\n            listing.contractAddress,\r\n            listing.tokenId,\r\n            listing.userAddress,\r\n            msg.sender,\r\n            marketplaceFee,\r\n            creatorFee,\r\n            ownerRevenue,\r\n            value,\r\n            listing.nonce\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev The seller cancels the listing they previously approved by providing the listing data they wish to cancel\r\n    */\r\n    function CancelListing(Signature calldata listing) external {\r\n\r\n        bytes32 signature = getSignature(ACCEPT_LISTING_TYPEHASH, listing);\r\n\r\n        // Revert if the signature has not been signed by the sender\r\n        require(recover(signature, listing.v, listing.r, listing.s) == msg.sender, \"CancelListing: INVALID_SIGNATURE\");\r\n\r\n        //Set the signature to be invalid, preventing anyone from using this signature to purchase this item\r\n        invalidSignatures[signature] = true;\r\n\r\n        emit ListingCanceled(\r\n            listing.contractAddress,\r\n            listing.tokenId,\r\n            msg.sender,\r\n            listing.nonce\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Allow a bid for a NFT to be accepted by the owner.\r\n    * @dev The buyer signs a message approving the purchase, and then the seller calls this function\r\n    * with the msg.value equal to the agreed upon price.\r\n    */\r\n    function AcceptBid (Signature calldata bid) external nonReentrant onlyWhitelisted(bid.contractAddress) {\r\n\r\n        bytes32 signature = getSignature(ACCEPT_BID_TYPEHASH, bid);\r\n\r\n        // Revert if the signature is invalid, the terms are not as expected, or if the seller transferred the NFT.\r\n        require(recover(signature, bid.v, bid.r, bid.s) == bid.userAddress && invalidSignatures[signature] == false, \"AcceptBid: Invalid Signature\");\r\n\r\n        //Invalidate signature so it cannot be used again\r\n        invalidSignatures[signature] = true;\r\n        \r\n        // The signed message from the seller is only valid for a limited time.\r\n        require(bid.expiry > block.timestamp, \"AcceptBid: EXPIRED\");\r\n\r\n        require(bid.pricePerItem >= whitelistedCollections[bid.contractAddress].minPrice, \"Invalid Price\");\r\n\r\n        //Transfer the nft from the owner to the bidder\r\n        if (IERC165(bid.contractAddress).supportsInterface(INTERFACE_ID_ERC721)) {\r\n            IERC721(bid.contractAddress).safeTransferFrom(msg.sender, bid.userAddress, bid.tokenId);\r\n            require(bid.quantity == 1, \"Only 1 nft can be sold\");\r\n        } else {\r\n            IERC1155(bid.contractAddress).safeTransferFrom(msg.sender, bid.userAddress, bid.tokenId, bid.quantity, bytes(\"\"));\r\n             require(bid.quantity > 0, \"Needs a quantity to sell\");\r\n        }\r\n\r\n        uint256 value = bid.pricePerItem * bid.quantity;\r\n\r\n        // Pay the creator the marketplace, and seller\r\n        // Will revert of the bidder doesn't have the funds\r\n        (uint256 marketplaceFee, uint256 creatorFee, uint256 ownerRevenue) = _distributeFunds(\r\n            value,\r\n            msg.sender,\r\n            bid.userAddress,\r\n            bid.contractAddress\r\n        );\r\n\r\n        emit BidAccepted(\r\n            bid.contractAddress,\r\n            bid.tokenId,\r\n            msg.sender,\r\n            bid.userAddress,\r\n            marketplaceFee,\r\n            creatorFee,\r\n            ownerRevenue,\r\n            value,\r\n            bid.nonce\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev The buyer cancels the bid they previously approved by providing the bid data they wish to cancel\r\n    */\r\n    function CancelBid(Signature calldata bid) external {\r\n\r\n        bytes32 signature = getSignature(ACCEPT_BID_TYPEHASH, bid);\r\n\r\n        // Revert if the signature has not been signed by the sender\r\n        require(recover(signature, bid.v, bid.r, bid.s) == msg.sender, \"CancelBid: INVALID_SIGNATURE\");\r\n\r\n        //Invalidate signature so it can no longer be used\r\n        invalidSignatures[signature] = true;\r\n\r\n        emit BidCanceled(\r\n            bid.contractAddress,\r\n            bid.tokenId,\r\n            msg.sender,\r\n            bid.nonce\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Destributes the funds from the buyer to the seller/owner, with a percentage of the sale price distributed to the marketplace,\r\n    * and potentially the creator of the collection\r\n    */\r\n    function _distributeFunds(\r\n        uint256 _value,\r\n        address _owner,\r\n        address _sender,\r\n        address _nftAddress\r\n       \r\n    ) internal returns(uint256 marketplaceFee, uint256 creatorFee, uint256 ownerRevenue){\r\n\r\n        if(_value > 0) {\r\n\r\n            Collection memory collection = whitelistedCollections[_nftAddress];\r\n\r\n            PaymentToken memory paymentToken = paymentTokens[collection.currencyType];\r\n\r\n            IERC20 token = IERC20(paymentToken.contractAddress);\r\n\r\n            //calculate fee for the marketplace\r\n            marketplaceFee = (_value * paymentToken.fee) / BASIS_POINTS;\r\n\r\n            //calculate the creator fee\r\n            creatorFee = (_value * collection.royaltyFee) / BASIS_POINTS;\r\n\r\n\r\n            if(marketplaceFee > 0) {\r\n\r\n                ///@notice buyer can be \r\n                if(_sender != address(this)) {\r\n\r\n                    //send tokens to the marketplace wallet\r\n                    token.transferFrom(_sender, address(this), marketplaceFee);\r\n\r\n                }\r\n\r\n                claimableAmount[collection.currencyType] += marketplaceFee;\r\n\r\n            }\r\n\r\n            if(creatorFee > 0) {\r\n\r\n                whitelistedCollections[_nftAddress].royaltiesEarned += creatorFee;\r\n                \r\n                //send tokens to the creator wallet\r\n                token.transferFrom(_sender, collection.royaltyRecipient, creatorFee);\r\n\r\n            }\r\n\r\n            ownerRevenue = (_value - marketplaceFee) - creatorFee;\r\n\r\n            //send remaining tokens to the seller/owner\r\n            token.transferFrom(_sender, _owner, ownerRevenue);\r\n\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Place a bid an nft up for auction\r\n    * requires the auction to have started and not be over\r\n    * and the value of the bid to be at least the minimum bid amount, greator than the current highest bid, and increased from the min bid\r\n    * by at least the minimum increment\r\n    * @notice Payment tokens are sent to the contract on successful bid, and if a bid is beaten the tokens they sent will be sent back to the beaten bids address\r\n    */\r\n    function placeAuctionBid(address _collectionAddress, uint _tokenId, address _owner, uint _amount) external nonReentrant\r\n    {\r\n\r\n        require(msg.sender == tx.origin, \"Contracts cannot place an bid\");\r\n        \r\n        AuctionData memory auctionData = AuctionMapping[_collectionAddress][_tokenId][_owner];\r\n\r\n        require(auctionData.quantity > 0, \"Auction doesn't exist\");\r\n\r\n        require(auctionData.expiry > block.timestamp, \"Auction is over\");\r\n\r\n        require(msg.sender != _owner, \"Can't bid on your own item\");\r\n\r\n        uint highestBid = auctionData.highestBid;\r\n        address highestBidder = auctionData.highestBidder;\r\n\r\n        auctionData.highestBidder = msg.sender;\r\n        auctionData.highestBid = _amount;\r\n\r\n        AuctionMapping[_collectionAddress][_tokenId][_owner] = auctionData;\r\n\r\n        Collection memory collection = whitelistedCollections[_collectionAddress];\r\n\r\n        PaymentToken memory paymentToken = paymentTokens[collection.currencyType];\r\n\r\n        IERC20 token = IERC20(paymentToken.contractAddress);\r\n\r\n        if(highestBid > 0) {\r\n\r\n            uint minIncrement = (highestBid * minAuctionIncrement) / BASIS_POINTS;\r\n\r\n            ///@notice there is already a bid on this auction, so it needs to be higher\r\n            require(_amount >= highestBid + minIncrement, \"Amount needs to be more than last bid, plus increment\");\r\n\r\n            ///@notice the _amount is more, so lets send the other funds back\r\n            token.safeTransfer(highestBidder, highestBid);\r\n\r\n\r\n        } else {\r\n\r\n            require(_amount >= auctionData.minBid, \"Amount needs to be more than the min bid\");\r\n\r\n        }\r\n\r\n        ///@notice send the tokens to the contract to be locked until either outbid, or the auction is over\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n\r\n        emit AuctionBid(_collectionAddress, _tokenId, msg.sender, _amount, _owner);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Place an auction, setting the auctions parameters and locking the nft in the contract until the auction is concluded\r\n    * Requires an auction to not already exist, and the proper permissions to be set\r\n    */\r\n    function placeAuction(AuctionData memory _auctionData) external onlyWhitelisted(_auctionData.collectionAddress) nonReentrant {\r\n\r\n        require(msg.sender == tx.origin, \"Contracts cannot place an auction\");\r\n\r\n        require(_auctionData.expiry > block.timestamp, \"Auction needs to have a duration\");\r\n\r\n        require(AuctionMapping[_auctionData.collectionAddress][_auctionData.tokenId][msg.sender].quantity == 0, \"Auction already exists\");\r\n\r\n        require(_auctionData.minBid >= whitelistedCollections[_auctionData.collectionAddress].minPrice, \"Invalid Price\");\r\n\r\n        AuctionMapping[_auctionData.collectionAddress][_auctionData.tokenId][msg.sender] = _auctionData;\r\n\r\n        //Hold the nft in escrow\r\n        ///@notice assumption is made that these contracts will be either erc721 or erc1155, because those are the only contracts thats will be whitelisted\r\n        /// this will also revert if permissions havent been set, or the sender doesnt own the nft\r\n        if (IERC165(_auctionData.collectionAddress).supportsInterface(INTERFACE_ID_ERC721)) {\r\n\r\n            IERC721(_auctionData.collectionAddress).transferFrom(msg.sender, address(this), _auctionData.tokenId);\r\n            require(_auctionData.quantity == 1, \"Can't have more than 1 nft of this type\");\r\n\r\n            \r\n        } else {\r\n            \r\n            IERC1155(_auctionData.collectionAddress).safeTransferFrom(msg.sender, address(this), _auctionData.tokenId, _auctionData.quantity, bytes(\"\"));\r\n\r\n            require(_auctionData.quantity > 0, \"Quantity can't be zero\");\r\n        }\r\n\r\n        emit AuctionPlaced(_auctionData.collectionAddress, _auctionData.tokenId, msg.sender);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Completes an auction, sending funds and the nft to the proper owners\r\n    * Requires the auction to be over, can be called by anyone\r\n    */\r\n    function concludeAuction(address _collectionAddress, uint _tokenId, address _owner) external nonReentrant {\r\n\r\n        AuctionData memory auctionData = AuctionMapping[_collectionAddress][_tokenId][_owner];\r\n\r\n        require(auctionData.quantity > 0, \"Auction doesn't exist\");\r\n\r\n        require(auctionData.expiry <= block.timestamp, \"Auction isn't over\");\r\n\r\n        address nftReciever;\r\n\r\n        if(auctionData.highestBid > 0) {\r\n\r\n            ///@notice there was a bid, so we can send the funds from this contract to the appropriate people, and send the nft to the bidder\r\n            nftReciever = auctionData.highestBidder;\r\n\r\n            //send funds from this address\r\n            _distributeFunds(auctionData.highestBid, _owner, address(this), auctionData.collectionAddress);\r\n\r\n        } else {\r\n\r\n            ///@notice there wasnt a bid, so the nft can be sent back to the owner\r\n            nftReciever = _owner;\r\n\r\n        }\r\n\r\n        //Send the nft from this contract to the proper person\r\n        ///@notice assumption is made that these contracts will be either erc721 or erc1155, because those are the only contracts thats will be whitelisted\r\n        /// this will also revert if permissions havent been set, or the sender doesnt own the nft\r\n        if (IERC165(auctionData.collectionAddress).supportsInterface(INTERFACE_ID_ERC721)) {\r\n\r\n            IERC721(auctionData.collectionAddress).safeTransferFrom(address(this), nftReciever, auctionData.tokenId);\r\n\r\n            \r\n        } else {\r\n            \r\n            IERC1155(auctionData.collectionAddress).safeTransferFrom(address(this), nftReciever, auctionData.tokenId, auctionData.quantity, bytes(\"\"));\r\n\r\n        }\r\n\r\n        ///@notice delete the auction so a new one can be made\r\n        delete AuctionMapping[_collectionAddress][_tokenId][_owner];\r\n\r\n        emit AuctionConcluded(_collectionAddress, _tokenId, nftReciever, auctionData.highestBid, _owner);\r\n\r\n\r\n    }\r\n\r\n    //View functions\r\n\r\n    function getSignature(bytes32 _TYPEHASH, Signature memory signature) internal view returns(bytes32) {\r\n\r\n        return keccak256(\r\n        abi.encodePacked(\r\n            \"\\x19\\x01\",\r\n            DOMAIN_SEPARATOR,\r\n            keccak256(abi.encode(_TYPEHASH, signature.contractAddress, signature.tokenId, signature.userAddress, signature.pricePerItem, signature.quantity, signature.expiry, signature.nonce))\r\n            )\r\n        );\r\n    }\r\n\r\n    function getCollectionInfo(address _collectionAddress) external view returns (Collection memory) {\r\n        return whitelistedCollections[_collectionAddress];\r\n    }\r\n\r\n    /**\r\n    * @dev Retrieves the total royalties this collection has generated\r\n    */\r\n    function getRoyaltiesGenerated(address _collectionAddress, uint _currencyType) external view returns (uint) {\r\n\r\n        Collection memory collection = whitelistedCollections[_collectionAddress];\r\n\r\n        if(collection.currencyType != _currencyType) {\r\n            return 0;\r\n        } else {\r\n            return collection.royaltiesEarned;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n    * `r` and `s` signature fields separately.\r\n    * @notice taken from @openzeppelin EDSA.sol library\r\n    */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    //Owner functions\r\n\r\n    /**\r\n    * @dev Claims the fees generated by the marketplace, if any, and sends to the proper wallets in the set amounts\r\n    */\r\n    function claimFees() external onlyOwner {\r\n\r\n        FeeAllocation[] memory _feeAllocations = feeAllocations;\r\n\r\n        require(_feeAllocations.length > 0, \"Fee allocations not set\");\r\n\r\n        PaymentToken[] memory tokens = paymentTokens;\r\n\r\n        require(tokens.length > 0, \"No tokens set\");\r\n\r\n        for(uint i = 0; i < tokens.length; i++) {\r\n\r\n            IERC20 token = IERC20(tokens[i].contractAddress);\r\n\r\n            uint _claimableAmount = claimableAmount[i];\r\n\r\n            if(_claimableAmount == 0) {\r\n                continue;\r\n            }\r\n\r\n            for(uint j = 0; j < _feeAllocations.length; j++) {\r\n\r\n                uint toClaim = (_claimableAmount * _feeAllocations[i].percent) / BASIS_POINTS;\r\n\r\n                if(toClaim > 0) {\r\n\r\n                    token.safeTransfer(_feeAllocations[i].wallet, toClaim);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            claimableAmount[i] = 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Adds or update the fee for a erc20 token used for payment in the marketplace \r\n    */\r\n    function setPaymentToken(address _tokenAddress, uint256 _fee, uint256 _index) external onlyOwner {\r\n\r\n        require(_tokenAddress != address(0), \"Zero Address\");\r\n\r\n        require(_index <= paymentTokens.length, \"index out of range\");\r\n        require(_fee <= MAX_FEE, \"Attempting to set too high of a fee\");\r\n\r\n        //approve this contract to use transfer from to move funds\r\n        IERC20(_tokenAddress).approve(address(this), 2**256 - 1);\r\n\r\n        if(_index == paymentTokens.length) {\r\n\r\n            //Adding a new payment token\r\n            paymentTokens.push(PaymentToken(_tokenAddress, _fee));\r\n\r\n        } else {\r\n\r\n            //Updating a previous payment token\r\n            paymentTokens[_index].fee = _fee;\r\n        }\r\n\r\n    }\r\n\r\n    function setApprovalForTokenTransfer(address _tokenAddress) external onlyOwner {\r\n\r\n        //approve this contract to use transfer from to move funds\r\n        IERC20(_tokenAddress).approve(address(this), 2**256 - 1);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Sets how the fees will be allocated when withdrawn\r\n    * Requires the caller to be the owner of the contract\r\n    */\r\n    function setFeeAllocations(address[] calldata wallets, uint[] calldata percents) external onlyOwner {\r\n\r\n        require(wallets.length == percents.length, \"wallets and percents need to be the same length\");\r\n\r\n        if(feeAllocations.length > 0) {\r\n            delete feeAllocations;\r\n        }\r\n\r\n        uint totalPercent;\r\n\r\n        for(uint i = 0; i < wallets.length; i++) {\r\n\r\n            FeeAllocation memory feeAllocation = FeeAllocation(wallets[i], percents[i]);\r\n\r\n            totalPercent += feeAllocation.percent;\r\n           \r\n            feeAllocations.push(feeAllocation);\r\n\r\n        }\r\n\r\n        require(totalPercent == BASIS_POINTS, \"Total percent does not add to 100%\");\r\n\r\n    }\r\n\r\n    function setAuthorizedAddress(address _authorizedAddress, bool value) external onlyOwner {\r\n        authorizedAddresses[_authorizedAddress] = value;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds a nft collection to the whitelist, allowing it to be traded on this marketplace, and setting the royalty fee and fee recipient\r\n    */\r\n    function addToWhitelist(address _nft, address _royaltyRecipient, uint _royaltyFee, uint _currencyType, uint _minPrice) external onlyOwner {\r\n        require(whitelistedCollections[_nft].royaltyRecipient == address(0), \"nft already whitelisted\");\r\n        require(_royaltyRecipient != address(0), \"Can't be zero address\");\r\n        require(_currencyType < paymentTokens.length, \"payment token doesn't exist\");\r\n        whitelistedCollections[_nft] = Collection(_royaltyRecipient, _royaltyFee, 0, _currencyType, _minPrice);\r\n        emit CollectionWhitelisted(_nft, _royaltyRecipient, _royaltyFee, _minPrice);\r\n    }\r\n\r\n    function changeMinAuctionPercentIncrement(uint _percentIncrement) external onlyOwner {\r\n\r\n        require(_percentIncrement <= 1000, \"Min auction percent can't be above 10%\");\r\n\r\n        minAuctionIncrement = _percentIncrement;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev removes a nft collection to the whitelist, preventing from being traded on this marketplace\r\n    */\r\n    function removeFromWhitelist(address _nft) external onlyOwner onlyWhitelisted(_nft) {\r\n        delete whitelistedCollections[_nft];\r\n        emit CollectionRemoved(_nft);\r\n    }\r\n\r\n    /**\r\n    * @dev updates a nft collections royalty fee and recepient address\r\n    */\r\n    function updateWhitelist(address _nftAddress, address _royaltyRecipient, uint _royaltyFee, uint _minPrice) external onlyWhitelisted(_nftAddress) {\r\n\r\n        require(authorizedAddresses[msg.sender], \"Only authorized addresses can call\");\r\n\r\n        require(_royaltyRecipient != address(0), \"Can't be zero address\");\r\n\r\n        Collection storage _collection = whitelistedCollections[_nftAddress];\r\n\r\n        _collection.royaltyFee = _royaltyFee;\r\n        _collection.royaltyRecipient = _royaltyRecipient;\r\n        _collection.minPrice = _minPrice;\r\n\r\n        emit CollectionUpdated(_nftAddress, _royaltyRecipient, _royaltyFee, _minPrice);\r\n\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AuctionConcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AuctionPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BidCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"CollectionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"CollectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"CollectionWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRevenue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ListingAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ListingCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct HexagonMarketplace.Signature\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"AcceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct HexagonMarketplace.Signature\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"AcceptListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuctionMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct HexagonMarketplace.Signature\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"CancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct HexagonMarketplace.Signature\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"CancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currencyType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentIncrement\",\"type\":\"uint256\"}],\"name\":\"changeMinAuctionPercentIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"concludeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"getCollectionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct HexagonMarketplace.Collection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currencyType\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuctionIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"internalType\":\"struct HexagonMarketplace.AuctionData\",\"name\":\"_auctionData\",\"type\":\"tuple\"}],\"name\":\"placeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeAuctionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setApprovalForTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"}],\"name\":\"setFeeAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HexagonMarketplace", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb1e65ae354c240eb3ece9243875a462f3d4051cf025032fe17ab4ed32d4db85"}]}