{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.8.4;\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\n/// License-Identifier: AGPL-3.0-only\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation.\r\nabstract contract ERC721 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERRORS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    error NotApproved();\r\n    \r\n    error NotOwner();\r\n\r\n    error InvalidRecipient();\r\n\r\n    error SignatureExpired();\r\n\r\n    error InvalidSignature();\r\n\r\n    error AlreadyMinted();\r\n\r\n    error NotMinted();\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC-721 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    uint256 public totalSupply;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EIP-2612-LIKE STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256('Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)');\r\n\r\n    bytes32 public constant PERMIT_ALL_TYPEHASH = \r\n        keccak256('Permit(address owner,address spender,uint256 nonce,uint256 deadline)');\r\n    \r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(uint256 => uint256) public nonces;\r\n\r\n    mapping(address => uint256) public noncesForAll;\r\n    \r\n    /*///////////////////////////////////////////////////////////////\r\n                            CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        \r\n        symbol = symbol_;\r\n        \r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        \r\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC-721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    function approve(address spender, uint256 tokenId) public virtual {\r\n        address owner = ownerOf[tokenId];\r\n\r\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert NotApproved();\r\n        \r\n        getApproved[tokenId] = spender;\r\n        \r\n        emit Approval(owner, spender, tokenId); \r\n    }\r\n    \r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n        \r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n    \r\n    function transfer(address to, uint256 tokenId) public virtual returns (bool) {\r\n        if (msg.sender != ownerOf[tokenId]) revert NotOwner();\r\n\r\n        if (to == address(0)) revert InvalidRecipient();\r\n        \r\n        // underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow\r\n        unchecked {\r\n            balanceOf[msg.sender]--; \r\n        \r\n            balanceOf[to]++;\r\n        }\r\n        \r\n        delete getApproved[tokenId];\r\n        \r\n        ownerOf[tokenId] = to;\r\n        \r\n        emit Transfer(msg.sender, to, tokenId); \r\n        \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from, \r\n        address to, \r\n        uint256 tokenId\r\n    ) public virtual {\r\n        if (from != ownerOf[tokenId]) revert NotOwner();\r\n\r\n        if (to == address(0)) revert InvalidRecipient();\r\n        \r\n        if (msg.sender != from \r\n            && msg.sender != getApproved[tokenId]\r\n            && !isApprovedForAll[from][msg.sender]\r\n        ) revert NotApproved();  \r\n        \r\n        // underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow\r\n        unchecked { \r\n            balanceOf[from]--; \r\n        \r\n            balanceOf[to]++;\r\n        }\r\n        \r\n        delete getApproved[tokenId];\r\n        \r\n        ownerOf[tokenId] = to;\r\n        \r\n        emit Transfer(from, to, tokenId); \r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        address from, \r\n        address to, \r\n        uint256 tokenId\r\n    ) public virtual {\r\n        transferFrom(from, to, tokenId); \r\n\r\n        if (to.code.length != 0 \r\n            && ERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenId, '') \r\n            != ERC721TokenReceiver.onERC721Received.selector\r\n        ) revert InvalidRecipient();\r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        address from, \r\n        address to, \r\n        uint256 tokenId, \r\n        bytes memory data\r\n    ) public virtual {\r\n        transferFrom(from, to, tokenId); \r\n        \r\n        if (to.code.length != 0 \r\n            && ERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenId, data) \r\n            != ERC721TokenReceiver.onERC721Received.selector\r\n        ) revert InvalidRecipient();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC-165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x80ac58cd || // ERC-165 Interface ID for ERC-721\r\n            interfaceId == 0x5b5e139f || // ERC-165 Interface ID for ERC-165\r\n            interfaceId == 0x01ffc9a7; // ERC-165 Interface ID for ERC-721 Metadata\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            EIP-2612-LIKE LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    function permit(\r\n        address spender,\r\n        uint256 tokenId,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        if (block.timestamp > deadline) revert SignatureExpired();\r\n        \r\n        address owner = ownerOf[tokenId];\r\n        \r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    '\\x19\\x01',\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, nonces[tokenId]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            if (recoveredAddress == address(0)) revert InvalidSignature();\r\n\r\n            if (recoveredAddress != owner && !isApprovedForAll[owner][recoveredAddress]) revert InvalidSignature(); \r\n        }\r\n        \r\n        getApproved[tokenId] = spender;\r\n\r\n        emit Approval(owner, spender, tokenId);\r\n    }\r\n    \r\n    function permitAll(\r\n        address owner,\r\n        address operator,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        if (block.timestamp > deadline) revert SignatureExpired();\r\n        \r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    '\\x19\\x01',\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_ALL_TYPEHASH, owner, operator, noncesForAll[owner]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            if (recoveredAddress == address(0)) revert InvalidSignature();\r\n\r\n            if (recoveredAddress != owner && !isApprovedForAll[owner][recoveredAddress]) revert InvalidSignature();\r\n        }\r\n        \r\n        isApprovedForAll[owner][operator] = true;\r\n\r\n        emit ApprovalForAll(owner, operator, true);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : _computeDomainSeparator();\r\n    }\r\n\r\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return \r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                    keccak256(bytes(name)),\r\n                    keccak256('1'),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    function _mint(address to, uint256 tokenId) internal virtual { \r\n        if (to == address(0)) revert InvalidRecipient();\r\n\r\n        if (ownerOf[tokenId] != address(0)) revert AlreadyMinted();\r\n  \r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            totalSupply++;\r\n            \r\n            balanceOf[to]++;\r\n        }\r\n        \r\n        ownerOf[tokenId] = to;\r\n        \r\n        emit Transfer(address(0), to, tokenId); \r\n    }\r\n    \r\n    function _burn(uint256 tokenId) internal virtual { \r\n        address owner = ownerOf[tokenId];\r\n\r\n        if (ownerOf[tokenId] == address(0)) revert NotMinted();\r\n        \r\n        // ownership check ensures no underflow\r\n        unchecked {\r\n            totalSupply--;\r\n        \r\n            balanceOf[owner]--;\r\n        }\r\n        \r\n        delete ownerOf[tokenId];\r\n        \r\n        delete getApproved[tokenId];\r\n        \r\n        emit Transfer(owner, address(0), tokenId); \r\n    }\r\n}\r\n\r\n/// @notice Helper utility that enables calling multiple local methods in a single call.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol)\r\nabstract contract Multicall {\r\n    function multicall(bytes[] calldata data) public virtual returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        \r\n        // cannot realistically overflow on human timescales\r\n        unchecked {\r\n            for (uint256 i = 0; i < data.length; i++) {\r\n                (bool success, bytes memory result) = address(this).delegatecall(data[i]);\r\n\r\n                if (!success) {\r\n                    if (result.length < 68) revert();\r\n                    \r\n                    assembly {\r\n                        result := add(result, 0x04)\r\n                    }\r\n                    \r\n                    revert(abi.decode(result, (string)));\r\n                }\r\n                results[i] = result;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Public NFT minter for Kali DAO.\r\ncontract KaliNFT is ERC721, Multicall {\r\n    mapping(uint256 => string) private _tokenURI;\r\n\r\n    constructor(string memory name_, string memory symbol_) ERC721(name_, symbol_) {}\r\n    \r\n    function tokenURI(uint256 tokenId) public view override virtual returns (string memory) {\r\n        return _tokenURI[tokenId];\r\n    }\r\n\r\n    function mint(\r\n        address to, \r\n        uint256 tokenId,\r\n        string calldata uri\r\n    ) public virtual {\r\n        _mint(to, tokenId);\r\n\r\n        _tokenURI[tokenId] = uri;\r\n    }\r\n\r\n    function burn(uint256 tokenId) public virtual {\r\n        if (msg.sender != ownerOf[tokenId]) revert NotOwner();\r\n\r\n        _burn(tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noncesForAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KaliNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000084b414c49204e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044b4e465400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a893a67fc7a342ce7899709a4ba4c4de94ebce0a3b729c0c379910970694646"}]}