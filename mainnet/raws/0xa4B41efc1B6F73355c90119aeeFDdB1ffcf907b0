{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"TrueFreezeGovernor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\nimport \\\"IfrToken.sol\\\";\\nimport \\\"IwAsset.sol\\\";\\nimport \\\"IMultiRewards.sol\\\";\\nimport \\\"INonFungiblePositionManager.sol\\\";\\n\\n/// @title TrueFreezeGovernor contract\\n/// @author chalex.eth - CharlieDAO\\n/// @notice Main TrueFreeze contract\\n\\ncontract TrueFreezeGovernor is Ownable, ReentrancyGuard {\\n    uint256 internal constant N_DAYS = 365;\\n    uint256 internal constant MIN_LOCK_DAYS = 1;\\n    uint256 internal constant MAX_LOCK_DAYS = 1100;\\n    uint256 internal constant MAX_UINT = 2**256 - 1;\\n\\n    /// @dev The token ID position data\\n    mapping(uint256 => Position) private _positions;\\n\\n    /// @dev The ID of the next token that will be minted. Skips 0\\n    uint256 private _nextId = 1;\\n\\n    ///@dev pack the parameters of the position in a struct\\n    struct Position {\\n        uint256 amountLocked;\\n        uint256 tokenMinted;\\n        uint256 lockingDate;\\n        uint256 maturityDate;\\n        bool active;\\n    }\\n\\n    /* ----------- events --------------*/\\n\\n    event lockedWAsset(\\n        address indexed minter,\\n        uint256 indexed tokenId,\\n        uint256 amountLocked,\\n        uint256 lockingDate,\\n        uint256 maturityDate\\n    );\\n\\n    event withdrawedWAsset(\\n        address indexed withdrawer,\\n        uint256 indexed tokenId,\\n        uint256 amountWithdrawed,\\n        uint256 WAssetPenalty,\\n        uint256 frPenalty\\n    );\\n\\n    /* ----------- Interfaces --------------*/\\n\\n    IfrToken private immutable frToken;\\n    IwAsset private immutable wAsset;\\n    INonFungiblePositionManager private immutable nftPosition;\\n    IMultiRewards private immutable stakingContract;\\n\\n    /* ----------- Constructor --------------*/\\n\\n    constructor(\\n        address _wAssetaddress,\\n        address _frToken,\\n        address _NFTPosition,\\n        address _stakingAddress\\n    ) {\\n        wAsset = IwAsset(_wAssetaddress);\\n        frToken = IfrToken(_frToken);\\n        nftPosition = INonFungiblePositionManager(_NFTPosition);\\n        stakingContract = IMultiRewards(_stakingAddress);\\n        wAsset.approve(_stakingAddress, MAX_UINT);\\n        frToken.approve(_stakingAddress, MAX_UINT);\\n    }\\n\\n    /* ----------- External functions --------------*/\\n\\n    /// @notice lock wAsset (WETH,WAVAX,WMATIC...) and create a position represented by a NFT\\n    /// @dev locking create a position, reward by minting frToken and NFT associated to the position\\n    /// @param _amount wAsset amount to lock\\n    /// @param _lockDuration number of days to lock the wAsset\\n    function lockWAsset(uint256 _amount, uint256 _lockDuration)\\n        external\\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"Amount must be more than 0\\\");\\n        require(\\n            _lockDuration >= MIN_LOCK_DAYS && _lockDuration <= MAX_LOCK_DAYS,\\n            \\\"Bad days input\\\"\\n        );\\n        bool sent = wAsset.transferFrom(msg.sender, address(this), _amount);\\n        require(sent, \\\"Error in sending WAsset\\\");\\n        uint256 lockingDate = block.timestamp;\\n        uint256 maturityDate = lockingDate + (_lockDuration * 1 days);\\n        uint256 tokenToMint = _calculate_frToken(\\n            _amount,\\n            (_lockDuration * 1 days)\\n        );\\n        _createPosition(\\n            _amount,\\n            tokenToMint,\\n            lockingDate,\\n            maturityDate,\\n            _nextId\\n        );\\n        _mintToken(tokenToMint);\\n        nftPosition.mint(msg.sender, _nextId);\\n\\n        emit lockedWAsset(\\n            msg.sender,\\n            _nextId,\\n            _amount,\\n            lockingDate,\\n            maturityDate\\n        );\\n\\n        _nextId += 1;\\n    }\\n\\n    /// @notice withdraw wAsset (WETH,WAVAX,WMATIC...) associated to the NFT position\\n    /// @dev withdraw the position associated to the NFT position\\n    /// @param _tokenId ID of the NFT token\\n    function withdrawWAsset(uint256 _tokenId) external nonReentrant {\\n        require(\\n            msg.sender == nftPosition.ownerOf(_tokenId),\\n            \\\"Not the owner of tokenId\\\"\\n        );\\n        require(\\n            _positions[_tokenId].active == true,\\n            \\\"Position already withdrawed\\\"\\n        );\\n\\n        (\\n            uint256 amountLocked,\\n            uint256 tokenMinted,\\n            uint256 lockingDate,\\n            uint256 maturityDate,\\n            bool active\\n        ) = getPositions(_tokenId);\\n        uint256 feesToPay = getWAssetFees(_tokenId);\\n        _positions[_tokenId].active = false;\\n        _positions[_tokenId].amountLocked = 0;\\n\\n        nftPosition.burn(_tokenId);\\n        uint256 progress = getProgress(_tokenId);\\n        if (progress >= 100) {\\n            // if progress > 100 sending back asset\\n            wAsset.transfer(msg.sender, amountLocked);\\n            emit withdrawedWAsset(msg.sender, _tokenId, amountLocked, 0, 0);\\n        } else if (progress < 100) {\\n            // if progress < 100 user need to pay a wAsset fee\\n            uint256 frPenalty = getUnlockCost(_tokenId);\\n            require(\\n                frToken.transferFrom(msg.sender, address(this), frPenalty),\\n                \\\"Transfer failed\\\"\\n            );\\n\\n            uint256 sendToUser = amountLocked - feesToPay;\\n            wAsset.transfer(msg.sender, sendToUser);\\n            stakingContract.notifyRewardAmount(address(wAsset), feesToPay);\\n\\n            if (progress <= 67) {\\n                // if progress < 67 user need to pay a wAsset fee and frToken fee\\n                (uint256 toSend, uint256 toBurn) = _calculateBurnAndSend(\\n                    tokenMinted,\\n                    frPenalty\\n                );\\n                frToken.burn(address(this), toBurn);\\n                stakingContract.notifyRewardAmount(address(frToken), toSend);\\n            } else {\\n                frToken.burn(address(this), frPenalty);\\n            }\\n            emit withdrawedWAsset(\\n                msg.sender,\\n                _tokenId,\\n                amountLocked,\\n                feesToPay,\\n                frPenalty\\n            );\\n        }\\n    }\\n\\n    /* ----------- Internal functions --------------*/\\n\\n    ///@dev create a mapping of position struct\\n    function _createPosition(\\n        uint256 _amount,\\n        uint256 _tokenMinted,\\n        uint256 _lockingDate,\\n        uint256 _maturityDate,\\n        uint256 tokenId\\n    ) private {\\n        _positions[tokenId] = Position({\\n            amountLocked: _amount,\\n            tokenMinted: _tokenMinted,\\n            lockingDate: _lockingDate,\\n            maturityDate: _maturityDate,\\n            active: true\\n        });\\n    }\\n\\n    function _mintToken(uint256 _tokenToMint) private {\\n        frToken.mint(msg.sender, _tokenToMint);\\n    }\\n\\n    /* ----------- View functions --------------*/\\n\\n    ///@dev returns data for a given position\\n    function getPositions(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _positions[tokenId].amountLocked,\\n            _positions[tokenId].tokenMinted,\\n            _positions[tokenId].lockingDate,\\n            _positions[tokenId].maturityDate,\\n            _positions[tokenId].active\\n        );\\n    }\\n\\n    ///@dev get the progress for a given position\\n    function getProgress(uint256 tokenId) public view returns (uint256) {\\n        (, , uint256 _lockingDate, uint256 _maturityDate, ) = getPositions(\\n            tokenId\\n        );\\n        return _calculateProgress(block.timestamp, _lockingDate, _maturityDate);\\n    }\\n\\n    ///@dev get the frToken fee to pay for unlocking a position\\n    function getUnlockCost(uint256 _tokenId) public view returns (uint256) {\\n        uint256 _progress = getProgress(_tokenId);\\n        (, uint256 _TokenMinted, , , ) = getPositions(_tokenId);\\n        return _calculateWithdrawCost(_progress, _TokenMinted);\\n    }\\n\\n    ///@dev get the wAsset fee to pay if position is unlock\\n    function getWAssetFees(uint256 _tokenId) public view returns (uint256) {\\n        (uint256 amountLocked, , , , ) = getPositions(_tokenId);\\n        uint256 progress = getProgress(_tokenId);\\n        if (progress >= 100) {\\n            return 0;\\n        } else {\\n            return _calculateWAssetFees(amountLocked);\\n        }\\n    }\\n\\n    /* ----------- Pure functions --------------*/\\n\\n    /// @notice Get the amount of frAsset that will be minted\\n    /// @return Return the amount of frAsset that will be minted\\n    function _calculate_frToken(uint256 _lockedAmount, uint256 _timeToLock)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 token = (_timeToLock * _lockedAmount) / (N_DAYS * 1 days);\\n        return token;\\n    }\\n\\n    function _calculateProgress(\\n        uint256 _nBlock,\\n        uint256 _lockingDate,\\n        uint256 _maturityDate\\n    ) internal pure returns (uint256) {\\n        return\\n            (100 * (_nBlock - _lockingDate)) / (_maturityDate - _lockingDate);\\n    }\\n\\n    function _calculateWithdrawCost(uint256 _progress, uint256 _frToken)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 unlockCost;\\n        if (_progress >= 100) {\\n            unlockCost = 0;\\n        } else if (_progress < 67) {\\n            unlockCost =\\n                _frToken +\\n                ((((20 * _frToken) / 100) * (100 - ((_progress * 3) / 2))) /\\n                    100);\\n        } else {\\n            unlockCost = (_frToken * (100 - ((_progress - 67) * 3))) / 100;\\n        }\\n        return unlockCost;\\n    }\\n\\n    function _calculateWAssetFees(uint256 _lockedAmount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_lockedAmount * 25) / 10000;\\n    }\\n\\n    ///@dev calculate how much token is burnt and sent to staking contract\\n    function _calculateBurnAndSend(uint256 _tokenMinted, uint256 _penaltyPaid)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 toSend = (_penaltyPaid - _tokenMinted) / 2;\\n        uint256 toBurn = _tokenMinted + (_penaltyPaid - _tokenMinted) - toSend;\\n        return (toSend, toBurn);\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"IfrToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IfrToken is IERC20 {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"IwAsset.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IwAsset is IERC20 {}\\n\"\r\n    },\r\n    \"IMultiRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IMultiRewards {\\n    function notifyRewardAmount(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"INonFungiblePositionManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface INonFungiblePositionManager {\\n    function mint(address, uint256) external;\\n\\n    function burn(uint256) external;\\n\\n    function ownerOf(uint256) external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"TrueFreezeGovernor.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wAssetaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_frToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFTPosition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockingDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"lockedWAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WAssetPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frPenalty\",\"type\":\"uint256\"}],\"name\":\"withdrawedWAsset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnlockCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWAssetFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"lockWAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawWAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrueFreezeGovernor", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b4bd4628e6efb0cb521d9ec35050c758403203740000000000000000000000006c4e530a6f5cec117bbd1ed2937584a71c75ca22000000000000000000000000a45645ebb075a96d1c89511e28d3e9b94f3b7905", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}