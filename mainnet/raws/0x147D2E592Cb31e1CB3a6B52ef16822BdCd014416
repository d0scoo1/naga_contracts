{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PiArtTradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./library/ERC1155.sol\\\";\\r\\nimport \\\"./library/ERC1155MintBurn.sol\\\";\\r\\nimport \\\"./library/ERC1155Metadata.sol\\\";\\r\\n\\r\\ncontract OwnableDelegateProxy {}\\r\\n\\r\\ncontract ProxyRegistry {\\r\\n    mapping(address => OwnableDelegateProxy) public proxies;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title PiArtTradable\\r\\n * PiArtTradable - ERC1155 contract that whitelists an operator address, \\r\\n * has mint functionality, and supports useful standards from OpenZeppelin,\\r\\n  like _exists(), name(), symbol(), and totalSupply()\\r\\n */\\r\\ncontract PiArtTradable is\\r\\n    ERC1155,\\r\\n    ERC1155MintBurn,\\r\\n    ERC1155Metadata,\\r\\n    Ownable\\r\\n{\\r\\n    uint256 private _currentTokenID = 0;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n    mapping(uint256 => address) public creators;\\r\\n    mapping(uint256 => uint256) public tokenSupply;\\r\\n\\r\\n    // Contract name\\r\\n    string public name;\\r\\n    // Contract symbol\\r\\n    string public symbol;\\r\\n    // Platform fee\\r\\n    uint256 public platformFee;\\r\\n    // Platform fee receipient\\r\\n    address payable public feeReceipient;\\r\\n    // Pi Marketplace contract\\r\\n    address marketplace;\\r\\n    // Pi Bundle Marketplace contract\\r\\n    address bundleMarketplace;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _platformFee,\\r\\n        address payable _feeReceipient,\\r\\n        address _marketplace,\\r\\n        address _bundleMarketplace\\r\\n    ) public {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        platformFee = _platformFee;\\r\\n        feeReceipient = _feeReceipient;\\r\\n        marketplace = _marketplace;\\r\\n        bundleMarketplace = _bundleMarketplace;\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        require(_exists(_id), \\\"ERC721Tradable#uri: NONEXISTENT_TOKEN\\\");\\r\\n        return _tokenURIs[_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total quantity for a token ID\\r\\n     * @param _id uint256 ID of the token to query\\r\\n     * @return amount of token in existence\\r\\n     */\\r\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\r\\n        return tokenSupply[_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new token type and assigns _supply to an address\\r\\n     * @param _to owner address of the new token\\r\\n     * @param _supply Optional amount to supply the first owner\\r\\n     * @param _uri Optional URI for this token type\\r\\n     */\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _supply,\\r\\n        string calldata _uri\\r\\n    ) external payable {\\r\\n        require(msg.value >= platformFee, \\\"Insufficient funds to mint.\\\");\\r\\n\\r\\n        uint256 _id = _getNextTokenID();\\r\\n        _incrementTokenTypeId();\\r\\n\\r\\n        creators[_id] = msg.sender;\\r\\n        _setTokenURI(_id, _uri);\\r\\n\\r\\n        if (bytes(_uri).length > 0) {\\r\\n            emit URI(_uri, _id);\\r\\n        }\\r\\n\\r\\n        _mint(_to, _id, _supply, bytes(\\\"\\\"));\\r\\n        tokenSupply[_id] = _supply;\\r\\n\\r\\n        // Send ETH fee to fee recipient\\r\\n        (bool success, ) = feeReceipient.call{value: msg.value}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getCurrentTokenID() public view returns (uint256) {\\r\\n        return _currentTokenID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Override isApprovedForAll to whitelist Pi contracts to enable gas-less listings.\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool isOperator)\\r\\n    {\\r\\n        // Whitelist Pi marketplace, bundle marketplace contracts for easy trading.\\r\\n        if (marketplace == _operator || bundleMarketplace == _operator) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\r\\n     * @param _id uint256 ID of the token to query the existence of\\r\\n     * @return bool whether the token exists\\r\\n     */\\r\\n    function _exists(uint256 _id) public view returns (bool) {\\r\\n        return creators[_id] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculates the next token ID based on value of _currentTokenID\\r\\n     * @return uint256 for the next token ID\\r\\n     */\\r\\n    function _getNextTokenID() private view returns (uint256) {\\r\\n        return _currentTokenID.add(1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev increments the value of _currentTokenID\\r\\n     */\\r\\n    function _incrementTokenTypeId() private {\\r\\n        _currentTokenID++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the token URI for a given token.\\r\\n     * Reverts if the token ID does not exist.\\r\\n     * @param _id uint256 ID of the token to set its URI\\r\\n     * @param _uri string URI to assign\\r\\n     */\\r\\n    function _setTokenURI(uint256 _id, string memory _uri) internal {\\r\\n        require(_exists(_id), \\\"_setTokenURI: Token should exist\\\");\\r\\n        _tokenURIs[_id] = _uri;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ERC1155.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport './IERC165.sol';\\r\\nimport './IERC1155TokenReceiver.sol';\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\n/**\\r\\n * @dev Implementation of Multi-Token Standard contract\\r\\n */\\r\\ncontract ERC1155 is IERC165 {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |        Variables and Events       |\\r\\n  |__________________________________*/\\r\\n\\r\\n  // onReceive function signatures\\r\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\r\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n  // Objects balances\\r\\n  mapping (address => mapping(uint256 => uint256)) internal balances;\\r\\n\\r\\n  // Operator Functions\\r\\n  mapping (address => mapping(address => bool)) internal operators;\\r\\n\\r\\n  // Events\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |     Public Transfer Functions     |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _id      ID of the token type\\r\\n   * @param _amount  Transfered amount\\r\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    public\\r\\n  {\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n    // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\\r\\n\\r\\n    _safeTransferFrom(_from, _to, _id, _amount);\\r\\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _ids      IDs of each token type\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    public\\r\\n  {\\r\\n    // Requirements\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\r\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Internal Transfer Functions    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _id      ID of the token type\\r\\n   * @param _amount  Transfered amount\\r\\n   */\\r\\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\r\\n    internal\\r\\n  {\\r\\n    // Update balances\\r\\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\r\\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\r\\n   */\\r\\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Check if recipient is contract\\r\\n    if (_to.isContract()) {\\r\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\\r\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _ids      IDs of each token type\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   */\\r\\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n  {\\r\\n    require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of transfer to execute\\r\\n    uint256 nTransfer = _ids.length;\\r\\n\\r\\n    // Executing all transfers\\r\\n    for (uint256 i = 0; i < nTransfer; i++) {\\r\\n      // Update storage balance of previous bin\\r\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\r\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\r\\n   */\\r\\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Pass data if recipient is contract\\r\\n    if (_to.isContract()) {\\r\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\\r\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |         Operator Functions        |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\r\\n   * @param _operator  Address to add to the set of authorized operators\\r\\n   * @param _approved  True if the operator is approved, false to revoke approval\\r\\n   */\\r\\n  function setApprovalForAll(address _operator, bool _approved)\\r\\n    external\\r\\n  {\\r\\n    // Update operator status\\r\\n    operators[msg.sender][_operator] = _approved;\\r\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Queries the approval status of an operator for a given owner\\r\\n   * @param _owner     The owner of the Tokens\\r\\n   * @param _operator  Address of authorized operator\\r\\n   * @return isOperator Bool of approved for all\\r\\n   */\\r\\n  function isApprovedForAll(address _owner, address _operator)\\r\\n    public view virtual returns (bool isOperator)\\r\\n  {\\r\\n    return operators[_owner][_operator];\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |         Balance Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of an account's Tokens\\r\\n   * @param _owner  The address of the token holder\\r\\n   * @param _id     ID of the Token\\r\\n   * @return The _owner's balance of the Token type requested\\r\\n   */\\r\\n  function balanceOf(address _owner, uint256 _id)\\r\\n    public view returns (uint256)\\r\\n  {\\r\\n    return balances[_owner][_id];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of multiple account/token pairs\\r\\n   * @param _owners The addresses of the token holders\\r\\n   * @param _ids    ID of the Tokens\\r\\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n   */\\r\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\r\\n    public view returns (uint256[] memory)\\r\\n  {\\r\\n    require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\r\\n\\r\\n    // Variables\\r\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\r\\n\\r\\n    // Iterate over each owner and token ID\\r\\n    for (uint256 i = 0; i < _owners.length; i++) {\\r\\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\\r\\n    }\\r\\n\\r\\n    return batchBalances;\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |          ERC165 Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n   */\\r\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n  /**\\r\\n   * INTERFACE_SIGNATURE_ERC1155 =\\r\\n   * bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\r\\n   * bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\r\\n   */\\r\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\r\\n\\r\\n  /**\\r\\n   * @notice Query if a contract implements an interface\\r\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\r\\n   * @return `true` if the contract implements `_interfaceID` and\\r\\n   */\\r\\n  function supportsInterface(bytes4 _interfaceID) external view override returns (bool) {\\r\\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\r\\n        _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\\r\\n      return true;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/ERC1155MintBurn.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport './ERC1155.sol';\\r\\n/**\\r\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\r\\n *      a parent contract to be executed as they are `internal` functions\\r\\n */\\r\\ncontract ERC1155MintBurn is ERC1155 {\\r\\n\\r\\n\\r\\n  /****************************************|\\r\\n  |            Minting Functions           |\\r\\n  |_______________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Mint _amount of tokens of a given id\\r\\n   * @param _to      The address to mint tokens to\\r\\n   * @param _id      Token id to mint\\r\\n   * @param _amount  The amount to be minted\\r\\n   * @param _data    Data to pass if receiver is contract\\r\\n   */\\r\\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Add _amount\\r\\n    balances[_to][_id] = balances[_to][_id].add(_amount);\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\r\\n\\r\\n    // Calling onReceive method if recipient is contract\\r\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mint tokens for each ids in _ids\\r\\n   * @param _to       The address to mint tokens to\\r\\n   * @param _ids      Array of ids to mint\\r\\n   * @param _amounts  Array of amount of tokens to mint per id\\r\\n   * @param _data    Data to pass if receiver is contract\\r\\n   */\\r\\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of mints to execute\\r\\n    uint256 nMint = _ids.length;\\r\\n\\r\\n     // Executing all minting\\r\\n    for (uint256 i = 0; i < nMint; i++) {\\r\\n      // Update storage balance\\r\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit batch mint event\\r\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\r\\n\\r\\n    // Calling onReceive method if recipient is contract\\r\\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\\r\\n  }\\r\\n\\r\\n\\r\\n  /****************************************|\\r\\n  |            Burning Functions           |\\r\\n  |_______________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Burn _amount of tokens of a given token id\\r\\n   * @param _from    The address to burn tokens from\\r\\n   * @param _id      Token id to burn\\r\\n   * @param _amount  The amount to be burned\\r\\n   */\\r\\n  function _burn(address _from, uint256 _id, uint256 _amount)\\r\\n    internal\\r\\n  {\\r\\n    //Substract _amount\\r\\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\r\\n   * @param _from     The address to burn tokens from\\r\\n   * @param _ids      Array of token ids to burn\\r\\n   * @param _amounts  Array of the amount to be burned\\r\\n   */\\r\\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n  {\\r\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of mints to execute\\r\\n    uint256 nBurn = _ids.length;\\r\\n\\r\\n     // Executing all minting\\r\\n    for (uint256 i = 0; i < nBurn; i++) {\\r\\n      // Update storage balance\\r\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit batch mint event\\r\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/ERC1155Metadata.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @notice Contract that handles metadata related methods.\\r\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\r\\n *      Methods also assume that URI uses hex representation of token IDs.\\r\\n */\\r\\ncontract ERC1155Metadata {\\r\\n\\r\\n  // URI's default URI prefix\\r\\n  string internal baseMetadataURI;\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |     Metadata Public Function s    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\r\\n   * @dev URIs are defined in RFC 3986.\\r\\n   *      URIs are assumed to be deterministically generated based on token ID\\r\\n   *      Token IDs are assumed to be represented in their hex format in URIs\\r\\n   * @return URI string\\r\\n   */\\r\\n  function uri(uint256 _id) public view virtual returns (string memory) {\\r\\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \\\".json\\\"));\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Metadata Internal Functions    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Will emit default URI log event for corresponding token _id\\r\\n   * @param _tokenIDs Array of IDs of tokens to log default URI\\r\\n   */\\r\\n  function _logURIs(uint256[] memory _tokenIDs) internal {\\r\\n    string memory baseURL = baseMetadataURI;\\r\\n    string memory tokenURI;\\r\\n\\r\\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\\r\\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \\\".json\\\"));\\r\\n      emit URI(tokenURI, _tokenIDs[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Will emit a specific URI log event for corresponding token\\r\\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\\r\\n   * @param _URIs    The URIs of the specified _tokenIDs\\r\\n   */\\r\\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\\r\\n    require(_tokenIDs.length == _URIs.length, \\\"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\\\");\\r\\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\\r\\n      emit URI(_URIs[i], _tokenIDs[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Will update the base URL of token's URI\\r\\n   * @param _newBaseMetadataURI New base URL of token's URI\\r\\n   */\\r\\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\\r\\n    baseMetadataURI = _newBaseMetadataURI;\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Utility Internal Functions     |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Convert uint256 to string\\r\\n   * @param _i Unsigned integer to convert to string\\r\\n   */\\r\\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\r\\n    if (_i == 0) {\\r\\n      return \\\"0\\\";\\r\\n    }\\r\\n\\r\\n    uint256 j = _i;\\r\\n    uint256 ii = _i;\\r\\n    uint256 len;\\r\\n\\r\\n    // Get number of bytes\\r\\n    while (j != 0) {\\r\\n      len++;\\r\\n      j /= 10;\\r\\n    }\\r\\n\\r\\n    bytes memory bstr = new bytes(len);\\r\\n    uint256 k = len - 1;\\r\\n\\r\\n    // Get each individual ASCII\\r\\n    while (ii != 0) {\\r\\n      bstr[k--] = byte(uint8(48 + ii % 10));\\r\\n      ii /= 10;\\r\\n    }\\r\\n\\r\\n    // Convert to string\\r\\n    return string(bstr);\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/IERC165.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n/**\\r\\n * @title ERC165\\r\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\r\\n */\\r\\ninterface IERC165 {\\r\\n\\r\\n    /**\\r\\n     * @notice Query if a contract implements an interface\\r\\n     * @dev Interface identification is specified in ERC-165. This function\\r\\n     * uses less than 30,000 gas\\r\\n     * @param _interfaceId The interface identifier, as specified in ERC-165\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceId)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev ERC-1155 interface for accepting safe transfers.\\r\\n */\\r\\ninterface IERC1155TokenReceiver {\\r\\n\\r\\n  /**\\r\\n   * @notice Handle the receipt of a single ERC1155 token type\\r\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\r\\n   * This function MAY throw to revert and reject the transfer\\r\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\r\\n   * Note: The token contract address is always the message sender\\r\\n   * @param _operator  The address which called the `safeTransferFrom` function\\r\\n   * @param _from      The address which previously owned the token\\r\\n   * @param _id        The id of the token being transferred\\r\\n   * @param _amount    The amount of tokens being transferred\\r\\n   * @param _data      Additional data with no specified format\\r\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n   */\\r\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\r\\n\\r\\n  /**\\r\\n   * @notice Handle the receipt of multiple ERC1155 token types\\r\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\r\\n   * This function MAY throw to revert and reject the transfer\\r\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\r\\n   * Note: The token contract address is always the message sender\\r\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\r\\n   * @param _from      The address which previously owned the token\\r\\n   * @param _ids       An array containing ids of each token being transferred\\r\\n   * @param _amounts   An array containing amounts of each token being transferred\\r\\n   * @param _data      Additional data with no specified format\\r\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n   */\\r\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\r\\n\\r\\n  /**\\r\\n   * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\\r\\n   * @param  interfaceID The ERC-165 interface ID that is queried for support.s\\r\\n   * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\\r\\n   *      This function MUST NOT consume more than 5,000 gas.\\r\\n   * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bundleMarketplace\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"_exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PiArtTradable", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000001158e460913d0000000000000000000000000000014891cd5d3aa2d858b1daeb1edeeab605eebcfcb000000000000000000000000890c41e504b3313d0444c6f65ef44f144417fa5a0000000000000000000000009ec14fab1413846f83863785d6f1cc0bac4e27750000000000000000000000000000000000000000000000000000000000000005506941727400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044641525400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}