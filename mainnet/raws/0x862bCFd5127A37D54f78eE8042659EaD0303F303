{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PartnerStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../contracts/interfaces/IPartnerStaking.sol\\\";\\nimport \\\"../contracts/interfaces/IMaticX.sol\\\";\\n\\ncontract PartnerStaking is\\n\\tIPartnerStaking,\\n\\tInitializable,\\n\\tAccessControlUpgradeable,\\n\\tPausableUpgradeable\\n{\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tmapping(uint32 => Partner) public partners;\\n\\tmapping(address => uint32) public partnerAddressToId;\\n\\tuint32 public override currentPartnerId;\\n\\tUnstakeRequest[] public unstakeRequests;\\n\\n\\tmapping(uint32 => Batch) public batches;\\n\\tuint32 public override currentBatchId;\\n\\tuint8 public override feeReimbursalPercent;\\n\\tuint256 public override feeReimbursalPool;\\n\\n\\taddress private foundationAddress;\\n\\tmapping(address => uint64) private foundationApprovedAddresses;\\n\\taddress private maticX;\\n\\taddress private polygonERC20;\\n\\taddress private manager;\\n\\taddress private disbursalBotAddress;\\n\\taddress private trustedForwarder;\\n\\n\\tfunction initialize(\\n\\t\\taddress _foundationAddress,\\n\\t\\taddress _polygonERC20,\\n\\t\\taddress _maticX,\\n\\t\\taddress _manager,\\n\\t\\taddress _disbursalBotAddress\\n\\t) external initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t__Pausable_init();\\n\\n\\t\\tfoundationAddress = _foundationAddress;\\n\\t\\tfoundationApprovedAddresses[foundationAddress] = uint64(\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t\\tmaticX = _maticX;\\n\\t\\tmanager = _manager;\\n\\t\\tdisbursalBotAddress = _disbursalBotAddress;\\n\\t\\tpolygonERC20 = _polygonERC20;\\n\\t\\tfeeReimbursalPercent = 5;\\n\\n\\t\\t// create a new batch\\n\\t\\tcurrentBatchId = 1;\\n\\t\\tBatch storage _currentBatch = batches[currentBatchId];\\n\\t\\t_currentBatch.createdAt = uint64(block.timestamp);\\n\\t\\t_currentBatch.status = BatchStatus.CREATED;\\n\\t}\\n\\n\\tmodifier onlyFoundation() {\\n\\t\\trequire(_msgSender() == foundationAddress, \\\"Not Authorized\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyManager() {\\n\\t\\trequire(_msgSender() == manager, \\\"Not Authorized\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyDisbursalBot() {\\n\\t\\trequire(_msgSender() == disbursalBotAddress, \\\"Not Authorized\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction addFoundationApprovedAddress(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyFoundation\\n\\t{\\n\\t\\trequire(_address != address(0), \\\"Invalid Address\\\");\\n\\t\\tfoundationApprovedAddresses[_address] = uint64(block.timestamp);\\n\\t\\temit AddFoundationApprovedAddress(_address, block.timestamp);\\n\\t}\\n\\n\\tfunction removeFoundationApprovedAddress(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyFoundation\\n\\t{\\n\\t\\trequire(_address != address(0), \\\"Invalid Address\\\");\\n\\t\\tfoundationApprovedAddresses[_address] = uint64(0);\\n\\t\\temit RemoveFoundationApprovedAddress(_address, block.timestamp);\\n\\t}\\n\\n\\tfunction isFoundationApprovedAddress(address _address)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn (foundationApprovedAddresses[_address] > 0);\\n\\t}\\n\\n\\tfunction setDisbursalBotAddress(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyManager\\n\\t{\\n\\t\\trequire(_address != address(0), \\\"Invalid Address\\\");\\n\\t\\tdisbursalBotAddress = _address;\\n\\n\\t\\temit SetDisbursalBotAddress(_address, block.timestamp);\\n\\t}\\n\\n\\tfunction isDisbursalBotAddress(address _address)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _address == disbursalBotAddress;\\n\\t}\\n\\n\\tfunction setTrustedForwarder(address _address)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyManager\\n\\t{\\n\\t\\ttrustedForwarder = _address;\\n\\n\\t\\temit SetTrustedForwarder(_address);\\n\\t}\\n\\n\\tfunction isTrustedForwarder(address _address)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _address == trustedForwarder;\\n\\t}\\n\\n\\tfunction _msgSender()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address sender)\\n\\t{\\n\\t\\tif (isTrustedForwarder(msg.sender)) {\\n\\t\\t\\t// The assembly code is more direct than the Solidity version using `abi.decode`.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tsender := shr(96, calldataload(sub(calldatasize(), 20)))\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn super._msgSender();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setFeeReimbursalPercent(uint8 _feeReimbursalPercent)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyManager\\n\\t{\\n\\t\\tuint8 maticXFeePercent = IMaticX(maticX).feePercent();\\n\\t\\trequire(\\n\\t\\t\\t_feeReimbursalPercent <= maticXFeePercent,\\n\\t\\t\\t\\\"_feePercent must not exceed maticX fee percent\\\"\\n\\t\\t);\\n\\n\\t\\tfeeReimbursalPercent = _feeReimbursalPercent;\\n\\n\\t\\temit SetFeeReimbursalPercent(_feeReimbursalPercent, block.timestamp);\\n\\t}\\n\\n\\tfunction provideFeeReimbursalMatic(uint256 _amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t{\\n\\t\\trequire(_amount > 0, \\\"Invalid amount\\\");\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\n\\t\\tfeeReimbursalPool += _amount;\\n\\t\\temit ProvideFeeReimbursalMatic(_amount, block.timestamp);\\n\\t}\\n\\n\\tfunction getValidatedPartner(uint32 _partnerId)\\n\\t\\tinternal\\n\\t\\treturns (Partner storage)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tpartners[_partnerId].walletAddress != address(0),\\n\\t\\t\\t\\\"Invalid PartnerId\\\"\\n\\t\\t);\\n\\t\\treturn partners[_partnerId];\\n\\t}\\n\\n\\tfunction registerPartner(\\n\\t\\taddress _walletAddress,\\n\\t\\tstring calldata _name,\\n\\t\\tstring calldata _website,\\n\\t\\tbytes calldata _metadata,\\n\\t\\tDisbursalCycleType _disbursalCycle,\\n\\t\\tuint32 _disbursalCount,\\n\\t\\tuint256 _pastManualRewards\\n\\t) external override whenNotPaused onlyFoundation returns (uint32) {\\n\\t\\trequire(\\n\\t\\t\\tpartnerAddressToId[_walletAddress] == 0,\\n\\t\\t\\t\\\"This partner is already registered\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_disbursalCount > 0,\\n\\t\\t\\t\\\"Disbursal Count for partner delegation cannot be 0\\\"\\n\\t\\t);\\n\\t\\tcurrentPartnerId += 1;\\n\\t\\tuint32 _partnerId = currentPartnerId;\\n\\t\\tpartners[_partnerId] = Partner(\\n\\t\\t\\t_disbursalCount, //disbursalRemaining\\n\\t\\t\\t_disbursalCount, //disbursalCount\\n\\t\\t\\tuint64(block.timestamp), //registeredAt\\n\\t\\t\\t0, //totalMaticStaked;\\n\\t\\t\\t0, //totalMaticX\\n\\t\\t\\t_pastManualRewards, //pastManualRewards\\n\\t\\t\\t_walletAddress, //walletAddress;\\n\\t\\t\\t_name, //name\\n\\t\\t\\t_website, //website\\n\\t\\t\\t_metadata, //metadata;\\n\\t\\t\\tPartnerStatus.ACTIVE, //status;\\n\\t\\t\\t_disbursalCycle //disbursalCycle\\n\\t\\t);\\n\\t\\tpartnerAddressToId[_walletAddress] = _partnerId;\\n\\t\\temit RegisterPartner(_partnerId, _walletAddress, block.timestamp);\\n\\t\\treturn _partnerId;\\n\\t}\\n\\n\\tfunction changePartnerWalletAddress(\\n\\t\\tuint32 _partnerId,\\n\\t\\taddress _newWalletAddress\\n\\t) external override onlyFoundation returns (Partner memory) {\\n\\t\\tPartner storage _partner = getValidatedPartner(_partnerId);\\n\\t\\trequire(_newWalletAddress != address(0), \\\"Invalid Addresses\\\");\\n\\t\\trequire(\\n\\t\\t\\tpartnerAddressToId[_newWalletAddress] == 0,\\n\\t\\t\\t\\\"New Wallet address is already assigned to other partner\\\"\\n\\t\\t);\\n\\t\\taddress _oldWalletAddress = _partner.walletAddress;\\n\\t\\t_partner.walletAddress = _newWalletAddress;\\n\\t\\tpartnerAddressToId[_newWalletAddress] = _partnerId;\\n\\t\\tpartnerAddressToId[_oldWalletAddress] = 0;\\n\\n\\t\\temit ChangePartnerWalletAddress(\\n\\t\\t\\t_partnerId,\\n\\t\\t\\t_oldWalletAddress,\\n\\t\\t\\t_newWalletAddress,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t\\treturn _partner;\\n\\t}\\n\\n\\tfunction changePartnerDisbursalCount(\\n\\t\\tuint32 _partnerId,\\n\\t\\tuint32 _newDisbursalCount\\n\\t) external override onlyFoundation returns (Partner memory) {\\n\\t\\tPartner memory _partner = getValidatedPartner(_partnerId);\\n\\t\\trequire(\\n\\t\\t\\t_newDisbursalCount != _partner.disbursalCount,\\n\\t\\t\\t\\\"Nothing to change\\\"\\n\\t\\t);\\n\\t\\tif (_newDisbursalCount > _partner.disbursalCount) {\\n\\t\\t\\tpartners[_partnerId].disbursalRemaining +=\\n\\t\\t\\t\\t_newDisbursalCount -\\n\\t\\t\\t\\t_partner.disbursalCount;\\n\\t\\t\\tpartners[_partnerId].disbursalCount = _newDisbursalCount;\\n\\t\\t} else {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_partner.disbursalCount - _newDisbursalCount <=\\n\\t\\t\\t\\t\\t_partner.disbursalRemaining,\\n\\t\\t\\t\\t\\\"Invalid Disbursal count\\\"\\n\\t\\t\\t);\\n\\t\\t\\tpartners[_partnerId].disbursalRemaining -=\\n\\t\\t\\t\\t_partner.disbursalCount -\\n\\t\\t\\t\\t_newDisbursalCount;\\n\\t\\t\\tpartners[_partnerId].disbursalCount = _newDisbursalCount;\\n\\t\\t}\\n\\t\\temit ChangePartnerDisbursalCount(\\n\\t\\t\\t_partnerId,\\n\\t\\t\\t_newDisbursalCount,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t\\treturn _partner;\\n\\t}\\n\\n\\tfunction changePartnerStatus(uint32 _partnerId, bool _isActive)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyFoundation\\n\\t\\treturns (Partner memory)\\n\\t{\\n\\t\\tPartner storage _partner = getValidatedPartner(_partnerId);\\n\\t\\t_partner.status = _isActive\\n\\t\\t\\t? PartnerStatus.ACTIVE\\n\\t\\t\\t: PartnerStatus.INACTIVE;\\n\\t\\temit ChangePartnerStatus(\\n\\t\\t\\t_partnerId,\\n\\t\\t\\t_partner.walletAddress,\\n\\t\\t\\t_isActive,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t\\treturn _partner;\\n\\t}\\n\\n\\tfunction stake(uint32 _partnerId, uint256 _maticAmount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyFoundation\\n\\t{\\n\\t\\trequire(_maticAmount > 0, \\\"Invalid amount\\\");\\n\\t\\tPartner storage partner = getValidatedPartner(_partnerId);\\n\\t\\trequire(partner.status == PartnerStatus.ACTIVE, \\\"Inactive Partner\\\");\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_maticAmount\\n\\t\\t);\\n\\t\\tIERC20Upgradeable(polygonERC20).safeApprove(maticX, _maticAmount);\\n\\t\\tuint256 _maticXAmount = IMaticX(maticX).submit(_maticAmount);\\n\\t\\tpartner.totalMaticStaked += _maticAmount;\\n\\t\\tpartner.totalMaticX += _maticXAmount;\\n\\t\\temit FoundationStake(\\n\\t\\t\\t_partnerId,\\n\\t\\t\\tpartner.walletAddress,\\n\\t\\t\\t_maticAmount,\\n\\t\\t\\t_maticXAmount,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction unStake(uint32 _partnerId, uint256 _maticAmount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyFoundation\\n\\t{\\n\\t\\tPartner storage partner = getValidatedPartner(_partnerId);\\n\\t\\trequire(\\n\\t\\t\\t_maticAmount > 0 && _maticAmount <= partner.totalMaticStaked,\\n\\t\\t\\t\\\"Invalid amount\\\"\\n\\t\\t);\\n\\n\\t\\t(uint256 _maticXAmount, , ) = IMaticX(maticX).convertMaticToMaticX(\\n\\t\\t\\t_maticAmount\\n\\t\\t);\\n\\n\\t\\tIERC20Upgradeable(maticX).safeApprove(maticX, _maticXAmount);\\n\\t\\tIMaticX(maticX).requestWithdraw(_maticXAmount);\\n\\n\\t\\tunstakeRequests.push(\\n\\t\\t\\tUnstakeRequest(\\n\\t\\t\\t\\t_partnerId, // partnerId\\n\\t\\t\\t\\t0, // batchId\\n\\t\\t\\t\\t_maticXAmount //maticXBurned\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tpartner.totalMaticStaked -= _maticAmount;\\n\\t\\tpartner.totalMaticX -= _maticXAmount;\\n\\t\\temit FoundationStake(\\n\\t\\t\\t_partnerId,\\n\\t\\t\\tpartner.walletAddress,\\n\\t\\t\\t_maticAmount,\\n\\t\\t\\t_maticXAmount,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction withdrawUnstakedAmount(uint256 _reqIdx)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyFoundation\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_reqIdx >= 0 && _reqIdx < unstakeRequests.length,\\n\\t\\t\\t\\\"Invalid Request Index\\\"\\n\\t\\t);\\n\\t\\tUnstakeRequest memory currentRequest = unstakeRequests[_reqIdx];\\n\\t\\trequire(\\n\\t\\t\\tcurrentRequest.partnerId > 0,\\n\\t\\t\\t\\\"Not a foundation unstake request\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 balanceBeforeClaim = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tIMaticX(maticX).claimWithdrawal(_reqIdx);\\n\\t\\tuint256 amountToClaim = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t) - balanceBeforeClaim;\\n\\n\\t\\tunstakeRequests[_reqIdx] = unstakeRequests[unstakeRequests.length - 1];\\n\\t\\tunstakeRequests.pop();\\n\\n\\t\\tIERC20Upgradeable(polygonERC20).safeTransfer(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tamountToClaim\\n\\t\\t);\\n\\t\\temit FoundationWithdraw(_reqIdx, amountToClaim, block.timestamp);\\n\\t}\\n\\n\\tfunction addDueRewardsToCurrentBatch(uint32[] calldata _partnerIds)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyDisbursalBot\\n\\t{\\n\\t\\tBatch storage _currentBatch = batches[currentBatchId];\\n\\t\\trequire(\\n\\t\\t\\t_currentBatch.status == BatchStatus.CREATED,\\n\\t\\t\\t\\\"Invalid Batch Status\\\"\\n\\t\\t);\\n\\n\\t\\t(uint256 _maticToMaticXRate, , ) = IMaticX(maticX).convertMaticToMaticX(\\n\\t\\t\\t10**18\\n\\t\\t);\\n\\n\\t\\tfor (uint32 i = 0; i < _partnerIds.length; i++) {\\n\\t\\t\\tuint32 _partnerId = _partnerIds[i];\\n\\t\\t\\tPartner storage _currentPartner = getValidatedPartner(_partnerId);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_currentPartner.status == PartnerStatus.ACTIVE,\\n\\t\\t\\t\\t\\\"Inactive Partner\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_currentPartner.disbursalRemaining > 0,\\n\\t\\t\\t\\t\\\"No disbursals remaining for this partner\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 _reward = _currentPartner.totalMaticX -\\n\\t\\t\\t\\t((_currentPartner.totalMaticStaked * _maticToMaticXRate) /\\n\\t\\t\\t\\t\\t10**18);\\n\\n\\t\\t\\tif (_reward == 0) continue;\\n\\n\\t\\t\\t_currentPartner.totalMaticX -= _reward;\\n\\n\\t\\t\\t_currentBatch.maticXBurned += _reward;\\n\\t\\t\\t// partner has already been visited\\n\\t\\t\\tif (_currentBatch.partnersShare[_partnerId].maticXUnstaked > 0) {\\n\\t\\t\\t\\t_reward += _currentBatch\\n\\t\\t\\t\\t\\t.partnersShare[_partnerId]\\n\\t\\t\\t\\t\\t.maticXUnstaked;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpartners[_partnerId].disbursalRemaining--;\\n\\t\\t\\t}\\n\\t\\t\\t_currentBatch.partnersShare[_partnerId] = PartnerUnstakeShare(\\n\\t\\t\\t\\t_reward,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t\\temit UnstakePartnerReward(\\n\\t\\t\\t\\t_partnerId,\\n\\t\\t\\t\\t_currentPartner.walletAddress,\\n\\t\\t\\t\\tcurrentBatchId,\\n\\t\\t\\t\\t_reward,\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unDelegateCurrentBatch()\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyDisbursalBot\\n\\t{\\n\\t\\tuint32 _batchId = currentBatchId;\\n\\t\\tBatch storage _currentBatch = batches[_batchId];\\n\\t\\trequire(\\n\\t\\t\\t_currentBatch.maticXBurned > 0,\\n\\t\\t\\t\\\"Cannot undelegate empty batch\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_currentBatch.status == BatchStatus.CREATED,\\n\\t\\t\\t\\\"Invalid Batch Status\\\"\\n\\t\\t);\\n\\n\\t\\tIERC20Upgradeable(maticX).safeApprove(\\n\\t\\t\\tmaticX,\\n\\t\\t\\t_currentBatch.maticXBurned\\n\\t\\t);\\n\\t\\tIMaticX(maticX).requestWithdraw(_currentBatch.maticXBurned);\\n\\t\\tuint32 _idx = uint32(unstakeRequests.length);\\n\\t\\tIMaticX.WithdrawalRequest[] memory withdrawalRequests = IMaticX(maticX)\\n\\t\\t\\t.getUserWithdrawalRequests(address(this));\\n\\t\\tuint256 _requestEpoch = withdrawalRequests[_idx].requestEpoch;\\n\\t\\tunstakeRequests.push(\\n\\t\\t\\tUnstakeRequest(\\n\\t\\t\\t\\t0, // partnerId\\n\\t\\t\\t\\t_batchId,\\n\\t\\t\\t\\t_currentBatch.maticXBurned //maticXBurned\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t_currentBatch.undelegatedAt = uint64(block.timestamp);\\n\\t\\t_currentBatch.withdrawalEpoch = uint64(_requestEpoch);\\n\\t\\t_currentBatch.status = BatchStatus.UNDELEGATED;\\n\\n\\t\\t// create a new batch\\n\\t\\tcurrentBatchId += 1;\\n\\t\\tBatch storage _newBatch = batches[currentBatchId];\\n\\t\\t_newBatch.createdAt = uint64(block.timestamp);\\n\\t\\t_newBatch.status = BatchStatus.CREATED;\\n\\n\\t\\temit UndelegateBatch(\\n\\t\\t\\t_batchId,\\n\\t\\t\\t_currentBatch.maticXBurned,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\n\\t\\temit CreateBatch(currentBatchId, block.timestamp);\\n\\t}\\n\\n\\tfunction getPartnerShare(uint32 _batchId, uint32 _partnerId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\treturns (PartnerUnstakeShare memory)\\n\\t{\\n\\t\\trequire(batches[_batchId].createdAt > 0, \\\"Invalid Batch Id\\\");\\n\\t\\treturn batches[_batchId].partnersShare[_partnerId];\\n\\t}\\n\\n\\tfunction claimUnstakeRewards(uint32 _reqIdx)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\twhenNotPaused\\n\\t\\tonlyDisbursalBot\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_reqIdx >= 0 && _reqIdx < unstakeRequests.length,\\n\\t\\t\\t\\\"Invalid Request Index\\\"\\n\\t\\t);\\n\\t\\tuint32 _batchId = unstakeRequests[_reqIdx].batchId;\\n\\t\\trequire(_batchId > 0, \\\"Not a disbursal reward unstake request\\\");\\n\\t\\tBatch storage _currentBatch = batches[_batchId];\\n\\t\\trequire(\\n\\t\\t\\t_currentBatch.status == BatchStatus.UNDELEGATED,\\n\\t\\t\\t\\\"Invalid Batch Status\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 balanceBeforeClaim = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\tIMaticX(maticX).claimWithdrawal(_reqIdx);\\n\\t\\tuint256 _maticReceived = IERC20Upgradeable(polygonERC20).balanceOf(\\n\\t\\t\\taddress(this)\\n\\t\\t) - balanceBeforeClaim;\\n\\n\\t\\tunstakeRequests[_reqIdx] = unstakeRequests[unstakeRequests.length - 1];\\n\\t\\tunstakeRequests.pop();\\n\\n\\t\\t_currentBatch.maticReceived = _maticReceived;\\n\\t\\t_currentBatch.claimedAt = uint64(block.timestamp);\\n\\t\\t_currentBatch.status = BatchStatus.CLAIMED;\\n\\t\\temit ClaimBatch(_batchId, _maticReceived, block.timestamp);\\n\\t}\\n\\n\\tfunction disbursePartnersReward(\\n\\t\\tuint32 _batchId,\\n\\t\\tuint32[] calldata _partnerIds\\n\\t) external override whenNotPaused onlyDisbursalBot {\\n\\t\\tBatch storage _currentBatch = batches[_batchId];\\n\\t\\trequire(\\n\\t\\t\\t_currentBatch.status == BatchStatus.CLAIMED,\\n\\t\\t\\t\\\"Batch Rewards haven't been claimed yet\\\"\\n\\t\\t);\\n\\n\\t\\tuint8 _maticXFeePercent = IMaticX(maticX).feePercent();\\n\\t\\tuint8 _feeReimbursalPercent = feeReimbursalPercent;\\n\\n\\t\\tfor (uint32 i = 0; i < _partnerIds.length; i++) {\\n\\t\\t\\tuint32 _partnerId = _partnerIds[i];\\n\\t\\t\\tPartnerUnstakeShare memory _partnerShare = _currentBatch\\n\\t\\t\\t\\t.partnersShare[_partnerId];\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_partnerShare.maticXUnstaked > 0,\\n\\t\\t\\t\\t\\\"No Partner Share for this partnerId\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpartners[_partnerId].status == PartnerStatus.ACTIVE,\\n\\t\\t\\t\\t\\\"Inactive Partner\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_partnerShare.disbursedAt == 0,\\n\\t\\t\\t\\t\\\"Partner Reward has already been disbursed\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_currentBatch.partnersShare[_partnerId].disbursedAt = uint64(\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 _maticShare = (_currentBatch.maticReceived *\\n\\t\\t\\t\\t_partnerShare.maticXUnstaked) / _currentBatch.maticXBurned;\\n\\n\\t\\t\\tuint256 _reimbursedFee = (_maticShare *\\n\\t\\t\\t\\t(uint256(_feeReimbursalPercent))) /\\n\\t\\t\\t\\tuint256(100 - _maticXFeePercent);\\n\\n\\t\\t\\t// save the state\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfeeReimbursalPool >= _reimbursedFee,\\n\\t\\t\\t\\t\\\"Not enough balance to reimburse fee\\\"\\n\\t\\t\\t);\\n\\t\\t\\tfeeReimbursalPool -= _reimbursedFee;\\n\\n\\t\\t\\t// transfer rewards\\n\\t\\t\\tIERC20Upgradeable(polygonERC20).safeTransfer(\\n\\t\\t\\t\\tpartners[_partnerId].walletAddress,\\n\\t\\t\\t\\t_maticShare + _reimbursedFee\\n\\t\\t\\t);\\n\\t\\t\\temit DisbursePartnerReward(\\n\\t\\t\\t\\t_partnerId,\\n\\t\\t\\t\\tpartners[_partnerId].walletAddress,\\n\\t\\t\\t\\t_batchId,\\n\\t\\t\\t\\t_maticShare + _reimbursedFee,\\n\\t\\t\\t\\t_reimbursedFee,\\n\\t\\t\\t\\t_partnerShare.maticXUnstaked,\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPartnerStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.7;\\n\\ninterface IPartnerStaking {\\n\\tfunction currentPartnerId() external view returns (uint32);\\n\\n\\tfunction currentBatchId() external view returns (uint32);\\n\\n\\tfunction feeReimbursalPercent() external view returns (uint8);\\n\\n\\tfunction feeReimbursalPool() external view returns (uint256);\\n\\n\\tenum DisbursalCycleType {\\n\\t\\tWEEK,\\n\\t\\tFORTNIGHT,\\n\\t\\tMONTH,\\n\\t\\tQUARTER,\\n\\t\\tYEAR\\n\\t}\\n\\tenum PartnerStatus {\\n\\t\\tACTIVE,\\n\\t\\tINACTIVE\\n\\t}\\n\\tstruct Partner {\\n\\t\\tuint32 disbursalRemaining;\\n\\t\\tuint32 disbursalCount;\\n\\t\\tuint64 registeredAt;\\n\\t\\tuint256 totalMaticStaked;\\n\\t\\tuint256 totalMaticX;\\n\\t\\tuint256 pastManualRewards;\\n\\t\\taddress walletAddress;\\n\\t\\tstring name;\\n\\t\\tstring website;\\n\\t\\tbytes metadata;\\n\\t\\tPartnerStatus status;\\n\\t\\tDisbursalCycleType disbursalCycle;\\n\\t}\\n\\n\\t///@@dev UI needs to differentiate between foundation unstake request and partner reward unstake request for a request, _batchId > 0 -> partner reward request, _partnerId > 0 -> foundation reward request\\n\\tstruct UnstakeRequest {\\n\\t\\tuint32 partnerId;\\n\\t\\tuint32 batchId;\\n\\t\\tuint256 maticXBurned;\\n\\t}\\n\\n\\tstruct PartnerUnstakeShare {\\n\\t\\tuint256 maticXUnstaked;\\n\\t\\tuint64 disbursedAt;\\n\\t}\\n\\tenum BatchStatus {\\n\\t\\tCREATED,\\n\\t\\tUNDELEGATED,\\n\\t\\tCLAIMED\\n\\t}\\n\\tstruct Batch {\\n\\t\\tuint64 createdAt;\\n\\t\\tuint64 undelegatedAt;\\n\\t\\tuint64 claimedAt;\\n\\t\\tuint64 withdrawalEpoch;\\n\\t\\tuint256 maticXBurned;\\n\\t\\tuint256 maticReceived;\\n\\t\\tBatchStatus status;\\n\\t\\tmapping(uint32 => PartnerUnstakeShare) partnersShare;\\n\\t}\\n\\n\\t//events\\n\\tevent AddFoundationApprovedAddress(address _address, uint256 _timestamp);\\n\\n\\tevent RemoveFoundationApprovedAddress(address _address, uint256 _timestamp);\\n\\n\\tevent SetDisbursalBotAddress(address _address, uint256 _timestamp);\\n\\n\\tevent SetTrustedForwarder(address _address);\\n\\n\\tevent SetFeeReimbursalPercent(\\n\\t\\tuint8 _feeReimbursalPercent,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent ProvideFeeReimbursalMatic(uint256 _amount, uint256 _timestamp);\\n\\n\\tevent RegisterPartner(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _walletAddress,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent ChangePartnerWalletAddress(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _oldWalletAddress,\\n\\t\\taddress indexed _newWalletAddress,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent ChangePartnerDisbursalCount(\\n\\t\\tuint32 indexed partnerId,\\n\\t\\tuint32 _newDisbursalCount,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent ChangePartnerStatus(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _partnerAddress,\\n\\t\\tbool _isActive,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent FoundationStake(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _partnerAddress,\\n\\t\\tuint256 _maticAmount,\\n\\t\\tuint256 _maticXMinted,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent FoundationUnStake(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _partnerAddress,\\n\\t\\tuint256 _maticAmount,\\n\\t\\tuint256 _maticXBurned,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent FoundationWithdraw(\\n\\t\\tuint256 _reqIdx,\\n\\t\\tuint256 _maticAmount,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent CreateBatch(uint32 indexed _batchId, uint256 _timestamp);\\n\\n\\tevent UndelegateBatch(\\n\\t\\tuint32 indexed _batchId,\\n\\t\\tuint256 _maticXBurned,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent ClaimBatch(\\n\\t\\tuint32 indexed _batchId,\\n\\t\\tuint256 _maticAmount,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent UnstakePartnerReward(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _partnerAddress,\\n\\t\\tuint32 indexed _batchId,\\n\\t\\tuint256 _maticXUnstaked,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tevent DisbursePartnerReward(\\n\\t\\tuint32 indexed _partnerId,\\n\\t\\taddress indexed _partnerAddress,\\n\\t\\tuint32 indexed _batchId,\\n\\t\\tuint256 _maticDisbursed,\\n\\t\\tuint256 _reimbursedFee,\\n\\t\\tuint256 _maticXUsed,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\n\\tfunction addFoundationApprovedAddress(address _address) external;\\n\\n\\tfunction removeFoundationApprovedAddress(address _address) external;\\n\\n\\tfunction setDisbursalBotAddress(address _address) external;\\n\\n\\tfunction setTrustedForwarder(address _address) external;\\n\\n\\tfunction setFeeReimbursalPercent(uint8 _feeReimbursalPercent) external;\\n\\n\\tfunction provideFeeReimbursalMatic(uint256 _amount) external;\\n\\n\\tfunction registerPartner(\\n\\t\\taddress _walletAddress,\\n\\t\\tstring calldata _name,\\n\\t\\tstring calldata _website,\\n\\t\\tbytes calldata _metadata,\\n\\t\\tDisbursalCycleType _disbursalCycle,\\n\\t\\tuint32 _totalFrequency,\\n\\t\\tuint256 _pastManualRewards\\n\\t) external returns (uint32);\\n\\n\\tfunction changePartnerWalletAddress(\\n\\t\\tuint32 _partnerId,\\n\\t\\taddress _newWalletAddress\\n\\t) external returns (Partner memory);\\n\\n\\tfunction changePartnerStatus(uint32 _partnerId, bool _isActive)\\n\\t\\texternal\\n\\t\\treturns (Partner memory);\\n\\n\\tfunction changePartnerDisbursalCount(\\n\\t\\tuint32 _partnerId,\\n\\t\\tuint32 _newDisbursalCount\\n\\t) external returns (Partner memory);\\n\\n\\tfunction stake(uint32 _partnerId, uint256 _maticAmount) external;\\n\\n\\tfunction unStake(uint32 _partnerId, uint256 _maticAmount) external;\\n\\n\\tfunction withdrawUnstakedAmount(uint256 _reqIdx) external;\\n\\n\\tfunction addDueRewardsToCurrentBatch(uint32[] calldata _partnerIds)\\n\\t\\texternal;\\n\\n\\tfunction unDelegateCurrentBatch() external;\\n\\n\\tfunction getPartnerShare(uint32 _batchId, uint32 _partnerId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (PartnerUnstakeShare memory);\\n\\n\\tfunction claimUnstakeRewards(uint32 _reqIdx) external;\\n\\n\\tfunction disbursePartnersReward(\\n\\t\\tuint32 _batchId,\\n\\t\\tuint32[] calldata _partnerIds\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaticX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IValidatorShare.sol\\\";\\nimport \\\"./IValidatorRegistry.sol\\\";\\n\\n/// @title MaticX interface.\\ninterface IMaticX is IERC20Upgradeable {\\n\\tstruct WithdrawalRequest {\\n\\t\\tuint256 validatorNonce;\\n\\t\\tuint256 requestEpoch;\\n\\t\\taddress validatorAddress;\\n\\t}\\n\\n\\tfunction version() external view returns (string memory);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction feePercent() external view returns (uint8);\\n\\n\\tfunction instantPoolOwner() external view returns (address);\\n\\n\\tfunction instantPoolMatic() external view returns (uint256);\\n\\n\\tfunction instantPoolMaticX() external view returns (uint256);\\n\\n\\tfunction fxStateRootTunnel() external view returns (address);\\n\\n\\tfunction initialize(\\n\\t\\taddress _validatorRegistry,\\n\\t\\taddress _stakeManager,\\n\\t\\taddress _token,\\n\\t\\taddress _manager,\\n\\t\\taddress _instant_pool_manager,\\n\\t\\taddress _treasury\\n\\t) external;\\n\\n\\tfunction provideInstantPoolMatic(uint256 _amount) external;\\n\\n\\tfunction provideInstantPoolMaticX(uint256 _amount) external;\\n\\n\\tfunction withdrawInstantPoolMaticX(uint256 _amount) external;\\n\\n\\tfunction withdrawInstantPoolMatic(uint256 _amount) external;\\n\\n\\tfunction mintMaticXToInstantPool() external;\\n\\n\\tfunction swapMaticForMaticXViaInstantPool(uint256 _amount) external;\\n\\n\\tfunction submit(uint256 _amount) external returns (uint256);\\n\\n\\tfunction requestWithdraw(uint256 _amount) external;\\n\\n\\tfunction claimWithdrawal(uint256 _idx) external;\\n\\n\\tfunction withdrawRewards(uint256 _validatorId) external returns (uint256);\\n\\n\\tfunction stakeRewardsAndDistributeFees(uint256 _validatorId) external;\\n\\n\\tfunction migrateDelegation(\\n\\t\\tuint256 _fromValidatorId,\\n\\t\\tuint256 _toValidatorId,\\n\\t\\tuint256 _amount\\n\\t) external;\\n\\n\\tfunction togglePause() external;\\n\\n\\tfunction convertMaticXToMatic(uint256 _balance)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction convertMaticToMaticX(uint256 _balance)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction mint(address _user, uint256 _amount) external;\\n\\n\\tfunction setFeePercent(uint8 _feePercent) external;\\n\\n\\tfunction setInstantPoolOwner(address _address) external;\\n\\n\\tfunction setValidatorRegistry(address _address) external;\\n\\n\\tfunction setTreasury(address _address) external;\\n\\n\\tfunction setFxStateRootTunnel(address _address) external;\\n\\n\\tfunction setVersion(string calldata _version) external;\\n\\n\\tfunction getUserWithdrawalRequests(address _address)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (WithdrawalRequest[] memory);\\n\\n\\tfunction getSharesAmountOfUserWithdrawalRequest(\\n\\t\\taddress _address,\\n\\t\\tuint256 _idx\\n\\t) external view returns (uint256);\\n\\n\\tfunction getTotalStake(IValidatorShare _validatorShare)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\tfunction getTotalStakeAcrossAllValidators() external view returns (uint256);\\n\\n\\tfunction getTotalPooledMatic() external view returns (uint256);\\n\\n\\tfunction getContracts()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress _stakeManager,\\n\\t\\t\\taddress _polygonERC20,\\n\\t\\t\\taddress _validatorRegistry\\n\\t\\t);\\n\\n\\tevent Submit(address indexed _from, uint256 _amount);\\n\\tevent Delegate(uint256 indexed _validatorId, uint256 _amountDelegated);\\n\\tevent RequestWithdraw(\\n\\t\\taddress indexed _from,\\n\\t\\tuint256 _amountMaticX,\\n\\t\\tuint256 _amountMatic\\n\\t);\\n\\tevent ClaimWithdrawal(\\n\\t\\taddress indexed _from,\\n\\t\\tuint256 indexed _idx,\\n\\t\\tuint256 _amountClaimed\\n\\t);\\n\\tevent WithdrawRewards(uint256 indexed _validatorId, uint256 _rewards);\\n\\tevent StakeRewards(uint256 indexed _validatorId, uint256 _amountStaked);\\n\\tevent DistributeFees(address indexed _address, uint256 _amount);\\n\\tevent MigrateDelegation(\\n\\t\\tuint256 indexed _fromValidatorId,\\n\\t\\tuint256 indexed _toValidatorId,\\n\\t\\tuint256 _amount\\n\\t);\\n\\tevent MintFromPolygon(address indexed _user, uint256 _amount);\\n\\tevent SetFeePercent(uint8 _feePercent);\\n\\tevent SetInstantPoolOwner(address _address);\\n\\tevent SetTreasury(address _address);\\n\\tevent SetValidatorRegistry(address _address);\\n\\tevent SetFxStateRootTunnel(address _address);\\n\\tevent SetVersion(string _version);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\ninterface IValidatorShare {\\n\\tstruct DelegatorUnbond {\\n\\t\\tuint256 shares;\\n\\t\\tuint256 withdrawEpoch;\\n\\t}\\n\\n\\tfunction minAmount() external view returns (uint256);\\n\\n\\tfunction unbondNonces(address _address) external view returns (uint256);\\n\\n\\tfunction validatorId() external view returns (uint256);\\n\\n\\tfunction delegation() external view returns (bool);\\n\\n\\tfunction buyVoucher(uint256 _amount, uint256 _minSharesToMint)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n\\n\\tfunction sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn)\\n\\t\\texternal;\\n\\n\\tfunction unstakeClaimTokens_new(uint256 unbondNonce) external;\\n\\n\\tfunction restake() external returns (uint256, uint256);\\n\\n\\tfunction withdrawRewards() external;\\n\\n\\tfunction getTotalStake(address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\tfunction unbonds_new(address _address, uint256 _unbondNonce)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (DelegatorUnbond memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.7;\\n\\n/// @title IValidatorRegistry\\n/// @notice Node validator registry interface\\ninterface IValidatorRegistry {\\n\\tfunction addValidator(uint256 _validatorId) external;\\n\\n\\tfunction removeValidator(uint256 _validatorId) external;\\n\\n\\tfunction setPreferredDepositValidatorId(uint256 _validatorId) external;\\n\\n\\tfunction setPreferredWithdrawalValidatorId(uint256 _validatorId) external;\\n\\n\\tfunction setMaticX(address _maticX) external;\\n\\n\\tfunction setVersion(string memory _version) external;\\n\\n\\tfunction togglePause() external;\\n\\n\\tfunction version() external view returns (string memory);\\n\\n\\tfunction preferredDepositValidatorId() external view returns (uint256);\\n\\n\\tfunction preferredWithdrawalValidatorId() external view returns (uint256);\\n\\n\\tfunction validatorIdExists(uint256 _validatorId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\tfunction getContracts()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress _stakeManager,\\n\\t\\t\\taddress _polygonERC20,\\n\\t\\t\\taddress _maticX\\n\\t\\t);\\n\\n\\tfunction getValidatorId(uint256 _index) external view returns (uint256);\\n\\n\\tfunction getValidators() external view returns (uint256[] memory);\\n\\n\\tevent AddValidator(uint256 indexed _validatorId);\\n\\tevent RemoveValidator(uint256 indexed _validatorId);\\n\\tevent SetPreferredDepositValidatorId(uint256 indexed _validatorId);\\n\\tevent SetPreferredWithdrawalValidatorId(uint256 indexed _validatorId);\\n\\tevent SetMaticX(address _address);\\n\\tevent SetVersion(string _version);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"AddFoundationApprovedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"partnerId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newDisbursalCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ChangePartnerDisbursalCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ChangePartnerStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldWalletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWalletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ChangePartnerWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"CreateBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticDisbursed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reimbursedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticXUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"DisbursePartnerReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticXMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FoundationStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticXBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FoundationUnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reqIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FoundationWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ProvideFeeReimbursalMatic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RegisterPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RemoveFoundationApprovedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SetDisbursalBotAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_feeReimbursalPercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SetFeeReimbursalPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetTrustedForwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticXBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UndelegateBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maticXUnstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UnstakePartnerReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_partnerIds\",\"type\":\"uint32[]\"}],\"name\":\"addDueRewardsToCurrentBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addFoundationApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"undelegatedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"claimedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawalEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maticXBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maticReceived\",\"type\":\"uint256\"},{\"internalType\":\"enum IPartnerStaking.BatchStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_newDisbursalCount\",\"type\":\"uint32\"}],\"name\":\"changePartnerDisbursalCount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"disbursalRemaining\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"disbursalCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"registeredAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastManualRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum IPartnerStaking.PartnerStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum IPartnerStaking.DisbursalCycleType\",\"name\":\"disbursalCycle\",\"type\":\"uint8\"}],\"internalType\":\"struct IPartnerStaking.Partner\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"changePartnerStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"disbursalRemaining\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"disbursalCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"registeredAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastManualRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum IPartnerStaking.PartnerStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum IPartnerStaking.DisbursalCycleType\",\"name\":\"disbursalCycle\",\"type\":\"uint8\"}],\"internalType\":\"struct IPartnerStaking.Partner\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newWalletAddress\",\"type\":\"address\"}],\"name\":\"changePartnerWalletAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"disbursalRemaining\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"disbursalCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"registeredAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastManualRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum IPartnerStaking.PartnerStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum IPartnerStaking.DisbursalCycleType\",\"name\":\"disbursalCycle\",\"type\":\"uint8\"}],\"internalType\":\"struct IPartnerStaking.Partner\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_reqIdx\",\"type\":\"uint32\"}],\"name\":\"claimUnstakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBatchId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPartnerId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_partnerIds\",\"type\":\"uint32[]\"}],\"name\":\"disbursePartnersReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReimbursalPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReimbursalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_batchId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"}],\"name\":\"getPartnerShare\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maticXUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"disbursedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct IPartnerStaking.PartnerUnstakeShare\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polygonERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maticX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disbursalBotAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDisbursalBotAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFoundationApprovedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerAddressToId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"disbursalRemaining\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"disbursalCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"registeredAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaticX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pastManualRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum IPartnerStaking.PartnerStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum IPartnerStaking.DisbursalCycleType\",\"name\":\"disbursalCycle\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideFeeReimbursalMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"enum IPartnerStaking.DisbursalCycleType\",\"name\":\"_disbursalCycle\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_disbursalCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_pastManualRewards\",\"type\":\"uint256\"}],\"name\":\"registerPartner\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFoundationApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDisbursalBotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feeReimbursalPercent\",\"type\":\"uint8\"}],\"name\":\"setFeeReimbursalPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_maticAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unDelegateCurrentBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_partnerId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_maticAmount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeRequests\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"partnerId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"batchId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maticXBurned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqIdx\",\"type\":\"uint256\"}],\"name\":\"withdrawUnstakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PartnerStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}