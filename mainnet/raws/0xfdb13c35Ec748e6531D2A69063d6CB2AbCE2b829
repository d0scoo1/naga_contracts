{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GenerateLendingPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./supply/SupplyTreasuryFundForCompound.sol\\\";\\nimport \\\"./convex/IConvexBooster.sol\\\";\\nimport \\\"./supply/ISupplyBooster.sol\\\";\\n\\n/* \\nThis contract will be executed after the lending contracts is created and will become invalid in the future.\\n */\\n\\ninterface ILendingMarket {\\n    function addMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold\\n    ) external;\\n}\\n\\ncontract GenerateLendingPools {\\n    address public convexBooster;\\n    address public lendingMarket;\\n\\n    address public supplyBooster;\\n    address public supplyRewardFactory;\\n\\n    bool public completed;\\n    address public deployer;\\n\\n    struct ConvexPool {\\n        address target;\\n        uint256 pid;\\n    }\\n\\n    struct LendingMarketMapping {\\n        uint256 convexBoosterPid;\\n        uint256[] supplyBoosterPids;\\n        int128[] curveCoinIds;\\n    }\\n\\n    address[] public supplyPools;\\n    address[] public compoundPools;\\n    ConvexPool[] public convexPools;\\n    LendingMarketMapping[] public lendingMarketMappings;\\n\\n    constructor(address _deployer) public {\\n        deployer = _deployer;\\n    }\\n\\n    function setLendingContract(\\n        address _supplyBooster,\\n        address _convexBooster,\\n        address _lendingMarket,\\n        address _supplyRewardFactory\\n    ) public {\\n        require(\\n            deployer == msg.sender,\\n            \\\"GenerateLendingPools: !authorized auth\\\"\\n        );\\n\\n        supplyBooster = _supplyBooster;\\n        convexBooster = _convexBooster;\\n        lendingMarket = _lendingMarket;\\n        supplyRewardFactory = _supplyRewardFactory;\\n    }\\n\\n    function createMapping(\\n        uint256 _convexBoosterPid,\\n        uint256 _param1,\\n        uint256 _param2,\\n        int128 _param3,\\n        int128 _param4\\n    ) internal pure returns (LendingMarketMapping memory lendingMarketMapping) {\\n        uint256[] memory supplyBoosterPids = new uint256[](2);\\n        int128[] memory curveCoinIds = new int128[](2);\\n\\n        supplyBoosterPids[0] = _param1;\\n        supplyBoosterPids[1] = _param2;\\n\\n        curveCoinIds[0] = _param3;\\n        curveCoinIds[1] = _param4;\\n\\n        lendingMarketMapping.convexBoosterPid = _convexBoosterPid;\\n        lendingMarketMapping.supplyBoosterPids = supplyBoosterPids;\\n        lendingMarketMapping.curveCoinIds = curveCoinIds;\\n    }\\n\\n    function createMapping(\\n        uint256 _convexBoosterPid,\\n        uint256 _param1,\\n        int128 _param2\\n    ) internal pure returns (LendingMarketMapping memory lendingMarketMapping) {\\n        uint256[] memory supplyBoosterPids = new uint256[](1);\\n        int128[] memory curveCoinIds = new int128[](1);\\n\\n        supplyBoosterPids[0] = _param1;\\n        curveCoinIds[0] = _param2;\\n\\n        lendingMarketMapping.convexBoosterPid = _convexBoosterPid;\\n        lendingMarketMapping.supplyBoosterPids = supplyBoosterPids;\\n        lendingMarketMapping.curveCoinIds = curveCoinIds;\\n    }\\n\\n    function generateSupplyPools() internal {\\n        address compoundComptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n\\n        (address USDC,address cUSDC) = (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 0x39AA39c021dfbaE8faC545936693aC917d5E7563);\\n        (address DAI,address cDAI) = (0x6B175474E89094C44Da98b954EedeAC495271d0F, 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\\n        (address TUSD,address cTUSD) = (0x0000000000085d4780B73119b644AE5ecd22b376, 0x12392F67bdf24faE0AF363c24aC620a2f67DAd86);\\n        (address WBTC,address cWBTC) = (0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4);\\n        (address Ether,address cEther) = (0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\\n\\n\\n        supplyPools.push(USDC);\\n        supplyPools.push(DAI);\\n        supplyPools.push(TUSD);\\n        supplyPools.push(WBTC);\\n        supplyPools.push(Ether);\\n\\n        compoundPools.push(cUSDC);\\n        compoundPools.push(cDAI);\\n        compoundPools.push(cTUSD);\\n        compoundPools.push(cWBTC);\\n        compoundPools.push(cEther);\\n\\n        for (uint256 i = 0; i < supplyPools.length; i++) {\\n            SupplyTreasuryFundForCompound supplyTreasuryFund = new SupplyTreasuryFundForCompound(\\n                    supplyBooster,\\n                    compoundPools[i],\\n                    compoundComptroller,\\n                    supplyRewardFactory\\n                );\\n\\n            ISupplyBooster(supplyBooster).addSupplyPool(\\n                supplyPools[i],\\n                address(supplyTreasuryFund)\\n            );\\n        }\\n    }\\n\\n    function generateConvexPools() internal {\\n        // USDC,DAI , supplyBoosterPids, curveCoinIds  =  [cUSDC, cDAI], [USDC, DAI]\\n        convexPools.push( ConvexPool(0xC25a3A3b969415c80451098fa907EC722572917F, 4) ); // DAI USDC USDT sUSD               [1, 0] [0, 1] sUSD\\n        convexPools.push( ConvexPool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B, 40) ); // MIM DAI USDC USDT               [1, 0] [1, 2] mim\\n        convexPools.push( ConvexPool(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490, 9) ); // DAI USDC USDT                    [1, 0] [0, 1] 3Pool\\n        convexPools.push( ConvexPool(0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B, 32) ); // FRAX DAI USDC USDT              [1, 0] [1, 2] frax\\n        convexPools.push( ConvexPool(0x1AEf73d49Dedc4b1778d0706583995958Dc862e6, 14) ); // mUSD + 3Crv                     [1, 0] [1, 2] musd\\n        convexPools.push( ConvexPool(0x94e131324b6054c0D789b190b2dAC504e4361b53, 21) ); // UST + 3Crv                      [1, 0] [1, 2] ust\\n        convexPools.push( ConvexPool(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA, 33) ); // LUSD + 3Crv                     [1, 0] [1, 2] lusd\\n        convexPools.push( ConvexPool(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c, 36) ); // alUSD + 3Crv                    [1, 0] [1, 2] alusd\\n        convexPools.push( ConvexPool(0xD2967f45c4f384DEEa880F807Be904762a3DeA07, 10) ); // GUSD + 3Crv                     [1, 0] [1, 2] gusd\\n        convexPools.push( ConvexPool(0x4f3E8F405CF5aFC05D68142F3783bDfE13811522, 13) ); // USDN + 3Crv                     [1, 0] [1, 2] usdn\\n        convexPools.push( ConvexPool(0x4f3E8F405CF5aFC05D68142F3783bDfE13811522, 12) ); // USDK + 3Crv                     [1, 0] [1, 2] usdk\\n        convexPools.push( ConvexPool(0x4807862AA8b2bF68830e4C8dc86D0e9A998e085a, 34) ); // BUSD + 3Crv                     [1, 0] [1, 2] busdv2\\n        convexPools.push( ConvexPool(0x5B5CFE992AdAC0C9D48E05854B2d91C73a003858, 11) ); // HUSD + 3Crv                     [1, 0] [1, 2] husd\\n        convexPools.push( ConvexPool(0xC2Ee6b0334C261ED60C72f6054450b61B8f18E35, 15) ); // RSV + 3Crv                      [1, 0] [1, 2] rsv\\n        convexPools.push( ConvexPool(0x3a664Ab939FD8482048609f652f9a0B0677337B9, 17) ); // DUSD + 3Crv                     [1, 0] [1, 2] dusd\\n        convexPools.push( ConvexPool(0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6, 28) ); // USDP + 3Crv                     [1, 0] [1, 2] usdp\\n\\n        // TUSD\\n        convexPools.push( ConvexPool(0xEcd5e75AFb02eFa118AF914515D6521aaBd189F1, 31) ); // TUSD + 3Crv                     [2] [0] tusd\\n\\n        // WBTC\\n        convexPools.push( ConvexPool(0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3, 7) ); // renBTC + wBTC + sBTC            [3] [1] sbtc\\n        convexPools.push( ConvexPool(0x2fE94ea3d5d4a175184081439753DE15AeF9d614, 20) ); // oBTC + renBTC + wBTC + sBTC     [3] [2] obtc\\n        convexPools.push( ConvexPool(0x49849C98ae39Fff122806C06791Fa73784FB3675, 6) ); // renBTC + wBTC                   [3] [1] ren\\n        convexPools.push( ConvexPool(0xb19059ebb43466C323583928285a49f558E572Fd, 8) ); // HBTC + wBTC                     [3] [1] hbtc\\n        convexPools.push( ConvexPool(0x410e3E86ef427e30B9235497143881f717d93c2A, 19) ); // BBTC + renBTC + wBTC + sBTC     [3] [2] bbtc\\n        convexPools.push( ConvexPool(0x64eda51d3Ad40D56b9dFc5554E06F94e1Dd786Fd, 16) ); // tBTC + renBTC + wBTC + sBTC     [3] [2] tbtc\\n        convexPools.push( ConvexPool(0xDE5331AC4B3630f94853Ff322B66407e0D6331E8, 18) ); // pBTC + renBTC + wBTC + sBTC     [3] [2] pbtc\\n\\n        // ETH\\n        convexPools.push( ConvexPool(0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c, 23) ); // ETH + sETH                      [4] [0] seth\\n        convexPools.push( ConvexPool(0x06325440D014e39736583c165C2963BA99fAf14E, 25) ); // ETH + stETH                     [4] [0] steth\\n        convexPools.push( ConvexPool(0xaA17A236F2bAdc98DDc0Cf999AbB47D47Fc0A6Cf, 27) ); // ETH + ankrETH                   [4] [0] ankreth\\n        convexPools.push( ConvexPool(0x53a901d48795C58f485cBB38df08FA96a24669D5, 35) ); // ETH + rETH                      [4] [0] reth\\n\\n        for (uint256 i = 0; i < convexPools.length; i++) {\\n            IConvexBooster(convexBooster).addConvexPool(convexPools[i].pid);\\n        }\\n    }\\n\\n    function generateMappingPools() internal {\\n        lendingMarketMappings.push(createMapping(0, 1, 0, 0, 1)); // [1, 0] [0, 1]\\n        lendingMarketMappings.push(createMapping(1, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(2, 1, 0, 0, 1)); // [1, 0] [0, 1]\\n        lendingMarketMappings.push(createMapping(3, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(4, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(5, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(6, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(7, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(8, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(9, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(10, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(11, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(12, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(13, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(14, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n        lendingMarketMappings.push(createMapping(15, 1, 0, 1, 2)); // [1, 0] [1, 2]\\n\\n        lendingMarketMappings.push(createMapping(16, 2, 0)); // [2] [0]\\n\\n        lendingMarketMappings.push(createMapping(17, 3, 1)); // [3] [1]\\n        lendingMarketMappings.push(createMapping(18, 3, 2)); // [3] [2]\\n        lendingMarketMappings.push(createMapping(19, 3, 1)); // [3] [1]\\n        lendingMarketMappings.push(createMapping(20, 3, 1)); // [3] [1]\\n        lendingMarketMappings.push(createMapping(21, 3, 2)); // [3] [2]\\n        lendingMarketMappings.push(createMapping(22, 3, 2)); // [3] [2]\\n        lendingMarketMappings.push(createMapping(23, 3, 2)); // [3] [2]\\n\\n        lendingMarketMappings.push(createMapping(24, 4, 0)); // [4] [0]\\n        lendingMarketMappings.push(createMapping(25, 4, 0)); // [4] [0]\\n        lendingMarketMappings.push(createMapping(26, 4, 0)); // [4] [0]\\n        lendingMarketMappings.push(createMapping(27, 4, 0)); // [4] [0]\\n\\n        for (uint256 i = 0; i < lendingMarketMappings.length; i++) {\\n            ILendingMarket(lendingMarket).addMarketPool(\\n                lendingMarketMappings[i].convexBoosterPid,\\n                lendingMarketMappings[i].supplyBoosterPids,\\n                lendingMarketMappings[i].curveCoinIds,\\n                100,\\n                50\\n            );\\n        }\\n    }\\n\\n    function run() public {\\n        require(deployer == msg.sender, \\\"GenerateLendingPools: !authorized auth\\\");\\n        require(!completed, \\\"GenerateLendingPools: !completed\\\");\\n\\n        require(supplyBooster != address(0),\\\"!supplyBooster\\\");\\n        require(convexBooster != address(0),\\\"!convexBooster\\\");\\n        require(lendingMarket != address(0),\\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0),\\\"!supplyRewardFactory\\\");\\n\\n        generateSupplyPools();\\n        generateConvexPools();\\n        generateMappingPools();\\n\\n        completed = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supply/SupplyTreasuryFundForCompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../common/IBaseReward.sol\\\";\\n\\ninterface ICompoundComptroller {\\n    /*** Assets You Are In ***/\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function getAssetsIn(address account)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function checkMembership(address account, address cToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function accountAssets(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function markets(address _cToken)\\n        external\\n        view\\n        returns (bool isListed, uint256 collateralFactorMantissa);\\n}\\n\\ninterface ICompound {\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function isCToken(address) external view returns (bool);\\n\\n    function comptroller() external view returns (ICompoundComptroller);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function borrowBalanceStored(address user) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function interestRateModel() external view returns (address);\\n}\\n\\ninterface ICompoundCEther is ICompound {\\n    function repayBorrow() external payable;\\n\\n    function mint() external payable;\\n}\\n\\ninterface ICompoundCErc20 is ICompound {\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function underlying() external returns (address); // like usdc usdt\\n}\\n\\ninterface ISupplyRewardFactory {\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) external returns (address);\\n}\\n\\ncontract SupplyTreasuryFundForCompound is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public rewardCompPool;\\n    address public supplyRewardFactory;\\n    address public virtualBalance;\\n    address public compAddress;\\n    address public compoundComptroller;\\n    address public underlyToken;\\n    address public lpToken;\\n    address public owner;\\n    uint256 public totalUnderlyToken;\\n    uint256 public frozenUnderlyToken;\\n    bool public isErc20;\\n    bool private initialized;\\n\\n    modifier onlyInitialized() {\\n        require(initialized, \\\"!initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"SupplyTreasuryFundForCompound: !authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _lpToken,\\n        address _compoundComptroller,\\n        address _supplyRewardFactory\\n    ) public {\\n        owner = _owner;\\n        compoundComptroller = _compoundComptroller;\\n        lpToken = _lpToken;\\n        supplyRewardFactory = _supplyRewardFactory;\\n    }\\n\\n    // call by Owner (SupplyBooster)\\n    function initialize(\\n        address _virtualBalance,\\n        address _underlyToken,\\n        bool _isErc20\\n    ) public onlyOwner {\\n        require(!initialized, \\\"initialized\\\");\\n\\n        compAddress = ICompoundComptroller(compoundComptroller).getCompAddress();\\n\\n        underlyToken = _underlyToken;\\n\\n        virtualBalance = _virtualBalance;\\n        isErc20 = _isErc20;\\n\\n        rewardCompPool = ISupplyRewardFactory(supplyRewardFactory).createReward(\\n                compAddress,\\n                virtualBalance,\\n                address(this)\\n            );\\n\\n        initialized = true;\\n    }\\n\\n    function _mintEther(uint256 _amount) internal {\\n        ICompoundCEther(lpToken).mint{value: _amount}();\\n    }\\n\\n    function _mintErc20(uint256 _amount) internal {\\n        ICompoundCErc20(lpToken).mint(_amount);\\n    }\\n\\n    receive() external payable {}\\n\\n    function migrate(address _newTreasuryFund, bool _setReward)\\n        external\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));\\n\\n        uint256 redeemState = ICompound(lpToken).redeem(cTokens);\\n\\n        require(\\n            redeemState == 0,\\n            \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n        );\\n\\n        uint256 bal;\\n\\n        if (isErc20) {\\n            bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(owner, bal);\\n        } else {\\n            bal = address(this).balance;\\n\\n            if (bal > 0) {\\n                payable(owner).sendValue(bal);\\n            }\\n        }\\n\\n        if (_setReward) {\\n            IBaseReward(rewardCompPool).addOwner(_newTreasuryFund);\\n            IBaseReward(rewardCompPool).removeOwner(address(this));\\n        }\\n\\n        return bal;\\n    }\\n\\n    function _depositFor(address _for, uint256 _amount) internal {\\n        totalUnderlyToken = totalUnderlyToken.add(_amount);\\n\\n        if (isErc20) {\\n            IERC20(underlyToken).safeApprove(lpToken, 0);\\n            IERC20(underlyToken).safeApprove(lpToken, _amount);\\n\\n            _mintErc20(_amount);\\n        } else {\\n            _mintEther(_amount);\\n        }\\n\\n        if (_for != address(0)) {\\n            IBaseReward(rewardCompPool).stake(_for);\\n        }\\n    }\\n\\n    function depositFor(address _for)\\n        public\\n        payable\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n    {\\n        _depositFor(_for, msg.value);\\n    }\\n\\n    function depositFor(address _for, uint256 _amount)\\n        public\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n    {\\n        _depositFor(_for, _amount);\\n    }\\n\\n    function withdrawFor(address _to, uint256 _amount)\\n        public\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        IBaseReward(rewardCompPool).withdraw(_to);\\n\\n        require(\\n            totalUnderlyToken >= _amount,\\n            \\\"SupplyTreasuryFundForCompound: !insufficient balance\\\"\\n        );\\n\\n        totalUnderlyToken = totalUnderlyToken.sub(_amount);\\n\\n        uint256 redeemState = ICompound(lpToken).redeemUnderlying(_amount);\\n\\n        require(\\n            redeemState == 0,\\n            \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n        );\\n\\n        uint256 bal;\\n\\n        if (isErc20) {\\n            bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n            IERC20(underlyToken).safeTransfer(_to, bal);\\n        } else {\\n            bal = address(this).balance;\\n\\n            if (bal > 0) {\\n                payable(_to).sendValue(bal);\\n            }\\n        }\\n\\n        return bal;\\n    }\\n\\n    function borrow(\\n        address _to,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) public onlyInitialized nonReentrant onlyOwner returns (uint256) {\\n        totalUnderlyToken = totalUnderlyToken.sub(_lendingAmount);\\n        frozenUnderlyToken = frozenUnderlyToken.add(_lendingAmount);\\n\\n        uint256 redeemState = ICompound(lpToken).redeemUnderlying(\\n            _lendingAmount\\n        );\\n\\n        require(\\n            redeemState == 0,\\n            \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n        );\\n\\n        if (isErc20) {\\n            IERC20(underlyToken).safeTransfer(\\n                _to,\\n                _lendingAmount.sub(_lendingInterest)\\n            );\\n\\n            if (_lendingInterest > 0) {\\n                IERC20(underlyToken).safeTransfer(owner, _lendingInterest);\\n            }\\n        } else {\\n            payable(_to).sendValue(_lendingAmount.sub(_lendingInterest));\\n            if (_lendingInterest > 0) {\\n                payable(owner).sendValue(_lendingInterest);\\n            }\\n        }\\n\\n        return _lendingInterest;\\n    }\\n\\n    function repayBorrow()\\n        public\\n        payable\\n        onlyInitialized\\n        nonReentrant\\n        onlyOwner\\n    {\\n        _mintEther(msg.value);\\n\\n        totalUnderlyToken = totalUnderlyToken.add(msg.value);\\n        frozenUnderlyToken = frozenUnderlyToken.sub(msg.value);\\n    }\\n\\n    function repayBorrow(uint256 _lendingAmount)\\n        public\\n        onlyInitialized\\n        nonReentrant\\n        onlyOwner\\n    {\\n        IERC20(underlyToken).safeApprove(lpToken, 0);\\n        IERC20(underlyToken).safeApprove(lpToken, _lendingAmount);\\n\\n        _mintErc20(_lendingAmount);\\n\\n        totalUnderlyToken = totalUnderlyToken.add(_lendingAmount);\\n        frozenUnderlyToken = frozenUnderlyToken.sub(_lendingAmount);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        uint256 exchangeRateStored = ICompound(lpToken).exchangeRateStored();\\n        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));\\n\\n        return exchangeRateStored.mul(cTokens).div(1e18);\\n    }\\n\\n    function claim()\\n        public\\n        onlyInitialized\\n        onlyOwner\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        ICompoundComptroller(compoundComptroller).claimComp(address(this));\\n\\n        uint256 balanceOfComp = IERC20(compAddress).balanceOf(address(this));\\n\\n        if (balanceOfComp > 0) {\\n            IERC20(compAddress).safeTransfer(rewardCompPool, balanceOfComp);\\n\\n            IBaseReward(rewardCompPool).notifyRewardAmount(balanceOfComp);\\n        }\\n\\n        uint256 bal;\\n        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));\\n\\n        // If Uses withdraws all the money, the remaining ctoken is profit.\\n        if (totalUnderlyToken == 0 && frozenUnderlyToken == 0) {\\n            if (cTokens > 0) {\\n                uint256 redeemState = ICompound(lpToken).redeem(cTokens);\\n\\n                require(\\n                    redeemState == 0,\\n                    \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n                );\\n\\n                if (isErc20) {\\n                    bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n                    IERC20(underlyToken).safeTransfer(owner, bal);\\n                } else {\\n                    bal = address(this).balance;\\n\\n                    if (bal > 0) {\\n                        payable(owner).sendValue(bal);\\n                    }\\n                }\\n\\n                return bal;\\n            }\\n        }\\n\\n        uint256 exchangeRateStored = ICompound(lpToken).exchangeRateCurrent();\\n\\n        // ctoken price\\n        uint256 cTokenPrice = cTokens.mul(exchangeRateStored).div(1e18);\\n\\n        if (cTokenPrice > totalUnderlyToken.add(frozenUnderlyToken)) {\\n            uint256 interestCToken = cTokenPrice\\n                .sub(totalUnderlyToken.add(frozenUnderlyToken))\\n                .mul(1e18)\\n                .div(exchangeRateStored);\\n\\n            uint256 redeemState = ICompound(lpToken).redeem(interestCToken);\\n\\n            require(\\n                redeemState == 0,\\n                \\\"SupplyTreasuryFundForCompound: !redeemState\\\"\\n            );\\n\\n            if (isErc20) {\\n                bal = IERC20(underlyToken).balanceOf(address(this));\\n\\n                IERC20(underlyToken).safeTransfer(owner, bal);\\n            } else {\\n                bal = address(this).balance;\\n\\n                if (bal > 0) {\\n                    payable(owner).sendValue(bal);\\n                }\\n            }\\n        }\\n\\n        return bal;\\n    }\\n\\n    function getReward(address _for) public onlyOwner nonReentrant {\\n        if (IBaseReward(rewardCompPool).earned(_for) > 0) {\\n            IBaseReward(rewardCompPool).getReward(_for);\\n        }\\n    }\\n\\n    function getBorrowRatePerBlock() public view returns (uint256) {\\n        return ICompound(lpToken).borrowRatePerBlock();\\n    }\\n\\n    /* function getCollateralFactorMantissa() public view returns (uint256) {\\n        ICompoundComptroller comptroller = ICompound(lpToken).comptroller();\\n        (bool isListed, uint256 collateralFactorMantissa) = comptroller.markets(\\n            lpToken\\n        );\\n\\n        return isListed ? collateralFactorMantissa : 800000000000000000;\\n    } */\\n}\\n\"\r\n    },\r\n    \"contracts/convex/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external;\\n}\\n\"\r\n    },\r\n    \"contracts/supply/ISupplyBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface ISupplyBooster {\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address underlyToken,\\n            address rewardInterestPool,\\n            address supplyTreasuryFund,\\n            address virtualBalance,\\n            bool isErc20,\\n            bool shutdown\\n        );\\n\\n    function liquidate(bytes32 _lendingId, uint256 _lendingInterest)\\n        external\\n        payable\\n        returns (address);\\n\\n    function getLendingUnderlyToken(bytes32 _lendingId)\\n        external\\n        view\\n        returns (address);\\n\\n    function borrow(\\n        uint256 _pid,\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest,\\n        uint256 _borrowNumbers\\n    ) external;\\n\\n    // ether\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingInterest\\n    ) external payable;\\n\\n    // erc20\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) external;\\n\\n    function addSupplyPool(address _underlyToken, address _supplyTreasuryFund)\\n        external\\n        returns (bool);\\n\\n    function getBorrowRatePerBlock(uint256 _pid)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUtilizationRate(uint256 _pid) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IBaseReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IBaseReward {\\n    function earned(address account) external view returns (uint256);\\n    function stake(address _for) external;\\n    function withdraw(address _for) external;\\n    function getReward(address _for) external;\\n    function notifyRewardAmount(uint256 reward) external;\\n    function addOwner(address _newOwner) external;\\n    function addOwners(address[] calldata _newOwners) external;\\n    function removeOwner(address _owner) external;\\n    function isOwner(address _owner) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"compoundPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"convexPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendingMarketMappings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"convexBoosterPid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supplyBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplyRewardFactory\",\"type\":\"address\"}],\"name\":\"setLendingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GenerateLendingPools", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000063b8c91dd55626db091da26ba96bd8dd3f36820b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}