{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Deployment/Ice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Omnus Contracts (contracts/entropy/Ice.sol)\\r\\n// https://omnuslab.com/icering\\r\\n\\r\\n// ICE (In Chain Entropy)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n* @dev ICE - In-Chain Entropy\\r\\n*\\r\\n* This protocol generates in-chain entropy (OK, ON-chain not IN-chain, but that didn't make a cool acronym...).\\r\\n* Solidity and blockchains are deterministic, so standard warnings apply, this produces pseudorandomness. For very strict levels of \\r\\n* randomness the answer remains to go off-chain, but that carries a cost and also introduces an off-chain dependency that could fail or,\\r\\n* worse, some day be tampered with or become vulnerable. \\r\\n* \\r\\n* The core premise of this protocol is that we aren't chasing true random (does that even exist? Philosophers?). What we are chasing \\r\\n* is a source or sources of entropy that are unpredictable in that they can't practically be controlled or predicted by a single entity.\\r\\n*\\r\\n* A key source of entropy in this protocol is contract balances, namely the balances of contracts that change with every block. Think large \\r\\n* value wallets, like exchange wallets. We store a list of these contract addresses and every request combine the eth value of these addresses\\r\\n* with the current block time and a modulo and hash it. \\r\\n* \\r\\n* Block.timestamp has been used as entropy before, but it has a significant drawback in that it can be controlled by miners. If the incentive is\\r\\n* high enough a miner could look to control the outcome by controlling the timestamp. \\r\\n* \\r\\n* When we add into this a variable contract balance we require a single entity be able to control both the block.timestamp and, for example, the \\r\\n* eth balance of a binance hot wallet. In the same block. To make it even harder, we loop through our available entropy sources, so the one that\\r\\n* a transaction uses depends on where in the order we are, which depends on any other txns using this protocol before it. So to be sure of the \\r\\n* outcome an entity needs to control the block.timestamp, either control other txns using this in the block or make sure it's the first txn in \\r\\n* the block, control the balance of another parties wallet than changes with every block, then be able to hash those known variables to see if the\\r\\n* outcome is a positive one for them. Whether any entity could achieve that is debatable, but you would imagine that if it is possible it \\r\\n* would come at significant cost.\\r\\n*\\r\\n* The protocol can be used in two ways: to return a full uin256 of entropy or a number within a given range. Each of these can be called in light,\\r\\n* standard or heavy mode:\\r\\n*   Light    - uses the balance of the last contract loaded into the entropy list for every generation. This reduces storage reads\\r\\n*              at the disadvantage of reducing the variability of the seed.\\r\\n*   Standard - increments through our list of sources using a different one as the seed each time, returning to the first item at the end of the \\r\\n*              loop and so on.\\r\\n*   Heavy    - creates a hash of hashes using ALL of the entropy seed sources. In principle this would require a single entity to control both\\r\\n*              the block timestamp and the precise balances of a range of addresses within that block. \\r\\n*\\r\\n*                                                             D I S C L A I M E R\\r\\n*                                                             ===================    \\r\\n*                   Use at your own risk, obvs. I've tried hard to make this good quality entropy, but whether random exists is\\r\\n*                   a question for philosophers not solidity devs. If there is a lot at stake on whatever it is you are doing \\r\\n*                   please DYOR on what option is best for you. There are no guarantees the entropy seeds here will be maintained\\r\\n*                   (I mean, no one might ever use this). No liability is accepted etc.\\r\\n*/\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";  \\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@omnus/contracts/entropy/IIce.sol\\\";  \\r\\nimport \\\"@omnus/contracts/storage/OmStorage.sol\\\";\\r\\nimport \\\"@omnus/contracts/token/ERC20Spendable/ERC20SpendableReceiver.sol\\\"; \\r\\n\\r\\ncontract Ice is Ownable, OmStorage, ERC20SpendableReceiver, IIce {\\r\\n  using SafeERC20 for IERC20;\\r\\n  \\r\\n  address public treasury;\\r\\n  /**\\r\\n  *\\r\\n  * @dev entropyItem mapping holds the list of addresses for the contract balances we use as entropy seeds:\\r\\n  *\\r\\n  */\\r\\n  mapping (uint256 => address) entropyItem;\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Constructor must be passed the address for the ERC20 that is the designated spendable item for this protocol. Access\\r\\n  * to the protocol is relayed via the spendable ERC20 even if there is no fee for use:\\r\\n  * \\r\\n  * This contract makes use of OmStorage to greatly reduce storage costs, both read and write. A single uint256 is used as a\\r\\n  * 'bitmap' for underlying config values, meaning a single read and write is required in all cases. For more details see\\r\\n  * contracts/storage/OmStorage.sol.\\r\\n  *\\r\\n  */\\r\\n  constructor(address _ERC20Spendable)\\r\\n    ERC20SpendableReceiver(_ERC20Spendable)\\r\\n    OmStorage(3, 3, 8, 49, 12, 0, 0, 0, 0, 0, 0, 0) {\\r\\n    encodeNus(0, 0, 10000000, 0, 0, 0, 0, 0, 0, 0, 0, 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Standard entry point for all calls relayed via the payable ERC20. \\r\\n  *\\r\\n  */\\r\\n  function receiveSpendableERC20(address, uint256 _tokenPaid, uint256[] memory _arguments) override external onlyERC20Spendable(msg.sender) returns(bool, uint256[] memory) { \\r\\n    uint256 seedIndex;\\r\\n    uint256 counter;\\r\\n    uint256 modulo;\\r\\n    address seedAddress;\\r\\n    uint256 fee; \\r\\n    \\r\\n    (seedIndex, counter, modulo, seedAddress, fee) = getConfig();\\r\\n\\r\\n    if (fee != 0) {\\r\\n      require(_tokenPaid == fee, \\\"Incorrect ERC20 payment\\\");\\r\\n    }\\r\\n\\r\\n    uint256[] memory returnResults = new uint256[](1);\\r\\n\\r\\n    /**\\r\\n    *\\r\\n    * @dev Number in range request, send with light / normal / heavy designation:\\r\\n    *\\r\\n    */\\r\\n    if (_arguments[0] == 0) {\\r\\n      returnResults[0] = getNumberInRangeLight(_arguments[1], seedIndex, counter, modulo, seedAddress, fee); \\r\\n      return(true, returnResults);\\r\\n    }\\r\\n    if (_arguments[0] == 1) {\\r\\n      returnResults[0] = getNumberInRange(_arguments[1], seedIndex, counter, modulo, seedAddress, fee); \\r\\n      return(true, returnResults);\\r\\n    }\\r\\n\\r\\n    if (_arguments[0] == 2) {\\r\\n      returnResults[0] = getNumberInRangeHeavy(_arguments[1], seedIndex, counter, modulo, seedAddress, fee); \\r\\n      return(true, returnResults);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    *\\r\\n    * @dev Standard entropy request, send with light / normal / heavy designation:\\r\\n    *\\r\\n    */\\r\\n    if (_arguments[0] == 3) {\\r\\n      returnResults[0] = getEntropyLight(seedIndex, counter, modulo, seedAddress, fee); \\r\\n      return(true, returnResults);\\r\\n    }\\r\\n    if (_arguments[0] == 4) {\\r\\n      returnResults[0] = getEntropy(seedIndex, counter, modulo, seedAddress, fee); \\r\\n      return(true, returnResults);\\r\\n    }\\r\\n\\r\\n    if (_arguments[0] == 5) {\\r\\n      returnResults[0] = getEntropyHeavy(seedIndex, counter, modulo, seedAddress, fee); \\r\\n      return(true, returnResults);\\r\\n    }  \\r\\n\\r\\n    return(false, returnResults);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev View details of a given entropy seed address:\\r\\n  *\\r\\n  */\\r\\n  function viewEntropyAddress(uint256 _index) external view returns (address entropyAddress) {\\r\\n    return (entropyItem[_index]) ;\\r\\n  }\\r\\n  \\r\\n  /**\\r\\n  *\\r\\n  * @dev Owner can add entropy seed address:\\r\\n  *\\r\\n  */\\r\\n  function addEntropy(address _entropyAddress) external onlyOwner {\\r\\n    (uint256 seed, uint256 counter, uint256 modulo, address seedAddress, uint256 fee) = getConfig(); \\r\\n    counter += 1;\\r\\n    entropyItem[counter] = _entropyAddress;\\r\\n    seedAddress = _entropyAddress;\\r\\n    emit EntropyAdded(_entropyAddress);\\r\\n    encodeNus(seed, counter, modulo, uint256(uint160(seedAddress)), fee, 0, 0, 0, 0, 0, 0, 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Owner can update entropy seed address:\\r\\n  *\\r\\n  */\\r\\n  function updateEntropy(uint256 _index, address _newAddress) external onlyOwner {\\r\\n    address oldEntropyAddress = entropyItem[_index];\\r\\n    entropyItem[_index] = _newAddress;\\r\\n    emit EntropyUpdated(_index, _newAddress, oldEntropyAddress); \\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Owner can clear the list to start again:\\r\\n  *\\r\\n  */\\r\\n  function deleteAllEntropy() external onlyOwner {\\r\\n    (uint256 seed, uint256 counter, uint256 modulo, address seedAddress, uint256 fee) = getConfig();\\r\\n    require(counter > 0, \\\"No entropy defined\\\");\\r\\n    for (uint i = 1; i <= counter; i++){\\r\\n      delete entropyItem[i];\\r\\n    }\\r\\n    counter = 0;\\r\\n    seedAddress = address(0);\\r\\n    encodeNus(seed, counter, modulo, uint256(uint160(seedAddress)), fee, 0, 0, 0, 0, 0, 0, 0);\\r\\n    emit EntropyCleared();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Owner can updte the fee\\r\\n  *\\r\\n  */\\r\\n  function updateFee(uint256 _fee) external onlyOwner {\\r\\n    (uint256 seed, uint256 counter, uint256 modulo, address seedAddress, uint256 oldFee) = getConfig(); \\r\\n    encodeNus(seed, counter, modulo, uint256(uint160(seedAddress)), _fee, 0, 0, 0, 0, 0, 0, 0);\\r\\n    emit FeeUpdated(oldFee, _fee);\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  *\\r\\n  * @dev owner can update treasury address:\\r\\n  *\\r\\n  */ \\r\\n  function setTreasury(address _treasury) external onlyOwner {\\r\\n    treasury = _treasury;\\r\\n    emit TreasurySet(_treasury);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Create hash of entropy seeds:\\r\\n  *\\r\\n  */\\r\\n  function _hashEntropy(bool _lightMode, uint256 seed, uint256 counter, uint256 modulo, address seedAddress, uint256 fee) internal returns(uint256 hashedEntropy_){\\r\\n\\r\\n    if (modulo >= 99999999) {\\r\\n      modulo = 10000000;\\r\\n    }  \\r\\n    else {\\r\\n      modulo = modulo + 1; \\r\\n    } \\r\\n\\r\\n    if (_lightMode) {\\r\\n      hashedEntropy_ = (uint256(keccak256(abi.encode(seedAddress.balance + (block.timestamp % modulo)))));\\r\\n    }\\r\\n    else {\\r\\n      if (seed >= counter) {\\r\\n      seed = 1;\\r\\n      }  \\r\\n      else {\\r\\n        seed += 1; \\r\\n      } \\r\\n      address rotatingSeedAddress = entropyItem[seed];\\r\\n      uint256 seedAddressBalance = rotatingSeedAddress.balance;\\r\\n      hashedEntropy_ = (uint256(keccak256(abi.encode(seedAddressBalance, (block.timestamp % modulo)))));\\r\\n      emit EntropyServed(rotatingSeedAddress, seedAddressBalance, block.timestamp, modulo, hashedEntropy_); \\r\\n    }         \\r\\n\\r\\n    encodeNus(seed, counter, modulo, uint256(uint160(seedAddress)), fee, 0, 0, 0, 0, 0, 0, 0);\\r\\n      \\r\\n    return(hashedEntropy_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Find the number within a range:\\r\\n  *\\r\\n  */\\r\\n  function _numberInRange(uint256 _upperBound, bool _lightMode, uint256 _seed, uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 numberWithinRange){\\r\\n    return((((_hashEntropy(_lightMode, _seed, _counter, _modulo, _seedAddress, _fee) % 10 ** 18) * _upperBound) / (10 ** 18)) + 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Get OM values from the NUS\\r\\n  *\\r\\n  */\\r\\n  function getConfig() public view returns(uint256 seedIndex_, uint256 counter_, uint256 modulo_, address seedAddress_, uint256 fee_){\\r\\n    \\r\\n    uint256 nusInMemory = nus;\\r\\n\\r\\n    return(om1Value(nusInMemory), om2Value(nusInMemory), om3Value(nusInMemory), address(uint160(om4Value(nusInMemory))), om5Value(nusInMemory));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Return a full uint256 of entropy:\\r\\n  *\\r\\n  */\\r\\n  function getEntropy(uint256 _seed, uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 entropy_){\\r\\n    entropy_ = _hashEntropy(false, _seed, _counter, _modulo, _seedAddress, _fee); \\r\\n    return(entropy_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Return a full uint256 of entropy - light mode. Light mode uses the most recent added seed address which is stored\\r\\n  * in the control NUS. This avoids another read from storage at the cost of not cycling through multiple entropy\\r\\n  * sources. The normal (non-light) version increments through the seed mapping.\\r\\n  *\\r\\n  */\\r\\n  function getEntropyLight(uint256 _seedIndex,uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 entropy_){\\r\\n    entropy_ = _hashEntropy(true, _seedIndex, _counter, _modulo, _seedAddress, _fee); \\r\\n    return(entropy_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Return a full uint256 of entropy - heavy mode. Heavy mode looks to maximise the number of sources of entropy that an\\r\\n  * entity would need to control in order to predict an outome. It creates a hash of all our entropy sources, 1 to n, hashed with\\r\\n  * the block.timestamp altered by an increasing modulo.\\r\\n  *\\r\\n  */\\r\\n  function getEntropyHeavy(uint256, uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 entropy_){\\r\\n    \\r\\n    uint256 loopEntropy;\\r\\n\\r\\n    for (uint i = 0; i < _counter; i++){\\r\\n      loopEntropy = _hashEntropy(false, i, _counter, _modulo, _seedAddress, _fee); \\r\\n      entropy_ = (uint256(keccak256(abi.encode(entropy_, loopEntropy))));\\r\\n    }\\r\\n    return(entropy_);\\r\\n\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Return a number within a range (1 to upperBound):\\r\\n  *\\r\\n  */\\r\\n  function getNumberInRange(uint256 _upperBound, uint256 _seedIndex, uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 numberInRange_){\\r\\n    numberInRange_ = _numberInRange(_upperBound, false, _seedIndex, _counter, _modulo, _seedAddress, _fee);\\r\\n    return(numberInRange_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Return a number within a range (1 to upperBound) - light mode. Light mode uses the most recent added seed address which is stored\\r\\n  * in Om Storage. This avoids another read from storage at the cost of not cycling through multiple entropy\\r\\n  * sources. The normal (non-light) version increments through the seed mapping.\\r\\n  *\\r\\n  */\\r\\n  function getNumberInRangeLight(uint256 _upperBound, uint256 _seedIndex, uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 numberInRange_){\\r\\n    numberInRange_ = _numberInRange(_upperBound, true, _seedIndex, _counter, _modulo, _seedAddress, _fee);\\r\\n    return(numberInRange_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Return a number within a range (1 to upperBound) - heavy mode.\\r\\n  *\\r\\n  */\\r\\n  function getNumberInRangeHeavy(uint256 _upperBound, uint256 _seedIndex, uint256 _counter, uint256 _modulo, address _seedAddress, uint256 _fee) internal returns(uint256 numberInRange_){\\r\\n    numberInRange_ = ((((getEntropyHeavy(_seedIndex, _counter, _modulo, _seedAddress, _fee) % 10 ** 18) * _upperBound) / (10 ** 18)) + 1);\\r\\n    return(numberInRange_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Validate proof:\\r\\n  *\\r\\n  */\\r\\n  function validateProof(uint256 _seedValue, uint256 _modulo, uint256 _timeStamp, uint256 _entropy) external pure returns(bool valid){\\r\\n    if (uint256(keccak256(abi.encode(_seedValue, (_timeStamp % _modulo)))) == _entropy) return true;\\r\\n    else return false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Allow any token payments to be withdrawn:\\r\\n  *\\r\\n  */\\r\\n  function withdrawERC20(IERC20 _token, uint256 _amountToWithdraw) external onlyOwner {\\r\\n    _token.safeTransfer(treasury, _amountToWithdraw); \\r\\n    emit TokenWithdrawal(_amountToWithdraw, address(_token));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Revert all eth payments or unknown function calls\\r\\n  *\\r\\n  */\\r\\n  receive() external payable {\\r\\n    revert();\\r\\n  }\\r\\n\\r\\n  fallback() external payable {\\r\\n    revert();\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@omnus/contracts/token/ERC20Spendable/ERC20SpendableReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Omnus Contracts (contracts/token/ERC20Spendable/SpendableERC20Receiver.sol)\\r\\n// https://omnuslab.com/spendable\\r\\n\\r\\n// ERC20SpendableReceiver (Lightweight library for allowing contract interaction on token transfer).\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n*\\r\\n* @dev ERC20SpendableReceiver - library contract for an ERC20 extension to allow ERC20s to \\r\\n* operate as 'spendable' items, i.e. a token that can trigger an action on another contract\\r\\n* at the same time as being transfered. Similar to ERC677 and the hooks in ERC777, but with more\\r\\n* of an empasis on interoperability (returned values) than ERC677 and specifically scoped interaction\\r\\n* rather than the general hooks of ERC777. \\r\\n*\\r\\n* This library contract allows a smart contract to operate as a receiver of ERC20Spendable tokens.\\r\\n*\\r\\n*/\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";   \\r\\nimport \\\"@omnus/contracts/token/ERC20Spendable/IERC20SpendableReceiver.sol\\\"; \\r\\n\\r\\n/**\\r\\n*\\r\\n* @dev ERC20SpendableReceiver.\\r\\n*\\r\\n*/\\r\\nabstract contract ERC20SpendableReceiver is Context, Ownable, IERC20SpendableReceiver {\\r\\n  \\r\\n  address public immutable ERC20Spendable; \\r\\n\\r\\n  event ERC20Received(address _caller, uint256 _tokenPaid, uint256[] _arguments);\\r\\n\\r\\n  /** \\r\\n  *\\r\\n  * @dev must be passed the token contract for the payable ERC20:\\r\\n  *\\r\\n  */ \\r\\n  constructor(address _ERC20Spendable) {\\r\\n    ERC20Spendable = _ERC20Spendable;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  *\\r\\n  * @dev Only allow authorised token:\\r\\n  *\\r\\n  */ \\r\\n  modifier onlyERC20Spendable(address _caller) {\\r\\n    require (_caller == ERC20Spendable, \\\"Call from unauthorised caller\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /** \\r\\n  *\\r\\n  * @dev function to be called on receive. Must be overriden, including the addition of a fee check, if required:\\r\\n  *\\r\\n  */ \\r\\n  function receiveSpendableERC20(address _caller, uint256 _tokenPaid, uint256[] memory _arguments) external virtual onlyERC20Spendable(msg.sender) returns(bool, uint256[] memory) { \\r\\n    // Must be overriden \\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@omnus/contracts/storage/OmStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Omnus Contracts (contracts/storage/OmStorage.sol)\\r\\n// https://omnuslab.com/omstorage\\r\\n \\r\\n// OmStorage (Gas efficient storage)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";  \\r\\n\\r\\n/**\\r\\n* @dev OM Storage\\r\\n* \\r\\n* Allows the storage of multiple integers in a single uint256, allowing greatly reduced gas cost for storage.\\r\\n* For example, rather than defining storage for 12 integers that need to be acccessed individualy, you could use \\r\\n* a single storage integer, which needs access only once.\\r\\n*\\r\\n* The contract stores a single uint256, the Network Unified Storage, or NUS. This NUS can be broken down into\\r\\n* units of Operational Memory, called OMs. There can be up to 12 OM in a single NUS.\\r\\n*\\r\\n*/\\r\\n\\r\\nabstract contract OmStorage is Context {\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev only storage is a single uint256, the NUS:\\r\\n  *\\r\\n  */\\r\\n  uint256 public nus;\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev mapping details for OMs held as immutable items in the compiled bytecode:\\r\\n  *\\r\\n  */\\r\\n  uint256 private immutable om1Length;\\r\\n  uint256 private immutable om2Length;\\r\\n  uint256 private immutable om3Length;\\r\\n  uint256 private immutable om4Length;\\r\\n  uint256 private immutable om5Length;\\r\\n  uint256 private immutable om6Length;\\r\\n  uint256 private immutable om7Length;\\r\\n  uint256 private immutable om8Length;\\r\\n  uint256 private immutable om9Length;\\r\\n  uint256 private immutable om10Length;\\r\\n  uint256 private immutable om11Length;\\r\\n  uint256 private immutable om12Length;\\r\\n\\r\\n  uint256 private immutable om1Modulo;\\r\\n  uint256 private immutable om2Modulo;\\r\\n  uint256 private immutable om3Modulo;\\r\\n  uint256 private immutable om4Modulo;\\r\\n  uint256 private immutable om5Modulo;\\r\\n  uint256 private immutable om6Modulo;\\r\\n  uint256 private immutable om7Modulo;\\r\\n  uint256 private immutable om8Modulo;\\r\\n  uint256 private immutable om9Modulo;\\r\\n  uint256 private immutable om10Modulo;\\r\\n  uint256 private immutable om11Modulo;\\r\\n  uint256 private immutable om12Modulo;\\r\\n\\r\\n  uint256 private immutable om2Divisor;\\r\\n  uint256 private immutable om3Divisor;\\r\\n  uint256 private immutable om4Divisor;\\r\\n  uint256 private immutable om5Divisor;\\r\\n  uint256 private immutable om6Divisor;\\r\\n  uint256 private immutable om7Divisor;\\r\\n  uint256 private immutable om8Divisor;\\r\\n  uint256 private immutable om9Divisor;\\r\\n  uint256 private immutable om10Divisor;\\r\\n  uint256 private immutable om11Divisor;\\r\\n  uint256 private immutable om12Divisor;\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev The contstructor sets up the NUS with the modulo and divisor offsets:\\r\\n  *\\r\\n  */\\r\\n  constructor(uint256 _om1Length, uint256 _om2Length, uint256 _om3Length, uint256 _om4Length, \\r\\n    uint256 _om5Length, uint256 _om6Length, uint256 _om7Length, uint256 _om8Length, uint256 _om9Length, \\r\\n    uint256 _om10Length, uint256 _om11Length, uint256 _om12Length) {\\r\\n    \\r\\n    om1Length  = _om1Length;\\r\\n    om2Length  = _om2Length;\\r\\n    om3Length  = _om3Length;\\r\\n    om4Length  = _om4Length;\\r\\n    om5Length  = _om5Length;\\r\\n    om6Length  = _om6Length;\\r\\n    om7Length  = _om7Length;\\r\\n    om8Length  = _om8Length;\\r\\n    om9Length  = _om9Length;\\r\\n    om10Length = _om10Length;\\r\\n    om11Length = _om12Length;\\r\\n    om12Length = _om12Length;\\r\\n\\r\\n    uint256 moduloExponent;\\r\\n    uint256 divisorExponent;\\r\\n\\r\\n    moduloExponent += _om1Length;\\r\\n    om1Modulo = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om2Length;\\r\\n    om2Divisor      = 10 ** divisorExponent;\\r\\n    om2Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om3Length;\\r\\n    om3Divisor      = 10 ** divisorExponent;\\r\\n    om3Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om4Length;\\r\\n    om4Divisor      = 10 ** divisorExponent;\\r\\n    om4Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om5Length;\\r\\n    om5Divisor      = 10 ** divisorExponent;\\r\\n    om5Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om6Length;\\r\\n    om6Divisor      = 10 ** divisorExponent;\\r\\n    om6Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om7Length;\\r\\n    om7Divisor      = 10 ** divisorExponent;\\r\\n    om7Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om8Length;\\r\\n    om8Divisor      = 10 ** divisorExponent;\\r\\n    om8Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om9Length;\\r\\n    om9Divisor      = 10 ** divisorExponent;\\r\\n    om9Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om10Length;\\r\\n    om10Divisor      = 10 ** divisorExponent;\\r\\n    om10Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om11Length;\\r\\n    om11Divisor      = 10 ** divisorExponent;\\r\\n    om11Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    divisorExponent = moduloExponent;\\r\\n    moduloExponent  += _om12Length;\\r\\n    om12Divisor      = 10 ** divisorExponent;\\r\\n    om12Modulo       = 10 ** moduloExponent;\\r\\n\\r\\n    require(moduloExponent < 76, \\\"Too wide\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev getOmnn function calls return the value for that OM:\\r\\n  *\\r\\n  */\\r\\n  function getOm01() public view returns(uint256 om1_) {\\r\\n    return(om1Value(nus));\\r\\n  }\\r\\n  function getOm02() public view returns(uint256 om2_) {\\r\\n    return(om2Value(nus));\\r\\n  }\\r\\n  function getOm03() public view returns(uint256 om3_) {\\r\\n    return(om3Value(nus));\\r\\n  }\\r\\n  function getOm04() public view returns(uint256 om4_) {\\r\\n    return(om4Value(nus));\\r\\n  }\\r\\n  function getOm05() public view returns(uint256 om5_) {\\r\\n    return(om5Value(nus));\\r\\n  }\\r\\n  function getOm06() public view returns(uint256 om6_) {\\r\\n    return(om6Value(nus));\\r\\n  }\\r\\n  function getOm07() public view returns(uint256 om7_) {\\r\\n    return(om7Value(nus));\\r\\n  }\\r\\n  function getOm08() public view returns(uint256 om8_) {\\r\\n    return(om8Value(nus));\\r\\n  }\\r\\n  function getOm09() public view returns(uint256 om9_) {\\r\\n    return(om9Value(nus));\\r\\n  }\\r\\n  function getOm10() public view returns(uint256 om10_) {\\r\\n    return(om10Value(nus));\\r\\n  }\\r\\n  function getOm11() public view returns(uint256 om11_) {\\r\\n    return(om11Value(nus));\\r\\n  }\\r\\n  function getOm12() public view returns(uint256 om12_) {\\r\\n    return(om12Value(nus));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev omnValue function calls decode a passed NUS value to the OM:\\r\\n  *\\r\\n  */\\r\\n  function om1Value(uint256 _nus) internal view returns(uint256 om1_){\\r\\n    if (om1Length == 0) return(0);\\r\\n    return(_nus % om1Modulo);\\r\\n  }\\r\\n\\r\\n  function om2Value(uint256 _nus) internal view returns(uint256 om2_) {\\r\\n    if (om2Length == 0) return(0);\\r\\n    return((_nus % om2Modulo) / om2Divisor);\\r\\n  }\\r\\n\\r\\n  function om3Value(uint256 _nus) internal view returns(uint256 om3_) {\\r\\n    if (om3Length == 0) return(0);\\r\\n    return((_nus % om3Modulo) / om3Divisor);\\r\\n  }\\r\\n\\r\\n  function om4Value(uint256 _nus) internal view returns(uint256 om4_) {\\r\\n    if (om4Length == 0) return(0);\\r\\n    return((_nus % om4Modulo) / om4Divisor);\\r\\n  }\\r\\n\\r\\n  function om5Value(uint256 _nus) internal view returns(uint256 om5_) {\\r\\n    if (om5Length == 0) return(0);\\r\\n    return((_nus % om5Modulo) / om5Divisor);\\r\\n  }\\r\\n\\r\\n  function om6Value(uint256 _nus) internal view returns(uint256 om6_) {\\r\\n    if (om6Length == 0) return(0);\\r\\n    return((_nus % om6Modulo) / om6Divisor);\\r\\n  }\\r\\n\\r\\n  function om7Value(uint256 _nus) internal view returns(uint256 om7_) {\\r\\n    if (om7Length == 0) return(0);\\r\\n    return((_nus % om7Modulo) / om7Divisor);\\r\\n  }\\r\\n\\r\\n  function om8Value(uint256 _nus) internal view returns(uint256 om8_) {\\r\\n    if (om8Length == 0) return(0);\\r\\n    return((_nus % om8Modulo) / om8Divisor);\\r\\n  }\\r\\n\\r\\n  function om9Value(uint256 _nus) internal view returns(uint256 om9_) {\\r\\n    if (om9Length == 0) return(0);\\r\\n    return((_nus % om9Modulo) / om9Divisor);\\r\\n  }\\r\\n\\r\\n  function om10Value(uint256 _nus) internal view returns(uint256 om10_) {\\r\\n    if (om10Length == 0) return(0);\\r\\n    return((_nus % om10Modulo) / om10Divisor);\\r\\n  }\\r\\n\\r\\n  function om11Value(uint256 _nus) internal view returns(uint256 om11_) {\\r\\n    if (om11Length == 0) return(0);\\r\\n    return((_nus % om11Modulo) / om11Divisor); \\r\\n  }\\r\\n\\r\\n  function om12Value(uint256 _nus) internal view returns(uint256 om12_) {\\r\\n    if (om12Length == 0) return(0);\\r\\n    return((_nus % om12Modulo) / om12Divisor);  \\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Decode the full NUS into OMs\\r\\n  *\\r\\n  */\\r\\n  function decodeNus() public view returns(uint256 om1, uint256 om2, uint256 om3, uint256 om4, uint256 om5, \\r\\n  uint256 om6, uint256 om7, uint256 om8, uint256 om9, uint256 om10, uint256 om11, uint256 om12){\\r\\n\\r\\n    uint256 _nus = nus;\\r\\n\\r\\n    om1 = om1Value(_nus);\\r\\n    if (om2Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om2 = om2Value(_nus);\\r\\n    if (om3Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om3 = om3Value(_nus);\\r\\n    if (om4Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om4 = om4Value(_nus);\\r\\n    if (om5Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om5 = om5Value(_nus);\\r\\n    if (om6Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om6 = om6Value(_nus);\\r\\n    if (om7Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om7 = om7Value(_nus);\\r\\n    if (om8Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om8 = om8Value(_nus);\\r\\n    if (om9Length == 0)  return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om9 = om9Value(_nus);\\r\\n    if (om10Length == 0) return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om10 = om10Value(_nus);\\r\\n    if (om11Length == 0) return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om11 = om11Value(_nus);\\r\\n    if (om12Length == 0) return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n      om12 = om12Value(_nus);\\r\\n    return(om1, om2, om3, om4, om5, om6, om7, om8, om9, om10, om11, om12);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Encode the OMs to the NUS\\r\\n  *\\r\\n  */\\r\\n  function encodeNus(uint256 _om1, uint256 _om2, uint256 _om3, uint256 _om4, uint256 _om5, \\r\\n  uint256 _om6, uint256 _om7, uint256 _om8, uint256 _om9, uint256 _om10, uint256 _om11, uint256 _om12) internal {\\r\\n    checkOverflow(_om1,_om2, _om3, _om4, _om5, _om6, _om7, _om8, _om9, _om10, _om11, _om12);\\r\\n    nus = sumOmNus (_om1,_om2, _om3, _om4, _om5, _om6, _om7, _om8, _om9, _om10, _om11, _om12);      \\r\\n  }\\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Sum variables\\r\\n  *\\r\\n  */\\r\\n  function sumOmNus(uint256 _om1, uint256 _om2, uint256 _om3, uint256 _om4, uint256 _om5, \\r\\n  uint256 _om6, uint256 _om7, uint256 _om8, uint256 _om9, uint256 _om10, uint256 _om11, uint256 _om12) view internal returns(uint256 nus_) {\\r\\n    nus_ = _om1;\\r\\n    if (om2Length == 0)  return(nus_);\\r\\n    nus_ += _om2 * om2Divisor;\\r\\n    if (om3Length == 0)  return(nus_);\\r\\n    nus_ += _om3 * om3Divisor;\\r\\n    if (om4Length == 0)  return(nus_);\\r\\n    nus_ += _om4 * om4Divisor;\\r\\n    if (om5Length == 0)  return(nus_);\\r\\n    nus_ += _om5 * om5Divisor;\\r\\n    if (om6Length == 0)  return(nus_);\\r\\n    nus_ += _om6 * om6Divisor;\\r\\n    if (om7Length == 0)  return(nus_);\\r\\n    nus_ += _om7 * om7Divisor;\\r\\n    if (om8Length == 0)  return(nus_);\\r\\n    nus_ += _om8 * om8Divisor;\\r\\n    if (om9Length == 0)  return(nus_);\\r\\n    nus_ += _om9 * om9Divisor;\\r\\n    if (om10Length == 0)  return(nus_);\\r\\n    nus_ += _om10 * om10Divisor;\\r\\n    if (om11Length == 0)  return(nus_);\\r\\n    nus_ += _om11 * om11Divisor;\\r\\n    if (om12Length == 0)  return(nus_);\\r\\n    nus_ += _om12 * om12Divisor;\\r\\n    return(nus_);\\r\\n  }        \\r\\n\\r\\n  /**\\r\\n  *\\r\\n  * @dev Check for OM overflow\\r\\n  *\\r\\n  */\\r\\n  function checkOverflow(uint256 _om1, uint256 _om2, uint256 _om3, uint256 _om4, uint256 _om5, \\r\\n  uint256 _om6, uint256 _om7, uint256 _om8, uint256 _om9, uint256 _om10, uint256 _om11, uint256 _om12) view internal {\\r\\n    require((_om1  / om1Modulo == 0), \\\"om1 overflow\\\");\\r\\n    if (om2Length == 0) return;\\r\\n    require((_om2  / om2Modulo == 0), \\\"om2 overflow\\\");\\r\\n    if (om3Length == 0) return;\\r\\n    require((_om3  / om3Modulo == 0), \\\"om3 overflow\\\");\\r\\n    if (om4Length == 0) return;\\r\\n    require((_om4  / om4Modulo == 0), \\\"om4 overflow\\\");\\r\\n    if (om5Length == 0) return;\\r\\n    require((_om5  / om5Modulo == 0), \\\"om5 overflow\\\");\\r\\n    if (om6Length == 0) return;\\r\\n    require((_om6  / om6Modulo == 0), \\\"om6 overflow\\\");\\r\\n    if (om7Length == 0) return;\\r\\n    require((_om7  / om7Modulo == 0), \\\"om7 overflow\\\");\\r\\n    if (om8Length == 0) return;\\r\\n    require((_om8  / om8Modulo == 0), \\\"om8 overflow\\\");\\r\\n    if (om9Length == 0) return;\\r\\n    require((_om9  / om9Modulo == 0), \\\"om9 overflow\\\");\\r\\n    if (om10Length == 0) return;\\r\\n    require((_om10 / om10Modulo == 0), \\\"om10 overflow\\\");\\r\\n    if (om11Length == 0) return;\\r\\n    require((_om11 / om11Modulo == 0), \\\"om11 overflow\\\");\\r\\n    if (om2Length == 0) return;\\r\\n    require((_om12 / om12Modulo == 0), \\\"om12 overflow\\\"); \\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@omnus/contracts/entropy/IIce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Omnus Contracts (contracts/entropy/IIce.sol)\\r\\n// https://omnuslab.com/icering\\r\\n\\r\\n// IIce (In Chain Entropy - Interface)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n* @dev ICE - In-Chain Entropy\\r\\n*\\r\\n* This protocol generates in-chain entropy (OK, ON-chain not in-chain, but that didn't make a cool acronym...).\\r\\n* Solidity and blockchains are deterministic, so standard warnings apply, this produces pseudorandomness. For very strict levels of \\r\\n* randomness the answer remains to go off-chain, but that carries a cost and also introduces an off-chain dependency that could fail or,\\r\\n* worse, some day be tampered with or become vulnerable. \\r\\n* \\r\\n* The core premise of this protocol is that we aren't chasing true random (does that even exist? Philosophers?). What we are chasing \\r\\n* is a source or sources of entropy that are unpredictable in that they can't practically be controlled or predicted by a single entity.\\r\\n*\\r\\n* A key source of entropy in this protocol is contract balances, namely the balances of contracts that change with every block. Think large \\r\\n* value wallets, like exchange wallets. We store a list of these contract addresses and every request combine the eth value of these addresses\\r\\n* with the current block time and a modulo and hash it. \\r\\n* \\r\\n* Block.timestamp has been used as entropy before, but it has a significant drawback in that it can be controlled by miners. If the incentive is\\r\\n* high enough a miner could look to control the outcome by controlling the timestamp. \\r\\n* \\r\\n* When we add into this a variable contract balance we require a single entity be able to control both the block.timestamp and, for example, the \\r\\n* eth balance of a binance hot wallet. In the same block. To make it even harder, we loop through our available entropy sources, so the one that\\r\\n* a transaction uses depends on where in the order we are, which depends on any other txns using this protocol before it. So to be sure of the \\r\\n* outcome an entity needs to control the block.timestamp, either control other txns using this in the block or make sure it's the first txn in \\r\\n* the block, control the balance of another parties wallet than changes with every block, then be able to hash those known variables to see if the\\r\\n* outcome is a positive one for them. Whether any entity could achieve that is debatable, but you would imagine that if it is possible it \\r\\n* would come at significant cost.\\r\\n*\\r\\n* The protocol can be used in two ways: to return a full uin256 of entropy or a number within a given range. Each of these can be called in light,\\r\\n* standard or heavy mode:\\r\\n*   Light    - uses the balance of the last contract loaded into the entropy list for every generation. This reduces storage reads\\r\\n*              at the disadvantage of reducing the variability of the seed.\\r\\n*   Standard - increments through our list of sources using a different one as the seed each time, returning to the first item at the end of the \\r\\n*              loop and so on.\\r\\n*   Heavy    - creates a hash of hashes using ALL of the entropy seed sources. In principle this would require a single entity to control both\\r\\n*              the block timestamp and the precise balances of a range of addresses within that block. \\r\\n*\\r\\n*                                                             D I S C L A I M E R\\r\\n*                                                             ===================    \\r\\n*                   Use at your own risk, obvs. I've tried hard to make this good quality entropy, but whether random exists is\\r\\n*                   a question for philosophers not solidity devs. If there is a lot at stake on whatever it is you are doing \\r\\n*                   please DYOR on what option is best for you. There are no guarantees the entropy seeds here will be maintained\\r\\n*                   (I mean, no one might ever use this). No liability is accepted etc.\\r\\n*/\\r\\n\\r\\n/**\\r\\n*\\r\\n* @dev Implementation of the Ice interface.\\r\\n*\\r\\n*/\\r\\n\\r\\ninterface IIce {\\r\\n  event EntropyAdded (address _entropyAddress);\\r\\n  event EntropyUpdated (uint256 _index, address _newAddress, address _oldAddress); \\r\\n  event EntropyCleared (); \\r\\n  event EntropyServed(address seedAddress, uint256 seedValue, uint256 timeStamp, uint256 modulo, uint256 entropy);\\r\\n  event FeeUpdated(uint256 oldFee, uint256 newFee);\\r\\n  event TreasurySet(address treasury);\\r\\n  event TokenWithdrawal(uint256 indexed withdrawal, address indexed tokenAddress);\\r\\n\\r\\n  function viewEntropyAddress(uint256 _index) external view returns (address entropyAddress);\\r\\n  function addEntropy(address _entropyAddress) external;\\r\\n  function updateEntropy(uint256 _index, address _newAddress) external;\\r\\n  function deleteAllEntropy() external;\\r\\n  function updateFee(uint256 _fee) external;\\r\\n  function getConfig() external view returns(uint256 seedIndex_, uint256 counter_, uint256 modulo_, address seedAddress_, uint256 fee_);\\r\\n  function validateProof(uint256 _seedValue, uint256 _modulo, uint256 _timeStamp, uint256 _entropy) external pure returns(bool valid);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@omnus/contracts/token/ERC20Spendable/IERC20SpendableReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Omnus Contracts (contracts/token/ERC20Spendable/ISpendableERC20.sol)\\r\\n// https://omnuslab.com/spendable\\r\\n\\r\\n// IERC20SpendableReceiver - Interface definition for contracts to implement spendable ERC20 functionality\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n*\\r\\n* @dev IERC20SpendableReceiver - library contract for an ERC20 extension to allow ERC20s to \\r\\n* operate as 'spendable' items, i.e. a token that can trigger an action on another contract\\r\\n* at the same time as being transfered. Similar to ERC677 and the hooks in ERC777, but with more\\r\\n* of an empasis on interoperability (returned values) than ERC677 and specifically scoped interaction\\r\\n* rather than the general hooks of ERC777. \\r\\n*\\r\\n* This library contract allows a smart contract to operate as a receiver of ERC20Spendable tokens.\\r\\n*\\r\\n* Interface Definition IERC20SpendableReceiver\\r\\n*\\r\\n*/\\r\\n\\r\\ninterface IERC20SpendableReceiver{\\r\\n\\r\\n  /** \\r\\n  *\\r\\n  * @dev function to be called on receive. \\r\\n  *\\r\\n  */ \\r\\n  function receiveSpendableERC20(address _caller, uint256 _tokenPaid, uint256[] memory arguments) external returns(bool, uint256[] memory);\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Spendable\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_arguments\",\"type\":\"uint256[]\"}],\"name\":\"ERC20Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_entropyAddress\",\"type\":\"address\"}],\"name\":\"EntropyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EntropyCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modulo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entropy\",\"type\":\"uint256\"}],\"name\":\"EntropyServed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"EntropyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawal\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ERC20Spendable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entropyAddress\",\"type\":\"address\"}],\"name\":\"addEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decodeNus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om9\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om10\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om11\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"om12\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAllEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seedIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modulo_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seedAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm01\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om1_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm02\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om2_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm03\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om3_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm04\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om4_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm05\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om5_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm06\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om6_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm07\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om7_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm08\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om8_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm09\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om9_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om10_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm11\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om11_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOm12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"om12_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_arguments\",\"type\":\"uint256[]\"}],\"name\":\"receiveSpendableERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modulo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entropy\",\"type\":\"uint256\"}],\"name\":\"validateProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"viewEntropyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"entropyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ice", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000400a524420c464b9a8eba65614f297b5478ad6f3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}