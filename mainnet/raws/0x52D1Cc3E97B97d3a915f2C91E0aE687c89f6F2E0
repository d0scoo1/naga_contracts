{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UnipilotFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\n//Utilities\\nimport \\\"./interfaces/IUnipilotFarm.sol\\\";\\nimport \\\"./helper/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\n\\n// openzeppelin helpers\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title Unipilot Farm\\n/// @author @UnipilotDev\\n/// @notice Contract for staking Unipilot v2 lp's in farm and earn rewards\\n\\ncontract UnipilotFarm is IUnipilotFarm, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private immutable pilot;\\n\\n    address public governance;\\n    uint256 public rewardPerBlock;\\n    uint256 private totalVaults;\\n    uint256 public farmingGrowthBlockLimit;\\n\\n    mapping(uint256 => address) private vaults;\\n\\n    /// @notice contains the vault data for each vault being operated in the farm\\n    mapping(address => VaultInfo) public vaultInfo;\\n\\n    /// @notice contains the vault alt data for each vault being operated in the farm\\n    mapping(address => AltInfo) public vaultAltInfo;\\n\\n    /// @notice contains the data for each user who are involved in the vaults farm\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @notice contains the vaults which are active(whitelist == true)\\n    mapping(address => bool) public vaultWhitelist;\\n\\n    constructor(\\n        address _governance,\\n        address _pilot,\\n        uint256 _rewardPerBlock\\n    ) {\\n        require(_governance != address(0) && _pilot != address(0), \\\"ZA\\\");\\n        require(_rewardPerBlock > 0, \\\"IV\\\");\\n        governance = _governance;\\n        pilot = _pilot;\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"NA\\\");\\n        _;\\n    }\\n\\n    /// @notice use to whitelist the vault. If the vault is being\\n    /// added for the first time it is added to the vault mapping\\n    /// @dev only called by governance\\n    /// @param _vault list of vaults to be add in farm\\n    /// @param _multiplier multiplier w.r.t vault index\\n    function initializer(\\n        address[] calldata _vault,\\n        uint256[] calldata _multiplier,\\n        RewardType[] calldata _rewardType,\\n        address[] calldata _rewardToken\\n    ) external override onlyGovernance {\\n        require(\\n            _vault.length == _multiplier.length &&\\n                _vault.length == _rewardType.length &&\\n                _vault.length == _rewardToken.length,\\n            \\\"LNS\\\"\\n        );\\n\\n        uint256 blockNum = block.number;\\n        for (uint256 i = 0; i < _vault.length; i++) {\\n            require(\\n                _vault[i] != address(0) &&\\n                    _rewardToken[i] != address(0) &&\\n                    _multiplier[i] > 0,\\n                \\\"IV\\\"\\n            );\\n            require(\\n                IERC20(_rewardToken[i]).balanceOf(address(this)) > 0,\\n                \\\"NEB\\\"\\n            );\\n\\n            VaultInfo storage vaultState = vaultInfo[_vault[i]];\\n            AltInfo storage vaultAltState = vaultAltInfo[_vault[i]];\\n\\n            if (!vaultWhitelist[_vault[i]] && vaultState.totalLpLocked == 0) {\\n                if (\\n                    _rewardType[i] == RewardType.Alt ||\\n                    _rewardType[i] == RewardType.Dual\\n                ) {\\n                    vaultAltState.multiplier = _multiplier[i];\\n                    vaultAltState.startBlock = blockNum;\\n                    vaultAltState.lastRewardBlock = blockNum;\\n                    vaultAltState.rewardToken = _rewardToken[i];\\n                }\\n                insertVault(_vault[i], _multiplier[i], _rewardType[i]);\\n                emit Vault(\\n                    _vault[i],\\n                    rewardPerBlock,\\n                    _multiplier[i],\\n                    blockNum,\\n                    _rewardType[i],\\n                    _rewardToken[i]\\n                );\\n            } else {\\n                require(!vaultWhitelist[_vault[i]], \\\"AI\\\");\\n                if (vaultState.reward == RewardType.Dual) {\\n                    vaultState.lastRewardBlock = blockNum;\\n                    vaultAltState.lastRewardBlock = blockNum;\\n                    vaultAltState.multiplier = _multiplier[i];\\n                    vaultState.multiplier = _multiplier[i];\\n                } else if (vaultState.reward == RewardType.Alt) {\\n                    vaultAltState.lastRewardBlock = blockNum;\\n                    vaultAltState.multiplier = _multiplier[i];\\n                } else {\\n                    vaultState.lastRewardBlock = blockNum;\\n                    vaultState.multiplier = _multiplier[i];\\n                }\\n            }\\n            vaultWhitelist[_vault[i]] = true;\\n            emit VaultWhitelistStatus(_vault[i], true);\\n        }\\n    }\\n\\n    /// @notice Deposit your lp for the specified vaults in the Unipilot farm\\n    /// @param _vault vault address on which you want to farm\\n    /// @param _amount the amount of tokens you want to deposit\\n    function stakeLp(address _vault, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(_vault != address(0) && _amount > 0, \\\"IV\\\");\\n        require(farmingGrowthBlockLimit == 0, \\\"LA\\\");\\n        require(vaultWhitelist[_vault], \\\"TNL\\\");\\n        address caller = msg.sender;\\n        require(IERC20(_vault).balanceOf(caller) >= _amount, \\\"NEB\\\");\\n        uint256 blockNum = block.number;\\n        bool flag;\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        AltInfo storage vaultAltState = vaultAltInfo[_vault];\\n        UserInfo storage userState = userInfo[_vault][caller];\\n\\n        (uint256 reward, uint256 altReward, , ) = currentReward(_vault, caller);\\n        if (reward > 0 || altReward > 0) {\\n            claimReward(_vault);\\n            flag = true;\\n        }\\n        if (!flag) {\\n            if (vaultState.lastRewardBlock != vaultState.startBlock) {\\n                uint256 blockDiff = blockNum.sub(vaultState.lastRewardBlock);\\n                vaultState.globalReward = getGlobalReward(\\n                    _vault,\\n                    blockDiff,\\n                    vaultState.multiplier,\\n                    vaultState.globalReward,\\n                    0\\n                );\\n            }\\n        }\\n\\n        if (\\n            vaultState.reward == RewardType.Dual ||\\n            vaultState.reward == RewardType.Alt\\n        ) {\\n            updateAltState(_vault);\\n            vaultAltState.lastRewardBlock = blockNum;\\n        }\\n\\n        vaultState.totalLpLocked = vaultState.totalLpLocked.add(_amount);\\n\\n        userInfo[_vault][caller] = UserInfo({\\n            reward: vaultState.globalReward,\\n            altReward: vaultAltState.globalReward,\\n            lpLiquidity: userState.lpLiquidity.add(_amount),\\n            vault: _vault\\n        });\\n\\n        IERC20(vaultState.stakingToken).safeTransferFrom(\\n            caller,\\n            address(this),\\n            _amount\\n        );\\n\\n        if (\\n            vaultState.reward == RewardType.Dual ||\\n            vaultState.reward == RewardType.Pilot\\n        ) {\\n            vaultState.lastRewardBlock = blockNum;\\n        }\\n        emit Deposit(caller, _vault, _amount, vaultState.totalLpLocked);\\n    }\\n\\n    /// @notice Withdraw your lp as well as the accumulated reward if\\n    /// any from the farm.\\n    /// @param _vault vault where to earn reward\\n    /// @param _amount the amount of tokens want to withdraw\\n    function unstakeLp(address _vault, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(_vault != address(0) && _amount > 0, \\\"IA\\\");\\n        address caller = msg.sender;\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        UserInfo storage userState = userInfo[_vault][caller];\\n        require(\\n            userState.lpLiquidity >= _amount &&\\n                vaultState.totalLpLocked >= _amount,\\n            \\\"AGTL\\\"\\n        );\\n\\n        claimReward(_vault);\\n\\n        vaultState.totalLpLocked = vaultState.totalLpLocked.sub(_amount);\\n        userState.lpLiquidity = userState.lpLiquidity.sub(_amount);\\n\\n        IERC20(_vault).safeTransfer(caller, _amount);\\n\\n        emit Withdraw(caller, _vault, _amount);\\n\\n        if (vaultState.totalLpLocked == 0) {\\n            if (vaultState.reward == RewardType.Dual) {\\n                vaultState.startBlock = block.number;\\n                vaultState.lastRewardBlock = block.number;\\n                vaultState.globalReward = 0;\\n\\n                AltInfo storage altState = vaultAltInfo[_vault];\\n                altState.startBlock = block.number;\\n                altState.lastRewardBlock = block.number;\\n                altState.globalReward = 0;\\n            } else if (vaultState.reward == RewardType.Alt) {\\n                AltInfo storage altState = vaultAltInfo[_vault];\\n                altState.startBlock = block.number;\\n                altState.lastRewardBlock = block.number;\\n                altState.globalReward = 0;\\n            } else {\\n                vaultState.startBlock = block.number;\\n                vaultState.lastRewardBlock = block.number;\\n                vaultState.globalReward = 0;\\n            }\\n        }\\n\\n        if (userState.lpLiquidity == 0) {\\n            delete userInfo[_vault][caller];\\n        }\\n    }\\n\\n    /// @notice Withdraw your accumulated rewards without withdrawing lp.\\n    /// @param _vault vault address from which you intend to claim the\\n    /// accumulated reward from\\n    /// @return reward of pilot for a particular user that was accumulated\\n    /// @return altReward of altToken for a particular user that was accumulated\\n    /// @return gr global reward\\n    /// @return altGr alt global reward\\n    function claimReward(address _vault)\\n        public\\n        returns (\\n            uint256 reward,\\n            uint256 altReward,\\n            uint256 gr,\\n            uint256 altGr\\n        )\\n    {\\n        require(_vault != address(0), \\\"ZA\\\");\\n        address caller = msg.sender;\\n        uint256 blocknum = block.number;\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        AltInfo storage vaultAltState = vaultAltInfo[_vault];\\n        UserInfo storage userState = userInfo[_vault][caller];\\n\\n        (reward, altReward, gr, altGr) = currentReward(_vault, caller);\\n\\n        require(reward > 0 || altReward > 0, \\\"RZ\\\");\\n        if (vaultState.reward == RewardType.Dual) {\\n            if (altReward > 0) {\\n                userState.altReward = altGr;\\n                vaultAltState.globalReward = altGr;\\n                vaultAltState.lastRewardBlock = blocknum;\\n            }\\n            if (reward > 0) {\\n                userState.reward = gr;\\n                vaultState.globalReward = gr;\\n                vaultState.lastRewardBlock = blocknum;\\n            }\\n        } else if (vaultState.reward == RewardType.Alt) {\\n            if (altReward > 0) {\\n                userState.altReward = altGr;\\n                vaultAltState.globalReward = altGr;\\n                vaultAltState.lastRewardBlock = blocknum;\\n            }\\n            if (reward > 0) {\\n                userState.reward = vaultState.globalReward;\\n            }\\n        } else {\\n            if (reward > 0) {\\n                userState.reward = gr;\\n                vaultState.globalReward = gr;\\n                vaultState.lastRewardBlock = blocknum;\\n            }\\n\\n            if (altReward > 0) {\\n                userState.altReward = vaultAltState.globalReward;\\n            }\\n        }\\n        if (altReward > 0) {\\n            emit Reward(vaultAltState.rewardToken, caller, _vault, altReward);\\n            IERC20(vaultAltState.rewardToken).safeTransfer(caller, altReward);\\n        }\\n        if (reward > 0) {\\n            emit Reward(pilot, caller, _vault, reward);\\n            IERC20(pilot).safeTransfer(caller, reward);\\n        }\\n    }\\n\\n    /// @notice Blacklist the vaults which are already whitelisted.\\n    /// No famring allowed on blacklisted vaults\\n    /// @dev only called by governance\\n    /// @param _vaults list of vaults\\n    function blacklistVaults(address[] calldata _vaults)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            if (vaultInfo[_vaults[i]].reward == RewardType.Dual) {\\n                updateVaultState(_vaults[i]);\\n                updateAltState(_vaults[i]);\\n            } else if (vaultInfo[_vaults[i]].reward == RewardType.Alt) {\\n                updateAltState(_vaults[i]);\\n            } else {\\n                updateVaultState(_vaults[i]);\\n            }\\n            vaultWhitelist[_vaults[i]] = false;\\n            emit VaultWhitelistStatus(_vaults[i], false);\\n        }\\n    }\\n\\n    /// @notice update the reward per block of the vaults\\n    /// @dev only called by governance\\n    /// @param _value of the reward to be set\\n    function updateRewardPerBlock(uint256 _value)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(_value > 0, \\\"IV\\\");\\n        address[] memory vaults = vaultListed();\\n        for (uint256 i = 0; i < vaults.length; i++) {\\n            if (vaultWhitelist[vaults[i]]) {\\n                if (vaultInfo[vaults[i]].totalLpLocked != 0) {\\n                    if (vaultInfo[vaults[i]].reward == RewardType.Dual) {\\n                        updateVaultState(vaults[i]);\\n                        updateAltState(vaults[i]);\\n                    } else if (vaultInfo[vaults[i]].reward == RewardType.Alt) {\\n                        updateAltState(vaults[i]);\\n                    } else {\\n                        updateVaultState(vaults[i]);\\n                    }\\n                }\\n            }\\n        }\\n        emit RewardPerBlock(rewardPerBlock, rewardPerBlock = _value);\\n    }\\n\\n    /// @notice update multiplier of a particular vault\\n    /// @dev only called by governance\\n    /// @param _vault vault address for which you want to update multiplier\\n    /// @param _value value of multiplier\\n    function updateMultiplier(address _vault, uint256 _value)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(_vault != address(0) && _value > 0, \\\"IV\\\");\\n        require(\\n            vaultInfo[_vault].reward == RewardType.Pilot ||\\n                vaultInfo[_vault].reward == RewardType.Dual,\\n            \\\"WM\\\"\\n        );\\n        updateVaultState(_vault);\\n        emit Multiplier(\\n            _vault,\\n            pilot,\\n            vaultInfo[_vault].multiplier,\\n            vaultInfo[_vault].multiplier = _value\\n        );\\n    }\\n\\n    /// @notice update alt multiplier of a particular vault\\n    /// @dev only called by governance\\n    /// @param _vault vault address for which you want to update multiplier\\n    /// @param _value value of multiplier\\n    function updateAltMultiplier(address _vault, uint256 _value)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(_vault != address(0) && _value > 0, \\\"IV\\\");\\n        require(\\n            vaultInfo[_vault].reward == RewardType.Alt ||\\n                vaultInfo[_vault].reward == RewardType.Dual,\\n            \\\"WM\\\"\\n        );\\n        updateAltState(_vault);\\n        emit Multiplier(\\n            _vault,\\n            vaultAltInfo[_vault].rewardToken,\\n            vaultAltInfo[_vault].multiplier,\\n            vaultAltInfo[_vault].multiplier = _value\\n        );\\n    }\\n\\n    /// @notice update governance to a new address\\n    /// @dev only called by governance\\n    /// @param _newGovernance new address of governance\\n    function updateGovernance(address _newGovernance)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(_newGovernance != address(0), \\\"IA\\\");\\n\\n        emit GovernanceUpdated(governance, governance = _newGovernance);\\n    }\\n\\n    /// @notice loops through the vaults mapping and returns a formulated array of vaults\\n    /// @dev only called by governance\\n    function vaultListed() public view returns (address[] memory) {\\n        uint256 vaultsLength = totalVaults;\\n        require(vaultsLength > 0, \\\"NPE\\\");\\n        address[] memory vaultList = new address[](vaultsLength);\\n        for (uint256 i = 0; i < vaultsLength; i++) {\\n            vaultList[i] = vaults[i + 1];\\n        }\\n        return vaultList;\\n    }\\n\\n    /// @notice update reward type of the vault to either PILOT | ALT | DUAL\\n    /// @dev only called by governance\\n    /// @param _vault vault address for which you want to update reward type\\n    /// @param _rewardType type to which you want to change the reward to\\n    /// @param _altToken token address in which you want to give alt rewards\\n    function updateRewardType(\\n        address _vault,\\n        RewardType _rewardType,\\n        address _altToken\\n    ) external override onlyGovernance {\\n        require(_vault != address(0) && _altToken != address(0), \\\"NAZ\\\");\\n        AltInfo storage altState = vaultAltInfo[_vault];\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        uint256 blockNumber = block.number;\\n\\n        if (RewardType.Alt == _rewardType || RewardType.Dual == _rewardType) {\\n            require(IERC20(_altToken).balanceOf(address(this)) > 0, \\\"NEB\\\");\\n            altState.rewardToken = _altToken;\\n        }\\n\\n        if (vaultInfo[_vault].reward == RewardType.Alt) {\\n            vaultState.lastRewardBlock = blockNumber;\\n            if (_rewardType == RewardType.Pilot) {\\n                altState.startBlock = blockNumber;\\n                updateAltState(_vault);\\n            }\\n        } else if (vaultInfo[_vault].reward == RewardType.Dual) {\\n            if (_rewardType == RewardType.Alt) {\\n                if (vaultState.totalLpLocked > 0) {\\n                    vaultState.startBlock = blockNumber;\\n                }\\n                updateVaultState(_vault);\\n            } else {\\n                altState.startBlock = blockNumber;\\n                updateAltState(_vault);\\n            }\\n        } else {\\n            altState.lastRewardBlock = blockNumber;\\n            if (_rewardType == RewardType.Alt) {\\n                if (vaultState.totalLpLocked > 0) {\\n                    vaultState.startBlock = blockNumber;\\n                }\\n                updateVaultState(_vault);\\n            }\\n        }\\n        emit RewardStatus(\\n            _vault,\\n            vaultInfo[_vault].reward,\\n            vaultInfo[_vault].reward = _rewardType,\\n            _altToken\\n        );\\n    }\\n\\n    /// @notice Migrate funds to Governance address or in new Contract\\n    /// @dev only governance can call this\\n    /// @param _receiver address of new contract or wallet address\\n    /// @param _tokenAddress address of token which want to migrate\\n    /// @param _amount withdraw that amount which are required\\n    function migrateFunds(\\n        address _receiver,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external override onlyGovernance {\\n        require(_receiver != address(0) && _tokenAddress != address(0), \\\"NAZ\\\");\\n        require(_amount > 0, \\\"IV\\\");\\n        IERC20(_tokenAddress).safeTransfer(_receiver, _amount);\\n        emit MigrateFunds(_receiver, _tokenAddress, _amount);\\n    }\\n\\n    /// @notice Used to stop staking Lps in contract after block limit\\n    function updateFarmingLimit(uint256 _blockNumber)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(_blockNumber == 0 || _blockNumber > block.number, \\\"BSG\\\");\\n        emit UpdateFarmingLimit(\\n            farmingGrowthBlockLimit,\\n            farmingGrowthBlockLimit = _blockNumber\\n        );\\n        updateLastBlock(_blockNumber);\\n    }\\n\\n    /// @notice Withdraw your lp\\n    /// @param _vault vault from where lp's will be unstaked without reward\\n    function emergencyUnstakeLp(address _vault) external override nonReentrant {\\n        require(_vault != address(0), \\\"IA\\\");\\n        address caller = msg.sender;\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        UserInfo memory userState = userInfo[_vault][caller];\\n        require(\\n            userState.lpLiquidity > 0 && vaultState.totalLpLocked > 0,\\n            \\\"AGTL\\\"\\n        );\\n        IERC20(_vault).safeTransfer(caller, userState.lpLiquidity);\\n        vaultState.totalLpLocked = vaultState.totalLpLocked.sub(\\n            userState.lpLiquidity\\n        );\\n        if (vaultState.totalLpLocked == 0) {\\n            if (vaultState.reward == RewardType.Dual) {\\n                vaultState.startBlock = block.number;\\n                vaultState.lastRewardBlock = block.number;\\n                vaultState.globalReward = 0;\\n\\n                AltInfo storage altState = vaultAltInfo[_vault];\\n                altState.startBlock = block.number;\\n                altState.lastRewardBlock = block.number;\\n                altState.globalReward = 0;\\n            } else if (vaultState.reward == RewardType.Alt) {\\n                AltInfo storage altState = vaultAltInfo[_vault];\\n                altState.startBlock = block.number;\\n                altState.lastRewardBlock = block.number;\\n                altState.globalReward = 0;\\n            } else {\\n                vaultState.startBlock = block.number;\\n                vaultState.lastRewardBlock = block.number;\\n                vaultState.globalReward = 0;\\n            }\\n        }\\n        delete userInfo[_vault][caller];\\n    }\\n\\n    ///@notice use to fetch reward of particular user in a vault\\n    ///@param _vault address of vault to query for\\n    ///@param _user address of user to query for\\n    function currentReward(address _vault, address _user)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 reward,\\n            uint256 altReward,\\n            uint256 gr,\\n            uint256 altGr\\n        )\\n    {\\n        //gas optimisation using store for 1 SLOAD rather then n number\\n        //of SLOADS per each struct value count\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        UserInfo storage userState = userInfo[_vault][_user];\\n\\n        if (vaultState.reward == RewardType.Dual) {\\n            gr = verifyLimit(_vault, Direction.Pilot);\\n            reward = gr.sub(userState.reward);\\n            reward = FullMath.mulDiv(reward, userState.lpLiquidity, 1e18);\\n            altGr = verifyLimit(_vault, Direction.Alt);\\n            altReward = altGr.sub(userState.altReward);\\n            altReward = FullMath.mulDiv(altReward, userState.lpLiquidity, 1e18);\\n        } else if (vaultState.reward == RewardType.Alt) {\\n            altGr = verifyLimit(_vault, Direction.Alt);\\n            altReward = altGr.sub(userState.altReward);\\n            altReward = FullMath.mulDiv(altReward, userState.lpLiquidity, 1e18);\\n\\n            if (userState.reward < vaultState.globalReward) {\\n                reward = vaultState.globalReward.sub(userState.reward);\\n                reward = FullMath.mulDiv(reward, userState.lpLiquidity, 1e18);\\n            }\\n        } else {\\n            gr = verifyLimit(_vault, Direction.Pilot);\\n            reward = gr.sub(userState.reward);\\n            reward = FullMath.mulDiv(reward, userState.lpLiquidity, 1e18);\\n\\n            if (userState.altReward < vaultAltInfo[_vault].globalReward) {\\n                AltInfo memory vaultAltState = vaultAltInfo[_vault];\\n                altReward = vaultAltState.globalReward.sub(userState.altReward);\\n                altReward = FullMath.mulDiv(\\n                    altReward,\\n                    userState.lpLiquidity,\\n                    1e18\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice update PoolInfo and AltInfo global rewards and lastRewardBlock\\n    /// @dev only called by governance\\n    function updateLastBlock(uint256 _blockNumber) private {\\n        address[] memory vaults = vaultListed();\\n        for (uint256 i = 0; i < totalVaults; i++) {\\n            if (vaultInfo[vaults[i]].reward == RewardType.Dual) {\\n                if (_blockNumber > 0) {\\n                    updateVaultState(vaults[i]);\\n                    updateAltState(vaults[i]);\\n                } else {\\n                    vaultInfo[vaults[i]].lastRewardBlock = block.number;\\n                    vaultAltInfo[vaults[i]].lastRewardBlock = block.number;\\n                }\\n            } else if (vaultInfo[vaults[i]].reward == RewardType.Alt) {\\n                if (_blockNumber > 0) {\\n                    updateAltState(vaults[i]);\\n                } else {\\n                    vaultAltInfo[vaults[i]].lastRewardBlock = block.number;\\n                }\\n            } else {\\n                if (_blockNumber > 0) {\\n                    updateVaultState(vaults[i]);\\n                } else {\\n                    vaultInfo[vaults[i]].lastRewardBlock = block.number;\\n                }\\n            }\\n        }\\n    }\\n\\n    ///@notice use for reading global reward of Unipilot farm\\n    ///@param _vault address of vault\\n    ///@param _blockDiff difference of the blocks for which you want the global reward\\n    ///@param _multiplier multiplier of the vaults\\n    ///@param _lastGlobalReward last global reward that was calculated\\n    function getGlobalReward(\\n        address _vault,\\n        uint256 _blockDiff,\\n        uint256 _multiplier,\\n        uint256 _lastGlobalReward,\\n        uint24 _direction\\n    ) private view returns (uint256 _globalReward) {\\n        _globalReward = _direction == 0\\n            ? vaultInfo[_vault].globalReward\\n            : vaultAltInfo[_vault].globalReward;\\n\\n        if (vaultWhitelist[_vault]) {\\n            if (vaultInfo[_vault].totalLpLocked > 0) {\\n                _globalReward = FullMath.mulDiv(\\n                    rewardPerBlock,\\n                    _multiplier,\\n                    1e18\\n                );\\n\\n                _globalReward = FullMath\\n                    .mulDiv(\\n                        _blockDiff.mul(_globalReward),\\n                        1e18,\\n                        vaultInfo[_vault].totalLpLocked\\n                    )\\n                    .add(_lastGlobalReward);\\n            }\\n        }\\n    }\\n\\n    ///@notice used to update vault states, call where required\\n    ///@param _vault address of the vault for which you want to update the state\\n    function updateVaultState(address _vault) private {\\n        VaultInfo storage vaultState = vaultInfo[_vault];\\n        if (vaultState.totalLpLocked > 0) {\\n            uint256 blockDiff = (block.number).sub(vaultState.lastRewardBlock);\\n            vaultState.globalReward = getGlobalReward(\\n                _vault,\\n                blockDiff,\\n                vaultState.multiplier,\\n                vaultState.globalReward,\\n                0\\n            );\\n            vaultState.lastRewardBlock = block.number;\\n        }\\n    }\\n\\n    ///@notice update vault alt states, call where required\\n    ///@param _vault address of the vault for which you want to update the state\\n    function updateAltState(address _vault) private {\\n        AltInfo storage altState = vaultAltInfo[_vault];\\n\\n        if (altState.lastRewardBlock != altState.startBlock) {\\n            uint256 blockDiff = (block.number).sub(altState.lastRewardBlock);\\n            altState.globalReward = getGlobalReward(\\n                _vault,\\n                blockDiff,\\n                altState.multiplier,\\n                altState.globalReward,\\n                1\\n            );\\n            altState.lastRewardBlock = block.number;\\n        }\\n    }\\n\\n    ///@notice Add vault in Unipilot Farm called inside initializer\\n    ///@param _vault address of vault to add\\n    ///@param _multiplier value of multiplier to set for particular vault\\n    function insertVault(\\n        address _vault,\\n        uint256 _multiplier,\\n        RewardType _rewardType\\n    ) private {\\n        if (vaultInfo[_vault].startBlock == 0) {\\n            totalVaults++;\\n        }\\n        vaults[totalVaults] = _vault;\\n        vaultInfo[_vault] = VaultInfo({\\n            startBlock: block.number,\\n            globalReward: 0,\\n            lastRewardBlock: block.number,\\n            totalLpLocked: 0,\\n            multiplier: _multiplier,\\n            stakingToken: _vault,\\n            reward: _rewardType\\n        });\\n    }\\n\\n    ///@notice check the limit to see if the farmingGrowthBlockLimit was crossed or not\\n    ///@param _vault address of vault\\n    ///@param _check enum value to check whether we want to verify Limit for Pilot or Alt\\n    function verifyLimit(address _vault, Direction _check)\\n        private\\n        view\\n        returns (uint256 globalReward)\\n    {\\n        Cache memory state;\\n\\n        if (_check == Direction.Pilot) {\\n            VaultInfo storage vaultState = vaultInfo[_vault];\\n            state = Cache({\\n                globalReward: vaultState.globalReward,\\n                lastRewardBlock: vaultState.lastRewardBlock,\\n                multiplier: vaultState.multiplier,\\n                direction: 0\\n            });\\n        } else if (_check == Direction.Alt) {\\n            AltInfo storage vaultAltInfo = vaultAltInfo[_vault];\\n            state = Cache({\\n                globalReward: vaultAltInfo.globalReward,\\n                lastRewardBlock: vaultAltInfo.lastRewardBlock,\\n                multiplier: vaultAltInfo.multiplier,\\n                direction: 1\\n            });\\n        }\\n\\n        if (\\n            state.lastRewardBlock < farmingGrowthBlockLimit &&\\n            block.number >= farmingGrowthBlockLimit\\n        ) {\\n            globalReward = getGlobalReward(\\n                _vault,\\n                farmingGrowthBlockLimit.sub(state.lastRewardBlock),\\n                state.multiplier,\\n                state.globalReward,\\n                state.direction\\n            );\\n        } else if (\\n            state.lastRewardBlock > farmingGrowthBlockLimit &&\\n            farmingGrowthBlockLimit > 0\\n        ) {\\n            globalReward = state.globalReward;\\n        } else {\\n            uint256 blockDifference = (block.number).sub(state.lastRewardBlock);\\n            globalReward = getGlobalReward(\\n                _vault,\\n                blockDifference,\\n                state.multiplier,\\n                state.globalReward,\\n                state.direction\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilotFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IUnipilotFarm {\\n    struct UserInfo {\\n        uint256 reward;\\n        uint256 altReward;\\n        uint256 lpLiquidity;\\n        address vault;\\n    }\\n\\n    struct VaultInfo {\\n        uint256 startBlock;\\n        uint256 lastRewardBlock;\\n        uint256 globalReward;\\n        uint256 totalLpLocked;\\n        uint256 multiplier;\\n        address stakingToken;\\n        RewardType reward;\\n    }\\n\\n    struct AltInfo {\\n        address rewardToken;\\n        uint256 startBlock;\\n        uint256 globalReward;\\n        uint256 lastRewardBlock;\\n        uint256 multiplier;\\n    }\\n\\n    struct Cache {\\n        uint256 globalReward;\\n        uint256 lastRewardBlock;\\n        uint256 multiplier;\\n        uint24 direction;\\n    }\\n\\n    event Vault(\\n        address vault,\\n        uint256 rewardPerBlock,\\n        uint256 multiplier,\\n        uint256 lastRewardBlock,\\n        RewardType rewardType,\\n        address rewardToken\\n    );\\n\\n    event RewardStatus(\\n        address vault,\\n        RewardType old,\\n        RewardType updated,\\n        address altToken\\n    );\\n\\n    enum Direction {\\n        Pilot,\\n        Alt\\n    }\\n\\n    enum RewardType {\\n        Pilot,\\n        Alt,\\n        Dual\\n    }\\n\\n    event Deposit(\\n        address user,\\n        address vault,\\n        uint256 amount,\\n        uint256 totalLpLocked\\n    );\\n\\n    event Withdraw(address user, address vault, uint256 amount);\\n\\n    event Reward(address token, address user, address vault, uint256 reward);\\n\\n    event Multiplier(\\n        address vault,\\n        address token,\\n        uint256 old,\\n        uint256 updated\\n    );\\n\\n    event RewardPerBlock(uint256 old, uint256 updated);\\n\\n    event VaultWhitelistStatus(address indexed _vault, bool status);\\n\\n    event FarmingStatus(bool old, bool updated);\\n\\n    event GovernanceUpdated(address old, address updated);\\n\\n    event MigrateFunds(\\n        address newContract,\\n        address _tokenAddress,\\n        uint256 _amount\\n    );\\n\\n    event UpdateFarmingLimit(uint256 old, uint256 updated);\\n\\n    function initializer(\\n        address[] calldata _vault,\\n        uint256[] calldata _multiplier,\\n        RewardType[] calldata _rewardType,\\n        address[] calldata _rewardToken\\n    ) external;\\n\\n    function blacklistVaults(address[] calldata _vault) external;\\n\\n    function stakeLp(address vault, uint256 amount) external;\\n\\n    function unstakeLp(address vault, uint256 amount) external;\\n\\n    function emergencyUnstakeLp(address vault) external;\\n\\n    function updateRewardPerBlock(uint256 value) external;\\n\\n    function updateMultiplier(address vault, uint256 value) external;\\n\\n    function updateAltMultiplier(address vault, uint256 value) external;\\n\\n    function currentReward(address vault, address user)\\n        external\\n        view\\n        returns (\\n            uint256 reward,\\n            uint256 altReward,\\n            uint256 gr,\\n            uint256 altGr\\n        );\\n\\n    function updateGovernance(address newGovernance) external;\\n\\n    function updateRewardType(\\n        address _vault,\\n        RewardType _rewardType,\\n        address _altToken\\n    ) external;\\n\\n    function migrateFunds(\\n        address _receiver,\\n        address _tokenAddress,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateFarmingLimit(uint256 _blockNumber) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helper/ReentrancyGuard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract ReentrancyGuard {\\n    uint8 private _unlocked = 1;\\n\\n    modifier nonReentrant() {\\n        require(_unlocked == 1, \\\"ReentrancyGuard: reentrant call\\\");\\n        _unlocked = 0;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pilot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLpLocked\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"}],\"name\":\"FarmingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MigrateFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"Multiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"RewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IUnipilotFarm.RewardType\",\"name\":\"old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IUnipilotFarm.RewardType\",\"name\":\"updated\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"altToken\",\"type\":\"address\"}],\"name\":\"RewardStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"UpdateFarmingLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IUnipilotFarm.RewardType\",\"name\":\"rewardType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"Vault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"VaultWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"blacklistVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altGr\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altGr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"emergencyUnstakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingGrowthBlockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_multiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IUnipilotFarm.RewardType[]\",\"name\":\"_rewardType\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardToken\",\"type\":\"address[]\"}],\"name\":\"initializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateAltMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"updateFarmingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"enum IUnipilotFarm.RewardType\",\"name\":\"_rewardType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_altToken\",\"type\":\"address\"}],\"name\":\"updateRewardType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"altReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAltInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLpLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"enum IUnipilotFarm.RewardType\",\"name\":\"reward\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultListed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UnipilotFarm", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000001e3881227010c8dcdfa2f11833d3d70a00893f9400000000000000000000000037c997b35c619c21323f3518b9357914e8b995250000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}