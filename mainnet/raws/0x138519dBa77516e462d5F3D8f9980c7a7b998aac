{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BlitmapCRConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./interfaces/IBlitmap.sol\\\";\\n\\n//    _____                 _____                         \\n//   (, /  |          ,    (, /   )                       \\n//     /---| __  _/_         /__ /    __  __    _  __  _  \\n//  ) /    |_/ (_(___(_   ) /   \\\\_(_(_/ (_/ (__(/_/ (_/_)_\\n// (_/                   (_/                              \\n//\\n//  10,000 NFT's generated mainly from the original 10,000 Chainrunners.\\n//  Each Anti Runner has a sibling Chain Runner.  When re-united with its\\n//  sibling, fun things happen.                            \\n//\\n//  This is a handy contract for converting a Blitmap layer into a Chainrunner\\n//  supported layer.\\n//\\n\\ncontract BlitmapCRConverter {\\n    address public blitmapAddress;\\n\\n    struct BitmapCurser {\\n        uint8 colorIndex1;\\n        uint8 colorIndex2;\\n        uint8 colorIndex3;\\n        uint8 colorIndex4;\\n        uint8 colorIndex5;\\n        uint8 colorIndex6;\\n        uint8 colorIndex7;\\n        uint8 colorIndex8;\\n    }\\n\\n    constructor(address _blitmapAddress) {\\n        blitmapAddress = _blitmapAddress;\\n    }\\n\\n    function tokenNameOf(uint256 tokenId) external view returns (string memory) {\\n        return makeStringMultipleOf3(IBlitmap(blitmapAddress).tokenNameOf(tokenId));\\n    }\\n\\n    function makeStringMultipleOf3(string memory input) private pure returns (string memory) {\\n        uint n = bytes(input).length % 3;\\n        if (n == 0) {\\n            return input;\\n        \\n        } else if (n == 1) {\\n            return string(abi.encodePacked(input, \\\"  \\\"));\\n\\n        } else {\\n            return string(abi.encodePacked(input, \\\" \\\"));\\n        }\\n    }\\n\\n    function getBlitmapLayer(uint256 tokenId) external view returns (bytes memory) {\\n        bytes memory data = IBlitmap(blitmapAddress).tokenDataOf(tokenId);\\n\\n        bytes memory result = new bytes(416);\\n\\n        for (uint i = 0; i < 4; i++) {\\n            result[4 * i] = data[3 * i];\\n            result[4 * i + 1] = data[3 * i + 1];\\n            result[4 * i + 2] = data[3 * i + 2];\\n            result[4 * i + 3] = bytes1(uint8(255));\\n        } \\n\\n        BitmapCurser memory cursor;\\n\\n        for (uint i = 12; i < 268;) {\\n            cursor.colorIndex1 = blitMapColorIndex(data[i], 6, 7);\\n            cursor.colorIndex2 = blitMapColorIndex(data[i], 4, 5);\\n            cursor.colorIndex3 = blitMapColorIndex(data[i], 2, 3);\\n            cursor.colorIndex4 = blitMapColorIndex(data[i], 0, 1);\\n\\n            cursor.colorIndex5 = blitMapColorIndex(data[i + 1], 6, 7);\\n            cursor.colorIndex6 = blitMapColorIndex(data[i + 1], 4, 5);\\n            cursor.colorIndex7 = blitMapColorIndex(data[i + 1], 2, 3);\\n            cursor.colorIndex8 = blitMapColorIndex(data[i + 1], 0, 1);\\n\\n            bytes3 b3 = bitmapCursorToBytes3(cursor);\\n            result[(i-12) * 3/2 + 32] = b3[0];\\n            result[(i-12) * 3/2 + 33] = b3[1];\\n            result[(i-12) * 3/2 + 34] = b3[2];\\n\\n            i+=2;\\n        }\\n\\n        return result;\\n    }\\n\\n    function blitMapColorIndex(bytes1 aByte, uint8 index1, uint8 index2) internal pure returns (uint8) {\\n        if (bitTest(aByte, index2) && bitTest(aByte, index1)) {\\n            return 3;\\n        } else if (bitTest(aByte, index2) && !bitTest(aByte, index1)) {\\n            return 2;\\n        } else if (!bitTest(aByte, index2) && bitTest(aByte, index1)) {\\n            return 1;\\n        }\\n        return 0;\\n    }\\n\\n    function bitTest(bytes1 aByte, uint8 index) internal pure returns (bool) {\\n        return uint8(aByte) >> index & 1 == 1;\\n    }\\n\\n    function bitmapCursorToBytes3(BitmapCurser memory cursor) internal pure returns (bytes3) {\\n        uint24 result = uint24(cursor.colorIndex1) << 21;\\n        result += uint24(cursor.colorIndex2) << 18;\\n        result += uint24(cursor.colorIndex3) << 15;\\n        result += uint24(cursor.colorIndex4) << 12;\\n        result += uint24(cursor.colorIndex5) << 9;\\n        result += uint24(cursor.colorIndex6) << 6;\\n        result += uint24(cursor.colorIndex7) << 3;\\n        result += uint24(cursor.colorIndex8);\\n        return bytes3(result);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBlitmap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IBlitmap {\\n    function tokenDataOf(uint256 tokenId) external view returns (bytes memory);\\n    function tokenNameOf(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blitmapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blitmapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBlitmapLayer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenNameOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlitmapCRConverter", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}