{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IEverscale.sol\\\";\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBridge is IEverscale {\\n    struct Round {\\n        uint32 end;\\n        uint32 ttl;\\n        uint32 relays;\\n        uint32 requiredSignatures;\\n    }\\n\\n    function updateMinimumRequiredSignatures(uint32 _minimumRequiredSignatures) external;\\n    function setConfiguration(EverscaleAddress calldata _roundRelaysConfiguration) external;\\n    function updateRoundTTL(uint32 _roundTTL) external;\\n\\n    function isRelay(\\n        uint32 round,\\n        address candidate\\n    ) external view returns (bool);\\n\\n    function isBanned(\\n        address candidate\\n    ) external view returns (bool);\\n\\n    function isRoundRotten(\\n        uint32 round\\n    ) external view returns (bool);\\n\\n    function verifySignedEverscaleEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external view returns (uint32);\\n\\n    function setRoundRelays(\\n        bytes calldata payload,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function forceRoundRelays(\\n        uint160[] calldata _relays,\\n        uint32 roundEnd\\n    ) external;\\n\\n    function banRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function unbanRelays(\\n        address[] calldata _relays\\n    ) external;\\n\\n    function pause() external;\\n    function unpause() external;\\n\\n    function setRoundSubmitter(address _roundSubmitter) external;\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event UpdateMinimumRequiredSignatures(uint32 value);\\n    event UpdateRoundTTL(uint32 value);\\n    event UpdateRoundRelaysConfiguration(EverscaleAddress configuration);\\n    event UpdateRoundSubmitter(address _roundSubmitter);\\n\\n    event NewRound(uint32 indexed round, Round meta);\\n    event RoundRelay(uint32 indexed round, address indexed relay);\\n    event BanRelay(address indexed relay, bool status);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n\\ninterface IEverscale {\\n    struct EverscaleAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    struct EverscaleEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVault is IEverscale {\\n    enum Fee { Deposit, Withdraw }\\n    enum TokenType { Native, Alien }\\n\\n    struct TokenMeta {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct Token {\\n        uint activation;\\n        bool blacklisted;\\n        uint depositFee;\\n        uint withdrawFee;\\n        bool isNative;\\n    }\\n\\n    struct NativeWithdrawalParams {\\n        EverscaleAddress native;\\n        TokenMeta meta;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n    }\\n\\n    struct AlienWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n    }\\n\\n    function defaultDepositFee() external view returns (uint);\\n    function defaultWithdrawFee() external view returns (uint);\\n\\n    function apiVersion() external view returns (string memory api_version);\\n\\n    function initialize(\\n        address _bridge,\\n        address _governance,\\n        EverscaleAddress memory _rewards\\n    ) external;\\n\\n    function tokens(address _token) external view returns (Token memory);\\n    function natives(address _token) external view returns (EverscaleAddress memory);\\n\\n    function blacklistAddToken(address token) external;\\n    function blacklistRemoveToken(address token) external;\\n\\n    function setTokenDepositFee(address token, uint _depositFee) external;\\n    function setTokenWithdrawFee(address token, uint _withdrawFee) external;\\n\\n    function setDefaultDepositFee(uint _defaultDepositFee) external;\\n    function setDefaultWithdrawFee(uint _defaultWithdrawFee) external;\\n\\n    function rewards() external view returns (EverscaleAddress memory);\\n    function configuration() external view returns (EverscaleAddress memory);\\n    function withdrawalIds(bytes32) external view returns (bool);\\n    function bridge() external view returns(address);\\n\\n    function governance() external view returns (address);\\n    function guardian() external view returns (address);\\n    function management() external view returns (address);\\n\\n    function emergencyShutdown() external view returns (bool);\\n    function setEmergencyShutdown(bool active) external;\\n\\n    function setConfiguration(EverscaleAddress memory _configuration) external;\\n    function setGovernance(address _governance) external;\\n    function acceptGovernance() external;\\n    function setGuardian(address _guardian) external;\\n    function setManagement(address _management) external;\\n    function setRewards(EverscaleAddress memory _rewards) external;\\n\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        address token,\\n        uint amount\\n    ) external;\\n\\n    function saveWithdrawNative(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function migrateAlienTokenToVault(\\n        address token,\\n        address vault\\n    ) external;\\n\\n    event BlacklistTokenAdded(address token);\\n    event BlacklistTokenRemoved(address token);\\n\\n    event UpdateDefaultDepositFee(uint fee);\\n    event UpdateDefaultWithdrawFee(uint fee);\\n\\n    event UpdateBridge(address bridge);\\n    event UpdateConfiguration(int128 wid, uint256 addr);\\n    event UpdateRewards(int128 wid, uint256 addr);\\n\\n    event UpdateTokenDepositFee(address token, uint256 fee);\\n    event UpdateTokenWithdrawFee(address token, uint256 fee);\\n\\n    event UpdateGovernance(address governance);\\n    event UpdateManagement(address management);\\n    event NewPendingGovernance(address governance);\\n    event UpdateGuardian(address guardian);\\n\\n    event EmergencyShutdown(bool active);\\n\\n    event TokenMigrated(address token, address vault);\\n\\n    event TokenActivated(\\n        address token,\\n        uint activation,\\n        bool isNative,\\n        uint depositFee,\\n        uint withdrawFee\\n    );\\n\\n    event TokenCreated(\\n        address token,\\n        int8 native_wid,\\n        uint256 native_addr,\\n        string name,\\n        string symbol,\\n        uint8 decimals\\n    );\\n\\n    event AlienTransfer(\\n        uint256 base_chainId,\\n        uint160 base_token,\\n        string name,\\n        string symbol,\\n        uint8 decimals,\\n        uint256 amount,\\n        int8 recipient_wid,\\n        uint256 recipient_addr\\n    );\\n\\n    event NativeTransfer(\\n        int8 native_wid,\\n        uint256 native_addr,\\n        uint256 amount,\\n        int8 recipient_wid,\\n        uint256 recipient_addr\\n    );\\n\\n    event Deposit(\\n        TokenType _type,\\n        address sender,\\n        address token,\\n        int8 recipient_wid,\\n        uint256 recipient_addr,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    event Withdraw(\\n        TokenType _type,\\n        bytes32 payloadId,\\n        address token,\\n        address recipient,\\n        uint256 amunt,\\n        uint256 fee\\n    );\\n}\"\r\n    },\r\n    \"contracts/interfaces/multivault/IMultiVaultToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n\\ninterface IMultiVaultToken {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external;\\n\\n    function burn(address account, uint256 amount) external;\\n    function mint(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IVaultBasic.sol\\\";\\n\\n\\ninterface IVault is IVaultBasic {\\n    enum ApproveStatus { NotRequired, Required, Approved, Rejected }\\n\\n    struct StrategyParams {\\n        uint256 performanceFee;\\n        uint256 activation;\\n        uint256 debtRatio;\\n        uint256 minDebtPerHarvest;\\n        uint256 maxDebtPerHarvest;\\n        uint256 lastReport;\\n        uint256 totalDebt;\\n        uint256 totalGain;\\n        uint256 totalSkim;\\n        uint256 totalLoss;\\n        address rewardsManager;\\n        EverscaleAddress rewards;\\n    }\\n\\n    struct PendingWithdrawalParams {\\n        uint256 amount;\\n        uint256 bounty;\\n        uint256 timestamp;\\n        ApproveStatus approveStatus;\\n    }\\n\\n    struct PendingWithdrawalId {\\n        address recipient;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawalPeriodParams {\\n        uint256 total;\\n        uint256 considered;\\n    }\\n\\n    function initialize(\\n        address _token,\\n        address _bridge,\\n        address _governance,\\n        uint _targetDecimals,\\n        EverscaleAddress memory _rewards\\n    ) external;\\n\\n    function withdrawGuardian() external view returns (address);\\n\\n    function pendingWithdrawalsPerUser(address user) external view returns (uint);\\n    function pendingWithdrawals(\\n        address user,\\n        uint id\\n    ) external view returns (PendingWithdrawalParams memory);\\n    function pendingWithdrawalsTotal() external view returns (uint);\\n\\n    function managementFee() external view returns (uint256);\\n    function performanceFee() external view returns (uint256);\\n\\n    function strategies(\\n        address strategyId\\n    ) external view returns (StrategyParams memory);\\n    function withdrawalQueue() external view returns (address[20] memory);\\n\\n    function withdrawLimitPerPeriod() external view returns (uint256);\\n    function undeclaredWithdrawLimit() external view returns (uint256);\\n    function withdrawalPeriods(\\n        uint256 withdrawalPeriodId\\n    ) external view returns (WithdrawalPeriodParams memory);\\n\\n    function depositLimit() external view returns (uint256);\\n    function debtRatio() external view returns (uint256);\\n    function totalDebt() external view returns (uint256);\\n    function lastReport() external view returns (uint256);\\n    function lockedProfit() external view returns (uint256);\\n    function lockedProfitDegradation() external view returns (uint256);\\n\\n    function setWithdrawGuardian(address _withdrawGuardian) external;\\n    function setStrategyRewards(\\n        address strategyId,\\n        EverscaleAddress memory _rewards\\n    ) external;\\n    function setLockedProfitDegradation(uint256 degradation) external;\\n    function setDepositLimit(uint256 limit) external;\\n    function setPerformanceFee(uint256 fee) external;\\n    function setManagementFee(uint256 fee) external;\\n    function setWithdrawLimitPerPeriod(uint256 _withdrawLimitPerPeriod) external;\\n    function setUndeclaredWithdrawLimit(uint256 _undeclaredWithdrawLimit) external;\\n    function setWithdrawalQueue(address[20] memory queue) external;\\n    function setPendingWithdrawalBounty(uint256 id, uint256 bounty) external;\\n\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        uint256 amount,\\n        PendingWithdrawalId memory pendingWithdrawalId\\n    ) external;\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        uint256[] memory amount,\\n        PendingWithdrawalId[] memory pendingWithdrawalId\\n    ) external;\\n    function depositToFactory(\\n        uint128 amount,\\n        int8 wid,\\n        uint256 user,\\n        uint256 creditor,\\n        uint256 recipient,\\n        uint128 tokenAmount,\\n        uint128 tonAmount,\\n        uint8 swapType,\\n        uint128 slippageNumerator,\\n        uint128 slippageDenominator,\\n        bytes memory level3\\n    ) external;\\n\\n    function saveWithdraw(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external returns (\\n        bool instantWithdrawal,\\n        PendingWithdrawalId memory pendingWithdrawalId\\n    );\\n\\n    function saveWithdraw(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint bounty\\n    ) external;\\n\\n    function cancelPendingWithdrawal(\\n        uint256 id,\\n        uint256 amount,\\n        EverscaleAddress memory recipient,\\n        uint bounty\\n    ) external;\\n\\n    function withdraw(\\n        uint256 id,\\n        uint256 amountRequested,\\n        address recipient,\\n        uint256 maxLoss,\\n        uint bounty\\n    ) external returns(uint256);\\n\\n    function addStrategy(\\n        address strategyId,\\n        uint256 _debtRatio,\\n        uint256 minDebtPerHarvest,\\n        uint256 maxDebtPerHarvest,\\n        uint256 _performanceFee\\n    ) external;\\n\\n    function updateStrategyDebtRatio(\\n        address strategyId,\\n        uint256 _debtRatio\\n    )  external;\\n\\n    function updateStrategyMinDebtPerHarvest(\\n        address strategyId,\\n        uint256 minDebtPerHarvest\\n    ) external;\\n\\n    function updateStrategyMaxDebtPerHarvest(\\n        address strategyId,\\n        uint256 maxDebtPerHarvest\\n    ) external;\\n\\n    function updateStrategyPerformanceFee(\\n        address strategyId,\\n        uint256 _performanceFee\\n    ) external;\\n\\n    function migrateStrategy(\\n        address oldVersion,\\n        address newVersion\\n    ) external;\\n\\n    function revokeStrategy(\\n        address strategyId\\n    ) external;\\n    function revokeStrategy() external;\\n\\n\\n    function totalAssets() external view returns (uint256);\\n    function debtOutstanding(address strategyId) external view returns (uint256);\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function creditAvailable(address strategyId) external view returns (uint256);\\n    function creditAvailable() external view returns (uint256);\\n\\n    function availableDepositLimit() external view returns (uint256);\\n    function expectedReturn(address strategyId) external view returns (uint256);\\n\\n    function report(\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    function skim(address strategyId) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId memory pendingWithdrawalId\\n    ) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId[] memory pendingWithdrawalId\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId memory pendingWithdrawalId,\\n        ApproveStatus approveStatus\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId[] memory pendingWithdrawalId,\\n        ApproveStatus[] memory approveStatus\\n    ) external;\\n\\n\\n    event PendingWithdrawalUpdateBounty(address recipient, uint256 id, uint256 bounty);\\n    event PendingWithdrawalCancel(address recipient, uint256 id, uint256 amount);\\n    event PendingWithdrawalCreated(\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes32 payloadId\\n    );\\n    event PendingWithdrawalWithdraw(\\n        address recipient,\\n        uint256 id,\\n        uint256 requestedAmount,\\n        uint256 redeemedAmount\\n    );\\n    event PendingWithdrawalFill(\\n        address recipient,\\n        uint256 id\\n    );\\n    event PendingWithdrawalUpdateApproveStatus(\\n        address recipient,\\n        uint256 id,\\n        ApproveStatus approveStatus\\n    );\\n\\n    event UpdateWithdrawLimitPerPeriod(uint256 withdrawLimitPerPeriod);\\n    event UpdateUndeclaredWithdrawLimit(uint256 undeclaredWithdrawLimit);\\n    event UpdateDepositLimit(uint256 depositLimit);\\n\\n    event UpdatePerformanceFee(uint256 performanceFee);\\n    event UpdateManagementFee(uint256 managenentFee);\\n\\n    event UpdateWithdrawGuardian(address withdrawGuardian);\\n    event UpdateWithdrawalQueue(address[20] queue);\\n\\n    event StrategyUpdateDebtRatio(address indexed strategy, uint256 debtRatio);\\n    event StrategyUpdateMinDebtPerHarvest(address indexed strategy, uint256 minDebtPerHarvest);\\n    event StrategyUpdateMaxDebtPerHarvest(address indexed strategy, uint256 maxDebtPerHarvest);\\n    event StrategyUpdatePerformanceFee(address indexed strategy, uint256 performanceFee);\\n    event StrategyMigrated(address indexed oldVersion, address indexed newVersion);\\n    event StrategyRevoked(address indexed strategy);\\n    event StrategyRemovedFromQueue(address indexed strategy);\\n    event StrategyAddedToQueue(address indexed strategy);\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 debtPaid,\\n        uint256 totalGain,\\n        uint256 totalSkim,\\n        uint256 totalLoss,\\n        uint256 totalDebt,\\n        uint256 debtAdded,\\n        uint256 debtRatio\\n    );\\n    event StrategyAdded(\\n        address indexed strategy,\\n        uint256 debtRatio,\\n        uint256 minDebtPerHarvest,\\n        uint256 maxDebtPerHarvest,\\n        uint256 performanceFee\\n    );\\n    event StrategyUpdateRewards(\\n        address strategyId,\\n        int128 wid,\\n        uint256 addr\\n    );\\n    event FactoryDeposit(\\n        uint128 amount,\\n        int8 wid,\\n        uint256 user,\\n        uint256 creditor,\\n        uint256 recipient,\\n        uint128 tokenAmount,\\n        uint128 tonAmount,\\n        uint8 swapType,\\n        uint128 slippageNumerator,\\n        uint128 slippageDenominator,\\n        bytes1 separator,\\n        bytes level3\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IVaultBasic is IEverscale {\\n    struct WithdrawalParams {\\n        EverscaleAddress sender;\\n        uint256 amount;\\n        address recipient;\\n        uint32 chainId;\\n    }\\n\\n    function bridge() external view returns (address);\\n    function configuration() external view returns (EverscaleAddress memory);\\n    function withdrawalIds(bytes32) external view returns (bool);\\n    function rewards() external view returns (EverscaleAddress memory);\\n\\n    function governance() external view returns (address);\\n    function guardian() external view returns (address);\\n    function management() external view returns (address);\\n\\n    function token() external view returns (address);\\n    function targetDecimals() external view returns (uint256);\\n    function tokenDecimals() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n    function withdrawFee() external view returns (uint256);\\n\\n    function emergencyShutdown() external view returns (bool);\\n\\n    function apiVersion() external view returns (string memory api_version);\\n\\n    function setDepositFee(uint _depositFee) external;\\n    function setWithdrawFee(uint _withdrawFee) external;\\n\\n    function setConfiguration(EverscaleAddress memory _configuration) external;\\n    function setGovernance(address _governance) external;\\n    function acceptGovernance() external;\\n    function setGuardian(address _guardian) external;\\n    function setManagement(address _management) external;\\n    function setRewards(EverscaleAddress memory _rewards) external;\\n    function setEmergencyShutdown(bool active) external;\\n\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function decodeWithdrawalEventData(\\n        bytes memory eventData\\n    ) external view returns(WithdrawalParams memory);\\n\\n    function sweep(address _token) external;\\n\\n    // Events\\n    event Deposit(\\n        uint256 amount,\\n        int128 wid,\\n        uint256 addr\\n    );\\n\\n    event InstantWithdrawal(\\n        bytes32 payloadId,\\n        address recipient,\\n        uint256 amount\\n    );\\n\\n    event UpdateBridge(address bridge);\\n    event UpdateConfiguration(int128 wid, uint256 addr);\\n    event UpdateTargetDecimals(uint256 targetDecimals);\\n    event UpdateRewards(int128 wid, uint256 addr);\\n\\n    event UpdateDepositFee(uint256 fee);\\n    event UpdateWithdrawFee(uint256 fee);\\n\\n    event UpdateGovernance(address governance);\\n    event UpdateManagement(address management);\\n    event NewPendingGovernance(address governance);\\n    event UpdateGuardian(address guardian);\\n\\n    event EmergencyShutdown(bool active);\\n}\"\r\n    },\r\n    \"contracts/libraries/MultiVaultLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n\\nimport \\\"./../interfaces/multivault/IMultiVault.sol\\\";\\nimport \\\"./../interfaces/IEverscale.sol\\\";\\n\\n\\nlibrary MultiVaultLibrary {\\n    function decodeNativeWithdrawalEventData(\\n        bytes memory eventData\\n    ) internal pure returns (IMultiVault.NativeWithdrawalParams memory) {\\n        (\\n            int8 native_wid,\\n            uint256 native_addr,\\n\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals,\\n\\n            uint128 amount,\\n            uint160 recipient,\\n            uint256 chainId\\n        ) = abi.decode(\\n            eventData,\\n            (\\n                int8, uint256,\\n                string, string, uint8,\\n                uint128, uint160, uint256\\n            )\\n        );\\n\\n        return IMultiVault.NativeWithdrawalParams({\\n            native: IEverscale.EverscaleAddress(native_wid, native_addr),\\n            meta: IMultiVault.TokenMeta(name, symbol, decimals),\\n            amount: amount,\\n            recipient: address(recipient),\\n            chainId: chainId\\n        });\\n    }\\n\\n    function decodeAlienWithdrawalEventData(\\n        bytes memory eventData\\n    ) internal pure returns (IMultiVault.AlienWithdrawalParams memory) {\\n        (\\n            uint160 token,\\n            uint128 amount,\\n            uint160 recipient,\\n            uint256 chainId\\n        ) = abi.decode(\\n            eventData,\\n            (uint160, uint128, uint160, uint256)\\n        );\\n\\n        return IMultiVault.AlienWithdrawalParams({\\n            token: address(token),\\n            amount: uint256(amount),\\n            recipient: address(recipient),\\n            chainId: chainId\\n        });\\n    }\\n\\n    /// @notice Calculates the CREATE2 address for token, based on the Everscale sig\\n    /// @param native_wid Everscale token workchain ID\\n    /// @param native_addr Everscale token address body\\n    /// @return token Token address\\n    function getNativeToken(\\n        int8 native_wid,\\n        uint256 native_addr\\n    ) internal view returns (address token) {\\n        token = address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            address(this),\\n            keccak256(abi.encodePacked(native_wid, native_addr)),\\n            hex'5ae84bdc4f10bd94dda6e6c258ff4133478a78c800ece6c093389bffe687e46f' // MultiVaultToken init code hash\\n        )))));\\n    }\\n}\"\r\n    },\r\n    \"contracts/multivault/MultiVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport \\\"./../interfaces/multivault/IMultiVault.sol\\\";\\nimport \\\"./../interfaces/multivault/IMultiVaultToken.sol\\\";\\nimport \\\"./../interfaces/IBridge.sol\\\";\\nimport \\\"./../interfaces/vault/IVault.sol\\\";\\n\\nimport \\\"./../libraries/MultiVaultLibrary.sol\\\";\\n\\nimport \\\"./MultiVaultToken.sol\\\";\\nimport \\\"./../utils/ChainId.sol\\\";\\n\\n\\nuint constant MAX_BPS = 10_000;\\nuint constant FEE_LIMIT = MAX_BPS / 2;\\naddress constant ZERO_ADDRESS = address(0);\\n\\nuint8 constant DECIMALS_LIMIT = 18;\\nuint256 constant SYMBOL_LENGTH_LIMIT = 32;\\nuint256 constant NAME_LENGTH_LIMIT = 32;\\n\\n\\nstring constant API_VERSION = '0.1.0';\\n\\n\\n/// @notice Vault, based on Octus Bridge. Allows to transfer arbitrary tokens from Everscale\\n/// to EVM and backwards. Everscale tokens are called \\\"natives\\\" (eg QUBE). EVM tokens are called\\n/// \\\"aliens\\\" (eg AAVE).\\n/// Inspired by Yearn Vault V2.\\ncontract MultiVault is IMultiVault, ReentrancyGuard, Initializable, ChainId {\\n    using SafeERC20 for IERC20;\\n\\n//    function getInitHash() public pure returns(bytes32){\\n//        bytes memory bytecode = type(MultiVaultToken).creationCode;\\n//        return keccak256(abi.encodePacked(bytecode));\\n//    }\\n\\n    mapping (address => Token) tokens_;\\n    mapping (address => EverscaleAddress) natives_;\\n\\n    uint public override defaultDepositFee;\\n    uint public override defaultWithdrawFee;\\n\\n    bool public override emergencyShutdown;\\n\\n    address public override bridge;\\n    mapping(bytes32 => bool) public override withdrawalIds;\\n    EverscaleAddress rewards_;\\n    EverscaleAddress configuration_;\\n\\n    address public override governance;\\n    address pendingGovernance;\\n    address public override guardian;\\n    address public override management;\\n\\n    /// @notice Get token information\\n    /// @param _token Token address\\n    function tokens(\\n        address _token\\n    ) external view override returns (Token memory) {\\n        return tokens_[_token];\\n    }\\n\\n    /// @notice Get native Everscale token address for EVM token\\n    /// @param _token Token address\\n    function natives(\\n        address _token\\n    ) external view override returns (EverscaleAddress memory) {\\n        return natives_[_token];\\n    }\\n\\n    /// @notice Rewards address\\n    /// @return Everscale address, used for collecting rewards.\\n    function rewards()\\n        external\\n        view\\n        override\\n    returns (EverscaleAddress memory) {\\n        return rewards_;\\n    }\\n\\n    /// @notice Configuration address\\n    /// @return Everscale address, used for verifying `saveWithdraw` payloads\\n    function configuration()\\n        external\\n        view\\n        override\\n    returns (EverscaleAddress memory) {\\n        return configuration_;\\n    }\\n\\n    modifier tokenNotBlacklisted(address token) {\\n        require(!tokens_[token].blacklisted);\\n\\n        _;\\n    }\\n\\n    modifier initializeToken(address token) {\\n        if (tokens_[token].activation == 0) {\\n            // Non-activated tokens are always aliens\\n\\n            require(\\n                IERC20Metadata(token).decimals() <= DECIMALS_LIMIT &&\\n                bytes(IERC20Metadata(token).symbol()).length <= SYMBOL_LENGTH_LIMIT &&\\n                bytes(IERC20Metadata(token).name()).length <= NAME_LENGTH_LIMIT\\n            );\\n\\n            _activateToken(token, false);\\n        }\\n\\n        _;\\n    }\\n\\n    modifier onlyEmergencyDisabled() {\\n        require(!emergencyShutdown, \\\"Vault: emergency mode enabled\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance);\\n\\n        _;\\n    }\\n\\n    modifier onlyPendingGovernance() {\\n        require(msg.sender == pendingGovernance);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrManagement() {\\n        require(msg.sender == governance || msg.sender == management);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrGuardian() {\\n        require(msg.sender == governance || msg.sender == guardian);\\n\\n        _;\\n    }\\n\\n    modifier withdrawalNotSeenBefore(bytes memory payload) {\\n        bytes32 withdrawalId = keccak256(payload);\\n\\n        require(!withdrawalIds[withdrawalId], \\\"Vault: withdraw payload already seen\\\");\\n\\n        _;\\n\\n        withdrawalIds[withdrawalId] = true;\\n    }\\n\\n    modifier respectFeeLimit(uint fee) {\\n        require(fee <= FEE_LIMIT);\\n\\n        _;\\n    }\\n\\n    /// @notice Vault API version. Used to track the deployed version of this contract.\\n    //  @return api_version Current API version\\n    function apiVersion()\\n        external\\n        override\\n        pure\\n        returns (string memory api_version)\\n    {\\n        return API_VERSION;\\n    }\\n\\n    /// @notice MultiVault initializer\\n    /// @param _bridge Bridge address\\n    /// @param _governance Governance address\\n    /// @param _rewards Everscale address for receiving rewards\\n    function initialize(\\n        address _bridge,\\n        address _governance,\\n        EverscaleAddress memory _rewards\\n    ) external override initializer {\\n        bridge = _bridge;\\n        emit UpdateBridge(bridge);\\n\\n        governance = _governance;\\n        emit UpdateGovernance(governance);\\n\\n        rewards_ = _rewards;\\n        emit UpdateRewards(rewards_.wid, rewards_.addr);\\n    }\\n\\n    /// @notice Add token to blacklist. Only native token can be blacklisted.\\n    /// Blacklisted tokens cant be deposited or withdrawn.\\n    /// @param token Token address\\n    function blacklistAddToken(\\n        address token\\n    ) public override onlyGovernance tokenNotBlacklisted(token) {\\n        tokens_[token].blacklisted = true;\\n\\n        emit BlacklistTokenAdded(token);\\n    }\\n\\n    /// @notice Remove token from blacklist.\\n    /// @param token Token address\\n    function blacklistRemoveToken(\\n        address token\\n    ) external override onlyGovernance {\\n        require(tokens_[token].blacklisted);\\n\\n        tokens_[token].blacklisted = false;\\n\\n        emit BlacklistTokenRemoved(token);\\n    }\\n\\n    /// @notice Set address to receive fees.\\n    /// This may be called only by `governance`\\n    /// @param _rewards Rewards receiver in Everscale network\\n    function setRewards(\\n        EverscaleAddress memory _rewards\\n    ) external override onlyGovernance {\\n        rewards_ = _rewards;\\n\\n        emit UpdateRewards(rewards_.wid, rewards_.addr);\\n    }\\n\\n    /// @notice Set default deposit fee.\\n    /// @param _defaultDepositFee Default deposit fee, should be less than FEE_LIMIT\\n    function setDefaultDepositFee(\\n        uint _defaultDepositFee\\n    )\\n        external\\n        override\\n        onlyGovernanceOrManagement\\n        respectFeeLimit(_defaultDepositFee)\\n    {\\n        defaultDepositFee = _defaultDepositFee;\\n\\n        emit UpdateDefaultDepositFee(defaultDepositFee);\\n    }\\n\\n    /// @notice Set default withdraw fee.\\n    /// @param _defaultWithdrawFee Default withdraw fee, should be less than FEE_LIMIT\\n    function setDefaultWithdrawFee(\\n        uint _defaultWithdrawFee\\n    )\\n        external\\n        override\\n        onlyGovernanceOrManagement\\n        respectFeeLimit(_defaultWithdrawFee)\\n    {\\n        defaultWithdrawFee = _defaultWithdrawFee;\\n\\n        emit UpdateDefaultWithdrawFee(defaultWithdrawFee);\\n    }\\n\\n    /// @notice Set deposit fee for specific token.\\n    /// This may be called only by `owner` or `management`.\\n    /// @param token Token address\\n    /// @param _depositFee Deposit fee, must be less than FEE_LIMIT.\\n    function setTokenDepositFee(\\n        address token,\\n        uint _depositFee\\n    )\\n        public\\n        override\\n        onlyGovernanceOrManagement\\n        respectFeeLimit(_depositFee)\\n    {\\n        tokens_[token].depositFee = _depositFee;\\n\\n        emit UpdateTokenDepositFee(token, _depositFee);\\n    }\\n\\n    /// @notice Set withdraw fee for specific token.\\n    /// This may be called only by `governance` or `management`\\n    /// @param token Token address, must be enabled\\n    /// @param _withdrawFee Withdraw fee, must be less than FEE_LIMIT.\\n    function setTokenWithdrawFee(\\n        address token,\\n        uint _withdrawFee\\n    )\\n        public\\n        override\\n        onlyGovernanceOrManagement\\n        respectFeeLimit(_withdrawFee)\\n    {\\n        tokens_[token].withdrawFee = _withdrawFee;\\n\\n        emit UpdateTokenWithdrawFee(token, _withdrawFee);\\n    }\\n\\n    /// @notice Set configuration address.\\n    /// @param _configuration The address to use for configuration.\\n    function setConfiguration(\\n        EverscaleAddress memory _configuration\\n    ) external override onlyGovernance {\\n        configuration_ = _configuration;\\n\\n        emit UpdateConfiguration(configuration_.wid, configuration_.addr);\\n    }\\n\\n    /// @notice Nominate new address to use as a governance.\\n    /// The change does not go into effect immediately. This function sets a\\n    /// pending change, and the governance address is not updated until\\n    /// the proposed governance address has accepted the responsibility.\\n    /// This may only be called by the `governance`.\\n    /// @param _governance The address requested to take over Vault governance.\\n    function setGovernance(\\n        address _governance\\n    ) external override onlyGovernance {\\n        pendingGovernance = _governance;\\n\\n        emit NewPendingGovernance(pendingGovernance);\\n    }\\n\\n    /// @notice Once a new governance address has been proposed using `setGovernance`,\\n    /// this function may be called by the proposed address to accept the\\n    /// responsibility of taking over governance for this contract.\\n    /// This may only be called by the `pendingGovernance`.\\n    function acceptGovernance()\\n        external\\n        override\\n        onlyPendingGovernance\\n    {\\n        governance = pendingGovernance;\\n\\n        emit UpdateGovernance(governance);\\n    }\\n\\n    /// @notice Changes the management address.\\n    /// This may only be called by `governance`\\n    /// @param _management The address to use for management.\\n    function setManagement(\\n        address _management\\n    )\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        management = _management;\\n\\n        emit UpdateManagement(management);\\n    }\\n\\n    /// @notice Changes the address of `guardian`.\\n    /// This may only be called by `governance`.\\n    /// @param _guardian The new guardian address to use.\\n    function setGuardian(\\n        address _guardian\\n    )\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        guardian = _guardian;\\n\\n        emit UpdateGuardian(guardian);\\n    }\\n\\n    /// @notice Activates or deactivates MultiVault emergency shutdown.\\n    ///     During emergency shutdown:\\n    ///     - Deposits are disabled\\n    ///     - Withdrawals are disabled\\n    /// This may only be called by `governance` or `guardian`.\\n    /// @param active If `true`, the MultiVault goes into Emergency Shutdown. If `false`, the MultiVault goes back into\\n    ///     Normal Operation.\\n    function setEmergencyShutdown(\\n        bool active\\n    ) external override {\\n        if (active) {\\n            require(msg.sender == guardian || msg.sender == governance);\\n        } else {\\n            require(msg.sender == governance);\\n        }\\n\\n        emergencyShutdown = active;\\n\\n        emit EmergencyShutdown(active);\\n    }\\n\\n    /// @notice Transfer tokens to the Everscale. Works both for native and alien tokens.\\n    /// Approve is required only for alien tokens deposit.\\n    /// @param recipient Everscale recipient.\\n    /// @param token EVM token address, should not be blacklisted.\\n    /// @param amount Amount of tokens to transfer.\\n    function deposit(\\n        EverscaleAddress memory recipient,\\n        address token,\\n        uint amount\\n    )\\n        external\\n        override\\n        nonReentrant\\n        tokenNotBlacklisted(token)\\n        initializeToken(token)\\n        onlyEmergencyDisabled\\n    {\\n        uint fee = calculateMovementFee(amount, token, Fee.Deposit);\\n\\n        bool isNative = tokens_[token].isNative;\\n\\n        if (isNative) {\\n            IMultiVaultToken(token).burn(\\n                msg.sender,\\n                amount\\n            );\\n\\n            _transferToEverscaleNative(token, recipient, amount - fee);\\n\\n            if (fee > 0) _transferToEverscaleNative(token, rewards_, fee);\\n        } else {\\n            IERC20(token).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n\\n            _transferToEverscaleAlien(token, recipient, amount - fee);\\n\\n            if (fee > 0) _transferToEverscaleAlien(token, rewards_, fee);\\n        }\\n\\n        emit Deposit(\\n            isNative ? TokenType.Native : TokenType.Alien,\\n            msg.sender,\\n            token,\\n            recipient.wid,\\n            recipient.addr,\\n            amount,\\n            fee\\n        );\\n    }\\n\\n    /// @notice Save withdrawal for native token\\n    /// @param payload Withdraw payload\\n    /// @param signatures Payload signatures\\n    function saveWithdrawNative(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    )\\n        external\\n        override\\n        nonReentrant\\n        withdrawalNotSeenBefore(payload)\\n        onlyEmergencyDisabled\\n    {\\n        EverscaleEvent memory _event = _processWithdrawEvent(payload, signatures);\\n\\n        bytes32 payloadId = keccak256(payload);\\n\\n        // Decode event data\\n        NativeWithdrawalParams memory withdrawal = MultiVaultLibrary.decodeNativeWithdrawalEventData(_event.eventData);\\n\\n        // Ensure chain id is correct\\n        require(withdrawal.chainId == getChainID());\\n\\n        // Derive token address\\n        // Depends on the withdrawn token source\\n        address token = _getNativeWithdrawalToken(withdrawal);\\n\\n        // Ensure token is not blacklisted\\n        require(!tokens_[token].blacklisted);\\n\\n        // Consider movement fee and send it to `rewards_`\\n        uint256 fee = calculateMovementFee(\\n            withdrawal.amount,\\n            token,\\n            Fee.Withdraw\\n        );\\n\\n        IMultiVaultToken(token).mint(\\n            withdrawal.recipient,\\n            withdrawal.amount - fee\\n        );\\n\\n        if (fee > 0) _transferToEverscaleNative(token, rewards_, fee);\\n\\n        emit Withdraw(\\n            TokenType.Native,\\n            payloadId,\\n            token,\\n            withdrawal.recipient,\\n            withdrawal.amount,\\n            fee\\n        );\\n    }\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    )\\n        external\\n        override\\n        nonReentrant\\n        withdrawalNotSeenBefore(payload)\\n        onlyEmergencyDisabled\\n    {\\n        EverscaleEvent memory _event = _processWithdrawEvent(payload, signatures);\\n\\n        bytes32 payloadId = keccak256(payload);\\n\\n        // Decode event data\\n        AlienWithdrawalParams memory withdrawal = MultiVaultLibrary.decodeAlienWithdrawalEventData(_event.eventData);\\n\\n        // Ensure chain id is correct\\n        require(withdrawal.chainId == getChainID());\\n\\n        // Ensure token is not blacklisted\\n        require(!tokens_[withdrawal.token].blacklisted);\\n\\n        // Consider movement fee and send it to `rewards_`\\n        uint256 fee = calculateMovementFee(\\n            withdrawal.amount,\\n            withdrawal.token,\\n            Fee.Withdraw\\n        );\\n\\n        IERC20(withdrawal.token).safeTransfer(\\n            withdrawal.recipient,\\n            withdrawal.amount - fee\\n        );\\n\\n        if (fee > 0) _transferToEverscaleAlien(withdrawal.token, rewards_, fee);\\n\\n        emit Withdraw(\\n            TokenType.Alien,\\n            payloadId,\\n            withdrawal.token,\\n            withdrawal.recipient,\\n            withdrawal.amount,\\n            fee\\n        );\\n    }\\n\\n    function migrateAlienTokenToVault(\\n        address token,\\n        address vault\\n    )\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(tokens_[token].activation > 0);\\n        require(!tokens_[token].isNative);\\n\\n        require(IVault(vault).token() == token);\\n        require(IVault(token).governance() == governance);\\n\\n        tokens_[token].blacklisted = true;\\n\\n        IERC20(token).safeTransfer(\\n            vault,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n\\n        emit TokenMigrated(token, vault);\\n    }\\n\\n    /// @notice Calculates fee for deposit or withdrawal.\\n    /// @param amount Amount of tokens.\\n    /// @param _token Token address.\\n    /// @param fee Fee type (Deposit = 0, Withdraw = 1).\\n    function calculateMovementFee(\\n        uint256 amount,\\n        address _token,\\n        Fee fee\\n    ) public view returns (uint256) {\\n        Token memory token = tokens_[_token];\\n\\n        uint tokenFee = fee == Fee.Deposit ? token.depositFee : token.withdrawFee;\\n\\n        return tokenFee * amount / MAX_BPS;\\n    }\\n\\n    function getNativeToken(\\n        int8 native_wid,\\n        uint256 native_addr\\n    ) external view returns (address) {\\n        return MultiVaultLibrary.getNativeToken(native_wid, native_addr);\\n    }\\n\\n    function _activateToken(\\n        address token,\\n        bool isNative\\n    ) internal {\\n        tokens_[token].activation = block.number;\\n        tokens_[token].blacklisted = false;\\n        tokens_[token].isNative = isNative;\\n        tokens_[token].depositFee = defaultDepositFee;\\n        tokens_[token].withdrawFee = defaultWithdrawFee;\\n\\n        emit TokenActivated(\\n            token,\\n            block.number,\\n            isNative,\\n            defaultDepositFee,\\n            defaultWithdrawFee\\n        );\\n    }\\n\\n    function _transferToEverscaleNative(\\n        address _token,\\n        EverscaleAddress memory recipient,\\n        uint amount\\n    ) internal {\\n        EverscaleAddress memory native = natives_[_token];\\n\\n        emit NativeTransfer(\\n            native.wid,\\n            native.addr,\\n            amount,\\n            recipient.wid,\\n            recipient.addr\\n        );\\n    }\\n\\n    function _transferToEverscaleAlien(\\n        address _token,\\n        EverscaleAddress memory recipient,\\n        uint amount\\n    ) internal {\\n        emit AlienTransfer(\\n            getChainID(),\\n            uint160(_token),\\n            IERC20Metadata(_token).name(),\\n            IERC20Metadata(_token).symbol(),\\n            IERC20Metadata(_token).decimals(),\\n            amount,\\n            recipient.wid,\\n            recipient.addr\\n        );\\n    }\\n\\n    function _getNativeWithdrawalToken(\\n        NativeWithdrawalParams memory withdrawal\\n    ) internal returns (address token) {\\n        token = MultiVaultLibrary.getNativeToken(\\n            withdrawal.native.wid,\\n            withdrawal.native.addr\\n        );\\n\\n        if (tokens_[token].activation == 0) {\\n            _deployTokenForNative(withdrawal.native, withdrawal.meta);\\n            _activateToken(token, true);\\n\\n            natives_[token] = withdrawal.native;\\n        }\\n    }\\n\\n    function _deployTokenForNative(\\n        EverscaleAddress memory native,\\n        TokenMeta memory meta\\n    ) internal returns (address token) {\\n        bytes memory bytecode = type(MultiVaultToken).creationCode;\\n\\n        bytes32 salt = keccak256(abi.encodePacked(native.wid, native.addr));\\n\\n        assembly {\\n            token := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        IMultiVaultToken(token).initialize(\\n            string(abi.encodePacked('Octus ', meta.name)),\\n            string(abi.encodePacked('oct', meta.symbol)),\\n            meta.decimals\\n        );\\n\\n        emit TokenCreated(\\n            token,\\n            native.wid,\\n            native.addr,\\n            meta.name,\\n            meta.symbol,\\n            meta.decimals\\n        );\\n    }\\n\\n    function _processWithdrawEvent(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) internal returns (EverscaleEvent memory) {\\n        require(\\n            IBridge(bridge).verifySignedEverscaleEvent(payload, signatures) == 0,\\n            \\\"Vault: signatures verification failed\\\"\\n        );\\n\\n        // Decode Everscale event\\n        (EverscaleEvent memory _event) = abi.decode(payload, (EverscaleEvent));\\n\\n        require(\\n            _event.configurationWid == configuration_.wid &&\\n            _event.configurationAddress == configuration_.addr\\n        );\\n\\n        return _event;\\n     }\\n}\"\r\n    },\r\n    \"contracts/multivault/MultiVaultToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\nimport \\\"../interfaces/multivault/IMultiVaultToken.sol\\\";\\n\\n\\ncontract MultiVaultToken is IMultiVaultToken, Context, IERC20, IERC20Metadata, Ownable {\\n    uint activation;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol} and {decimals}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external override {\\n        require(activation == 0);\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n\\n        activation = block.number;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function mint(\\n        address account,\\n        uint amount\\n    ) external override onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(\\n        address account,\\n        uint amount\\n    ) external override onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n        _balances[from] = fromBalance - amount;\\n    }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        _balances[account] = accountBalance - amount;\\n    }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"contracts/utils/ChainId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n\\ncontract ChainId {\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"base_token\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"recipient_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipient_addr\",\"type\":\"uint256\"}],\"name\":\"AlienTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlacklistTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlacklistTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IMultiVault.TokenType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"recipient_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipient_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"native_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"native_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"recipient_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipient_addr\",\"type\":\"uint256\"}],\"name\":\"NativeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"NewPendingGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"native_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"native_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"TokenMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"UpdateBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"wid\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"name\":\"UpdateConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateDefaultWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"UpdateGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"UpdateGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"management\",\"type\":\"address\"}],\"name\":\"UpdateManagement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"wid\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"name\":\"UpdateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IMultiVault.TokenType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amunt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"api_version\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"blacklistAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"blacklistRemoveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum IMultiVault.Fee\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"calculateMovementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"recipient\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"native_wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"native_addr\",\"type\":\"uint256\"}],\"name\":\"getNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"_rewards\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"migrateAlienTokenToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"natives\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"saveWithdrawAlien\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"saveWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"_configuration\",\"type\":\"tuple\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultDepositFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"_rewards\",\"type\":\"tuple\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setTokenDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setTokenWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"internalType\":\"struct IMultiVault.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawalIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiVault", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}