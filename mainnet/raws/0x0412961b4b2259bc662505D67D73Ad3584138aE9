{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/CapsuleMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICapsule.sol\\\";\\nimport \\\"./CapsuleMinterStorage.sol\\\";\\nimport \\\"./access/Governable.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract CapsuleMinter is Initializable, Governable, ReentrancyGuard, IERC721Receiver, CapsuleMinterStorage {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n    uint256 public constant TOKEN_TYPE_LIMIT = 100;\\n    uint256 internal constant MAX_CAPSULE_MINT_TAX = 0.1 ether;\\n\\n    event AddedToWhitelist(address indexed user);\\n    event RemovedFromWhitelist(address indexed user);\\n    event FlushedTaxAmount(uint256 taxAmount);\\n    event CapsuleMintTaxUpdated(uint256 oldMintTax, uint256 newMintTax);\\n    event SimpleCapsuleMinted(address indexed account, address indexed capsule, string uri);\\n    event SimpleCapsuleBurnt(address indexed account, address indexed capsule, string uri);\\n    event SingleERC20CapsuleMinted(\\n        address indexed account,\\n        address indexed capsule,\\n        address indexed token,\\n        uint256 amount,\\n        string uri\\n    );\\n    event SingleERC20CapsuleBurnt(\\n        address indexed account,\\n        address indexed capsule,\\n        address indexed token,\\n        uint256 amount,\\n        string uri\\n    );\\n    event SingleERC721CapsuleMinted(\\n        address indexed account,\\n        address indexed capsule,\\n        address indexed token,\\n        uint256 id,\\n        string uri\\n    );\\n    event SingleERC721CapsuleBurnt(\\n        address indexed account,\\n        address indexed capsule,\\n        address indexed token,\\n        uint256 id,\\n        string uri\\n    );\\n    event MultiERC20CapsuleMinted(\\n        address indexed account,\\n        address indexed capsule,\\n        address[] tokens,\\n        uint256[] amounts,\\n        string uri\\n    );\\n    event MultiERC20CapsuleBurnt(\\n        address indexed account,\\n        address indexed capsule,\\n        address[] tokens,\\n        uint256[] amounts,\\n        string uri\\n    );\\n    event MultiERC721CapsuleMinted(\\n        address indexed account,\\n        address indexed capsule,\\n        address[] tokens,\\n        uint256[] ids,\\n        string uri\\n    );\\n    event MultiERC721CapsuleBurnt(\\n        address indexed account,\\n        address indexed capsule,\\n        address[] tokens,\\n        uint256[] ids,\\n        string uri\\n    );\\n\\n    function initialize(address _factory) external initializer {\\n        require(_factory != address(0), Errors.ZERO_ADDRESS);\\n        __Governable_init();\\n        factory = ICapsuleFactory(_factory);\\n        capsuleMintTax = 0.001 ether;\\n    }\\n\\n    modifier checkStatus() {\\n        if (!mintWhitelist.contains(_msgSender())) {\\n            require(msg.value == capsuleMintTax, Errors.INCORRECT_TAX_AMOUNT);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidCapsuleCollections(address _capsule) {\\n        require(factory.isCapsule(_capsule), Errors.NOT_CAPSULE);\\n        _;\\n    }\\n\\n    modifier onlyCollectionMinter(address _capsule) {\\n        require(factory.isCapsule(_capsule), Errors.NOT_CAPSULE);\\n        require(ICapsule(_capsule).isCollectionMinter(_msgSender()), Errors.NOT_COLLECTION_MINTER);\\n        _;\\n    }\\n\\n    /******************************************************************************\\n     *                              Read functions                                *\\n     *****************************************************************************/\\n\\n    // return the owner of a Capsule by id\\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address) {\\n        return ICapsule(_capsule).ownerOf(_id);\\n    }\\n\\n    /// @notice Get list of mint whitelisted address\\n    function getMintWhitelist() external view returns (address[] memory) {\\n        return mintWhitelist.values();\\n    }\\n\\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data) {\\n        return _multiERC20Capsule[_capsule][_id];\\n    }\\n\\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data) {\\n        return _multiERC721Capsule[_capsule][_id];\\n    }\\n\\n    /// @notice Return whether given address is mint whitelisted or not\\n    function isMintWhitelisted(address _user) external view returns (bool) {\\n        return mintWhitelist.contains(_user);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        // `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n        return 0x150b7a02;\\n    }\\n\\n    /******************************************************************************\\n     *                             Write functions                                *\\n     *****************************************************************************/\\n    function mintSimpleCapsule(\\n        address _capsule,\\n        string calldata _uri,\\n        address _receiver\\n    ) external payable nonReentrant onlyCollectionMinter(_capsule) checkStatus {\\n        // Mark id as a simple NFT\\n        isSimpleCapsule[_capsule][ICapsule(_capsule).counter()] = true;\\n        ICapsule(_capsule).mint(_receiver, _uri);\\n        emit SimpleCapsuleMinted(_receiver, _capsule, _uri);\\n    }\\n\\n    function burnSimpleCapsule(address _capsule, uint256 _id)\\n        external\\n        nonReentrant\\n        onlyValidCapsuleCollections(_capsule)\\n    {\\n        require(isSimpleCapsule[_capsule][_id], Errors.NOT_SIMPLE_CAPSULE);\\n        delete isSimpleCapsule[_capsule][_id];\\n        // We do not have to store the token uri in a local variable - we are emitting an event before burn\\n        emit SimpleCapsuleBurnt(_msgSender(), _capsule, ICapsule(_capsule).tokenURI(_id));\\n        ICapsule(_capsule).burn(_msgSender(), _id);\\n    }\\n\\n    function mintSingleERC20Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _amount,\\n        string calldata _uri,\\n        address _receiver\\n    ) external payable nonReentrant onlyCollectionMinter(_capsule) checkStatus {\\n        require(_amount > 0, Errors.INVALID_TOKEN_AMOUNT);\\n        require(_token != address(0), Errors.INVALID_TOKEN_ADDRESS);\\n\\n        // get the current top counter\\n        uint256 id = ICapsule(_capsule).counter();\\n\\n        // transfer tokens from caller to contract\\n        uint256 _actualAmount = _depositToken(IERC20(_token), _msgSender(), _amount);\\n\\n        // then, add user data into the contract (tie NFT to value):\\n        // - set the ID of the Capsule NFT at counter to map to the passed in tokenAddress\\n        // - set the ID of the Capsule NFT at counter to map to the passed in tokenAmount\\n        singleERC20Capsule[_capsule][id].tokenAddress = _token;\\n        singleERC20Capsule[_capsule][id].tokenAmount = _actualAmount;\\n        // lastly, mint the Capsule NFT (minted at the current counter (obtained above as id))\\n        ICapsule(_capsule).mint(_receiver, _uri);\\n\\n        emit SingleERC20CapsuleMinted(_receiver, _capsule, _token, _amount, _uri);\\n    }\\n\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id)\\n        external\\n        nonReentrant\\n        onlyValidCapsuleCollections(_capsule)\\n    {\\n        SingleERC20Capsule memory _capsuleData = singleERC20Capsule[_capsule][_id];\\n        // If there is no token amount in stored data then provided id is not ERC20 Capsule id\\n        require(_capsuleData.tokenAmount > 0, Errors.NOT_ERC20_CAPSULE_ID);\\n\\n        // get the token address held at the Capsule NFT id\\n        address heldTokenAddress = _capsuleData.tokenAddress;\\n        // get the amount of tokens held by the Capsule NFT id\\n        uint256 tokensHeldById = _capsuleData.tokenAmount;\\n        // then, delete the Capsule NFT data at id\\n        delete singleERC20Capsule[_capsule][_id];\\n\\n        // Read URI before burning token\\n        string memory uri = ICapsule(_capsule).tokenURI(_id);\\n        // burn the Capsule NFT at id\\n        ICapsule(_capsule).burn(_msgSender(), _id);\\n\\n        // send tokens back to the user\\n        IERC20(heldTokenAddress).safeTransfer(_msgSender(), tokensHeldById);\\n        emit SingleERC20CapsuleBurnt(_msgSender(), _capsule, heldTokenAddress, tokensHeldById, uri);\\n    }\\n\\n    function mintSingleERC721Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _id,\\n        string calldata _uri,\\n        address _receiver\\n    ) external payable nonReentrant onlyCollectionMinter(_capsule) checkStatus {\\n        // get the current top counter\\n        uint256 capsuleId = ICapsule(_capsule).counter();\\n\\n        // transfer input NFT to contract. safeTransferFrom does check that from, _msgSender in this case, is owner.\\n        IERC721(_token).safeTransferFrom(_msgSender(), address(this), _id);\\n\\n        // check that the contract owns that NFT\\n        require(IERC721(_token).ownerOf(_id) == address(this), Errors.NOT_NFT_OWNER);\\n\\n        // then, add user data into the contract (tie Capsule NFT to input token):\\n        // - set the ID of the Capsule NFT at counter to map to the passed in tokenAddress\\n        // - set the ID of the Capsule NFT at counter to map to the passed in id\\n        singleERC721Capsule[_capsule][capsuleId].tokenAddress = _token;\\n        singleERC721Capsule[_capsule][capsuleId].id = _id;\\n        // lastly, mint the Capsule NFT\\n        ICapsule(_capsule).mint(_receiver, _uri);\\n\\n        emit SingleERC721CapsuleMinted(_receiver, _capsule, _token, _id, _uri);\\n    }\\n\\n    function burnSingleERC721Capsule(address _capsule, uint256 _id)\\n        external\\n        nonReentrant\\n        onlyValidCapsuleCollections(_capsule)\\n    {\\n        SingleERC721Capsule memory _capsuleData = singleERC721Capsule[_capsule][_id];\\n        // If there is no token address in stored data then provided id is not ERC721 Capsule id\\n        require(_capsuleData.tokenAddress != address(0), Errors.NOT_ERC721_CAPSULE_ID);\\n\\n        // get the token address held at the Capsule NFT id\\n        address heldTokenAddress = _capsuleData.tokenAddress;\\n        // get the amount of tokens held by the Capsule NFT id\\n        uint256 tokenId = _capsuleData.id;\\n        // then, delete the Capsule NFT data at id\\n        delete singleERC721Capsule[_capsule][_id];\\n\\n        // Read URI before burning token\\n        string memory uri = ICapsule(_capsule).tokenURI(_id);\\n        // burn the Capsule NFT\\n        ICapsule(_capsule).burn(_msgSender(), _id);\\n        // send token back to the user\\n        IERC721(heldTokenAddress).safeTransferFrom(address(this), _msgSender(), tokenId);\\n\\n        emit SingleERC721CapsuleBurnt(_msgSender(), _capsule, heldTokenAddress, tokenId, uri);\\n    }\\n\\n    function mintMultiERC20Capsule(\\n        address _capsule,\\n        address[] calldata _tokens,\\n        uint256[] calldata _amounts,\\n        string calldata _uri,\\n        address _receiver\\n    ) external payable nonReentrant onlyCollectionMinter(_capsule) checkStatus {\\n        uint256 tokensLength = _tokens.length;\\n\\n        require(tokensLength > 0 && tokensLength <= TOKEN_TYPE_LIMIT, Errors.INVALID_TOKEN_ARRAY_LENGTH);\\n        // Due to stake too deep it is not possible to create another local variable hence reading length directly\\n        require(_amounts.length > 0 && _amounts.length <= TOKEN_TYPE_LIMIT, Errors.INVALID_AMOUNT_ARRAY_LENGTH);\\n        require(tokensLength == _amounts.length, Errors.LENGTH_MISMATCH);\\n\\n        // get the current top counter\\n        uint256 _id = ICapsule(_capsule).counter();\\n        // Some tokens, like USDT, may have a transfer fee, so we want to record actual transfer amount\\n        uint256[] memory _actualAmounts = new uint256[](tokensLength);\\n        // loop assumes that the token address and amount is mapped to the same index in both arrays\\n        // meaning: the user is sending _amounts[0] of _tokens[0]\\n        for (uint256 i; i < tokensLength; i++) {\\n            address _token = _tokens[i];\\n            uint256 _amount = _amounts[i];\\n\\n            require(_amount > 0, Errors.INVALID_TOKEN_AMOUNT);\\n            require(_token != address(0), Errors.INVALID_TOKEN_ADDRESS);\\n\\n            // transfer tokens from caller to contract\\n            _actualAmounts[i] = _depositToken(IERC20(_token), _msgSender(), _amount);\\n        }\\n\\n        // then add user data into the contract (tie Capsule NFT to input):\\n        _multiERC20Capsule[_capsule][_id].tokenAddresses = _tokens;\\n        _multiERC20Capsule[_capsule][_id].tokenAmounts = _actualAmounts;\\n\\n        // lastly, mint the Capsule NFT\\n        ICapsule(_capsule).mint(_receiver, _uri);\\n\\n        emit MultiERC20CapsuleMinted(_receiver, _capsule, _tokens, _amounts, _uri);\\n    }\\n\\n    function burnMultiERC20Capsule(address _capsule, uint256 _id)\\n        external\\n        nonReentrant\\n        onlyValidCapsuleCollections(_capsule)\\n    {\\n        address[] memory tokens = _multiERC20Capsule[_capsule][_id].tokenAddresses;\\n        uint256[] memory amounts = _multiERC20Capsule[_capsule][_id].tokenAmounts;\\n        // If there is no tokens in stored data then provided id is not ERC20 Capsule id\\n        require(tokens.length > 0, Errors.NOT_ERC20_CAPSULE_ID);\\n\\n        // then, delete the Capsule NFT data at id\\n        delete _multiERC20Capsule[_capsule][_id];\\n\\n        // Read URI before burning token\\n        string memory uri = ICapsule(_capsule).tokenURI(_id);\\n        // burn the Capsule NFT\\n        ICapsule(_capsule).burn(_msgSender(), _id);\\n\\n        for (uint256 i; i < tokens.length; i++) {\\n            // send tokens back to the user\\n            IERC20(tokens[i]).safeTransfer(_msgSender(), amounts[i]);\\n        }\\n\\n        emit MultiERC20CapsuleBurnt(_msgSender(), _capsule, tokens, amounts, uri);\\n    }\\n\\n    function mintMultiERC721Capsule(\\n        address _capsule,\\n        address[] calldata _tokens,\\n        uint256[] calldata _ids,\\n        string calldata _uri,\\n        address _receiver\\n    ) external payable nonReentrant onlyCollectionMinter(_capsule) checkStatus {\\n        uint256 tokensLength = _tokens.length;\\n        uint256 idsLength = _ids.length;\\n\\n        require(tokensLength > 0 && tokensLength <= TOKEN_TYPE_LIMIT, Errors.INVALID_TOKEN_ARRAY_LENGTH);\\n        require(idsLength > 0 && idsLength <= TOKEN_TYPE_LIMIT, Errors.INVALID_IDS_ARRAY_LENGTH);\\n        require(tokensLength == idsLength, Errors.LENGTH_MISMATCH);\\n\\n        // get the current top counter\\n        uint256 _capsuleId = ICapsule(_capsule).counter();\\n\\n        // loop assumes that the token address and amount is mapped to the same index in both arrays\\n        // meaning: the user is sending _amounts[0] of _tokens[0]\\n        for (uint256 i; i < tokensLength; i++) {\\n            address _token = _tokens[i];\\n            uint256 _id = _ids[i];\\n\\n            // no require check necessary for id\\n            require(_token != address(0), Errors.INVALID_TOKEN_ADDRESS);\\n\\n            // transfer token to contract, safeTransferFrom does check from is the owner of id\\n            IERC721(_token).safeTransferFrom(_msgSender(), address(this), _id);\\n\\n            // check the contract owns that NFT\\n            require(IERC721(_token).ownerOf(_id) == address(this), Errors.NOT_NFT_OWNER);\\n        }\\n\\n        // then, add user data into the contract (tie Capsule NFT to input):\\n        // - set the ID of the NFT (counter) to map to the passed in tokenAddresses\\n        // - set the ID of the NFT (counter) to map to the passed in ids\\n        _multiERC721Capsule[_capsule][_capsuleId].tokenAddresses = _tokens;\\n        _multiERC721Capsule[_capsule][_capsuleId].ids = _ids;\\n\\n        // lastly, mint the Capsule NFT\\n        ICapsule(_capsule).mint(_receiver, _uri);\\n\\n        emit MultiERC721CapsuleMinted(_receiver, _capsule, _tokens, _ids, _uri);\\n    }\\n\\n    function burnMultiERC721Capsule(address _capsule, uint256 _id)\\n        external\\n        nonReentrant\\n        onlyValidCapsuleCollections(_capsule)\\n    {\\n        address[] memory tokens = _multiERC721Capsule[_capsule][_id].tokenAddresses;\\n        uint256[] memory ids = _multiERC721Capsule[_capsule][_id].ids;\\n        // If there is no tokens in stored data then provided id is not ERC721 Capsule id\\n        require(tokens.length > 0, Errors.NOT_ERC721_CAPSULE_ID);\\n\\n        // then, delete the Capsule NFT data at id\\n        delete _multiERC721Capsule[_capsule][_id];\\n\\n        // Read URI before burning token\\n        string memory uri = ICapsule(_capsule).tokenURI(_id);\\n        // burn the Capsule NFT\\n        ICapsule(_capsule).burn(_msgSender(), _id);\\n\\n        for (uint256 i; i < tokens.length; i++) {\\n            // send tokens back to the user\\n            IERC721(tokens[i]).safeTransferFrom(address(this), _msgSender(), ids[i]);\\n        }\\n\\n        emit MultiERC721CapsuleBurnt(_msgSender(), _capsule, tokens, ids, uri);\\n    }\\n\\n    /******************************************************************************\\n     *                            Governor functions                              *\\n     *****************************************************************************/\\n    function flushTaxAmount() external {\\n        address _taxCollector = factory.taxCollector();\\n        require(_msgSender() == governor || _msgSender() == _taxCollector, Errors.UNAUTHORIZED);\\n        uint256 _taxAmount = address(this).balance;\\n        emit FlushedTaxAmount(_taxAmount);\\n        Address.sendValue(payable(_taxCollector), _taxAmount);\\n    }\\n\\n    function addToWhitelist(address _user) external onlyGovernor {\\n        require(_user != address(0), Errors.ZERO_ADDRESS);\\n        require(mintWhitelist.add(_user), Errors.ADDRESS_ALREADY_EXIST);\\n        emit AddedToWhitelist(_user);\\n    }\\n\\n    function removeFromWhitelist(address _user) external onlyGovernor {\\n        require(_user != address(0), Errors.ZERO_ADDRESS);\\n        require(mintWhitelist.remove(_user), Errors.ADDRESS_DOES_NOT_EXIST);\\n        emit RemovedFromWhitelist(_user);\\n    }\\n\\n    /// @notice update Capsule NFT mint tax\\n    function updateCapsuleMintTax(uint256 _newTax) external onlyGovernor {\\n        require(_newTax <= MAX_CAPSULE_MINT_TAX, Errors.INCORRECT_TAX_AMOUNT);\\n        require(_newTax != capsuleMintTax, Errors.SAME_AS_EXISTING);\\n        emit CapsuleMintTaxUpdated(capsuleMintTax, _newTax);\\n        capsuleMintTax = _newTax;\\n    }\\n\\n    /******************************************************************************\\n     *                            Internal functions                              *\\n     *****************************************************************************/\\n    function _depositToken(\\n        IERC20 _token,\\n        address _depositor,\\n        uint256 _amount\\n    ) internal returns (uint256 _actualAmount) {\\n        uint256 _balanceBefore = _token.balanceOf(address(this));\\n        _token.safeTransferFrom(_depositor, address(this), _amount);\\n        _actualAmount = _token.balanceOf(address(this)) - _balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CapsuleMinterStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICapsuleFactory.sol\\\";\\nimport \\\"./interfaces/ICapsuleMinter.sol\\\";\\n\\nabstract contract CapsuleMinterStorage is ICapsuleMinter {\\n    /// @notice Capsule factory address\\n    ICapsuleFactory public factory;\\n\\n    uint256 public capsuleMintTax;\\n\\n    /// @notice Mapping of a Capsule NFT address -> id -> bool, indicating if the address is a simple Capsule\\n    mapping(address => mapping(uint256 => bool)) public isSimpleCapsule;\\n    /// @notice Mapping of a Capsule NFT address -> id -> SingleERC20Capsule struct\\n    mapping(address => mapping(uint256 => SingleERC20Capsule)) public singleERC20Capsule;\\n    /// @notice Mapping of a Capsule NFT address -> id -> SingleERC721Capsule struct\\n    mapping(address => mapping(uint256 => SingleERC721Capsule)) public singleERC721Capsule;\\n\\n    // Mapping of a Capsule NFT address -> id -> MultiERC20Capsule struct\\n    // It cannot be public because it contains a nested array. Instead, it has a getter function below\\n    mapping(address => mapping(uint256 => MultiERC20Capsule)) internal _multiERC20Capsule;\\n\\n    // Mapping of a Capsule NFT address -> id -> MultiERC721Capsule struct\\n    // It cannot be public because it contains a nested array. Instead it has a getter function below\\n    mapping(address => mapping(uint256 => MultiERC721Capsule)) internal _multiERC721Capsule;\\n\\n    // List of addresses which can mint Capsule NFTs without a mint tax\\n    EnumerableSet.AddressSet internal mintWhitelist;\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_TOKEN_AMOUNT = \\\"1\\\"; // Input token amount must be greater than 0\\n    string public constant INVALID_TOKEN_ADDRESS = \\\"2\\\"; // Input token address is zero\\n    string public constant INVALID_TOKEN_ARRAY_LENGTH = \\\"3\\\"; // Invalid tokenAddresses array length. 0 < length <= 100. Max 100 elements\\n    string public constant INVALID_AMOUNT_ARRAY_LENGTH = \\\"4\\\"; // Invalid tokenAmounts array length. 0 < length <= 100. Max 100 elements\\n    string public constant INVALID_IDS_ARRAY_LENGTH = \\\"5\\\"; // Invalid tokenIds array length. 0 < length <= 100. Max 100 elements\\n    string public constant LENGTH_MISMATCH = \\\"6\\\"; // Array length must be same\\n    string public constant NOT_NFT_OWNER = \\\"7\\\"; // Caller/Minter is not NFT owner\\n    string public constant NOT_CAPSULE = \\\"8\\\"; // Provided address or caller is not a valid Capsule address\\n    string public constant NOT_MINTER = \\\"9\\\"; // Provided address or caller is not Capsule minter\\n    string public constant NOT_COLLECTION_MINTER = \\\"10\\\"; // Provided address or caller is not collection minter\\n    string public constant ZERO_ADDRESS = \\\"11\\\"; // Input/provided address is zero.\\n    string public constant NON_ZERO_ADDRESS = \\\"12\\\"; // Address under check must be 0\\n    string public constant SAME_AS_EXISTING = \\\"13\\\"; // Provided address/value is same as stored in state\\n    string public constant NOT_SIMPLE_CAPSULE = \\\"14\\\"; // Provided Capsule id is not simple Capsule\\n    string public constant NOT_ERC20_CAPSULE_ID = \\\"15\\\"; // Provided token id is not the id of single/multi ERC20 Capsule\\n    string public constant NOT_ERC721_CAPSULE_ID = \\\"16\\\"; // Provided token id is not the id of single/multi ERC721 Capsule\\n    string public constant ADDRESS_DOES_NOT_EXIST = \\\"17\\\"; // Provided address does not exist in valid address list\\n    string public constant ADDRESS_ALREADY_EXIST = \\\"18\\\"; // Provided address does exist in valid address lists\\n    string public constant INCORRECT_TAX_AMOUNT = \\\"19\\\"; // Tax amount is incorrect\\n    string public constant UNAUTHORIZED = \\\"20\\\"; // Caller is not authorized to perform this task\\n    string public constant BLACKLISTED = \\\"21\\\"; // Caller is blacklisted and can not interact with Capsule protocol\\n    string public constant WHITELISTED = \\\"22\\\"; // Caller is whitelisted\\n    string public constant NOT_TOKEN_URI_OWNER = \\\"23\\\"; // Provided address or caller is not tokenUri owner\\n}\\n\"\r\n    },\r\n    \"contracts/access/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal onlyInitializing {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current governor.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"invalid proposed governor\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not the proposed governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICapsule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ICapsule is IERC721 {\\n    function counter() external view returns (uint256);\\n\\n    function mint(address account, string memory _uri) external;\\n\\n    function burn(address owner, uint256 tokenId) external;\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function isCollectionMinter(address _account) external view returns (bool);\\n\\n    function setTokenURI(uint256 _tokenId, string memory _newTokenURI) external;\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICapsuleFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface ICapsuleFactory is IGovernable {\\n    function capsuleMinter() external view returns (address);\\n\\n    function createCapsuleCollection(\\n        string memory _name,\\n        string memory _symbol,\\n        address _tokenURIOwner,\\n        bool _isCollectionPrivate\\n    ) external payable returns (address);\\n\\n    function getAllCapsuleCollections() external view returns (address[] memory);\\n\\n    function getCapsuleCollectionsOf(address _owner) external view returns (address[] memory);\\n\\n    function getBlacklist() external view returns (address[] memory);\\n\\n    function getWhitelist() external view returns (address[] memory);\\n\\n    function isCapsule(address _capsule) external view returns (bool);\\n\\n    function isBlacklisted(address _user) external view returns (bool);\\n\\n    function isWhitelisted(address _user) external view returns (bool);\\n\\n    function taxCollector() external view returns (address);\\n\\n    //solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    // Special permission functions\\n    function addToWhitelist(address _user) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function addToBlacklist(address _user) external;\\n\\n    function removeFromBlacklist(address _user) external;\\n\\n    function flushTaxAmount() external;\\n\\n    function setCapsuleMinter(address _newCapsuleMinter) external;\\n\\n    function updateCapsuleCollectionOwner(address _previousOwner, address _newOwner) external;\\n\\n    function updateCapsuleCollectionTax(uint256 _newTax) external;\\n\\n    function updateTaxCollector(address _newTaxCollector) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICapsuleMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface ICapsuleMinter is IGovernable {\\n    struct SingleERC20Capsule {\\n        address tokenAddress;\\n        uint256 tokenAmount;\\n    }\\n\\n    struct MultiERC20Capsule {\\n        address[] tokenAddresses;\\n        uint256[] tokenAmounts;\\n    }\\n\\n    struct SingleERC721Capsule {\\n        address tokenAddress;\\n        uint256 id;\\n    }\\n\\n    struct MultiERC721Capsule {\\n        address[] tokenAddresses;\\n        uint256[] ids;\\n    }\\n\\n    function getMintWhitelist() external view returns (address[] memory);\\n\\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address);\\n\\n    function isMintWhitelisted(address _user) external view returns (bool);\\n\\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data);\\n\\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data);\\n\\n    function singleERC20Capsule(address _capsule, uint256 _id) external view returns (address _token, uint256 _amount);\\n\\n    function mintSimpleCapsule(\\n        address _capsule,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSimpleCapsule(address _capsule, uint256 _id) external;\\n\\n    function mintSingleERC20Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _amount,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id) external;\\n\\n    function mintSingleERC721Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _id,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSingleERC721Capsule(address _capsule, uint256 _id) external;\\n\\n    function mintMultiERC20Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC20Capsule(address _capsule, uint256 _id) external;\\n\\n    function mintMultiERC721Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _ids,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC721Capsule(address _capsule, uint256 _id) external;\\n\\n    // Special permission functions\\n    function addToWhitelist(address _user) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function flushTaxAmount() external;\\n\\n    function updateCapsuleMintTax(uint256 _newTax) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintTax\",\"type\":\"uint256\"}],\"name\":\"CapsuleMintTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"}],\"name\":\"FlushedTaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"MultiERC20CapsuleBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"MultiERC20CapsuleMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"MultiERC721CapsuleBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"MultiERC721CapsuleMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SimpleCapsuleBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SimpleCapsuleMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SingleERC20CapsuleBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SingleERC20CapsuleMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SingleERC721CapsuleBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"capsule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SingleERC721CapsuleMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_TYPE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnMultiERC20Capsule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnMultiERC721Capsule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnSimpleCapsule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnSingleERC20Capsule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnSingleERC721Capsule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capsuleMintTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ICapsuleFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushTaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCapsuleOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isMintWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isSimpleCapsule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintMultiERC20Capsule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintMultiERC721Capsule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintSimpleCapsule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintSingleERC20Capsule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintSingleERC721Capsule\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"multiERC20Capsule\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICapsuleMinter.MultiERC20Capsule\",\"name\":\"_data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"multiERC721Capsule\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICapsuleMinter.MultiERC721Capsule\",\"name\":\"_data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singleERC20Capsule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singleERC721Capsule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"updateCapsuleMintTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CapsuleMinter", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}