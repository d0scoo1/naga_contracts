{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/anchor/AnchorStrat.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './AnchorConstants.sol';\\nimport './AnchorStratBase.sol';\\n\\ncontract AnchorStrat is AnchorStratBase {\\n    constructor()\\n        AnchorStratBase(\\n            Config({\\n                tokens: [\\n                    IERC20Metadata(AnchorConstants.DAI_ADDRESS),\\n                    IERC20Metadata(AnchorConstants.USDC_ADDRESS),\\n                    IERC20Metadata(AnchorConstants.USDT_ADDRESS)\\n                ],\\n                aTokens: [\\n                    IERC20Metadata(AnchorConstants.aDAI_ADDRESS),\\n                    IERC20Metadata(AnchorConstants.aUSDC_ADDRESS),\\n                    IERC20Metadata(AnchorConstants.aUSDT_ADDRESS)\\n                ],\\n                aTokenPools: [\\n                    IConversionPool(AnchorConstants.aDAI_POOL_ADDRESS),\\n                    IConversionPool(AnchorConstants.aUSDC_POOL_ADDRESS),\\n                    IConversionPool(AnchorConstants.aUSDT_POOL_ADDRESS)\\n                ]\\n            })\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/anchor/AnchorConstants.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary AnchorConstants {\\n    address internal constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant aDAI_ADDRESS = 0x23afFce94d2A6736DE456a25eB8Cc96612Ca55CA;\\n    address internal constant aDAI_POOL_ADDRESS = 0x83dd0a8E6F3A51c4cCA6c3f95721f9926DD9e7E7;\\n\\n    address internal constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant aUSDC_ADDRESS = 0x94eAd8f528A3aF425de14cfdDA727B218915687C;\\n    address internal constant aUSDC_POOL_ADDRESS = 0x53fD7e8fEc0ac80cf93aA872026EadF50cB925f3;\\n\\n    address internal constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant aUSDT_ADDRESS = 0x54E076dBa023251854f4C29ea750566528734B2d;\\n    address internal constant aUSDT_POOL_ADDRESS = 0xEd8C41774E71f9BF0c2C223d3a3554F496656D16;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/anchor/AnchorStratBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../../interfaces/IZunami.sol';\\nimport './IConversionPool.sol';\\nimport './IExchangeRateFeeder.sol';\\n\\ncontract AnchorStratBase is Ownable {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    enum WithdrawalType {\\n        Base,\\n        OneCoin\\n    }\\n\\n    struct Config {\\n        IERC20Metadata[3] tokens;\\n        IERC20Metadata[3] aTokens;\\n        IConversionPool[3] aTokenPools;\\n    }\\n\\n    Config internal _config;\\n\\n    IZunami public zunami;\\n\\n    uint256 public constant PRICE_DENOMINATOR = 1e18;\\n    uint256 public constant DEPOSIT_DENOMINATOR = 10000;\\n    uint256 public constant ZUNAMI_DAI_TOKEN_ID = 0;\\n    uint256 public constant ZUNAMI_USDC_TOKEN_ID = 1;\\n    uint256 public constant ZUNAMI_USDT_TOKEN_ID = 2;\\n\\n    uint256 public minDepositAmount = 9975; // 99.75%\\n    address public feeDistributor;\\n\\n    uint256[3] public managementFees;\\n\\n    uint256[3] public decimalsMultipliers;\\n\\n    event AccruedManagementFees(uint256[3] managementFees);\\n\\n    /**\\n     * @dev Throws if called by any account other than the Zunami\\n     */\\n    modifier onlyZunami() {\\n        require(_msgSender() == address(zunami), 'must be called by Zunami contract');\\n        _;\\n    }\\n\\n    constructor(Config memory config_) {\\n        _config = config_;\\n\\n        for (uint256 i; i < 3; i++) {\\n            decimalsMultipliers[i] = calcTokenDecimalsMultiplier(_config.tokens[i]);\\n        }\\n\\n        feeDistributor = _msgSender();\\n    }\\n\\n    /**\\n     * @dev Returns deposited amount in USD.\\n     * If deposit failed return zero\\n     * @return Returns deposited amount in USD.\\n     * @param amounts - amounts in stablecoins that user deposit\\n     */\\n    function deposit(uint256[3] memory amounts) external returns (uint256) {\\n        uint256 addedHoldings;\\n        for (uint256 i = 0; i < 3; i++) {\\n            if(amounts[i] == 0) continue;\\n\\n            uint256 beforeATokenBalance = _config.aTokens[i].balanceOf(address(this));\\n\\n            _config.tokens[i].safeIncreaseAllowance(address(_config.aTokenPools[i]), amounts[i]);\\n            _config.aTokenPools[i].deposit(amounts[i]);\\n\\n            IExchangeRateFeeder feeder = IExchangeRateFeeder(_config.aTokenPools[i].feeder());\\n            uint256 pER = feeder.exchangeRateOf(address(_config.tokens[i]), false);\\n            addedHoldings += ((_config.aTokens[i].balanceOf(address(this)) - beforeATokenBalance) * pER) / 1e18;\\n        }\\n\\n        return addedHoldings;\\n    }\\n\\n    function initWithdrawAll() external onlyOwner {\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 aTokenBalance = _config.aTokens[i].balanceOf(address(this));\\n            _config.aTokens[i].safeIncreaseAllowance(\\n                address(_config.aTokenPools[i]),\\n                aTokenBalance\\n            );\\n            _config.aTokenPools[i].redeem(aTokenBalance, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev can be called by Zunami contract.\\n     * This function need for moveFunds between strategys.\\n     */\\n    function withdrawAll() external onlyZunami {\\n        // initWithdrawAll has to be called before\\n        transferAllTokensOut(address(zunami));\\n    }\\n\\n    function transferAllTokensOut(address withdrawer) internal {\\n        uint256 transferAmount;\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 tokenStratBalance = _config.tokens[i].balanceOf(address(this));\\n            require( tokenStratBalance > managementFees[i], \\\"Zunami: Not enough strategy balance\\\");\\n            unchecked {\\n                transferAmount = tokenStratBalance - managementFees[i];\\n            }\\n            if (transferAmount > 0) {\\n                _config.tokens[i].safeTransfer(withdrawer, transferAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if withdraw success and false if fail.\\n     * Withdraw failed when user removingCrvLps < requiredCrvLPs (wrong minAmounts)\\n     * @return Returns true if withdraw success and false if fail.\\n     * @param withdrawer - address of user that deposit funds\\n     * @param userRatioOfCrvLps - user's Ratio of ZLP for withdraw\\n     * @param tokenAmounts -  array of amounts stablecoins that user want minimum receive\\n     */\\n    function withdraw(\\n        address withdrawer,\\n        uint256 userRatioOfCrvLps, // multiplied by 1e18\\n        uint256[3] memory tokenAmounts,\\n        WithdrawalType withdrawalType,\\n        uint128 tokenIndex\\n    ) external virtual onlyZunami returns (bool) {\\n        require(userRatioOfCrvLps > 0 && userRatioOfCrvLps <= 1e18, 'Wrong lp Ratio');\\n        require(withdrawalType == WithdrawalType.Base, 'Only base');\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 removingATokenBalance = (_config.aTokens[i].balanceOf(address(this)) *\\n                userRatioOfCrvLps) / 1e18;\\n\\n            _config.aTokens[i].safeIncreaseAllowance(\\n                address(_config.aTokenPools[i]),\\n                removingATokenBalance\\n            );\\n\\n            _config.aTokenPools[i].redeem(removingATokenBalance, tokenAmounts[i]);\\n\\n            IExchangeRateFeeder feeder = IExchangeRateFeeder(_config.aTokenPools[i].feeder());\\n            uint256 pER = feeder.exchangeRateOf(address(_config.tokens[i]), true);\\n\\n            uint256 transferAmount = (removingATokenBalance * pER) / 1e18;\\n            if (transferAmount > 0) {\\n                _config.tokens[i].safeTransfer(withdrawer, transferAmount);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function calcTokenDecimalsMultiplier(IERC20Metadata token) internal view returns (uint256) {\\n        uint8 decimals = token.decimals();\\n        require(decimals <= 18, 'Zunami: wrong token decimals');\\n        if (decimals == 18) return 1;\\n        return 10**(18 - decimals);\\n    }\\n\\n    function autoCompound() public onlyZunami {\\n        // Calcs automaticly\\n    }\\n\\n    /**\\n     * @dev Returns total USD holdings in strategy.\\n     * return amount is lpBalance x lpPrice + cvx x cvxPrice + _config.crv * crvPrice.\\n     * @return Returns total USD holdings in strategy\\n     */\\n    function totalHoldings() public view virtual returns (uint256) {\\n        uint256 tokensHoldings = 0;\\n        for (uint256 i = 0; i < 3; i++) {\\n            IExchangeRateFeeder feeder = IExchangeRateFeeder(_config.aTokenPools[i].feeder());\\n            uint256 pER = feeder.exchangeRateOf(address(_config.tokens[i]), false);\\n            tokensHoldings += (_config.aTokens[i].balanceOf(address(this)) * pER) / 1e18;\\n        }\\n        return tokensHoldings;\\n    }\\n\\n    function accrueManagementFees(uint256[3] memory newManagementFees) public onlyOwner {\\n        for (uint256 i = 0; i < 3; i++) {\\n            managementFees[i] += newManagementFees[i];\\n        }\\n        emit AccruedManagementFees(newManagementFees);\\n    }\\n\\n    /**\\n     * @dev dev claim managementFees from strategy.\\n     * when tx completed managementFees = 0\\n     */\\n    function claimManagementFees() public returns (uint256 totalClaimedFees) {\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint256 tokenBalance = _config.tokens[i].balanceOf(address(this));\\n            uint256 transferBalance = managementFees[i] > tokenBalance ? tokenBalance : managementFees[i];\\n            totalClaimedFees += transferBalance * decimalsMultipliers[i];\\n            if (transferBalance > 0) {\\n                _config.tokens[i].safeTransfer(feeDistributor, transferBalance);\\n            }\\n            managementFees[i] = 0;\\n        }\\n\\n        return totalClaimedFees;\\n    }\\n\\n    /**\\n     * @dev dev can update minDepositAmount but it can't be higher than 10000 (100%)\\n     * If user send deposit tx and get deposit amount lower than minDepositAmount than deposit tx failed\\n     * @param _minDepositAmount - amount which must be the minimum (%) after the deposit, min amount 1, max amount 10000\\n     */\\n    function updateMinDepositAmount(uint256 _minDepositAmount) public onlyOwner {\\n        require(_minDepositAmount > 0 && _minDepositAmount <= 10000, 'Wrong amount!');\\n        minDepositAmount = _minDepositAmount;\\n    }\\n\\n    /**\\n     * @dev disable renounceOwnership for safety\\n     */\\n    function renounceOwnership() public view override onlyOwner {\\n        revert('The strategy must have an owner');\\n    }\\n\\n    /**\\n     * @dev dev set Zunami (main contract) address\\n     * @param zunamiAddr - address of main contract (Zunami)\\n     */\\n    function setZunami(address zunamiAddr) external onlyOwner {\\n        zunami = IZunami(zunamiAddr);\\n    }\\n\\n    /**\\n     * @dev governance can withdraw all stuck funds in emergency case\\n     * @param _token - IERC20Metadata token that should be fully withdraw from Strategy\\n     */\\n    function withdrawStuckToken(IERC20Metadata _token) external onlyOwner {\\n        uint256 tokenBalance = _token.balanceOf(address(this));\\n        if (tokenBalance > 0) {\\n            _token.safeTransfer(_msgSender(), tokenBalance);\\n        }\\n    }\\n\\n    /**\\n     * @dev governance can set feeDistributor address for distribute protocol fees\\n     * @param _feeDistributor - address feeDistributor that be used for claim fees\\n     */\\n    function changeFeeDistributor(address _feeDistributor) external onlyOwner {\\n        feeDistributor = _feeDistributor;\\n    }\\n\\n    function calcWithdrawOneCoin(uint256 userRatioOfCrvLps, uint128 tokenIndex)\\n    external\\n    view\\n    returns (uint256 tokenAmount){\\n        //Don't support\\n        return 0;\\n    }\\n\\n    function calcSharesAmount(uint256[3] memory tokenAmounts, bool isDeposit)\\n    external\\n    view\\n    returns (uint256 sharesAmount) {\\n        //Don't support\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZunami.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IZunami {\\n    function totalDeposited() external returns (uint256);\\n\\n    function deposited(address account) external returns (uint256);\\n\\n    function totalHoldings() external returns (uint256);\\n\\n    function calcManagementFee(uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/anchor/IConversionPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IConversionPool {\\n    function deposit(uint256 _amount) external;\\n\\n    function deposit(uint256 _amount, uint256 _minAmountOut) external;\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function redeem(uint256 _amount, uint256 _minAmountOut) external;\\n\\n    function feeder() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/anchor/IExchangeRateFeeder.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeRateFeeder {\\n    event RateUpdated(\\n        address indexed _operator,\\n        address indexed _token,\\n        uint256 _before,\\n        uint256 _after,\\n        uint256 _updateCount\\n    );\\n\\n    enum Status {\\n        NEUTRAL,\\n        RUNNING,\\n        STOPPED\\n    }\\n\\n    struct Token {\\n        Status status;\\n        uint256 exchangeRate;\\n        uint256 period;\\n        uint256 weight;\\n        uint256 lastUpdatedAt;\\n    }\\n\\n    function exchangeRateOf(address _token, bool _simulate) external view returns (uint256);\\n\\n    function update(address _token) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"managementFees\",\"type\":\"uint256[3]\"}],\"name\":\"AccruedManagementFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZUNAMI_DAI_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZUNAMI_USDC_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZUNAMI_USDT_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"newManagementFees\",\"type\":\"uint256[3]\"}],\"name\":\"accrueManagementFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"calcSharesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userRatioOfCrvLps\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"calcWithdrawOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"changeFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimManagementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimedFees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decimalsMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zunamiAddr\",\"type\":\"address\"}],\"name\":\"setZunami\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userRatioOfCrvLps\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"enum AnchorStratBase.WithdrawalType\",\"name\":\"withdrawalType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zunami\",\"outputs\":[{\"internalType\":\"contract IZunami\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnchorStrat", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}