{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract Whitelist is Ownable {\r\n    mapping (address => bool) private whitelistUser;\r\n\r\n    bool private isWhitelistEnable;\r\n\r\n    modifier onlyWhitelisted() {\r\n        if(isWhitelistEnable){\r\n            require(isWhitelisted(msg.sender), \"Whitelist: caller does not have the Whitelisted role\");             \r\n        }\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return whitelistUser[account];\r\n    }\r\n\r\n    function setWhitelistEnable(bool value) public onlyOwner returns(bool){\r\n        isWhitelistEnable = value;\r\n        return true;\r\n    }\r\n\r\n    function setWhitelistAddress (address[] memory users) public onlyOwner returns(bool){\r\n        for (uint i = 0; i < users.length; i++) {\r\n            whitelistUser[users[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// import ierc20 & safemath & non-standard\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface INonStandardERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! transfer does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n    function transfer(address dst, uint256 amount) external;\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! transferFrom does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external;\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MetriaSale  is Ownable, Whitelist {\r\n    using SafeMath for uint256;\r\n    event ClaimableAmount(address _user, uint256 _claimableAmount);\r\n\r\n    //rate of token per usdt\r\n    uint256 public rate; \r\n\r\n    // max allowed purchase of usdt per user \r\n    uint256 public allowedUserBalance; \r\n\r\n    // check presale is over or not\r\n    bool public presaleOver;\r\n\r\n    // usdt token address\r\n    IERC20 public usdt;\r\n    \r\n    // check claimable amount of given user\r\n    mapping(address => uint256) public claimable;\r\n\r\n    // hardcap to raise in usdt\r\n    uint256 public hardcap; \r\n    \r\n    // participated user addresses\r\n    address[] public participatedUsers;\r\n\r\n    uint256 public totalTokensSold;\r\n\r\n    /*\r\n     * @notice Initialize the contract\r\n     * @param _rate: rate of token\r\n     * @param _usdt: usdt token address\r\n     * @param _hardcap: amount to raise\r\n     * @param _allowedUserBalance: max allowed purchase of usdt per user\r\n     */\r\n    constructor(uint256 _rate, address _usdt, uint256 _hardcap, uint256 _allowedUserBalance)  {\r\n        rate = _rate;\r\n        usdt = IERC20(_usdt);\r\n        presaleOver = true;\r\n        hardcap = _hardcap;\r\n        allowedUserBalance = _allowedUserBalance;\r\n    }\r\n\r\n    modifier isPresaleOver() {\r\n        require(presaleOver == true, \"Metria Sale is not over\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @notice Change Hardcap\r\n     * @param _hardcap: amount in usdt\r\n     */\r\n    function changeHardCap(uint256 _hardcap) onlyOwner public {\r\n        hardcap = _hardcap;\r\n    }\r\n\r\n    /*\r\n     * @notice Change Rate\r\n     * @param _rate: token rate per usdt\r\n     */\r\n    function changeRate(uint256 _rate) onlyOwner public {\r\n        rate = _rate;\r\n    }\r\n\r\n    /*\r\n     * @notice Change Allowed user balance\r\n     * @param _allowedUserBalance: amount allowed per user to purchase tokens in usdt\r\n     */\r\n    function changeAllowedUserBalance(uint256 _allowedUserBalance) onlyOwner public {\r\n        allowedUserBalance = _allowedUserBalance;\r\n    }\r\n\r\n    /*\r\n     * @notice get total number of participated user\r\n     * @return no of participated user\r\n     */\r\n    function getTotalParticipatedUser() public view returns(uint256){\r\n        return participatedUsers.length;\r\n    }\r\n\r\n    /*\r\n     * @notice end presale\r\n     */\r\n    function endPresale() external onlyOwner returns (bool) {\r\n        presaleOver = true;\r\n        return presaleOver;\r\n    }\r\n\r\n    /*\r\n     * @notice start presale\r\n     */\r\n    function startPresale() external onlyOwner returns (bool) {\r\n        presaleOver = false;\r\n        return presaleOver;\r\n    }\r\n\r\n    /*\r\n     * @notice Buy Token with USDT\r\n     * @param _amount: amount of usdt\r\n     */\r\n    function buyTokenWithUSDT(uint256 _amount) external onlyWhitelisted{\r\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\r\n        require(presaleOver == false, \"Metria Sale is over you cannot buy now\");\r\n        uint256 tokensPurchased = _amount.div(rate);\r\n        totalTokensSold = totalTokensSold.add(tokensPurchased);\r\n        uint256 userUpdatedBalance = claimable[msg.sender].add(tokensPurchased);\r\n        require( _amount.add(usdt.balanceOf(address(this))) <= hardcap, \"Hardcap for the tokens reached\");\r\n        // for USDT\r\n        require(userUpdatedBalance.div(rate) <= allowedUserBalance, \"Exceeded allowed user balance\");\r\n        doTransferIn(address(usdt), msg.sender, _amount);\r\n        claimable[msg.sender] = userUpdatedBalance;\r\n\r\n        participatedUsers.push(msg.sender);\r\n\r\n        emit ClaimableAmount(msg.sender, tokensPurchased);\r\n    }\r\n\r\n    /*\r\n     * @notice get user list\r\n     * @return userAddress: user address list\r\n     * @return amount : user wise claimable amount list\r\n     */\r\n    function getUsersList(uint startIndex, uint endIndex) external view returns(address[] memory userAddress, uint[] memory amount){\r\n        uint length = endIndex.sub(startIndex);\r\n        address[] memory _userAddress = new address[](length);\r\n        uint[] memory _amount = new uint[](length);\r\n\r\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address user = participatedUsers[i];\r\n            uint listIndex = i.sub(startIndex);\r\n            _userAddress[listIndex] = user;\r\n            _amount[listIndex] = claimable[user];\r\n        }\r\n\r\n        return (_userAddress, _amount);\r\n    }\r\n\r\n    /*\r\n     * @notice do transfer in - tranfer token to contract\r\n     * @param tokenAddress: token address to transfer in contract\r\n     * @param from : user address from where to transfer token to contract\r\n     * @param amount : amount to trasnfer \r\n     */\r\n    function doTransferIn(\r\n        address tokenAddress,\r\n        address from,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        INonStandardERC20 _token = INonStandardERC20(tokenAddress);\r\n        uint256 balanceBefore = INonStandardERC20(tokenAddress).balanceOf(address(this));\r\n        _token.transferFrom(from, address(this), amount);\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    // This is a non-standard ERC-20\r\n                    success := not(0) // set success to true\r\n                }\r\n                case 32 {\r\n                    // This is a compliant ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0) // Set success = returndata of external call\r\n                }\r\n                default {\r\n                    // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n        // Calculate the amount that was actually transferred\r\n        uint256 balanceAfter = INonStandardERC20(tokenAddress).balanceOf(address(this));\r\n        require(balanceAfter >= balanceBefore, \"TOKEN_TRANSFER_IN_OVERFLOW\");\r\n        return balanceAfter.sub(balanceBefore); // underflow already checked above, just subtract\r\n    }\r\n\r\n    /*\r\n     * @notice do transfer out - tranfer token from contract\r\n     * @param tokenAddress: token address to transfer from contract\r\n     * @param to : user address to where transfer token from contract\r\n     * @param amount : amount to trasnfer \r\n     */\r\n    function doTransferOut(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        INonStandardERC20 _token = INonStandardERC20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        bool success;\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    // This is a non-standard ERC-20\r\n                    success := not(0) // set success to true\r\n                }\r\n                case 32 {\r\n                    // This is a complaint ERC-20\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0) // Set success = returndata of external call\r\n                }\r\n                default {\r\n                    // This is an excessively non-compliant ERC-20, revert.\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n    }\r\n\r\n    /*\r\n     * @notice funds withdraw\r\n     * @param _value: usdt value to transfer from contract to owner\r\n     */\r\n    function fundsWithdrawal(uint256 _value) external onlyOwner isPresaleOver {\r\n        doTransferOut(address(usdt), _msgSender(), _value);\r\n    }\r\n\r\n    /*\r\n     * @notice funds withdraw\r\n     * @param _tokenAddress: token address to transfer\r\n     * @param _value: token value to transfer from contract to owner\r\n     */\r\n    function transferAnyERC20Tokens(address _tokenAddress, uint256 _value) external onlyOwner {\r\n        doTransferOut(address(_tokenAddress), _msgSender(), _value);\r\n    }\r\n\r\n    function calculateToken(uint _amountUSDT) public view returns(uint) {\r\n        return _amountUSDT/rate;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedUserBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimableAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowedUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUSDT\",\"type\":\"uint256\"}],\"name\":\"calculateToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedUserBalance\",\"type\":\"uint256\"}],\"name\":\"changeAllowedUserBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"changeHardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"fundsWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalParticipatedUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getUsersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participatedUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetriaSale", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000053d1ac1000000000000000000000000000000000000000000000000000000000003b9aca00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://664aafeb1da3e5e8240ad4faed1827546b24f8903641c83072f1147eff8e2f8b"}]}