{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ncontract Raccoon\r\n{\r\n    struct ProfileData\r\n    {\r\n        uint balance;\r\n        uint locked;\r\n        uint iteration;\r\n        uint feeableTimestamp;\r\n        bool participated;\r\n        bool verified;\r\n        mapping(address => uint) allowance;\r\n    }\r\n\r\n    struct PoolData\r\n    {\r\n        uint opened;\r\n        uint deadlineGate;\r\n        uint deadline;\r\n        uint locked;\r\n        uint volume;\r\n    }\r\n\r\n    string private name_;\r\n    string private symbol_;\r\n    uint private decimals_;\r\n    uint private totalSupply_;\r\n    uint private maxSupply_;\r\n\r\n    uint private mintPrice;\r\n    uint private mintCounter;\r\n\r\n    uint private verificationFee;\r\n    uint private transactionFeeCap;\r\n    uint private transactionFeePaid;\r\n    uint private iteration;\r\n\r\n    address payable private owner;\r\n    address private utility;\r\n\r\n    mapping(address => ProfileData) private profiles;\r\n    mapping(uint => PoolData) private pools;\r\n    \r\n    event Transfer(address indexed sender, address indexed recipient, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Verification(address indexed user);\r\n    event Mint(address indexed user, uint valueETH, uint valueRAC);\r\n    event Fee(address indexed user, uint iteration, uint value);\r\n    event Gate(address indexed user, uint iteration, string status);\r\n    event Traffic(address indexed user, uint iteration, string status);\r\n    event Reward(address indexed user, uint iteration, uint locked, uint reward);\r\n    \r\n    constructor()\r\n    {\r\n        name_ = \"Raccoon\";\r\n        symbol_ = \"RAC\";\r\n        decimals_ = 18;\r\n        maxSupply_ = 8000000000 * 10 ** decimals_;\r\n        totalSupply_ = maxSupply_ * 75 / 100;\r\n        verificationFee = 3000 * 10 ** decimals_;\r\n        transactionFeeCap = 20000000 * 10 ** decimals_;\r\n        mintPrice = 0.000003333333333 ether;\r\n        owner = payable(address(0xC908d58587Bfee67B07b6B41229529E79cE605Ca));\r\n        utility = address(0xC5C24a2383Bf5199D1e6E6225C21cC379e362BE5);\r\n        profiles[owner].balance = maxSupply_ * 15 / 100;\r\n        profiles[utility].balance = maxSupply_ * 60 / 100;\r\n        emit Transfer(address(0), owner, profiles[owner].balance);\r\n        emit Transfer(address(0), utility, profiles[utility].balance);\r\n        openPool();\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVerified\r\n    {\r\n        require(profiles[msg.sender].verified);\r\n        _;\r\n    }\r\n    \r\n    function name() external view returns (string memory)\r\n    {\r\n        return name_;\r\n    }\r\n    \r\n    function symbol() external view returns (string memory)\r\n    {\r\n        return symbol_;\r\n    }\r\n    \r\n    function decimals() external view returns (uint)\r\n    {\r\n        return decimals_;\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint)\r\n    {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function maxSupply() external view returns (uint)\r\n    {\r\n        return maxSupply_;\r\n    }\r\n    \r\n    function balanceOf(address _owner) external view returns (uint)\r\n    {\r\n        return profiles[_owner].balance;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint)\r\n    {\r\n        return profiles[_owner].allowance[_spender];\r\n    }\r\n\r\n    function cycle() external view returns (uint)\r\n    {\r\n        return iteration;\r\n    }\r\n\r\n    function mintsCounter() external view returns (uint)\r\n    {\r\n        return mintCounter;\r\n    }\r\n\r\n    function isVerified(address _owner) external view returns (bool)\r\n    {\r\n        return profiles[_owner].verified;\r\n    }\r\n\r\n    function pool(uint _iteration) external view returns (PoolData memory)\r\n    {\r\n        require(validIteration(_iteration));\r\n        return pools[_iteration];\r\n    }\r\n\r\n    function isPoolInitialized(uint _iteration) public view returns (bool)\r\n    {\r\n        require(validIteration(_iteration));\r\n        return pools[_iteration].opened > 0;\r\n    }\r\n\r\n    function isPoolGatesOpen(uint _iteration) public view returns (bool)\r\n    {\r\n        require(validIteration(_iteration));\r\n        return pools[_iteration].deadlineGate >= block.timestamp ? true : false;\r\n    }\r\n\r\n    function isPoolRunning(uint _iteration) public view returns (bool)\r\n    {\r\n        require(validIteration(_iteration));\r\n        return pools[_iteration].deadline >= block.timestamp ? true : false;\r\n    }\r\n\r\n    function poolJoined(address _owner) external view returns (uint itr, uint lkd)\r\n    {\r\n        require(_owner != address(0));\r\n        return (profiles[_owner].iteration, profiles[_owner].locked);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) external returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        profiles[msg.sender].allowance[_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfering(address _from, address _to, uint _value) private\r\n    {\r\n        profiles[_from].balance -= _value;\r\n        profiles[_to].balance += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        transferingFee(_from, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) external returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n        require(_value <= profiles[msg.sender].balance);\r\n        transfering(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success)\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != _from);\r\n        require(_value <= profiles[_from].balance);\r\n        require(_value <= profiles[_from].allowance[msg.sender]);\r\n        profiles[_from].allowance[msg.sender] -= _value;\r\n        transfering(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferingFee(address _from, uint _value) private\r\n    {\r\n        if (profiles[_from].feeableTimestamp + 1 hours <= block.timestamp)\r\n        {\r\n            if (transactionFeePaid < transactionFeeCap)\r\n            {\r\n                profiles[_from].feeableTimestamp = block.timestamp;\r\n                uint fee = _value >= 100 ? (_value / 100) : 0;\r\n                uint pay = transactionFeePaid + fee <= transactionFeeCap ? fee : transactionFeeCap - transactionFeePaid;\r\n                if (pay <= profiles[utility].balance)\r\n                {\r\n                    profiles[utility].balance -= pay;\r\n                    pools[iteration].volume += pay;\r\n                    emit Fee(utility, iteration, pay);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mint() payable external returns (bool success)\r\n    {\r\n        uint amount = 10 ** decimals_ * msg.value / mintPrice;\r\n        amount = mintCounter <= 1618 ? amount * 115 / 100 : amount;\r\n        require(amount + totalSupply_ <= maxSupply_);\r\n        profiles[msg.sender].balance += amount;\r\n        totalSupply_ += amount;\r\n        mintCounter++;\r\n        emit Mint(msg.sender, msg.value, amount);\r\n        return true;\r\n    }\r\n\r\n    function verify() external returns (bool)\r\n    {\r\n        require(!profiles[msg.sender].verified);\r\n        require(profiles[msg.sender].balance >= verificationFee);\r\n        profiles[msg.sender].balance -= verificationFee;\r\n        profiles[msg.sender].verified = true;\r\n        pools[iteration].volume += verificationFee;\r\n        emit Verification(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function managePool() external returns (bool)\r\n    {\r\n        require(isPoolInitialized(iteration));\r\n        require(!isPoolRunning(iteration));\r\n        closePool();\r\n        openPool();\r\n        return true;\r\n    }\r\n\r\n    function openPool() private\r\n    {\r\n        pools[iteration].opened = block.timestamp;\r\n        pools[iteration].deadlineGate = block.timestamp + 8 hours;\r\n        pools[iteration].deadline = block.timestamp + 7 days;\r\n        transactionFeePaid = 0;\r\n        emit Gate(msg.sender, iteration, \"open\");\r\n    }\r\n\r\n    function closePool() private\r\n    {\r\n        emit Gate(msg.sender, iteration, \"close\");\r\n        iteration++;\r\n    }\r\n\r\n    function joinPool(uint _stake) onlyVerified external returns (bool)\r\n    {\r\n        require(isPoolGatesOpen(iteration));\r\n        require(_stake > 0);\r\n        require(profiles[msg.sender].participated == false);\r\n        require(profiles[msg.sender].balance >= _stake);\r\n        profiles[msg.sender].balance -= _stake;\r\n        profiles[msg.sender].participated = true;\r\n        profiles[msg.sender].iteration = iteration;\r\n        profiles[msg.sender].locked = _stake;\r\n        pools[iteration].locked += _stake;\r\n        emit Traffic(msg.sender, iteration, \"joined\");\r\n        return true;\r\n    }\r\n\r\n    function leavePool() onlyVerified external returns (bool)\r\n    {\r\n        require(isPoolGatesOpen(iteration));\r\n        uint index = profiles[msg.sender].iteration;\r\n        uint locked = profiles[msg.sender].locked;\r\n        require(index == iteration);\r\n        profiles[msg.sender].locked = 0;\r\n        profiles[msg.sender].iteration = 0;\r\n        profiles[msg.sender].participated = false;\r\n        profiles[msg.sender].balance += locked;\r\n        pools[index].locked -= locked;\r\n        emit Traffic(msg.sender, index, \"left\");\r\n        return true;\r\n    }\r\n\r\n    function claimReward() onlyVerified external returns (uint itr, uint lkd, uint rwd)\r\n    {\r\n        itr = profiles[msg.sender].iteration;\r\n        require(profiles[msg.sender].participated);\r\n        require(isPoolInitialized(itr));\r\n        require(!isPoolRunning(itr));\r\n        lkd = profiles[msg.sender].locked;\r\n        rwd = pools[itr].volume * lkd / pools[itr].locked;\r\n        profiles[msg.sender].locked = 0;\r\n        profiles[msg.sender].iteration = 0;\r\n        profiles[msg.sender].participated = false;\r\n        profiles[msg.sender].balance += lkd + rwd;\r\n        emit Reward(msg.sender, itr, lkd, rwd);\r\n        emit Traffic(msg.sender, itr, \"left\");\r\n        return (itr, lkd, rwd);\r\n    }\r\n\r\n    function validIteration(uint _iteration) private view returns (bool)\r\n    {\r\n        require(_iteration <= iteration);\r\n        return true;\r\n    }\r\n\r\n    function withdraw() external onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"Gate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueRAC\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"Traffic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Verification\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rwd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iteration\",\"type\":\"uint256\"}],\"name\":\"isPoolGatesOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iteration\",\"type\":\"uint256\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iteration\",\"type\":\"uint256\"}],\"name\":\"isPoolRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leavePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iteration\",\"type\":\"uint256\"}],\"name\":\"pool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"opened\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineGate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"internalType\":\"struct Raccoon.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"poolJoined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Raccoon", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c4005f8e3d04ac288d6b2ba06f3c8afdee4082180a63fb892b18fda3767651c"}]}