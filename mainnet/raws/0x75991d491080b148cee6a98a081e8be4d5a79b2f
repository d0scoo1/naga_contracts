{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts@4.6.0/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.6.0/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: branch.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ncontract FMG is Ownable{\r\n\r\n    string private _name = \"FMG\";\r\n    string private _symbol = \"FMG\";\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    //\u5408\u7ea6\u5206\u8d26\r\n    bool private locked = false; //\u8f6c\u8d26\u5f00\u5173\r\n    uint256  shareamount = 0.01 ether;  //\u9ed8\u8ba4\u74dc\u5206\u989d\r\n\r\n    address[] public partition = [0xC52318EF9f7F2369532A0Fcd574A4a6949a990F7,0x45Cf1ea0B9300eEeCC9401aeC26026D17C1e9e1a,0xB7D250d516D9A1CE2C66482eEC8fD698992A0D4B,0x6af1995C77B8D71cdc637D7578996d68566f1a81,0x0F00E39ac3EEB521716c3e6557A8CbF9D709a324,0x2EcBbEe7EcA1629D55330aa0f814cb0FF8F00044,0xBa1381EA6C57E9C181Dd49c72160CCC0A21f92f1,0x7Dcb9c9Ba9c814F6292Ed08578679889ea6c87f4,0xF938C64Ee25152af903c5C173B4808157E078a42,0x0dc3f4698C7De825493E1AEBFd0C0845456b75A0];\r\n    uint[] public partitionRatio= [5,10,10,10,10,10,10,3,30,2];\r\n\r\n    receive() external payable {} \r\n    //\u8bbe\u7f6e\u74dc\u5206ETH\r\n    function setEth(uint _eth) public onlyOwner\r\n    {\r\n        shareamount = _eth;\r\n    }\r\n    //\u83b7\u53d6\u5f00\u5173\u72b6\u6001\r\n    function getEth() public view returns(uint)\r\n    {\r\n        return shareamount;\r\n    }\r\n\r\n    //\u74dc\u5206\u8d26\u6237\r\n    function getPartition() public view returns(address[] memory)\r\n    {\r\n        return partition;\r\n    }\r\n    //\u74dc\u5206\u6bd4\u4f8b\r\n    function getPartitionRatio() public view returns(uint[] memory)\r\n    {\r\n        return partitionRatio;\r\n    }\r\n\r\n    //\u4fee\u6539\u74dc\u5206\u6bd4\u4f8b\r\n   function setPartition(address _setAddress,uint _proportion) public returns(address,uint){\r\n\r\n        for(uint i=0; i < partition.length;i++){\r\n            if(partition[i] == _setAddress){\r\n                partitionRatio[i]=_proportion;\r\n            }\r\n        }\r\n        return (_setAddress,_proportion);\r\n\r\n    }\r\n\r\n    //\u67e5\u8be2\u5730\u5740\u6bd4\u4f8b\r\n    function lookPartition(address _lookAddress) public view returns(address,uint){\r\n\r\n        for(uint i=0; i < partition.length;i++){\r\n            if(_lookAddress == partition[i]){\r\n                return (_lookAddress,partitionRatio[i]);\r\n            }\r\n        }\r\n        return (_lookAddress,0);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u5f00\u5173\r\n    function setLocked(bool _locked) public onlyOwner\r\n    {\r\n        locked = _locked;\r\n    }\r\n    //\u83b7\u53d6\u5f00\u5173\u72b6\u6001\r\n    function getLocked() public view returns(bool)\r\n    {\r\n        return locked;\r\n    }\r\n    //\u83b7\u53d6\u91d1\u989d\r\n    function getUserBalance(address _address) public view returns (uint256){\r\n        return _address.balance;\r\n    }\r\n\r\n    function getOwnerBlance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getUserBlance() public view returns (uint) {\r\n        return msg.sender.balance;\r\n    }\r\n\r\n    //\u8f6c\u8d26\r\n    function transferAccounts(address _address,uint num) private{\r\n\r\n        require(num >= 0 && num < 1 ether , \"num 1!\");//\u6700\u5927\u9650\u5236\r\n        payable(_address).transfer(num) ;\r\n        \r\n    }\r\n\r\n    //\u8fdb\u884c\u5206\u8d26\r\n    function fashionable() public  onlyOwner ()\r\n    {\r\n\r\n        uint amount;\r\n        require(!locked, \" lock!\");//\u9632\u6b62\u653b\u51fb\r\n        amount=getOwnerBlance();\r\n\t\tuint256 _shareamount = shareamount;\r\n        require(amount >= _shareamount,\"Can divide the amount is insufficient\");\r\n\t\taddress[] memory _partition = partition;\r\n\t\tuint256[] memory _partitionRatio = partitionRatio;\r\n\t\tlocked = true;\r\n        for(uint i=0;i<partition.length;i++){\r\n\t\t\ttransferAccounts(_partition[i], _shareamount*_partitionRatio[i]/100);\r\n\t\t}\r\n\r\n        locked = false;\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fashionable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerBlance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartition\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartitionRatio\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserBlance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lookAddress\",\"type\":\"address\"}],\"name\":\"lookPartition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partitionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"setEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proportion\",\"type\":\"uint256\"}],\"name\":\"setPartition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FMG", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://771efdc863415ed91ab1252b05bdb3d981308b6b50a4e6bbb6399482c4fcab21"}]}