{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/macrov/src/binance/dex/nft-dex-contract-v3/contracts/WyvernAtomicizer.sol\": {\r\n      \"content\": \"/*\\n\\n  << Wyvern Atomicizer >>\\n\\n  Execute multiple transactions, in order, atomically (if any fails, all revert).\\n\\n*/\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"./lib/ArrayUtils.sol\\\";\\n\\n/**\\n * @title WyvernAtomicizer\\n * @author Wyvern Protocol Developers\\n */\\nlibrary WyvernAtomicizer {\\n\\n    function atomicize (address[] calldata addrs, uint[] calldata values, uint[] calldata calldataLengths, bytes calldata calldatas)\\n        external\\n    {\\n        require(addrs.length == values.length && addrs.length == calldataLengths.length, \\\"Addresses, calldata lengths, and values must match in quantity\\\");\\n\\n        uint j = 0;\\n        for (uint i = 0; i < addrs.length; i++) {\\n            bytes memory cd = new bytes(calldataLengths[i]);\\n            for (uint k = 0; k < calldataLengths[i]; k++) {\\n                cd[k] = calldatas[j];\\n                j++;\\n            }\\n            (bool success,) = addrs[i].call{value: values[i]}(cd);\\n            require(success, \\\"Atomicizer subcall failed\\\");\\n        }\\n    }\\n\\n    // Transfer bundle assets since the amount of assets is dynamic.\\n    function atomicizeCustom (address[] calldata addrs, uint[] calldata values, uint[] calldata calldataLengths, bytes calldata calldatas)\\n        external\\n    {\\n        require(addrs.length == values.length && addrs.length == calldataLengths.length, \\\"Addresses, calldata lengths, and values must match in quantity\\\");\\n\\n        uint start = 0;\\n        for (uint i = 0; i < addrs.length; i++) {\\n            if (i > 0) {\\n                start += calldataLengths[i - 1];\\n            }\\n\\n            bytes memory cd = ArrayUtils.arraySlice(calldatas, start, calldataLengths[i]);\\n            (bool success,) = addrs[i].call{value: values[i]}(cd);\\n            require(success, \\\"Atomicizer subcall failed\\\");\\n        }\\n    }\\n\\n    function atomicize1 (address addr, uint256 value, bytes calldata data) external {\\n        uint amount = value;\\n        if (msg.value != 0) {\\n            amount = msg.value;\\n        }\\n        (bool success,) = addr.call{value: amount}(data);\\n        require(success, \\\"Atomicizer1 call failed\\\");\\n    }\\n\\n    function atomicize2 (address[] calldata addrs, uint[] calldata values, bytes calldata calldata0, bytes calldata calldata1) external {\\n        require(addrs.length == values.length && addrs.length == 2, \\\"Addresses and values must match in quantity 2\\\");\\n\\n        (bool success,) = addrs[0].call{value: values[0]}(calldata0);\\n        require(success, \\\"Atomicizer2 firstcall failed\\\");\\n\\n        (success,) = addrs[1].call{value: values[1]}(calldata1);\\n        require(success, \\\"Atomicizer2 secondcall failed\\\");\\n    }\\n\\n    function atomicize3 (address[] calldata addrs, uint[] calldata values,\\n        bytes calldata calldata0, bytes calldata calldata1, bytes calldata calldata2) external {\\n        require(addrs.length == values.length && addrs.length == 3, \\\"Addresses and values must match in quantity 3\\\");\\n\\n        (bool success,) = addrs[0].call{value: values[0]}(calldata0);\\n        require(success, \\\"Atomicizer3 firstcall failed\\\");\\n\\n        (success,) = addrs[1].call{value: values[1]}(calldata1);\\n        require(success, \\\"Atomicizer3 secondcall failed\\\");\\n\\n        (success,) = addrs[2].call{value: values[2]}(calldata2);\\n        require(success, \\\"Atomicizer3 thirdcall failed\\\");\\n    }\\n\\n    function atomicize4 (address[] calldata addrs, uint[] calldata values, bytes calldata calldata0,\\n        bytes calldata calldata1, bytes calldata calldata2, bytes calldata calldata3) external {\\n        require(addrs.length == values.length && addrs.length == 4, \\\"Addresses and values must match in quantity 4\\\");\\n\\n        (bool success,) = addrs[0].call{value: values[0]}(calldata0);\\n        require(success, \\\"Atomicizer4 firstcall failed\\\");\\n\\n        (success,) = addrs[1].call{value: values[1]}(calldata1);\\n        require(success, \\\"Atomicizer4 secondcall failed\\\");\\n\\n        (success,) = addrs[2].call{value: values[2]}(calldata2);\\n        require(success, \\\"Atomicizer4 thirdcall failed\\\");\\n\\n        (success,) = addrs[3].call{value: values[3]}(calldata3);\\n        require(success, \\\"Atomicizer4 forthcall failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/macrov/src/binance/dex/nft-dex-contract-v3/contracts/lib/ArrayUtils.sol\": {\r\n      \"content\": \"/*\\n\\n  << ArrayUtils >>\\n\\n  Various functions for manipulating arrays in Solidity.\\n  This library is completely inlined and does not need to be deployed or linked.\\n\\n*/\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title ArrayUtils\\n * @author Wyvern Protocol Developers\\n */\\nlibrary ArrayUtils {\\n\\n    /**\\n     * Replace bytes in an array with bytes in another array, guarded by a bitmask\\n     * Efficiency of this function is a bit unpredictable because of the EVM's word-specific model (arrays under 32 bytes will be slower)\\n     * Modifies the provided byte array parameter in place\\n     * \\n     * @dev Mask must be the size of the byte array. A nonzero byte means the byte array can be changed.\\n     * @param array The original array\\n     * @param desired The target array\\n     * @param mask The mask specifying which bits can be changed\\n     */\\n    function guardedArrayReplace(bytes memory array, bytes memory desired, bytes memory mask)\\n        internal\\n        pure\\n    {\\n        require(array.length == desired.length, \\\"Arrays have different lengths\\\");\\n        require(array.length == mask.length, \\\"Array and mask have different lengths\\\");\\n\\n        uint words = array.length / 0x20;\\n        uint index = words * 0x20;\\n        assert(index / 0x20 == words);\\n        uint i;\\n\\n        for (i = 0; i < words; i++) {\\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\\n            assembly {\\n                let commonIndex := mul(0x20, add(1, i))\\n                let maskValue := mload(add(mask, commonIndex))\\n                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\\n            }\\n        }\\n\\n        /* Deal with the last section of the byte array. */\\n        if (words > 0) {\\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\\n            i = words;\\n            assembly {\\n                let commonIndex := mul(0x20, add(1, i))\\n                let maskValue := mload(add(mask, commonIndex))\\n                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\\n            }\\n        } else {\\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\\n            for (i = index; i < array.length; i++) {\\n                array[i] = ((mask[i] ^ 0xff) & array[i]) | (mask[i] & desired[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test if two arrays are equal\\n     * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n     * \\n     * @dev Arrays must be of equal length, otherwise will return false\\n     * @param a First array\\n     * @param b Second array\\n     * @return Whether or not all bytes in the arrays are equal\\n     */\\n    function arrayEq(bytes memory a, bytes memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(a)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(b))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(a, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(b, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    /**\\n     * Drop the beginning of an array\\n     *\\n     * @param _bytes array\\n     * @param _start start index\\n     * @return Whether or not all bytes in the arrays are equal\\n     */\\n    function arrayDrop(bytes memory _bytes, uint _start)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n\\n        uint _length = SafeMath.sub(_bytes.length, _start);\\n        return arraySlice(_bytes, _start, _length);\\n    }\\n\\n    /**\\n     * Take from the beginning of an array\\n     *\\n     * @param _bytes array\\n     * @param _length elements to take\\n     * @return Whether or not all bytes in the arrays are equal\\n     */\\n    function arrayTake(bytes memory _bytes, uint _length)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n\\n        return arraySlice(_bytes, 0, _length);\\n    }\\n\\n    /**\\n     * Slice an array\\n     * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n     *\\n     * @param _bytes array\\n     * @param _start start index\\n     * @param _length length to take\\n     * @return Whether or not all bytes in the arrays are equal\\n     */\\n    function arraySlice(bytes memory _bytes, uint _start, uint _length)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    /**\\n     * Unsafe write byte array into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source Byte array to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteBytes(uint index, bytes memory source)\\n        internal\\n        pure\\n        returns (uint)\\n    {\\n        if (source.length > 0) {\\n            assembly {\\n                let length := mload(source)\\n                let end := add(source, add(0x20, length))\\n                let arrIndex := add(source, 0x20)\\n                let tempIndex := index\\n                for { } eq(lt(arrIndex, end), 1) {\\n                    arrIndex := add(arrIndex, 0x20)\\n                    tempIndex := add(tempIndex, 0x20)\\n                } {\\n                    mstore(tempIndex, mload(arrIndex))\\n                }\\n                index := add(index, length)\\n            }\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * Unsafe write address into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source Address to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteAddress(uint index, address source)\\n        internal\\n        pure\\n        returns (uint)\\n    {\\n        uint conv = uint(source) << 0x60;\\n        assembly {\\n            mstore(index, conv)\\n            index := add(index, 0x14)\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * Unsafe write uint into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source uint to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteUint(uint index, uint source)\\n        internal\\n        pure\\n        returns (uint)\\n    {\\n        assembly {\\n            mstore(index, source)\\n            index := add(index, 0x20)\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * Unsafe write uint8 into a memory location\\n     *\\n     * @param index Memory location\\n     * @param source uint8 to write\\n     * @return End memory index\\n     */\\n    function unsafeWriteUint8(uint index, uint8 source)\\n        internal\\n        pure\\n        returns (uint)\\n    {\\n        assembly {\\n            mstore8(index, source)\\n            index := add(index, 0x1)\\n        }\\n        return index;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 750\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[]", "ContractName": "WyvernAtomicizer", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "750", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}